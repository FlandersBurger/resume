angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.tabindex","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.multiMap","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/year.html","uib/template/datepickerPopup/popup.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("uibCollapse",["$animate","$q","$parse","$injector",function(f,m,g,e){var h=e.has("$animateCss")?e.get("$animateCss"):null;return{link:function(t,n,e){var a=g(e.expanding),i=g(e.expanded),o=g(e.collapsing),r=g(e.collapsed),l=!1,s={},u={};function p(e){return l?{width:e.scrollWidth+"px"}:{height:e.scrollHeight+"px"}}function c(){n.removeClass("collapsing").addClass("collapse").css(s),i(t)}function d(){n.css(u),n.removeClass("collapsing").addClass("collapse"),r(t)}!function(){(l=!!("horizontal"in e))?(s={width:""},u={width:"0"}):(s={height:""},u={height:"0"});t.$eval(e.uibCollapse)||n.addClass("in").addClass("collapse").attr("aria-expanded",!0).attr("aria-hidden",!1).css(s)}(),t.$watch(e.uibCollapse,function(e){e?function(){if(!n.hasClass("collapse")&&!n.hasClass("in"))return d();m.resolve(o(t)).then(function(){n.css(p(n[0])).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),h?h(n,{removeClass:"in",to:u}).start().finally(d):f.removeClass(n,"in",{to:u}).then(d)},angular.noop)}():n.hasClass("collapse")&&n.hasClass("in")||m.resolve(a(t)).then(function(){n.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),h?h(n,{addClass:"in",easing:"ease",css:{overflow:"hidden"},to:p(n[0])}).start().finally(c):f.addClass(n,"in",{css:{overflow:"hidden"},to:p(n[0])}).then(c)},angular.noop)})}}}]),angular.module("ui.bootstrap.tabindex",[]).directive("uibTabindexToggle",function(){return{restrict:"A",link:function(e,t,n){n.$observe("disabled",function(e){n.$set("tabindex",e?-1:null)})}}}),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse","ui.bootstrap.tabindex"]).constant("uibAccordionConfig",{closeOthers:!0}).controller("UibAccordionController",["$scope","$attrs","uibAccordionConfig",function(e,n,a){this.groups=[],this.closeOthers=function(t){(angular.isDefined(n.closeOthers)?e.$eval(n.closeOthers):a.closeOthers)&&angular.forEach(this.groups,function(e){e!==t&&(e.isOpen=!1)})},this.addGroup=function(t){var n=this;this.groups.push(t),t.$on("$destroy",function(e){n.removeGroup(t)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("uibAccordion",function(){return{controller:"UibAccordionController",controllerAs:"accordion",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion.html"}}}).directive("uibAccordionGroup",function(){return{require:"^uibAccordion",transclude:!0,restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion-group.html"},scope:{heading:"@",panelClass:"@?",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(t,n,e,a){n.addClass("panel"),a.addGroup(t),t.openClass=e.openClass||"panel-open",t.panelClass=e.panelClass||"panel-default",t.$watch("isOpen",function(e){n.toggleClass(t.openClass,!!e),e&&a.closeOthers(t)}),t.toggleOpen=function(e){t.isDisabled||e&&32!==e.which||(t.isOpen=!t.isOpen)};var i="accordiongroup-"+t.$id+"-"+Math.floor(1e4*Math.random());t.headingId=i+"-tab",t.panelId=i+"-panel"}}}).directive("uibAccordionHeading",function(){return{transclude:!0,template:"",replace:!0,require:"^uibAccordionGroup",link:function(e,t,n,a,i){a.setHeading(i(e,angular.noop))}}}).directive("uibAccordionTransclude",function(){return{require:"^uibAccordionGroup",link:function(e,n,t,a){e.$watch(function(){return a[t.uibAccordionTransclude]},function(e){if(e){var t=angular.element(n[0].querySelector("uib-accordion-header,data-uib-accordion-header,x-uib-accordion-header,uib\\:accordion-header,[uib-accordion-header],[data-uib-accordion-header],[x-uib-accordion-header]"));t.html(""),t.append(e)}})}}}),angular.module("ui.bootstrap.alert",[]).controller("UibAlertController",["$scope","$element","$attrs","$interpolate","$timeout",function(e,t,n,a,i){e.closeable=!!n.close,t.addClass("alert"),n.$set("role","alert"),e.closeable&&t.addClass("alert-dismissible");var o=angular.isDefined(n.dismissOnTimeout)?a(n.dismissOnTimeout)(e.$parent):null;o&&i(function(){e.close()},parseInt(o,10))}]).directive("uibAlert",function(){return{controller:"UibAlertController",controllerAs:"alert",restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/alert/alert.html"},transclude:!0,scope:{close:"&"}}}),angular.module("ui.bootstrap.buttons",[]).constant("uibButtonConfig",{activeClass:"active",toggleEvent:"click"}).controller("UibButtonsController",["uibButtonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("uibBtnRadio",["$parse",function(l){return{require:["uibBtnRadio","ngModel"],controller:"UibButtonsController",controllerAs:"buttons",link:function(t,n,a,e){var i=e[0],o=e[1],r=l(a.uibUncheckable);n.find("input").css({display:"none"}),o.$render=function(){n.toggleClass(i.activeClass,angular.equals(o.$modelValue,t.$eval(a.uibBtnRadio)))},n.on(i.toggleEvent,function(){if(!a.disabled){var e=n.hasClass(i.activeClass);e&&!angular.isDefined(a.uncheckable)||t.$apply(function(){o.$setViewValue(e?null:t.$eval(a.uibBtnRadio)),o.$render()})}}),a.uibUncheckable&&t.$watch(r,function(e){a.$set("uncheckable",e?"":void 0)})}}}]).directive("uibBtnCheckbox",function(){return{require:["uibBtnCheckbox","ngModel"],controller:"UibButtonsController",controllerAs:"button",link:function(n,e,t,a){var i=a[0],o=a[1];function r(){return l(t.btnCheckboxTrue,!0)}function l(e,t){return angular.isDefined(e)?n.$eval(e):t}e.find("input").css({display:"none"}),o.$render=function(){e.toggleClass(i.activeClass,angular.equals(o.$modelValue,r()))},e.on(i.toggleEvent,function(){t.disabled||n.$apply(function(){o.$setViewValue(e.hasClass(i.activeClass)?l(t.btnCheckboxFalse,!1):r()),o.$render()})})}}}),angular.module("ui.bootstrap.carousel",[]).controller("UibCarouselController",["$scope","$element","$interval","$timeout","$animate",function(i,o,t,e,r){var n,a,l=this,s=l.slides=i.slides=[],u="uib-slideDirection",p=i.active,c=!1;function d(e){for(var t=0;t<s.length;t++)s[t].slide.active=t===e}function f(e){for(var t=0;t<s.length;t++)if(s[t].slide===e)return t}function m(){n&&(t.cancel(n),n=null)}function g(){m();var e=+i.interval;!isNaN(e)&&0<e&&(n=t(h,e))}function h(){var e=+i.interval;a&&!isNaN(e)&&0<e&&s.length?i.next():i.pause()}o.addClass("carousel"),l.addSlide=function(e,t){s.push({slide:e,element:t}),s.sort(function(e,t){return+e.slide.index-+t.slide.index}),(e.index===i.active||1===s.length&&!angular.isNumber(i.active))&&(i.$currentTransition&&(i.$currentTransition=null),p=e.index,i.active=e.index,d(p),l.select(s[f(e)]),1===s.length&&i.play())},l.getCurrentIndex=function(){for(var e=0;e<s.length;e++)if(s[e].slide.index===p)return e},l.next=i.next=function(){var e=(l.getCurrentIndex()+1)%s.length;if(0!==e||!i.noWrap())return l.select(s[e],"next");i.pause()},l.prev=i.prev=function(){var e=l.getCurrentIndex()-1<0?s.length-1:l.getCurrentIndex()-1;if(!i.noWrap()||e!==s.length-1)return l.select(s[e],"prev");i.pause()},l.removeSlide=function(e){var t=f(e);s.splice(t,1),0<s.length&&p===t?t>=s.length?(p=s.length-1,d(i.active=p),l.select(s[s.length-1])):(p=t,d(i.active=p),l.select(s[t])):t<p&&(p--,i.active=p),0===s.length&&(p=null,i.active=null)},l.select=i.select=function(e,t){var n=f(e.slide);void 0===t&&(t=n>l.getCurrentIndex()?"next":"prev"),e.slide.index===p||i.$currentTransition||function(e,t,n){if(c)return;if(angular.extend(e,{direction:n}),angular.extend(s[p].slide||{},{direction:n}),r.enabled(o)&&!i.$currentTransition&&s[t].element&&1<l.slides.length){s[t].element.data(u,e.direction);var a=l.getCurrentIndex();angular.isNumber(a)&&s[a].element&&s[a].element.data(u,e.direction),i.$currentTransition=!0,r.on("addClass",s[t].element,function(e,t){"close"===t&&(i.$currentTransition=null,r.off("addClass",e))})}i.active=e.index,p=e.index,d(t),g()}(e.slide,n,t)},i.indexOfSlide=function(e){return+e.slide.index},i.isActive=function(e){return i.active===e.slide.index},i.isPrevDisabled=function(){return 0===i.active&&i.noWrap()},i.isNextDisabled=function(){return i.active===s.length-1&&i.noWrap()},i.pause=function(){i.noPause||(a=!1,m())},i.play=function(){a||(a=!0,g())},o.on("mouseenter",i.pause),o.on("mouseleave",i.play),i.$on("$destroy",function(){c=!0,m()}),i.$watch("noTransition",function(e){r.enabled(o,!e)}),i.$watch("interval",g),i.$watchCollection("slides",function(e){e.length||(i.$currentTransition=null)}),i.$watch("active",function(e){if(angular.isNumber(e)&&p!==e){for(var t=0;t<s.length;t++)if(s[t].slide.index===e){e=t;break}s[e]&&(d(e),l.select(s[e]),p=e)}})}]).directive("uibCarousel",function(){return{transclude:!0,controller:"UibCarouselController",controllerAs:"carousel",restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/carousel.html"},scope:{active:"=",interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}).directive("uibSlide",["$animate",function(i){return{require:"^uibCarousel",restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/slide.html"},scope:{actual:"=?",index:"=?"},link:function(e,t,n,a){t.addClass("item"),a.addSlide(e,t),e.$on("$destroy",function(){a.removeSlide(e)}),e.$watch("active",function(e){i[e?"addClass":"removeClass"](t,"active")})}}}]).animation(".item",["$animateCss",function(r){var l="uib-slideDirection";function s(e,t,n){e.removeClass(t),n&&n()}return{beforeAddClass:function(e,t,n){if("active"===t){var a=e.data(l),i="next"===a?"left":"right",o=s.bind(this,e,i+" "+a,n);return e.addClass(a),r(e,{addClass:i}).start().done(o),function(){!0}}n()},beforeRemoveClass:function(e,t,n){if("active"===t){var a="next"===e.data(l)?"left":"right",i=s.bind(this,e,a,n);return r(e,{addClass:a}).start().done(i),function(){!0}}n()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("uibDateParser",["$log","$locale","dateFilter","orderByFilter","filterFilter",function(g,h,n,b,t){var v,$,y=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;function a(e){return t($,{key:e},!0)[0]}function o(e,t,n){return function(){return e.substr(t+1,n-t-1)}}function r(e,t){for(var n=e.substr(t),a=0;a<$.length;a++)if(new RegExp("^"+$[a].key).test(n)){var i=$[a];return{endIdx:t+i.key.length,parser:i.formatter}}return{endIdx:t+1,parser:function(){return n.charAt(0)}}}function l(e){return parseInt(e,10)}function i(e,t){e=e.replace(/:/g,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function s(e,t){return(e=new Date(e.getTime())).setMinutes(e.getMinutes()+t),e}function u(e,t,n){n=n?-1:1;var a=e.getTimezoneOffset();return s(e,n*(i(t,a)-a))}this.init=function(){v=h.id,this.parsers={},this.formatters={},$=[{key:"yyyy",regex:"\\d{4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yyyy")}},{key:"yy",regex:"\\d{2}",apply:function(e){e=+e,this.year=e<69?e+2e3:e+1900},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yy")}},{key:"y",regex:"\\d{1,4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"y")}},{key:"M!",regex:"0?[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){var t=e.getMonth();return/^[0-9]$/.test(t)?n(e,"MM"):n(e,"M")}},{key:"MMMM",regex:h.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=h.DATETIME_FORMATS.MONTH.indexOf(e)},formatter:function(e){return n(e,"MMMM")}},{key:"MMM",regex:h.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=h.DATETIME_FORMATS.SHORTMONTH.indexOf(e)},formatter:function(e){return n(e,"MMM")}},{key:"MM",regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"MM")}},{key:"M",regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"M")}},{key:"d!",regex:"[0-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){var t=e.getDate();return/^[1-9]$/.test(t)?n(e,"dd"):n(e,"d")}},{key:"dd",regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"dd")}},{key:"d",regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"d")}},{key:"EEEE",regex:h.DATETIME_FORMATS.DAY.join("|"),formatter:function(e){return n(e,"EEEE")}},{key:"EEE",regex:h.DATETIME_FORMATS.SHORTDAY.join("|"),formatter:function(e){return n(e,"EEE")}},{key:"HH",regex:"(?:0|1)[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"HH")}},{key:"hh",regex:"0[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"hh")}},{key:"H",regex:"1?[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"H")}},{key:"h",regex:"[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"h")}},{key:"mm",regex:"[0-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"mm")}},{key:"m",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"m")}},{key:"sss",regex:"[0-9][0-9][0-9]",apply:function(e){this.milliseconds=+e},formatter:function(e){return n(e,"sss")}},{key:"ss",regex:"[0-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"ss")}},{key:"s",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"s")}},{key:"a",regex:h.DATETIME_FORMATS.AMPMS.join("|"),apply:function(e){12===this.hours&&(this.hours=0),"PM"===e&&(this.hours+=12)},formatter:function(e){return n(e,"a")}},{key:"Z",regex:"[+-]\\d{4}",apply:function(e){var t=e.match(/([+-])(\d{2})(\d{2})/),n=t[1],a=t[2],i=t[3];this.hours+=l(n+a),this.minutes+=l(n+i)},formatter:function(e){return n(e,"Z")}},{key:"ww",regex:"[0-4][0-9]|5[0-3]",formatter:function(e){return n(e,"ww")}},{key:"w",regex:"[0-9]|[1-4][0-9]|5[0-3]",formatter:function(e){return n(e,"w")}},{key:"GGGG",regex:h.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g,"\\s"),formatter:function(e){return n(e,"GGGG")}},{key:"GGG",regex:h.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GGG")}},{key:"GG",regex:h.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GG")}},{key:"G",regex:h.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"G")}}],1<=angular.version.major&&4<angular.version.minor&&$.push({key:"LLLL",regex:h.DATETIME_FORMATS.STANDALONEMONTH.join("|"),apply:function(e){this.month=h.DATETIME_FORMATS.STANDALONEMONTH.indexOf(e)},formatter:function(e){return n(e,"LLLL")}})},this.init(),this.getParser=function(e){var t=a(e);return t&&t.apply||null},this.overrideParser=function(e,t){var n=a(e);n&&angular.isFunction(t)&&(this.parsers={},n.apply=t)}.bind(this),this.filter=function(n,e){return angular.isDate(n)&&!isNaN(n)&&e?(e=h.DATETIME_FORMATS[e]||e,h.id!==v&&this.init(),this.formatters[e]||(this.formatters[e]=function(e){for(var t,n,a=[],i=0;i<e.length;)if(angular.isNumber(n)){if("'"===e.charAt(i))(i+1>=e.length||"'"!==e.charAt(i+1))&&(a.push(o(e,n,i)),n=null);else if(i===e.length)for(;n<e.length;)t=r(e,n),a.push(t),n=t.endIdx;i++}else"'"!==e.charAt(i)?(t=r(e,i),a.push(t.parser),i=t.endIdx):(n=i,i++);return a}(e)),this.formatters[e].reduce(function(e,t){return e+t(n)},"")):""},this.parse=function(e,t,n){if(!angular.isString(e)||!t)return e;t=(t=h.DATETIME_FORMATS[t]||t).replace(y,"\\$&"),h.id!==v&&this.init(),this.parsers[t]||(this.parsers[t]=function(i){var o=[],r=i.split(""),e=i.indexOf("'");if(-1<e){var t=!1;i=i.split("");for(var n=e;n<i.length;n++)t?("'"===i[n]&&(n+1<i.length&&"'"===i[n+1]?(i[n+1]="$",r[n+1]=""):(r[n]="",t=!1)),i[n]="$"):"'"===i[n]&&(i[n]="$",t=!(r[n]=""));i=i.join("")}return angular.forEach($,function(e){var t=i.indexOf(e.key);if(-1<t){i=i.split(""),r[t]="("+e.regex+")",i[t]="$";for(var n=t+1,a=t+e.key.length;n<a;n++)r[n]="",i[n]="$";i=i.join(""),o.push({index:t,key:e.key,apply:e.apply,matcher:e.regex})}}),{regex:new RegExp("^"+r.join("")+"$"),map:b(o,"index")}}(t));var a=this.parsers[t],i=a.regex,o=a.map,r=e.match(i),l=!1;if(r&&r.length){var s,u;angular.isDate(n)&&!isNaN(n.getTime())?s={year:n.getFullYear(),month:n.getMonth(),date:n.getDate(),hours:n.getHours(),minutes:n.getMinutes(),seconds:n.getSeconds(),milliseconds:n.getMilliseconds()}:(n&&g.warn("dateparser:","baseDate is not a valid date"),s={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var p=1,c=r.length;p<c;p++){var d=o[p-1];"Z"===d.matcher&&(l=!0),d.apply&&d.apply.call(s,r[p])}var f=l?Date.prototype.setUTCFullYear:Date.prototype.setFullYear,m=l?Date.prototype.setUTCHours:Date.prototype.setHours;return function(e,t,n){if(n<1)return!1;if(1===t&&28<n)return 29===n&&(e%4==0&&e%100!=0||e%400==0);if(3===t||5===t||8===t||10===t)return n<31;return!0}(s.year,s.month,s.date)&&(!angular.isDate(n)||isNaN(n.getTime())||l?(u=new Date(0),f.call(u,s.year,s.month,s.date),m.call(u,s.hours||0,s.minutes||0,s.seconds||0,s.milliseconds||0)):(u=new Date(n),f.call(u,s.year,s.month,s.date),m.call(u,s.hours,s.minutes,s.seconds,s.milliseconds))),u}},this.toTimezone=function(e,t){return e&&t?u(e,t):e},this.fromTimezone=function(e,t){return e&&t?u(e,t,!0):e},this.timezoneToOffset=i,this.addDateMinutes=s,this.convertTimezoneToLocal=u}]),angular.module("ui.bootstrap.isClass",[]).directive("uibIsClass",["$animate",function(p){var r=/^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/,c=/^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;return{restrict:"A",compile:function(e,t){var i=[],l=[],s={},n=t.uibIsClass.match(r),u=n[2],a=n[1].split(",");return function(n,e,t){i.push(n),l.push({scope:n,element:e}),a.forEach(function(e,t){!function(e,t){var n=e.match(c),i=t.$eval(n[1]),a=n[2],o=s[e];if(!o){var r=function(n){var a=null;l.some(function(e){var t=e.scope.$eval(u);if(t===n)return a=e,!0}),o.lastActivated!==a&&(o.lastActivated&&p.removeClass(o.lastActivated.element,i),a&&p.addClass(a.element,i),o.lastActivated=a)};s[e]=o={lastActivated:null,scope:t,watchFn:r,compareWithExp:a,watcher:t.$watch(a,r)}}o.watchFn(t.$eval(a))}(e,n)}),n.$on("$destroy",o)};function o(e){var t=e.targetScope,n=i.indexOf(t);if(i.splice(n,1),l.splice(n,1),i.length){var a=i[0];angular.forEach(s,function(e){e.scope===t&&(e.watcher=a.$watch(e.compareWithExp,e.watchFn),e.scope=a)})}else s={}}}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.isClass"]).value("$datepickerSuppressError",!1).value("$datepickerLiteralWarning",!0).constant("uibDatepickerConfig",{datepickerMode:"day",formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",maxDate:null,maxMode:"year",minDate:null,minMode:"day",monthColumns:3,ngModelOptions:{},shortcutPropagation:!1,showWeeks:!0,yearColumns:5,yearRows:4}).controller("UibDatepickerController",["$scope","$element","$attrs","$parse","$interpolate","$locale","$log","dateFilter","uibDatepickerConfig","$datepickerLiteralWarning","$datepickerSuppressError","uibDateParser",function(r,e,t,n,a,i,o,l,s,u,p,c){var d=this,f={$setViewValue:angular.noop},m={},g=[];e.addClass("uib-datepicker"),t.$set("role","application"),r.datepickerOptions||(r.datepickerOptions={}),this.modes=["day","month","year"],["customClass","dateDisabled","datepickerMode","formatDay","formatDayHeader","formatDayTitle","formatMonth","formatMonthTitle","formatYear","maxDate","maxMode","minDate","minMode","monthColumns","showWeeks","shortcutPropagation","startingDay","yearColumns","yearRows"].forEach(function(t){switch(t){case"customClass":case"dateDisabled":r[t]=r.datepickerOptions[t]||angular.noop;break;case"datepickerMode":r.datepickerMode=angular.isDefined(r.datepickerOptions.datepickerMode)?r.datepickerOptions.datepickerMode:s.datepickerMode;break;case"formatDay":case"formatDayHeader":case"formatDayTitle":case"formatMonth":case"formatMonthTitle":case"formatYear":d[t]=angular.isDefined(r.datepickerOptions[t])?a(r.datepickerOptions[t])(r.$parent):s[t];break;case"monthColumns":case"showWeeks":case"shortcutPropagation":case"yearColumns":case"yearRows":d[t]=angular.isDefined(r.datepickerOptions[t])?r.datepickerOptions[t]:s[t];break;case"startingDay":angular.isDefined(r.datepickerOptions.startingDay)?d.startingDay=r.datepickerOptions.startingDay:angular.isNumber(s.startingDay)?d.startingDay=s.startingDay:d.startingDay=(i.DATETIME_FORMATS.FIRSTDAYOFWEEK+8)%7;break;case"maxDate":case"minDate":r.$watch("datepickerOptions."+t,function(e){e?angular.isDate(e)?d[t]=c.fromTimezone(new Date(e),m.getOption("timezone")):(u&&o.warn("Literal date support has been deprecated, please switch to date object usage"),d[t]=new Date(l(e,"medium"))):d[t]=s[t]?c.fromTimezone(new Date(s[t]),m.getOption("timezone")):null,d.refreshView()});break;case"maxMode":case"minMode":r.datepickerOptions[t]?r.$watch(function(){return r.datepickerOptions[t]},function(e){d[t]=r[t]=angular.isDefined(e)?e:r.datepickerOptions[t],("minMode"===t&&d.modes.indexOf(r.datepickerOptions.datepickerMode)<d.modes.indexOf(d[t])||"maxMode"===t&&d.modes.indexOf(r.datepickerOptions.datepickerMode)>d.modes.indexOf(d[t]))&&(r.datepickerMode=d[t],r.datepickerOptions.datepickerMode=d[t])}):d[t]=r[t]=s[t]||null}}),r.uniqueId="datepicker-"+r.$id+"-"+Math.floor(1e4*Math.random()),r.disabled=angular.isDefined(t.disabled)||!1,angular.isDefined(t.ngDisabled)&&g.push(r.$parent.$watch(t.ngDisabled,function(e){r.disabled=e,d.refreshView()})),r.isActive=function(e){return 0===d.compare(e.date,d.activeDate)&&(r.activeDateId=e.uid,!0)},this.init=function(e){m=function(e){var t;if(angular.version.minor<6)(t=e.$options||r.datepickerOptions.ngModelOptions||s.ngModelOptions||{}).getOption=function(e){return t[e]};else{var n=e.$options.getOption("timezone")||(r.datepickerOptions.ngModelOptions?r.datepickerOptions.ngModelOptions.timezone:null)||(s.ngModelOptions?s.ngModelOptions.timezone:null);t=e.$options.createChild(s.ngModelOptions).createChild(r.datepickerOptions.ngModelOptions).createChild(e.$options).createChild({timezone:n})}return t}(f=e),r.datepickerOptions.initDate?(d.activeDate=c.fromTimezone(r.datepickerOptions.initDate,m.getOption("timezone"))||new Date,r.$watch("datepickerOptions.initDate",function(e){e&&(f.$isEmpty(f.$modelValue)||f.$invalid)&&(d.activeDate=c.fromTimezone(e,m.getOption("timezone")),d.refreshView())})):d.activeDate=new Date;var t=f.$modelValue?new Date(f.$modelValue):new Date;this.activeDate=isNaN(t)?c.fromTimezone(new Date,m.getOption("timezone")):c.fromTimezone(t,m.getOption("timezone")),f.$render=function(){d.render()}},this.render=function(){if(f.$viewValue){var e=new Date(f.$viewValue);!isNaN(e)?this.activeDate=c.fromTimezone(e,m.getOption("timezone")):p||o.error('Datepicker directive: "ng-model" value must be a Date object')}this.refreshView()},this.refreshView=function(){if(this.element){r.selectedDt=null,this._refreshView(),r.activeDt&&(r.activeDateId=r.activeDt.uid);var e=f.$viewValue?new Date(f.$viewValue):null;e=c.fromTimezone(e,m.getOption("timezone")),f.$setValidity("dateDisabled",!e||this.element&&!this.isDisabled(e))}},this.createDateObject=function(e,t){var n=f.$viewValue?new Date(f.$viewValue):null;n=c.fromTimezone(n,m.getOption("timezone"));var a=new Date;a=c.fromTimezone(a,m.getOption("timezone"));var i=this.compare(e,a),o={date:e,label:c.filter(e,t),selected:n&&0===this.compare(e,n),disabled:this.isDisabled(e),past:i<0,current:0===i,future:0<i,customClass:this.customClass(e)||null};return n&&0===this.compare(e,n)&&(r.selectedDt=o),d.activeDate&&0===this.compare(o.date,d.activeDate)&&(r.activeDt=o),o},this.isDisabled=function(e){return r.disabled||this.minDate&&this.compare(e,this.minDate)<0||this.maxDate&&0<this.compare(e,this.maxDate)||r.dateDisabled&&r.dateDisabled({date:e,mode:r.datepickerMode})},this.customClass=function(e){return r.customClass({date:e,mode:r.datepickerMode})},this.split=function(e,t){for(var n=[];0<e.length;)n.push(e.splice(0,t));return n},r.select=function(e){if(r.datepickerMode===d.minMode){var t=f.$viewValue?c.fromTimezone(new Date(f.$viewValue),m.getOption("timezone")):new Date(0,0,0,0,0,0,0);t.setFullYear(e.getFullYear(),e.getMonth(),e.getDate()),t=c.toTimezone(t,m.getOption("timezone")),f.$setViewValue(t),f.$render()}else d.activeDate=e,h(d.modes[d.modes.indexOf(r.datepickerMode)-1]),r.$emit("uib:datepicker.mode");r.$broadcast("uib:datepicker.focus")},r.move=function(e){var t=d.activeDate.getFullYear()+e*(d.step.years||0),n=d.activeDate.getMonth()+e*(d.step.months||0);d.activeDate.setFullYear(t,n,1),d.refreshView()},r.toggleMode=function(e){e=e||1,r.datepickerMode===d.maxMode&&1===e||r.datepickerMode===d.minMode&&-1===e||(h(d.modes[d.modes.indexOf(r.datepickerMode)+e]),r.$emit("uib:datepicker.mode"))},r.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};function h(e){r.datepickerMode=e,r.datepickerOptions.datepickerMode=e}r.$on("uib:datepicker.focus",function(){d.element[0].focus()}),r.keydown=function(e){var t=r.keys[e.which];if(t&&!e.shiftKey&&!e.altKey&&!r.disabled)if(e.preventDefault(),d.shortcutPropagation||e.stopPropagation(),"enter"===t||"space"===t){if(d.isDisabled(d.activeDate))return;r.select(d.activeDate)}else!e.ctrlKey||"up"!==t&&"down"!==t?(d.handleKeyDown(t,e),d.refreshView()):r.toggleMode("up"===t?1:-1)},e.on("keydown",function(e){r.$apply(function(){r.keydown(e)})}),r.$on("$destroy",function(){for(;g.length;)g.shift()()})}]).controller("UibDaypickerController",["$scope","$element","dateFilter",function(d,e,f){var n=[31,28,31,30,31,30,31,31,30,31,30,31];function i(e,t){return 1!==t||e%4!=0||e%100==0&&e%400!=0?n[t]:29}function m(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}this.step={months:1},this.element=e,this.init=function(e){angular.extend(e,this),d.showWeeks=e.showWeeks,e.refreshView()},this.getDates=function(e,t){for(var n,a=new Array(t),i=new Date(e),o=0;o<t;)n=new Date(i),a[o++]=n,i.setDate(i.getDate()+1);return a},this._refreshView=function(){var e=this.activeDate.getFullYear(),t=this.activeDate.getMonth(),n=new Date(this.activeDate);n.setFullYear(e,t,1);var a=this.startingDay-n.getDay(),i=0<a?7-a:-a,o=new Date(n);0<i&&o.setDate(1-i);for(var r=this.getDates(o,42),l=0;l<42;l++)r[l]=angular.extend(this.createDateObject(r[l],this.formatDay),{secondary:r[l].getMonth()!==t,uid:d.uniqueId+"-"+l});d.labels=new Array(7);for(var s=0;s<7;s++)d.labels[s]={abbr:f(r[s].date,this.formatDayHeader),full:f(r[s].date,"EEEE")};if(d.title=f(this.activeDate,this.formatDayTitle),d.rows=this.split(r,7),d.showWeeks){d.weekNumbers=[];for(var u=(11-this.startingDay)%7,p=d.rows.length,c=0;c<p;c++)d.weekNumbers.push(m(d.rows[c][u].date))}},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth(),e.getDate()),a=new Date(t.getFullYear(),t.getMonth(),t.getDate());return n.setFullYear(e.getFullYear()),a.setFullYear(t.getFullYear()),n-a},this.handleKeyDown=function(e,t){var n=this.activeDate.getDate();if("left"===e)n-=1;else if("up"===e)n-=7;else if("right"===e)n+=1;else if("down"===e)n+=7;else if("pageup"===e||"pagedown"===e){var a=this.activeDate.getMonth()+("pageup"===e?-1:1);this.activeDate.setMonth(a,1),n=Math.min(i(this.activeDate.getFullYear(),this.activeDate.getMonth()),n)}else"home"===e?n=1:"end"===e&&(n=i(this.activeDate.getFullYear(),this.activeDate.getMonth()));this.activeDate.setDate(n)}}]).controller("UibMonthpickerController",["$scope","$element","dateFilter",function(i,e,o){this.step={years:1},this.element=e,this.init=function(e){angular.extend(e,this),e.refreshView()},this._refreshView=function(){for(var e,t=new Array(12),n=this.activeDate.getFullYear(),a=0;a<12;a++)(e=new Date(this.activeDate)).setFullYear(n,a,1),t[a]=angular.extend(this.createDateObject(e,this.formatMonth),{uid:i.uniqueId+"-"+a});i.title=o(this.activeDate,this.formatMonthTitle),i.rows=this.split(t,this.monthColumns),i.yearHeaderColspan=3<this.monthColumns?this.monthColumns-2:1},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth()),a=new Date(t.getFullYear(),t.getMonth());return n.setFullYear(e.getFullYear()),a.setFullYear(t.getFullYear()),n-a},this.handleKeyDown=function(e,t){var n=this.activeDate.getMonth();if("left"===e)n-=1;else if("up"===e)n-=this.monthColumns;else if("right"===e)n+=1;else if("down"===e)n+=this.monthColumns;else if("pageup"===e||"pagedown"===e){var a=this.activeDate.getFullYear()+("pageup"===e?-1:1);this.activeDate.setFullYear(a)}else"home"===e?n=0:"end"===e&&(n=11);this.activeDate.setMonth(n)}}]).controller("UibYearpickerController",["$scope","$element","dateFilter",function(i,e,t){var o,r;function l(e){return parseInt((e-1)/r,10)*r+1}this.element=e,this.yearpickerInit=function(){o=this.yearColumns,r=this.yearRows*o,this.step={years:r}},this._refreshView=function(){for(var e,t=new Array(r),n=0,a=l(this.activeDate.getFullYear());n<r;n++)(e=new Date(this.activeDate)).setFullYear(a+n,0,1),t[n]=angular.extend(this.createDateObject(e,this.formatYear),{uid:i.uniqueId+"-"+n});i.title=[t[0].label,t[r-1].label].join(" - "),i.rows=this.split(t,o),i.columns=o},this.compare=function(e,t){return e.getFullYear()-t.getFullYear()},this.handleKeyDown=function(e,t){var n=this.activeDate.getFullYear();"left"===e?n-=1:"up"===e?n-=o:"right"===e?n+=1:"down"===e?n+=o:"pageup"===e||"pagedown"===e?n+=("pageup"===e?-1:1)*r:"home"===e?n=l(this.activeDate.getFullYear()):"end"===e&&(n=l(this.activeDate.getFullYear())+r-1),this.activeDate.setFullYear(n)}}]).directive("uibDatepicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/datepicker.html"},scope:{datepickerOptions:"=?"},require:["uibDatepicker","^ngModel"],restrict:"A",controller:"UibDatepickerController",controllerAs:"datepicker",link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}).directive("uibDaypicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/day.html"},require:["^uibDatepicker","uibDaypicker"],restrict:"A",controller:"UibDaypickerController",link:function(e,t,n,a){var i=a[0];a[1].init(i)}}}).directive("uibMonthpicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/month.html"},require:["^uibDatepicker","uibMonthpicker"],restrict:"A",controller:"UibMonthpickerController",link:function(e,t,n,a){var i=a[0];a[1].init(i)}}}).directive("uibYearpicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/year.html"},require:["^uibDatepicker","uibYearpicker"],restrict:"A",controller:"UibYearpickerController",link:function(e,t,n,a){var i=a[0];angular.extend(i,a[1]),i.yearpickerInit(),i.refreshView()}}}),angular.module("ui.bootstrap.position",[]).factory("$uibPosition",["$document","$window",function(u,m){var a,i,p={normal:/(auto|scroll)/,hidden:/(auto|scroll|hidden)/},g={auto:/\s?auto?\s?/i,primary:/^(top|bottom|left|right)$/,secondary:/^(top|bottom|left|right|center)$/,vertical:/^(top|bottom)$/},r=/(HTML|BODY)/;return{getRawNode:function(e){return e.nodeName?e:e[0]||e},parseStyle:function(e){return e=parseFloat(e),isFinite(e)?e:0},offsetParent:function(e){var t,n=(e=this.getRawNode(e)).offsetParent||u[0].documentElement;for(;n&&n!==u[0].documentElement&&(t=n,"static"===(m.getComputedStyle(t).position||"static"));)n=n.offsetParent;return n||u[0].documentElement},scrollbarWidth:function(e){if(e){if(angular.isUndefined(i)){var t=u.find("body");t.addClass("uib-position-body-scrollbar-measure"),i=m.innerWidth-t[0].clientWidth,i=isFinite(i)?i:0,t.removeClass("uib-position-body-scrollbar-measure")}return i}if(angular.isUndefined(a)){var n=angular.element('<div class="uib-position-scrollbar-measure"></div>');u.find("body").append(n),a=n[0].offsetWidth-n[0].clientWidth,a=isFinite(a)?a:0,n.remove()}return a},scrollbarPadding:function(e){e=this.getRawNode(e);var t=m.getComputedStyle(e),n=this.parseStyle(t.paddingRight),a=this.parseStyle(t.paddingBottom),i=this.scrollParent(e,!1,!0),o=this.scrollbarWidth(r.test(i.tagName));return{scrollbarWidth:o,widthOverflow:i.scrollWidth>i.clientWidth,right:n+o,originalRight:n,heightOverflow:i.scrollHeight>i.clientHeight,bottom:a+o,originalBottom:a}},isScrollable:function(e,t){e=this.getRawNode(e);var n=t?p.hidden:p.normal,a=m.getComputedStyle(e);return n.test(a.overflow+a.overflowY+a.overflowX)},scrollParent:function(e,t,n){e=this.getRawNode(e);var a=t?p.hidden:p.normal,i=u[0].documentElement,o=m.getComputedStyle(e);if(n&&a.test(o.overflow+o.overflowY+o.overflowX))return e;var r="absolute"===o.position,l=e.parentElement||i;if(l===i||"fixed"===o.position)return i;for(;l.parentElement&&l!==i;){var s=m.getComputedStyle(l);if(r&&"static"!==s.position&&(r=!1),!r&&a.test(s.overflow+s.overflowY+s.overflowX))break;l=l.parentElement}return l},position:function(e,t){e=this.getRawNode(e);var n=this.offset(e);if(t){var a=m.getComputedStyle(e);n.top-=this.parseStyle(a.marginTop),n.left-=this.parseStyle(a.marginLeft)}var i=this.offsetParent(e),o={top:0,left:0};return i!==u[0].documentElement&&((o=this.offset(i)).top+=i.clientTop-i.scrollTop,o.left+=i.clientLeft-i.scrollLeft),{width:Math.round(angular.isNumber(n.width)?n.width:e.offsetWidth),height:Math.round(angular.isNumber(n.height)?n.height:e.offsetHeight),top:Math.round(n.top-o.top),left:Math.round(n.left-o.left)}},offset:function(e){var t=(e=this.getRawNode(e)).getBoundingClientRect();return{width:Math.round(angular.isNumber(t.width)?t.width:e.offsetWidth),height:Math.round(angular.isNumber(t.height)?t.height:e.offsetHeight),top:Math.round(t.top+(m.pageYOffset||u[0].documentElement.scrollTop)),left:Math.round(t.left+(m.pageXOffset||u[0].documentElement.scrollLeft))}},viewportOffset:function(e,t,n){n=!1!==n;var a=(e=this.getRawNode(e)).getBoundingClientRect(),i={top:0,left:0,bottom:0,right:0},o=t?u[0].documentElement:this.scrollParent(e),r=o.getBoundingClientRect();if(i.top=r.top+o.clientTop,i.left=r.left+o.clientLeft,o===u[0].documentElement&&(i.top+=m.pageYOffset,i.left+=m.pageXOffset),i.bottom=i.top+o.clientHeight,i.right=i.left+o.clientWidth,n){var l=m.getComputedStyle(o);i.top+=this.parseStyle(l.paddingTop),i.bottom-=this.parseStyle(l.paddingBottom),i.left+=this.parseStyle(l.paddingLeft),i.right-=this.parseStyle(l.paddingRight)}return{top:Math.round(a.top-i.top),bottom:Math.round(i.bottom-a.bottom),left:Math.round(a.left-i.left),right:Math.round(i.right-a.right)}},parsePlacement:function(e){var t=g.auto.test(e);return t&&(e=e.replace(g.auto,"")),(e=e.split("-"))[0]=e[0]||"top",g.primary.test(e[0])||(e[0]="top"),e[1]=e[1]||"center",g.secondary.test(e[1])||(e[1]="center"),e[2]=!!t,e},positionElements:function(e,t,n,a){e=this.getRawNode(e),t=this.getRawNode(t);var i=angular.isDefined(t.offsetWidth)?t.offsetWidth:t.prop("offsetWidth"),o=angular.isDefined(t.offsetHeight)?t.offsetHeight:t.prop("offsetHeight");n=this.parsePlacement(n);var r=a?this.offset(e):this.position(e),l={top:0,left:0,placement:""};if(n[2]){var s=this.viewportOffset(e,a),u=m.getComputedStyle(t),p=i+Math.round(Math.abs(this.parseStyle(u.marginLeft)+this.parseStyle(u.marginRight))),c=o+Math.round(Math.abs(this.parseStyle(u.marginTop)+this.parseStyle(u.marginBottom)));if(n[0]="top"===n[0]&&c>s.top&&c<=s.bottom?"bottom":"bottom"===n[0]&&c>s.bottom&&c<=s.top?"top":"left"===n[0]&&p>s.left&&p<=s.right?"right":"right"===n[0]&&p>s.right&&p<=s.left?"left":n[0],n[1]="top"===n[1]&&c-r.height>s.bottom&&c-r.height<=s.top?"bottom":"bottom"===n[1]&&c-r.height>s.top&&c-r.height<=s.bottom?"top":"left"===n[1]&&p-r.width>s.right&&p-r.width<=s.left?"right":"right"===n[1]&&p-r.width>s.left&&p-r.width<=s.right?"left":n[1],"center"===n[1])if(g.vertical.test(n[0])){var d=r.width/2-i/2;s.left+d<0&&p-r.width<=s.right?n[1]="left":s.right+d<0&&p-r.width<=s.left&&(n[1]="right")}else{var f=r.height/2-c/2;s.top+f<0&&c-r.height<=s.bottom?n[1]="top":s.bottom+f<0&&c-r.height<=s.top&&(n[1]="bottom")}}switch(n[0]){case"top":l.top=r.top-o;break;case"bottom":l.top=r.top+r.height;break;case"left":l.left=r.left-i;break;case"right":l.left=r.left+r.width}switch(n[1]){case"top":l.top=r.top;break;case"bottom":l.top=r.top+r.height-o;break;case"left":l.left=r.left;break;case"right":l.left=r.left+r.width-i;break;case"center":g.vertical.test(n[0])?l.left=r.left+r.width/2-i/2:l.top=r.top+r.height/2-o/2}return l.top=Math.round(l.top),l.left=Math.round(l.left),l.placement="center"===n[1]?n[0]:n[0]+"-"+n[1],l},adjustTop:function(e,t,n,a){if(-1!==e.indexOf("top")&&n!==a)return{top:t.top-a+"px"}},positionArrow:function(e,t){var n=(e=this.getRawNode(e)).querySelector(".tooltip-inner, .popover-inner");if(n){var a=angular.element(n).hasClass("tooltip-inner"),i=a?e.querySelector(".tooltip-arrow"):e.querySelector(".arrow");if(i){var o={top:"",bottom:"",left:"",right:""};if("center"!==(t=this.parsePlacement(t))[1]){var r="border-"+t[0]+"-width",l=m.getComputedStyle(i)[r],s="border-";g.vertical.test(t[0])?s+=t[0]+"-"+t[1]:s+=t[1]+"-"+t[0],s+="-radius";var u=m.getComputedStyle(a?n:e)[s];switch(t[0]){case"top":o.bottom=a?"0":"-"+l;break;case"bottom":o.top=a?"0":"-"+l;break;case"left":o.right=a?"0":"-"+l;break;case"right":o.left=a?"0":"-"+l}o[t[1]]=u,angular.element(i).css(o)}else angular.element(i).css(o)}}}}}]),angular.module("ui.bootstrap.datepickerPopup",["ui.bootstrap.datepicker","ui.bootstrap.position"]).value("$datepickerPopupLiteralWarning",!0).constant("uibDatepickerPopupConfig",{altInputFormats:[],appendToBody:!1,clearText:"Clear",closeOnDateSelection:!0,closeText:"Done",currentText:"Today",datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"uib/template/datepickerPopup/popup.html",datepickerTemplateUrl:"uib/template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},onOpenFocus:!0,showButtonBar:!0,placement:"auto bottom-left"}).controller("UibDatepickerPopupController",["$scope","$element","$attrs","$compile","$log","$parse","$window","$document","$rootScope","$uibPosition","dateFilter","uibDateParser","uibDatepickerPopupConfig","$timeout","uibDatepickerConfig","$datepickerPopupLiteralWarning",function(i,o,a,t,n,e,r,l,s,u,p,c,d,f,m,g){var h,b,v,$,y,w,k,D,x,C,M,T,O,S=!1,P=[];function E(e){var t=c.parse(e,h,i.date);if(isNaN(t))for(var n=0;n<O.length;n++)if(t=c.parse(e,O[n],i.date),!isNaN(t))return t;return t}function A(e){if(angular.isNumber(e)&&(e=new Date(e)),!e)return null;if(angular.isDate(e)&&!isNaN(e))return e;if(angular.isString(e)){var t=E(e);if(!isNaN(t))return c.toTimezone(t,M.getOption("timezone"))}return M.getOption("allowInvalid")?e:void 0}function I(e,t){var n=e||t;return!a.ngRequired&&!n||(angular.isNumber(n)&&(n=new Date(n)),!n||(!(!angular.isDate(n)||isNaN(n))||!!angular.isString(n)&&!isNaN(E(n))))}function U(e){if(i.isOpen||!i.disabled){var t=T[0],n=o[0].contains(e.target),a=void 0!==t.contains&&t.contains(e.target);!i.isOpen||n||a||i.$apply(function(){i.isOpen=!1})}}function N(e){27===e.which&&i.isOpen?(e.preventDefault(),e.stopPropagation(),i.$apply(function(){i.isOpen=!1}),o[0].focus()):40!==e.which||i.isOpen||(e.preventDefault(),e.stopPropagation(),i.$apply(function(){i.isOpen=!0}))}function F(){if(i.isOpen){var e=angular.element(T[0].querySelector(".uib-datepicker-popup")),t=a.popupPlacement?a.popupPlacement:d.placement,n=u.positionElements(o,e,t,v);e.css({top:n.top+"px",left:n.left+"px"}),e.hasClass("uib-position-measure")&&e.removeClass("uib-position-measure")}}this.init=function(e){if(M=function(e){var t;angular.version.minor<6?(t=angular.isObject(e.$options)?e.$options:{timezone:null}).getOption=function(e){return t[e]}:t=e.$options;return t}(C=e),b=angular.isDefined(a.closeOnDateSelection)?i.$parent.$eval(a.closeOnDateSelection):d.closeOnDateSelection,v=angular.isDefined(a.datepickerAppendToBody)?i.$parent.$eval(a.datepickerAppendToBody):d.appendToBody,$=angular.isDefined(a.onOpenFocus)?i.$parent.$eval(a.onOpenFocus):d.onOpenFocus,y=angular.isDefined(a.datepickerPopupTemplateUrl)?a.datepickerPopupTemplateUrl:d.datepickerPopupTemplateUrl,w=angular.isDefined(a.datepickerTemplateUrl)?a.datepickerTemplateUrl:d.datepickerTemplateUrl,O=angular.isDefined(a.altInputFormats)?i.$parent.$eval(a.altInputFormats):d.altInputFormats,i.showButtonBar=angular.isDefined(a.showButtonBar)?i.$parent.$eval(a.showButtonBar):d.showButtonBar,d.html5Types[a.type]?(h=d.html5Types[a.type],S=!0):(h=a.uibDatepickerPopup||d.datepickerPopup,a.$observe("uibDatepickerPopup",function(e,t){var n=e||d.datepickerPopup;if(n!==h&&(h=n,C.$modelValue=null,!h))throw new Error("uibDatepickerPopup must have a date format specified.")})),!h)throw new Error("uibDatepickerPopup must have a date format specified.");if(S&&a.uibDatepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");(k=angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>")).attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":y}),(D=angular.element(k.children()[0])).attr("template-url",w),i.datepickerOptions||(i.datepickerOptions={}),S&&"month"===a.type&&(i.datepickerOptions.datepickerMode="month",i.datepickerOptions.minMode="month"),D.attr("datepicker-options","datepickerOptions"),S?C.$formatters.push(function(e){return i.date=c.fromTimezone(e,M.getOption("timezone")),e}):(C.$$parserName="date",C.$validators.date=I,C.$parsers.unshift(A),C.$formatters.push(function(e){return C.$isEmpty(e)?i.date=e:(angular.isNumber(e)&&(e=new Date(e)),i.date=c.fromTimezone(e,M.getOption("timezone")),c.filter(i.date,h))})),C.$viewChangeListeners.push(function(){i.date=E(C.$viewValue)}),o.on("keydown",N),T=t(k)(i),k.remove(),v?l.find("body").append(T):o.after(T),i.$on("$destroy",function(){for(!0===i.isOpen&&(s.$$phase||i.$apply(function(){i.isOpen=!1})),T.remove(),o.off("keydown",N),l.off("click",U),x&&x.off("scroll",F),angular.element(r).off("resize",F);P.length;)P.shift()()})},i.getText=function(e){return i[e+"Text"]||d[e+"Text"]},i.isDisabled=function(e){"today"===e&&(e=c.fromTimezone(new Date,M.getOption("timezone")));var t={};return angular.forEach(["minDate","maxDate"],function(e){i.datepickerOptions[e]?angular.isDate(i.datepickerOptions[e])?t[e]=new Date(i.datepickerOptions[e]):(g&&n.warn("Literal date support has been deprecated, please switch to date object usage"),t[e]=new Date(p(i.datepickerOptions[e],"medium"))):t[e]=null}),i.datepickerOptions&&t.minDate&&i.compare(e,t.minDate)<0||t.maxDate&&0<i.compare(e,t.maxDate)},i.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},i.dateSelection=function(e){i.date=e;var t=i.date?c.filter(i.date,h):null;o.val(t),C.$setViewValue(t),b&&(i.isOpen=!1,o[0].focus())},i.keydown=function(e){27===e.which&&(e.stopPropagation(),i.isOpen=!1,o[0].focus())},i.select=function(e,t){if(t.stopPropagation(),"today"===e){var n=new Date;angular.isDate(i.date)?(e=new Date(i.date)).setFullYear(n.getFullYear(),n.getMonth(),n.getDate()):(e=c.fromTimezone(n,M.getOption("timezone"))).setHours(0,0,0,0)}i.dateSelection(e)},i.close=function(e){e.stopPropagation(),i.isOpen=!1,o[0].focus()},i.disabled=angular.isDefined(a.disabled)||!1,a.ngDisabled&&P.push(i.$parent.$watch(e(a.ngDisabled),function(e){i.disabled=e})),i.$watch("isOpen",function(e){e?i.disabled?i.isOpen=!1:f(function(){F(),$&&i.$broadcast("uib:datepicker.focus"),l.on("click",U);var e=a.popupPlacement?a.popupPlacement:d.placement;v||u.parsePlacement(e)[2]?(x=x||angular.element(u.scrollParent(o)))&&x.on("scroll",F):x=null,angular.element(r).on("resize",F)},0,!1):(l.off("click",U),x&&x.off("scroll",F),angular.element(r).off("resize",F))}),i.$on("uib:datepicker.mode",function(){f(F,0,!1)})}]).directive("uibDatepickerPopup",function(){return{require:["ngModel","uibDatepickerPopup"],controller:"UibDatepickerPopupController",scope:{datepickerOptions:"=?",isOpen:"=?",currentText:"@",clearText:"@",closeText:"@"},link:function(e,t,n,a){var i=a[0];a[1].init(i)}}}).directive("uibDatepickerPopupWrap",function(){return{restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepickerPopup/popup.html"}}}),angular.module("ui.bootstrap.debounce",[]).factory("$$debounce",["$timeout",function(o){return function(n,a){var i;return function(){var e=this,t=Array.prototype.slice.call(arguments);i&&o.cancel(i),i=o(function(){n.apply(e,t)},a)}}}]),angular.module("ui.bootstrap.multiMap",[]).factory("$$multiMap",function(){return{createNew:function(){var i={};return{entries:function(){return Object.keys(i).map(function(e){return{key:e,value:i[e]}})},get:function(e){return i[e]},hasKey:function(e){return!!i[e]},keys:function(){return Object.keys(i)},put:function(e,t){i[e]||(i[e]=[]),i[e].push(t)},remove:function(e,t){var n=i[e];if(n){var a=n.indexOf(t);-1!==a&&n.splice(a,1),n.length||delete i[e]}}}}}}),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.multiMap","ui.bootstrap.position"]).constant("uibDropdownConfig",{appendToOpenClass:"uib-dropdown-open",openClass:"open"}).service("uibDropdownService",["$document","$rootScope","$$multiMap",function(o,a,e){var r=null,l=e.createNew();this.isOnlyOpen=function(n,e){var t=l.get(e);if(t&&t.reduce(function(e,t){return t.scope===n?t:e},{}))return 1===t.length;return!1},this.open=function(e,t,n){if(r||o.on("click",s),r&&r!==e&&(r.isOpen=!1),r=e,n){var a=l.get(n);if(a)-1===a.map(function(e){return e.scope}).indexOf(e)&&l.put(n,{scope:e});else l.put(n,{scope:e})}},this.close=function(n,e,t){if(r===n&&(o.off("click",s),o.off("keydown",this.keybindFilter),r=null),t){var a=l.get(t);if(a){var i=a.reduce(function(e,t){return t.scope===n?t:e},{});i&&l.remove(t,i)}}};var s=function(e){if(r&&r.isOpen&&!(e&&"disabled"===r.getAutoClose()||e&&3===e.which)){var t=r.getToggleElement();if(!(e&&t&&t[0].contains(e.target))){var n=r.getDropdownElement();e&&"outsideClick"===r.getAutoClose()&&n&&n[0].contains(e.target)||(r.focusToggleElement(),r.isOpen=!1,a.$$phase||r.$apply())}}};this.keybindFilter=function(e){if(r){var t=r.getDropdownElement(),n=r.getToggleElement(),a=t&&t[0].contains(e.target),i=n&&n[0].contains(e.target);27===e.which?(e.stopPropagation(),r.focusToggleElement(),s()):r.isKeynavEnabled()&&-1!==[38,40].indexOf(e.which)&&r.isOpen&&(a||i)&&(e.preventDefault(),e.stopPropagation(),r.focusDropdownEntry(e.which))}}}]).controller("UibDropdownController",["$scope","$element","$attrs","$parse","uibDropdownConfig","uibDropdownService","$animate","$uibPosition","$document","$compile","$templateRequest",function(h,b,v,$,e,y,w,k,D,x,C){var M,t,T=this,O=h.$new(),S=e.appendToOpenClass,P=e.openClass,E=angular.noop,A=v.onToggle?$(v.onToggle):angular.noop,n=!1,I=D.find("body");function U(){b.append(T.dropdownMenu)}b.addClass("dropdown"),this.init=function(){v.isOpen&&(t=$(v.isOpen),E=t.assign,h.$watch(t,function(e){O.isOpen=!!e})),n=angular.isDefined(v.keyboardNav)},this.toggle=function(e){return O.isOpen=arguments.length?!!e:!O.isOpen,angular.isFunction(E)&&E(O,O.isOpen),O.isOpen},this.isOpen=function(){return O.isOpen},O.getToggleElement=function(){return T.toggleElement},O.getAutoClose=function(){return v.autoClose||"always"},O.getElement=function(){return b},O.isKeynavEnabled=function(){return n},O.focusDropdownEntry=function(e){var t=T.dropdownMenu?angular.element(T.dropdownMenu).find("a"):b.find("ul").eq(0).find("a");switch(e){case 40:angular.isNumber(T.selectedOption)?T.selectedOption=T.selectedOption===t.length-1?T.selectedOption:T.selectedOption+1:T.selectedOption=0;break;case 38:angular.isNumber(T.selectedOption)?T.selectedOption=0===T.selectedOption?0:T.selectedOption-1:T.selectedOption=t.length-1}t[T.selectedOption].focus()},O.getDropdownElement=function(){return T.dropdownMenu},O.focusToggleElement=function(){T.toggleElement&&T.toggleElement[0].focus()},O.$watch("isOpen",function(e,t){var n=null,a=!1;if(angular.isDefined(v.dropdownAppendTo)){var i=$(v.dropdownAppendTo)(O);i&&(n=angular.element(i))}angular.isDefined(v.dropdownAppendToBody)&&(!1!==$(v.dropdownAppendToBody)(O)&&(a=!0));if(a&&!n&&(n=I),n&&T.dropdownMenu&&(e?(n.append(T.dropdownMenu),b.on("$destroy",U)):(b.off("$destroy",U),U())),n&&T.dropdownMenu){var o,r,l,s=k.positionElements(b,T.dropdownMenu,"bottom-left",!0),u=0;if(o={top:s.top+"px",display:e?"block":"none"},(r=T.dropdownMenu.hasClass("dropdown-menu-right"))?(o.left="auto",(l=k.scrollbarPadding(n)).heightOverflow&&l.scrollbarWidth&&(u=l.scrollbarWidth),o.right=window.innerWidth-u-(s.left+b.prop("offsetWidth"))+"px"):(o.left=s.left+"px",o.right="auto"),!a){var p=k.offset(n);o.top=s.top-p.top+"px",r?o.right=window.innerWidth-(s.left-p.left+b.prop("offsetWidth"))+"px":o.left=s.left-p.left+"px"}T.dropdownMenu.css(o)}var c=n||b,d=n?S:P,f=c.hasClass(d),m=y.isOnlyOpen(h,n);f===!e&&w[n?m?"removeClass":"addClass":e?"addClass":"removeClass"](c,d).then(function(){angular.isDefined(e)&&e!==t&&A(h,{open:!!e})});if(e)T.dropdownMenuTemplateUrl?C(T.dropdownMenuTemplateUrl).then(function(e){M=O.$new(),x(e.trim())(M,function(e){var t=e;T.dropdownMenu.replaceWith(t),T.dropdownMenu=t,D.on("keydown",y.keybindFilter)})}):D.on("keydown",y.keybindFilter),O.focusToggleElement(),y.open(O,b,n);else{if(y.close(O,b,n),T.dropdownMenuTemplateUrl){M&&M.$destroy();var g=angular.element('<ul class="dropdown-menu"></ul>');T.dropdownMenu.replaceWith(g),T.dropdownMenu=g}T.selectedOption=null}angular.isFunction(E)&&E(h,e)})}]).directive("uibDropdown",function(){return{controller:"UibDropdownController",link:function(e,t,n,a){a.init()}}}).directive("uibDropdownMenu",function(){return{restrict:"A",require:"?^uibDropdown",link:function(e,t,n,a){if(a&&!angular.isDefined(n.dropdownNested)){t.addClass("dropdown-menu");var i=n.templateUrl;i&&(a.dropdownMenuTemplateUrl=i),a.dropdownMenu||(a.dropdownMenu=t)}}}}).directive("uibDropdownToggle",function(){return{require:"?^uibDropdown",link:function(t,n,a,i){if(i){n.addClass("dropdown-toggle"),i.toggleElement=n;var e=function(e){e.preventDefault(),n.hasClass("disabled")||a.disabled||t.$apply(function(){i.toggle()})};n.on("click",e),n.attr({"aria-haspopup":!0,"aria-expanded":!1}),t.$watch(i.isOpen,function(e){n.attr("aria-expanded",!!e)}),t.$on("$destroy",function(){n.off("click",e)})}}}}),angular.module("ui.bootstrap.stackedMap",[]).factory("$$stackedMap",function(){return{createNew:function(){var a=[];return{add:function(e,t){a.push({key:e,value:t})},get:function(e){for(var t=0;t<a.length;t++)if(e===a[t].key)return a[t]},keys:function(){for(var e=[],t=0;t<a.length;t++)e.push(a[t].key);return e},top:function(){return a[a.length-1]},remove:function(e){for(var t=-1,n=0;n<a.length;n++)if(e===a[n].key){t=n;break}return a.splice(t,1)[0]},removeTop:function(){return a.pop()},length:function(){return a.length}}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.multiMap","ui.bootstrap.stackedMap","ui.bootstrap.position"]).provider("$uibResolve",function(){var e=this;this.resolver=null,this.setResolver=function(e){this.resolver=e},this.$get=["$injector","$q",function(o,r){var l=e.resolver?o.get(e.resolver):null;return{resolve:function(e,t,n,a){if(l)return l.resolve(e,t,n,a);var i=[];return angular.forEach(e,function(e){angular.isFunction(e)||angular.isArray(e)?i.push(r.resolve(o.invoke(e))):angular.isString(e)?i.push(r.resolve(o.get(e))):i.push(r.resolve(e))}),r.all(i).then(function(n){var a={},i=0;return angular.forEach(e,function(e,t){a[t]=n[i++]}),a})}}}]}).directive("uibModalBackdrop",["$animate","$injector","$uibModalStack",function(r,e,t){return{restrict:"A",compile:function(e,t){return e.addClass(t.backdropClass),n}};function n(a,i,o){o.modalInClass&&(r.addClass(i,o.modalInClass),a.$on(t.NOW_CLOSING_EVENT,function(e,t){var n=t();a.modalOptions.animation?r.removeClass(i,o.modalInClass).then(n):n()}))}}]).directive("uibModalWindow",["$uibModalStack","$q","$animateCss","$document",function(n,o,r,l){return{scope:{index:"@"},restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/modal/window.html"},link:function(t,a,i){a.addClass(i.windowTopClass||""),t.size=i.size,t.close=function(e){var t=n.getTop();t&&t.value.backdrop&&"static"!==t.value.backdrop&&e.target===e.currentTarget&&(e.preventDefault(),e.stopPropagation(),n.dismiss(t.key,"backdrop click"))},a.on("click",t.close),t.$isRendered=!0;var e=o.defer();t.$$postDigest(function(){e.resolve()}),e.promise.then(function(){var e=null;i.modalInClass&&(e=r(a,{addClass:i.modalInClass}).start(),t.$on(n.NOW_CLOSING_EVENT,function(e,t){var n=t();r(a,{removeClass:i.modalInClass}).start().then(n)})),o.when(e).then(function(){var e=n.getTop();if(e&&n.modalRendered(e.key),!l[0].activeElement||!a[0].contains(l[0].activeElement)){var t=a[0].querySelector("[autofocus]");t?t.focus():a[0].focus()}})})}}}]).directive("uibModalAnimationClass",function(){return{compile:function(e,t){t.modalAnimation&&e.addClass(t.uibModalAnimationClass)}}}).directive("uibModalTransclude",["$animate",function(o){return{link:function(e,t,n,a,i){i(e.$parent,function(e){t.empty(),o.enter(e,t)})}}}]).factory("$uibModalStack",["$animate","$animateCss","$document","$compile","$rootScope","$q","$$multiMap","$$stackedMap","$uibPosition",function(s,e,u,p,c,r,t,n,d){var f,m,g,h="modal-open",b=n.createNew(),v=t.createNew(),l={NOW_CLOSING_EVENT:"modal.stack.now-closing"},$=0,y=null,w="data-bootstrap-modal-aria-hidden-count",k=/[A-Z]/g;function D(){for(var e=-1,t=b.keys(),n=0;n<t.length;n++)b.get(t[n]).value.backdrop&&(e=n);return-1<e&&e<$&&(e=$),e}function a(n,e){var a=b.get(n).value,i=a.appendTo;b.remove(n),(y=b.top())&&($=parseInt(y.value.modalDomEl.attr("index"),10)),o(a.modalDomEl,a.modalScope,function(){var e=a.openedClass||h;v.remove(e,n);var t=v.hasKey(e);i.toggleClass(e,t),!t&&g&&g.heightOverflow&&g.scrollbarWidth&&(g.originalRight?i.css({paddingRight:g.originalRight+"px"}):i.css({paddingRight:""}),g=null),x(!0)},a.closedDeferred),function(){if(f&&-1===D()){o(f,m,function(){null}),m=f=void 0}}(),e&&e.focus?e.focus():i.focus&&i.focus()}function x(e){var t;0<b.length()&&(t=b.top().value).modalDomEl.toggleClass(t.windowTopClass||"",e)}function o(t,n,a,i){var e,o=null;return n.$broadcast(l.NOW_CLOSING_EVENT,function(){return e||(e=r.defer(),o=e.promise),function(){e.resolve()}}),r.when(o).then(function e(){if(e.done)return;e.done=!0;s.leave(t).then(function(){a&&a(),t.remove(),i&&i.resolve()});n.$destroy()})}function i(e){if(e.isDefaultPrevented())return e;var t=b.top();if(t)switch(e.which){case 27:t.value.keyboard&&(e.preventDefault(),c.$apply(function(){l.dismiss(t.key,"escape key press")}));break;case 9:var n=l.loadFocusElementList(t),a=!1;e.shiftKey?(l.isFocusInFirstItem(e,n)||l.isModalFocused(e,t))&&(a=l.focusLastFocusableElement(n)):l.isFocusInLastItem(e,n)&&(a=l.focusFirstFocusableElement(n)),a&&(e.preventDefault(),e.stopPropagation())}}function C(e,t,n){return!e.value.modalScope.$broadcast("modal.closing",t,n).defaultPrevented}function M(){Array.prototype.forEach.call(document.querySelectorAll("["+w+"]"),function(e){var t=parseInt(e.getAttribute(w),10)-1;e.setAttribute(w,t),t||(e.removeAttribute(w),e.removeAttribute("aria-hidden"))})}return c.$watch(D,function(e){m&&(m.index=e)}),u.on("keydown",i),c.$on("$destroy",function(){u.off("keydown",i)}),l.open=function(e,t){var n=u[0].activeElement,a=t.openedClass||h;x(!1),y=b.top(),b.add(e,{deferred:t.deferred,renderDeferred:t.renderDeferred,closedDeferred:t.closedDeferred,modalScope:t.scope,backdrop:t.backdrop,keyboard:t.keyboard,openedClass:t.openedClass,windowTopClass:t.windowTopClass,animation:t.animation,appendTo:t.appendTo}),v.put(a,e);var i,o=t.appendTo,r=D();0<=r&&!f&&((m=c.$new(!0)).modalOptions=t,m.index=r,(f=angular.element('<div uib-modal-backdrop="modal-backdrop"></div>')).attr({class:"modal-backdrop","ng-style":"{'z-index': 1040 + (index && 1 || 0) + index*10}","uib-modal-animation-class":"fade","modal-in-class":"in"}),t.backdropClass&&f.addClass(t.backdropClass),t.animation&&f.attr("modal-animation","true"),p(f)(m),s.enter(f,o),d.isScrollable(o)&&(g=d.scrollbarPadding(o)).heightOverflow&&g.scrollbarWidth&&o.css({paddingRight:g.right+"px"})),t.component?(i=document.createElement(t.component.name.replace(k,function(e,t){return(t?"-":"")+e.toLowerCase()})),(i=angular.element(i)).attr({resolve:"$resolve","modal-instance":"$uibModalInstance",close:"$close($value)",dismiss:"$dismiss($value)"})):i=t.content,$=y?parseInt(y.value.modalDomEl.attr("index"),10)+1:0;var l=angular.element('<div uib-modal-window="modal-window"></div>');l.attr({class:"modal","template-url":t.windowTemplateUrl,"window-top-class":t.windowTopClass,role:"dialog","aria-labelledby":t.ariaLabelledBy,"aria-describedby":t.ariaDescribedBy,size:t.size,index:$,animate:"animate","ng-style":"{'z-index': 1050 + $$topModalIndex*10, display: 'block'}",tabindex:-1,"uib-modal-animation-class":"fade","modal-in-class":"in"}).append(i),t.windowClass&&l.addClass(t.windowClass),t.animation&&l.attr("modal-animation","true"),o.addClass(a),t.scope&&(t.scope.$$topModalIndex=$),s.enter(p(l)(t.scope),o),b.top().value.modalDomEl=l,b.top().value.modalOpener=n,function e(t){if(!t||"BODY"===t[0].tagName)return;(n=t,a=n.parent()?n.parent().children():[],Array.prototype.filter.call(a,function(e){return e!==n[0]})).forEach(function(e){var t="true"===e.getAttribute("aria-hidden"),n=parseInt(e.getAttribute(w),10);n||(n=t?1:0),e.setAttribute(w,n+1),e.setAttribute("aria-hidden","true")});var n,a;return e(t.parent())}(l)},l.close=function(e,t){var n=b.get(e);return M(),n&&C(n,t,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(t),a(e,n.value.modalOpener),!0):!n},l.dismiss=function(e,t){var n=b.get(e);return M(),n&&C(n,t,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(t),a(e,n.value.modalOpener),!0):!n},l.dismissAll=function(e){for(var t=this.getTop();t&&this.dismiss(t.key,e);)t=this.getTop()},l.getTop=function(){return b.top()},l.modalRendered=function(e){var t=b.get(e);t&&t.value.renderDeferred.resolve()},l.focusFirstFocusableElement=function(e){return 0<e.length&&(e[0].focus(),!0)},l.focusLastFocusableElement=function(e){return 0<e.length&&(e[e.length-1].focus(),!0)},l.isModalFocused=function(e,t){if(e&&t){var n=t.value.modalDomEl;if(n&&n.length)return(e.target||e.srcElement)===n[0]}return!1},l.isFocusInFirstItem=function(e,t){return 0<t.length&&(e.target||e.srcElement)===t[0]},l.isFocusInLastItem=function(e,t){return 0<t.length&&(e.target||e.srcElement)===t[t.length-1]},l.loadFocusElementList=function(e){if(e){var t=e.value.modalDomEl;if(t&&t.length){var n=t[0].querySelectorAll("a[href], area[href], input:not([disabled]):not([tabindex='-1']), button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']), textarea:not([disabled]):not([tabindex='-1']), iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]");return n?Array.prototype.filter.call(n,function(e){return!!((t=e).offsetWidth||t.offsetHeight||t.getClientRects().length);var t}):n}}},l}]).provider("$uibModal",function(){var v={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$rootScope","$q","$document","$templateRequest","$controller","$uibResolve","$uibModalStack",function(g,i,o,r,h,l,b){var e={};var s=null;return e.getPromiseChain=function(){return s},e.open=function(u){var e,t,n,p=i.defer(),c=i.defer(),d=i.defer(),f=i.defer(),m={result:p.promise,opened:c.promise,closed:d.promise,rendered:f.promise,close:function(e){return b.close(m,e)},dismiss:function(e){return b.dismiss(m,e)}};if((u=angular.extend({},v.options,u)).resolve=u.resolve||{},u.appendTo=u.appendTo||o.find("body").eq(0),!u.appendTo.length)throw new Error("appendTo element not found. Make sure that the element passed is in DOM.");if(!u.component&&!u.template&&!u.templateUrl)throw new Error("One of component or template or templateUrl options is required.");function a(){return e}return e=u.component?i.when(l.resolve(u.resolve,{},null,null)):i.all([(t=u,t.template?i.when(t.template):r(angular.isFunction(t.templateUrl)?t.templateUrl():t.templateUrl)),l.resolve(u.resolve,{},null,null)]),n=s=i.all([s]).then(a,a).then(function(o){var e=u.scope||g,r=e.$new();r.$close=m.close,r.$dismiss=m.dismiss,r.$on("$destroy",function(){r.$$uibDestructionScheduled||r.$dismiss("$uibUnscheduledDestruction")});var t,n,a={scope:r,deferred:p,renderDeferred:f,closedDeferred:d,animation:u.animation,backdrop:u.backdrop,keyboard:u.keyboard,backdropClass:u.backdropClass,windowTopClass:u.windowTopClass,windowClass:u.windowClass,windowTemplateUrl:u.windowTemplateUrl,ariaLabelledBy:u.ariaLabelledBy,ariaDescribedBy:u.ariaDescribedBy,size:u.size,openedClass:u.openedClass,appendTo:u.appendTo},i={},l={};function s(n,e,t,a){n.$scope=r,n.$scope.$resolve={},t?n.$scope.$uibModalInstance=m:n.$uibModalInstance=m;var i=e?o[1]:o;angular.forEach(i,function(e,t){a&&(n[t]=e),n.$scope.$resolve[t]=e})}u.component?(s(i,!1,!0,!1),i.name=u.component,a.component=i):u.controller&&(s(l,!0,!1,!0),n=h(u.controller,l,!0,u.controllerAs),u.controllerAs&&u.bindToController&&((t=n.instance).$close=r.$close,t.$dismiss=r.$dismiss,angular.extend(t,{$resolve:l.$scope.$resolve},e)),t=n(),angular.isFunction(t.$onInit)&&t.$onInit()),u.component||(a.content=o[0]),b.open(m,a),c.resolve(!0)},function(e){c.reject(e),p.reject(e)}).finally(function(){s===n&&(s=null)}),m},e}]};return v}),angular.module("ui.bootstrap.paging",[]).factory("uibPaging",["$parse",function(e){return{create:function(n,a,i){n.setNumPages=i.numPages?e(i.numPages).assign:angular.noop,n.ngModelCtrl={$setViewValue:angular.noop},n._watchers=[],n.init=function(e,t){n.ngModelCtrl=e,n.config=t,e.$render=function(){n.render()},i.itemsPerPage?n._watchers.push(a.$parent.$watch(i.itemsPerPage,function(e){n.itemsPerPage=parseInt(e,10),a.totalPages=n.calculateTotalPages(),n.updatePage()})):n.itemsPerPage=t.itemsPerPage,a.$watch("totalItems",function(e,t){(angular.isDefined(e)||e!==t)&&(a.totalPages=n.calculateTotalPages(),n.updatePage())})},n.calculateTotalPages=function(){var e=n.itemsPerPage<1?1:Math.ceil(a.totalItems/n.itemsPerPage);return Math.max(e||0,1)},n.render=function(){a.page=parseInt(n.ngModelCtrl.$viewValue,10)||1},a.selectPage=function(e,t){t&&t.preventDefault(),(!a.ngDisabled||!t)&&a.page!==e&&0<e&&e<=a.totalPages&&(t&&t.target&&t.target.blur(),n.ngModelCtrl.$setViewValue(e),n.ngModelCtrl.$render())},a.getText=function(e){return a[e+"Text"]||n.config[e+"Text"]},a.noPrevious=function(){return 1===a.page},a.noNext=function(){return a.page===a.totalPages},n.updatePage=function(){n.setNumPages(a.$parent,a.totalPages),a.page>a.totalPages?a.selectPage(a.totalPages):n.ngModelCtrl.$render()},a.$on("$destroy",function(){for(;n._watchers.length;)n._watchers.shift()()})}}}]),angular.module("ui.bootstrap.pager",["ui.bootstrap.paging","ui.bootstrap.tabindex"]).controller("UibPagerController",["$scope","$attrs","uibPaging","uibPagerConfig",function(e,t,n,a){e.align=angular.isDefined(t.align)?e.$parent.$eval(t.align):a.align,n.create(this,e,t)}]).constant("uibPagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("uibPager",["uibPagerConfig",function(r){return{scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["uibPager","?ngModel"],restrict:"A",controller:"UibPagerController",controllerAs:"pager",templateUrl:function(e,t){return t.templateUrl||"uib/template/pager/pager.html"},link:function(e,t,n,a){t.addClass("pager");var i=a[0],o=a[1];o&&i.init(o,r)}}}]),angular.module("ui.bootstrap.pagination",["ui.bootstrap.paging","ui.bootstrap.tabindex"]).controller("UibPaginationController",["$scope","$attrs","$parse","uibPaging","uibPaginationConfig",function(t,n,e,a,i){var o=this,m=angular.isDefined(n.maxSize)?t.$parent.$eval(n.maxSize):i.maxSize,g=angular.isDefined(n.rotate)?t.$parent.$eval(n.rotate):i.rotate,h=angular.isDefined(n.forceEllipses)?t.$parent.$eval(n.forceEllipses):i.forceEllipses,b=angular.isDefined(n.boundaryLinkNumbers)?t.$parent.$eval(n.boundaryLinkNumbers):i.boundaryLinkNumbers,v=angular.isDefined(n.pageLabel)?function(e){return t.$parent.$eval(n.pageLabel,{$page:e})}:angular.identity;function $(e,t,n){return{number:e,text:t,active:n}}t.boundaryLinks=angular.isDefined(n.boundaryLinks)?t.$parent.$eval(n.boundaryLinks):i.boundaryLinks,t.directionLinks=angular.isDefined(n.directionLinks)?t.$parent.$eval(n.directionLinks):i.directionLinks,n.$set("role","menu"),a.create(this,t,n),n.maxSize&&o._watchers.push(t.$parent.$watch(e(n.maxSize),function(e){m=parseInt(e,10),o.render()}));var r=this.render;this.render=function(){r(),0<t.page&&t.page<=t.totalPages&&(t.pages=function(e,t){var n=[],a=1,i=t,o=angular.isDefined(m)&&m<t;o&&(g?t<(i=(a=Math.max(e-Math.floor(m/2),1))+m-1)&&(a=(i=t)-m+1):(a=(Math.ceil(e/m)-1)*m+1,i=Math.min(a+m-1,t)));for(var r=a;r<=i;r++){var l=$(r,v(r),r===e);n.push(l)}if(o&&0<m&&(!g||h||b)){if(1<a){if(!b||3<a){var s=$(a-1,"...",!1);n.unshift(s)}if(b){if(3===a){var u=$(2,"2",!1);n.unshift(u)}var p=$(1,"1",!1);n.unshift(p)}}if(i<t){if(!b||i<t-2){var c=$(i+1,"...",!1);n.push(c)}if(b){if(i===t-2){var d=$(t-1,t-1,!1);n.push(d)}var f=$(t,t,!1);n.push(f)}}}return n}(t.page,t.totalPages))}}]).constant("uibPaginationConfig",{itemsPerPage:10,boundaryLinks:!1,boundaryLinkNumbers:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0,forceEllipses:!1}).directive("uibPagination",["$parse","uibPaginationConfig",function(e,r){return{scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["uibPagination","?ngModel"],restrict:"A",controller:"UibPaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"uib/template/pagination/pagination.html"},link:function(e,t,n,a){t.addClass("pagination");var i=a[0],o=a[1];o&&i.init(o,r)}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.stackedMap"]).provider("$uibTooltip",function(){var l={placement:"top",placementClassPrefix:"",animation:!0,popupDelay:0,popupCloseDelay:0,useContentExp:!1},s={mouseenter:"mouseleave",click:"click",outsideClick:"outsideClick",focus:"blur",none:""},u={};this.options=function(e){angular.extend(u,e)},this.setTriggers=function(e){angular.extend(s,e)},this.$get=["$window","$compile","$timeout","$document","$uibPosition","$interpolate","$rootScope","$parse","$$stackedMap",function(e,o,B,W,j,r,t,_,n){var G=n.createNew();function a(e){if(27===e.which){var t=G.top();t&&(t.value.close(),t=null)}}return W.on("keyup",a),t.$on("$destroy",function(){W.off("keyup",a)}),function(q,L,n,z){function Y(e){var t=(e||z.trigger||n).split(" ");return{show:t,hide:t.map(function(e){return s[e]||e})}}z=angular.extend({},l,u,z);var e=q.replace(/[A-Z]/g,function(e,t){return(t?"-":"")+e.toLowerCase()}),t=r.startSymbol(),a=r.endSymbol(),i="<div "+e+'-popup uib-title="'+t+"title"+a+'" '+(z.useContentExp?'content-exp="contentExp()" ':'content="'+t+"content"+a+'" ')+'origin-scope="origScope" class="uib-position-measure '+L+'" tooltip-animation-class="fade"uib-tooltip-classes ng-class="{ in: isOpen }" ></div>';return{compile:function(e,t){var V=o(i);return function(a,o,i,e){var r,t,n,l,s,u,p,c,d=!!angular.isDefined(z.appendToBody)&&z.appendToBody,f=Y(void 0),m=angular.isDefined(i[L+"Enable"]),g=a.$new(!0),h=!1,b=!!angular.isDefined(i[L+"IsOpen"])&&_(i[L+"IsOpen"]),v=!!z.useContentExp&&_(i[q]),$=[],y=function(){r&&r.html()&&(u||(u=B(function(){var e=j.positionElements(o,r,g.placement,d),n=angular.isDefined(r.offsetHeight)?r.offsetHeight:r.prop("offsetHeight"),a=d?j.offset(o):j.position(o);r.css({top:e.top+"px",left:e.left+"px"});var i=e.placement.split("-");r.hasClass(i[0])||(r.removeClass(c.split("-")[0]),r.addClass(i[0])),r.hasClass(z.placementClassPrefix+e.placement)||(r.removeClass(z.placementClassPrefix+c),r.addClass(z.placementClassPrefix+e.placement)),p=B(function(){var e=angular.isDefined(r.offsetHeight)?r.offsetHeight:r.prop("offsetHeight"),t=j.adjustTop(i,a,n,e);t&&r.css(t),p=null},0,!1),r.hasClass("uib-position-measure")?(j.positionArrow(r,e.placement),r.removeClass("uib-position-measure")):c!==e.placement&&j.positionArrow(r,e.placement),c=e.placement,u=null},0,!1)))};function w(){g.isOpen?D():k()}function k(){m&&!a.$eval(i[L+"Enable"])||(T(),function(){g.title=i[L+"Title"],g.content=v?v(a):i[q];g.popupClass=i[L+"Class"],g.placement=angular.isDefined(i[L+"Placement"])?i[L+"Placement"]:z.placement;var e=j.parsePlacement(g.placement);c=e[1]?e[0]+"-"+e[1]:e[0];var t=parseInt(i[L+"PopupDelay"],10),n=parseInt(i[L+"PopupCloseDelay"],10);g.popupDelay=isNaN(t)?z.popupDelay:t,g.popupCloseDelay=isNaN(n)?z.popupCloseDelay:n}(),g.popupDelay?l||(l=B(x,g.popupDelay,!1)):x())}function D(){C(),g.popupCloseDelay?s||(s=B(M,g.popupCloseDelay,!1)):M()}function x(){if(C(),T(),!g.content)return angular.noop;!function(){if(r)return;t=g.$new(),r=V(t,function(e){d?W.find("body").append(e):o.after(e)}),G.add(g,{close:M}),function(){$.length=0,v?($.push(a.$watch(v,function(e){!(g.content=e)&&g.isOpen&&M()})),$.push(t.$watch(function(){h||(h=!0,t.$$postDigest(function(){h=!1,g&&g.isOpen&&y()}))}))):$.push(i.$observe(q,function(e){!(g.content=e)&&g.isOpen?M():y()}));$.push(i.$observe(L+"Title",function(e){g.title=e,g.isOpen&&y()})),$.push(i.$observe(L+"Placement",function(e){g.placement=e||z.placement,g.isOpen&&y()}))}()}(),g.$evalAsync(function(){S(g.isOpen=!0),y()})}function C(){l&&(B.cancel(l),l=null),u&&(B.cancel(u),u=null)}function M(){g&&g.$evalAsync(function(){g&&(S(g.isOpen=!1),g.animation?n||(n=B(O,150,!1)):O())})}function T(){s&&(B.cancel(s),s=null),n&&(B.cancel(n),n=null)}function O(){C(),T(),$.length&&(angular.forEach($,function(e){e()}),$.length=0),r&&(r.remove(),r=null,p&&B.cancel(p)),G.remove(g),t&&(t.$destroy(),t=null)}function S(e){b&&angular.isFunction(b.assign)&&b.assign(a,e)}function P(e){g&&g.isOpen&&r&&(o[0].contains(e.target)||r[0].contains(e.target)||D())}function E(e){27===e.which&&D()}g.origScope=a,g.isOpen=!1,g.contentExp=function(){return g.content},i.$observe("disabled",function(e){e&&C(),e&&g.isOpen&&M()}),b&&a.$watch(b,function(e){g&&!e===g.isOpen&&w()});var A,I,U,N=function(){f.show.forEach(function(e){"outsideClick"===e?o.off("click",w):(o.off(e,k),o.off(e,w)),o.off("keypress",E)}),f.hide.forEach(function(e){"outsideClick"===e?W.off("click",P):o.off(e,D)})};A=[],I=[],U=a.$eval(i[L+"Trigger"]),N(),angular.isObject(U)?(Object.keys(U).forEach(function(e){A.push(e),I.push(U[e])}),f={show:A,hide:I}):f=Y(U),"none"!==f.show&&f.show.forEach(function(e,t){"outsideClick"===e?(o.on("click",w),W.on("click",P)):e===f.hide[t]?o.on(e,w):e&&(o.on(e,k),o.on(f.hide[t],D)),o.on("keypress",E)});var F,H=a.$eval(i[L+"Animation"]);g.animation=angular.isDefined(H)?!!H:z.animation;var R=L+"AppendToBody";F=R in i&&void 0===i[R]||a.$eval(i[R]),d=angular.isDefined(F)?F:d,a.$on("$destroy",function(){N(),O(),g=null})}}}}}]}).directive("uibTooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(c,a,d,f){return{link:function(e,o,t){var r,n,l,s=e.$eval(t.tooltipTemplateTranscludeScope),u=0,p=function(){n&&(n.remove(),n=null),r&&(r.$destroy(),r=null),l&&(c.leave(l).then(function(){n=null}),n=l,l=null)};e.$watch(a.parseAsResourceUrl(t.uibTooltipTemplateTransclude),function(a){var i=++u;a?(f(a,!0).then(function(e){if(i===u){var t=s.$new(),n=d(e)(t,function(e){p(),c.enter(e,o)});l=n,(r=t).$emit("$includeContentLoaded",a)}},function(){i===u&&(p(),e.$emit("$includeContentError",a))}),e.$emit("$includeContentRequested",a)):p()}),e.$on("$destroy",p)}}}]).directive("uibTooltipClasses",["$uibPosition",function(i){return{restrict:"A",link:function(e,t,n){if(e.placement){var a=i.parsePlacement(e.placement);t.addClass(a[0])}e.popupClass&&t.addClass(e.popupClass),e.animation&&t.addClass(n.tooltipAnimationClass)}}}]).directive("uibTooltipPopup",function(){return{restrict:"A",scope:{content:"@"},templateUrl:"uib/template/tooltip/tooltip-popup.html"}}).directive("uibTooltip",["$uibTooltip",function(e){return e("uibTooltip","tooltip","mouseenter")}]).directive("uibTooltipTemplatePopup",function(){return{restrict:"A",scope:{contentExp:"&",originScope:"&"},templateUrl:"uib/template/tooltip/tooltip-template-popup.html"}}).directive("uibTooltipTemplate",["$uibTooltip",function(e){return e("uibTooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("uibTooltipHtmlPopup",function(){return{restrict:"A",scope:{contentExp:"&"},templateUrl:"uib/template/tooltip/tooltip-html-popup.html"}}).directive("uibTooltipHtml",["$uibTooltip",function(e){return e("uibTooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("uibPopoverTemplatePopup",function(){return{restrict:"A",scope:{uibTitle:"@",contentExp:"&",originScope:"&"},templateUrl:"uib/template/popover/popover-template.html"}}).directive("uibPopoverTemplate",["$uibTooltip",function(e){return e("uibPopoverTemplate","popover","click",{useContentExp:!0})}]).directive("uibPopoverHtmlPopup",function(){return{restrict:"A",scope:{contentExp:"&",uibTitle:"@"},templateUrl:"uib/template/popover/popover-html.html"}}).directive("uibPopoverHtml",["$uibTooltip",function(e){return e("uibPopoverHtml","popover","click",{useContentExp:!0})}]).directive("uibPopoverPopup",function(){return{restrict:"A",scope:{uibTitle:"@",content:"@"},templateUrl:"uib/template/popover/popover.html"}}).directive("uibPopover",["$uibTooltip",function(e){return e("uibPopover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("uibProgressConfig",{animate:!0,max:100}).controller("UibProgressController",["$scope","$attrs","uibProgressConfig",function(e,t,n){var a=this,i=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;function o(){return angular.isDefined(e.maxParam)?e.maxParam:n.max}this.bars=[],e.max=o(),this.addBar=function(t,e,n){i||e.css({transition:"none"}),this.bars.push(t),t.max=o(),t.title=n&&angular.isDefined(n.title)?n.title:"progressbar",t.$watch("value",function(e){t.recalculatePercentage()}),t.recalculatePercentage=function(){var e=a.bars.reduce(function(e,t){return t.percent=+(100*t.value/t.max).toFixed(2),e+t.percent},0);100<e&&(t.percent-=e-100)},t.$on("$destroy",function(){e=null,a.removeBar(t)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1),this.bars.forEach(function(e){e.recalculatePercentage()})},e.$watch("maxParam",function(e){a.bars.forEach(function(e){e.max=o(),e.recalculatePercentage()})})}]).directive("uibProgress",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",require:"uibProgress",scope:{maxParam:"=?max"},templateUrl:"uib/template/progressbar/progress.html"}}).directive("uibBar",function(){return{replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"uib/template/progressbar/bar.html",link:function(e,t,n,a){a.addBar(e,t,n)}}}).directive("uibProgressbar",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",scope:{value:"=",maxParam:"=?max",type:"@"},templateUrl:"uib/template/progressbar/progressbar.html",link:function(e,t,n,a){a.addBar(e,angular.element(t.children()[0]),{title:n.title})}}}),angular.module("ui.bootstrap.rating",[]).constant("uibRatingConfig",{max:5,stateOn:null,stateOff:null,enableReset:!0,titles:["one","two","three","four","five"]}).controller("UibRatingController",["$scope","$attrs","uibRatingConfig",function(a,i,o){var r={$setViewValue:angular.noop},n=this;this.init=function(e){(r=e).$render=this.render,r.$formatters.push(function(e){return angular.isNumber(e)&&e<<0!==e&&(e=Math.round(e)),e}),this.stateOn=angular.isDefined(i.stateOn)?a.$parent.$eval(i.stateOn):o.stateOn,this.stateOff=angular.isDefined(i.stateOff)?a.$parent.$eval(i.stateOff):o.stateOff,this.enableReset=angular.isDefined(i.enableReset)?a.$parent.$eval(i.enableReset):o.enableReset;var t=angular.isDefined(i.titles)?a.$parent.$eval(i.titles):o.titles;this.titles=angular.isArray(t)&&0<t.length?t:o.titles;var n=angular.isDefined(i.ratingStates)?a.$parent.$eval(i.ratingStates):new Array(angular.isDefined(i.max)?a.$parent.$eval(i.max):o.max);a.range=this.buildTemplateObjects(n)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;t<n;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(t)},e[t]);return e},this.getTitle=function(e){return e>=this.titles.length?e+1:this.titles[e]},a.rate=function(e){if(!a.readonly&&0<=e&&e<=a.range.length){var t=n.enableReset&&r.$viewValue===e?0:e;r.$setViewValue(t),r.$render()}},a.enter=function(e){a.readonly||(a.value=e),a.onHover({value:e})},a.reset=function(){a.value=r.$viewValue,a.onLeave()},a.onKeydown=function(e){/(37|38|39|40)/.test(e.which)&&(e.preventDefault(),e.stopPropagation(),a.rate(a.value+(38===e.which||39===e.which?1:-1)))},this.render=function(){a.value=r.$viewValue,a.title=n.getTitle(a.value-1)}}]).directive("uibRating",function(){return{require:["uibRating","ngModel"],restrict:"A",scope:{readonly:"=?readOnly",onHover:"&",onLeave:"&"},controller:"UibRatingController",templateUrl:"uib/template/rating/rating.html",link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("UibTabsetController",["$scope",function(e){var o,r,l=this;function s(e){for(var t=0;t<l.tabs.length;t++)if(l.tabs[t].index===e)return t}l.tabs=[],l.select=function(e,t){if(!r){var n=s(o),a=l.tabs[n];if(a){if(a.tab.onDeselect({$event:t,$selectedIndex:e}),t&&t.isDefaultPrevented())return;a.tab.active=!1}var i=l.tabs[e];i?(i.tab.onSelect({$event:t}),i.tab.active=!0,l.active=i.index,o=i.index):!i&&angular.isDefined(o)&&(l.active=null,o=null)}},l.addTab=function(e){if(l.tabs.push({tab:e,index:e.index}),l.tabs.sort(function(e,t){return e.index>t.index?1:e.index<t.index?-1:0}),e.index===l.active||!angular.isDefined(l.active)&&1===l.tabs.length){var t=s(e.index);l.select(t)}},l.removeTab=function(e){for(var t,n=0;n<l.tabs.length;n++)if(l.tabs[n].tab===e){t=n;break}if(l.tabs[t].index===l.active){var a=t===l.tabs.length-1?t-1:t+1%l.tabs.length;l.select(a)}l.tabs.splice(t,1)},e.$watch("tabset.active",function(e){angular.isDefined(e)&&e!==o&&l.select(s(e))}),e.$on("$destroy",function(){r=!0})}]).directive("uibTabset",function(){return{transclude:!0,replace:!0,scope:{},bindToController:{active:"=?",type:"@"},controller:"UibTabsetController",controllerAs:"tabset",templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tabset.html"},link:function(e,t,n){e.vertical=!!angular.isDefined(n.vertical)&&e.$parent.$eval(n.vertical),e.justified=!!angular.isDefined(n.justified)&&e.$parent.$eval(n.justified)}}}).directive("uibTab",["$parse",function(o){return{require:"^uibTabset",replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tab.html"},transclude:!0,scope:{heading:"@",index:"=?",classes:"@?",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},controllerAs:"tab",link:function(a,e,t,i,n){a.disabled=!1,t.disable&&a.$parent.$watch(o(t.disable),function(e){a.disabled=!!e}),angular.isUndefined(t.index)&&(i.tabs&&i.tabs.length?a.index=Math.max.apply(null,i.tabs.map(function(e){return e.index}))+1:a.index=0),angular.isUndefined(t.classes)&&(a.classes=""),a.select=function(e){if(!a.disabled){for(var t,n=0;n<i.tabs.length;n++)if(i.tabs[n].tab===a){t=n;break}i.select(t,e)}},i.addTab(a),a.$on("$destroy",function(){i.removeTab(a)}),a.$transcludeFn=n}}}]).directive("uibTabHeadingTransclude",function(){return{restrict:"A",require:"^uibTab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}).directive("uibTabContentTransclude",function(){return{restrict:"A",require:"^uibTabset",link:function(e,n,t){var a=e.$eval(t.uibTabContentTransclude).tab;a.$transcludeFn(a.$parent,function(e){angular.forEach(e,function(e){var t;(t=e).tagName&&(t.hasAttribute("uib-tab-heading")||t.hasAttribute("data-uib-tab-heading")||t.hasAttribute("x-uib-tab-heading")||"uib-tab-heading"===t.tagName.toLowerCase()||"data-uib-tab-heading"===t.tagName.toLowerCase()||"x-uib-tab-heading"===t.tagName.toLowerCase()||"uib:tab-heading"===t.tagName.toLowerCase())?a.headingElement=e:n.append(e)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("uibTimepickerConfig",{hourStep:1,minuteStep:1,secondStep:1,showMeridian:!0,showSeconds:!1,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0,templateUrl:"uib/template/timepicker/timepicker.html"}).controller("UibTimepickerController",["$scope","$element","$attrs","$parse","$log","$locale","uibTimepickerConfig",function(o,e,r,t,n,a,l){var s,u,p,i=new Date,c=[],d={$setViewValue:angular.noop},f=angular.isDefined(r.meridians)?o.$parent.$eval(r.meridians):l.meridians||a.DATETIME_FORMATS.AMPMS,m=!angular.isDefined(r.padHours)||o.$parent.$eval(r.padHours);o.tabindex=angular.isDefined(r.tabindex)?r.tabindex:0,e.removeAttr("tabindex"),this.init=function(e,t){(d=e).$render=this.render,d.$formatters.unshift(function(e){return e?new Date(e):null});var n=t.eq(0),a=t.eq(1),i=t.eq(2);s=n.controller("ngModel"),u=a.controller("ngModel"),p=i.controller("ngModel"),(angular.isDefined(r.mousewheel)?o.$parent.$eval(r.mousewheel):l.mousewheel)&&this.setupMousewheelEvents(n,a,i),(angular.isDefined(r.arrowkeys)?o.$parent.$eval(r.arrowkeys):l.arrowkeys)&&this.setupArrowkeyEvents(n,a,i),o.readonlyInput=angular.isDefined(r.readonlyInput)?o.$parent.$eval(r.readonlyInput):l.readonlyInput,this.setupInputEvents(n,a,i)};var g=l.hourStep;r.hourStep&&c.push(o.$parent.$watch(t(r.hourStep),function(e){g=+e}));var h,b,v=l.minuteStep;r.minuteStep&&c.push(o.$parent.$watch(t(r.minuteStep),function(e){v=+e})),c.push(o.$parent.$watch(t(r.min),function(e){var t=new Date(e);h=isNaN(t)?void 0:t})),c.push(o.$parent.$watch(t(r.max),function(e){var t=new Date(e);b=isNaN(t)?void 0:t}));var $=!1;r.ngDisabled&&c.push(o.$parent.$watch(t(r.ngDisabled),function(e){$=e})),o.noIncrementHours=function(){var e=O(i,60*g);return $||b<e||e<i&&e<h},o.noDecrementHours=function(){var e=O(i,60*-g);return $||e<h||i<e&&b<e},o.noIncrementMinutes=function(){var e=O(i,v);return $||b<e||e<i&&e<h},o.noDecrementMinutes=function(){var e=O(i,-v);return $||e<h||i<e&&b<e},o.noIncrementSeconds=function(){var e=S(i,y);return $||b<e||e<i&&e<h},o.noDecrementSeconds=function(){var e=S(i,-y);return $||e<h||i<e&&b<e},o.noToggleMeridian=function(){return i.getHours()<12?$||O(i,720)>b:$||O(i,-720)<h};var y=l.secondStep;function w(){var e=+o.hours;if((o.showMeridian?0<e&&e<13:0<=e&&e<24)&&""!==o.hours)return o.showMeridian&&(12===e&&(e=0),o.meridian===f[1]&&(e+=12)),e}function k(){var e=+o.minutes;if(0<=e&&e<60&&""!==o.minutes)return e}function D(e,t){return null===e?"":angular.isDefined(e)&&e.toString().length<2&&!t?"0"+e:e.toString()}function x(e){C(),d.$setViewValue(new Date(i)),M(e)}function C(){s&&s.$setValidity("hours",!0),u&&u.$setValidity("minutes",!0),p&&p.$setValidity("seconds",!0),d.$setValidity("time",!0),o.invalidHours=!1,o.invalidMinutes=!1,o.invalidSeconds=!1}function M(e){if(d.$modelValue){var t=i.getHours(),n=i.getMinutes(),a=i.getSeconds();o.showMeridian&&(t=0===t||12===t?12:t%12),o.hours="h"===e?t:D(t,!m),"m"!==e&&(o.minutes=D(n)),o.meridian=i.getHours()<12?f[0]:f[1],"s"!==e&&(o.seconds=D(a)),o.meridian=i.getHours()<12?f[0]:f[1]}else o.hours=null,o.minutes=null,o.seconds=null,o.meridian=f[0]}function T(e){i=S(i,e),x()}function O(e,t){return S(e,60*t)}function S(e,t){var n=new Date(e.getTime()+1e3*t),a=new Date(e);return a.setHours(n.getHours(),n.getMinutes(),n.getSeconds()),a}function P(){return(null===o.hours||""===o.hours)&&(null===o.minutes||""===o.minutes)&&(!o.showSeconds||o.showSeconds&&(null===o.seconds||""===o.seconds))}r.secondStep&&c.push(o.$parent.$watch(t(r.secondStep),function(e){y=+e})),o.showSeconds=l.showSeconds,r.showSeconds&&c.push(o.$parent.$watch(t(r.showSeconds),function(e){o.showSeconds=!!e})),o.showMeridian=l.showMeridian,r.showMeridian&&c.push(o.$parent.$watch(t(r.showMeridian),function(e){if(o.showMeridian=!!e,d.$error.time){var t=w(),n=k();angular.isDefined(t)&&angular.isDefined(n)&&(i.setHours(t),x())}else M()})),this.setupMousewheelEvents=function(e,t,n){var a=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||0<t};e.on("mousewheel wheel",function(e){$||o.$apply(a(e)?o.incrementHours():o.decrementHours()),e.preventDefault()}),t.on("mousewheel wheel",function(e){$||o.$apply(a(e)?o.incrementMinutes():o.decrementMinutes()),e.preventDefault()}),n.on("mousewheel wheel",function(e){$||o.$apply(a(e)?o.incrementSeconds():o.decrementSeconds()),e.preventDefault()})},this.setupArrowkeyEvents=function(e,t,n){e.on("keydown",function(e){$||(38===e.which?(e.preventDefault(),o.incrementHours(),o.$apply()):40===e.which&&(e.preventDefault(),o.decrementHours(),o.$apply()))}),t.on("keydown",function(e){$||(38===e.which?(e.preventDefault(),o.incrementMinutes(),o.$apply()):40===e.which&&(e.preventDefault(),o.decrementMinutes(),o.$apply()))}),n.on("keydown",function(e){$||(38===e.which?(e.preventDefault(),o.incrementSeconds(),o.$apply()):40===e.which&&(e.preventDefault(),o.decrementSeconds(),o.$apply()))})},this.setupInputEvents=function(e,t,n){if(o.readonlyInput)return o.updateHours=angular.noop,o.updateMinutes=angular.noop,void(o.updateSeconds=angular.noop);var a=function(e,t,n){d.$setViewValue(null),d.$setValidity("time",!1),angular.isDefined(e)&&(o.invalidHours=e,s&&s.$setValidity("hours",!1)),angular.isDefined(t)&&(o.invalidMinutes=t,u&&u.$setValidity("minutes",!1)),angular.isDefined(n)&&(o.invalidSeconds=n,p&&p.$setValidity("seconds",!1))};o.updateHours=function(){var e=w(),t=k();d.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(i.setHours(e),i.setMinutes(t),i<h||b<i?a(!0):x("h")):a(!0)},e.on("blur",function(e){d.$setTouched(),P()?C():null===o.hours||""===o.hours?a(!0):!o.invalidHours&&o.hours<10&&o.$apply(function(){o.hours=D(o.hours,!m)})}),o.updateMinutes=function(){var e=k(),t=w();d.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(i.setHours(t),i.setMinutes(e),i<h||b<i?a(void 0,!0):x("m")):a(void 0,!0)},t.on("blur",function(e){d.$setTouched(),P()?C():null===o.minutes?a(void 0,!0):!o.invalidMinutes&&o.minutes<10&&o.$apply(function(){o.minutes=D(o.minutes)})}),o.updateSeconds=function(){var e,t=0<=(e=+o.seconds)&&e<60?e:void 0;d.$setDirty(),angular.isDefined(t)?(i.setSeconds(t),x("s")):a(void 0,void 0,!0)},n.on("blur",function(e){P()?C():!o.invalidSeconds&&o.seconds<10&&o.$apply(function(){o.seconds=D(o.seconds)})})},this.render=function(){var e=d.$viewValue;isNaN(e)?(d.$setValidity("time",!1),n.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(e&&(i=e),i<h||b<i?(d.$setValidity("time",!1),o.invalidHours=!0,o.invalidMinutes=!0):C(),M())},o.showSpinners=angular.isDefined(r.showSpinners)?o.$parent.$eval(r.showSpinners):l.showSpinners,o.incrementHours=function(){o.noIncrementHours()||T(60*g*60)},o.decrementHours=function(){o.noDecrementHours()||T(60*-g*60)},o.incrementMinutes=function(){o.noIncrementMinutes()||T(60*v)},o.decrementMinutes=function(){o.noDecrementMinutes()||T(60*-v)},o.incrementSeconds=function(){o.noIncrementSeconds()||T(y)},o.decrementSeconds=function(){o.noDecrementSeconds()||T(-y)},o.toggleMeridian=function(){var e=k(),t=w();o.noToggleMeridian()||(angular.isDefined(e)&&angular.isDefined(t)?T(720*(i.getHours()<12?60:-60)):o.meridian=o.meridian===f[0]?f[1]:f[0])},o.blur=function(){d.$setTouched()},o.$on("$destroy",function(){for(;c.length;)c.shift()()})}]).directive("uibTimepicker",["uibTimepickerConfig",function(n){return{require:["uibTimepicker","?^ngModel"],restrict:"A",controller:"UibTimepickerController",controllerAs:"timepicker",scope:{},templateUrl:function(e,t){return t.templateUrl||n.templateUrl},link:function(e,t,n,a){var i=a[0],o=a[1];o&&i.init(o,t.find("input"))}}}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.debounce","ui.bootstrap.position"]).factory("uibTypeaheadParser",["$parse",function(n){var a=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(e){var t=e.match(a);if(!t)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+e+'".');return{itemName:t[3],source:n(t[4]),viewMapper:n(t[2]||t[1]),modelMapper:n(t[1])}}}}]).controller("UibTypeaheadController",["$scope","$element","$attrs","$compile","$parse","$q","$timeout","$document","$window","$rootScope","$$debounce","$uibPosition","uibTypeaheadParser",function(u,p,l,e,t,n,s,a,i,o,c,r,d){var f,m,g=[9,13,27,38,40],h=u.$eval(l.typeaheadMinLength);h||0===h||(h=1),u.$watch(l.typeaheadMinLength,function(e){h=e||0===e?e:1});var b=u.$eval(l.typeaheadWaitMs)||0,v=!1!==u.$eval(l.typeaheadEditable);u.$watch(l.typeaheadEditable,function(e){v=!1!==e});var $,y,w=t(l.typeaheadLoading).assign||angular.noop,k=l.typeaheadShouldSelect?t(l.typeaheadShouldSelect):function(e,t){var n=t.$event;return 13===n.which||9===n.which},D=t(l.typeaheadOnSelect),x=!!angular.isDefined(l.typeaheadSelectOnBlur)&&u.$eval(l.typeaheadSelectOnBlur),C=t(l.typeaheadNoResults).assign||angular.noop,M=l.typeaheadInputFormatter?t(l.typeaheadInputFormatter):void 0,T=!!l.typeaheadAppendToBody&&u.$eval(l.typeaheadAppendToBody),O=l.typeaheadAppendTo?u.$eval(l.typeaheadAppendTo):null,S=!1!==u.$eval(l.typeaheadFocusFirst),P=!!l.typeaheadSelectOnExact&&u.$eval(l.typeaheadSelectOnExact),E=t(l.typeaheadIsOpen).assign||angular.noop,A=u.$eval(l.typeaheadShowHint)||!1,I=t(l.ngModel),U=t(l.ngModel+"($$$p)"),N=d.parse(l.uibTypeahead),F=u.$new(),H=u.$on("$destroy",function(){F.$destroy()});F.$on("$destroy",H);var R,V,q="typeahead-"+F.$id+"-"+Math.floor(1e4*Math.random());p.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":q}),A&&((R=angular.element("<div></div>")).css("position","relative"),p.after(R),(V=p.clone()).attr("placeholder",""),V.attr("tabindex","-1"),V.val(""),V.css({position:"absolute",top:"0px",left:"0px","border-color":"transparent","box-shadow":"none",opacity:1,background:"none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)",color:"#999"}),p.css({position:"relative","vertical-align":"top","background-color":"transparent"}),V.attr("id")&&V.removeAttr("id"),R.append(V),V.after(p));var L=angular.element("<div uib-typeahead-popup></div>");L.attr({id:q,matches:"matches",active:"activeIdx",select:"select(activeIdx, evt)","move-in-progress":"moveInProgress",query:"query",position:"position","assign-is-open":"assignIsOpen(isOpen)",debounce:"debounceUpdate"}),angular.isDefined(l.typeaheadTemplateUrl)&&L.attr("template-url",l.typeaheadTemplateUrl),angular.isDefined(l.typeaheadPopupTemplateUrl)&&L.attr("popup-template-url",l.typeaheadPopupTemplateUrl);var z=function(){F.matches=[],F.activeIdx=-1,p.attr("aria-expanded",!1),A&&V.val("")},Y=function(e){return q+"-option-"+e};F.$watch("activeIdx",function(e){e<0?p.removeAttr("aria-activedescendant"):p.attr("aria-activedescendant",Y(e))});var B=function(r,l){var s={$viewValue:r};w(u,!0),C(u,!1),n.when(N.source(u,s)).then(function(e){var t,n,a=r===f.$viewValue;if(a&&$)if(e&&0<e.length){F.activeIdx=S?0:-1,C(u,!1);for(var i=F.matches.length=0;i<e.length;i++)s[N.itemName]=e[i],F.matches.push({id:Y(i),label:N.viewMapper(F,s),model:e[i]});if(F.query=r,G(),p.attr("aria-expanded",!0),P&&1===F.matches.length&&(t=r,n=0,F.matches.length>n&&t&&t.toUpperCase()===F.matches[n].label.toUpperCase())&&(angular.isNumber(F.debounceUpdate)||angular.isObject(F.debounceUpdate)?c(function(){F.select(0,l)},angular.isNumber(F.debounceUpdate)?F.debounceUpdate:F.debounceUpdate.default):F.select(0,l)),A){var o=F.matches[0].label;angular.isString(r)&&0<r.length&&o.slice(0,r.length).toUpperCase()===r.toUpperCase()?V.val(r+o.slice(r.length)):V.val("")}}else z(),C(u,!0);a&&w(u,!1)},function(){z(),w(u,!1),C(u,!0)})};T&&(angular.element(i).on("resize",_),a.find("body").on("scroll",_));var W,j=c(function(){F.matches.length&&G(),F.moveInProgress=!1},200);function _(){F.moveInProgress||(F.moveInProgress=!0,F.$digest()),j()}function G(){F.position=T?r.offset(p):r.position(p),F.position.top+=p.prop("offsetHeight")}F.moveInProgress=!1,F.query=void 0;var K=function(){W&&s.cancel(W)};z(),F.assignIsOpen=function(e){E(u,e)},F.select=function(e,t){var n,a,i,o,r={};y=!0,r[N.itemName]=a=F.matches[e].model,n=N.modelMapper(u,r),i=u,o=n,angular.isFunction(I(u))&&m.getOption("getterSetter")?U(i,{$$$p:o}):I.assign(i,o),f.$setValidity("editable",!0),f.$setValidity("parse",!0),D(u,{$item:a,$model:n,$label:N.viewMapper(u,r),$event:t}),z(),!1!==F.$eval(l.typeaheadFocusOnSelect)&&s(function(){p[0].focus()},0,!1)},p.on("keydown",function(e){if(0!==F.matches.length&&-1!==g.indexOf(e.which)){var t,n=k(u,{$event:e});if(-1===F.activeIdx&&n||9===e.which&&e.shiftKey)return z(),void F.$digest();switch(e.preventDefault(),e.which){case 27:e.stopPropagation(),z(),u.$digest();break;case 38:F.activeIdx=(0<F.activeIdx?F.activeIdx:F.matches.length)-1,F.$digest(),(t=L[0].querySelectorAll(".uib-typeahead-match")[F.activeIdx]).parentNode.scrollTop=t.offsetTop;break;case 40:F.activeIdx=(F.activeIdx+1)%F.matches.length,F.$digest(),(t=L[0].querySelectorAll(".uib-typeahead-match")[F.activeIdx]).parentNode.scrollTop=t.offsetTop;break;default:n&&F.$apply(function(){angular.isNumber(F.debounceUpdate)||angular.isObject(F.debounceUpdate)?c(function(){F.select(F.activeIdx,e)},angular.isNumber(F.debounceUpdate)?F.debounceUpdate:F.debounceUpdate.default):F.select(F.activeIdx,e)})}}}),p.on("focus",function(e){$=!0,0!==h||f.$viewValue||s(function(){B(f.$viewValue,e)},0)}),p.on("blur",function(e){x&&F.matches.length&&-1!==F.activeIdx&&!y&&(y=!0,F.$apply(function(){angular.isObject(F.debounceUpdate)&&angular.isNumber(F.debounceUpdate.blur)?c(function(){F.select(F.activeIdx,e)},F.debounceUpdate.blur):F.select(F.activeIdx,e)})),!v&&f.$error.editable&&(f.$setViewValue(),F.$apply(function(){f.$setValidity("editable",!0),f.$setValidity("parse",!0)}),p.val("")),y=$=!1});var X=function(e){p[0]!==e.target&&3!==e.which&&0!==F.matches.length&&(z(),o.$$phase||u.$digest())};a.on("click",X),u.$on("$destroy",function(){a.off("click",X),(T||O)&&Z.remove(),T&&(angular.element(i).off("resize",_),a.find("body").off("scroll",_)),L.remove(),A&&R.remove()});var Z=e(L)(F);T?a.find("body").append(Z):O?angular.element(O).eq(0).append(Z):p.after(Z),this.init=function(e){m=function(e){var t;angular.version.minor<6?(t=e.$options||{}).getOption=function(e){return t[e]}:t=e.$options;return t}(f=e),F.debounceUpdate=t(m.getOption("debounce"))(u),f.$parsers.unshift(function(e){var t;return $=!0,0===h||e&&e.length>=h?0<b?(K(),t=e,W=s(function(){B(t)},b)):B(e):(w(u,!1),K(),z()),v?e:e?void f.$setValidity("editable",!1):(f.$setValidity("editable",!0),null)}),f.$formatters.push(function(e){var t,n={};return v||f.$setValidity("editable",!0),M?(n.$model=e,M(u,n)):(n[N.itemName]=e,t=N.viewMapper(u,n),n[N.itemName]=void 0,t!==N.viewMapper(u,n)?t:e)})}}]).directive("uibTypeahead",function(){return{controller:"UibTypeaheadController",require:["ngModel","uibTypeahead"],link:function(e,t,n,a){a[1].init(a[0])}}}).directive("uibTypeaheadPopup",["$$debounce",function(i){return{scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&",assignIsOpen:"&",debounce:"&"},replace:!0,templateUrl:function(e,t){return t.popupTemplateUrl||"uib/template/typeahead/typeahead-popup.html"},link:function(a,e,t){a.templateUrl=t.templateUrl,a.isOpen=function(){var e=0<a.matches.length;return a.assignIsOpen({isOpen:e}),e},a.isActive=function(e){return a.active===e},a.selectActive=function(e){a.active=e},a.selectMatch=function(e,t){var n=a.debounce();angular.isNumber(n)||angular.isObject(n)?i(function(){a.select({activeIdx:e,evt:t})},angular.isNumber(n)?n:n.default):a.select({activeIdx:e,evt:t})}}}}]).directive("uibTypeaheadMatch",["$templateRequest","$compile","$parse",function(i,o,r){return{scope:{index:"=",match:"=",query:"="},link:function(n,a,e){var t=r(e.templateUrl)(n.$parent)||"uib/template/typeahead/typeahead-match.html";i(t).then(function(e){var t=angular.element(e.trim());a.replaceWith(t),o(t)(n)})}}}]).filter("uibTypeaheadHighlight",["$sce","$injector","$log",function(n,e,a){var i;return i=e.has("$sanitize"),function(e,t){return!i&&/<.*>/g.test(e)&&a.warn("Unsafe use of typeahead please use ngSanitize"),e=t?(""+e).replace(new RegExp(t.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1"),"gi"),"<strong>$&</strong>"):e,i||(e=n.trustAsHtml(e)),e}}]),angular.module("uib/template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion-group.html",'<div role="tab" id="{{::headingId}}" aria-selected="{{isOpen}}" class="panel-heading" ng-keypress="toggleOpen($event)">\n  <h4 class="panel-title">\n    <a role="button" data-toggle="collapse" href aria-expanded="{{isOpen}}" aria-controls="{{::panelId}}" tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading" ng-disabled="isDisabled" uib-tabindex-toggle><span uib-accordion-header ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n  </h4>\n</div>\n<div id="{{::panelId}}" aria-labelledby="{{::headingId}}" aria-hidden="{{!isOpen}}" role="tabpanel" class="panel-collapse collapse" uib-collapse="!isOpen">\n  <div class="panel-body" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion.html",'<div role="tablist" class="panel-group" ng-transclude></div>')}]),angular.module("uib/template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("uib/template/alert/alert.html",'<button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n  <span aria-hidden="true">&times;</span>\n  <span class="sr-only">Close</span>\n</button>\n<div ng-transclude></div>\n')}]),angular.module("uib/template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/carousel.html",'<div class="carousel-inner" ng-transclude></div>\n<a role="button" href class="left carousel-control" ng-click="prev()" ng-class="{ disabled: isPrevDisabled() }" ng-show="slides.length > 1">\n  <i aria-hidden="true" class="fa fa-chevron-left"></i>\n  <span class="sr-only">previous</span>\n</a>\n<a role="button" href class="right carousel-control" ng-click="next()" ng-class="{ disabled: isNextDisabled() }" ng-show="slides.length > 1">\n  <i aria-hidden="true" class="fa fa-chevron-right"></i>\n  <span class="sr-only">next</span>\n</a>\n<ol class="carousel-indicators" ng-show="slides.length > 1">\n  <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n    <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n  </li>\n</ol>\n')}]),angular.module("uib/template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/slide.html",'<div class="text-center" ng-transclude></div>\n')}]),angular.module("uib/template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/datepicker.html",'<div ng-switch="datepickerMode">\n  <div uib-daypicker ng-switch-when="day" tabindex="0" class="uib-daypicker"></div>\n  <div uib-monthpicker ng-switch-when="month" tabindex="0" class="uib-monthpicker"></div>\n  <div uib-yearpicker ng-switch-when="year" tabindex="0" class="uib-yearpicker"></div>\n</div>\n')}]),angular.module("uib/template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="fa fa-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="fa fa-chevron-right"></i><span class="sr-only">next</span></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-weeks" ng-repeat="row in rows track by $index" role="row">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default btn-sm"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="fa fa-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::yearHeaderColspan}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="fa fa-chevron-right"></i><span class="sr-only">next</span></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-months" ng-repeat="row in rows track by $index" role="row">\n      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="fa fa-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::columns - 2}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="fa fa-chevron-right"></i><span class="sr-only">next</span></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-years" ng-repeat="row in rows track by $index" role="row">\n      <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepickerPopup/popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepickerPopup/popup.html",'<ul role="presentation" class="uib-datepicker-popup dropdown-menu uib-position-measure" dropdown-nested ng-if="isOpen" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n  <li ng-transclude></li>\n  <li ng-if="showButtonBar" class="uib-button-bar">\n    <span class="btn-group pull-left">\n      <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\', $event)" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n      <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null, $event)">{{ getText(\'clear\') }}</button>\n    </span>\n    <button type="button" class="btn btn-sm btn-success pull-right uib-close" ng-click="close($event)">{{ getText(\'close\') }}</button>\n  </li>\n</ul>\n')}]),angular.module("uib/template/modal/window.html",[]).run(["$templateCache",function(e){e.put("uib/template/modal/window.html","<div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n")}]),angular.module("uib/template/pager/pager.html",[]).run(["$templateCache",function(e){e.put("uib/template/pager/pager.html",'<li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n<li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n')}]),angular.module("uib/template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("uib/template/pagination/pagination.html",'<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'first\')}}</a></li>\n<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n<li role="menuitem" ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)" ng-disabled="ngDisabled&&!page.active" uib-tabindex-toggle>{{page.text}}</a></li>\n<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'last\')}}</a></li>\n')}]),angular.module("uib/template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-html-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n')}]),angular.module("uib/template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner" ng-bind="content"></div>\n')}]),angular.module("uib/template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-template-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner"\n  uib-tooltip-template-transclude="contentExp()"\n  tooltip-template-transclude-scope="originScope()"></div>\n')}]),angular.module("uib/template/popover/popover-html.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-html.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover-template.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-template.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content"\n      uib-tooltip-template-transclude="contentExp()"\n      tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content" ng-bind="content"></div>\n</div>\n')}]),angular.module("uib/template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n')}]),angular.module("uib/template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progress.html",'<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>')}]),angular.module("uib/template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("uib/template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}" aria-valuetext="{{title}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="fa" ng-class="$index < value && (r.stateOn || \'fa-star\') || (r.stateOff || \'fa-star-empty\')" ng-attr-title="{{r.title}}"></i>\n</span>\n')}]),angular.module("uib/template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tab.html",'<li ng-class="[{active: active, disabled: disabled}, classes]" class="uib-tab nav-item">\n  <a href ng-click="select($event)" class="nav-link" uib-tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("uib/template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{tabset.type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane"\n         ng-repeat="tab in tabset.tabs"\n         ng-class="{active: tabset.active === tab.index}"\n         uib-tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("uib/template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/timepicker/timepicker.html",'<table class="uib-timepicker">\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-increment hours"><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="-1"><span class="fa fa-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-increment minutes"><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="-1"><span class="fa fa-chevron-up"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-increment seconds"><a ng-click="incrementSeconds()" ng-class="{disabled: noIncrementSeconds()}" class="btn btn-link" ng-disabled="noIncrementSeconds()" tabindex="-1"><span class="fa fa-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group uib-time hours" ng-class="{\'has-error\': invalidHours}">\n        <input type="text" placeholder="HH" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementHours()" ng-blur="blur()">\n      </td>\n      <td class="uib-separator">:</td>\n      <td class="form-group uib-time minutes" ng-class="{\'has-error\': invalidMinutes}">\n        <input type="text" placeholder="MM" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementMinutes()" ng-blur="blur()">\n      </td>\n      <td ng-show="showSeconds" class="uib-separator">:</td>\n      <td class="form-group uib-time seconds" ng-class="{\'has-error\': invalidSeconds}" ng-show="showSeconds">\n        <input type="text" placeholder="SS" ng-model="seconds" ng-change="updateSeconds()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementSeconds()" ng-blur="blur()">\n      </td>\n      <td ng-show="showMeridian" class="uib-time am-pm"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-decrement hours"><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="-1"><span class="fa fa-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-decrement minutes"><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="-1"><span class="fa fa-chevron-down"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-decrement seconds"><a ng-click="decrementSeconds()" ng-class="{disabled: noDecrementSeconds()}" class="btn btn-link" ng-disabled="noDecrementSeconds()" tabindex="-1"><span class="fa fa-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-match.html",'<a href\n   tabindex="-1"\n   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n   ng-attr-title="{{match.label}}"></a>\n')}]),angular.module("uib/template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li class="uib-typeahead-match" ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),angular.module("ui.bootstrap.carousel").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibCarouselCss&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),angular.$$uibCarouselCss=!0}),angular.module("ui.bootstrap.datepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'),angular.$$uibDatepickerCss=!0}),angular.module("ui.bootstrap.position").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibPositionCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'),angular.$$uibPositionCss=!0}),angular.module("ui.bootstrap.datepickerPopup").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerpopupCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'),angular.$$uibDatepickerpopupCss=!0}),angular.module("ui.bootstrap.tooltip").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTooltipCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'),angular.$$uibTooltipCss=!0}),angular.module("ui.bootstrap.timepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTimepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-time input{width:50px;}</style>'),angular.$$uibTimepickerCss=!0}),angular.module("ui.bootstrap.typeahead").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTypeaheadCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'),angular.$$uibTypeaheadCss=!0});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLWJvb3RzdHJhcC10cGxzLTIuNS4wLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJkaXJlY3RpdmUiLCIkYW5pbWF0ZSIsIiRxIiwiJHBhcnNlIiwiJGluamVjdG9yIiwiJGFuaW1hdGVDc3MiLCJoYXMiLCJnZXQiLCJsaW5rIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0cnMiLCJleHBhbmRpbmdFeHByIiwiZXhwYW5kaW5nIiwiZXhwYW5kZWRFeHByIiwiZXhwYW5kZWQiLCJjb2xsYXBzaW5nRXhwciIsImNvbGxhcHNpbmciLCJjb2xsYXBzZWRFeHByIiwiY29sbGFwc2VkIiwiaG9yaXpvbnRhbCIsImNzcyIsImNzc1RvIiwiZ2V0U2Nyb2xsRnJvbUVsZW1lbnQiLCJ3aWR0aCIsInNjcm9sbFdpZHRoIiwiaGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiZXhwYW5kRG9uZSIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJjb2xsYXBzZURvbmUiLCIkZXZhbCIsInVpYkNvbGxhcHNlIiwiYXR0ciIsImluaXQiLCIkd2F0Y2giLCJzaG91bGRDb2xsYXBzZSIsImhhc0NsYXNzIiwicmVzb2x2ZSIsInRoZW4iLCJ0byIsInN0YXJ0Iiwibm9vcCIsImNvbGxhcHNlIiwiZWFzaW5nIiwib3ZlcmZsb3ciLCJyZXN0cmljdCIsImVsZW0iLCIkb2JzZXJ2ZSIsImRpc2FibGVkIiwiJHNldCIsImNvbnN0YW50IiwiY2xvc2VPdGhlcnMiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJGF0dHJzIiwiYWNjb3JkaW9uQ29uZmlnIiwidGhpcyIsImdyb3VwcyIsIm9wZW5Hcm91cCIsImlzRGVmaW5lZCIsImZvckVhY2giLCJncm91cCIsImlzT3BlbiIsImFkZEdyb3VwIiwiZ3JvdXBTY29wZSIsInRoYXQiLCJwdXNoIiwiJG9uIiwiZXZlbnQiLCJyZW1vdmVHcm91cCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImNvbnRyb2xsZXJBcyIsInRyYW5zY2x1ZGUiLCJ0ZW1wbGF0ZVVybCIsInJlcXVpcmUiLCJoZWFkaW5nIiwicGFuZWxDbGFzcyIsImlzRGlzYWJsZWQiLCJzZXRIZWFkaW5nIiwiYWNjb3JkaW9uQ3RybCIsIm9wZW5DbGFzcyIsInZhbHVlIiwidG9nZ2xlQ2xhc3MiLCJ0b2dnbGVPcGVuIiwiJGV2ZW50Iiwid2hpY2giLCJpZCIsIiRpZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImhlYWRpbmdJZCIsInBhbmVsSWQiLCJ0ZW1wbGF0ZSIsInJlcGxhY2UiLCJhY2NvcmRpb25Hcm91cEN0cmwiLCJ1aWJBY2NvcmRpb25UcmFuc2NsdWRlIiwicXVlcnlTZWxlY3RvciIsImh0bWwiLCJhcHBlbmQiLCIkZWxlbWVudCIsIiRpbnRlcnBvbGF0ZSIsIiR0aW1lb3V0IiwiY2xvc2VhYmxlIiwiY2xvc2UiLCJkaXNtaXNzT25UaW1lb3V0IiwiJHBhcmVudCIsInBhcnNlSW50IiwiYWN0aXZlQ2xhc3MiLCJ0b2dnbGVFdmVudCIsImJ1dHRvbkNvbmZpZyIsImN0cmxzIiwiYnV0dG9uc0N0cmwiLCJuZ01vZGVsQ3RybCIsInVuY2hlY2thYmxlRXhwciIsInVpYlVuY2hlY2thYmxlIiwiZmluZCIsImRpc3BsYXkiLCIkcmVuZGVyIiwiZXF1YWxzIiwiJG1vZGVsVmFsdWUiLCJ1aWJCdG5SYWRpbyIsIm9uIiwiaXNBY3RpdmUiLCJ1bmNoZWNrYWJsZSIsIiRhcHBseSIsIiRzZXRWaWV3VmFsdWUiLCJ1bmRlZmluZWQiLCJnZXRUcnVlVmFsdWUiLCJnZXRDaGVja2JveFZhbHVlIiwiYnRuQ2hlY2tib3hUcnVlIiwiYXR0cmlidXRlIiwiZGVmYXVsdFZhbHVlIiwiYnRuQ2hlY2tib3hGYWxzZSIsIiRpbnRlcnZhbCIsImN1cnJlbnRJbnRlcnZhbCIsImlzUGxheWluZyIsInNlbGYiLCJzbGlkZXMiLCJTTElERV9ESVJFQ1RJT04iLCJjdXJyZW50SW5kZXgiLCJhY3RpdmUiLCJkZXN0cm95ZWQiLCJzZXRBY3RpdmUiLCJpIiwibGVuZ3RoIiwic2xpZGUiLCJmaW5kU2xpZGVJbmRleCIsInJlc2V0VGltZXIiLCJjYW5jZWwiLCJyZXN0YXJ0VGltZXIiLCJpbnRlcnZhbCIsImlzTmFOIiwidGltZXJGbiIsIm5leHQiLCJwYXVzZSIsImFkZFNsaWRlIiwic29ydCIsImEiLCJiIiwiaXNOdW1iZXIiLCIkY3VycmVudFRyYW5zaXRpb24iLCJzZWxlY3QiLCJwbGF5IiwiZ2V0Q3VycmVudEluZGV4IiwibmV3SW5kZXgiLCJub1dyYXAiLCJwcmV2IiwicmVtb3ZlU2xpZGUiLCJuZXh0U2xpZGUiLCJkaXJlY3Rpb24iLCJuZXh0SW5kZXgiLCJleHRlbmQiLCJlbmFibGVkIiwiZGF0YSIsImN1cnJlbnRJZHgiLCJwaGFzZSIsIm9mZiIsImdvTmV4dCIsImluZGV4T2ZTbGlkZSIsImlzUHJldkRpc2FibGVkIiwiaXNOZXh0RGlzYWJsZWQiLCJub1BhdXNlIiwibm9UcmFuc2l0aW9uIiwiJHdhdGNoQ29sbGVjdGlvbiIsImFjdHVhbCIsImNhcm91c2VsQ3RybCIsImFuaW1hdGlvbiIsImNsYXNzTmFtZSIsImNhbGxiYWNrIiwiYmVmb3JlQWRkQ2xhc3MiLCJkb25lIiwiZGlyZWN0aW9uQ2xhc3MiLCJyZW1vdmVDbGFzc0ZuIiwiYmluZCIsImJlZm9yZVJlbW92ZUNsYXNzIiwic2VydmljZSIsIiRsb2ciLCIkbG9jYWxlIiwiZGF0ZUZpbHRlciIsIm9yZGVyQnlGaWx0ZXIiLCJmaWx0ZXJGaWx0ZXIiLCJsb2NhbGVJZCIsImZvcm1hdENvZGVUb1JlZ2V4IiwiU1BFQ0lBTF9DSEFSQUNURVJTX1JFR0VYUCIsImdldEZvcm1hdENvZGVUb1JlZ2V4Iiwia2V5IiwiY29uc3RydWN0TGl0ZXJhbEZvcm1hdHRlciIsImZvcm1hdCIsImxpdGVyYWxJZHgiLCJlbmRJZHgiLCJzdWJzdHIiLCJjb25zdHJ1Y3RGb3JtYXR0ZXJGcm9tSWR4IiwiY3VycmVudFBvc1N0ciIsImoiLCJSZWdFeHAiLCJ0ZXN0IiwicGFyc2VyIiwiZm9ybWF0dGVyIiwiY2hhckF0IiwidG9JbnQiLCJzdHIiLCJ0aW1lem9uZVRvT2Zmc2V0IiwidGltZXpvbmUiLCJmYWxsYmFjayIsInJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0IiwiRGF0ZSIsInBhcnNlIiwiYWRkRGF0ZU1pbnV0ZXMiLCJkYXRlIiwibWludXRlcyIsImdldFRpbWUiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsImNvbnZlcnRUaW1lem9uZVRvTG9jYWwiLCJyZXZlcnNlIiwiZGF0ZVRpbWV6b25lT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJwYXJzZXJzIiwiZm9ybWF0dGVycyIsInJlZ2V4IiwiYXBwbHkiLCJ5ZWFyIiwiX2RhdGUiLCJzZXRGdWxsWWVhciIsImFicyIsImdldEZ1bGxZZWFyIiwibW9udGgiLCJnZXRNb250aCIsIkRBVEVUSU1FX0ZPUk1BVFMiLCJNT05USCIsImpvaW4iLCJTSE9SVE1PTlRIIiwiZ2V0RGF0ZSIsIkRBWSIsIlNIT1JUREFZIiwiaG91cnMiLCJtaWxsaXNlY29uZHMiLCJzZWNvbmRzIiwiQU1QTVMiLCJtYXRjaGVzIiwibWF0Y2giLCJzaWduIiwiRVJBTkFNRVMiLCJFUkFTIiwidmVyc2lvbiIsIm1ham9yIiwibWlub3IiLCJTVEFOREFMT05FTU9OVEgiLCJnZXRQYXJzZXIiLCJmIiwib3ZlcnJpZGVQYXJzZXIiLCJpc0Z1bmN0aW9uIiwiZmlsdGVyIiwiaXNEYXRlIiwiY3JlYXRlRm9ybWF0dGVyIiwicmVkdWNlIiwiaW5wdXQiLCJiYXNlRGF0ZSIsImlzU3RyaW5nIiwibWFwIiwic3BsaXQiLCJxdW90ZUluZGV4IiwiaW5MaXRlcmFsIiwibiIsIm1hdGNoZXIiLCJjcmVhdGVQYXJzZXIiLCJyZXN1bHRzIiwidHpPZmZzZXQiLCJmaWVsZHMiLCJkdCIsImdldEhvdXJzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsIndhcm4iLCJtYXBwZXIiLCJjYWxsIiwiZGF0ZXNldHRlciIsInByb3RvdHlwZSIsInNldFVUQ0Z1bGxZZWFyIiwidGltZXNldHRlciIsInNldFVUQ0hvdXJzIiwic2V0SG91cnMiLCJpc1ZhbGlkIiwidG9UaW1lem9uZSIsImZyb21UaW1lem9uZSIsIk9OX1JFR0VYUCIsIklTX1JFR0VYUCIsImNvbXBpbGUiLCJ0RWxlbWVudCIsInRBdHRycyIsImxpbmtlZFNjb3BlcyIsImluc3RhbmNlcyIsImV4cFRvRGF0YSIsIm9uRXhwTWF0Y2hlcyIsInVpYklzQ2xhc3MiLCJvbkV4cCIsImV4cHMiLCJleHAiLCJrIiwiY2xhenoiLCJjb21wYXJlV2l0aEV4cCIsIndhdGNoRm4iLCJjb21wYXJlV2l0aFZhbCIsIm5ld0FjdGl2YXRlZCIsInNvbWUiLCJpbnN0YW5jZSIsInRoaXNWYWwiLCJsYXN0QWN0aXZhdGVkIiwid2F0Y2hlciIsImFkZEZvckV4cCIsInJlbW92ZVNjb3BlIiwiZSIsInJlbW92ZWRTY29wZSIsInRhcmdldFNjb3BlIiwibmV3V2F0Y2hTY29wZSIsImRhdGVwaWNrZXJNb2RlIiwiZm9ybWF0RGF5IiwiZm9ybWF0TW9udGgiLCJmb3JtYXRZZWFyIiwiZm9ybWF0RGF5SGVhZGVyIiwiZm9ybWF0RGF5VGl0bGUiLCJmb3JtYXRNb250aFRpdGxlIiwibWF4RGF0ZSIsIm1heE1vZGUiLCJtaW5EYXRlIiwibWluTW9kZSIsIm1vbnRoQ29sdW1ucyIsIm5nTW9kZWxPcHRpb25zIiwic2hvcnRjdXRQcm9wYWdhdGlvbiIsInNob3dXZWVrcyIsInllYXJDb2x1bW5zIiwieWVhclJvd3MiLCJkYXRlcGlja2VyQ29uZmlnIiwiJGRhdGVwaWNrZXJMaXRlcmFsV2FybmluZyIsIiRkYXRlcGlja2VyU3VwcHJlc3NFcnJvciIsImRhdGVQYXJzZXIiLCJ3YXRjaExpc3RlbmVycyIsImRhdGVwaWNrZXJPcHRpb25zIiwibW9kZXMiLCJzdGFydGluZ0RheSIsIkZJUlNUREFZT0ZXRUVLIiwiZ2V0T3B0aW9uIiwicmVmcmVzaFZpZXciLCJ1bmlxdWVJZCIsIm5nRGlzYWJsZWQiLCJkYXRlT2JqZWN0IiwiY29tcGFyZSIsImFjdGl2ZURhdGUiLCJhY3RpdmVEYXRlSWQiLCJ1aWQiLCJuZ01vZGVsQ3RybF8iLCIkb3B0aW9ucyIsImNyZWF0ZUNoaWxkIiwiZXh0cmFjdE9wdGlvbnMiLCJpbml0RGF0ZSIsIiRpc0VtcHR5IiwiJGludmFsaWQiLCJyZW5kZXIiLCIkdmlld1ZhbHVlIiwiZXJyb3IiLCJzZWxlY3RlZER0IiwiX3JlZnJlc2hWaWV3IiwiYWN0aXZlRHQiLCIkc2V0VmFsaWRpdHkiLCJjcmVhdGVEYXRlT2JqZWN0IiwibW9kZWwiLCJ0b2RheSIsInRpbWUiLCJsYWJlbCIsInNlbGVjdGVkIiwicGFzdCIsImN1cnJlbnQiLCJmdXR1cmUiLCJjdXN0b21DbGFzcyIsImRhdGVEaXNhYmxlZCIsIm1vZGUiLCJhcnIiLCJzaXplIiwiYXJyYXlzIiwic2V0TW9kZSIsIiRlbWl0IiwiJGJyb2FkY2FzdCIsIm1vdmUiLCJzdGVwIiwieWVhcnMiLCJtb250aHMiLCJ0b2dnbGVNb2RlIiwia2V5cyIsIjEzIiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiZm9jdXMiLCJrZXlkb3duIiwiZXZ0Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImN0cmxLZXkiLCJoYW5kbGVLZXlEb3duIiwic2hpZnQiLCJEQVlTX0lOX01PTlRIIiwiZ2V0RGF5c0luTW9udGgiLCJnZXRJU084NjAxV2Vla051bWJlciIsImNoZWNrRGF0ZSIsInNldERhdGUiLCJnZXREYXkiLCJzZXRNb250aCIsInJvdW5kIiwiY3RybCIsImdldERhdGVzIiwic3RhcnREYXRlIiwiZGF0ZXMiLCJBcnJheSIsImZpcnN0RGF5T2ZNb250aCIsImRpZmZlcmVuY2UiLCJudW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCIsImZpcnN0RGF0ZSIsImRheXMiLCJzZWNvbmRhcnkiLCJsYWJlbHMiLCJhYmJyIiwiZnVsbCIsInRpdGxlIiwicm93cyIsIndlZWtOdW1iZXJzIiwidGh1cnNkYXlJbmRleCIsIm51bVdlZWtzIiwiY3VyV2VlayIsImRhdGUxIiwiZGF0ZTIiLCJfZGF0ZTEiLCJfZGF0ZTIiLCJtaW4iLCJ5ZWFySGVhZGVyQ29sc3BhbiIsImNvbHVtbnMiLCJyYW5nZSIsImdldFN0YXJ0aW5nWWVhciIsInllYXJwaWNrZXJJbml0IiwiZGF0ZXBpY2tlckN0cmwiLCJmYWN0b3J5IiwiJGRvY3VtZW50IiwiJHdpbmRvdyIsIlNDUk9MTEJBUl9XSURUSCIsIkJPRFlfU0NST0xMQkFSX1dJRFRIIiwiT1ZFUkZMT1dfUkVHRVgiLCJub3JtYWwiLCJoaWRkZW4iLCJQTEFDRU1FTlRfUkVHRVgiLCJhdXRvIiwicHJpbWFyeSIsInZlcnRpY2FsIiwiQk9EWV9SRUdFWCIsImdldFJhd05vZGUiLCJub2RlTmFtZSIsInBhcnNlU3R5bGUiLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJvZmZzZXRQYXJlbnQiLCJlbCIsImRvY3VtZW50RWxlbWVudCIsImdldENvbXB1dGVkU3R5bGUiLCJwb3NpdGlvbiIsInNjcm9sbGJhcldpZHRoIiwiaXNCb2R5IiwiaXNVbmRlZmluZWQiLCJib2R5RWxlbSIsImlubmVyV2lkdGgiLCJjbGllbnRXaWR0aCIsInNjcm9sbEVsZW0iLCJvZmZzZXRXaWR0aCIsInJlbW92ZSIsInNjcm9sbGJhclBhZGRpbmciLCJlbGVtU3R5bGUiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwic2Nyb2xsUGFyZW50IiwidGFnTmFtZSIsIndpZHRoT3ZlcmZsb3ciLCJyaWdodCIsIm9yaWdpbmFsUmlnaHQiLCJoZWlnaHRPdmVyZmxvdyIsImNsaWVudEhlaWdodCIsImJvdHRvbSIsIm9yaWdpbmFsQm90dG9tIiwiaXNTY3JvbGxhYmxlIiwiaW5jbHVkZUhpZGRlbiIsIm92ZXJmbG93UmVnZXgiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJpbmNsdWRlU2VsZiIsImRvY3VtZW50RWwiLCJleGNsdWRlU3RhdGljIiwicGFyZW50RWxlbWVudCIsInNwU3R5bGUiLCJpbmNsdWRlTWFnaW5zIiwiZWxlbU9mZnNldCIsIm9mZnNldCIsInRvcCIsIm1hcmdpblRvcCIsImxlZnQiLCJtYXJnaW5MZWZ0IiwicGFyZW50IiwicGFyZW50T2Zmc2V0IiwiY2xpZW50VG9wIiwic2Nyb2xsVG9wIiwiY2xpZW50TGVmdCIsInNjcm9sbExlZnQiLCJvZmZzZXRIZWlnaHQiLCJlbGVtQkNSIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsInZpZXdwb3J0T2Zmc2V0IiwidXNlRG9jdW1lbnQiLCJpbmNsdWRlUGFkZGluZyIsIm9mZnNldEJDUiIsIm9mZnNldFBhcmVudEJDUiIsIm9mZnNldFBhcmVudFN0eWxlIiwicGFkZGluZ1RvcCIsInBhZGRpbmdMZWZ0IiwicGFyc2VQbGFjZW1lbnQiLCJwbGFjZW1lbnQiLCJhdXRvUGxhY2UiLCJwb3NpdGlvbkVsZW1lbnRzIiwiaG9zdEVsZW0iLCJ0YXJnZXRFbGVtIiwiYXBwZW5kVG9Cb2R5IiwidGFyZ2V0V2lkdGgiLCJwcm9wIiwidGFyZ2V0SGVpZ2h0IiwiaG9zdEVsZW1Qb3MiLCJ0YXJnZXRFbGVtUG9zIiwidGFyZ2V0RWxlbVN0eWxlIiwiYWRqdXN0ZWRTaXplIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJ4T3ZlcmZsb3ciLCJ5T3ZlcmZsb3ciLCJhZGp1c3RUb3AiLCJwbGFjZW1lbnRDbGFzc2VzIiwiY29udGFpbmVyUG9zaXRpb24iLCJpbml0aWFsSGVpZ2h0IiwiY3VycmVudEhlaWdodCIsInBvc2l0aW9uQXJyb3ciLCJpbm5lckVsZW0iLCJpc1Rvb2x0aXAiLCJhcnJvd0VsZW0iLCJhcnJvd0NzcyIsImJvcmRlclByb3AiLCJib3JkZXJXaWR0aCIsImJvcmRlclJhZGl1c1Byb3AiLCJib3JkZXJSYWRpdXMiLCJhbHRJbnB1dEZvcm1hdHMiLCJjbGVhclRleHQiLCJjbG9zZU9uRGF0ZVNlbGVjdGlvbiIsImNsb3NlVGV4dCIsImN1cnJlbnRUZXh0IiwiZGF0ZXBpY2tlclBvcHVwIiwiZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmwiLCJkYXRlcGlja2VyVGVtcGxhdGVVcmwiLCJodG1sNVR5cGVzIiwiZGF0ZXRpbWUtbG9jYWwiLCJvbk9wZW5Gb2N1cyIsInNob3dCdXR0b25CYXIiLCIkY29tcGlsZSIsIiRyb290U2NvcGUiLCIkcG9zaXRpb24iLCJkYXRlcGlja2VyUG9wdXBDb25maWciLCIkZGF0ZXBpY2tlclBvcHVwTGl0ZXJhbFdhcm5pbmciLCJkYXRlRm9ybWF0IiwicG9wdXBFbCIsImRhdGVwaWNrZXJFbCIsInNjcm9sbFBhcmVudEVsIiwibmdNb2RlbCIsIiRwb3B1cCIsImlzSHRtbDVEYXRlSW5wdXQiLCJwYXJzZURhdGVTdHJpbmciLCJ2aWV3VmFsdWUiLCJwYXJzZURhdGUiLCJ2YWxpZGF0b3IiLCJtb2RlbFZhbHVlIiwibmdSZXF1aXJlZCIsImRvY3VtZW50Q2xpY2tCaW5kIiwicG9wdXAiLCJkcENvbnRhaW5zVGFyZ2V0IiwiY29udGFpbnMiLCJ0YXJnZXQiLCJwb3B1cENvbnRhaW5zVGFyZ2V0IiwiaW5wdXRLZXlkb3duQmluZCIsInBvc2l0aW9uUG9wdXAiLCJkcEVsZW1lbnQiLCJwb3B1cFBsYWNlbWVudCIsIl9uZ01vZGVsXyIsImlzT2JqZWN0IiwiZGF0ZXBpY2tlckFwcGVuZFRvQm9keSIsInR5cGUiLCJ1aWJEYXRlcGlja2VyUG9wdXAiLCJvbGRWYWx1ZSIsIm5ld0RhdGVGb3JtYXQiLCJFcnJvciIsIm5nLW1vZGVsIiwibmctY2hhbmdlIiwidGVtcGxhdGUtdXJsIiwiY2hpbGRyZW4iLCIkZm9ybWF0dGVycyIsIiQkcGFyc2VyTmFtZSIsIiR2YWxpZGF0b3JzIiwiJHBhcnNlcnMiLCJ1bnNoaWZ0IiwiJHZpZXdDaGFuZ2VMaXN0ZW5lcnMiLCJhZnRlciIsIiQkcGhhc2UiLCJnZXRUZXh0IiwiZGF0ZVNlbGVjdGlvbiIsInZhbCIsImRlYm91bmNlVGltZSIsInRpbWVvdXRQcm9taXNlIiwiYXJncyIsInNsaWNlIiwiYXJndW1lbnRzIiwiY3JlYXRlTmV3IiwiZW50cmllcyIsIk9iamVjdCIsImhhc0tleSIsInB1dCIsInZhbHVlcyIsImlkeCIsImFwcGVuZFRvT3BlbkNsYXNzIiwiJCRtdWx0aU1hcCIsIm9wZW5TY29wZSIsIm9wZW5lZENvbnRhaW5lcnMiLCJpc09ubHlPcGVuIiwiZHJvcGRvd25TY29wZSIsImFwcGVuZFRvIiwib3BlbmVkRHJvcGRvd25zIiwidG9DbG9zZSIsImRyb3Bkb3duIiwib3BlbiIsImNsb3NlRHJvcGRvd24iLCJrZXliaW5kRmlsdGVyIiwiZHJvcGRvd25Ub0Nsb3NlIiwiZ2V0QXV0b0Nsb3NlIiwidG9nZ2xlRWxlbWVudCIsImdldFRvZ2dsZUVsZW1lbnQiLCJkcm9wZG93bkVsZW1lbnQiLCJnZXREcm9wZG93bkVsZW1lbnQiLCJmb2N1c1RvZ2dsZUVsZW1lbnQiLCJkcm9wZG93bkVsZW1lbnRUYXJnZXRlZCIsInRvZ2dsZUVsZW1lbnRUYXJnZXRlZCIsImlzS2V5bmF2RW5hYmxlZCIsImZvY3VzRHJvcGRvd25FbnRyeSIsImRyb3Bkb3duQ29uZmlnIiwidWliRHJvcGRvd25TZXJ2aWNlIiwiJHRlbXBsYXRlUmVxdWVzdCIsInRlbXBsYXRlU2NvcGUiLCJnZXRJc09wZW4iLCIkbmV3Iiwic2V0SXNPcGVuIiwidG9nZ2xlSW52b2tlciIsIm9uVG9nZ2xlIiwia2V5bmF2RW5hYmxlZCIsImJvZHkiLCJyZW1vdmVEcm9wZG93bk1lbnUiLCJkcm9wZG93bk1lbnUiLCJhc3NpZ24iLCJrZXlib2FyZE5hdiIsInRvZ2dsZSIsImF1dG9DbG9zZSIsImdldEVsZW1lbnQiLCJrZXlDb2RlIiwiZWxlbXMiLCJlcSIsInNlbGVjdGVkT3B0aW9uIiwid2FzT3BlbiIsImRyb3Bkb3duQXBwZW5kVG8iLCJhcHBlbmRUb0VsIiwiZHJvcGRvd25BcHBlbmRUb0JvZHkiLCJyaWdodGFsaWduIiwicG9zIiwid2luZG93IiwiYXBwZW5kT2Zmc2V0Iiwib3BlbkNvbnRhaW5lciIsImRyb3Bkb3duT3BlbkNsYXNzIiwiaGFzT3BlbkNsYXNzIiwiZHJvcGRvd25NZW51VGVtcGxhdGVVcmwiLCJ0cGxDb250ZW50IiwidHJpbSIsIm5ld0VsIiwicmVwbGFjZVdpdGgiLCIkZGVzdHJveSIsImRyb3Bkb3duQ3RybCIsImRyb3Bkb3duTmVzdGVkIiwidHBsVXJsIiwidG9nZ2xlRHJvcGRvd24iLCJhcmlhLWhhc3BvcHVwIiwiYXJpYS1leHBhbmRlZCIsInN0YWNrIiwiYWRkIiwicmVtb3ZlVG9wIiwicG9wIiwicHJvdmlkZXIiLCJyZXNvbHZlciIsInNldFJlc29sdmVyIiwiJGdldCIsImludm9jYWJsZXMiLCJsb2NhbHMiLCJwcm9taXNlcyIsImlzQXJyYXkiLCJpbnZva2UiLCJhbGwiLCJyZXNvbHZlcyIsInJlc29sdmVPYmoiLCJyZXNvbHZlSXRlciIsIiRtb2RhbFN0YWNrIiwiYmFja2Ryb3BDbGFzcyIsImxpbmtGbiIsIm1vZGFsSW5DbGFzcyIsIk5PV19DTE9TSU5HX0VWRU5UIiwic2V0SXNBc3luYyIsIm1vZGFsT3B0aW9ucyIsIndpbmRvd1RvcENsYXNzIiwibW9kYWwiLCJnZXRUb3AiLCJiYWNrZHJvcCIsImN1cnJlbnRUYXJnZXQiLCJkaXNtaXNzIiwiJGlzUmVuZGVyZWQiLCJtb2RhbFJlbmRlckRlZmVyT2JqIiwiZGVmZXIiLCIkJHBvc3REaWdlc3QiLCJwcm9taXNlIiwiYW5pbWF0aW9uUHJvbWlzZSIsIndoZW4iLCJtb2RhbFJlbmRlcmVkIiwiYWN0aXZlRWxlbWVudCIsImlucHV0V2l0aEF1dG9mb2N1cyIsIm1vZGFsQW5pbWF0aW9uIiwidWliTW9kYWxBbmltYXRpb25DbGFzcyIsImNsb25lIiwiZW1wdHkiLCJlbnRlciIsIiQkc3RhY2tlZE1hcCIsIiR1aWJQb3NpdGlvbiIsImJhY2tkcm9wRG9tRWwiLCJiYWNrZHJvcFNjb3BlIiwiT1BFTkVEX01PREFMX0NMQVNTIiwib3BlbmVkV2luZG93cyIsIm9wZW5lZENsYXNzZXMiLCJ0b3BNb2RhbEluZGV4IiwicHJldmlvdXNUb3BPcGVuZWRNb2RhbCIsIkFSSUFfSElEREVOX0FUVFJJQlVURV9OQU1FIiwiU05BS0VfQ0FTRV9SRUdFWFAiLCJiYWNrZHJvcEluZGV4IiwidG9wQmFja2Ryb3BJbmRleCIsIm9wZW5lZCIsInJlbW92ZU1vZGFsV2luZG93IiwibW9kYWxJbnN0YW5jZSIsImVsZW1lbnRUb1JlY2VpdmVGb2N1cyIsIm1vZGFsV2luZG93IiwiYXBwZW5kVG9FbGVtZW50IiwibW9kYWxEb21FbCIsInJlbW92ZUFmdGVyQW5pbWF0ZSIsIm1vZGFsU2NvcGUiLCJtb2RhbEJvZHlDbGFzcyIsIm9wZW5lZENsYXNzIiwiYXJlQW55T3BlbiIsInRvZ2dsZVRvcFdpbmRvd0NsYXNzIiwiY2xvc2VkRGVmZXJyZWQiLCJjaGVja1JlbW92ZUJhY2tkcm9wIiwidG9nZ2xlU3dpdGNoIiwiZG9tRWwiLCJhc3luY0RlZmVycmVkIiwiYXN5bmNQcm9taXNlIiwiYWZ0ZXJBbmltYXRpbmciLCJsZWF2ZSIsImtleWRvd25MaXN0ZW5lciIsImlzRGVmYXVsdFByZXZlbnRlZCIsImtleWJvYXJkIiwibGlzdCIsImxvYWRGb2N1c0VsZW1lbnRMaXN0IiwiZm9jdXNDaGFuZ2VkIiwiaXNGb2N1c0luRmlyc3RJdGVtIiwiaXNNb2RhbEZvY3VzZWQiLCJmb2N1c0xhc3RGb2N1c2FibGVFbGVtZW50IiwiaXNGb2N1c0luTGFzdEl0ZW0iLCJmb2N1c0ZpcnN0Rm9jdXNhYmxlRWxlbWVudCIsImJyb2FkY2FzdENsb3NpbmciLCJyZXN1bHRPclJlYXNvbiIsImNsb3NpbmciLCJkZWZhdWx0UHJldmVudGVkIiwidW5oaWRlQmFja2dyb3VuZEVsZW1lbnRzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaGlkZGVuRWwiLCJuZXdIaWRkZW5Db3VudCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm5ld0JhY2tkcm9wSW5kZXgiLCJtb2RhbE9wZW5lciIsImRlZmVycmVkIiwicmVuZGVyRGVmZXJyZWQiLCJjb250ZW50IiwiY3VyckJhY2tkcm9wSW5kZXgiLCJjbGFzcyIsIm5nLXN0eWxlIiwidWliLW1vZGFsLWFuaW1hdGlvbi1jbGFzcyIsIm1vZGFsLWluLWNsYXNzIiwiY29tcG9uZW50IiwiY3JlYXRlRWxlbWVudCIsIm5hbWUiLCJsZXR0ZXIiLCJ0b0xvd2VyQ2FzZSIsIm1vZGFsLWluc3RhbmNlIiwiYW5ndWxhckRvbUVsIiwid2luZG93VGVtcGxhdGVVcmwiLCJ3aW5kb3ctdG9wLWNsYXNzIiwicm9sZSIsImFyaWEtbGFiZWxsZWRieSIsImFyaWFMYWJlbGxlZEJ5IiwiYXJpYS1kZXNjcmliZWRieSIsImFyaWFEZXNjcmliZWRCeSIsImFuaW1hdGUiLCJ0YWJpbmRleCIsIndpbmRvd0NsYXNzIiwiJCR0b3BNb2RhbEluZGV4IiwiYXBwbHlBcmlhSGlkZGVuIiwiY2hpbGQiLCJzaWJsaW5nIiwiZWxlbUlzQWxyZWFkeUhpZGRlbiIsImFyaWFIaWRkZW5Db3VudCIsInJlc3VsdCIsIiQkdWliRGVzdHJ1Y3Rpb25TY2hlZHVsZWQiLCJyZWFzb24iLCJyZWplY3QiLCJkaXNtaXNzQWxsIiwidG9wTW9kYWwiLCJzcmNFbGVtZW50IiwibW9kYWxEb21FMSIsImVsZW1lbnRzIiwiZ2V0Q2xpZW50UmVjdHMiLCIkbW9kYWxQcm92aWRlciIsIm9wdGlvbnMiLCIkY29udHJvbGxlciIsIiR1aWJSZXNvbHZlIiwiJG1vZGFsIiwicHJvbWlzZUNoYWluIiwiZ2V0UHJvbWlzZUNoYWluIiwidGVtcGxhdGVBbmRSZXNvbHZlUHJvbWlzZSIsInNhbWVQcm9taXNlIiwibW9kYWxSZXN1bHREZWZlcnJlZCIsIm1vZGFsT3BlbmVkRGVmZXJyZWQiLCJtb2RhbENsb3NlZERlZmVycmVkIiwibW9kYWxSZW5kZXJEZWZlcnJlZCIsImNsb3NlZCIsInJlbmRlcmVkIiwicmVzb2x2ZVdpdGhUZW1wbGF0ZSIsInRwbEFuZFZhcnMiLCJwcm92aWRlZFNjb3BlIiwiJGNsb3NlIiwiJGRpc21pc3MiLCJjdHJsSW5zdGFuY2UiLCJjdHJsSW5zdGFudGlhdGUiLCJjdHJsTG9jYWxzIiwiY29uc3RydWN0TG9jYWxzIiwib2JqIiwiaW5zdGFuY2VPblNjb3BlIiwiaW5qZWN0YWJsZSIsIiRyZXNvbHZlIiwiJHVpYk1vZGFsSW5zdGFuY2UiLCJiaW5kVG9Db250cm9sbGVyIiwiJG9uSW5pdCIsImNyZWF0ZSIsInNldE51bVBhZ2VzIiwibnVtUGFnZXMiLCJfd2F0Y2hlcnMiLCJjb25maWciLCJpdGVtc1BlclBhZ2UiLCJ0b3RhbFBhZ2VzIiwiY2FsY3VsYXRlVG90YWxQYWdlcyIsInVwZGF0ZVBhZ2UiLCJuZXdUb3RhbCIsIm9sZFRvdGFsIiwiY2VpbCIsInRvdGFsSXRlbXMiLCJtYXgiLCJwYWdlIiwic2VsZWN0UGFnZSIsImJsdXIiLCJub1ByZXZpb3VzIiwibm9OZXh0IiwidWliUGFnaW5nIiwidWliUGFnZXJDb25maWciLCJhbGlnbiIsInByZXZpb3VzVGV4dCIsIm5leHRUZXh0IiwicGFnaW5hdGlvbkN0cmwiLCJ1aWJQYWdpbmF0aW9uQ29uZmlnIiwibWF4U2l6ZSIsInJvdGF0ZSIsImZvcmNlRWxsaXBzZXMiLCJib3VuZGFyeUxpbmtOdW1iZXJzIiwicGFnZUxhYmVsIiwiJHBhZ2UiLCJpZGVudGl0eSIsIm1ha2VQYWdlIiwibnVtYmVyIiwidGV4dCIsImJvdW5kYXJ5TGlua3MiLCJkaXJlY3Rpb25MaW5rcyIsIm9yaWdpbmFsUmVuZGVyIiwicGFnZXMiLCJjdXJyZW50UGFnZSIsInN0YXJ0UGFnZSIsImVuZFBhZ2UiLCJpc01heFNpemVkIiwicHJldmlvdXNQYWdlU2V0Iiwic2Vjb25kUGFnZUxpbmsiLCJmaXJzdFBhZ2VMaW5rIiwibmV4dFBhZ2VTZXQiLCJzZWNvbmRUb0xhc3RQYWdlTGluayIsImxhc3RQYWdlTGluayIsImdldFBhZ2VzIiwiZmlyc3RUZXh0IiwibGFzdFRleHQiLCJkZWZhdWx0T3B0aW9ucyIsInBsYWNlbWVudENsYXNzUHJlZml4IiwicG9wdXBEZWxheSIsInBvcHVwQ2xvc2VEZWxheSIsInVzZUNvbnRlbnRFeHAiLCJ0cmlnZ2VyTWFwIiwibW91c2VlbnRlciIsImNsaWNrIiwib3V0c2lkZUNsaWNrIiwibm9uZSIsImdsb2JhbE9wdGlvbnMiLCJzZXRUcmlnZ2VycyIsInRyaWdnZXJzIiwib3BlbmVkVG9vbHRpcHMiLCJrZXlwcmVzc0xpc3RlbmVyIiwibGFzdCIsInR0VHlwZSIsInByZWZpeCIsImRlZmF1bHRUcmlnZ2VyU2hvdyIsImdldFRyaWdnZXJzIiwidHJpZ2dlciIsInNob3ciLCJoaWRlIiwiZGlyZWN0aXZlTmFtZSIsInN0YXJ0U3ltIiwic3RhcnRTeW1ib2wiLCJlbmRTeW0iLCJlbmRTeW1ib2wiLCJ0RWxlbSIsInRvb2x0aXBMaW5rZXIiLCJ0b29sdGlwQ3RybCIsInRvb2x0aXAiLCJ0b29sdGlwTGlua2VkU2NvcGUiLCJ0cmFuc2l0aW9uVGltZW91dCIsInNob3dUaW1lb3V0IiwiaGlkZVRpbWVvdXQiLCJwb3NpdGlvblRpbWVvdXQiLCJhZGp1c3RtZW50VGltZW91dCIsImxhc3RQbGFjZW1lbnQiLCJoYXNFbmFibGVFeHAiLCJ0dFNjb3BlIiwicmVwb3NpdGlvblNjaGVkdWxlZCIsImlzT3BlblBhcnNlIiwiY29udGVudFBhcnNlIiwib2JzZXJ2ZXJzIiwicG9zaXRpb25Ub29sdGlwIiwidHRQb3NpdGlvbiIsImVsZW1lbnRQb3MiLCJhZGp1c3RtZW50IiwidG9nZ2xlVG9vbHRpcEJpbmQiLCJoaWRlVG9vbHRpcEJpbmQiLCJzaG93VG9vbHRpcEJpbmQiLCJjYW5jZWxIaWRlIiwicG9wdXBDbGFzcyIsImRlbGF5IiwiY2xvc2VEZWxheSIsInByZXBhcmVUb29sdGlwIiwiY2FuY2VsU2hvdyIsInByZXBPYnNlcnZlcnMiLCJjcmVhdGVUb29sdGlwIiwiJGV2YWxBc3luYyIsImFzc2lnbklzT3BlbiIsInJlbW92ZVRvb2x0aXAiLCJvYnNlcnZlciIsImJvZHlIaWRlVG9vbHRpcEJpbmQiLCJoaWRlT25Fc2NhcGVLZXkiLCJvcmlnU2NvcGUiLCJjb250ZW50RXhwIiwic2hvd1RyaWdnZXJzIiwiaGlkZVRyaWdnZXJzIiwidW5yZWdpc3RlclRyaWdnZXJzIiwiYXBwZW5kVG9Cb2R5VmFsIiwiYXBwZW5kS2V5IiwiJHNjZSIsImN1cnJlbnRTY29wZSIsInByZXZpb3VzRWxlbWVudCIsImN1cnJlbnRFbGVtZW50IiwidG9vbHRpcFRlbXBsYXRlVHJhbnNjbHVkZVNjb3BlIiwiY2hhbmdlQ291bnRlciIsImNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQiLCJwYXJzZUFzUmVzb3VyY2VVcmwiLCJ1aWJUb29sdGlwVGVtcGxhdGVUcmFuc2NsdWRlIiwic3JjIiwidGhpc0NoYW5nZUlkIiwicmVzcG9uc2UiLCJuZXdTY29wZSIsInRvb2x0aXBBbmltYXRpb25DbGFzcyIsIiR1aWJUb29sdGlwIiwib3JpZ2luU2NvcGUiLCJ1aWJUaXRsZSIsInByb2dyZXNzQ29uZmlnIiwiZ2V0TWF4T3JEZWZhdWx0IiwibWF4UGFyYW0iLCJiYXJzIiwiYWRkQmFyIiwiYmFyIiwidHJhbnNpdGlvbiIsInJlY2FsY3VsYXRlUGVyY2VudGFnZSIsInRvdGFsUGVyY2VudGFnZSIsInRvdGFsIiwicGVyY2VudCIsInRvRml4ZWQiLCJyZW1vdmVCYXIiLCJwcm9ncmVzc0N0cmwiLCJzdGF0ZU9uIiwic3RhdGVPZmYiLCJlbmFibGVSZXNldCIsInRpdGxlcyIsInJhdGluZ0NvbmZpZyIsInRtcFRpdGxlcyIsInJhdGluZ1N0YXRlcyIsImJ1aWxkVGVtcGxhdGVPYmplY3RzIiwic3RhdGVzIiwiZ2V0VGl0bGUiLCJyYXRlIiwicmVhZG9ubHkiLCJuZXdWaWV3VmFsdWUiLCJvbkhvdmVyIiwicmVzZXQiLCJvbkxlYXZlIiwib25LZXlkb3duIiwicmF0aW5nQ3RybCIsIm9sZEluZGV4IiwiZmluZFRhYkluZGV4IiwidGFicyIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1NlbGVjdGVkIiwidGFiIiwib25EZXNlbGVjdCIsIiRzZWxlY3RlZEluZGV4Iiwib25TZWxlY3QiLCJhZGRUYWIiLCJ0MSIsInQyIiwibmV3QWN0aXZlSW5kZXgiLCJyZW1vdmVUYWIiLCJuZXdBY3RpdmVUYWJJbmRleCIsImp1c3RpZmllZCIsImNsYXNzZXMiLCJlbG0iLCJ0YWJzZXRDdHJsIiwiZGlzYWJsZSIsInQiLCIkdHJhbnNjbHVkZUZuIiwidWliVGFiQ29udGVudFRyYW5zY2x1ZGUiLCJjb250ZW50cyIsIm5vZGUiLCJoYXNBdHRyaWJ1dGUiLCJoZWFkaW5nRWxlbWVudCIsImhvdXJTdGVwIiwibWludXRlU3RlcCIsInNlY29uZFN0ZXAiLCJzaG93TWVyaWRpYW4iLCJzaG93U2Vjb25kcyIsIm1lcmlkaWFucyIsInJlYWRvbmx5SW5wdXQiLCJtb3VzZXdoZWVsIiwiYXJyb3drZXlzIiwic2hvd1NwaW5uZXJzIiwidGltZXBpY2tlckNvbmZpZyIsImhvdXJzTW9kZWxDdHJsIiwibWludXRlc01vZGVsQ3RybCIsInNlY29uZHNNb2RlbEN0cmwiLCJ3YXRjaGVycyIsInBhZEhvdXJzIiwicmVtb3ZlQXR0ciIsImlucHV0cyIsImhvdXJzSW5wdXRFbCIsIm1pbnV0ZXNJbnB1dEVsIiwic2Vjb25kc0lucHV0RWwiLCJzZXR1cE1vdXNld2hlZWxFdmVudHMiLCJzZXR1cEFycm93a2V5RXZlbnRzIiwic2V0dXBJbnB1dEV2ZW50cyIsIm5vSW5jcmVtZW50SG91cnMiLCJpbmNyZW1lbnRlZFNlbGVjdGVkIiwiYWRkTWludXRlcyIsIm5vRGVjcmVtZW50SG91cnMiLCJkZWNyZW1lbnRlZFNlbGVjdGVkIiwibm9JbmNyZW1lbnRNaW51dGVzIiwibm9EZWNyZW1lbnRNaW51dGVzIiwibm9JbmNyZW1lbnRTZWNvbmRzIiwiYWRkU2Vjb25kcyIsIm5vRGVjcmVtZW50U2Vjb25kcyIsIm5vVG9nZ2xlTWVyaWRpYW4iLCJnZXRIb3Vyc0Zyb21UZW1wbGF0ZSIsIm1lcmlkaWFuIiwiZ2V0TWludXRlc0Zyb21UZW1wbGF0ZSIsInBhZCIsIm5vUGFkIiwidG9TdHJpbmciLCJyZWZyZXNoIiwia2V5Ym9hcmRDaGFuZ2UiLCJtYWtlVmFsaWQiLCJ1cGRhdGVUZW1wbGF0ZSIsImludmFsaWRIb3VycyIsImludmFsaWRNaW51dGVzIiwiaW52YWxpZFNlY29uZHMiLCJhZGRTZWNvbmRzVG9TZWxlY3RlZCIsIm5ld0RhdGUiLCJtb2RlbElzRW1wdHkiLCIkZXJyb3IiLCJpc1Njcm9sbGluZ1VwIiwib3JpZ2luYWxFdmVudCIsImRlbHRhIiwid2hlZWxEZWx0YSIsImRlbHRhWSIsImRldGFpbCIsImluY3JlbWVudEhvdXJzIiwiZGVjcmVtZW50SG91cnMiLCJpbmNyZW1lbnRNaW51dGVzIiwiZGVjcmVtZW50TWludXRlcyIsImluY3JlbWVudFNlY29uZHMiLCJkZWNyZW1lbnRTZWNvbmRzIiwidXBkYXRlSG91cnMiLCJ1cGRhdGVNaW51dGVzIiwidXBkYXRlU2Vjb25kcyIsImludmFsaWRhdGUiLCIkc2V0RGlydHkiLCIkc2V0VG91Y2hlZCIsInNldFNlY29uZHMiLCJ0b2dnbGVNZXJpZGlhbiIsInVpYlRpbWVwaWNrZXJDb25maWciLCJ0aW1lcGlja2VyQ3RybCIsIlRZUEVBSEVBRF9SRUdFWFAiLCJpdGVtTmFtZSIsInNvdXJjZSIsInZpZXdNYXBwZXIiLCJtb2RlbE1hcHBlciIsIm9yaWdpbmFsU2NvcGUiLCIkJGRlYm91bmNlIiwidHlwZWFoZWFkUGFyc2VyIiwibW9kZWxDdHJsIiwiSE9UX0tFWVMiLCJtaW5MZW5ndGgiLCJ0eXBlYWhlYWRNaW5MZW5ndGgiLCJuZXdWYWwiLCJ3YWl0VGltZSIsInR5cGVhaGVhZFdhaXRNcyIsImlzRWRpdGFibGUiLCJ0eXBlYWhlYWRFZGl0YWJsZSIsImhhc0ZvY3VzIiwiaXNMb2FkaW5nU2V0dGVyIiwidHlwZWFoZWFkTG9hZGluZyIsImlzU2VsZWN0RXZlbnQiLCJ0eXBlYWhlYWRTaG91bGRTZWxlY3QiLCJ2YWxzIiwib25TZWxlY3RDYWxsYmFjayIsInR5cGVhaGVhZE9uU2VsZWN0IiwiaXNTZWxlY3RPbkJsdXIiLCJ0eXBlYWhlYWRTZWxlY3RPbkJsdXIiLCJpc05vUmVzdWx0c1NldHRlciIsInR5cGVhaGVhZE5vUmVzdWx0cyIsImlucHV0Rm9ybWF0dGVyIiwidHlwZWFoZWFkSW5wdXRGb3JtYXR0ZXIiLCJ0eXBlYWhlYWRBcHBlbmRUb0JvZHkiLCJ0eXBlYWhlYWRBcHBlbmRUbyIsImZvY3VzRmlyc3QiLCJ0eXBlYWhlYWRGb2N1c0ZpcnN0Iiwic2VsZWN0T25FeGFjdCIsInR5cGVhaGVhZFNlbGVjdE9uRXhhY3QiLCJpc09wZW5TZXR0ZXIiLCJ0eXBlYWhlYWRJc09wZW4iLCJzaG93SGludCIsInR5cGVhaGVhZFNob3dIaW50IiwicGFyc2VkTW9kZWwiLCJpbnZva2VNb2RlbFNldHRlciIsInBhcnNlclJlc3VsdCIsInVpYlR5cGVhaGVhZCIsIm9mZkRlc3Ryb3kiLCJpbnB1dHNDb250YWluZXIiLCJoaW50SW5wdXRFbGVtIiwicG9wdXBJZCIsImFyaWEtYXV0b2NvbXBsZXRlIiwiYXJpYS1vd25zIiwiYm9yZGVyLWNvbG9yIiwiYm94LXNoYWRvdyIsIm9wYWNpdHkiLCJiYWNrZ3JvdW5kIiwiY29sb3IiLCJ2ZXJ0aWNhbC1hbGlnbiIsImJhY2tncm91bmQtY29sb3IiLCJwb3BVcEVsIiwibW92ZS1pbi1wcm9ncmVzcyIsInF1ZXJ5IiwiYXNzaWduLWlzLW9wZW4iLCJkZWJvdW5jZSIsInR5cGVhaGVhZFRlbXBsYXRlVXJsIiwidHlwZWFoZWFkUG9wdXBUZW1wbGF0ZVVybCIsInJlc2V0TWF0Y2hlcyIsImFjdGl2ZUlkeCIsImdldE1hdGNoSWQiLCJnZXRNYXRjaGVzQXN5bmMiLCJpbnB1dFZhbHVlIiwib25DdXJyZW50UmVxdWVzdCIsInJlY2FsY3VsYXRlUG9zaXRpb24iLCJ0b1VwcGVyQ2FzZSIsImRlYm91bmNlVXBkYXRlIiwiZmlyc3RMYWJlbCIsImZpcmVSZWNhbGN1bGF0aW5nIiwiZGVib3VuY2VkUmVjYWxjdWxhdGUiLCJtb3ZlSW5Qcm9ncmVzcyIsIiRkaWdlc3QiLCJjYW5jZWxQcmV2aW91c1RpbWVvdXQiLCJpdGVtIiwibmV3VmFsdWUiLCIkJCRwIiwiJGl0ZW0iLCIkbW9kZWwiLCIkbGFiZWwiLCJ0eXBlYWhlYWRGb2N1c09uU2VsZWN0Iiwic2hvdWxkU2VsZWN0IiwicGFyZW50Tm9kZSIsIm9mZnNldFRvcCIsImVkaXRhYmxlIiwiZGlzbWlzc0NsaWNrSGFuZGxlciIsIl9tb2RlbEN0cmwiLCJjYW5kaWRhdGVWaWV3VmFsdWUiLCJwb3B1cFRlbXBsYXRlVXJsIiwiaXNEcm9wZG93bk9wZW4iLCJtYXRjaElkeCIsInNlbGVjdEFjdGl2ZSIsInNlbGVjdE1hdGNoIiwidHBsRWwiLCJpc1Nhbml0aXplUHJlc2VudCIsIm1hdGNoSXRlbSIsInRydXN0QXNIdG1sIiwicnVuIiwiJHRlbXBsYXRlQ2FjaGUiLCIkJGNzcCIsIm5vSW5saW5lU3R5bGUiLCIkJHVpYkNhcm91c2VsQ3NzIiwicHJlcGVuZCIsIiQkdWliRGF0ZXBpY2tlckNzcyIsIiQkdWliUG9zaXRpb25Dc3MiLCIkJHVpYkRhdGVwaWNrZXJwb3B1cENzcyIsIiQkdWliVG9vbHRpcENzcyIsIiQkdWliVGltZXBpY2tlckNzcyIsIiQkdWliVHlwZWFoZWFkQ3NzIl0sIm1hcHBpbmdzIjoiQUFNQUEsUUFBQUMsT0FBQSxlQUFBLENBQUEsb0JBQUEsd0JBQUEsd0JBQUEseUJBQUEscUJBQUEsdUJBQUEsd0JBQUEsMEJBQUEsdUJBQUEsMEJBQUEsd0JBQUEsK0JBQUEsd0JBQUEsd0JBQUEsd0JBQUEsMEJBQUEscUJBQUEsc0JBQUEscUJBQUEsMEJBQUEsdUJBQUEsdUJBQUEsMkJBQUEsc0JBQUEsb0JBQUEsMEJBQUEsMkJBQ0FELFFBQUFDLE9BQUEsb0JBQUEsQ0FBQSw4Q0FBQSx3Q0FBQSxnQ0FBQSxzQ0FBQSxtQ0FBQSwwQ0FBQSxtQ0FBQSxxQ0FBQSxvQ0FBQSwwQ0FBQSxpQ0FBQSxnQ0FBQSwwQ0FBQSwrQ0FBQSwwQ0FBQSxtREFBQSx5Q0FBQSw2Q0FBQSxvQ0FBQSxvQ0FBQSx5Q0FBQSw0Q0FBQSxrQ0FBQSw2QkFBQSxnQ0FBQSwwQ0FBQSw4Q0FBQSxnREFDQUQsUUFBQUMsT0FBQSx3QkFBQSxJQUVBQyxVQUFBLGNBQUEsQ0FBQSxXQUFBLEtBQUEsU0FBQSxZQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUQsRUFBQUUsSUFBQSxlQUFBRixFQUFBRyxJQUFBLGVB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QUF0d0MsUUFBQXd3QyxRQUFBQyxnQkFBQXp3QyxRQUFBNHdDLG9CQUFBNXdDLFFBQUFZLFFBQUE4eUIsVUFBQWhzQixLQUFBLFFBQUFpcEMsUUFBQSw2S0FBQTN3QyxRQUFBNHdDLG9CQUFBLElBQ0E1d0MsUUFBQUMsT0FBQSx5QkFBQXF3QyxJQUFBLFlBQUF0d0MsUUFBQXd3QyxRQUFBQyxnQkFBQXp3QyxRQUFBNndDLGtCQUFBN3dDLFFBQUFZLFFBQUE4eUIsVUFBQWhzQixLQUFBLFFBQUFpcEMsUUFBQSwwWkFBQTN3QyxRQUFBNndDLGtCQUFBLElBQ0E3d0MsUUFBQUMsT0FBQSxnQ0FBQXF3QyxJQUFBLFlBQUF0d0MsUUFBQXd3QyxRQUFBQyxnQkFBQXp3QyxRQUFBOHdDLHlCQUFBOXdDLFFBQUFZLFFBQUE4eUIsVUFBQWhzQixLQUFBLFFBQUFpcEMsUUFBQSxnSkFBQTN3QyxRQUFBOHdDLHlCQUFBLElBQ0E5d0MsUUFBQUMsT0FBQSx3QkFBQXF3QyxJQUFBLFlBQUF0d0MsUUFBQXd3QyxRQUFBQyxnQkFBQXp3QyxRQUFBK3dDLGlCQUFBL3dDLFFBQUFZLFFBQUE4eUIsVUFBQWhzQixLQUFBLFFBQUFpcEMsUUFBQSxtM0ZBQUEzd0MsUUFBQSt3QyxpQkFBQSxJQUNBL3dDLFFBQUFDLE9BQUEsMkJBQUFxd0MsSUFBQSxZQUFBdHdDLFFBQUF3d0MsUUFBQUMsZ0JBQUF6d0MsUUFBQWd4QyxvQkFBQWh4QyxRQUFBWSxRQUFBOHlCLFVBQUFoc0IsS0FBQSxRQUFBaXBDLFFBQUEsK0RBQUEzd0MsUUFBQWd4QyxvQkFBQSxJQUNBaHhDLFFBQUFDLE9BQUEsMEJBQUFxd0MsSUFBQSxZQUFBdHdDLFFBQUF3d0MsUUFBQUMsZ0JBQUF6d0MsUUFBQWl4QyxtQkFBQWp4QyxRQUFBWSxRQUFBOHlCLFVBQUFoc0IsS0FBQSxRQUFBaXBDLFFBQUEsc0ZBQUEzd0MsUUFBQWl4QyxtQkFBQSIsImZpbGUiOiJ1aS1ib290c3RyYXAtdHBscy0yLjUuMC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogYW5ndWxhci11aS1ib290c3RyYXBcbiAqIGh0dHA6Ly9hbmd1bGFyLXVpLmdpdGh1Yi5pby9ib290c3RyYXAvXG5cbiAqIFZlcnNpb246IDIuNS4wIC0gMjAxNy0wMS0yOFxuICogTGljZW5zZTogTUlUXG4gKi9hbmd1bGFyLm1vZHVsZShcInVpLmJvb3RzdHJhcFwiLCBbXCJ1aS5ib290c3RyYXAudHBsc1wiLCBcInVpLmJvb3RzdHJhcC5jb2xsYXBzZVwiLFwidWkuYm9vdHN0cmFwLnRhYmluZGV4XCIsXCJ1aS5ib290c3RyYXAuYWNjb3JkaW9uXCIsXCJ1aS5ib290c3RyYXAuYWxlcnRcIixcInVpLmJvb3RzdHJhcC5idXR0b25zXCIsXCJ1aS5ib290c3RyYXAuY2Fyb3VzZWxcIixcInVpLmJvb3RzdHJhcC5kYXRlcGFyc2VyXCIsXCJ1aS5ib290c3RyYXAuaXNDbGFzc1wiLFwidWkuYm9vdHN0cmFwLmRhdGVwaWNrZXJcIixcInVpLmJvb3RzdHJhcC5wb3NpdGlvblwiLFwidWkuYm9vdHN0cmFwLmRhdGVwaWNrZXJQb3B1cFwiLFwidWkuYm9vdHN0cmFwLmRlYm91bmNlXCIsXCJ1aS5ib290c3RyYXAubXVsdGlNYXBcIixcInVpLmJvb3RzdHJhcC5kcm9wZG93blwiLFwidWkuYm9vdHN0cmFwLnN0YWNrZWRNYXBcIixcInVpLmJvb3RzdHJhcC5tb2RhbFwiLFwidWkuYm9vdHN0cmFwLnBhZ2luZ1wiLFwidWkuYm9vdHN0cmFwLnBhZ2VyXCIsXCJ1aS5ib290c3RyYXAucGFnaW5hdGlvblwiLFwidWkuYm9vdHN0cmFwLnRvb2x0aXBcIixcInVpLmJvb3RzdHJhcC5wb3BvdmVyXCIsXCJ1aS5ib290c3RyYXAucHJvZ3Jlc3NiYXJcIixcInVpLmJvb3RzdHJhcC5yYXRpbmdcIixcInVpLmJvb3RzdHJhcC50YWJzXCIsXCJ1aS5ib290c3RyYXAudGltZXBpY2tlclwiLFwidWkuYm9vdHN0cmFwLnR5cGVhaGVhZFwiXSk7XG5hbmd1bGFyLm1vZHVsZShcInVpLmJvb3RzdHJhcC50cGxzXCIsIFtcInVpYi90ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLWdyb3VwLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9hbGVydC9hbGVydC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbFwiLFwidWliL3RlbXBsYXRlL2Nhcm91c2VsL3NsaWRlLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbFwiLFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF5Lmh0bWxcIixcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL21vbnRoLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL3llYXIuaHRtbFwiLFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXJQb3B1cC9wb3B1cC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvbW9kYWwvd2luZG93Lmh0bWxcIixcInVpYi90ZW1wbGF0ZS9wYWdlci9wYWdlci5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWxcIixcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtaHRtbC1wb3B1cC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXBvcHVwLmh0bWxcIixcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtdGVtcGxhdGUtcG9wdXAuaHRtbFwiLFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci1odG1sLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItdGVtcGxhdGUuaHRtbFwiLFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvYmFyLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzcy5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXIuaHRtbFwiLFwidWliL3RlbXBsYXRlL3JhdGluZy9yYXRpbmcuaHRtbFwiLFwidWliL3RlbXBsYXRlL3RhYnMvdGFiLmh0bWxcIixcInVpYi90ZW1wbGF0ZS90YWJzL3RhYnNldC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvdGltZXBpY2tlci90aW1lcGlja2VyLmh0bWxcIixcInVpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLW1hdGNoLmh0bWxcIixcInVpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLXBvcHVwLmh0bWxcIl0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5jb2xsYXBzZScsIFtdKVxuXG4gIC5kaXJlY3RpdmUoJ3VpYkNvbGxhcHNlJywgWyckYW5pbWF0ZScsICckcScsICckcGFyc2UnLCAnJGluamVjdG9yJywgZnVuY3Rpb24oJGFuaW1hdGUsICRxLCAkcGFyc2UsICRpbmplY3Rvcikge1xuICAgIHZhciAkYW5pbWF0ZUNzcyA9ICRpbmplY3Rvci5oYXMoJyRhbmltYXRlQ3NzJykgPyAkaW5qZWN0b3IuZ2V0KCckYW5pbWF0ZUNzcycpIDogbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHZhciBleHBhbmRpbmdFeHByID0gJHBhcnNlKGF0dHJzLmV4cGFuZGluZyksXG4gICAgICAgICAgZXhwYW5kZWRFeHByID0gJHBhcnNlKGF0dHJzLmV4cGFuZGVkKSxcbiAgICAgICAgICBjb2xsYXBzaW5nRXhwciA9ICRwYXJzZShhdHRycy5jb2xsYXBzaW5nKSxcbiAgICAgICAgICBjb2xsYXBzZWRFeHByID0gJHBhcnNlKGF0dHJzLmNvbGxhcHNlZCksXG4gICAgICAgICAgaG9yaXpvbnRhbCA9IGZhbHNlLFxuICAgICAgICAgIGNzcyA9IHt9LFxuICAgICAgICAgIGNzc1RvID0ge307XG5cbiAgICAgICAgaW5pdCgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgaG9yaXpvbnRhbCA9ICEhKCdob3Jpem9udGFsJyBpbiBhdHRycyk7XG4gICAgICAgICAgaWYgKGhvcml6b250YWwpIHtcbiAgICAgICAgICAgIGNzcyA9IHtcbiAgICAgICAgICAgICAgd2lkdGg6ICcnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY3NzVG8gPSB7d2lkdGg6ICcwJ307XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcyA9IHtcbiAgICAgICAgICAgICAgaGVpZ2h0OiAnJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNzc1RvID0ge2hlaWdodDogJzAnfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFzY29wZS4kZXZhbChhdHRycy51aWJDb2xsYXBzZSkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2luJylcbiAgICAgICAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgZmFsc2UpXG4gICAgICAgICAgICAgIC5jc3MoY3NzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRTY3JvbGxGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgICAgaWYgKGhvcml6b250YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB7d2lkdGg6IGVsZW1lbnQuc2Nyb2xsV2lkdGggKyAncHgnfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHtoZWlnaHQ6IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ICsgJ3B4J307XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBleHBhbmQoKSB7XG4gICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQ2xhc3MoJ2NvbGxhcHNlJykgJiYgZWxlbWVudC5oYXNDbGFzcygnaW4nKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICRxLnJlc29sdmUoZXhwYW5kaW5nRXhwcihzY29wZSkpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnY29sbGFwc2UnKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKTtcblxuICAgICAgICAgICAgICBpZiAoJGFuaW1hdGVDc3MpIHtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICBhZGRDbGFzczogJ2luJyxcbiAgICAgICAgICAgICAgICAgIGVhc2luZzogJ2Vhc2UnLFxuICAgICAgICAgICAgICAgICAgY3NzOiB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHRvOiBnZXRTY3JvbGxGcm9tRWxlbWVudChlbGVtZW50WzBdKVxuICAgICAgICAgICAgICAgIH0pLnN0YXJ0KClbJ2ZpbmFsbHknXShleHBhbmREb25lKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCAnaW4nLCB7XG4gICAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgdG86IGdldFNjcm9sbEZyb21FbGVtZW50KGVsZW1lbnRbMF0pXG4gICAgICAgICAgICAgICAgfSkudGhlbihleHBhbmREb25lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgYW5ndWxhci5ub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGV4cGFuZERvbmUoKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlJylcbiAgICAgICAgICAgIC5jc3MoY3NzKTtcbiAgICAgICAgICBleHBhbmRlZEV4cHIoc2NvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29sbGFwc2UoKSB7XG4gICAgICAgICAgaWYgKCFlbGVtZW50Lmhhc0NsYXNzKCdjb2xsYXBzZScpICYmICFlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGFwc2VEb25lKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJHEucmVzb2x2ZShjb2xsYXBzaW5nRXhwcihzY29wZSkpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZWxlbWVudFxuICAgICAgICAgICAgICAvLyBJTVBPUlRBTlQ6IFRoZSB3aWR0aCBtdXN0IGJlIHNldCBiZWZvcmUgYWRkaW5nIFwiY29sbGFwc2luZ1wiIGNsYXNzLlxuICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIHRoZSBicm93c2VyIGF0dGVtcHRzIHRvIGFuaW1hdGUgZnJvbSB3aWR0aCAwIChpblxuICAgICAgICAgICAgICAvLyBjb2xsYXBzaW5nIGNsYXNzKSB0byB0aGUgZ2l2ZW4gd2lkdGggaGVyZS5cbiAgICAgICAgICAgICAgICAuY3NzKGdldFNjcm9sbEZyb21FbGVtZW50KGVsZW1lbnRbMF0pKVxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWxseSBhbGwgcGFuZWwgY29sbGFwc2UgaGF2ZSB0aGUgY29sbGFwc2UgY2xhc3MsIHRoaXMgcmVtb3ZhbFxuICAgICAgICAgICAgICAgIC8vIHByZXZlbnRzIHRoZSBhbmltYXRpb24gZnJvbSBqdW1waW5nIHRvIGNvbGxhcHNlZCBzdGF0ZVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UnKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgICAgICAgICBpZiAoJGFuaW1hdGVDc3MpIHtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogJ2luJyxcbiAgICAgICAgICAgICAgICAgIHRvOiBjc3NUb1xuICAgICAgICAgICAgICAgIH0pLnN0YXJ0KClbJ2ZpbmFsbHknXShjb2xsYXBzZURvbmUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsICdpbicsIHtcbiAgICAgICAgICAgICAgICAgIHRvOiBjc3NUb1xuICAgICAgICAgICAgICAgIH0pLnRoZW4oY29sbGFwc2VEb25lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgYW5ndWxhci5ub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbGxhcHNlRG9uZSgpIHtcbiAgICAgICAgICBlbGVtZW50LmNzcyhjc3NUbyk7IC8vIFJlcXVpcmVkIHNvIHRoYXQgY29sbGFwc2Ugd29ya3Mgd2hlbiBhbmltYXRpb24gaXMgZGlzYWJsZWRcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UnKTtcbiAgICAgICAgICBjb2xsYXBzZWRFeHByKHNjb3BlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRycy51aWJDb2xsYXBzZSwgZnVuY3Rpb24oc2hvdWxkQ29sbGFwc2UpIHtcbiAgICAgICAgICBpZiAoc2hvdWxkQ29sbGFwc2UpIHtcbiAgICAgICAgICAgIGNvbGxhcHNlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4cGFuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnRhYmluZGV4JywgW10pXG5cbi5kaXJlY3RpdmUoJ3VpYlRhYmluZGV4VG9nZ2xlJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbSwgYXR0cnMpIHtcbiAgICAgIGF0dHJzLiRvYnNlcnZlKCdkaXNhYmxlZCcsIGZ1bmN0aW9uKGRpc2FibGVkKSB7XG4gICAgICAgIGF0dHJzLiRzZXQoJ3RhYmluZGV4JywgZGlzYWJsZWQgPyAtMSA6IG51bGwpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuYWNjb3JkaW9uJywgWyd1aS5ib290c3RyYXAuY29sbGFwc2UnLCAndWkuYm9vdHN0cmFwLnRhYmluZGV4J10pXG5cbi5jb25zdGFudCgndWliQWNjb3JkaW9uQ29uZmlnJywge1xuICBjbG9zZU90aGVyczogdHJ1ZVxufSlcblxuLmNvbnRyb2xsZXIoJ1VpYkFjY29yZGlvbkNvbnRyb2xsZXInLCBbJyRzY29wZScsICckYXR0cnMnLCAndWliQWNjb3JkaW9uQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsIGFjY29yZGlvbkNvbmZpZykge1xuICAvLyBUaGlzIGFycmF5IGtlZXBzIHRyYWNrIG9mIHRoZSBhY2NvcmRpb24gZ3JvdXBzXG4gIHRoaXMuZ3JvdXBzID0gW107XG5cbiAgLy8gRW5zdXJlIHRoYXQgYWxsIHRoZSBncm91cHMgaW4gdGhpcyBhY2NvcmRpb24gYXJlIGNsb3NlZCwgdW5sZXNzIGNsb3NlLW90aGVycyBleHBsaWNpdGx5IHNheXMgbm90IHRvXG4gIHRoaXMuY2xvc2VPdGhlcnMgPSBmdW5jdGlvbihvcGVuR3JvdXApIHtcbiAgICB2YXIgY2xvc2VPdGhlcnMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuY2xvc2VPdGhlcnMpID9cbiAgICAgICRzY29wZS4kZXZhbCgkYXR0cnMuY2xvc2VPdGhlcnMpIDogYWNjb3JkaW9uQ29uZmlnLmNsb3NlT3RoZXJzO1xuICAgIGlmIChjbG9zZU90aGVycykge1xuICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuZ3JvdXBzLCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoZ3JvdXAgIT09IG9wZW5Hcm91cCkge1xuICAgICAgICAgIGdyb3VwLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gVGhpcyBpcyBjYWxsZWQgZnJvbSB0aGUgYWNjb3JkaW9uLWdyb3VwIGRpcmVjdGl2ZSB0byBhZGQgaXRzZWxmIHRvIHRoZSBhY2NvcmRpb25cbiAgdGhpcy5hZGRHcm91cCA9IGZ1bmN0aW9uKGdyb3VwU2NvcGUpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgdGhpcy5ncm91cHMucHVzaChncm91cFNjb3BlKTtcblxuICAgIGdyb3VwU2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB0aGF0LnJlbW92ZUdyb3VwKGdyb3VwU2NvcGUpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgY2FsbGVkIGZyb20gdGhlIGFjY29yZGlvbi1ncm91cCBkaXJlY3RpdmUgd2hlbiB0byByZW1vdmUgaXRzZWxmXG4gIHRoaXMucmVtb3ZlR3JvdXAgPSBmdW5jdGlvbihncm91cCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuZ3JvdXBzLmluZGV4T2YoZ3JvdXApO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuZ3JvdXBzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9O1xufV0pXG5cbi8vIFRoZSBhY2NvcmRpb24gZGlyZWN0aXZlIHNpbXBseSBzZXRzIHVwIHRoZSBkaXJlY3RpdmUgY29udHJvbGxlclxuLy8gYW5kIGFkZHMgYW4gYWNjb3JkaW9uIENTUyBjbGFzcyB0byBpdHNlbGYgZWxlbWVudC5cbi5kaXJlY3RpdmUoJ3VpYkFjY29yZGlvbicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRyb2xsZXI6ICdVaWJBY2NvcmRpb25Db250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICdhY2NvcmRpb24nLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLmh0bWwnO1xuICAgIH1cbiAgfTtcbn0pXG5cbi8vIFRoZSBhY2NvcmRpb24tZ3JvdXAgZGlyZWN0aXZlIGluZGljYXRlcyBhIGJsb2NrIG9mIGh0bWwgdGhhdCB3aWxsIGV4cGFuZCBhbmQgY29sbGFwc2UgaW4gYW4gYWNjb3JkaW9uXG4uZGlyZWN0aXZlKCd1aWJBY2NvcmRpb25Hcm91cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6ICdedWliQWNjb3JkaW9uJywgICAgICAgICAvLyBXZSBuZWVkIHRoaXMgZGlyZWN0aXZlIHRvIGJlIGluc2lkZSBhbiBhY2NvcmRpb25cbiAgICB0cmFuc2NsdWRlOiB0cnVlLCAgICAgICAgICAgICAgLy8gSXQgdHJhbnNjbHVkZXMgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUgaW50byB0aGUgdGVtcGxhdGVcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi1ncm91cC5odG1sJztcbiAgICB9LFxuICAgIHNjb3BlOiB7XG4gICAgICBoZWFkaW5nOiAnQCcsICAgICAgICAgICAgICAgLy8gSW50ZXJwb2xhdGUgdGhlIGhlYWRpbmcgYXR0cmlidXRlIG9udG8gdGhpcyBzY29wZVxuICAgICAgcGFuZWxDbGFzczogJ0A/JywgICAgICAgICAgIC8vIERpdHRvIHdpdGggcGFuZWxDbGFzc1xuICAgICAgaXNPcGVuOiAnPT8nLFxuICAgICAgaXNEaXNhYmxlZDogJz0/J1xuICAgIH0sXG4gICAgY29udHJvbGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnNldEhlYWRpbmcgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuaGVhZGluZyA9IGVsZW1lbnQ7XG4gICAgICB9O1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBhY2NvcmRpb25DdHJsKSB7XG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdwYW5lbCcpO1xuICAgICAgYWNjb3JkaW9uQ3RybC5hZGRHcm91cChzY29wZSk7XG5cbiAgICAgIHNjb3BlLm9wZW5DbGFzcyA9IGF0dHJzLm9wZW5DbGFzcyB8fCAncGFuZWwtb3Blbic7XG4gICAgICBzY29wZS5wYW5lbENsYXNzID0gYXR0cnMucGFuZWxDbGFzcyB8fCAncGFuZWwtZGVmYXVsdCc7XG4gICAgICBzY29wZS4kd2F0Y2goJ2lzT3BlbicsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGVsZW1lbnQudG9nZ2xlQ2xhc3Moc2NvcGUub3BlbkNsYXNzLCAhIXZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgYWNjb3JkaW9uQ3RybC5jbG9zZU90aGVycyhzY29wZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBzY29wZS50b2dnbGVPcGVuID0gZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIGlmICghc2NvcGUuaXNEaXNhYmxlZCkge1xuICAgICAgICAgIGlmICghJGV2ZW50IHx8ICRldmVudC53aGljaCA9PT0gMzIpIHtcbiAgICAgICAgICAgIHNjb3BlLmlzT3BlbiA9ICFzY29wZS5pc09wZW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgaWQgPSAnYWNjb3JkaW9uZ3JvdXAtJyArIHNjb3BlLiRpZCArICctJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcbiAgICAgIHNjb3BlLmhlYWRpbmdJZCA9IGlkICsgJy10YWInO1xuICAgICAgc2NvcGUucGFuZWxJZCA9IGlkICsgJy1wYW5lbCc7XG4gICAgfVxuICB9O1xufSlcblxuLy8gVXNlIGFjY29yZGlvbi1oZWFkaW5nIGJlbG93IGFuIGFjY29yZGlvbi1ncm91cCB0byBwcm92aWRlIGEgaGVhZGluZyBjb250YWluaW5nIEhUTUxcbi5kaXJlY3RpdmUoJ3VpYkFjY29yZGlvbkhlYWRpbmcnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2NsdWRlOiB0cnVlLCAgIC8vIEdyYWIgdGhlIGNvbnRlbnRzIHRvIGJlIHVzZWQgYXMgdGhlIGhlYWRpbmdcbiAgICB0ZW1wbGF0ZTogJycsICAgICAgIC8vIEluIGVmZmVjdCByZW1vdmUgdGhpcyBlbGVtZW50IVxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgcmVxdWlyZTogJ151aWJBY2NvcmRpb25Hcm91cCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBhY2NvcmRpb25Hcm91cEN0cmwsIHRyYW5zY2x1ZGUpIHtcbiAgICAgIC8vIFBhc3MgdGhlIGhlYWRpbmcgdG8gdGhlIGFjY29yZGlvbi1ncm91cCBjb250cm9sbGVyXG4gICAgICAvLyBzbyB0aGF0IGl0IGNhbiBiZSB0cmFuc2NsdWRlZCBpbnRvIHRoZSByaWdodCBwbGFjZSBpbiB0aGUgdGVtcGxhdGVcbiAgICAgIC8vIFtUaGUgc2Vjb25kIHBhcmFtZXRlciB0byB0cmFuc2NsdWRlIGNhdXNlcyB0aGUgZWxlbWVudHMgdG8gYmUgY2xvbmVkIHNvIHRoYXQgdGhleSB3b3JrIGluIG5nLXJlcGVhdF1cbiAgICAgIGFjY29yZGlvbkdyb3VwQ3RybC5zZXRIZWFkaW5nKHRyYW5zY2x1ZGUoc2NvcGUsIGFuZ3VsYXIubm9vcCkpO1xuICAgIH1cbiAgfTtcbn0pXG5cbi8vIFVzZSBpbiB0aGUgYWNjb3JkaW9uLWdyb3VwIHRlbXBsYXRlIHRvIGluZGljYXRlIHdoZXJlIHlvdSB3YW50IHRoZSBoZWFkaW5nIHRvIGJlIHRyYW5zY2x1ZGVkXG4vLyBZb3UgbXVzdCBwcm92aWRlIHRoZSBwcm9wZXJ0eSBvbiB0aGUgYWNjb3JkaW9uLWdyb3VwIGNvbnRyb2xsZXIgdGhhdCB3aWxsIGhvbGQgdGhlIHRyYW5zY2x1ZGVkIGVsZW1lbnRcbi5kaXJlY3RpdmUoJ3VpYkFjY29yZGlvblRyYW5zY2x1ZGUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnXnVpYkFjY29yZGlvbkdyb3VwJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXIpIHtcbiAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHsgcmV0dXJuIGNvbnRyb2xsZXJbYXR0cnMudWliQWNjb3JkaW9uVHJhbnNjbHVkZV07IH0sIGZ1bmN0aW9uKGhlYWRpbmcpIHtcbiAgICAgICAgaWYgKGhlYWRpbmcpIHtcbiAgICAgICAgICB2YXIgZWxlbSA9IGFuZ3VsYXIuZWxlbWVudChlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoZ2V0SGVhZGVyU2VsZWN0b3JzKCkpKTtcbiAgICAgICAgICBlbGVtLmh0bWwoJycpO1xuICAgICAgICAgIGVsZW0uYXBwZW5kKGhlYWRpbmcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0SGVhZGVyU2VsZWN0b3JzKCkge1xuICAgICAgcmV0dXJuICd1aWItYWNjb3JkaW9uLWhlYWRlciwnICtcbiAgICAgICAgICAnZGF0YS11aWItYWNjb3JkaW9uLWhlYWRlciwnICtcbiAgICAgICAgICAneC11aWItYWNjb3JkaW9uLWhlYWRlciwnICtcbiAgICAgICAgICAndWliXFxcXDphY2NvcmRpb24taGVhZGVyLCcgK1xuICAgICAgICAgICdbdWliLWFjY29yZGlvbi1oZWFkZXJdLCcgK1xuICAgICAgICAgICdbZGF0YS11aWItYWNjb3JkaW9uLWhlYWRlcl0sJyArXG4gICAgICAgICAgJ1t4LXVpYi1hY2NvcmRpb24taGVhZGVyXSc7XG4gIH1cbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmFsZXJ0JywgW10pXG5cbi5jb250cm9sbGVyKCdVaWJBbGVydENvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICckYXR0cnMnLCAnJGludGVycG9sYXRlJywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkaW50ZXJwb2xhdGUsICR0aW1lb3V0KSB7XG4gICRzY29wZS5jbG9zZWFibGUgPSAhISRhdHRycy5jbG9zZTtcbiAgJGVsZW1lbnQuYWRkQ2xhc3MoJ2FsZXJ0Jyk7XG4gICRhdHRycy4kc2V0KCdyb2xlJywgJ2FsZXJ0Jyk7XG4gIGlmICgkc2NvcGUuY2xvc2VhYmxlKSB7XG4gICAgJGVsZW1lbnQuYWRkQ2xhc3MoJ2FsZXJ0LWRpc21pc3NpYmxlJyk7XG4gIH1cblxuICB2YXIgZGlzbWlzc09uVGltZW91dCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kaXNtaXNzT25UaW1lb3V0KSA/XG4gICAgJGludGVycG9sYXRlKCRhdHRycy5kaXNtaXNzT25UaW1lb3V0KSgkc2NvcGUuJHBhcmVudCkgOiBudWxsO1xuXG4gIGlmIChkaXNtaXNzT25UaW1lb3V0KSB7XG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkc2NvcGUuY2xvc2UoKTtcbiAgICB9LCBwYXJzZUludChkaXNtaXNzT25UaW1lb3V0LCAxMCkpO1xuICB9XG59XSlcblxuLmRpcmVjdGl2ZSgndWliQWxlcnQnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVyOiAnVWliQWxlcnRDb250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICdhbGVydCcsXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2FsZXJ0L2FsZXJ0Lmh0bWwnO1xuICAgIH0sXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICBzY29wZToge1xuICAgICAgY2xvc2U6ICcmJ1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmJ1dHRvbnMnLCBbXSlcblxuLmNvbnN0YW50KCd1aWJCdXR0b25Db25maWcnLCB7XG4gIGFjdGl2ZUNsYXNzOiAnYWN0aXZlJyxcbiAgdG9nZ2xlRXZlbnQ6ICdjbGljaydcbn0pXG5cbi5jb250cm9sbGVyKCdVaWJCdXR0b25zQ29udHJvbGxlcicsIFsndWliQnV0dG9uQ29uZmlnJywgZnVuY3Rpb24oYnV0dG9uQ29uZmlnKSB7XG4gIHRoaXMuYWN0aXZlQ2xhc3MgPSBidXR0b25Db25maWcuYWN0aXZlQ2xhc3MgfHwgJ2FjdGl2ZSc7XG4gIHRoaXMudG9nZ2xlRXZlbnQgPSBidXR0b25Db25maWcudG9nZ2xlRXZlbnQgfHwgJ2NsaWNrJztcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJCdG5SYWRpbycsIFsnJHBhcnNlJywgZnVuY3Rpb24oJHBhcnNlKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogWyd1aWJCdG5SYWRpbycsICduZ01vZGVsJ10sXG4gICAgY29udHJvbGxlcjogJ1VpYkJ1dHRvbnNDb250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICdidXR0b25zJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgYnV0dG9uc0N0cmwgPSBjdHJsc1swXSwgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcbiAgICAgIHZhciB1bmNoZWNrYWJsZUV4cHIgPSAkcGFyc2UoYXR0cnMudWliVW5jaGVja2FibGUpO1xuXG4gICAgICBlbGVtZW50LmZpbmQoJ2lucHV0JykuY3NzKHtkaXNwbGF5OiAnbm9uZSd9KTtcblxuICAgICAgLy9tb2RlbCAtPiBVSVxuICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50LnRvZ2dsZUNsYXNzKGJ1dHRvbnNDdHJsLmFjdGl2ZUNsYXNzLCBhbmd1bGFyLmVxdWFscyhuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSwgc2NvcGUuJGV2YWwoYXR0cnMudWliQnRuUmFkaW8pKSk7XG4gICAgICB9O1xuXG4gICAgICAvL3VpLT5tb2RlbFxuICAgICAgZWxlbWVudC5vbihidXR0b25zQ3RybC50b2dnbGVFdmVudCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChhdHRycy5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc0FjdGl2ZSA9IGVsZW1lbnQuaGFzQ2xhc3MoYnV0dG9uc0N0cmwuYWN0aXZlQ2xhc3MpO1xuXG4gICAgICAgIGlmICghaXNBY3RpdmUgfHwgYW5ndWxhci5pc0RlZmluZWQoYXR0cnMudW5jaGVja2FibGUpKSB7XG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShpc0FjdGl2ZSA/IG51bGwgOiBzY29wZS4kZXZhbChhdHRycy51aWJCdG5SYWRpbykpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGF0dHJzLnVpYlVuY2hlY2thYmxlKSB7XG4gICAgICAgIHNjb3BlLiR3YXRjaCh1bmNoZWNrYWJsZUV4cHIsIGZ1bmN0aW9uKHVuY2hlY2thYmxlKSB7XG4gICAgICAgICAgYXR0cnMuJHNldCgndW5jaGVja2FibGUnLCB1bmNoZWNrYWJsZSA/ICcnIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYkJ0bkNoZWNrYm94JywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogWyd1aWJCdG5DaGVja2JveCcsICduZ01vZGVsJ10sXG4gICAgY29udHJvbGxlcjogJ1VpYkJ1dHRvbnNDb250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICdidXR0b24nLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciBidXR0b25zQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICBlbGVtZW50LmZpbmQoJ2lucHV0JykuY3NzKHtkaXNwbGF5OiAnbm9uZSd9KTtcblxuICAgICAgZnVuY3Rpb24gZ2V0VHJ1ZVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q2hlY2tib3hWYWx1ZShhdHRycy5idG5DaGVja2JveFRydWUsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRGYWxzZVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q2hlY2tib3hWYWx1ZShhdHRycy5idG5DaGVja2JveEZhbHNlLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldENoZWNrYm94VmFsdWUoYXR0cmlidXRlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJpYnV0ZSkgPyBzY29wZS4kZXZhbChhdHRyaWJ1dGUpIDogZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuXG4gICAgICAvL21vZGVsIC0+IFVJXG4gICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQudG9nZ2xlQ2xhc3MoYnV0dG9uc0N0cmwuYWN0aXZlQ2xhc3MsIGFuZ3VsYXIuZXF1YWxzKG5nTW9kZWxDdHJsLiRtb2RlbFZhbHVlLCBnZXRUcnVlVmFsdWUoKSkpO1xuICAgICAgfTtcblxuICAgICAgLy91aS0+bW9kZWxcbiAgICAgIGVsZW1lbnQub24oYnV0dG9uc0N0cmwudG9nZ2xlRXZlbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYXR0cnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShlbGVtZW50Lmhhc0NsYXNzKGJ1dHRvbnNDdHJsLmFjdGl2ZUNsYXNzKSA/IGdldEZhbHNlVmFsdWUoKSA6IGdldFRydWVWYWx1ZSgpKTtcbiAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuY2Fyb3VzZWwnLCBbXSlcblxuLmNvbnRyb2xsZXIoJ1VpYkNhcm91c2VsQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRpbnRlcnZhbCcsICckdGltZW91dCcsICckYW5pbWF0ZScsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRpbnRlcnZhbCwgJHRpbWVvdXQsICRhbmltYXRlKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICBzbGlkZXMgPSBzZWxmLnNsaWRlcyA9ICRzY29wZS5zbGlkZXMgPSBbXSxcbiAgICBTTElERV9ESVJFQ1RJT04gPSAndWliLXNsaWRlRGlyZWN0aW9uJyxcbiAgICBjdXJyZW50SW5kZXggPSAkc2NvcGUuYWN0aXZlLFxuICAgIGN1cnJlbnRJbnRlcnZhbCwgaXNQbGF5aW5nO1xuXG4gIHZhciBkZXN0cm95ZWQgPSBmYWxzZTtcbiAgJGVsZW1lbnQuYWRkQ2xhc3MoJ2Nhcm91c2VsJyk7XG5cbiAgc2VsZi5hZGRTbGlkZSA9IGZ1bmN0aW9uKHNsaWRlLCBlbGVtZW50KSB7XG4gICAgc2xpZGVzLnB1c2goe1xuICAgICAgc2xpZGU6IHNsaWRlLFxuICAgICAgZWxlbWVudDogZWxlbWVudFxuICAgIH0pO1xuICAgIHNsaWRlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiArYS5zbGlkZS5pbmRleCAtICtiLnNsaWRlLmluZGV4O1xuICAgIH0pO1xuICAgIC8vaWYgdGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGUgb3IgdGhlIHNsaWRlIGlzIHNldCB0byBhY3RpdmUsIHNlbGVjdCBpdFxuICAgIGlmIChzbGlkZS5pbmRleCA9PT0gJHNjb3BlLmFjdGl2ZSB8fCBzbGlkZXMubGVuZ3RoID09PSAxICYmICFhbmd1bGFyLmlzTnVtYmVyKCRzY29wZS5hY3RpdmUpKSB7XG4gICAgICBpZiAoJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbikge1xuICAgICAgICAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY3VycmVudEluZGV4ID0gc2xpZGUuaW5kZXg7XG4gICAgICAkc2NvcGUuYWN0aXZlID0gc2xpZGUuaW5kZXg7XG4gICAgICBzZXRBY3RpdmUoY3VycmVudEluZGV4KTtcbiAgICAgIHNlbGYuc2VsZWN0KHNsaWRlc1tmaW5kU2xpZGVJbmRleChzbGlkZSldKTtcbiAgICAgIGlmIChzbGlkZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICRzY29wZS5wbGF5KCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHNlbGYuZ2V0Q3VycmVudEluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzbGlkZXNbaV0uc2xpZGUuaW5kZXggPT09IGN1cnJlbnRJbmRleCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgc2VsZi5uZXh0ID0gJHNjb3BlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV3SW5kZXggPSAoc2VsZi5nZXRDdXJyZW50SW5kZXgoKSArIDEpICUgc2xpZGVzLmxlbmd0aDtcblxuICAgIGlmIChuZXdJbmRleCA9PT0gMCAmJiAkc2NvcGUubm9XcmFwKCkpIHtcbiAgICAgICRzY29wZS5wYXVzZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLnNlbGVjdChzbGlkZXNbbmV3SW5kZXhdLCAnbmV4dCcpO1xuICB9O1xuXG4gIHNlbGYucHJldiA9ICRzY29wZS5wcmV2ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5ld0luZGV4ID0gc2VsZi5nZXRDdXJyZW50SW5kZXgoKSAtIDEgPCAwID8gc2xpZGVzLmxlbmd0aCAtIDEgOiBzZWxmLmdldEN1cnJlbnRJbmRleCgpIC0gMTtcblxuICAgIGlmICgkc2NvcGUubm9XcmFwKCkgJiYgbmV3SW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAkc2NvcGUucGF1c2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5zZWxlY3Qoc2xpZGVzW25ld0luZGV4XSwgJ3ByZXYnKTtcbiAgfTtcblxuICBzZWxmLnJlbW92ZVNsaWRlID0gZnVuY3Rpb24oc2xpZGUpIHtcbiAgICB2YXIgaW5kZXggPSBmaW5kU2xpZGVJbmRleChzbGlkZSk7XG5cbiAgICAvL2dldCB0aGUgaW5kZXggb2YgdGhlIHNsaWRlIGluc2lkZSB0aGUgY2Fyb3VzZWxcbiAgICBzbGlkZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICBpZiAoc2xpZGVzLmxlbmd0aCA+IDAgJiYgY3VycmVudEluZGV4ID09PSBpbmRleCkge1xuICAgICAgaWYgKGluZGV4ID49IHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgY3VycmVudEluZGV4ID0gc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgICAgICRzY29wZS5hY3RpdmUgPSBjdXJyZW50SW5kZXg7XG4gICAgICAgIHNldEFjdGl2ZShjdXJyZW50SW5kZXgpO1xuICAgICAgICBzZWxmLnNlbGVjdChzbGlkZXNbc2xpZGVzLmxlbmd0aCAtIDFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IGluZGV4O1xuICAgICAgICAkc2NvcGUuYWN0aXZlID0gY3VycmVudEluZGV4O1xuICAgICAgICBzZXRBY3RpdmUoY3VycmVudEluZGV4KTtcbiAgICAgICAgc2VsZi5zZWxlY3Qoc2xpZGVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXJyZW50SW5kZXggPiBpbmRleCkge1xuICAgICAgY3VycmVudEluZGV4LS07XG4gICAgICAkc2NvcGUuYWN0aXZlID0gY3VycmVudEluZGV4O1xuICAgIH1cblxuICAgIC8vY2xlYW4gdGhlIGFjdGl2ZSB2YWx1ZSB3aGVuIG5vIG1vcmUgc2xpZGVcbiAgICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY3VycmVudEluZGV4ID0gbnVsbDtcbiAgICAgICRzY29wZS5hY3RpdmUgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICAvKiBkaXJlY3Rpb246IFwicHJldlwiIG9yIFwibmV4dFwiICovXG4gIHNlbGYuc2VsZWN0ID0gJHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uKG5leHRTbGlkZSwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGZpbmRTbGlkZUluZGV4KG5leHRTbGlkZS5zbGlkZSk7XG4gICAgLy9EZWNpZGUgZGlyZWN0aW9uIGlmIGl0J3Mgbm90IGdpdmVuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkaXJlY3Rpb24gPSBuZXh0SW5kZXggPiBzZWxmLmdldEN1cnJlbnRJbmRleCgpID8gJ25leHQnIDogJ3ByZXYnO1xuICAgIH1cbiAgICAvL1ByZXZlbnQgdGhpcyB1c2VyLXRyaWdnZXJlZCB0cmFuc2l0aW9uIGZyb20gb2NjdXJyaW5nIGlmIHRoZXJlIGlzIGFscmVhZHkgb25lIGluIHByb2dyZXNzXG4gICAgaWYgKG5leHRTbGlkZS5zbGlkZS5pbmRleCAhPT0gY3VycmVudEluZGV4ICYmXG4gICAgICAhJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbikge1xuICAgICAgZ29OZXh0KG5leHRTbGlkZS5zbGlkZSwgbmV4dEluZGV4LCBkaXJlY3Rpb24pO1xuICAgIH1cbiAgfTtcblxuICAvKiBBbGxvdyBvdXRzaWRlIHBlb3BsZSB0byBjYWxsIGluZGV4T2Ygb24gc2xpZGVzIGFycmF5ICovXG4gICRzY29wZS5pbmRleE9mU2xpZGUgPSBmdW5jdGlvbihzbGlkZSkge1xuICAgIHJldHVybiArc2xpZGUuc2xpZGUuaW5kZXg7XG4gIH07XG5cbiAgJHNjb3BlLmlzQWN0aXZlID0gZnVuY3Rpb24oc2xpZGUpIHtcbiAgICByZXR1cm4gJHNjb3BlLmFjdGl2ZSA9PT0gc2xpZGUuc2xpZGUuaW5kZXg7XG4gIH07XG5cbiAgJHNjb3BlLmlzUHJldkRpc2FibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICRzY29wZS5hY3RpdmUgPT09IDAgJiYgJHNjb3BlLm5vV3JhcCgpO1xuICB9O1xuXG4gICRzY29wZS5pc05leHREaXNhYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkc2NvcGUuYWN0aXZlID09PSBzbGlkZXMubGVuZ3RoIC0gMSAmJiAkc2NvcGUubm9XcmFwKCk7XG4gIH07XG5cbiAgJHNjb3BlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9QYXVzZSkge1xuICAgICAgaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICByZXNldFRpbWVyKCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFpc1BsYXlpbmcpIHtcbiAgICAgIGlzUGxheWluZyA9IHRydWU7XG4gICAgICByZXN0YXJ0VGltZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgJGVsZW1lbnQub24oJ21vdXNlZW50ZXInLCAkc2NvcGUucGF1c2UpO1xuICAkZWxlbWVudC5vbignbW91c2VsZWF2ZScsICRzY29wZS5wbGF5KTtcblxuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIGRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmVzZXRUaW1lcigpO1xuICB9KTtcblxuICAkc2NvcGUuJHdhdGNoKCdub1RyYW5zaXRpb24nLCBmdW5jdGlvbihub1RyYW5zaXRpb24pIHtcbiAgICAkYW5pbWF0ZS5lbmFibGVkKCRlbGVtZW50LCAhbm9UcmFuc2l0aW9uKTtcbiAgfSk7XG5cbiAgJHNjb3BlLiR3YXRjaCgnaW50ZXJ2YWwnLCByZXN0YXJ0VGltZXIpO1xuXG4gICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCdzbGlkZXMnLCByZXNldFRyYW5zaXRpb24pO1xuXG4gICRzY29wZS4kd2F0Y2goJ2FjdGl2ZScsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoaW5kZXgpICYmIGN1cnJlbnRJbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0uc2xpZGUuaW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzbGlkZSA9IHNsaWRlc1tpbmRleF07XG4gICAgICBpZiAoc2xpZGUpIHtcbiAgICAgICAgc2V0QWN0aXZlKGluZGV4KTtcbiAgICAgICAgc2VsZi5zZWxlY3Qoc2xpZGVzW2luZGV4XSk7XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gZ2V0U2xpZGVCeUluZGV4KGluZGV4KSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzbGlkZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldLmluZGV4ID09PSBpbmRleCkge1xuICAgICAgICByZXR1cm4gc2xpZGVzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEFjdGl2ZShpbmRleCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzbGlkZXNbaV0uc2xpZGUuYWN0aXZlID0gaSA9PT0gaW5kZXg7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ29OZXh0KHNsaWRlLCBpbmRleCwgZGlyZWN0aW9uKSB7XG4gICAgaWYgKGRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGFuZ3VsYXIuZXh0ZW5kKHNsaWRlLCB7ZGlyZWN0aW9uOiBkaXJlY3Rpb259KTtcbiAgICBhbmd1bGFyLmV4dGVuZChzbGlkZXNbY3VycmVudEluZGV4XS5zbGlkZSB8fCB7fSwge2RpcmVjdGlvbjogZGlyZWN0aW9ufSk7XG4gICAgaWYgKCRhbmltYXRlLmVuYWJsZWQoJGVsZW1lbnQpICYmICEkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uICYmXG4gICAgICBzbGlkZXNbaW5kZXhdLmVsZW1lbnQgJiYgc2VsZi5zbGlkZXMubGVuZ3RoID4gMSkge1xuICAgICAgc2xpZGVzW2luZGV4XS5lbGVtZW50LmRhdGEoU0xJREVfRElSRUNUSU9OLCBzbGlkZS5kaXJlY3Rpb24pO1xuICAgICAgdmFyIGN1cnJlbnRJZHggPSBzZWxmLmdldEN1cnJlbnRJbmRleCgpO1xuXG4gICAgICBpZiAoYW5ndWxhci5pc051bWJlcihjdXJyZW50SWR4KSAmJiBzbGlkZXNbY3VycmVudElkeF0uZWxlbWVudCkge1xuICAgICAgICBzbGlkZXNbY3VycmVudElkeF0uZWxlbWVudC5kYXRhKFNMSURFX0RJUkVDVElPTiwgc2xpZGUuZGlyZWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbiA9IHRydWU7XG4gICAgICAkYW5pbWF0ZS5vbignYWRkQ2xhc3MnLCBzbGlkZXNbaW5kZXhdLmVsZW1lbnQsIGZ1bmN0aW9uKGVsZW1lbnQsIHBoYXNlKSB7XG4gICAgICAgIGlmIChwaGFzZSA9PT0gJ2Nsb3NlJykge1xuICAgICAgICAgICRzY29wZS4kY3VycmVudFRyYW5zaXRpb24gPSBudWxsO1xuICAgICAgICAgICRhbmltYXRlLm9mZignYWRkQ2xhc3MnLCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmFjdGl2ZSA9IHNsaWRlLmluZGV4O1xuICAgIGN1cnJlbnRJbmRleCA9IHNsaWRlLmluZGV4O1xuICAgIHNldEFjdGl2ZShpbmRleCk7XG5cbiAgICAvL2V2ZXJ5IHRpbWUgeW91IGNoYW5nZSBzbGlkZXMsIHJlc2V0IHRoZSB0aW1lclxuICAgIHJlc3RhcnRUaW1lcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZFNsaWRlSW5kZXgoc2xpZGUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHNsaWRlc1tpXS5zbGlkZSA9PT0gc2xpZGUpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUaW1lcigpIHtcbiAgICBpZiAoY3VycmVudEludGVydmFsKSB7XG4gICAgICAkaW50ZXJ2YWwuY2FuY2VsKGN1cnJlbnRJbnRlcnZhbCk7XG4gICAgICBjdXJyZW50SW50ZXJ2YWwgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJhbnNpdGlvbihzbGlkZXMpIHtcbiAgICBpZiAoIXNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICRzY29wZS4kY3VycmVudFRyYW5zaXRpb24gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc3RhcnRUaW1lcigpIHtcbiAgICByZXNldFRpbWVyKCk7XG4gICAgdmFyIGludGVydmFsID0gKyRzY29wZS5pbnRlcnZhbDtcbiAgICBpZiAoIWlzTmFOKGludGVydmFsKSAmJiBpbnRlcnZhbCA+IDApIHtcbiAgICAgIGN1cnJlbnRJbnRlcnZhbCA9ICRpbnRlcnZhbCh0aW1lckZuLCBpbnRlcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJGbigpIHtcbiAgICB2YXIgaW50ZXJ2YWwgPSArJHNjb3BlLmludGVydmFsO1xuICAgIGlmIChpc1BsYXlpbmcgJiYgIWlzTmFOKGludGVydmFsKSAmJiBpbnRlcnZhbCA+IDAgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgJHNjb3BlLm5leHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHNjb3BlLnBhdXNlKCk7XG4gICAgfVxuICB9XG59XSlcblxuLmRpcmVjdGl2ZSgndWliQ2Fyb3VzZWwnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJDYXJvdXNlbENvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ2Nhcm91c2VsJyxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbCc7XG4gICAgfSxcbiAgICBzY29wZToge1xuICAgICAgYWN0aXZlOiAnPScsXG4gICAgICBpbnRlcnZhbDogJz0nLFxuICAgICAgbm9UcmFuc2l0aW9uOiAnPScsXG4gICAgICBub1BhdXNlOiAnPScsXG4gICAgICBub1dyYXA6ICcmJ1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlNsaWRlJywgWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ151aWJDYXJvdXNlbCcsXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbCc7XG4gICAgfSxcbiAgICBzY29wZToge1xuICAgICAgYWN0dWFsOiAnPT8nLFxuICAgICAgaW5kZXg6ICc9PydcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNhcm91c2VsQ3RybCkge1xuICAgICAgZWxlbWVudC5hZGRDbGFzcygnaXRlbScpO1xuICAgICAgY2Fyb3VzZWxDdHJsLmFkZFNsaWRlKHNjb3BlLCBlbGVtZW50KTtcbiAgICAgIC8vd2hlbiB0aGUgc2NvcGUgaXMgZGVzdHJveWVkIHRoZW4gcmVtb3ZlIHRoZSBzbGlkZSBmcm9tIHRoZSBjdXJyZW50IHNsaWRlcyBhcnJheVxuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjYXJvdXNlbEN0cmwucmVtb3ZlU2xpZGUoc2NvcGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLiR3YXRjaCgnYWN0aXZlJywgZnVuY3Rpb24oYWN0aXZlKSB7XG4gICAgICAgICRhbmltYXRlW2FjdGl2ZSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShlbGVtZW50LCAnYWN0aXZlJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XSlcblxuLmFuaW1hdGlvbignLml0ZW0nLCBbJyRhbmltYXRlQ3NzJyxcbmZ1bmN0aW9uKCRhbmltYXRlQ3NzKSB7XG4gIHZhciBTTElERV9ESVJFQ1RJT04gPSAndWliLXNsaWRlRGlyZWN0aW9uJztcblxuICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUsIGNhbGxiYWNrKSB7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJlZm9yZUFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcbiAgICAgIGlmIChjbGFzc05hbWUgPT09ICdhY3RpdmUnKSB7XG4gICAgICAgIHZhciBzdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBlbGVtZW50LmRhdGEoU0xJREVfRElSRUNUSU9OKTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbkNsYXNzID0gZGlyZWN0aW9uID09PSAnbmV4dCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICB2YXIgcmVtb3ZlQ2xhc3NGbiA9IHJlbW92ZUNsYXNzLmJpbmQodGhpcywgZWxlbWVudCxcbiAgICAgICAgICBkaXJlY3Rpb25DbGFzcyArICcgJyArIGRpcmVjdGlvbiwgZG9uZSk7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoZGlyZWN0aW9uKTtcblxuICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7YWRkQ2xhc3M6IGRpcmVjdGlvbkNsYXNzfSlcbiAgICAgICAgICAuc3RhcnQoKVxuICAgICAgICAgIC5kb25lKHJlbW92ZUNsYXNzRm4pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGRvbmUoKTtcbiAgICB9LFxuICAgIGJlZm9yZVJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7XG4gICAgICBpZiAoY2xhc3NOYW1lID09PSAnYWN0aXZlJykge1xuICAgICAgICB2YXIgc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZWxlbWVudC5kYXRhKFNMSURFX0RJUkVDVElPTik7XG4gICAgICAgIHZhciBkaXJlY3Rpb25DbGFzcyA9IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgdmFyIHJlbW92ZUNsYXNzRm4gPSByZW1vdmVDbGFzcy5iaW5kKHRoaXMsIGVsZW1lbnQsIGRpcmVjdGlvbkNsYXNzLCBkb25lKTtcblxuICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7YWRkQ2xhc3M6IGRpcmVjdGlvbkNsYXNzfSlcbiAgICAgICAgICAuc3RhcnQoKVxuICAgICAgICAgIC5kb25lKHJlbW92ZUNsYXNzRm4pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGRvbmUoKTtcbiAgICB9XG4gIH07XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZGF0ZXBhcnNlcicsIFtdKVxuXG4uc2VydmljZSgndWliRGF0ZVBhcnNlcicsIFsnJGxvZycsICckbG9jYWxlJywgJ2RhdGVGaWx0ZXInLCAnb3JkZXJCeUZpbHRlcicsICdmaWx0ZXJGaWx0ZXInLCBmdW5jdGlvbigkbG9nLCAkbG9jYWxlLCBkYXRlRmlsdGVyLCBvcmRlckJ5RmlsdGVyLCBmaWx0ZXJGaWx0ZXIpIHtcbiAgLy8gUHVsbGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21ib3N0b2NrL2QzL2Jsb2IvbWFzdGVyL3NyYy9mb3JtYXQvcmVxdW90ZS5qc1xuICB2YXIgU1BFQ0lBTF9DSEFSQUNURVJTX1JFR0VYUCA9IC9bXFxcXFxcXlxcJFxcKlxcK1xcP1xcfFxcW1xcXVxcKFxcKVxcLlxce1xcfV0vZztcblxuICB2YXIgbG9jYWxlSWQ7XG4gIHZhciBmb3JtYXRDb2RlVG9SZWdleDtcblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICBsb2NhbGVJZCA9ICRsb2NhbGUuaWQ7XG5cbiAgICB0aGlzLnBhcnNlcnMgPSB7fTtcbiAgICB0aGlzLmZvcm1hdHRlcnMgPSB7fTtcblxuICAgIGZvcm1hdENvZGVUb1JlZ2V4ID0gW1xuICAgICAge1xuICAgICAgICBrZXk6ICd5eXl5JyxcbiAgICAgICAgcmVnZXg6ICdcXFxcZHs0fScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLnllYXIgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgIHZhciBfZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgX2RhdGUuc2V0RnVsbFllYXIoTWF0aC5hYnMoZGF0ZS5nZXRGdWxsWWVhcigpKSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGVGaWx0ZXIoX2RhdGUsICd5eXl5Jyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3l5JyxcbiAgICAgICAgcmVnZXg6ICdcXFxcZHsyfScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB2YWx1ZSA9ICt2YWx1ZTsgdGhpcy55ZWFyID0gdmFsdWUgPCA2OSA/IHZhbHVlICsgMjAwMCA6IHZhbHVlICsgMTkwMDsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgdmFyIF9kYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICBfZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmFicyhkYXRlLmdldEZ1bGxZZWFyKCkpKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZUZpbHRlcihfZGF0ZSwgJ3l5Jyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3knLFxuICAgICAgICByZWdleDogJ1xcXFxkezEsNH0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy55ZWFyID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB2YXIgX2RhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIF9kYXRlLnNldEZ1bGxZZWFyKE1hdGguYWJzKGRhdGUuZ2V0RnVsbFllYXIoKSkpO1xuICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKF9kYXRlLCAneScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdNIScsXG4gICAgICAgIHJlZ2V4OiAnMD9bMS05XXwxWzAtMl0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5tb250aCA9IHZhbHVlIC0gMTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZGF0ZS5nZXRNb250aCgpO1xuICAgICAgICAgIGlmICgvXlswLTldJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdNTScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdNJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ01NTU0nLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLk1PTlRILmpvaW4oJ3wnKSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubW9udGggPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuTU9OVEguaW5kZXhPZih2YWx1ZSk7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnTU1NTScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdNTU0nLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLlNIT1JUTU9OVEguam9pbignfCcpLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5tb250aCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5TSE9SVE1PTlRILmluZGV4T2YodmFsdWUpOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ01NTScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdNTScsXG4gICAgICAgIHJlZ2V4OiAnMFsxLTldfDFbMC0yXScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1vbnRoID0gdmFsdWUgLSAxOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ01NJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ00nLFxuICAgICAgICByZWdleDogJ1sxLTldfDFbMC0yXScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1vbnRoID0gdmFsdWUgLSAxOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ00nKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnZCEnLFxuICAgICAgICByZWdleDogJ1swLTJdP1swLTldezF9fDNbMC0xXXsxfScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmRhdGUgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGUuZ2V0RGF0ZSgpO1xuICAgICAgICAgIGlmICgvXlsxLTldJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdkZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdkJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ2RkJyxcbiAgICAgICAgcmVnZXg6ICdbMC0yXVswLTldezF9fDNbMC0xXXsxfScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmRhdGUgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnZGQnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnZCcsXG4gICAgICAgIHJlZ2V4OiAnWzEtMl0/WzAtOV17MX18M1swLTFdezF9JyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuZGF0ZSA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdkJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0VFRUUnLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLkRBWS5qb2luKCd8JyksXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnRUVFRScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdFRUUnLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLlNIT1JUREFZLmpvaW4oJ3wnKSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdFRUUnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnSEgnLFxuICAgICAgICByZWdleDogJyg/OjB8MSlbMC05XXwyWzAtM10nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5ob3VycyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdISCcpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdoaCcsXG4gICAgICAgIHJlZ2V4OiAnMFswLTldfDFbMC0yXScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmhvdXJzID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ2hoJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0gnLFxuICAgICAgICByZWdleDogJzE/WzAtOV18MlswLTNdJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuaG91cnMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnSCcpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdoJyxcbiAgICAgICAgcmVnZXg6ICdbMC05XXwxWzAtMl0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5ob3VycyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdoJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ21tJyxcbiAgICAgICAgcmVnZXg6ICdbMC01XVswLTldJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubWludXRlcyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdtbScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdtJyxcbiAgICAgICAgcmVnZXg6ICdbMC05XXxbMS01XVswLTldJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubWludXRlcyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdtJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3NzcycsXG4gICAgICAgIHJlZ2V4OiAnWzAtOV1bMC05XVswLTldJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubWlsbGlzZWNvbmRzID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ3NzcycpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdzcycsXG4gICAgICAgIHJlZ2V4OiAnWzAtNV1bMC05XScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLnNlY29uZHMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnc3MnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAncycsXG4gICAgICAgIHJlZ2V4OiAnWzAtOV18WzEtNV1bMC05XScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLnNlY29uZHMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAncycpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdhJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5BTVBNUy5qb2luKCd8JyksXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICh0aGlzLmhvdXJzID09PSAxMikge1xuICAgICAgICAgICAgdGhpcy5ob3VycyA9IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSAnUE0nKSB7XG4gICAgICAgICAgICB0aGlzLmhvdXJzICs9IDEyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdhJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ1onLFxuICAgICAgICByZWdleDogJ1srLV1cXFxcZHs0fScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciBtYXRjaGVzID0gdmFsdWUubWF0Y2goLyhbKy1dKShcXGR7Mn0pKFxcZHsyfSkvKSxcbiAgICAgICAgICAgIHNpZ24gPSBtYXRjaGVzWzFdLFxuICAgICAgICAgICAgaG91cnMgPSBtYXRjaGVzWzJdLFxuICAgICAgICAgICAgbWludXRlcyA9IG1hdGNoZXNbM107XG4gICAgICAgICAgdGhpcy5ob3VycyArPSB0b0ludChzaWduICsgaG91cnMpO1xuICAgICAgICAgIHRoaXMubWludXRlcyArPSB0b0ludChzaWduICsgbWludXRlcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdaJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3d3JyxcbiAgICAgICAgcmVnZXg6ICdbMC00XVswLTldfDVbMC0zXScsXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnd3cnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAndycsXG4gICAgICAgIHJlZ2V4OiAnWzAtOV18WzEtNF1bMC05XXw1WzAtM10nLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ3cnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnR0dHRycsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuRVJBTkFNRVMuam9pbignfCcpLnJlcGxhY2UoL1xccy9nLCAnXFxcXHMnKSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdHR0dHJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0dHRycsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuRVJBUy5qb2luKCd8JyksXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnR0dHJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0dHJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5FUkFTLmpvaW4oJ3wnKSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdHRycpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdHJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5FUkFTLmpvaW4oJ3wnKSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdHJyk7IH1cbiAgICAgIH1cbiAgICBdO1xuXG4gICAgaWYgKGFuZ3VsYXIudmVyc2lvbi5tYWpvciA+PSAxICYmIGFuZ3VsYXIudmVyc2lvbi5taW5vciA+IDQpIHtcbiAgICAgIGZvcm1hdENvZGVUb1JlZ2V4LnB1c2goe1xuICAgICAgICBrZXk6ICdMTExMJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5TVEFOREFMT05FTU9OVEguam9pbignfCcpLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5tb250aCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5TVEFOREFMT05FTU9OVEguaW5kZXhPZih2YWx1ZSk7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnTExMTCcpOyB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5pbml0KCk7XG5cbiAgZnVuY3Rpb24gZ2V0Rm9ybWF0Q29kZVRvUmVnZXgoa2V5KSB7XG4gICAgcmV0dXJuIGZpbHRlckZpbHRlcihmb3JtYXRDb2RlVG9SZWdleCwge2tleToga2V5fSwgdHJ1ZSlbMF07XG4gIH1cblxuICB0aGlzLmdldFBhcnNlciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZiA9IGdldEZvcm1hdENvZGVUb1JlZ2V4KGtleSk7XG4gICAgcmV0dXJuIGYgJiYgZi5hcHBseSB8fCBudWxsO1xuICB9O1xuXG4gIHRoaXMub3ZlcnJpZGVQYXJzZXIgPSBmdW5jdGlvbiAoa2V5LCBwYXJzZXIpIHtcbiAgICB2YXIgZiA9IGdldEZvcm1hdENvZGVUb1JlZ2V4KGtleSk7XG4gICAgaWYgKGYgJiYgYW5ndWxhci5pc0Z1bmN0aW9uKHBhcnNlcikpIHtcbiAgICAgIHRoaXMucGFyc2VycyA9IHt9O1xuICAgICAgZi5hcHBseSA9IHBhcnNlcjtcbiAgICB9XG4gIH0uYmluZCh0aGlzKTtcblxuICBmdW5jdGlvbiBjcmVhdGVQYXJzZXIoZm9ybWF0KSB7XG4gICAgdmFyIG1hcCA9IFtdLCByZWdleCA9IGZvcm1hdC5zcGxpdCgnJyk7XG5cbiAgICAvLyBjaGVjayBmb3IgbGl0ZXJhbCB2YWx1ZXNcbiAgICB2YXIgcXVvdGVJbmRleCA9IGZvcm1hdC5pbmRleE9mKCdcXCcnKTtcbiAgICBpZiAocXVvdGVJbmRleCA+IC0xKSB7XG4gICAgICB2YXIgaW5MaXRlcmFsID0gZmFsc2U7XG4gICAgICBmb3JtYXQgPSBmb3JtYXQuc3BsaXQoJycpO1xuICAgICAgZm9yICh2YXIgaSA9IHF1b3RlSW5kZXg7IGkgPCBmb3JtYXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGluTGl0ZXJhbCkge1xuICAgICAgICAgIGlmIChmb3JtYXRbaV0gPT09ICdcXCcnKSB7XG4gICAgICAgICAgICBpZiAoaSArIDEgPCBmb3JtYXQubGVuZ3RoICYmIGZvcm1hdFtpKzFdID09PSAnXFwnJykgeyAvLyBlc2NhcGVkIHNpbmdsZSBxdW90ZVxuICAgICAgICAgICAgICBmb3JtYXRbaSsxXSA9ICckJztcbiAgICAgICAgICAgICAgcmVnZXhbaSsxXSA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gZW5kIG9mIGxpdGVyYWxcbiAgICAgICAgICAgICAgcmVnZXhbaV0gPSAnJztcbiAgICAgICAgICAgICAgaW5MaXRlcmFsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvcm1hdFtpXSA9ICckJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZm9ybWF0W2ldID09PSAnXFwnJykgeyAvLyBzdGFydCBvZiBsaXRlcmFsXG4gICAgICAgICAgICBmb3JtYXRbaV0gPSAnJCc7XG4gICAgICAgICAgICByZWdleFtpXSA9ICcnO1xuICAgICAgICAgICAgaW5MaXRlcmFsID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9ybWF0ID0gZm9ybWF0LmpvaW4oJycpO1xuICAgIH1cblxuICAgIGFuZ3VsYXIuZm9yRWFjaChmb3JtYXRDb2RlVG9SZWdleCwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIGluZGV4ID0gZm9ybWF0LmluZGV4T2YoZGF0YS5rZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQuc3BsaXQoJycpO1xuXG4gICAgICAgIHJlZ2V4W2luZGV4XSA9ICcoJyArIGRhdGEucmVnZXggKyAnKSc7XG4gICAgICAgIGZvcm1hdFtpbmRleF0gPSAnJCc7IC8vIEN1c3RvbSBzeW1ib2wgdG8gZGVmaW5lIGNvbnN1bWVkIHBhcnQgb2YgZm9ybWF0XG4gICAgICAgIGZvciAodmFyIGkgPSBpbmRleCArIDEsIG4gPSBpbmRleCArIGRhdGEua2V5Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHJlZ2V4W2ldID0gJyc7XG4gICAgICAgICAgZm9ybWF0W2ldID0gJyQnO1xuICAgICAgICB9XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5qb2luKCcnKTtcblxuICAgICAgICBtYXAucHVzaCh7XG4gICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgIGtleTogZGF0YS5rZXksXG4gICAgICAgICAgYXBwbHk6IGRhdGEuYXBwbHksXG4gICAgICAgICAgbWF0Y2hlcjogZGF0YS5yZWdleFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICByZWdleDogbmV3IFJlZ0V4cCgnXicgKyByZWdleC5qb2luKCcnKSArICckJyksXG4gICAgICBtYXA6IG9yZGVyQnlGaWx0ZXIobWFwLCAnaW5kZXgnKVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVGb3JtYXR0ZXIoZm9ybWF0KSB7XG4gICAgdmFyIGZvcm1hdHRlcnMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGZvcm1hdHRlciwgbGl0ZXJhbElkeDtcbiAgICB3aGlsZSAoaSA8IGZvcm1hdC5sZW5ndGgpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKGxpdGVyYWxJZHgpKSB7XG4gICAgICAgIGlmIChmb3JtYXQuY2hhckF0KGkpID09PSAnXFwnJykge1xuICAgICAgICAgIGlmIChpICsgMSA+PSBmb3JtYXQubGVuZ3RoIHx8IGZvcm1hdC5jaGFyQXQoaSArIDEpICE9PSAnXFwnJykge1xuICAgICAgICAgICAgZm9ybWF0dGVycy5wdXNoKGNvbnN0cnVjdExpdGVyYWxGb3JtYXR0ZXIoZm9ybWF0LCBsaXRlcmFsSWR4LCBpKSk7XG4gICAgICAgICAgICBsaXRlcmFsSWR4ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gZm9ybWF0Lmxlbmd0aCkge1xuICAgICAgICAgIHdoaWxlIChsaXRlcmFsSWR4IDwgZm9ybWF0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZm9ybWF0dGVyID0gY29uc3RydWN0Rm9ybWF0dGVyRnJvbUlkeChmb3JtYXQsIGxpdGVyYWxJZHgpO1xuICAgICAgICAgICAgZm9ybWF0dGVycy5wdXNoKGZvcm1hdHRlcik7XG4gICAgICAgICAgICBsaXRlcmFsSWR4ID0gZm9ybWF0dGVyLmVuZElkeDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpKys7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9ybWF0LmNoYXJBdChpKSA9PT0gJ1xcJycpIHtcbiAgICAgICAgbGl0ZXJhbElkeCA9IGk7XG4gICAgICAgIGkrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGZvcm1hdHRlciA9IGNvbnN0cnVjdEZvcm1hdHRlckZyb21JZHgoZm9ybWF0LCBpKTtcblxuICAgICAgZm9ybWF0dGVycy5wdXNoKGZvcm1hdHRlci5wYXJzZXIpO1xuICAgICAgaSA9IGZvcm1hdHRlci5lbmRJZHg7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdHRlcnM7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdHJ1Y3RMaXRlcmFsRm9ybWF0dGVyKGZvcm1hdCwgbGl0ZXJhbElkeCwgZW5kSWR4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZvcm1hdC5zdWJzdHIobGl0ZXJhbElkeCArIDEsIGVuZElkeCAtIGxpdGVyYWxJZHggLSAxKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RydWN0Rm9ybWF0dGVyRnJvbUlkeChmb3JtYXQsIGkpIHtcbiAgICB2YXIgY3VycmVudFBvc1N0ciA9IGZvcm1hdC5zdWJzdHIoaSk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBmb3JtYXRDb2RlVG9SZWdleC5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKG5ldyBSZWdFeHAoJ14nICsgZm9ybWF0Q29kZVRvUmVnZXhbal0ua2V5KS50ZXN0KGN1cnJlbnRQb3NTdHIpKSB7XG4gICAgICAgIHZhciBkYXRhID0gZm9ybWF0Q29kZVRvUmVnZXhbal07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZW5kSWR4OiBpICsgZGF0YS5rZXkubGVuZ3RoLFxuICAgICAgICAgIHBhcnNlcjogZGF0YS5mb3JtYXR0ZXJcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZW5kSWR4OiBpICsgMSxcbiAgICAgIHBhcnNlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50UG9zU3RyLmNoYXJBdCgwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdGhpcy5maWx0ZXIgPSBmdW5jdGlvbihkYXRlLCBmb3JtYXQpIHtcbiAgICBpZiAoIWFuZ3VsYXIuaXNEYXRlKGRhdGUpIHx8IGlzTmFOKGRhdGUpIHx8ICFmb3JtYXQpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7XG5cbiAgICBpZiAoJGxvY2FsZS5pZCAhPT0gbG9jYWxlSWQpIHtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5mb3JtYXR0ZXJzW2Zvcm1hdF0pIHtcbiAgICAgIHRoaXMuZm9ybWF0dGVyc1tmb3JtYXRdID0gY3JlYXRlRm9ybWF0dGVyKGZvcm1hdCk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRlcnMgPSB0aGlzLmZvcm1hdHRlcnNbZm9ybWF0XTtcblxuICAgIHJldHVybiBmb3JtYXR0ZXJzLnJlZHVjZShmdW5jdGlvbihzdHIsIGZvcm1hdHRlcikge1xuICAgICAgcmV0dXJuIHN0ciArIGZvcm1hdHRlcihkYXRlKTtcbiAgICB9LCAnJyk7XG4gIH07XG5cbiAgdGhpcy5wYXJzZSA9IGZ1bmN0aW9uKGlucHV0LCBmb3JtYXQsIGJhc2VEYXRlKSB7XG4gICAgaWYgKCFhbmd1bGFyLmlzU3RyaW5nKGlucHV0KSB8fCAhZm9ybWF0KSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgZm9ybWF0ID0gJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTW2Zvcm1hdF0gfHwgZm9ybWF0O1xuICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKFNQRUNJQUxfQ0hBUkFDVEVSU19SRUdFWFAsICdcXFxcJCYnKTtcblxuICAgIGlmICgkbG9jYWxlLmlkICE9PSBsb2NhbGVJZCkge1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnBhcnNlcnNbZm9ybWF0XSkge1xuICAgICAgdGhpcy5wYXJzZXJzW2Zvcm1hdF0gPSBjcmVhdGVQYXJzZXIoZm9ybWF0LCAnYXBwbHknKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VyID0gdGhpcy5wYXJzZXJzW2Zvcm1hdF0sXG4gICAgICAgIHJlZ2V4ID0gcGFyc2VyLnJlZ2V4LFxuICAgICAgICBtYXAgPSBwYXJzZXIubWFwLFxuICAgICAgICByZXN1bHRzID0gaW5wdXQubWF0Y2gocmVnZXgpLFxuICAgICAgICB0ek9mZnNldCA9IGZhbHNlO1xuICAgIGlmIChyZXN1bHRzICYmIHJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICB2YXIgZmllbGRzLCBkdDtcbiAgICAgIGlmIChhbmd1bGFyLmlzRGF0ZShiYXNlRGF0ZSkgJiYgIWlzTmFOKGJhc2VEYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgICAgZmllbGRzID0ge1xuICAgICAgICAgIHllYXI6IGJhc2VEYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgbW9udGg6IGJhc2VEYXRlLmdldE1vbnRoKCksXG4gICAgICAgICAgZGF0ZTogYmFzZURhdGUuZ2V0RGF0ZSgpLFxuICAgICAgICAgIGhvdXJzOiBiYXNlRGF0ZS5nZXRIb3VycygpLFxuICAgICAgICAgIG1pbnV0ZXM6IGJhc2VEYXRlLmdldE1pbnV0ZXMoKSxcbiAgICAgICAgICBzZWNvbmRzOiBiYXNlRGF0ZS5nZXRTZWNvbmRzKCksXG4gICAgICAgICAgbWlsbGlzZWNvbmRzOiBiYXNlRGF0ZS5nZXRNaWxsaXNlY29uZHMoKVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGJhc2VEYXRlKSB7XG4gICAgICAgICAgJGxvZy53YXJuKCdkYXRlcGFyc2VyOicsICdiYXNlRGF0ZSBpcyBub3QgYSB2YWxpZCBkYXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgZmllbGRzID0geyB5ZWFyOiAxOTAwLCBtb250aDogMCwgZGF0ZTogMSwgaG91cnM6IDAsIG1pbnV0ZXM6IDAsIHNlY29uZHM6IDAsIG1pbGxpc2Vjb25kczogMCB9O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMSwgbiA9IHJlc3VsdHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHZhciBtYXBwZXIgPSBtYXBbaSAtIDFdO1xuICAgICAgICBpZiAobWFwcGVyLm1hdGNoZXIgPT09ICdaJykge1xuICAgICAgICAgIHR6T2Zmc2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXBwZXIuYXBwbHkpIHtcbiAgICAgICAgICBtYXBwZXIuYXBwbHkuY2FsbChmaWVsZHMsIHJlc3VsdHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBkYXRlc2V0dGVyID0gdHpPZmZzZXQgPyBEYXRlLnByb3RvdHlwZS5zZXRVVENGdWxsWWVhciA6XG4gICAgICAgIERhdGUucHJvdG90eXBlLnNldEZ1bGxZZWFyO1xuICAgICAgdmFyIHRpbWVzZXR0ZXIgPSB0ek9mZnNldCA/IERhdGUucHJvdG90eXBlLnNldFVUQ0hvdXJzIDpcbiAgICAgICAgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnM7XG5cbiAgICAgIGlmIChpc1ZhbGlkKGZpZWxkcy55ZWFyLCBmaWVsZHMubW9udGgsIGZpZWxkcy5kYXRlKSkge1xuICAgICAgICBpZiAoYW5ndWxhci5pc0RhdGUoYmFzZURhdGUpICYmICFpc05hTihiYXNlRGF0ZS5nZXRUaW1lKCkpICYmICF0ek9mZnNldCkge1xuICAgICAgICAgIGR0ID0gbmV3IERhdGUoYmFzZURhdGUpO1xuICAgICAgICAgIGRhdGVzZXR0ZXIuY2FsbChkdCwgZmllbGRzLnllYXIsIGZpZWxkcy5tb250aCwgZmllbGRzLmRhdGUpO1xuICAgICAgICAgIHRpbWVzZXR0ZXIuY2FsbChkdCwgZmllbGRzLmhvdXJzLCBmaWVsZHMubWludXRlcyxcbiAgICAgICAgICAgIGZpZWxkcy5zZWNvbmRzLCBmaWVsZHMubWlsbGlzZWNvbmRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkdCA9IG5ldyBEYXRlKDApO1xuICAgICAgICAgIGRhdGVzZXR0ZXIuY2FsbChkdCwgZmllbGRzLnllYXIsIGZpZWxkcy5tb250aCwgZmllbGRzLmRhdGUpO1xuICAgICAgICAgIHRpbWVzZXR0ZXIuY2FsbChkdCwgZmllbGRzLmhvdXJzIHx8IDAsIGZpZWxkcy5taW51dGVzIHx8IDAsXG4gICAgICAgICAgICBmaWVsZHMuc2Vjb25kcyB8fCAwLCBmaWVsZHMubWlsbGlzZWNvbmRzIHx8IDApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkdDtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ2hlY2sgaWYgZGF0ZSBpcyB2YWxpZCBmb3Igc3BlY2lmaWMgbW9udGggKGFuZCB5ZWFyIGZvciBGZWJydWFyeSkuXG4gIC8vIE1vbnRoOiAwID0gSmFuLCAxID0gRmViLCBldGNcbiAgZnVuY3Rpb24gaXNWYWxpZCh5ZWFyLCBtb250aCwgZGF0ZSkge1xuICAgIGlmIChkYXRlIDwgMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChtb250aCA9PT0gMSAmJiBkYXRlID4gMjgpIHtcbiAgICAgIHJldHVybiBkYXRlID09PSAyOSAmJiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCB8fCB5ZWFyICUgNDAwID09PSAwKTtcbiAgICB9XG5cbiAgICBpZiAobW9udGggPT09IDMgfHwgbW9udGggPT09IDUgfHwgbW9udGggPT09IDggfHwgbW9udGggPT09IDEwKSB7XG4gICAgICByZXR1cm4gZGF0ZSA8IDMxO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9JbnQoc3RyKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHN0ciwgMTApO1xuICB9XG5cbiAgdGhpcy50b1RpbWV6b25lID0gdG9UaW1lem9uZTtcbiAgdGhpcy5mcm9tVGltZXpvbmUgPSBmcm9tVGltZXpvbmU7XG4gIHRoaXMudGltZXpvbmVUb09mZnNldCA9IHRpbWV6b25lVG9PZmZzZXQ7XG4gIHRoaXMuYWRkRGF0ZU1pbnV0ZXMgPSBhZGREYXRlTWludXRlcztcbiAgdGhpcy5jb252ZXJ0VGltZXpvbmVUb0xvY2FsID0gY29udmVydFRpbWV6b25lVG9Mb2NhbDtcblxuICBmdW5jdGlvbiB0b1RpbWV6b25lKGRhdGUsIHRpbWV6b25lKSB7XG4gICAgcmV0dXJuIGRhdGUgJiYgdGltZXpvbmUgPyBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lKSA6IGRhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBmcm9tVGltZXpvbmUoZGF0ZSwgdGltZXpvbmUpIHtcbiAgICByZXR1cm4gZGF0ZSAmJiB0aW1lem9uZSA/IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwoZGF0ZSwgdGltZXpvbmUsIHRydWUpIDogZGF0ZTtcbiAgfVxuXG4gIC8vaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9ibG9iLzYyMmM0MjE2OTY5OWVjMDdmYzZkYWFhMTlmZTZkMjI0ZTVkMmY3MGUvc3JjL0FuZ3VsYXIuanMjTDEyMDdcbiAgZnVuY3Rpb24gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZmFsbGJhY2spIHtcbiAgICB0aW1lem9uZSA9IHRpbWV6b25lLnJlcGxhY2UoLzovZywgJycpO1xuICAgIHZhciByZXF1ZXN0ZWRUaW1lem9uZU9mZnNldCA9IERhdGUucGFyc2UoJ0phbiAwMSwgMTk3MCAwMDowMDowMCAnICsgdGltZXpvbmUpIC8gNjAwMDA7XG4gICAgcmV0dXJuIGlzTmFOKHJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0KSA/IGZhbGxiYWNrIDogcmVxdWVzdGVkVGltZXpvbmVPZmZzZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBhZGREYXRlTWludXRlcyhkYXRlLCBtaW51dGVzKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICBkYXRlLnNldE1pbnV0ZXMoZGF0ZS5nZXRNaW51dGVzKCkgKyBtaW51dGVzKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnZlcnRUaW1lem9uZVRvTG9jYWwoZGF0ZSwgdGltZXpvbmUsIHJldmVyc2UpIHtcbiAgICByZXZlcnNlID0gcmV2ZXJzZSA/IC0xIDogMTtcbiAgICB2YXIgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IHRpbWV6b25lVG9PZmZzZXQodGltZXpvbmUsIGRhdGVUaW1lem9uZU9mZnNldCk7XG4gICAgcmV0dXJuIGFkZERhdGVNaW51dGVzKGRhdGUsIHJldmVyc2UgKiAodGltZXpvbmVPZmZzZXQgLSBkYXRlVGltZXpvbmVPZmZzZXQpKTtcbiAgfVxufV0pO1xuXG4vLyBBdm9pZGluZyB1c2Ugb2YgbmctY2xhc3MgYXMgaXQgY3JlYXRlcyBhIGxvdCBvZiB3YXRjaGVycyB3aGVuIGEgY2xhc3MgaXMgdG8gYmUgYXBwbGllZCB0b1xuLy8gYXQgbW9zdCBvbmUgZWxlbWVudC5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuaXNDbGFzcycsIFtdKVxuLmRpcmVjdGl2ZSgndWliSXNDbGFzcycsIFtcbiAgICAgICAgICckYW5pbWF0ZScsXG5mdW5jdGlvbiAoJGFuaW1hdGUpIHtcbiAgLy8gICAgICAgICAgICAgICAgICAgIDExMTExMTExICAgICAgICAgIDIyMjIyMjIyXG4gIHZhciBPTl9SRUdFWFAgPSAvXlxccyooW1xcc1xcU10rPylcXHMrb25cXHMrKFtcXHNcXFNdKz8pXFxzKiQvO1xuICAvLyAgICAgICAgICAgICAgICAgICAgMTExMTExMTEgICAgICAgICAgIDIyMjIyMjIyXG4gIHZhciBJU19SRUdFWFAgPSAvXlxccyooW1xcc1xcU10rPylcXHMrZm9yXFxzKyhbXFxzXFxTXSs/KVxccyokLztcblxuICB2YXIgZGF0YVBlclRyYWNrZWQgPSB7fTtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29tcGlsZTogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykge1xuICAgICAgdmFyIGxpbmtlZFNjb3BlcyA9IFtdO1xuICAgICAgdmFyIGluc3RhbmNlcyA9IFtdO1xuICAgICAgdmFyIGV4cFRvRGF0YSA9IHt9O1xuICAgICAgdmFyIGxhc3RBY3RpdmF0ZWQgPSBudWxsO1xuICAgICAgdmFyIG9uRXhwTWF0Y2hlcyA9IHRBdHRycy51aWJJc0NsYXNzLm1hdGNoKE9OX1JFR0VYUCk7XG4gICAgICB2YXIgb25FeHAgPSBvbkV4cE1hdGNoZXNbMl07XG4gICAgICB2YXIgZXhwc1N0ciA9IG9uRXhwTWF0Y2hlc1sxXTtcbiAgICAgIHZhciBleHBzID0gZXhwc1N0ci5zcGxpdCgnLCcpO1xuXG4gICAgICByZXR1cm4gbGlua0ZuO1xuXG4gICAgICBmdW5jdGlvbiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIGxpbmtlZFNjb3Blcy5wdXNoKHNjb3BlKTtcbiAgICAgICAgaW5zdGFuY2VzLnB1c2goe1xuICAgICAgICAgIHNjb3BlOiBzY29wZSxcbiAgICAgICAgICBlbGVtZW50OiBlbGVtZW50XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGV4cHMuZm9yRWFjaChmdW5jdGlvbihleHAsIGspIHtcbiAgICAgICAgICBhZGRGb3JFeHAoZXhwLCBzY29wZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCByZW1vdmVTY29wZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFkZEZvckV4cChleHAsIHNjb3BlKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gZXhwLm1hdGNoKElTX1JFR0VYUCk7XG4gICAgICAgIHZhciBjbGF6eiA9IHNjb3BlLiRldmFsKG1hdGNoZXNbMV0pO1xuICAgICAgICB2YXIgY29tcGFyZVdpdGhFeHAgPSBtYXRjaGVzWzJdO1xuICAgICAgICB2YXIgZGF0YSA9IGV4cFRvRGF0YVtleHBdO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICB2YXIgd2F0Y2hGbiA9IGZ1bmN0aW9uKGNvbXBhcmVXaXRoVmFsKSB7XG4gICAgICAgICAgICB2YXIgbmV3QWN0aXZhdGVkID0gbnVsbDtcbiAgICAgICAgICAgIGluc3RhbmNlcy5zb21lKGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgIHZhciB0aGlzVmFsID0gaW5zdGFuY2Uuc2NvcGUuJGV2YWwob25FeHApO1xuICAgICAgICAgICAgICBpZiAodGhpc1ZhbCA9PT0gY29tcGFyZVdpdGhWYWwpIHtcbiAgICAgICAgICAgICAgICBuZXdBY3RpdmF0ZWQgPSBpbnN0YW5jZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZGF0YS5sYXN0QWN0aXZhdGVkICE9PSBuZXdBY3RpdmF0ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGRhdGEubGFzdEFjdGl2YXRlZCkge1xuICAgICAgICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKGRhdGEubGFzdEFjdGl2YXRlZC5lbGVtZW50LCBjbGF6eik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKG5ld0FjdGl2YXRlZCkge1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKG5ld0FjdGl2YXRlZC5lbGVtZW50LCBjbGF6eik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZGF0YS5sYXN0QWN0aXZhdGVkID0gbmV3QWN0aXZhdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgZXhwVG9EYXRhW2V4cF0gPSBkYXRhID0ge1xuICAgICAgICAgICAgbGFzdEFjdGl2YXRlZDogbnVsbCxcbiAgICAgICAgICAgIHNjb3BlOiBzY29wZSxcbiAgICAgICAgICAgIHdhdGNoRm46IHdhdGNoRm4sXG4gICAgICAgICAgICBjb21wYXJlV2l0aEV4cDogY29tcGFyZVdpdGhFeHAsXG4gICAgICAgICAgICB3YXRjaGVyOiBzY29wZS4kd2F0Y2goY29tcGFyZVdpdGhFeHAsIHdhdGNoRm4pXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLndhdGNoRm4oc2NvcGUuJGV2YWwoY29tcGFyZVdpdGhFeHApKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlU2NvcGUoZSkge1xuICAgICAgICB2YXIgcmVtb3ZlZFNjb3BlID0gZS50YXJnZXRTY29wZTtcbiAgICAgICAgdmFyIGluZGV4ID0gbGlua2VkU2NvcGVzLmluZGV4T2YocmVtb3ZlZFNjb3BlKTtcbiAgICAgICAgbGlua2VkU2NvcGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpZiAobGlua2VkU2NvcGVzLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBuZXdXYXRjaFNjb3BlID0gbGlua2VkU2NvcGVzWzBdO1xuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChleHBUb0RhdGEsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLnNjb3BlID09PSByZW1vdmVkU2NvcGUpIHtcbiAgICAgICAgICAgICAgZGF0YS53YXRjaGVyID0gbmV3V2F0Y2hTY29wZS4kd2F0Y2goZGF0YS5jb21wYXJlV2l0aEV4cCwgZGF0YS53YXRjaEZuKTtcbiAgICAgICAgICAgICAgZGF0YS5zY29wZSA9IG5ld1dhdGNoU2NvcGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhwVG9EYXRhID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRhdGVwaWNrZXInLCBbJ3VpLmJvb3RzdHJhcC5kYXRlcGFyc2VyJywgJ3VpLmJvb3RzdHJhcC5pc0NsYXNzJ10pXG5cbi52YWx1ZSgnJGRhdGVwaWNrZXJTdXBwcmVzc0Vycm9yJywgZmFsc2UpXG5cbi52YWx1ZSgnJGRhdGVwaWNrZXJMaXRlcmFsV2FybmluZycsIHRydWUpXG5cbi5jb25zdGFudCgndWliRGF0ZXBpY2tlckNvbmZpZycsIHtcbiAgZGF0ZXBpY2tlck1vZGU6ICdkYXknLFxuICBmb3JtYXREYXk6ICdkZCcsXG4gIGZvcm1hdE1vbnRoOiAnTU1NTScsXG4gIGZvcm1hdFllYXI6ICd5eXl5JyxcbiAgZm9ybWF0RGF5SGVhZGVyOiAnRUVFJyxcbiAgZm9ybWF0RGF5VGl0bGU6ICdNTU1NIHl5eXknLFxuICBmb3JtYXRNb250aFRpdGxlOiAneXl5eScsXG4gIG1heERhdGU6IG51bGwsXG4gIG1heE1vZGU6ICd5ZWFyJyxcbiAgbWluRGF0ZTogbnVsbCxcbiAgbWluTW9kZTogJ2RheScsXG4gIG1vbnRoQ29sdW1uczogMyxcbiAgbmdNb2RlbE9wdGlvbnM6IHt9LFxuICBzaG9ydGN1dFByb3BhZ2F0aW9uOiBmYWxzZSxcbiAgc2hvd1dlZWtzOiB0cnVlLFxuICB5ZWFyQ29sdW1uczogNSxcbiAgeWVhclJvd3M6IDRcbn0pXG5cbi5jb250cm9sbGVyKCdVaWJEYXRlcGlja2VyQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycycsICckcGFyc2UnLCAnJGludGVycG9sYXRlJywgJyRsb2NhbGUnLCAnJGxvZycsICdkYXRlRmlsdGVyJywgJ3VpYkRhdGVwaWNrZXJDb25maWcnLCAnJGRhdGVwaWNrZXJMaXRlcmFsV2FybmluZycsICckZGF0ZXBpY2tlclN1cHByZXNzRXJyb3InLCAndWliRGF0ZVBhcnNlcicsXG4gIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJHBhcnNlLCAkaW50ZXJwb2xhdGUsICRsb2NhbGUsICRsb2csIGRhdGVGaWx0ZXIsIGRhdGVwaWNrZXJDb25maWcsICRkYXRlcGlja2VyTGl0ZXJhbFdhcm5pbmcsICRkYXRlcGlja2VyU3VwcHJlc3NFcnJvciwgZGF0ZVBhcnNlcikge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICBuZ01vZGVsQ3RybCA9IHsgJHNldFZpZXdWYWx1ZTogYW5ndWxhci5ub29wIH0sIC8vIG51bGxNb2RlbEN0cmw7XG4gICAgICBuZ01vZGVsT3B0aW9ucyA9IHt9LFxuICAgICAgd2F0Y2hMaXN0ZW5lcnMgPSBbXTtcblxuICAkZWxlbWVudC5hZGRDbGFzcygndWliLWRhdGVwaWNrZXInKTtcbiAgJGF0dHJzLiRzZXQoJ3JvbGUnLCAnYXBwbGljYXRpb24nKTtcblxuICBpZiAoISRzY29wZS5kYXRlcGlja2VyT3B0aW9ucykge1xuICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgLy8gTW9kZXMgY2hhaW5cbiAgdGhpcy5tb2RlcyA9IFsnZGF5JywgJ21vbnRoJywgJ3llYXInXTtcblxuICBbXG4gICAgJ2N1c3RvbUNsYXNzJyxcbiAgICAnZGF0ZURpc2FibGVkJyxcbiAgICAnZGF0ZXBpY2tlck1vZGUnLFxuICAgICdmb3JtYXREYXknLFxuICAgICdmb3JtYXREYXlIZWFkZXInLFxuICAgICdmb3JtYXREYXlUaXRsZScsXG4gICAgJ2Zvcm1hdE1vbnRoJyxcbiAgICAnZm9ybWF0TW9udGhUaXRsZScsXG4gICAgJ2Zvcm1hdFllYXInLFxuICAgICdtYXhEYXRlJyxcbiAgICAnbWF4TW9kZScsXG4gICAgJ21pbkRhdGUnLFxuICAgICdtaW5Nb2RlJyxcbiAgICAnbW9udGhDb2x1bW5zJyxcbiAgICAnc2hvd1dlZWtzJyxcbiAgICAnc2hvcnRjdXRQcm9wYWdhdGlvbicsXG4gICAgJ3N0YXJ0aW5nRGF5JyxcbiAgICAneWVhckNvbHVtbnMnLFxuICAgICd5ZWFyUm93cydcbiAgXS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdjdXN0b21DbGFzcyc6XG4gICAgICBjYXNlICdkYXRlRGlzYWJsZWQnOlxuICAgICAgICAkc2NvcGVba2V5XSA9ICRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldIHx8IGFuZ3VsYXIubm9vcDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkYXRlcGlja2VyTW9kZSc6XG4gICAgICAgICRzY29wZS5kYXRlcGlja2VyTW9kZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSkgP1xuICAgICAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSA6IGRhdGVwaWNrZXJDb25maWcuZGF0ZXBpY2tlck1vZGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZm9ybWF0RGF5JzpcbiAgICAgIGNhc2UgJ2Zvcm1hdERheUhlYWRlcic6XG4gICAgICBjYXNlICdmb3JtYXREYXlUaXRsZSc6XG4gICAgICBjYXNlICdmb3JtYXRNb250aCc6XG4gICAgICBjYXNlICdmb3JtYXRNb250aFRpdGxlJzpcbiAgICAgIGNhc2UgJ2Zvcm1hdFllYXInOlxuICAgICAgICBzZWxmW2tleV0gPSBhbmd1bGFyLmlzRGVmaW5lZCgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSkgP1xuICAgICAgICAgICRpbnRlcnBvbGF0ZSgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSkoJHNjb3BlLiRwYXJlbnQpIDpcbiAgICAgICAgICBkYXRlcGlja2VyQ29uZmlnW2tleV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbW9udGhDb2x1bW5zJzpcbiAgICAgIGNhc2UgJ3Nob3dXZWVrcyc6XG4gICAgICBjYXNlICdzaG9ydGN1dFByb3BhZ2F0aW9uJzpcbiAgICAgIGNhc2UgJ3llYXJDb2x1bW5zJzpcbiAgICAgIGNhc2UgJ3llYXJSb3dzJzpcbiAgICAgICAgc2VsZltrZXldID0gYW5ndWxhci5pc0RlZmluZWQoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV0pID9cbiAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSA6IGRhdGVwaWNrZXJDb25maWdba2V5XTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzdGFydGluZ0RheSc6XG4gICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZCgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuc3RhcnRpbmdEYXkpKSB7XG4gICAgICAgICAgc2VsZi5zdGFydGluZ0RheSA9ICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5zdGFydGluZ0RheTtcbiAgICAgICAgfSBlbHNlIGlmIChhbmd1bGFyLmlzTnVtYmVyKGRhdGVwaWNrZXJDb25maWcuc3RhcnRpbmdEYXkpKSB7XG4gICAgICAgICAgc2VsZi5zdGFydGluZ0RheSA9IGRhdGVwaWNrZXJDb25maWcuc3RhcnRpbmdEYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5zdGFydGluZ0RheSA9ICgkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuRklSU1REQVlPRldFRUsgKyA4KSAlIDc7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21heERhdGUnOlxuICAgICAgY2FzZSAnbWluRGF0ZSc6XG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2RhdGVwaWNrZXJPcHRpb25zLicgKyBrZXksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RhdGUodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHNlbGZba2V5XSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKG5ldyBEYXRlKHZhbHVlKSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICgkZGF0ZXBpY2tlckxpdGVyYWxXYXJuaW5nKSB7XG4gICAgICAgICAgICAgICAgJGxvZy53YXJuKCdMaXRlcmFsIGRhdGUgc3VwcG9ydCBoYXMgYmVlbiBkZXByZWNhdGVkLCBwbGVhc2Ugc3dpdGNoIHRvIGRhdGUgb2JqZWN0IHVzYWdlJyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzZWxmW2tleV0gPSBuZXcgRGF0ZShkYXRlRmlsdGVyKHZhbHVlLCAnbWVkaXVtJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmW2tleV0gPSBkYXRlcGlja2VyQ29uZmlnW2tleV0gP1xuICAgICAgICAgICAgICBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShuZXcgRGF0ZShkYXRlcGlja2VyQ29uZmlnW2tleV0pLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpIDpcbiAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnJlZnJlc2hWaWV3KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWF4TW9kZSc6XG4gICAgICBjYXNlICdtaW5Nb2RlJzpcbiAgICAgICAgaWYgKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKSB7XG4gICAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHsgcmV0dXJuICRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldOyB9LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgc2VsZltrZXldID0gJHNjb3BlW2tleV0gPSBhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6ICRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ21pbk1vZGUnICYmIHNlbGYubW9kZXMuaW5kZXhPZigkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlck1vZGUpIDwgc2VsZi5tb2Rlcy5pbmRleE9mKHNlbGZba2V5XSkgfHxcbiAgICAgICAgICAgICAga2V5ID09PSAnbWF4TW9kZScgJiYgc2VsZi5tb2Rlcy5pbmRleE9mKCRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSkgPiBzZWxmLm1vZGVzLmluZGV4T2Yoc2VsZltrZXldKSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPSBzZWxmW2tleV07XG4gICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSA9IHNlbGZba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmW2tleV0gPSAkc2NvcGVba2V5XSA9IGRhdGVwaWNrZXJDb25maWdba2V5XSB8fCBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9KTtcblxuICAkc2NvcGUudW5pcXVlSWQgPSAnZGF0ZXBpY2tlci0nICsgJHNjb3BlLiRpZCArICctJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcblxuICAkc2NvcGUuZGlzYWJsZWQgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZGlzYWJsZWQpIHx8IGZhbHNlO1xuICBpZiAoYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLm5nRGlzYWJsZWQpKSB7XG4gICAgd2F0Y2hMaXN0ZW5lcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJGF0dHJzLm5nRGlzYWJsZWQsIGZ1bmN0aW9uKGRpc2FibGVkKSB7XG4gICAgICAkc2NvcGUuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgIHNlbGYucmVmcmVzaFZpZXcoKTtcbiAgICB9KSk7XG4gIH1cblxuICAkc2NvcGUuaXNBY3RpdmUgPSBmdW5jdGlvbihkYXRlT2JqZWN0KSB7XG4gICAgaWYgKHNlbGYuY29tcGFyZShkYXRlT2JqZWN0LmRhdGUsIHNlbGYuYWN0aXZlRGF0ZSkgPT09IDApIHtcbiAgICAgICRzY29wZS5hY3RpdmVEYXRlSWQgPSBkYXRlT2JqZWN0LnVpZDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmxfKSB7XG4gICAgbmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybF87XG4gICAgbmdNb2RlbE9wdGlvbnMgPSBleHRyYWN0T3B0aW9ucyhuZ01vZGVsQ3RybCk7XG5cbiAgICBpZiAoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmluaXREYXRlKSB7XG4gICAgICBzZWxmLmFjdGl2ZURhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZSgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuaW5pdERhdGUsIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSkgfHwgbmV3IERhdGUoKTtcbiAgICAgICRzY29wZS4kd2F0Y2goJ2RhdGVwaWNrZXJPcHRpb25zLmluaXREYXRlJywgZnVuY3Rpb24oaW5pdERhdGUpIHtcbiAgICAgICAgaWYgKGluaXREYXRlICYmIChuZ01vZGVsQ3RybC4kaXNFbXB0eShuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSkgfHwgbmdNb2RlbEN0cmwuJGludmFsaWQpKSB7XG4gICAgICAgICAgc2VsZi5hY3RpdmVEYXRlID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUoaW5pdERhdGUsIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG4gICAgICAgICAgc2VsZi5yZWZyZXNoVmlldygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5hY3RpdmVEYXRlID0gbmV3IERhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0ZSA9IG5nTW9kZWxDdHJsLiRtb2RlbFZhbHVlID8gbmV3IERhdGUobmdNb2RlbEN0cmwuJG1vZGVsVmFsdWUpIDogbmV3IERhdGUoKTtcbiAgICB0aGlzLmFjdGl2ZURhdGUgPSAhaXNOYU4oZGF0ZSkgP1xuICAgICAgZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUoZGF0ZSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKSA6XG4gICAgICBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShuZXcgRGF0ZSgpLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuXG4gICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5yZW5kZXIoKTtcbiAgICB9O1xuICB9O1xuXG4gIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpIHtcbiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSksXG4gICAgICAgICAgaXNWYWxpZCA9ICFpc05hTihkYXRlKTtcblxuICAgICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVEYXRlID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUoZGF0ZSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcbiAgICAgIH0gZWxzZSBpZiAoISRkYXRlcGlja2VyU3VwcHJlc3NFcnJvcikge1xuICAgICAgICAkbG9nLmVycm9yKCdEYXRlcGlja2VyIGRpcmVjdGl2ZTogXCJuZy1tb2RlbFwiIHZhbHVlIG11c3QgYmUgYSBEYXRlIG9iamVjdCcpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XG4gIH07XG5cbiAgdGhpcy5yZWZyZXNoVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgICRzY29wZS5zZWxlY3RlZER0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3JlZnJlc2hWaWV3KCk7XG4gICAgICBpZiAoJHNjb3BlLmFjdGl2ZUR0KSB7XG4gICAgICAgICRzY29wZS5hY3RpdmVEYXRlSWQgPSAkc2NvcGUuYWN0aXZlRHQudWlkO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGF0ZSA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPyBuZXcgRGF0ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSA6IG51bGw7XG4gICAgICBkYXRlID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUoZGF0ZSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZGF0ZURpc2FibGVkJywgIWRhdGUgfHxcbiAgICAgICAgdGhpcy5lbGVtZW50ICYmICF0aGlzLmlzRGlzYWJsZWQoZGF0ZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmNyZWF0ZURhdGVPYmplY3QgPSBmdW5jdGlvbihkYXRlLCBmb3JtYXQpIHtcbiAgICB2YXIgbW9kZWwgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID8gbmV3IERhdGUobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkgOiBudWxsO1xuICAgIG1vZGVsID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUobW9kZWwsIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG4gICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICB0b2RheSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKHRvZGF5LCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuICAgIHZhciB0aW1lID0gdGhpcy5jb21wYXJlKGRhdGUsIHRvZGF5KTtcbiAgICB2YXIgZHQgPSB7XG4gICAgICBkYXRlOiBkYXRlLFxuICAgICAgbGFiZWw6IGRhdGVQYXJzZXIuZmlsdGVyKGRhdGUsIGZvcm1hdCksXG4gICAgICBzZWxlY3RlZDogbW9kZWwgJiYgdGhpcy5jb21wYXJlKGRhdGUsIG1vZGVsKSA9PT0gMCxcbiAgICAgIGRpc2FibGVkOiB0aGlzLmlzRGlzYWJsZWQoZGF0ZSksXG4gICAgICBwYXN0OiB0aW1lIDwgMCxcbiAgICAgIGN1cnJlbnQ6IHRpbWUgPT09IDAsXG4gICAgICBmdXR1cmU6IHRpbWUgPiAwLFxuICAgICAgY3VzdG9tQ2xhc3M6IHRoaXMuY3VzdG9tQ2xhc3MoZGF0ZSkgfHwgbnVsbFxuICAgIH07XG5cbiAgICBpZiAobW9kZWwgJiYgdGhpcy5jb21wYXJlKGRhdGUsIG1vZGVsKSA9PT0gMCkge1xuICAgICAgJHNjb3BlLnNlbGVjdGVkRHQgPSBkdDtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5hY3RpdmVEYXRlICYmIHRoaXMuY29tcGFyZShkdC5kYXRlLCBzZWxmLmFjdGl2ZURhdGUpID09PSAwKSB7XG4gICAgICAkc2NvcGUuYWN0aXZlRHQgPSBkdDtcbiAgICB9XG5cbiAgICByZXR1cm4gZHQ7XG4gIH07XG5cbiAgdGhpcy5pc0Rpc2FibGVkID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiAkc2NvcGUuZGlzYWJsZWQgfHxcbiAgICAgIHRoaXMubWluRGF0ZSAmJiB0aGlzLmNvbXBhcmUoZGF0ZSwgdGhpcy5taW5EYXRlKSA8IDAgfHxcbiAgICAgIHRoaXMubWF4RGF0ZSAmJiB0aGlzLmNvbXBhcmUoZGF0ZSwgdGhpcy5tYXhEYXRlKSA+IDAgfHxcbiAgICAgICRzY29wZS5kYXRlRGlzYWJsZWQgJiYgJHNjb3BlLmRhdGVEaXNhYmxlZCh7ZGF0ZTogZGF0ZSwgbW9kZTogJHNjb3BlLmRhdGVwaWNrZXJNb2RlfSk7XG4gIH07XG5cbiAgdGhpcy5jdXN0b21DbGFzcyA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gJHNjb3BlLmN1c3RvbUNsYXNzKHtkYXRlOiBkYXRlLCBtb2RlOiAkc2NvcGUuZGF0ZXBpY2tlck1vZGV9KTtcbiAgfTtcblxuICAvLyBTcGxpdCBhcnJheSBpbnRvIHNtYWxsZXIgYXJyYXlzXG4gIHRoaXMuc3BsaXQgPSBmdW5jdGlvbihhcnIsIHNpemUpIHtcbiAgICB2YXIgYXJyYXlzID0gW107XG4gICAgd2hpbGUgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgICBhcnJheXMucHVzaChhcnIuc3BsaWNlKDAsIHNpemUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5cztcbiAgfTtcblxuICAkc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIGlmICgkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPT09IHNlbGYubWluTW9kZSkge1xuICAgICAgdmFyIGR0ID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA/IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKG5ldyBEYXRlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpIDogbmV3IERhdGUoMCwgMCwgMCwgMCwgMCwgMCwgMCk7XG4gICAgICBkdC5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xuICAgICAgZHQgPSBkYXRlUGFyc2VyLnRvVGltZXpvbmUoZHQsIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKGR0KTtcbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5hY3RpdmVEYXRlID0gZGF0ZTtcbiAgICAgIHNldE1vZGUoc2VsZi5tb2Rlc1tzZWxmLm1vZGVzLmluZGV4T2YoJHNjb3BlLmRhdGVwaWNrZXJNb2RlKSAtIDFdKTtcblxuICAgICAgJHNjb3BlLiRlbWl0KCd1aWI6ZGF0ZXBpY2tlci5tb2RlJyk7XG4gICAgfVxuXG4gICAgJHNjb3BlLiRicm9hZGNhc3QoJ3VpYjpkYXRlcGlja2VyLmZvY3VzJyk7XG4gIH07XG5cbiAgJHNjb3BlLm1vdmUgPSBmdW5jdGlvbihkaXJlY3Rpb24pIHtcbiAgICB2YXIgeWVhciA9IHNlbGYuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpICsgZGlyZWN0aW9uICogKHNlbGYuc3RlcC55ZWFycyB8fCAwKSxcbiAgICAgICAgbW9udGggPSBzZWxmLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSArIGRpcmVjdGlvbiAqIChzZWxmLnN0ZXAubW9udGhzIHx8IDApO1xuICAgIHNlbGYuYWN0aXZlRGF0ZS5zZXRGdWxsWWVhcih5ZWFyLCBtb250aCwgMSk7XG4gICAgc2VsZi5yZWZyZXNoVmlldygpO1xuICB9O1xuXG4gICRzY29wZS50b2dnbGVNb2RlID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgZGlyZWN0aW9uID0gZGlyZWN0aW9uIHx8IDE7XG5cbiAgICBpZiAoJHNjb3BlLmRhdGVwaWNrZXJNb2RlID09PSBzZWxmLm1heE1vZGUgJiYgZGlyZWN0aW9uID09PSAxIHx8XG4gICAgICAkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPT09IHNlbGYubWluTW9kZSAmJiBkaXJlY3Rpb24gPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0TW9kZShzZWxmLm1vZGVzW3NlbGYubW9kZXMuaW5kZXhPZigkc2NvcGUuZGF0ZXBpY2tlck1vZGUpICsgZGlyZWN0aW9uXSk7XG5cbiAgICAkc2NvcGUuJGVtaXQoJ3VpYjpkYXRlcGlja2VyLm1vZGUnKTtcbiAgfTtcblxuICAvLyBLZXkgZXZlbnQgbWFwcGVyXG4gICRzY29wZS5rZXlzID0geyAxMzogJ2VudGVyJywgMzI6ICdzcGFjZScsIDMzOiAncGFnZXVwJywgMzQ6ICdwYWdlZG93bicsIDM1OiAnZW5kJywgMzY6ICdob21lJywgMzc6ICdsZWZ0JywgMzg6ICd1cCcsIDM5OiAncmlnaHQnLCA0MDogJ2Rvd24nIH07XG5cbiAgdmFyIGZvY3VzRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZWxlbWVudFswXS5mb2N1cygpO1xuICB9O1xuXG4gIC8vIExpc3RlbiBmb3IgZm9jdXMgcmVxdWVzdHMgZnJvbSBwb3B1cCBkaXJlY3RpdmVcbiAgJHNjb3BlLiRvbigndWliOmRhdGVwaWNrZXIuZm9jdXMnLCBmb2N1c0VsZW1lbnQpO1xuXG4gICRzY29wZS5rZXlkb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgdmFyIGtleSA9ICRzY29wZS5rZXlzW2V2dC53aGljaF07XG5cbiAgICBpZiAoIWtleSB8fCBldnQuc2hpZnRLZXkgfHwgZXZ0LmFsdEtleSB8fCAkc2NvcGUuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoIXNlbGYuc2hvcnRjdXRQcm9wYWdhdGlvbikge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdlbnRlcicgfHwga2V5ID09PSAnc3BhY2UnKSB7XG4gICAgICBpZiAoc2VsZi5pc0Rpc2FibGVkKHNlbGYuYWN0aXZlRGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuOyAvLyBkbyBub3RoaW5nXG4gICAgICB9XG4gICAgICAkc2NvcGUuc2VsZWN0KHNlbGYuYWN0aXZlRGF0ZSk7XG4gICAgfSBlbHNlIGlmIChldnQuY3RybEtleSAmJiAoa2V5ID09PSAndXAnIHx8IGtleSA9PT0gJ2Rvd24nKSkge1xuICAgICAgJHNjb3BlLnRvZ2dsZU1vZGUoa2V5ID09PSAndXAnID8gMSA6IC0xKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5oYW5kbGVLZXlEb3duKGtleSwgZXZ0KTtcbiAgICAgIHNlbGYucmVmcmVzaFZpZXcoKTtcbiAgICB9XG4gIH07XG5cbiAgJGVsZW1lbnQub24oJ2tleWRvd24nLCBmdW5jdGlvbihldnQpIHtcbiAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLmtleWRvd24oZXZ0KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAvL0NsZWFyIGFsbCB3YXRjaCBsaXN0ZW5lcnMgb24gZGVzdHJveVxuICAgIHdoaWxlICh3YXRjaExpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgIHdhdGNoTGlzdGVuZXJzLnNoaWZ0KCkoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHNldE1vZGUobW9kZSkge1xuICAgICRzY29wZS5kYXRlcGlja2VyTW9kZSA9IG1vZGU7XG4gICAgJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVwaWNrZXJNb2RlID0gbW9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dHJhY3RPcHRpb25zKG5nTW9kZWxDdHJsKSB7XG4gICAgdmFyIG5nTW9kZWxPcHRpb25zO1xuXG4gICAgaWYgKGFuZ3VsYXIudmVyc2lvbi5taW5vciA8IDYpIHsgLy8gaW4gYW5ndWxhciA8IDEuNiAkb3B0aW9ucyBjb3VsZCBiZSBtaXNzaW5nXG4gICAgICAvLyBndWFyYW50ZWUgYSB2YWx1ZVxuICAgICAgbmdNb2RlbE9wdGlvbnMgPSBuZ01vZGVsQ3RybC4kb3B0aW9ucyB8fFxuICAgICAgICAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMubmdNb2RlbE9wdGlvbnMgfHxcbiAgICAgICAgZGF0ZXBpY2tlckNvbmZpZy5uZ01vZGVsT3B0aW9ucyB8fFxuICAgICAgICB7fTtcblxuICAgICAgLy8gbWltaWMgMS42KyBhcGlcbiAgICAgIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIG5nTW9kZWxPcHRpb25zW2tleV07XG4gICAgICB9O1xuICAgIH0gZWxzZSB7IC8vIGluIGFuZ3VsYXIgPj0xLjYgJG9wdGlvbnMgaXMgYWx3YXlzIHByZXNlbnRcbiAgICAgIC8vIG5nLW1vZGVsLW9wdGlvbnMgZGVmYXVsdHMgdGltZXpvbmUgdG8gbnVsbDsgZG9uJ3QgbGV0IGl0cyBwcmVjZWRlbmNlIHNxdWFzaCBhIG5vbi1udWxsIHZhbHVlXG4gICAgICB2YXIgdGltZXpvbmUgPSBuZ01vZGVsQ3RybC4kb3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykgfHxcbiAgICAgICAgKCRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5uZ01vZGVsT3B0aW9ucyA/ICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5uZ01vZGVsT3B0aW9ucy50aW1lem9uZSA6IG51bGwpIHx8XG4gICAgICAgIChkYXRlcGlja2VyQ29uZmlnLm5nTW9kZWxPcHRpb25zID8gZGF0ZXBpY2tlckNvbmZpZy5uZ01vZGVsT3B0aW9ucy50aW1lem9uZSA6IG51bGwpO1xuXG4gICAgICAvLyB2YWx1ZXMgcGFzc2VkIHRvIGNyZWF0ZUNoaWxkIG92ZXJyaWRlIGV4aXN0aW5nIHZhbHVlc1xuICAgICAgbmdNb2RlbE9wdGlvbnMgPSBuZ01vZGVsQ3RybC4kb3B0aW9ucyAvLyBzdGFydCB3aXRoIGEgTW9kZWxPcHRpb25zIGluc3RhbmNlXG4gICAgICAgIC5jcmVhdGVDaGlsZChkYXRlcGlja2VyQ29uZmlnLm5nTW9kZWxPcHRpb25zKSAvLyBsb3dlc3QgcHJlY2VkZW5jZVxuICAgICAgICAuY3JlYXRlQ2hpbGQoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLm5nTW9kZWxPcHRpb25zKVxuICAgICAgICAuY3JlYXRlQ2hpbGQobmdNb2RlbEN0cmwuJG9wdGlvbnMpIC8vIGhpZ2hlc3QgcHJlY2VkZW5jZVxuICAgICAgICAuY3JlYXRlQ2hpbGQoe3RpbWV6b25lOiB0aW1lem9uZX0pOyAvLyB0byBrZWVwIGZyb20gc3F1YXNoaW5nIGEgbm9uLW51bGwgdmFsdWVcbiAgICB9XG5cbiAgICByZXR1cm4gbmdNb2RlbE9wdGlvbnM7XG4gIH1cbn1dKVxuXG4uY29udHJvbGxlcignVWliRGF5cGlja2VyQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJ2RhdGVGaWx0ZXInLCBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsIGRhdGVGaWx0ZXIpIHtcbiAgdmFyIERBWVNfSU5fTU9OVEggPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG5cbiAgdGhpcy5zdGVwID0geyBtb250aHM6IDEgfTtcbiAgdGhpcy5lbGVtZW50ID0gJGVsZW1lbnQ7XG4gIGZ1bmN0aW9uIGdldERheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgcmV0dXJuIG1vbnRoID09PSAxICYmIHllYXIgJSA0ID09PSAwICYmXG4gICAgICAoeWVhciAlIDEwMCAhPT0gMCB8fCB5ZWFyICUgNDAwID09PSAwKSA/IDI5IDogREFZU19JTl9NT05USFttb250aF07XG4gIH1cblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihjdHJsKSB7XG4gICAgYW5ndWxhci5leHRlbmQoY3RybCwgdGhpcyk7XG4gICAgc2NvcGUuc2hvd1dlZWtzID0gY3RybC5zaG93V2Vla3M7XG4gICAgY3RybC5yZWZyZXNoVmlldygpO1xuICB9O1xuXG4gIHRoaXMuZ2V0RGF0ZXMgPSBmdW5jdGlvbihzdGFydERhdGUsIG4pIHtcbiAgICB2YXIgZGF0ZXMgPSBuZXcgQXJyYXkobiksIGN1cnJlbnQgPSBuZXcgRGF0ZShzdGFydERhdGUpLCBpID0gMCwgZGF0ZTtcbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGRhdGUgPSBuZXcgRGF0ZShjdXJyZW50KTtcbiAgICAgIGRhdGVzW2krK10gPSBkYXRlO1xuICAgICAgY3VycmVudC5zZXREYXRlKGN1cnJlbnQuZ2V0RGF0ZSgpICsgMSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlcztcbiAgfTtcblxuICB0aGlzLl9yZWZyZXNoVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ZWFyID0gdGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICBtb250aCA9IHRoaXMuYWN0aXZlRGF0ZS5nZXRNb250aCgpLFxuICAgICAgZmlyc3REYXlPZk1vbnRoID0gbmV3IERhdGUodGhpcy5hY3RpdmVEYXRlKTtcblxuICAgIGZpcnN0RGF5T2ZNb250aC5zZXRGdWxsWWVhcih5ZWFyLCBtb250aCwgMSk7XG5cbiAgICB2YXIgZGlmZmVyZW5jZSA9IHRoaXMuc3RhcnRpbmdEYXkgLSBmaXJzdERheU9mTW9udGguZ2V0RGF5KCksXG4gICAgICBudW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCA9IGRpZmZlcmVuY2UgPiAwID9cbiAgICAgICAgNyAtIGRpZmZlcmVuY2UgOiAtIGRpZmZlcmVuY2UsXG4gICAgICBmaXJzdERhdGUgPSBuZXcgRGF0ZShmaXJzdERheU9mTW9udGgpO1xuXG4gICAgaWYgKG51bURpc3BsYXllZEZyb21QcmV2aW91c01vbnRoID4gMCkge1xuICAgICAgZmlyc3REYXRlLnNldERhdGUoLW51bURpc3BsYXllZEZyb21QcmV2aW91c01vbnRoICsgMSk7XG4gICAgfVxuXG4gICAgLy8gNDIgaXMgdGhlIG51bWJlciBvZiBkYXlzIG9uIGEgc2l4LXdlZWsgY2FsZW5kYXJcbiAgICB2YXIgZGF5cyA9IHRoaXMuZ2V0RGF0ZXMoZmlyc3REYXRlLCA0Mik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0MjsgaSArKykge1xuICAgICAgZGF5c1tpXSA9IGFuZ3VsYXIuZXh0ZW5kKHRoaXMuY3JlYXRlRGF0ZU9iamVjdChkYXlzW2ldLCB0aGlzLmZvcm1hdERheSksIHtcbiAgICAgICAgc2Vjb25kYXJ5OiBkYXlzW2ldLmdldE1vbnRoKCkgIT09IG1vbnRoLFxuICAgICAgICB1aWQ6IHNjb3BlLnVuaXF1ZUlkICsgJy0nICsgaVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2NvcGUubGFiZWxzID0gbmV3IEFycmF5KDcpO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgNzsgaisrKSB7XG4gICAgICBzY29wZS5sYWJlbHNbal0gPSB7XG4gICAgICAgIGFiYnI6IGRhdGVGaWx0ZXIoZGF5c1tqXS5kYXRlLCB0aGlzLmZvcm1hdERheUhlYWRlciksXG4gICAgICAgIGZ1bGw6IGRhdGVGaWx0ZXIoZGF5c1tqXS5kYXRlLCAnRUVFRScpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHNjb3BlLnRpdGxlID0gZGF0ZUZpbHRlcih0aGlzLmFjdGl2ZURhdGUsIHRoaXMuZm9ybWF0RGF5VGl0bGUpO1xuICAgIHNjb3BlLnJvd3MgPSB0aGlzLnNwbGl0KGRheXMsIDcpO1xuXG4gICAgaWYgKHNjb3BlLnNob3dXZWVrcykge1xuICAgICAgc2NvcGUud2Vla051bWJlcnMgPSBbXTtcbiAgICAgIHZhciB0aHVyc2RheUluZGV4ID0gKDQgKyA3IC0gdGhpcy5zdGFydGluZ0RheSkgJSA3LFxuICAgICAgICAgIG51bVdlZWtzID0gc2NvcGUucm93cy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBjdXJXZWVrID0gMDsgY3VyV2VlayA8IG51bVdlZWtzOyBjdXJXZWVrKyspIHtcbiAgICAgICAgc2NvcGUud2Vla051bWJlcnMucHVzaChcbiAgICAgICAgICBnZXRJU084NjAxV2Vla051bWJlcihzY29wZS5yb3dzW2N1cldlZWtdW3RodXJzZGF5SW5kZXhdLmRhdGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5jb21wYXJlID0gZnVuY3Rpb24oZGF0ZTEsIGRhdGUyKSB7XG4gICAgdmFyIF9kYXRlMSA9IG5ldyBEYXRlKGRhdGUxLmdldEZ1bGxZZWFyKCksIGRhdGUxLmdldE1vbnRoKCksIGRhdGUxLmdldERhdGUoKSk7XG4gICAgdmFyIF9kYXRlMiA9IG5ldyBEYXRlKGRhdGUyLmdldEZ1bGxZZWFyKCksIGRhdGUyLmdldE1vbnRoKCksIGRhdGUyLmdldERhdGUoKSk7XG4gICAgX2RhdGUxLnNldEZ1bGxZZWFyKGRhdGUxLmdldEZ1bGxZZWFyKCkpO1xuICAgIF9kYXRlMi5zZXRGdWxsWWVhcihkYXRlMi5nZXRGdWxsWWVhcigpKTtcbiAgICByZXR1cm4gX2RhdGUxIC0gX2RhdGUyO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldElTTzg2MDFXZWVrTnVtYmVyKGRhdGUpIHtcbiAgICB2YXIgY2hlY2tEYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgY2hlY2tEYXRlLnNldERhdGUoY2hlY2tEYXRlLmdldERhdGUoKSArIDQgLSAoY2hlY2tEYXRlLmdldERheSgpIHx8IDcpKTsgLy8gVGh1cnNkYXlcbiAgICB2YXIgdGltZSA9IGNoZWNrRGF0ZS5nZXRUaW1lKCk7XG4gICAgY2hlY2tEYXRlLnNldE1vbnRoKDApOyAvLyBDb21wYXJlIHdpdGggSmFuIDFcbiAgICBjaGVja0RhdGUuc2V0RGF0ZSgxKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJvdW5kKCh0aW1lIC0gY2hlY2tEYXRlKSAvIDg2NDAwMDAwKSAvIDcpICsgMTtcbiAgfVxuXG4gIHRoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uKGtleSwgZXZ0KSB7XG4gICAgdmFyIGRhdGUgPSB0aGlzLmFjdGl2ZURhdGUuZ2V0RGF0ZSgpO1xuXG4gICAgaWYgKGtleSA9PT0gJ2xlZnQnKSB7XG4gICAgICBkYXRlID0gZGF0ZSAtIDE7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICd1cCcpIHtcbiAgICAgIGRhdGUgPSBkYXRlIC0gNztcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgZGF0ZSA9IGRhdGUgKyAxO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZG93bicpIHtcbiAgICAgIGRhdGUgPSBkYXRlICsgNztcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3BhZ2V1cCcgfHwga2V5ID09PSAncGFnZWRvd24nKSB7XG4gICAgICB2YXIgbW9udGggPSB0aGlzLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSArIChrZXkgPT09ICdwYWdldXAnID8gLSAxIDogMSk7XG4gICAgICB0aGlzLmFjdGl2ZURhdGUuc2V0TW9udGgobW9udGgsIDEpO1xuICAgICAgZGF0ZSA9IE1hdGgubWluKGdldERheXNJbk1vbnRoKHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpLCB0aGlzLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSksIGRhdGUpO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaG9tZScpIHtcbiAgICAgIGRhdGUgPSAxO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZW5kJykge1xuICAgICAgZGF0ZSA9IGdldERheXNJbk1vbnRoKHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpLCB0aGlzLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSk7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlRGF0ZS5zZXREYXRlKGRhdGUpO1xuICB9O1xufV0pXG5cbi5jb250cm9sbGVyKCdVaWJNb250aHBpY2tlckNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICdkYXRlRmlsdGVyJywgZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCBkYXRlRmlsdGVyKSB7XG4gIHRoaXMuc3RlcCA9IHsgeWVhcnM6IDEgfTtcbiAgdGhpcy5lbGVtZW50ID0gJGVsZW1lbnQ7XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oY3RybCkge1xuICAgIGFuZ3VsYXIuZXh0ZW5kKGN0cmwsIHRoaXMpO1xuICAgIGN0cmwucmVmcmVzaFZpZXcoKTtcbiAgfTtcblxuICB0aGlzLl9yZWZyZXNoVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBtb250aHMgPSBuZXcgQXJyYXkoMTIpLFxuICAgICAgICB5ZWFyID0gdGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgIGRhdGU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgIGRhdGUgPSBuZXcgRGF0ZSh0aGlzLmFjdGl2ZURhdGUpO1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyLCBpLCAxKTtcbiAgICAgIG1vbnRoc1tpXSA9IGFuZ3VsYXIuZXh0ZW5kKHRoaXMuY3JlYXRlRGF0ZU9iamVjdChkYXRlLCB0aGlzLmZvcm1hdE1vbnRoKSwge1xuICAgICAgICB1aWQ6IHNjb3BlLnVuaXF1ZUlkICsgJy0nICsgaVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2NvcGUudGl0bGUgPSBkYXRlRmlsdGVyKHRoaXMuYWN0aXZlRGF0ZSwgdGhpcy5mb3JtYXRNb250aFRpdGxlKTtcbiAgICBzY29wZS5yb3dzID0gdGhpcy5zcGxpdChtb250aHMsIHRoaXMubW9udGhDb2x1bW5zKTtcbiAgICBzY29wZS55ZWFySGVhZGVyQ29sc3BhbiA9IHRoaXMubW9udGhDb2x1bW5zID4gMyA/IHRoaXMubW9udGhDb2x1bW5zIC0gMiA6IDE7XG4gIH07XG5cbiAgdGhpcy5jb21wYXJlID0gZnVuY3Rpb24oZGF0ZTEsIGRhdGUyKSB7XG4gICAgdmFyIF9kYXRlMSA9IG5ldyBEYXRlKGRhdGUxLmdldEZ1bGxZZWFyKCksIGRhdGUxLmdldE1vbnRoKCkpO1xuICAgIHZhciBfZGF0ZTIgPSBuZXcgRGF0ZShkYXRlMi5nZXRGdWxsWWVhcigpLCBkYXRlMi5nZXRNb250aCgpKTtcbiAgICBfZGF0ZTEuc2V0RnVsbFllYXIoZGF0ZTEuZ2V0RnVsbFllYXIoKSk7XG4gICAgX2RhdGUyLnNldEZ1bGxZZWFyKGRhdGUyLmdldEZ1bGxZZWFyKCkpO1xuICAgIHJldHVybiBfZGF0ZTEgLSBfZGF0ZTI7XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24oa2V5LCBldnQpIHtcbiAgICB2YXIgZGF0ZSA9IHRoaXMuYWN0aXZlRGF0ZS5nZXRNb250aCgpO1xuXG4gICAgaWYgKGtleSA9PT0gJ2xlZnQnKSB7XG4gICAgICBkYXRlID0gZGF0ZSAtIDE7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICd1cCcpIHtcbiAgICAgIGRhdGUgPSBkYXRlIC0gdGhpcy5tb250aENvbHVtbnM7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdyaWdodCcpIHtcbiAgICAgIGRhdGUgPSBkYXRlICsgMTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2Rvd24nKSB7XG4gICAgICBkYXRlID0gZGF0ZSArIHRoaXMubW9udGhDb2x1bW5zO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncGFnZXVwJyB8fCBrZXkgPT09ICdwYWdlZG93bicpIHtcbiAgICAgIHZhciB5ZWFyID0gdGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCkgKyAoa2V5ID09PSAncGFnZXVwJyA/IC0gMSA6IDEpO1xuICAgICAgdGhpcy5hY3RpdmVEYXRlLnNldEZ1bGxZZWFyKHllYXIpO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaG9tZScpIHtcbiAgICAgIGRhdGUgPSAwO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZW5kJykge1xuICAgICAgZGF0ZSA9IDExO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZURhdGUuc2V0TW9udGgoZGF0ZSk7XG4gIH07XG59XSlcblxuLmNvbnRyb2xsZXIoJ1VpYlllYXJwaWNrZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnZGF0ZUZpbHRlcicsIGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgZGF0ZUZpbHRlcikge1xuICB2YXIgY29sdW1ucywgcmFuZ2U7XG4gIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50O1xuXG4gIGZ1bmN0aW9uIGdldFN0YXJ0aW5nWWVhcih5ZWFyKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KCh5ZWFyIC0gMSkgLyByYW5nZSwgMTApICogcmFuZ2UgKyAxO1xuICB9XG5cbiAgdGhpcy55ZWFycGlja2VySW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbHVtbnMgPSB0aGlzLnllYXJDb2x1bW5zO1xuICAgIHJhbmdlID0gdGhpcy55ZWFyUm93cyAqIGNvbHVtbnM7XG4gICAgdGhpcy5zdGVwID0geyB5ZWFyczogcmFuZ2UgfTtcbiAgfTtcblxuICB0aGlzLl9yZWZyZXNoVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ZWFycyA9IG5ldyBBcnJheShyYW5nZSksIGRhdGU7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgc3RhcnQgPSBnZXRTdGFydGluZ1llYXIodGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCkpOyBpIDwgcmFuZ2U7IGkrKykge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKHRoaXMuYWN0aXZlRGF0ZSk7XG4gICAgICBkYXRlLnNldEZ1bGxZZWFyKHN0YXJ0ICsgaSwgMCwgMSk7XG4gICAgICB5ZWFyc1tpXSA9IGFuZ3VsYXIuZXh0ZW5kKHRoaXMuY3JlYXRlRGF0ZU9iamVjdChkYXRlLCB0aGlzLmZvcm1hdFllYXIpLCB7XG4gICAgICAgIHVpZDogc2NvcGUudW5pcXVlSWQgKyAnLScgKyBpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzY29wZS50aXRsZSA9IFt5ZWFyc1swXS5sYWJlbCwgeWVhcnNbcmFuZ2UgLSAxXS5sYWJlbF0uam9pbignIC0gJyk7XG4gICAgc2NvcGUucm93cyA9IHRoaXMuc3BsaXQoeWVhcnMsIGNvbHVtbnMpO1xuICAgIHNjb3BlLmNvbHVtbnMgPSBjb2x1bW5zO1xuICB9O1xuXG4gIHRoaXMuY29tcGFyZSA9IGZ1bmN0aW9uKGRhdGUxLCBkYXRlMikge1xuICAgIHJldHVybiBkYXRlMS5nZXRGdWxsWWVhcigpIC0gZGF0ZTIuZ2V0RnVsbFllYXIoKTtcbiAgfTtcblxuICB0aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbihrZXksIGV2dCkge1xuICAgIHZhciBkYXRlID0gdGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgICBpZiAoa2V5ID09PSAnbGVmdCcpIHtcbiAgICAgIGRhdGUgPSBkYXRlIC0gMTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3VwJykge1xuICAgICAgZGF0ZSA9IGRhdGUgLSBjb2x1bW5zO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncmlnaHQnKSB7XG4gICAgICBkYXRlID0gZGF0ZSArIDE7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdkb3duJykge1xuICAgICAgZGF0ZSA9IGRhdGUgKyBjb2x1bW5zO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncGFnZXVwJyB8fCBrZXkgPT09ICdwYWdlZG93bicpIHtcbiAgICAgIGRhdGUgKz0gKGtleSA9PT0gJ3BhZ2V1cCcgPyAtIDEgOiAxKSAqIHJhbmdlO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaG9tZScpIHtcbiAgICAgIGRhdGUgPSBnZXRTdGFydGluZ1llYXIodGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCkpO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZW5kJykge1xuICAgICAgZGF0ZSA9IGdldFN0YXJ0aW5nWWVhcih0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSkgKyByYW5nZSAtIDE7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlRGF0ZS5zZXRGdWxsWWVhcihkYXRlKTtcbiAgfTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJEYXRlcGlja2VyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbCc7XG4gICAgfSxcbiAgICBzY29wZToge1xuICAgICAgZGF0ZXBpY2tlck9wdGlvbnM6ICc9PydcbiAgICB9LFxuICAgIHJlcXVpcmU6IFsndWliRGF0ZXBpY2tlcicsICdebmdNb2RlbCddLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1VpYkRhdGVwaWNrZXJDb250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICdkYXRlcGlja2VyJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgZGF0ZXBpY2tlckN0cmwgPSBjdHJsc1swXSwgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgZGF0ZXBpY2tlckN0cmwuaW5pdChuZ01vZGVsQ3RybCk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliRGF5cGlja2VyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RheS5odG1sJztcbiAgICB9LFxuICAgIHJlcXVpcmU6IFsnXnVpYkRhdGVwaWNrZXInLCAndWliRGF5cGlja2VyJ10sXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnVWliRGF5cGlja2VyQ29udHJvbGxlcicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIGRhdGVwaWNrZXJDdHJsID0gY3RybHNbMF0sXG4gICAgICAgIGRheXBpY2tlckN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgZGF5cGlja2VyQ3RybC5pbml0KGRhdGVwaWNrZXJDdHJsKTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJNb250aHBpY2tlcicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9tb250aC5odG1sJztcbiAgICB9LFxuICAgIHJlcXVpcmU6IFsnXnVpYkRhdGVwaWNrZXInLCAndWliTW9udGhwaWNrZXInXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJNb250aHBpY2tlckNvbnRyb2xsZXInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciBkYXRlcGlja2VyQ3RybCA9IGN0cmxzWzBdLFxuICAgICAgICBtb250aHBpY2tlckN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgbW9udGhwaWNrZXJDdHJsLmluaXQoZGF0ZXBpY2tlckN0cmwpO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlllYXJwaWNrZXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2RhdGVwaWNrZXIveWVhci5odG1sJztcbiAgICB9LFxuICAgIHJlcXVpcmU6IFsnXnVpYkRhdGVwaWNrZXInLCAndWliWWVhcnBpY2tlciddLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1VpYlllYXJwaWNrZXJDb250cm9sbGVyJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgY3RybCA9IGN0cmxzWzBdO1xuICAgICAgYW5ndWxhci5leHRlbmQoY3RybCwgY3RybHNbMV0pO1xuICAgICAgY3RybC55ZWFycGlja2VySW5pdCgpO1xuXG4gICAgICBjdHJsLnJlZnJlc2hWaWV3KCk7XG4gICAgfVxuICB9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucG9zaXRpb24nLCBbXSlcblxuLyoqXG4gKiBBIHNldCBvZiB1dGlsaXR5IG1ldGhvZHMgZm9yIHdvcmtpbmcgd2l0aCB0aGUgRE9NLlxuICogSXQgaXMgbWVhbnQgdG8gYmUgdXNlZCB3aGVyZSB3ZSBuZWVkIHRvIGFic29sdXRlLXBvc2l0aW9uIGVsZW1lbnRzIGluXG4gKiByZWxhdGlvbiB0byBhbm90aGVyIGVsZW1lbnQgKHRoaXMgaXMgdGhlIGNhc2UgZm9yIHRvb2x0aXBzLCBwb3BvdmVycyxcbiAqIHR5cGVhaGVhZCBzdWdnZXN0aW9ucyBldGMuKS5cbiAqL1xuICAuZmFjdG9yeSgnJHVpYlBvc2l0aW9uJywgWyckZG9jdW1lbnQnLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRkb2N1bWVudCwgJHdpbmRvdykge1xuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgc2Nyb2xsYmFyV2lkdGgoKSBmdW5jdGlvbiB0byBjYWNoZSBzY3JvbGxiYXIncyB3aWR0aC5cbiAgICAgKiBEbyBub3QgYWNjZXNzIHRoaXMgdmFyaWFibGUgZGlyZWN0bHksIHVzZSBzY3JvbGxiYXJXaWR0aCgpIGluc3RlYWQuXG4gICAgICovXG4gICAgdmFyIFNDUk9MTEJBUl9XSURUSDtcbiAgICAvKipcbiAgICAgKiBzY3JvbGxiYXIgb24gYm9keSBhbmQgaHRtbCBlbGVtZW50IGluIElFIGFuZCBFZGdlIG92ZXJsYXlcbiAgICAgKiBjb250ZW50IGFuZCBzaG91bGQgYmUgY29uc2lkZXJlZCAwIHdpZHRoLlxuICAgICAqL1xuICAgIHZhciBCT0RZX1NDUk9MTEJBUl9XSURUSDtcbiAgICB2YXIgT1ZFUkZMT1dfUkVHRVggPSB7XG4gICAgICBub3JtYWw6IC8oYXV0b3xzY3JvbGwpLyxcbiAgICAgIGhpZGRlbjogLyhhdXRvfHNjcm9sbHxoaWRkZW4pL1xuICAgIH07XG4gICAgdmFyIFBMQUNFTUVOVF9SRUdFWCA9IHtcbiAgICAgIGF1dG86IC9cXHM/YXV0bz9cXHM/L2ksXG4gICAgICBwcmltYXJ5OiAvXih0b3B8Ym90dG9tfGxlZnR8cmlnaHQpJC8sXG4gICAgICBzZWNvbmRhcnk6IC9eKHRvcHxib3R0b218bGVmdHxyaWdodHxjZW50ZXIpJC8sXG4gICAgICB2ZXJ0aWNhbDogL14odG9wfGJvdHRvbSkkL1xuICAgIH07XG4gICAgdmFyIEJPRFlfUkVHRVggPSAvKEhUTUx8Qk9EWSkvO1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyBhIHJhdyBET00gZWxlbWVudCBmcm9tIGEgalF1ZXJ5L2pRTGl0ZSBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSBlbGVtZW50IHRvIGNvbnZlcnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2VsZW1lbnR9IEEgSFRNTCBlbGVtZW50LlxuICAgICAgICovXG4gICAgICBnZXRSYXdOb2RlOiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgIHJldHVybiBlbGVtLm5vZGVOYW1lID8gZWxlbSA6IGVsZW1bMF0gfHwgZWxlbTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgYSBwYXJzZWQgbnVtYmVyIGZvciBhIHN0eWxlIHByb3BlcnR5LiAgU3RyaXBzXG4gICAgICAgKiB1bml0cyBhbmQgY2FzdHMgaW52YWxpZCBudW1iZXJzIHRvIDAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIHN0eWxlIHZhbHVlIHRvIHBhcnNlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IEEgdmFsaWQgbnVtYmVyLlxuICAgICAgICovXG4gICAgICBwYXJzZVN0eWxlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICByZXR1cm4gaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgOiAwO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyB0aGUgY2xvc2VzdCBwb3NpdGlvbmVkIGFuY2VzdG9yLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgb2ZmZXN0IHBhcmVudCBmb3IuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2VsZW1lbnR9IFRoZSBjbG9zZXN0IHBvc2l0aW9uZWQgYW5jZXN0b3IuXG4gICAgICAgKi9cbiAgICAgIG9mZnNldFBhcmVudDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuXG4gICAgICAgIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgICAgIGZ1bmN0aW9uIGlzU3RhdGljUG9zaXRpb25lZChlbCkge1xuICAgICAgICAgIHJldHVybiAoJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5wb3NpdGlvbiB8fCAnc3RhdGljJykgPT09ICdzdGF0aWMnO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQgJiYgaXNTdGF0aWNQb3NpdGlvbmVkKG9mZnNldFBhcmVudCkpIHtcbiAgICAgICAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyB0aGUgc2Nyb2xsYmFyIHdpZHRoLCBjb25jZXB0IGZyb20gVFdCUyBtZWFzdXJlU2Nyb2xsYmFyKClcbiAgICAgICAqIGZ1bmN0aW9uIGluIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9qcy9tb2RhbC5qc1xuICAgICAgICogSW4gSUUgYW5kIEVkZ2UsIHNjb2xsYmFyIG9uIGJvZHkgYW5kIGh0bWwgZWxlbWVudCBvdmVybGF5IGFuZCBzaG91bGRcbiAgICAgICAqIHJldHVybiBhIHdpZHRoIG9mIDAuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge251bWJlcn0gVGhlIHdpZHRoIG9mIHRoZSBicm93c2VyIHNjb2xsYmFyLlxuICAgICAgICovXG4gICAgICBzY3JvbGxiYXJXaWR0aDogZnVuY3Rpb24oaXNCb2R5KSB7XG4gICAgICAgIGlmIChpc0JvZHkpIHtcbiAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChCT0RZX1NDUk9MTEJBUl9XSURUSCkpIHtcbiAgICAgICAgICAgIHZhciBib2R5RWxlbSA9ICRkb2N1bWVudC5maW5kKCdib2R5Jyk7XG4gICAgICAgICAgICBib2R5RWxlbS5hZGRDbGFzcygndWliLXBvc2l0aW9uLWJvZHktc2Nyb2xsYmFyLW1lYXN1cmUnKTtcbiAgICAgICAgICAgIEJPRFlfU0NST0xMQkFSX1dJRFRIID0gJHdpbmRvdy5pbm5lcldpZHRoIC0gYm9keUVsZW1bMF0uY2xpZW50V2lkdGg7XG4gICAgICAgICAgICBCT0RZX1NDUk9MTEJBUl9XSURUSCA9IGlzRmluaXRlKEJPRFlfU0NST0xMQkFSX1dJRFRIKSA/IEJPRFlfU0NST0xMQkFSX1dJRFRIIDogMDtcbiAgICAgICAgICAgIGJvZHlFbGVtLnJlbW92ZUNsYXNzKCd1aWItcG9zaXRpb24tYm9keS1zY3JvbGxiYXItbWVhc3VyZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gQk9EWV9TQ1JPTExCQVJfV0lEVEg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChTQ1JPTExCQVJfV0lEVEgpKSB7XG4gICAgICAgICAgdmFyIHNjcm9sbEVsZW0gPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXYgY2xhc3M9XCJ1aWItcG9zaXRpb24tc2Nyb2xsYmFyLW1lYXN1cmVcIj48L2Rpdj4nKTtcbiAgICAgICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLmFwcGVuZChzY3JvbGxFbGVtKTtcbiAgICAgICAgICBTQ1JPTExCQVJfV0lEVEggPSBzY3JvbGxFbGVtWzBdLm9mZnNldFdpZHRoIC0gc2Nyb2xsRWxlbVswXS5jbGllbnRXaWR0aDtcbiAgICAgICAgICBTQ1JPTExCQVJfV0lEVEggPSBpc0Zpbml0ZShTQ1JPTExCQVJfV0lEVEgpID8gU0NST0xMQkFSX1dJRFRIIDogMDtcbiAgICAgICAgICBzY3JvbGxFbGVtLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNDUk9MTEJBUl9XSURUSDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgdGhlIHBhZGRpbmcgcmVxdWlyZWQgb24gYW4gZWxlbWVudCB0byByZXBsYWNlIHRoZSBzY3JvbGxiYXIuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICogICA8dWw+XG4gICAgICAgKiAgICAgPGxpPioqc2Nyb2xsYmFyV2lkdGgqKjogdGhlIHdpZHRoIG9mIHRoZSBzY3JvbGxiYXI8L2xpPlxuICAgICAgICogICAgIDxsaT4qKndpZHRoT3ZlcmZsb3cqKjogd2hldGhlciB0aGUgdGhlIHdpZHRoIGlzIG92ZXJmbG93aW5nPC9saT5cbiAgICAgICAqICAgICA8bGk+KipyaWdodCoqOiB0aGUgYW1vdW50IG9mIHJpZ2h0IHBhZGRpbmcgb24gdGhlIGVsZW1lbnQgbmVlZGVkIHRvIHJlcGxhY2UgdGhlIHNjcm9sbGJhcjwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqcmlnaHRPcmlnaW5hbCoqOiB0aGUgYW1vdW50IG9mIHJpZ2h0IHBhZGRpbmcgY3VycmVudGx5IG9uIHRoZSBlbGVtZW50PC9saT5cbiAgICAgICAqICAgICA8bGk+KipoZWlnaHRPdmVyZmxvdyoqOiB3aGV0aGVyIHRoZSB0aGUgaGVpZ2h0IGlzIG92ZXJmbG93aW5nPC9saT5cbiAgICAgICAqICAgICA8bGk+Kipib3R0b20qKjogdGhlIGFtb3VudCBvZiBib3R0b20gcGFkZGluZyBvbiB0aGUgZWxlbWVudCBuZWVkZWQgdG8gcmVwbGFjZSB0aGUgc2Nyb2xsYmFyPC9saT5cbiAgICAgICAqICAgICA8bGk+Kipib3R0b21PcmlnaW5hbCoqOiB0aGUgYW1vdW50IG9mIGJvdHRvbSBwYWRkaW5nIGN1cnJlbnRseSBvbiB0aGUgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgIDwvdWw+XG4gICAgICAgKi9cbiAgICAgIHNjcm9sbGJhclBhZGRpbmc6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgZWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShlbGVtKTtcblxuICAgICAgICB2YXIgZWxlbVN0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuICAgICAgICB2YXIgcGFkZGluZ1JpZ2h0ID0gdGhpcy5wYXJzZVN0eWxlKGVsZW1TdHlsZS5wYWRkaW5nUmlnaHQpO1xuICAgICAgICB2YXIgcGFkZGluZ0JvdHRvbSA9IHRoaXMucGFyc2VTdHlsZShlbGVtU3R5bGUucGFkZGluZ0JvdHRvbSk7XG4gICAgICAgIHZhciBzY3JvbGxQYXJlbnQgPSB0aGlzLnNjcm9sbFBhcmVudChlbGVtLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHRoaXMuc2Nyb2xsYmFyV2lkdGgoQk9EWV9SRUdFWC50ZXN0KHNjcm9sbFBhcmVudC50YWdOYW1lKSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzY3JvbGxiYXJXaWR0aDogc2Nyb2xsYmFyV2lkdGgsXG4gICAgICAgICAgd2lkdGhPdmVyZmxvdzogc2Nyb2xsUGFyZW50LnNjcm9sbFdpZHRoID4gc2Nyb2xsUGFyZW50LmNsaWVudFdpZHRoLFxuICAgICAgICAgIHJpZ2h0OiBwYWRkaW5nUmlnaHQgKyBzY3JvbGxiYXJXaWR0aCxcbiAgICAgICAgICBvcmlnaW5hbFJpZ2h0OiBwYWRkaW5nUmlnaHQsXG4gICAgICAgICAgaGVpZ2h0T3ZlcmZsb3c6IHNjcm9sbFBhcmVudC5zY3JvbGxIZWlnaHQgPiBzY3JvbGxQYXJlbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgIGJvdHRvbTogcGFkZGluZ0JvdHRvbSArIHNjcm9sbGJhcldpZHRoLFxuICAgICAgICAgIG9yaWdpbmFsQm90dG9tOiBwYWRkaW5nQm90dG9tXG4gICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBDaGVja3MgdG8gc2VlIGlmIHRoZSBlbGVtZW50IGlzIHNjcm9sbGFibGUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtIC0gVGhlIGVsZW1lbnQgdG8gY2hlY2suXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW5jbHVkZUhpZGRlbj1mYWxzZV0gLSBTaG91bGQgc2Nyb2xsIHN0eWxlIG9mICdoaWRkZW4nIGJlIGNvbnNpZGVyZWQsXG4gICAgICAgKiAgIGRlZmF1bHQgaXMgZmFsc2UuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgc2Nyb2xsYWJsZS5cbiAgICAgICAqL1xuICAgICAgaXNTY3JvbGxhYmxlOiBmdW5jdGlvbihlbGVtLCBpbmNsdWRlSGlkZGVuKSB7XG4gICAgICAgIGVsZW0gPSB0aGlzLmdldFJhd05vZGUoZWxlbSk7XG5cbiAgICAgICAgdmFyIG92ZXJmbG93UmVnZXggPSBpbmNsdWRlSGlkZGVuID8gT1ZFUkZMT1dfUkVHRVguaGlkZGVuIDogT1ZFUkZMT1dfUkVHRVgubm9ybWFsO1xuICAgICAgICB2YXIgZWxlbVN0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuICAgICAgICByZXR1cm4gb3ZlcmZsb3dSZWdleC50ZXN0KGVsZW1TdHlsZS5vdmVyZmxvdyArIGVsZW1TdHlsZS5vdmVyZmxvd1kgKyBlbGVtU3R5bGUub3ZlcmZsb3dYKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgdGhlIGNsb3Nlc3Qgc2Nyb2xsYWJsZSBhbmNlc3Rvci5cbiAgICAgICAqIEEgcG9ydCBvZiB0aGUgalF1ZXJ5IFVJIHNjcm9sbFBhcmVudCBtZXRob2Q6XG4gICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS11aS9ibG9iL21hc3Rlci91aS9zY3JvbGwtcGFyZW50LmpzXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtIC0gVGhlIGVsZW1lbnQgdG8gZmluZCB0aGUgc2Nyb2xsIHBhcmVudCBvZi5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbmNsdWRlSGlkZGVuPWZhbHNlXSAtIFNob3VsZCBzY3JvbGwgc3R5bGUgb2YgJ2hpZGRlbicgYmUgY29uc2lkZXJlZCxcbiAgICAgICAqICAgZGVmYXVsdCBpcyBmYWxzZS5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbmNsdWRlU2VsZj1mYWxzZV0gLSBTaG91bGQgdGhlIGVsZW1lbnQgYmVpbmcgcGFzc2VkIGJlXG4gICAgICAgKiBpbmNsdWRlZCBpbiB0aGUgc2Nyb2xsYWJsZSBsbG9rdXAuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2VsZW1lbnR9IEEgSFRNTCBlbGVtZW50LlxuICAgICAgICovXG4gICAgICBzY3JvbGxQYXJlbnQ6IGZ1bmN0aW9uKGVsZW0sIGluY2x1ZGVIaWRkZW4sIGluY2x1ZGVTZWxmKSB7XG4gICAgICAgIGVsZW0gPSB0aGlzLmdldFJhd05vZGUoZWxlbSk7XG5cbiAgICAgICAgdmFyIG92ZXJmbG93UmVnZXggPSBpbmNsdWRlSGlkZGVuID8gT1ZFUkZMT1dfUkVHRVguaGlkZGVuIDogT1ZFUkZMT1dfUkVHRVgubm9ybWFsO1xuICAgICAgICB2YXIgZG9jdW1lbnRFbCA9ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBlbGVtU3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XG4gICAgICAgIGlmIChpbmNsdWRlU2VsZiAmJiBvdmVyZmxvd1JlZ2V4LnRlc3QoZWxlbVN0eWxlLm92ZXJmbG93ICsgZWxlbVN0eWxlLm92ZXJmbG93WSArIGVsZW1TdHlsZS5vdmVyZmxvd1gpKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGV4Y2x1ZGVTdGF0aWMgPSBlbGVtU3R5bGUucG9zaXRpb24gPT09ICdhYnNvbHV0ZSc7XG4gICAgICAgIHZhciBzY3JvbGxQYXJlbnQgPSBlbGVtLnBhcmVudEVsZW1lbnQgfHwgZG9jdW1lbnRFbDtcblxuICAgICAgICBpZiAoc2Nyb2xsUGFyZW50ID09PSBkb2N1bWVudEVsIHx8IGVsZW1TdHlsZS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgICAgIHJldHVybiBkb2N1bWVudEVsO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKHNjcm9sbFBhcmVudC5wYXJlbnRFbGVtZW50ICYmIHNjcm9sbFBhcmVudCAhPT0gZG9jdW1lbnRFbCkge1xuICAgICAgICAgIHZhciBzcFN0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHNjcm9sbFBhcmVudCk7XG4gICAgICAgICAgaWYgKGV4Y2x1ZGVTdGF0aWMgJiYgc3BTdHlsZS5wb3NpdGlvbiAhPT0gJ3N0YXRpYycpIHtcbiAgICAgICAgICAgIGV4Y2x1ZGVTdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWV4Y2x1ZGVTdGF0aWMgJiYgb3ZlcmZsb3dSZWdleC50ZXN0KHNwU3R5bGUub3ZlcmZsb3cgKyBzcFN0eWxlLm92ZXJmbG93WSArIHNwU3R5bGUub3ZlcmZsb3dYKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNjcm9sbFBhcmVudCA9IHNjcm9sbFBhcmVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNjcm9sbFBhcmVudDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgcmVhZC1vbmx5IGVxdWl2YWxlbnQgb2YgalF1ZXJ5J3MgcG9zaXRpb24gZnVuY3Rpb246XG4gICAgICAgKiBodHRwOi8vYXBpLmpxdWVyeS5jb20vcG9zaXRpb24vIC0gZGlzdGFuY2UgdG8gY2xvc2VzdCBwb3NpdGlvbmVkXG4gICAgICAgKiBhbmNlc3Rvci4gIERvZXMgbm90IGFjY291bnQgZm9yIG1hcmdpbnMgYnkgZGVmYXVsdCBsaWtlIGpRdWVyeSBwb3NpdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW0gLSBUaGUgZWxlbWVudCB0byBjYWNsdWxhdGUgdGhlIHBvc2l0aW9uIG9uLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2luY2x1ZGVNYXJnaW5zPWZhbHNlXSAtIFNob3VsZCBtYXJnaW5zIGJlIGFjY291bnRlZFxuICAgICAgICogZm9yLCBkZWZhdWx0IGlzIGZhbHNlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqICAgPHVsPlxuICAgICAgICogICAgIDxsaT4qKndpZHRoKio6IHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqaGVpZ2h0Kio6IHRoZSBoZWlnaHQgb2YgdGhlIGVsZW1lbnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKnRvcCoqOiBkaXN0YW5jZSB0byB0b3AgZWRnZSBvZiBvZmZzZXQgcGFyZW50PC9saT5cbiAgICAgICAqICAgICA8bGk+KipsZWZ0Kio6IGRpc3RhbmNlIHRvIGxlZnQgZWRnZSBvZiBvZmZzZXQgcGFyZW50PC9saT5cbiAgICAgICAqICAgPC91bD5cbiAgICAgICAqL1xuICAgICAgcG9zaXRpb246IGZ1bmN0aW9uKGVsZW0sIGluY2x1ZGVNYWdpbnMpIHtcbiAgICAgICAgZWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShlbGVtKTtcblxuICAgICAgICB2YXIgZWxlbU9mZnNldCA9IHRoaXMub2Zmc2V0KGVsZW0pO1xuICAgICAgICBpZiAoaW5jbHVkZU1hZ2lucykge1xuICAgICAgICAgIHZhciBlbGVtU3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XG4gICAgICAgICAgZWxlbU9mZnNldC50b3AgLT0gdGhpcy5wYXJzZVN0eWxlKGVsZW1TdHlsZS5tYXJnaW5Ub3ApO1xuICAgICAgICAgIGVsZW1PZmZzZXQubGVmdCAtPSB0aGlzLnBhcnNlU3R5bGUoZWxlbVN0eWxlLm1hcmdpbkxlZnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudChlbGVtKTtcbiAgICAgICAgdmFyIHBhcmVudE9mZnNldCA9IHt0b3A6IDAsIGxlZnQ6IDB9O1xuXG4gICAgICAgIGlmIChwYXJlbnQgIT09ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICBwYXJlbnRPZmZzZXQgPSB0aGlzLm9mZnNldChwYXJlbnQpO1xuICAgICAgICAgIHBhcmVudE9mZnNldC50b3AgKz0gcGFyZW50LmNsaWVudFRvcCAtIHBhcmVudC5zY3JvbGxUb3A7XG4gICAgICAgICAgcGFyZW50T2Zmc2V0LmxlZnQgKz0gcGFyZW50LmNsaWVudExlZnQgLSBwYXJlbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IE1hdGgucm91bmQoYW5ndWxhci5pc051bWJlcihlbGVtT2Zmc2V0LndpZHRoKSA/IGVsZW1PZmZzZXQud2lkdGggOiBlbGVtLm9mZnNldFdpZHRoKSxcbiAgICAgICAgICBoZWlnaHQ6IE1hdGgucm91bmQoYW5ndWxhci5pc051bWJlcihlbGVtT2Zmc2V0LmhlaWdodCkgPyBlbGVtT2Zmc2V0LmhlaWdodCA6IGVsZW0ub2Zmc2V0SGVpZ2h0KSxcbiAgICAgICAgICB0b3A6IE1hdGgucm91bmQoZWxlbU9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wKSxcbiAgICAgICAgICBsZWZ0OiBNYXRoLnJvdW5kKGVsZW1PZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0KVxuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyByZWFkLW9ubHkgZXF1aXZhbGVudCBvZiBqUXVlcnkncyBvZmZzZXQgZnVuY3Rpb246XG4gICAgICAgKiBodHRwOi8vYXBpLmpxdWVyeS5jb20vb2Zmc2V0LyAtIGRpc3RhbmNlIHRvIHZpZXdwb3J0LiAgRG9lc1xuICAgICAgICogbm90IGFjY291bnQgZm9yIGJvcmRlcnMsIG1hcmdpbnMsIG9yIHBhZGRpbmcgb24gdGhlIGJvZHlcbiAgICAgICAqIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtIC0gVGhlIGVsZW1lbnQgdG8gY2FsY3VsYXRlIHRoZSBvZmZzZXQgb24uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICogICA8dWw+XG4gICAgICAgKiAgICAgPGxpPioqd2lkdGgqKjogdGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50PC9saT5cbiAgICAgICAqICAgICA8bGk+KipoZWlnaHQqKjogdGhlIGhlaWdodCBvZiB0aGUgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqdG9wKio6IGRpc3RhbmNlIHRvIHRvcCBlZGdlIG9mIHZpZXdwb3J0PC9saT5cbiAgICAgICAqICAgICA8bGk+KipyaWdodCoqOiBkaXN0YW5jZSB0byBib3R0b20gZWRnZSBvZiB2aWV3cG9ydDwvbGk+XG4gICAgICAgKiAgIDwvdWw+XG4gICAgICAgKi9cbiAgICAgIG9mZnNldDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuXG4gICAgICAgIHZhciBlbGVtQkNSID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB3aWR0aDogTWF0aC5yb3VuZChhbmd1bGFyLmlzTnVtYmVyKGVsZW1CQ1Iud2lkdGgpID8gZWxlbUJDUi53aWR0aCA6IGVsZW0ub2Zmc2V0V2lkdGgpLFxuICAgICAgICAgIGhlaWdodDogTWF0aC5yb3VuZChhbmd1bGFyLmlzTnVtYmVyKGVsZW1CQ1IuaGVpZ2h0KSA/IGVsZW1CQ1IuaGVpZ2h0IDogZWxlbS5vZmZzZXRIZWlnaHQpLFxuICAgICAgICAgIHRvcDogTWF0aC5yb3VuZChlbGVtQkNSLnRvcCArICgkd2luZG93LnBhZ2VZT2Zmc2V0IHx8ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSksXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChlbGVtQkNSLmxlZnQgKyAoJHdpbmRvdy5wYWdlWE9mZnNldCB8fCAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQpKVxuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyBvZmZzZXQgZGlzdGFuY2UgdG8gdGhlIGNsb3Nlc3Qgc2Nyb2xsYWJsZSBhbmNlc3RvclxuICAgICAgICogb3Igdmlld3BvcnQuICBBY2NvdW50cyBmb3IgYm9yZGVyIGFuZCBzY3JvbGxiYXIgd2lkdGguXG4gICAgICAgKlxuICAgICAgICogUmlnaHQgYW5kIGJvdHRvbSBkaW1lbnNpb25zIHJlcHJlc2VudCB0aGUgZGlzdGFuY2UgdG8gdGhlXG4gICAgICAgKiByZXNwZWN0aXZlIGVkZ2Ugb2YgdGhlIHZpZXdwb3J0IGVsZW1lbnQuICBJZiB0aGUgZWxlbWVudFxuICAgICAgICogZWRnZSBleHRlbmRzIGJleW9uZCB0aGUgdmlld3BvcnQsIGEgbmVnYXRpdmUgdmFsdWUgd2lsbCBiZVxuICAgICAgICogcmVwb3J0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtIC0gVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSB2aWV3cG9ydCBvZmZzZXQgZm9yLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW3VzZURvY3VtZW50PWZhbHNlXSAtIFNob3VsZCB0aGUgdmlld3BvcnQgYmUgdGhlIGRvY3VtZW50IGVsZW1lbnQgaW5zdGVhZFxuICAgICAgICogb2YgdGhlIGZpcnN0IHNjcm9sbGFibGUgZWxlbWVudCwgZGVmYXVsdCBpcyBmYWxzZS5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbmNsdWRlUGFkZGluZz10cnVlXSAtIFNob3VsZCB0aGUgcGFkZGluZyBvbiB0aGUgb2Zmc2V0IHBhcmVudCBlbGVtZW50XG4gICAgICAgKiBiZSBhY2NvdW50ZWQgZm9yLCBkZWZhdWx0IGlzIHRydWUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICogICA8dWw+XG4gICAgICAgKiAgICAgPGxpPioqdG9wKio6IGRpc3RhbmNlIHRvIHRoZSB0b3AgY29udGVudCBlZGdlIG9mIHZpZXdwb3J0IGVsZW1lbnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKmJvdHRvbSoqOiBkaXN0YW5jZSB0byB0aGUgYm90dG9tIGNvbnRlbnQgZWRnZSBvZiB2aWV3cG9ydCBlbGVtZW50PC9saT5cbiAgICAgICAqICAgICA8bGk+KipsZWZ0Kio6IGRpc3RhbmNlIHRvIHRoZSBsZWZ0IGNvbnRlbnQgZWRnZSBvZiB2aWV3cG9ydCBlbGVtZW50PC9saT5cbiAgICAgICAqICAgICA8bGk+KipyaWdodCoqOiBkaXN0YW5jZSB0byB0aGUgcmlnaHQgY29udGVudCBlZGdlIG9mIHZpZXdwb3J0IGVsZW1lbnQ8L2xpPlxuICAgICAgICogICA8L3VsPlxuICAgICAgICovXG4gICAgICB2aWV3cG9ydE9mZnNldDogZnVuY3Rpb24oZWxlbSwgdXNlRG9jdW1lbnQsIGluY2x1ZGVQYWRkaW5nKSB7XG4gICAgICAgIGVsZW0gPSB0aGlzLmdldFJhd05vZGUoZWxlbSk7XG4gICAgICAgIGluY2x1ZGVQYWRkaW5nID0gaW5jbHVkZVBhZGRpbmcgIT09IGZhbHNlID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgIHZhciBlbGVtQkNSID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIG9mZnNldEJDUiA9IHt0b3A6IDAsIGxlZnQ6IDAsIGJvdHRvbTogMCwgcmlnaHQ6IDB9O1xuXG4gICAgICAgIHZhciBvZmZzZXRQYXJlbnQgPSB1c2VEb2N1bWVudCA/ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQgOiB0aGlzLnNjcm9sbFBhcmVudChlbGVtKTtcbiAgICAgICAgdmFyIG9mZnNldFBhcmVudEJDUiA9IG9mZnNldFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBvZmZzZXRCQ1IudG9wID0gb2Zmc2V0UGFyZW50QkNSLnRvcCArIG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgICAgIG9mZnNldEJDUi5sZWZ0ID0gb2Zmc2V0UGFyZW50QkNSLmxlZnQgKyBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcbiAgICAgICAgaWYgKG9mZnNldFBhcmVudCA9PT0gJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgIG9mZnNldEJDUi50b3AgKz0gJHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgICBvZmZzZXRCQ1IubGVmdCArPSAkd2luZG93LnBhZ2VYT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZnNldEJDUi5ib3R0b20gPSBvZmZzZXRCQ1IudG9wICsgb2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgb2Zmc2V0QkNSLnJpZ2h0ID0gb2Zmc2V0QkNSLmxlZnQgKyBvZmZzZXRQYXJlbnQuY2xpZW50V2lkdGg7XG5cbiAgICAgICAgaWYgKGluY2x1ZGVQYWRkaW5nKSB7XG4gICAgICAgICAgdmFyIG9mZnNldFBhcmVudFN0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCk7XG4gICAgICAgICAgb2Zmc2V0QkNSLnRvcCArPSB0aGlzLnBhcnNlU3R5bGUob2Zmc2V0UGFyZW50U3R5bGUucGFkZGluZ1RvcCk7XG4gICAgICAgICAgb2Zmc2V0QkNSLmJvdHRvbSAtPSB0aGlzLnBhcnNlU3R5bGUob2Zmc2V0UGFyZW50U3R5bGUucGFkZGluZ0JvdHRvbSk7XG4gICAgICAgICAgb2Zmc2V0QkNSLmxlZnQgKz0gdGhpcy5wYXJzZVN0eWxlKG9mZnNldFBhcmVudFN0eWxlLnBhZGRpbmdMZWZ0KTtcbiAgICAgICAgICBvZmZzZXRCQ1IucmlnaHQgLT0gdGhpcy5wYXJzZVN0eWxlKG9mZnNldFBhcmVudFN0eWxlLnBhZGRpbmdSaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRvcDogTWF0aC5yb3VuZChlbGVtQkNSLnRvcCAtIG9mZnNldEJDUi50b3ApLFxuICAgICAgICAgIGJvdHRvbTogTWF0aC5yb3VuZChvZmZzZXRCQ1IuYm90dG9tIC0gZWxlbUJDUi5ib3R0b20pLFxuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQoZWxlbUJDUi5sZWZ0IC0gb2Zmc2V0QkNSLmxlZnQpLFxuICAgICAgICAgIHJpZ2h0OiBNYXRoLnJvdW5kKG9mZnNldEJDUi5yaWdodCAtIGVsZW1CQ1IucmlnaHQpXG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIGFuIGFycmF5IG9mIHBsYWNlbWVudCB2YWx1ZXMgcGFyc2VkIGZyb20gYSBwbGFjZW1lbnQgc3RyaW5nLlxuICAgICAgICogQWxvbmcgd2l0aCB0aGUgJ2F1dG8nIGluZGljYXRvciwgc3VwcG9ydGVkIHBsYWNlbWVudCBzdHJpbmdzIGFyZTpcbiAgICAgICAqICAgPHVsPlxuICAgICAgICogICAgIDxsaT50b3A6IGVsZW1lbnQgb24gdG9wLCBob3Jpem9udGFsbHkgY2VudGVyZWQgb24gaG9zdCBlbGVtZW50LjwvbGk+XG4gICAgICAgKiAgICAgPGxpPnRvcC1sZWZ0OiBlbGVtZW50IG9uIHRvcCwgbGVmdCBlZGdlIGFsaWduZWQgd2l0aCBob3N0IGVsZW1lbnQgbGVmdCBlZGdlLjwvbGk+XG4gICAgICAgKiAgICAgPGxpPnRvcC1yaWdodDogZWxlbWVudCBvbiB0b3AsIGxlcmlnaHRmdCBlZGdlIGFsaWduZWQgd2l0aCBob3N0IGVsZW1lbnQgcmlnaHQgZWRnZS48L2xpPlxuICAgICAgICogICAgIDxsaT5ib3R0b206IGVsZW1lbnQgb24gYm90dG9tLCBob3Jpem9udGFsbHkgY2VudGVyZWQgb24gaG9zdCBlbGVtZW50LjwvbGk+XG4gICAgICAgKiAgICAgPGxpPmJvdHRvbS1sZWZ0OiBlbGVtZW50IG9uIGJvdHRvbSwgbGVmdCBlZGdlIGFsaWduZWQgd2l0aCBob3N0IGVsZW1lbnQgbGVmdCBlZGdlLjwvbGk+XG4gICAgICAgKiAgICAgPGxpPmJvdHRvbS1yaWdodDogZWxlbWVudCBvbiBib3R0b20sIHJpZ2h0IGVkZ2UgYWxpZ25lZCB3aXRoIGhvc3QgZWxlbWVudCByaWdodCBlZGdlLjwvbGk+XG4gICAgICAgKiAgICAgPGxpPmxlZnQ6IGVsZW1lbnQgb24gbGVmdCwgdmVydGljYWxseSBjZW50ZXJlZCBvbiBob3N0IGVsZW1lbnQuPC9saT5cbiAgICAgICAqICAgICA8bGk+bGVmdC10b3A6IGVsZW1lbnQgb24gbGVmdCwgdG9wIGVkZ2UgYWxpZ25lZCB3aXRoIGhvc3QgZWxlbWVudCB0b3AgZWRnZS48L2xpPlxuICAgICAgICogICAgIDxsaT5sZWZ0LWJvdHRvbTogZWxlbWVudCBvbiBsZWZ0LCBib3R0b20gZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IGJvdHRvbSBlZGdlLjwvbGk+XG4gICAgICAgKiAgICAgPGxpPnJpZ2h0OiBlbGVtZW50IG9uIHJpZ2h0LCB2ZXJ0aWNhbGx5IGNlbnRlcmVkIG9uIGhvc3QgZWxlbWVudC48L2xpPlxuICAgICAgICogICAgIDxsaT5yaWdodC10b3A6IGVsZW1lbnQgb24gcmlnaHQsIHRvcCBlZGdlIGFsaWduZWQgd2l0aCBob3N0IGVsZW1lbnQgdG9wIGVkZ2UuPC9saT5cbiAgICAgICAqICAgICA8bGk+cmlnaHQtYm90dG9tOiBlbGVtZW50IG9uIHJpZ2h0LCBib3R0b20gZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IGJvdHRvbSBlZGdlLjwvbGk+XG4gICAgICAgKiAgIDwvdWw+XG4gICAgICAgKiBBIHBsYWNlbWVudCBzdHJpbmcgd2l0aCBhbiAnYXV0bycgaW5kaWNhdG9yIGlzIGV4cGVjdGVkIHRvIGJlXG4gICAgICAgKiBzcGFjZSBzZXBhcmF0ZWQgZnJvbSB0aGUgcGxhY2VtZW50LCBpLmU6ICdhdXRvIGJvdHRvbS1sZWZ0JyAgSWZcbiAgICAgICAqIHRoZSBwcmltYXJ5IGFuZCBzZWNvbmRhcnkgcGxhY2VtZW50IHZhbHVlcyBkbyBub3QgbWF0Y2ggJ3RvcCxcbiAgICAgICAqIGJvdHRvbSwgbGVmdCwgcmlnaHQnIHRoZW4gJ3RvcCcgd2lsbCBiZSB0aGUgcHJpbWFyeSBwbGFjZW1lbnQgYW5kXG4gICAgICAgKiAnY2VudGVyJyB3aWxsIGJlIHRoZSBzZWNvbmRhcnkgcGxhY2VtZW50LiAgSWYgJ2F1dG8nIGlzIHBhc3NlZCwgdHJ1ZVxuICAgICAgICogd2lsbCBiZSByZXR1cm5lZCBhcyB0aGUgM3JkIHZhbHVlIG9mIHRoZSBhcnJheS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGxhY2VtZW50IC0gVGhlIHBsYWNlbWVudCBzdHJpbmcgdG8gcGFyc2UuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2FycmF5fSBBbiBhcnJheSB3aXRoIHRoZSBmb2xsb3dpbmcgdmFsdWVzXG4gICAgICAgKiA8dWw+XG4gICAgICAgKiAgIDxsaT4qKlswXSoqOiBUaGUgcHJpbWFyeSBwbGFjZW1lbnQuPC9saT5cbiAgICAgICAqICAgPGxpPioqWzFdKio6IFRoZSBzZWNvbmRhcnkgcGxhY2VtZW50LjwvbGk+XG4gICAgICAgKiAgIDxsaT4qKlsyXSoqOiBJZiBhdXRvIGlzIHBhc3NlZDogdHJ1ZSwgZWxzZSB1bmRlZmluZWQuPC9saT5cbiAgICAgICAqIDwvdWw+XG4gICAgICAgKi9cbiAgICAgIHBhcnNlUGxhY2VtZW50OiBmdW5jdGlvbihwbGFjZW1lbnQpIHtcbiAgICAgICAgdmFyIGF1dG9QbGFjZSA9IFBMQUNFTUVOVF9SRUdFWC5hdXRvLnRlc3QocGxhY2VtZW50KTtcbiAgICAgICAgaWYgKGF1dG9QbGFjZSkge1xuICAgICAgICAgIHBsYWNlbWVudCA9IHBsYWNlbWVudC5yZXBsYWNlKFBMQUNFTUVOVF9SRUdFWC5hdXRvLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKTtcblxuICAgICAgICBwbGFjZW1lbnRbMF0gPSBwbGFjZW1lbnRbMF0gfHwgJ3RvcCc7XG4gICAgICAgIGlmICghUExBQ0VNRU5UX1JFR0VYLnByaW1hcnkudGVzdChwbGFjZW1lbnRbMF0pKSB7XG4gICAgICAgICAgcGxhY2VtZW50WzBdID0gJ3RvcCc7XG4gICAgICAgIH1cblxuICAgICAgICBwbGFjZW1lbnRbMV0gPSBwbGFjZW1lbnRbMV0gfHwgJ2NlbnRlcic7XG4gICAgICAgIGlmICghUExBQ0VNRU5UX1JFR0VYLnNlY29uZGFyeS50ZXN0KHBsYWNlbWVudFsxXSkpIHtcbiAgICAgICAgICBwbGFjZW1lbnRbMV0gPSAnY2VudGVyJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgICBwbGFjZW1lbnRbMl0gPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBsYWNlbWVudFsyXSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgY29vcmRpbmF0ZXMgZm9yIGFuIGVsZW1lbnQgdG8gYmUgcG9zaXRpb25lZCByZWxhdGl2ZSB0b1xuICAgICAgICogYW5vdGhlciBlbGVtZW50LiAgUGFzc2luZyAnYXV0bycgYXMgcGFydCBvZiB0aGUgcGxhY2VtZW50IHBhcmFtZXRlclxuICAgICAgICogd2lsbCBlbmFibGUgc21hcnQgcGxhY2VtZW50IC0gd2hlcmUgdGhlIGVsZW1lbnQgZml0cy4gaS5lOlxuICAgICAgICogJ2F1dG8gbGVmdC10b3AnIHdpbGwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlIGlzIGVub3VnaCBzcGFjZSB0byB0aGUgbGVmdFxuICAgICAgICogb2YgdGhlIGhvc3RFbGVtIHRvIGZpdCB0aGUgdGFyZ2V0RWxlbSwgaWYgbm90IHBsYWNlIHJpZ2h0IChzYW1lIGZvciBzZWNvbmRhcnlcbiAgICAgICAqIHRvcCBwbGFjZW1lbnQpLiAgQXZhaWxhYmxlIHNwYWNlIGlzIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIHZpZXdwb3J0T2Zmc2V0XG4gICAgICAgKiBmdW5jdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGhvc3RFbGVtIC0gVGhlIGVsZW1lbnQgdG8gcG9zaXRpb24gYWdhaW5zdC5cbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gdGFyZ2V0RWxlbSAtIFRoZSBlbGVtZW50IHRvIHBvc2l0aW9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBbcGxhY2VtZW50PXRvcF0gLSBUaGUgcGxhY2VtZW50IGZvciB0aGUgdGFyZ2V0RWxlbSxcbiAgICAgICAqICAgZGVmYXVsdCBpcyAndG9wJy4gJ2NlbnRlcicgaXMgYXNzdW1lZCBhcyBzZWNvbmRhcnkgcGxhY2VtZW50IGZvclxuICAgICAgICogICAndG9wJywgJ2xlZnQnLCAncmlnaHQnLCBhbmQgJ2JvdHRvbScgcGxhY2VtZW50cy4gIEF2YWlsYWJsZSBwbGFjZW1lbnRzIGFyZTpcbiAgICAgICAqICAgPHVsPlxuICAgICAgICogICAgIDxsaT50b3A8L2xpPlxuICAgICAgICogICAgIDxsaT50b3AtcmlnaHQ8L2xpPlxuICAgICAgICogICAgIDxsaT50b3AtbGVmdDwvbGk+XG4gICAgICAgKiAgICAgPGxpPmJvdHRvbTwvbGk+XG4gICAgICAgKiAgICAgPGxpPmJvdHRvbS1sZWZ0PC9saT5cbiAgICAgICAqICAgICA8bGk+Ym90dG9tLXJpZ2h0PC9saT5cbiAgICAgICAqICAgICA8bGk+bGVmdDwvbGk+XG4gICAgICAgKiAgICAgPGxpPmxlZnQtdG9wPC9saT5cbiAgICAgICAqICAgICA8bGk+bGVmdC1ib3R0b208L2xpPlxuICAgICAgICogICAgIDxsaT5yaWdodDwvbGk+XG4gICAgICAgKiAgICAgPGxpPnJpZ2h0LXRvcDwvbGk+XG4gICAgICAgKiAgICAgPGxpPnJpZ2h0LWJvdHRvbTwvbGk+XG4gICAgICAgKiAgIDwvdWw+XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbYXBwZW5kVG9Cb2R5PWZhbHNlXSAtIFNob3VsZCB0aGUgdG9wIGFuZCBsZWZ0IHZhbHVlcyByZXR1cm5lZFxuICAgICAgICogICBiZSBjYWxjdWxhdGVkIGZyb20gdGhlIGJvZHkgZWxlbWVudCwgZGVmYXVsdCBpcyBmYWxzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKiAgIDx1bD5cbiAgICAgICAqICAgICA8bGk+Kip0b3AqKjogVmFsdWUgZm9yIHRhcmdldEVsZW0gdG9wLjwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqbGVmdCoqOiBWYWx1ZSBmb3IgdGFyZ2V0RWxlbSBsZWZ0LjwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqcGxhY2VtZW50Kio6IFRoZSByZXNvbHZlZCBwbGFjZW1lbnQuPC9saT5cbiAgICAgICAqICAgPC91bD5cbiAgICAgICAqL1xuICAgICAgcG9zaXRpb25FbGVtZW50czogZnVuY3Rpb24oaG9zdEVsZW0sIHRhcmdldEVsZW0sIHBsYWNlbWVudCwgYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAgIGhvc3RFbGVtID0gdGhpcy5nZXRSYXdOb2RlKGhvc3RFbGVtKTtcbiAgICAgICAgdGFyZ2V0RWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZSh0YXJnZXRFbGVtKTtcblxuICAgICAgICAvLyBuZWVkIHRvIHJlYWQgZnJvbSBwcm9wIHRvIHN1cHBvcnQgdGVzdHMuXG4gICAgICAgIHZhciB0YXJnZXRXaWR0aCA9IGFuZ3VsYXIuaXNEZWZpbmVkKHRhcmdldEVsZW0ub2Zmc2V0V2lkdGgpID8gdGFyZ2V0RWxlbS5vZmZzZXRXaWR0aCA6IHRhcmdldEVsZW0ucHJvcCgnb2Zmc2V0V2lkdGgnKTtcbiAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IGFuZ3VsYXIuaXNEZWZpbmVkKHRhcmdldEVsZW0ub2Zmc2V0SGVpZ2h0KSA/IHRhcmdldEVsZW0ub2Zmc2V0SGVpZ2h0IDogdGFyZ2V0RWxlbS5wcm9wKCdvZmZzZXRIZWlnaHQnKTtcblxuICAgICAgICBwbGFjZW1lbnQgPSB0aGlzLnBhcnNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICAgICAgdmFyIGhvc3RFbGVtUG9zID0gYXBwZW5kVG9Cb2R5ID8gdGhpcy5vZmZzZXQoaG9zdEVsZW0pIDogdGhpcy5wb3NpdGlvbihob3N0RWxlbSk7XG4gICAgICAgIHZhciB0YXJnZXRFbGVtUG9zID0ge3RvcDogMCwgbGVmdDogMCwgcGxhY2VtZW50OiAnJ307XG5cbiAgICAgICAgaWYgKHBsYWNlbWVudFsyXSkge1xuICAgICAgICAgIHZhciB2aWV3cG9ydE9mZnNldCA9IHRoaXMudmlld3BvcnRPZmZzZXQoaG9zdEVsZW0sIGFwcGVuZFRvQm9keSk7XG5cbiAgICAgICAgICB2YXIgdGFyZ2V0RWxlbVN0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRhcmdldEVsZW0pO1xuICAgICAgICAgIHZhciBhZGp1c3RlZFNpemUgPSB7XG4gICAgICAgICAgICB3aWR0aDogdGFyZ2V0V2lkdGggKyBNYXRoLnJvdW5kKE1hdGguYWJzKHRoaXMucGFyc2VTdHlsZSh0YXJnZXRFbGVtU3R5bGUubWFyZ2luTGVmdCkgKyB0aGlzLnBhcnNlU3R5bGUodGFyZ2V0RWxlbVN0eWxlLm1hcmdpblJpZ2h0KSkpLFxuICAgICAgICAgICAgaGVpZ2h0OiB0YXJnZXRIZWlnaHQgKyBNYXRoLnJvdW5kKE1hdGguYWJzKHRoaXMucGFyc2VTdHlsZSh0YXJnZXRFbGVtU3R5bGUubWFyZ2luVG9wKSArIHRoaXMucGFyc2VTdHlsZSh0YXJnZXRFbGVtU3R5bGUubWFyZ2luQm90dG9tKSkpXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHBsYWNlbWVudFswXSA9IHBsYWNlbWVudFswXSA9PT0gJ3RvcCcgJiYgYWRqdXN0ZWRTaXplLmhlaWdodCA+IHZpZXdwb3J0T2Zmc2V0LnRvcCAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0IDw9IHZpZXdwb3J0T2Zmc2V0LmJvdHRvbSA/ICdib3R0b20nIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMF0gPT09ICdib3R0b20nICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgPiB2aWV3cG9ydE9mZnNldC5ib3R0b20gJiYgYWRqdXN0ZWRTaXplLmhlaWdodCA8PSB2aWV3cG9ydE9mZnNldC50b3AgPyAndG9wJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50WzBdID09PSAnbGVmdCcgJiYgYWRqdXN0ZWRTaXplLndpZHRoID4gdmlld3BvcnRPZmZzZXQubGVmdCAmJiBhZGp1c3RlZFNpemUud2lkdGggPD0gdmlld3BvcnRPZmZzZXQucmlnaHQgPyAncmlnaHQnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMF0gPT09ICdyaWdodCcgJiYgYWRqdXN0ZWRTaXplLndpZHRoID4gdmlld3BvcnRPZmZzZXQucmlnaHQgJiYgYWRqdXN0ZWRTaXplLndpZHRoIDw9IHZpZXdwb3J0T2Zmc2V0LmxlZnQgPyAnbGVmdCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFswXTtcblxuICAgICAgICAgIHBsYWNlbWVudFsxXSA9IHBsYWNlbWVudFsxXSA9PT0gJ3RvcCcgJiYgYWRqdXN0ZWRTaXplLmhlaWdodCAtIGhvc3RFbGVtUG9zLmhlaWdodCA+IHZpZXdwb3J0T2Zmc2V0LmJvdHRvbSAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0IC0gaG9zdEVsZW1Qb3MuaGVpZ2h0IDw9IHZpZXdwb3J0T2Zmc2V0LnRvcCA/ICdib3R0b20nIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMV0gPT09ICdib3R0b20nICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgLSBob3N0RWxlbVBvcy5oZWlnaHQgPiB2aWV3cG9ydE9mZnNldC50b3AgJiYgYWRqdXN0ZWRTaXplLmhlaWdodCAtIGhvc3RFbGVtUG9zLmhlaWdodCA8PSB2aWV3cG9ydE9mZnNldC5ib3R0b20gPyAndG9wJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50WzFdID09PSAnbGVmdCcgJiYgYWRqdXN0ZWRTaXplLndpZHRoIC0gaG9zdEVsZW1Qb3Mud2lkdGggPiB2aWV3cG9ydE9mZnNldC5yaWdodCAmJiBhZGp1c3RlZFNpemUud2lkdGggLSBob3N0RWxlbVBvcy53aWR0aCA8PSB2aWV3cG9ydE9mZnNldC5sZWZ0ID8gJ3JpZ2h0JyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50WzFdID09PSAncmlnaHQnICYmIGFkanVzdGVkU2l6ZS53aWR0aCAtIGhvc3RFbGVtUG9zLndpZHRoID4gdmlld3BvcnRPZmZzZXQubGVmdCAmJiBhZGp1c3RlZFNpemUud2lkdGggLSBob3N0RWxlbVBvcy53aWR0aCA8PSB2aWV3cG9ydE9mZnNldC5yaWdodCA/ICdsZWZ0JyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50WzFdO1xuXG4gICAgICAgICAgaWYgKHBsYWNlbWVudFsxXSA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIGlmIChQTEFDRU1FTlRfUkVHRVgudmVydGljYWwudGVzdChwbGFjZW1lbnRbMF0pKSB7XG4gICAgICAgICAgICAgIHZhciB4T3ZlcmZsb3cgPSBob3N0RWxlbVBvcy53aWR0aCAvIDIgLSB0YXJnZXRXaWR0aCAvIDI7XG4gICAgICAgICAgICAgIGlmICh2aWV3cG9ydE9mZnNldC5sZWZ0ICsgeE92ZXJmbG93IDwgMCAmJiBhZGp1c3RlZFNpemUud2lkdGggLSBob3N0RWxlbVBvcy53aWR0aCA8PSB2aWV3cG9ydE9mZnNldC5yaWdodCkge1xuICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXSA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2aWV3cG9ydE9mZnNldC5yaWdodCArIHhPdmVyZmxvdyA8IDAgJiYgYWRqdXN0ZWRTaXplLndpZHRoIC0gaG9zdEVsZW1Qb3Mud2lkdGggPD0gdmlld3BvcnRPZmZzZXQubGVmdCkge1xuICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXSA9ICdyaWdodCc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciB5T3ZlcmZsb3cgPSBob3N0RWxlbVBvcy5oZWlnaHQgLyAyIC0gYWRqdXN0ZWRTaXplLmhlaWdodCAvIDI7XG4gICAgICAgICAgICAgIGlmICh2aWV3cG9ydE9mZnNldC50b3AgKyB5T3ZlcmZsb3cgPCAwICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgLSBob3N0RWxlbVBvcy5oZWlnaHQgPD0gdmlld3BvcnRPZmZzZXQuYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50WzFdID0gJ3RvcCc7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmlld3BvcnRPZmZzZXQuYm90dG9tICsgeU92ZXJmbG93IDwgMCAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0IC0gaG9zdEVsZW1Qb3MuaGVpZ2h0IDw9IHZpZXdwb3J0T2Zmc2V0LnRvcCkge1xuICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXSA9ICdib3R0b20nO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChwbGFjZW1lbnRbMF0pIHtcbiAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy50b3AgPSBob3N0RWxlbVBvcy50b3AgLSB0YXJnZXRIZWlnaHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy50b3AgPSBob3N0RWxlbVBvcy50b3AgKyBob3N0RWxlbVBvcy5oZWlnaHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MubGVmdCA9IGhvc3RFbGVtUG9zLmxlZnQgLSB0YXJnZXRXaWR0aDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MubGVmdCA9IGhvc3RFbGVtUG9zLmxlZnQgKyBob3N0RWxlbVBvcy53aWR0aDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChwbGFjZW1lbnRbMV0pIHtcbiAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy50b3AgPSBob3N0RWxlbVBvcy50b3A7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy50b3AgPSBob3N0RWxlbVBvcy50b3AgKyBob3N0RWxlbVBvcy5oZWlnaHQgLSB0YXJnZXRIZWlnaHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MubGVmdCA9IGhvc3RFbGVtUG9zLmxlZnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICB0YXJnZXRFbGVtUG9zLmxlZnQgPSBob3N0RWxlbVBvcy5sZWZ0ICsgaG9zdEVsZW1Qb3Mud2lkdGggLSB0YXJnZXRXaWR0aDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgICBpZiAoUExBQ0VNRU5UX1JFR0VYLnZlcnRpY2FsLnRlc3QocGxhY2VtZW50WzBdKSkge1xuICAgICAgICAgICAgICB0YXJnZXRFbGVtUG9zLmxlZnQgPSBob3N0RWxlbVBvcy5sZWZ0ICsgaG9zdEVsZW1Qb3Mud2lkdGggLyAyIC0gdGFyZ2V0V2lkdGggLyAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy50b3AgPSBob3N0RWxlbVBvcy50b3AgKyBob3N0RWxlbVBvcy5oZWlnaHQgLyAyIC0gdGFyZ2V0SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0RWxlbVBvcy50b3AgPSBNYXRoLnJvdW5kKHRhcmdldEVsZW1Qb3MudG9wKTtcbiAgICAgICAgdGFyZ2V0RWxlbVBvcy5sZWZ0ID0gTWF0aC5yb3VuZCh0YXJnZXRFbGVtUG9zLmxlZnQpO1xuICAgICAgICB0YXJnZXRFbGVtUG9zLnBsYWNlbWVudCA9IHBsYWNlbWVudFsxXSA9PT0gJ2NlbnRlcicgPyBwbGFjZW1lbnRbMF0gOiBwbGFjZW1lbnRbMF0gKyAnLScgKyBwbGFjZW1lbnRbMV07XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldEVsZW1Qb3M7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIGEgd2F5IHRvIGFkanVzdCB0aGUgdG9wIHBvc2l0aW9uaW5nIGFmdGVyIGZpcnN0XG4gICAgICAgKiByZW5kZXIgdG8gY29ycmVjdGx5IGFsaWduIGVsZW1lbnQgdG8gdG9wIGFmdGVyIGNvbnRlbnRcbiAgICAgICAqIHJlbmRlcmluZyBjYXVzZXMgcmVzaXplZCBlbGVtZW50IGhlaWdodFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7YXJyYXl9IHBsYWNlbWVudENsYXNzZXMgLSBUaGUgYXJyYXkgb2Ygc3RyaW5ncyBvZiBjbGFzc2VzXG4gICAgICAgKiBlbGVtZW50IHNob3VsZCBoYXZlLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRhaW5lclBvc2l0aW9uIC0gVGhlIG9iamVjdCB3aXRoIGNvbnRhaW5lclxuICAgICAgICogcG9zaXRpb24gaW5mb3JtYXRpb25cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbml0aWFsSGVpZ2h0IC0gVGhlIGluaXRpYWwgaGVpZ2h0IGZvciB0aGUgZWxlbS5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50SGVpZ2h0IC0gVGhlIGN1cnJlbnQgaGVpZ2h0IGZvciB0aGUgZWxlbS5cbiAgICAgICAqL1xuICAgICAgYWRqdXN0VG9wOiBmdW5jdGlvbihwbGFjZW1lbnRDbGFzc2VzLCBjb250YWluZXJQb3NpdGlvbiwgaW5pdGlhbEhlaWdodCwgY3VycmVudEhlaWdodCkge1xuICAgICAgICBpZiAocGxhY2VtZW50Q2xhc3Nlcy5pbmRleE9mKCd0b3AnKSAhPT0gLTEgJiYgaW5pdGlhbEhlaWdodCAhPT0gY3VycmVudEhlaWdodCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IGNvbnRhaW5lclBvc2l0aW9uLnRvcCAtIGN1cnJlbnRIZWlnaHQgKyAncHgnXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyBhIHdheSBmb3IgcG9zaXRpb25pbmcgdG9vbHRpcCAmIGRyb3Bkb3duXG4gICAgICAgKiBhcnJvd3Mgd2hlbiB1c2luZyBwbGFjZW1lbnQgb3B0aW9ucyBiZXlvbmQgdGhlIHN0YW5kYXJkXG4gICAgICAgKiBsZWZ0LCByaWdodCwgdG9wLCBvciBib3R0b20uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtIC0gVGhlIHRvb2x0aXAvZHJvcGRvd24gZWxlbWVudC5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwbGFjZW1lbnQgLSBUaGUgcGxhY2VtZW50IGZvciB0aGUgZWxlbS5cbiAgICAgICAqL1xuICAgICAgcG9zaXRpb25BcnJvdzogZnVuY3Rpb24oZWxlbSwgcGxhY2VtZW50KSB7XG4gICAgICAgIGVsZW0gPSB0aGlzLmdldFJhd05vZGUoZWxlbSk7XG5cbiAgICAgICAgdmFyIGlubmVyRWxlbSA9IGVsZW0ucXVlcnlTZWxlY3RvcignLnRvb2x0aXAtaW5uZXIsIC5wb3BvdmVyLWlubmVyJyk7XG4gICAgICAgIGlmICghaW5uZXJFbGVtKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzVG9vbHRpcCA9IGFuZ3VsYXIuZWxlbWVudChpbm5lckVsZW0pLmhhc0NsYXNzKCd0b29sdGlwLWlubmVyJyk7XG5cbiAgICAgICAgdmFyIGFycm93RWxlbSA9IGlzVG9vbHRpcCA/IGVsZW0ucXVlcnlTZWxlY3RvcignLnRvb2x0aXAtYXJyb3cnKSA6IGVsZW0ucXVlcnlTZWxlY3RvcignLmFycm93Jyk7XG4gICAgICAgIGlmICghYXJyb3dFbGVtKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFycm93Q3NzID0ge1xuICAgICAgICAgIHRvcDogJycsXG4gICAgICAgICAgYm90dG9tOiAnJyxcbiAgICAgICAgICBsZWZ0OiAnJyxcbiAgICAgICAgICByaWdodDogJydcbiAgICAgICAgfTtcblxuICAgICAgICBwbGFjZW1lbnQgPSB0aGlzLnBhcnNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gICAgICAgIGlmIChwbGFjZW1lbnRbMV0gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgLy8gbm8gYWRqdXN0bWVudCBuZWNlc3NhcnkgLSBqdXN0IHJlc2V0IHN0eWxlc1xuICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChhcnJvd0VsZW0pLmNzcyhhcnJvd0Nzcyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJvcmRlclByb3AgPSAnYm9yZGVyLScgKyBwbGFjZW1lbnRbMF0gKyAnLXdpZHRoJztcbiAgICAgICAgdmFyIGJvcmRlcldpZHRoID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGFycm93RWxlbSlbYm9yZGVyUHJvcF07XG5cbiAgICAgICAgdmFyIGJvcmRlclJhZGl1c1Byb3AgPSAnYm9yZGVyLSc7XG4gICAgICAgIGlmIChQTEFDRU1FTlRfUkVHRVgudmVydGljYWwudGVzdChwbGFjZW1lbnRbMF0pKSB7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzUHJvcCArPSBwbGFjZW1lbnRbMF0gKyAnLScgKyBwbGFjZW1lbnRbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzUHJvcCArPSBwbGFjZW1lbnRbMV0gKyAnLScgKyBwbGFjZW1lbnRbMF07XG4gICAgICAgIH1cbiAgICAgICAgYm9yZGVyUmFkaXVzUHJvcCArPSAnLXJhZGl1cyc7XG4gICAgICAgIHZhciBib3JkZXJSYWRpdXMgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoaXNUb29sdGlwID8gaW5uZXJFbGVtIDogZWxlbSlbYm9yZGVyUmFkaXVzUHJvcF07XG5cbiAgICAgICAgc3dpdGNoIChwbGFjZW1lbnRbMF0pIHtcbiAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgYXJyb3dDc3MuYm90dG9tID0gaXNUb29sdGlwID8gJzAnIDogJy0nICsgYm9yZGVyV2lkdGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgYXJyb3dDc3MudG9wID0gaXNUb29sdGlwID8gJzAnIDogJy0nICsgYm9yZGVyV2lkdGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIGFycm93Q3NzLnJpZ2h0ID0gaXNUb29sdGlwID8gJzAnIDogJy0nICsgYm9yZGVyV2lkdGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICBhcnJvd0Nzcy5sZWZ0ID0gaXNUb29sdGlwID8gJzAnIDogJy0nICsgYm9yZGVyV2lkdGg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGFycm93Q3NzW3BsYWNlbWVudFsxXV0gPSBib3JkZXJSYWRpdXM7XG5cbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGFycm93RWxlbSkuY3NzKGFycm93Q3NzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZGF0ZXBpY2tlclBvcHVwJywgWyd1aS5ib290c3RyYXAuZGF0ZXBpY2tlcicsICd1aS5ib290c3RyYXAucG9zaXRpb24nXSlcblxuLnZhbHVlKCckZGF0ZXBpY2tlclBvcHVwTGl0ZXJhbFdhcm5pbmcnLCB0cnVlKVxuXG4uY29uc3RhbnQoJ3VpYkRhdGVwaWNrZXJQb3B1cENvbmZpZycsIHtcbiAgYWx0SW5wdXRGb3JtYXRzOiBbXSxcbiAgYXBwZW5kVG9Cb2R5OiBmYWxzZSxcbiAgY2xlYXJUZXh0OiAnQ2xlYXInLFxuICBjbG9zZU9uRGF0ZVNlbGVjdGlvbjogdHJ1ZSxcbiAgY2xvc2VUZXh0OiAnRG9uZScsXG4gIGN1cnJlbnRUZXh0OiAnVG9kYXknLFxuICBkYXRlcGlja2VyUG9wdXA6ICd5eXl5LU1NLWRkJyxcbiAgZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlclBvcHVwL3BvcHVwLmh0bWwnLFxuICBkYXRlcGlja2VyVGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWwnLFxuICBodG1sNVR5cGVzOiB7XG4gICAgZGF0ZTogJ3l5eXktTU0tZGQnLFxuICAgICdkYXRldGltZS1sb2NhbCc6ICd5eXl5LU1NLWRkVEhIOm1tOnNzLnNzcycsXG4gICAgJ21vbnRoJzogJ3l5eXktTU0nXG4gIH0sXG4gIG9uT3BlbkZvY3VzOiB0cnVlLFxuICBzaG93QnV0dG9uQmFyOiB0cnVlLFxuICBwbGFjZW1lbnQ6ICdhdXRvIGJvdHRvbS1sZWZ0J1xufSlcblxuLmNvbnRyb2xsZXIoJ1VpYkRhdGVwaWNrZXJQb3B1cENvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICckYXR0cnMnLCAnJGNvbXBpbGUnLCAnJGxvZycsICckcGFyc2UnLCAnJHdpbmRvdycsICckZG9jdW1lbnQnLCAnJHJvb3RTY29wZScsICckdWliUG9zaXRpb24nLCAnZGF0ZUZpbHRlcicsICd1aWJEYXRlUGFyc2VyJywgJ3VpYkRhdGVwaWNrZXJQb3B1cENvbmZpZycsICckdGltZW91dCcsICd1aWJEYXRlcGlja2VyQ29uZmlnJywgJyRkYXRlcGlja2VyUG9wdXBMaXRlcmFsV2FybmluZycsXG5mdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICRjb21waWxlLCAkbG9nLCAkcGFyc2UsICR3aW5kb3csICRkb2N1bWVudCwgJHJvb3RTY29wZSwgJHBvc2l0aW9uLCBkYXRlRmlsdGVyLCBkYXRlUGFyc2VyLCBkYXRlcGlja2VyUG9wdXBDb25maWcsICR0aW1lb3V0LCBkYXRlcGlja2VyQ29uZmlnLCAkZGF0ZXBpY2tlclBvcHVwTGl0ZXJhbFdhcm5pbmcpIHtcbiAgdmFyIGNhY2hlID0ge30sXG4gICAgaXNIdG1sNURhdGVJbnB1dCA9IGZhbHNlO1xuICB2YXIgZGF0ZUZvcm1hdCwgY2xvc2VPbkRhdGVTZWxlY3Rpb24sIGFwcGVuZFRvQm9keSwgb25PcGVuRm9jdXMsXG4gICAgZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmwsIGRhdGVwaWNrZXJUZW1wbGF0ZVVybCwgcG9wdXBFbCwgZGF0ZXBpY2tlckVsLCBzY3JvbGxQYXJlbnRFbCxcbiAgICBuZ01vZGVsLCBuZ01vZGVsT3B0aW9ucywgJHBvcHVwLCBhbHRJbnB1dEZvcm1hdHMsIHdhdGNoTGlzdGVuZXJzID0gW107XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oX25nTW9kZWxfKSB7XG4gICAgbmdNb2RlbCA9IF9uZ01vZGVsXztcbiAgICBuZ01vZGVsT3B0aW9ucyA9IGV4dHJhY3RPcHRpb25zKG5nTW9kZWwpO1xuICAgIGNsb3NlT25EYXRlU2VsZWN0aW9uID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmNsb3NlT25EYXRlU2VsZWN0aW9uKSA/XG4gICAgICAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuY2xvc2VPbkRhdGVTZWxlY3Rpb24pIDpcbiAgICAgIGRhdGVwaWNrZXJQb3B1cENvbmZpZy5jbG9zZU9uRGF0ZVNlbGVjdGlvbjtcbiAgICBhcHBlbmRUb0JvZHkgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZGF0ZXBpY2tlckFwcGVuZFRvQm9keSkgP1xuICAgICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmRhdGVwaWNrZXJBcHBlbmRUb0JvZHkpIDpcbiAgICAgIGRhdGVwaWNrZXJQb3B1cENvbmZpZy5hcHBlbmRUb0JvZHk7XG4gICAgb25PcGVuRm9jdXMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMub25PcGVuRm9jdXMpID9cbiAgICAgICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5vbk9wZW5Gb2N1cykgOiBkYXRlcGlja2VyUG9wdXBDb25maWcub25PcGVuRm9jdXM7XG4gICAgZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmwgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmwpID9cbiAgICAgICRhdHRycy5kYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybCA6XG4gICAgICBkYXRlcGlja2VyUG9wdXBDb25maWcuZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmw7XG4gICAgZGF0ZXBpY2tlclRlbXBsYXRlVXJsID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmRhdGVwaWNrZXJUZW1wbGF0ZVVybCkgP1xuICAgICAgJGF0dHJzLmRhdGVwaWNrZXJUZW1wbGF0ZVVybCA6IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5kYXRlcGlja2VyVGVtcGxhdGVVcmw7XG4gICAgYWx0SW5wdXRGb3JtYXRzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmFsdElucHV0Rm9ybWF0cykgP1xuICAgICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmFsdElucHV0Rm9ybWF0cykgOlxuICAgICAgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmFsdElucHV0Rm9ybWF0cztcblxuICAgICRzY29wZS5zaG93QnV0dG9uQmFyID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnNob3dCdXR0b25CYXIpID9cbiAgICAgICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5zaG93QnV0dG9uQmFyKSA6XG4gICAgICBkYXRlcGlja2VyUG9wdXBDb25maWcuc2hvd0J1dHRvbkJhcjtcblxuICAgIGlmIChkYXRlcGlja2VyUG9wdXBDb25maWcuaHRtbDVUeXBlc1skYXR0cnMudHlwZV0pIHtcbiAgICAgIGRhdGVGb3JtYXQgPSBkYXRlcGlja2VyUG9wdXBDb25maWcuaHRtbDVUeXBlc1skYXR0cnMudHlwZV07XG4gICAgICBpc0h0bWw1RGF0ZUlucHV0ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ZUZvcm1hdCA9ICRhdHRycy51aWJEYXRlcGlja2VyUG9wdXAgfHwgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmRhdGVwaWNrZXJQb3B1cDtcbiAgICAgICRhdHRycy4kb2JzZXJ2ZSgndWliRGF0ZXBpY2tlclBvcHVwJywgZnVuY3Rpb24odmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHZhciBuZXdEYXRlRm9ybWF0ID0gdmFsdWUgfHwgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmRhdGVwaWNrZXJQb3B1cDtcbiAgICAgICAgLy8gSW52YWxpZGF0ZSB0aGUgJG1vZGVsVmFsdWUgdG8gZW5zdXJlIHRoYXQgZm9ybWF0dGVycyByZS1ydW5cbiAgICAgICAgLy8gRklYTUU6IFJlZmFjdG9yIHdoZW4gUFIgaXMgbWVyZ2VkOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMTA3NjRcbiAgICAgICAgaWYgKG5ld0RhdGVGb3JtYXQgIT09IGRhdGVGb3JtYXQpIHtcbiAgICAgICAgICBkYXRlRm9ybWF0ID0gbmV3RGF0ZUZvcm1hdDtcbiAgICAgICAgICBuZ01vZGVsLiRtb2RlbFZhbHVlID0gbnVsbDtcblxuICAgICAgICAgIGlmICghZGF0ZUZvcm1hdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1aWJEYXRlcGlja2VyUG9wdXAgbXVzdCBoYXZlIGEgZGF0ZSBmb3JtYXQgc3BlY2lmaWVkLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFkYXRlRm9ybWF0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VpYkRhdGVwaWNrZXJQb3B1cCBtdXN0IGhhdmUgYSBkYXRlIGZvcm1hdCBzcGVjaWZpZWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzSHRtbDVEYXRlSW5wdXQgJiYgJGF0dHJzLnVpYkRhdGVwaWNrZXJQb3B1cCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdIVE1MNSBkYXRlIGlucHV0IHR5cGVzIGRvIG5vdCBzdXBwb3J0IGN1c3RvbSBmb3JtYXRzLicpO1xuICAgIH1cblxuICAgIC8vIHBvcHVwIGVsZW1lbnQgdXNlZCB0byBkaXNwbGF5IGNhbGVuZGFyXG4gICAgcG9wdXBFbCA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiB1aWItZGF0ZXBpY2tlci1wb3B1cC13cmFwPjxkaXYgdWliLWRhdGVwaWNrZXI+PC9kaXY+PC9kaXY+Jyk7XG5cbiAgICBwb3B1cEVsLmF0dHIoe1xuICAgICAgJ25nLW1vZGVsJzogJ2RhdGUnLFxuICAgICAgJ25nLWNoYW5nZSc6ICdkYXRlU2VsZWN0aW9uKGRhdGUpJyxcbiAgICAgICd0ZW1wbGF0ZS11cmwnOiBkYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybFxuICAgIH0pO1xuXG4gICAgLy8gZGF0ZXBpY2tlciBlbGVtZW50XG4gICAgZGF0ZXBpY2tlckVsID0gYW5ndWxhci5lbGVtZW50KHBvcHVwRWwuY2hpbGRyZW4oKVswXSk7XG4gICAgZGF0ZXBpY2tlckVsLmF0dHIoJ3RlbXBsYXRlLXVybCcsIGRhdGVwaWNrZXJUZW1wbGF0ZVVybCk7XG5cbiAgICBpZiAoISRzY29wZS5kYXRlcGlja2VyT3B0aW9ucykge1xuICAgICAgJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKGlzSHRtbDVEYXRlSW5wdXQpIHtcbiAgICAgIGlmICgkYXR0cnMudHlwZSA9PT0gJ21vbnRoJykge1xuICAgICAgICAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlck1vZGUgPSAnbW9udGgnO1xuICAgICAgICAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMubWluTW9kZSA9ICdtb250aCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGF0ZXBpY2tlckVsLmF0dHIoJ2RhdGVwaWNrZXItb3B0aW9ucycsICdkYXRlcGlja2VyT3B0aW9ucycpO1xuXG4gICAgaWYgKCFpc0h0bWw1RGF0ZUlucHV0KSB7XG4gICAgICAvLyBJbnRlcm5hbCBBUEkgdG8gbWFpbnRhaW4gdGhlIGNvcnJlY3QgbmctaW52YWxpZC1ba2V5XSBjbGFzc1xuICAgICAgbmdNb2RlbC4kJHBhcnNlck5hbWUgPSAnZGF0ZSc7XG4gICAgICBuZ01vZGVsLiR2YWxpZGF0b3JzLmRhdGUgPSB2YWxpZGF0b3I7XG4gICAgICBuZ01vZGVsLiRwYXJzZXJzLnVuc2hpZnQocGFyc2VEYXRlKTtcbiAgICAgIG5nTW9kZWwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAobmdNb2RlbC4kaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgICAgICAkc2NvcGUuZGF0ZSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gbmV3IERhdGUodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmRhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZSh2YWx1ZSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcblxuICAgICAgICByZXR1cm4gZGF0ZVBhcnNlci5maWx0ZXIoJHNjb3BlLmRhdGUsIGRhdGVGb3JtYXQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5nTW9kZWwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAkc2NvcGUuZGF0ZSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKHZhbHVlLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBEZXRlY3QgY2hhbmdlcyBpbiB0aGUgdmlldyBmcm9tIHRoZSB0ZXh0IGJveFxuICAgIG5nTW9kZWwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS5kYXRlID0gcGFyc2VEYXRlU3RyaW5nKG5nTW9kZWwuJHZpZXdWYWx1ZSk7XG4gICAgfSk7XG5cbiAgICAkZWxlbWVudC5vbigna2V5ZG93bicsIGlucHV0S2V5ZG93bkJpbmQpO1xuXG4gICAgJHBvcHVwID0gJGNvbXBpbGUocG9wdXBFbCkoJHNjb3BlKTtcbiAgICAvLyBQcmV2ZW50IGpRdWVyeSBjYWNoZSBtZW1vcnkgbGVhayAodGVtcGxhdGUgaXMgbm93IHJlZHVuZGFudCBhZnRlciBsaW5raW5nKVxuICAgIHBvcHVwRWwucmVtb3ZlKCk7XG5cbiAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLmFwcGVuZCgkcG9wdXApO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZWxlbWVudC5hZnRlcigkcG9wdXApO1xuICAgIH1cblxuICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoJHNjb3BlLmlzT3BlbiA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJHBvcHVwLnJlbW92ZSgpO1xuICAgICAgJGVsZW1lbnQub2ZmKCdrZXlkb3duJywgaW5wdXRLZXlkb3duQmluZCk7XG4gICAgICAkZG9jdW1lbnQub2ZmKCdjbGljaycsIGRvY3VtZW50Q2xpY2tCaW5kKTtcbiAgICAgIGlmIChzY3JvbGxQYXJlbnRFbCkge1xuICAgICAgICBzY3JvbGxQYXJlbnRFbC5vZmYoJ3Njcm9sbCcsIHBvc2l0aW9uUG9wdXApO1xuICAgICAgfVxuICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9mZigncmVzaXplJywgcG9zaXRpb25Qb3B1cCk7XG5cbiAgICAgIC8vQ2xlYXIgYWxsIHdhdGNoIGxpc3RlbmVycyBvbiBkZXN0cm95XG4gICAgICB3aGlsZSAod2F0Y2hMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgIHdhdGNoTGlzdGVuZXJzLnNoaWZ0KCkoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAkc2NvcGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiAkc2NvcGVba2V5ICsgJ1RleHQnXSB8fCBkYXRlcGlja2VyUG9wdXBDb25maWdba2V5ICsgJ1RleHQnXTtcbiAgfTtcblxuICAkc2NvcGUuaXNEaXNhYmxlZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBpZiAoZGF0ZSA9PT0gJ3RvZGF5Jykge1xuICAgICAgZGF0ZSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKG5ldyBEYXRlKCksIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG4gICAgfVxuXG4gICAgdmFyIGRhdGVzID0ge307XG4gICAgYW5ndWxhci5mb3JFYWNoKFsnbWluRGF0ZScsICdtYXhEYXRlJ10sIGZ1bmN0aW9uKGtleSkge1xuICAgICAgaWYgKCEkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSkge1xuICAgICAgICBkYXRlc1trZXldID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc0RhdGUoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV0pKSB7XG4gICAgICAgIGRhdGVzW2tleV0gPSBuZXcgRGF0ZSgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoJGRhdGVwaWNrZXJQb3B1cExpdGVyYWxXYXJuaW5nKSB7XG4gICAgICAgICAgJGxvZy53YXJuKCdMaXRlcmFsIGRhdGUgc3VwcG9ydCBoYXMgYmVlbiBkZXByZWNhdGVkLCBwbGVhc2Ugc3dpdGNoIHRvIGRhdGUgb2JqZWN0IHVzYWdlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRlc1trZXldID0gbmV3IERhdGUoZGF0ZUZpbHRlcigkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSwgJ21lZGl1bScpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMgJiZcbiAgICAgIGRhdGVzLm1pbkRhdGUgJiYgJHNjb3BlLmNvbXBhcmUoZGF0ZSwgZGF0ZXMubWluRGF0ZSkgPCAwIHx8XG4gICAgICBkYXRlcy5tYXhEYXRlICYmICRzY29wZS5jb21wYXJlKGRhdGUsIGRhdGVzLm1heERhdGUpID4gMDtcbiAgfTtcblxuICAkc2NvcGUuY29tcGFyZSA9IGZ1bmN0aW9uKGRhdGUxLCBkYXRlMikge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlMS5nZXRGdWxsWWVhcigpLCBkYXRlMS5nZXRNb250aCgpLCBkYXRlMS5nZXREYXRlKCkpIC0gbmV3IERhdGUoZGF0ZTIuZ2V0RnVsbFllYXIoKSwgZGF0ZTIuZ2V0TW9udGgoKSwgZGF0ZTIuZ2V0RGF0ZSgpKTtcbiAgfTtcblxuICAvLyBJbm5lciBjaGFuZ2VcbiAgJHNjb3BlLmRhdGVTZWxlY3Rpb24gPSBmdW5jdGlvbihkdCkge1xuICAgICRzY29wZS5kYXRlID0gZHQ7XG4gICAgdmFyIGRhdGUgPSAkc2NvcGUuZGF0ZSA/IGRhdGVQYXJzZXIuZmlsdGVyKCRzY29wZS5kYXRlLCBkYXRlRm9ybWF0KSA6IG51bGw7IC8vIFNldHRpbmcgdG8gTlVMTCBpcyBuZWNlc3NhcnkgZm9yIGZvcm0gdmFsaWRhdG9ycyB0byBmdW5jdGlvblxuICAgICRlbGVtZW50LnZhbChkYXRlKTtcbiAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoZGF0ZSk7XG5cbiAgICBpZiAoY2xvc2VPbkRhdGVTZWxlY3Rpb24pIHtcbiAgICAgICRzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgICRlbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5rZXlkb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgaWYgKGV2dC53aGljaCA9PT0gMjcpIHtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICRzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgICRlbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5zZWxlY3QgPSBmdW5jdGlvbihkYXRlLCBldnQpIHtcbiAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpZiAoZGF0ZSA9PT0gJ3RvZGF5Jykge1xuICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgIGlmIChhbmd1bGFyLmlzRGF0ZSgkc2NvcGUuZGF0ZSkpIHtcbiAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5kYXRlKTtcbiAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih0b2RheS5nZXRGdWxsWWVhcigpLCB0b2RheS5nZXRNb250aCgpLCB0b2RheS5nZXREYXRlKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKHRvZGF5LCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuICAgICAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgfVxuICAgIH1cbiAgICAkc2NvcGUuZGF0ZVNlbGVjdGlvbihkYXRlKTtcbiAgfTtcblxuICAkc2NvcGUuY2xvc2UgPSBmdW5jdGlvbihldnQpIHtcbiAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAkc2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgJGVsZW1lbnRbMF0uZm9jdXMoKTtcbiAgfTtcblxuICAkc2NvcGUuZGlzYWJsZWQgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZGlzYWJsZWQpIHx8IGZhbHNlO1xuICBpZiAoJGF0dHJzLm5nRGlzYWJsZWQpIHtcbiAgICB3YXRjaExpc3RlbmVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLm5nRGlzYWJsZWQpLCBmdW5jdGlvbihkaXNhYmxlZCkge1xuICAgICAgJHNjb3BlLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfSkpO1xuICB9XG5cbiAgJHNjb3BlLiR3YXRjaCgnaXNPcGVuJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGlmICghJHNjb3BlLmRpc2FibGVkKSB7XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHBvc2l0aW9uUG9wdXAoKTtcblxuICAgICAgICAgIGlmIChvbk9wZW5Gb2N1cykge1xuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3VpYjpkYXRlcGlja2VyLmZvY3VzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJGRvY3VtZW50Lm9uKCdjbGljaycsIGRvY3VtZW50Q2xpY2tCaW5kKTtcblxuICAgICAgICAgIHZhciBwbGFjZW1lbnQgPSAkYXR0cnMucG9wdXBQbGFjZW1lbnQgPyAkYXR0cnMucG9wdXBQbGFjZW1lbnQgOiBkYXRlcGlja2VyUG9wdXBDb25maWcucGxhY2VtZW50O1xuICAgICAgICAgIGlmIChhcHBlbmRUb0JvZHkgfHwgJHBvc2l0aW9uLnBhcnNlUGxhY2VtZW50KHBsYWNlbWVudClbMl0pIHtcbiAgICAgICAgICAgIHNjcm9sbFBhcmVudEVsID0gc2Nyb2xsUGFyZW50RWwgfHwgYW5ndWxhci5lbGVtZW50KCRwb3NpdGlvbi5zY3JvbGxQYXJlbnQoJGVsZW1lbnQpKTtcbiAgICAgICAgICAgIGlmIChzY3JvbGxQYXJlbnRFbCkge1xuICAgICAgICAgICAgICBzY3JvbGxQYXJlbnRFbC5vbignc2Nyb2xsJywgcG9zaXRpb25Qb3B1cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjcm9sbFBhcmVudEVsID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub24oJ3Jlc2l6ZScsIHBvc2l0aW9uUG9wdXApO1xuICAgICAgICB9LCAwLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkc2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICRkb2N1bWVudC5vZmYoJ2NsaWNrJywgZG9jdW1lbnRDbGlja0JpbmQpO1xuICAgICAgaWYgKHNjcm9sbFBhcmVudEVsKSB7XG4gICAgICAgIHNjcm9sbFBhcmVudEVsLm9mZignc2Nyb2xsJywgcG9zaXRpb25Qb3B1cCk7XG4gICAgICB9XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub2ZmKCdyZXNpemUnLCBwb3NpdGlvblBvcHVwKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGNhbWVsdG9EYXNoKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKFtBLVpdKS9nLCBmdW5jdGlvbigkMSkgeyByZXR1cm4gJy0nICsgJDEudG9Mb3dlckNhc2UoKTsgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZURhdGVTdHJpbmcodmlld1ZhbHVlKSB7XG4gICAgdmFyIGRhdGUgPSBkYXRlUGFyc2VyLnBhcnNlKHZpZXdWYWx1ZSwgZGF0ZUZvcm1hdCwgJHNjb3BlLmRhdGUpO1xuICAgIGlmIChpc05hTihkYXRlKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbHRJbnB1dEZvcm1hdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGF0ZSA9IGRhdGVQYXJzZXIucGFyc2Uodmlld1ZhbHVlLCBhbHRJbnB1dEZvcm1hdHNbaV0sICRzY29wZS5kYXRlKTtcbiAgICAgICAgaWYgKCFpc05hTihkYXRlKSkge1xuICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VEYXRlKHZpZXdWYWx1ZSkge1xuICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHZpZXdWYWx1ZSkpIHtcbiAgICAgIC8vIHByZXN1bWFibHkgdGltZXN0YW1wIHRvIGRhdGUgb2JqZWN0XG4gICAgICB2aWV3VmFsdWUgPSBuZXcgRGF0ZSh2aWV3VmFsdWUpO1xuICAgIH1cblxuICAgIGlmICghdmlld1ZhbHVlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoYW5ndWxhci5pc0RhdGUodmlld1ZhbHVlKSAmJiAhaXNOYU4odmlld1ZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZpZXdWYWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoYW5ndWxhci5pc1N0cmluZyh2aWV3VmFsdWUpKSB7XG4gICAgICB2YXIgZGF0ZSA9IHBhcnNlRGF0ZVN0cmluZyh2aWV3VmFsdWUpO1xuICAgICAgaWYgKCFpc05hTihkYXRlKSkge1xuICAgICAgICByZXR1cm4gZGF0ZVBhcnNlci50b1RpbWV6b25lKGRhdGUsIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbignYWxsb3dJbnZhbGlkJykgPyB2aWV3VmFsdWUgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG5cbiAgICBpZiAoISRhdHRycy5uZ1JlcXVpcmVkICYmICF2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoYW5ndWxhci5pc0RhdGUodmFsdWUpICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgcmV0dXJuICFpc05hTihwYXJzZURhdGVTdHJpbmcodmFsdWUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBkb2N1bWVudENsaWNrQmluZChldmVudCkge1xuICAgIGlmICghJHNjb3BlLmlzT3BlbiAmJiAkc2NvcGUuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcG9wdXAgPSAkcG9wdXBbMF07XG4gICAgdmFyIGRwQ29udGFpbnNUYXJnZXQgPSAkZWxlbWVudFswXS5jb250YWlucyhldmVudC50YXJnZXQpO1xuICAgIC8vIFRoZSBwb3B1cCBub2RlIG1heSBub3QgYmUgYW4gZWxlbWVudCBub2RlXG4gICAgLy8gSW4gc29tZSBicm93c2VycyAoSUUpIG9ubHkgZWxlbWVudCBub2RlcyBoYXZlIHRoZSAnY29udGFpbnMnIGZ1bmN0aW9uXG4gICAgdmFyIHBvcHVwQ29udGFpbnNUYXJnZXQgPSBwb3B1cC5jb250YWlucyAhPT0gdW5kZWZpbmVkICYmIHBvcHVwLmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XG4gICAgaWYgKCRzY29wZS5pc09wZW4gJiYgIShkcENvbnRhaW5zVGFyZ2V0IHx8IHBvcHVwQ29udGFpbnNUYXJnZXQpKSB7XG4gICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnB1dEtleWRvd25CaW5kKGV2dCkge1xuICAgIGlmIChldnQud2hpY2ggPT09IDI3ICYmICRzY29wZS5pc09wZW4pIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgJHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgICAkZWxlbWVudFswXS5mb2N1cygpO1xuICAgIH0gZWxzZSBpZiAoZXZ0LndoaWNoID09PSA0MCAmJiAhJHNjb3BlLmlzT3Blbikge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUuaXNPcGVuID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uUG9wdXAoKSB7XG4gICAgaWYgKCRzY29wZS5pc09wZW4pIHtcbiAgICAgIHZhciBkcEVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoJHBvcHVwWzBdLnF1ZXJ5U2VsZWN0b3IoJy51aWItZGF0ZXBpY2tlci1wb3B1cCcpKTtcbiAgICAgIHZhciBwbGFjZW1lbnQgPSAkYXR0cnMucG9wdXBQbGFjZW1lbnQgPyAkYXR0cnMucG9wdXBQbGFjZW1lbnQgOiBkYXRlcGlja2VyUG9wdXBDb25maWcucGxhY2VtZW50O1xuICAgICAgdmFyIHBvc2l0aW9uID0gJHBvc2l0aW9uLnBvc2l0aW9uRWxlbWVudHMoJGVsZW1lbnQsIGRwRWxlbWVudCwgcGxhY2VtZW50LCBhcHBlbmRUb0JvZHkpO1xuICAgICAgZHBFbGVtZW50LmNzcyh7dG9wOiBwb3NpdGlvbi50b3AgKyAncHgnLCBsZWZ0OiBwb3NpdGlvbi5sZWZ0ICsgJ3B4J30pO1xuICAgICAgaWYgKGRwRWxlbWVudC5oYXNDbGFzcygndWliLXBvc2l0aW9uLW1lYXN1cmUnKSkge1xuICAgICAgICBkcEVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3VpYi1wb3NpdGlvbi1tZWFzdXJlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZXh0cmFjdE9wdGlvbnMobmdNb2RlbEN0cmwpIHtcbiAgICB2YXIgbmdNb2RlbE9wdGlvbnM7XG5cbiAgICBpZiAoYW5ndWxhci52ZXJzaW9uLm1pbm9yIDwgNikgeyAvLyBpbiBhbmd1bGFyIDwgMS42ICRvcHRpb25zIGNvdWxkIGJlIG1pc3NpbmdcbiAgICAgIC8vIGd1YXJhbnRlZSBhIHZhbHVlXG4gICAgICBuZ01vZGVsT3B0aW9ucyA9IGFuZ3VsYXIuaXNPYmplY3QobmdNb2RlbEN0cmwuJG9wdGlvbnMpID9cbiAgICAgICAgbmdNb2RlbEN0cmwuJG9wdGlvbnMgOlxuICAgICAgICB7XG4gICAgICAgICAgdGltZXpvbmU6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgLy8gbWltaWMgMS42KyBhcGlcbiAgICAgIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIG5nTW9kZWxPcHRpb25zW2tleV07XG4gICAgICB9O1xuICAgIH0gZWxzZSB7IC8vIGluIGFuZ3VsYXIgPj0xLjYgJG9wdGlvbnMgaXMgYWx3YXlzIHByZXNlbnRcbiAgICAgIG5nTW9kZWxPcHRpb25zID0gbmdNb2RlbEN0cmwuJG9wdGlvbnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5nTW9kZWxPcHRpb25zO1xuICB9XG5cbiAgJHNjb3BlLiRvbigndWliOmRhdGVwaWNrZXIubW9kZScsIGZ1bmN0aW9uKCkge1xuICAgICR0aW1lb3V0KHBvc2l0aW9uUG9wdXAsIDAsIGZhbHNlKTtcbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliRGF0ZXBpY2tlclBvcHVwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogWyduZ01vZGVsJywgJ3VpYkRhdGVwaWNrZXJQb3B1cCddLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJEYXRlcGlja2VyUG9wdXBDb250cm9sbGVyJyxcbiAgICBzY29wZToge1xuICAgICAgZGF0ZXBpY2tlck9wdGlvbnM6ICc9PycsXG4gICAgICBpc09wZW46ICc9PycsXG4gICAgICBjdXJyZW50VGV4dDogJ0AnLFxuICAgICAgY2xlYXJUZXh0OiAnQCcsXG4gICAgICBjbG9zZVRleHQ6ICdAJ1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIG5nTW9kZWwgPSBjdHJsc1swXSxcbiAgICAgICAgY3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICBjdHJsLmluaXQobmdNb2RlbCk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliRGF0ZXBpY2tlclBvcHVwV3JhcCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2RhdGVwaWNrZXJQb3B1cC9wb3B1cC5odG1sJztcbiAgICB9XG4gIH07XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5kZWJvdW5jZScsIFtdKVxuLyoqXG4gKiBBIGhlbHBlciwgaW50ZXJuYWwgc2VydmljZSB0aGF0IGRlYm91bmNlcyBhIGZ1bmN0aW9uXG4gKi9cbiAgLmZhY3RvcnkoJyQkZGVib3VuY2UnLCBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2ssIGRlYm91bmNlVGltZSkge1xuICAgICAgdmFyIHRpbWVvdXRQcm9taXNlO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICBpZiAodGltZW91dFByb21pc2UpIHtcbiAgICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZW91dFByb21pc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZW91dFByb21pc2UgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBjYWxsYmFjay5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgICAgfSwgZGVib3VuY2VUaW1lKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLm11bHRpTWFwJywgW10pXG4vKipcbiAqIEEgaGVscGVyLCBpbnRlcm5hbCBkYXRhIHN0cnVjdHVyZSB0aGF0IHN0b3JlcyBhbGwgcmVmZXJlbmNlcyBhdHRhY2hlZCB0byBrZXlcbiAqL1xuICAuZmFjdG9yeSgnJCRtdWx0aU1hcCcsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVOZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbWFwID0ge307XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXApLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbWFwW2tleV1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXBba2V5XTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhc0tleTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gISFtYXBba2V5XTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghbWFwW2tleV0pIHtcbiAgICAgICAgICAgICAgbWFwW2tleV0gPSBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWFwW2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBtYXBba2V5XTtcblxuICAgICAgICAgICAgaWYgKCF2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaWR4ID0gdmFsdWVzLmluZGV4T2YodmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgICB2YWx1ZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBkZWxldGUgbWFwW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRyb3Bkb3duJywgWyd1aS5ib290c3RyYXAubXVsdGlNYXAnLCAndWkuYm9vdHN0cmFwLnBvc2l0aW9uJ10pXG5cbi5jb25zdGFudCgndWliRHJvcGRvd25Db25maWcnLCB7XG4gIGFwcGVuZFRvT3BlbkNsYXNzOiAndWliLWRyb3Bkb3duLW9wZW4nLFxuICBvcGVuQ2xhc3M6ICdvcGVuJ1xufSlcblxuLnNlcnZpY2UoJ3VpYkRyb3Bkb3duU2VydmljZScsIFsnJGRvY3VtZW50JywgJyRyb290U2NvcGUnLCAnJCRtdWx0aU1hcCcsIGZ1bmN0aW9uKCRkb2N1bWVudCwgJHJvb3RTY29wZSwgJCRtdWx0aU1hcCkge1xuICB2YXIgb3BlblNjb3BlID0gbnVsbDtcbiAgdmFyIG9wZW5lZENvbnRhaW5lcnMgPSAkJG11bHRpTWFwLmNyZWF0ZU5ldygpO1xuXG4gIHRoaXMuaXNPbmx5T3BlbiA9IGZ1bmN0aW9uKGRyb3Bkb3duU2NvcGUsIGFwcGVuZFRvKSB7XG4gICAgdmFyIG9wZW5lZERyb3Bkb3ducyA9IG9wZW5lZENvbnRhaW5lcnMuZ2V0KGFwcGVuZFRvKTtcbiAgICBpZiAob3BlbmVkRHJvcGRvd25zKSB7XG4gICAgICB2YXIgb3BlbkRyb3Bkb3duID0gb3BlbmVkRHJvcGRvd25zLnJlZHVjZShmdW5jdGlvbih0b0Nsb3NlLCBkcm9wZG93bikge1xuICAgICAgICBpZiAoZHJvcGRvd24uc2NvcGUgPT09IGRyb3Bkb3duU2NvcGUpIHtcbiAgICAgICAgICByZXR1cm4gZHJvcGRvd247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9DbG9zZTtcbiAgICAgIH0sIHt9KTtcbiAgICAgIGlmIChvcGVuRHJvcGRvd24pIHtcbiAgICAgICAgcmV0dXJuIG9wZW5lZERyb3Bkb3ducy5sZW5ndGggPT09IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHRoaXMub3BlbiA9IGZ1bmN0aW9uKGRyb3Bkb3duU2NvcGUsIGVsZW1lbnQsIGFwcGVuZFRvKSB7XG4gICAgaWYgKCFvcGVuU2NvcGUpIHtcbiAgICAgICRkb2N1bWVudC5vbignY2xpY2snLCBjbG9zZURyb3Bkb3duKTtcbiAgICB9XG5cbiAgICBpZiAob3BlblNjb3BlICYmIG9wZW5TY29wZSAhPT0gZHJvcGRvd25TY29wZSkge1xuICAgICAgb3BlblNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIG9wZW5TY29wZSA9IGRyb3Bkb3duU2NvcGU7XG5cbiAgICBpZiAoIWFwcGVuZFRvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9wZW5lZERyb3Bkb3ducyA9IG9wZW5lZENvbnRhaW5lcnMuZ2V0KGFwcGVuZFRvKTtcbiAgICBpZiAob3BlbmVkRHJvcGRvd25zKSB7XG4gICAgICB2YXIgb3BlbmVkU2NvcGVzID0gb3BlbmVkRHJvcGRvd25zLm1hcChmdW5jdGlvbihkcm9wZG93bikge1xuICAgICAgICByZXR1cm4gZHJvcGRvd24uc2NvcGU7XG4gICAgICB9KTtcbiAgICAgIGlmIChvcGVuZWRTY29wZXMuaW5kZXhPZihkcm9wZG93blNjb3BlKSA9PT0gLTEpIHtcbiAgICAgICAgb3BlbmVkQ29udGFpbmVycy5wdXQoYXBwZW5kVG8sIHtcbiAgICAgICAgICBzY29wZTogZHJvcGRvd25TY29wZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3BlbmVkQ29udGFpbmVycy5wdXQoYXBwZW5kVG8sIHtcbiAgICAgICAgc2NvcGU6IGRyb3Bkb3duU2NvcGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmNsb3NlID0gZnVuY3Rpb24oZHJvcGRvd25TY29wZSwgZWxlbWVudCwgYXBwZW5kVG8pIHtcbiAgICBpZiAob3BlblNjb3BlID09PSBkcm9wZG93blNjb3BlKSB7XG4gICAgICAkZG9jdW1lbnQub2ZmKCdjbGljaycsIGNsb3NlRHJvcGRvd24pO1xuICAgICAgJGRvY3VtZW50Lm9mZigna2V5ZG93bicsIHRoaXMua2V5YmluZEZpbHRlcik7XG4gICAgICBvcGVuU2NvcGUgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICghYXBwZW5kVG8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3BlbmVkRHJvcGRvd25zID0gb3BlbmVkQ29udGFpbmVycy5nZXQoYXBwZW5kVG8pO1xuICAgIGlmIChvcGVuZWREcm9wZG93bnMpIHtcbiAgICAgIHZhciBkcm9wZG93blRvQ2xvc2UgPSBvcGVuZWREcm9wZG93bnMucmVkdWNlKGZ1bmN0aW9uKHRvQ2xvc2UsIGRyb3Bkb3duKSB7XG4gICAgICAgIGlmIChkcm9wZG93bi5zY29wZSA9PT0gZHJvcGRvd25TY29wZSkge1xuICAgICAgICAgIHJldHVybiBkcm9wZG93bjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b0Nsb3NlO1xuICAgICAgfSwge30pO1xuICAgICAgaWYgKGRyb3Bkb3duVG9DbG9zZSkge1xuICAgICAgICBvcGVuZWRDb250YWluZXJzLnJlbW92ZShhcHBlbmRUbywgZHJvcGRvd25Ub0Nsb3NlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGNsb3NlRHJvcGRvd24gPSBmdW5jdGlvbihldnQpIHtcbiAgICAvLyBUaGlzIG1ldGhvZCBtYXkgc3RpbGwgYmUgY2FsbGVkIGR1cmluZyB0aGUgc2FtZSBtb3VzZSBldmVudCB0aGF0XG4gICAgLy8gdW5ib3VuZCB0aGlzIGV2ZW50IGhhbmRsZXIuIFNvIGNoZWNrIG9wZW5TY29wZSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgICBpZiAoIW9wZW5TY29wZSB8fCAhb3BlblNjb3BlLmlzT3BlbikgeyByZXR1cm47IH1cblxuICAgIGlmIChldnQgJiYgb3BlblNjb3BlLmdldEF1dG9DbG9zZSgpID09PSAnZGlzYWJsZWQnKSB7IHJldHVybjsgfVxuXG4gICAgaWYgKGV2dCAmJiBldnQud2hpY2ggPT09IDMpIHsgcmV0dXJuOyB9XG5cbiAgICB2YXIgdG9nZ2xlRWxlbWVudCA9IG9wZW5TY29wZS5nZXRUb2dnbGVFbGVtZW50KCk7XG4gICAgaWYgKGV2dCAmJiB0b2dnbGVFbGVtZW50ICYmIHRvZ2dsZUVsZW1lbnRbMF0uY29udGFpbnMoZXZ0LnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZHJvcGRvd25FbGVtZW50ID0gb3BlblNjb3BlLmdldERyb3Bkb3duRWxlbWVudCgpO1xuICAgIGlmIChldnQgJiYgb3BlblNjb3BlLmdldEF1dG9DbG9zZSgpID09PSAnb3V0c2lkZUNsaWNrJyAmJlxuICAgICAgZHJvcGRvd25FbGVtZW50ICYmIGRyb3Bkb3duRWxlbWVudFswXS5jb250YWlucyhldnQudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9wZW5TY29wZS5mb2N1c1RvZ2dsZUVsZW1lbnQoKTtcbiAgICBvcGVuU2NvcGUuaXNPcGVuID0gZmFsc2U7XG5cbiAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgb3BlblNjb3BlLiRhcHBseSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmtleWJpbmRGaWx0ZXIgPSBmdW5jdGlvbihldnQpIHtcbiAgICBpZiAoIW9wZW5TY29wZSkge1xuICAgICAgLy8gc2VlIHRoaXMuY2xvc2UgYXMgRVNDIGNvdWxkIGhhdmUgYmVlbiBwcmVzc2VkIHdoaWNoIGtpbGxzIHRoZSBzY29wZSBzbyB3ZSBjYW4gbm90IHByb2NlZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZHJvcGRvd25FbGVtZW50ID0gb3BlblNjb3BlLmdldERyb3Bkb3duRWxlbWVudCgpO1xuICAgIHZhciB0b2dnbGVFbGVtZW50ID0gb3BlblNjb3BlLmdldFRvZ2dsZUVsZW1lbnQoKTtcbiAgICB2YXIgZHJvcGRvd25FbGVtZW50VGFyZ2V0ZWQgPSBkcm9wZG93bkVsZW1lbnQgJiYgZHJvcGRvd25FbGVtZW50WzBdLmNvbnRhaW5zKGV2dC50YXJnZXQpO1xuICAgIHZhciB0b2dnbGVFbGVtZW50VGFyZ2V0ZWQgPSB0b2dnbGVFbGVtZW50ICYmIHRvZ2dsZUVsZW1lbnRbMF0uY29udGFpbnMoZXZ0LnRhcmdldCk7XG4gICAgaWYgKGV2dC53aGljaCA9PT0gMjcpIHtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIG9wZW5TY29wZS5mb2N1c1RvZ2dsZUVsZW1lbnQoKTtcbiAgICAgIGNsb3NlRHJvcGRvd24oKTtcbiAgICB9IGVsc2UgaWYgKG9wZW5TY29wZS5pc0tleW5hdkVuYWJsZWQoKSAmJiBbMzgsIDQwXS5pbmRleE9mKGV2dC53aGljaCkgIT09IC0xICYmIG9wZW5TY29wZS5pc09wZW4gJiYgKGRyb3Bkb3duRWxlbWVudFRhcmdldGVkIHx8IHRvZ2dsZUVsZW1lbnRUYXJnZXRlZCkpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgb3BlblNjb3BlLmZvY3VzRHJvcGRvd25FbnRyeShldnQud2hpY2gpO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4uY29udHJvbGxlcignVWliRHJvcGRvd25Db250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRwYXJzZScsICd1aWJEcm9wZG93bkNvbmZpZycsICd1aWJEcm9wZG93blNlcnZpY2UnLCAnJGFuaW1hdGUnLCAnJHVpYlBvc2l0aW9uJywgJyRkb2N1bWVudCcsICckY29tcGlsZScsICckdGVtcGxhdGVSZXF1ZXN0JywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkcGFyc2UsIGRyb3Bkb3duQ29uZmlnLCB1aWJEcm9wZG93blNlcnZpY2UsICRhbmltYXRlLCAkcG9zaXRpb24sICRkb2N1bWVudCwgJGNvbXBpbGUsICR0ZW1wbGF0ZVJlcXVlc3QpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgIHNjb3BlID0gJHNjb3BlLiRuZXcoKSwgLy8gY3JlYXRlIGEgY2hpbGQgc2NvcGUgc28gd2UgYXJlIG5vdCBwb2xsdXRpbmcgb3JpZ2luYWwgb25lXG4gICAgdGVtcGxhdGVTY29wZSxcbiAgICBhcHBlbmRUb09wZW5DbGFzcyA9IGRyb3Bkb3duQ29uZmlnLmFwcGVuZFRvT3BlbkNsYXNzLFxuICAgIG9wZW5DbGFzcyA9IGRyb3Bkb3duQ29uZmlnLm9wZW5DbGFzcyxcbiAgICBnZXRJc09wZW4sXG4gICAgc2V0SXNPcGVuID0gYW5ndWxhci5ub29wLFxuICAgIHRvZ2dsZUludm9rZXIgPSAkYXR0cnMub25Ub2dnbGUgPyAkcGFyc2UoJGF0dHJzLm9uVG9nZ2xlKSA6IGFuZ3VsYXIubm9vcCxcbiAgICBrZXluYXZFbmFibGVkID0gZmFsc2UsXG4gICAgc2VsZWN0ZWRPcHRpb24gPSBudWxsLFxuICAgIGJvZHkgPSAkZG9jdW1lbnQuZmluZCgnYm9keScpO1xuXG4gICRlbGVtZW50LmFkZENsYXNzKCdkcm9wZG93bicpO1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICgkYXR0cnMuaXNPcGVuKSB7XG4gICAgICBnZXRJc09wZW4gPSAkcGFyc2UoJGF0dHJzLmlzT3Blbik7XG4gICAgICBzZXRJc09wZW4gPSBnZXRJc09wZW4uYXNzaWduO1xuXG4gICAgICAkc2NvcGUuJHdhdGNoKGdldElzT3BlbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgc2NvcGUuaXNPcGVuID0gISF2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGtleW5hdkVuYWJsZWQgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMua2V5Ym9hcmROYXYpO1xuICB9O1xuXG4gIHRoaXMudG9nZ2xlID0gZnVuY3Rpb24ob3Blbikge1xuICAgIHNjb3BlLmlzT3BlbiA9IGFyZ3VtZW50cy5sZW5ndGggPyAhIW9wZW4gOiAhc2NvcGUuaXNPcGVuO1xuICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24oc2V0SXNPcGVuKSkge1xuICAgICAgc2V0SXNPcGVuKHNjb3BlLCBzY29wZS5pc09wZW4pO1xuICAgIH1cblxuICAgIHJldHVybiBzY29wZS5pc09wZW47XG4gIH07XG5cbiAgLy8gQWxsb3cgb3RoZXIgZGlyZWN0aXZlcyB0byB3YXRjaCBzdGF0dXNcbiAgdGhpcy5pc09wZW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2NvcGUuaXNPcGVuO1xuICB9O1xuXG4gIHNjb3BlLmdldFRvZ2dsZUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi50b2dnbGVFbGVtZW50O1xuICB9O1xuXG4gIHNjb3BlLmdldEF1dG9DbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkYXR0cnMuYXV0b0Nsb3NlIHx8ICdhbHdheXMnOyAvL29yICdvdXRzaWRlQ2xpY2snIG9yICdkaXNhYmxlZCdcbiAgfTtcblxuICBzY29wZS5nZXRFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICRlbGVtZW50O1xuICB9O1xuXG4gIHNjb3BlLmlzS2V5bmF2RW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBrZXluYXZFbmFibGVkO1xuICB9O1xuXG4gIHNjb3BlLmZvY3VzRHJvcGRvd25FbnRyeSA9IGZ1bmN0aW9uKGtleUNvZGUpIHtcbiAgICB2YXIgZWxlbXMgPSBzZWxmLmRyb3Bkb3duTWVudSA/IC8vSWYgYXBwZW5kIHRvIGJvZHkgaXMgdXNlZC5cbiAgICAgIGFuZ3VsYXIuZWxlbWVudChzZWxmLmRyb3Bkb3duTWVudSkuZmluZCgnYScpIDpcbiAgICAgICRlbGVtZW50LmZpbmQoJ3VsJykuZXEoMCkuZmluZCgnYScpO1xuXG4gICAgc3dpdGNoIChrZXlDb2RlKSB7XG4gICAgICBjYXNlIDQwOiB7XG4gICAgICAgIGlmICghYW5ndWxhci5pc051bWJlcihzZWxmLnNlbGVjdGVkT3B0aW9uKSkge1xuICAgICAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gPSBzZWxmLnNlbGVjdGVkT3B0aW9uID09PSBlbGVtcy5sZW5ndGggLSAxID9cbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gOlxuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiArIDE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDM4OiB7XG4gICAgICAgIGlmICghYW5ndWxhci5pc051bWJlcihzZWxmLnNlbGVjdGVkT3B0aW9uKSkge1xuICAgICAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gPSBlbGVtcy5sZW5ndGggLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gPSBzZWxmLnNlbGVjdGVkT3B0aW9uID09PSAwID9cbiAgICAgICAgICAgIDAgOiBzZWxmLnNlbGVjdGVkT3B0aW9uIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgZWxlbXNbc2VsZi5zZWxlY3RlZE9wdGlvbl0uZm9jdXMoKTtcbiAgfTtcblxuICBzY29wZS5nZXREcm9wZG93bkVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5kcm9wZG93bk1lbnU7XG4gIH07XG5cbiAgc2NvcGUuZm9jdXNUb2dnbGVFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYudG9nZ2xlRWxlbWVudCkge1xuICAgICAgc2VsZi50b2dnbGVFbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHJlbW92ZURyb3Bkb3duTWVudSgpIHtcbiAgICAkZWxlbWVudC5hcHBlbmQoc2VsZi5kcm9wZG93bk1lbnUpO1xuICB9XG5cbiAgc2NvcGUuJHdhdGNoKCdpc09wZW4nLCBmdW5jdGlvbihpc09wZW4sIHdhc09wZW4pIHtcbiAgICB2YXIgYXBwZW5kVG8gPSBudWxsLFxuICAgICAgYXBwZW5kVG9Cb2R5ID0gZmFsc2U7XG5cbiAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmRyb3Bkb3duQXBwZW5kVG8pKSB7XG4gICAgICB2YXIgYXBwZW5kVG9FbCA9ICRwYXJzZSgkYXR0cnMuZHJvcGRvd25BcHBlbmRUbykoc2NvcGUpO1xuICAgICAgaWYgKGFwcGVuZFRvRWwpIHtcbiAgICAgICAgYXBwZW5kVG8gPSBhbmd1bGFyLmVsZW1lbnQoYXBwZW5kVG9FbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kcm9wZG93bkFwcGVuZFRvQm9keSkpIHtcbiAgICAgIHZhciBhcHBlbmRUb0JvZHlWYWx1ZSA9ICRwYXJzZSgkYXR0cnMuZHJvcGRvd25BcHBlbmRUb0JvZHkpKHNjb3BlKTtcbiAgICAgIGlmIChhcHBlbmRUb0JvZHlWYWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgYXBwZW5kVG9Cb2R5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXBwZW5kVG9Cb2R5ICYmICFhcHBlbmRUbykge1xuICAgICAgYXBwZW5kVG8gPSBib2R5O1xuICAgIH1cblxuICAgIGlmIChhcHBlbmRUbyAmJiBzZWxmLmRyb3Bkb3duTWVudSkge1xuICAgICAgaWYgKGlzT3Blbikge1xuICAgICAgICBhcHBlbmRUby5hcHBlbmQoc2VsZi5kcm9wZG93bk1lbnUpO1xuICAgICAgICAkZWxlbWVudC5vbignJGRlc3Ryb3knLCByZW1vdmVEcm9wZG93bk1lbnUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGVsZW1lbnQub2ZmKCckZGVzdHJveScsIHJlbW92ZURyb3Bkb3duTWVudSk7XG4gICAgICAgIHJlbW92ZURyb3Bkb3duTWVudSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhcHBlbmRUbyAmJiBzZWxmLmRyb3Bkb3duTWVudSkge1xuICAgICAgdmFyIHBvcyA9ICRwb3NpdGlvbi5wb3NpdGlvbkVsZW1lbnRzKCRlbGVtZW50LCBzZWxmLmRyb3Bkb3duTWVudSwgJ2JvdHRvbS1sZWZ0JywgdHJ1ZSksXG4gICAgICAgIGNzcyxcbiAgICAgICAgcmlnaHRhbGlnbixcbiAgICAgICAgc2Nyb2xsYmFyUGFkZGluZyxcbiAgICAgICAgc2Nyb2xsYmFyV2lkdGggPSAwO1xuXG4gICAgICBjc3MgPSB7XG4gICAgICAgIHRvcDogcG9zLnRvcCArICdweCcsXG4gICAgICAgIGRpc3BsYXk6IGlzT3BlbiA/ICdibG9jaycgOiAnbm9uZSdcbiAgICAgIH07XG5cbiAgICAgIHJpZ2h0YWxpZ24gPSBzZWxmLmRyb3Bkb3duTWVudS5oYXNDbGFzcygnZHJvcGRvd24tbWVudS1yaWdodCcpO1xuICAgICAgaWYgKCFyaWdodGFsaWduKSB7XG4gICAgICAgIGNzcy5sZWZ0ID0gcG9zLmxlZnQgKyAncHgnO1xuICAgICAgICBjc3MucmlnaHQgPSAnYXV0byc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjc3MubGVmdCA9ICdhdXRvJztcbiAgICAgICAgc2Nyb2xsYmFyUGFkZGluZyA9ICRwb3NpdGlvbi5zY3JvbGxiYXJQYWRkaW5nKGFwcGVuZFRvKTtcblxuICAgICAgICBpZiAoc2Nyb2xsYmFyUGFkZGluZy5oZWlnaHRPdmVyZmxvdyAmJiBzY3JvbGxiYXJQYWRkaW5nLnNjcm9sbGJhcldpZHRoKSB7XG4gICAgICAgICAgc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxiYXJQYWRkaW5nLnNjcm9sbGJhcldpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgY3NzLnJpZ2h0ID0gd2luZG93LmlubmVyV2lkdGggLSBzY3JvbGxiYXJXaWR0aCAtXG4gICAgICAgICAgKHBvcy5sZWZ0ICsgJGVsZW1lbnQucHJvcCgnb2Zmc2V0V2lkdGgnKSkgKyAncHgnO1xuICAgICAgfVxuXG4gICAgICAvLyBOZWVkIHRvIGFkanVzdCBvdXIgcG9zaXRpb25pbmcgdG8gYmUgcmVsYXRpdmUgdG8gdGhlIGFwcGVuZFRvIGNvbnRhaW5lclxuICAgICAgLy8gaWYgaXQncyBub3QgdGhlIGJvZHkgZWxlbWVudFxuICAgICAgaWYgKCFhcHBlbmRUb0JvZHkpIHtcbiAgICAgICAgdmFyIGFwcGVuZE9mZnNldCA9ICRwb3NpdGlvbi5vZmZzZXQoYXBwZW5kVG8pO1xuXG4gICAgICAgIGNzcy50b3AgPSBwb3MudG9wIC0gYXBwZW5kT2Zmc2V0LnRvcCArICdweCc7XG5cbiAgICAgICAgaWYgKCFyaWdodGFsaWduKSB7XG4gICAgICAgICAgY3NzLmxlZnQgPSBwb3MubGVmdCAtIGFwcGVuZE9mZnNldC5sZWZ0ICsgJ3B4JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjc3MucmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aCAtXG4gICAgICAgICAgICAocG9zLmxlZnQgLSBhcHBlbmRPZmZzZXQubGVmdCArICRlbGVtZW50LnByb3AoJ29mZnNldFdpZHRoJykpICsgJ3B4JztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWxmLmRyb3Bkb3duTWVudS5jc3MoY3NzKTtcbiAgICB9XG5cbiAgICB2YXIgb3BlbkNvbnRhaW5lciA9IGFwcGVuZFRvID8gYXBwZW5kVG8gOiAkZWxlbWVudDtcbiAgICB2YXIgZHJvcGRvd25PcGVuQ2xhc3MgPSBhcHBlbmRUbyA/IGFwcGVuZFRvT3BlbkNsYXNzIDogb3BlbkNsYXNzO1xuICAgIHZhciBoYXNPcGVuQ2xhc3MgPSBvcGVuQ29udGFpbmVyLmhhc0NsYXNzKGRyb3Bkb3duT3BlbkNsYXNzKTtcbiAgICB2YXIgaXNPbmx5T3BlbiA9IHVpYkRyb3Bkb3duU2VydmljZS5pc09ubHlPcGVuKCRzY29wZSwgYXBwZW5kVG8pO1xuXG4gICAgaWYgKGhhc09wZW5DbGFzcyA9PT0gIWlzT3Blbikge1xuICAgICAgdmFyIHRvZ2dsZUNsYXNzO1xuICAgICAgaWYgKGFwcGVuZFRvKSB7XG4gICAgICAgIHRvZ2dsZUNsYXNzID0gIWlzT25seU9wZW4gPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvZ2dsZUNsYXNzID0gaXNPcGVuID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyc7XG4gICAgICB9XG4gICAgICAkYW5pbWF0ZVt0b2dnbGVDbGFzc10ob3BlbkNvbnRhaW5lciwgZHJvcGRvd25PcGVuQ2xhc3MpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpc09wZW4pICYmIGlzT3BlbiAhPT0gd2FzT3Blbikge1xuICAgICAgICAgIHRvZ2dsZUludm9rZXIoJHNjb3BlLCB7IG9wZW46ICEhaXNPcGVuIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNPcGVuKSB7XG4gICAgICBpZiAoc2VsZi5kcm9wZG93bk1lbnVUZW1wbGF0ZVVybCkge1xuICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0KHNlbGYuZHJvcGRvd25NZW51VGVtcGxhdGVVcmwpLnRoZW4oZnVuY3Rpb24odHBsQ29udGVudCkge1xuICAgICAgICAgIHRlbXBsYXRlU2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgJGNvbXBpbGUodHBsQ29udGVudC50cmltKCkpKHRlbXBsYXRlU2NvcGUsIGZ1bmN0aW9uKGRyb3Bkb3duRWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIG5ld0VsID0gZHJvcGRvd25FbGVtZW50O1xuICAgICAgICAgICAgc2VsZi5kcm9wZG93bk1lbnUucmVwbGFjZVdpdGgobmV3RWwpO1xuICAgICAgICAgICAgc2VsZi5kcm9wZG93bk1lbnUgPSBuZXdFbDtcbiAgICAgICAgICAgICRkb2N1bWVudC5vbigna2V5ZG93bicsIHVpYkRyb3Bkb3duU2VydmljZS5rZXliaW5kRmlsdGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZG9jdW1lbnQub24oJ2tleWRvd24nLCB1aWJEcm9wZG93blNlcnZpY2Uua2V5YmluZEZpbHRlcik7XG4gICAgICB9XG5cbiAgICAgIHNjb3BlLmZvY3VzVG9nZ2xlRWxlbWVudCgpO1xuICAgICAgdWliRHJvcGRvd25TZXJ2aWNlLm9wZW4oc2NvcGUsICRlbGVtZW50LCBhcHBlbmRUbyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVpYkRyb3Bkb3duU2VydmljZS5jbG9zZShzY29wZSwgJGVsZW1lbnQsIGFwcGVuZFRvKTtcbiAgICAgIGlmIChzZWxmLmRyb3Bkb3duTWVudVRlbXBsYXRlVXJsKSB7XG4gICAgICAgIGlmICh0ZW1wbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgdGVtcGxhdGVTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdFbCA9IGFuZ3VsYXIuZWxlbWVudCgnPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiPjwvdWw+Jyk7XG4gICAgICAgIHNlbGYuZHJvcGRvd25NZW51LnJlcGxhY2VXaXRoKG5ld0VsKTtcbiAgICAgICAgc2VsZi5kcm9wZG93bk1lbnUgPSBuZXdFbDtcbiAgICAgIH1cblxuICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihzZXRJc09wZW4pKSB7XG4gICAgICBzZXRJc09wZW4oJHNjb3BlLCBpc09wZW4pO1xuICAgIH1cbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliRHJvcGRvd24nLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVyOiAnVWliRHJvcGRvd25Db250cm9sbGVyJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGRyb3Bkb3duQ3RybCkge1xuICAgICAgZHJvcGRvd25DdHJsLmluaXQoKTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJEcm9wZG93bk1lbnUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/XnVpYkRyb3Bkb3duJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGRyb3Bkb3duQ3RybCkge1xuICAgICAgaWYgKCFkcm9wZG93bkN0cmwgfHwgYW5ndWxhci5pc0RlZmluZWQoYXR0cnMuZHJvcGRvd25OZXN0ZWQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5hZGRDbGFzcygnZHJvcGRvd24tbWVudScpO1xuXG4gICAgICB2YXIgdHBsVXJsID0gYXR0cnMudGVtcGxhdGVVcmw7XG4gICAgICBpZiAodHBsVXJsKSB7XG4gICAgICAgIGRyb3Bkb3duQ3RybC5kcm9wZG93bk1lbnVUZW1wbGF0ZVVybCA9IHRwbFVybDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkcm9wZG93bkN0cmwuZHJvcGRvd25NZW51KSB7XG4gICAgICAgIGRyb3Bkb3duQ3RybC5kcm9wZG93bk1lbnUgPSBlbGVtZW50O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYkRyb3Bkb3duVG9nZ2xlJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJz9edWliRHJvcGRvd24nLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgZHJvcGRvd25DdHJsKSB7XG4gICAgICBpZiAoIWRyb3Bkb3duQ3RybCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2Ryb3Bkb3duLXRvZ2dsZScpO1xuXG4gICAgICBkcm9wZG93bkN0cmwudG9nZ2xlRWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICAgIHZhciB0b2dnbGVEcm9wZG93biA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50Lmhhc0NsYXNzKCdkaXNhYmxlZCcpICYmICFhdHRycy5kaXNhYmxlZCkge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duQ3RybC50b2dnbGUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZWxlbWVudC5vbignY2xpY2snLCB0b2dnbGVEcm9wZG93bik7XG5cbiAgICAgIC8vIFdBSS1BUklBXG4gICAgICBlbGVtZW50LmF0dHIoeyAnYXJpYS1oYXNwb3B1cCc6IHRydWUsICdhcmlhLWV4cGFuZGVkJzogZmFsc2UgfSk7XG4gICAgICBzY29wZS4kd2F0Y2goZHJvcGRvd25DdHJsLmlzT3BlbiwgZnVuY3Rpb24oaXNPcGVuKSB7XG4gICAgICAgIGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsICEhaXNPcGVuKTtcbiAgICAgIH0pO1xuXG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQub2ZmKCdjbGljaycsIHRvZ2dsZURyb3Bkb3duKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnN0YWNrZWRNYXAnLCBbXSlcbi8qKlxuICogQSBoZWxwZXIsIGludGVybmFsIGRhdGEgc3RydWN0dXJlIHRoYXQgYWN0cyBhcyBhIG1hcCBidXQgYWxzbyBhbGxvd3MgZ2V0dGluZyAvIHJlbW92aW5nXG4gKiBlbGVtZW50cyBpbiB0aGUgTElGTyBvcmRlclxuICovXG4gIC5mYWN0b3J5KCckJHN0YWNrZWRNYXAnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlTmV3OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YWNrID0gW107XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhZGQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChrZXkgPT09IHN0YWNrW2ldLmtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGFja1tpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBrZXlzLnB1c2goc3RhY2tbaV0ua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICB2YXIgaWR4ID0gLTE7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChrZXkgPT09IHN0YWNrW2ldLmtleSkge1xuICAgICAgICAgICAgICAgIGlkeCA9IGk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdGFjay5zcGxpY2UoaWR4LCAxKVswXTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlbW92ZVRvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2sucG9wKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBsZW5ndGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLm1vZGFsJywgWyd1aS5ib290c3RyYXAubXVsdGlNYXAnLCAndWkuYm9vdHN0cmFwLnN0YWNrZWRNYXAnLCAndWkuYm9vdHN0cmFwLnBvc2l0aW9uJ10pXG4vKipcbiAqIFBsdWdnYWJsZSByZXNvbHZlIG1lY2hhbmlzbSBmb3IgdGhlIG1vZGFsIHJlc29sdmUgcmVzb2x1dGlvblxuICogU3VwcG9ydHMgVUkgUm91dGVyJ3MgJHJlc29sdmUgc2VydmljZVxuICovXG4gIC5wcm92aWRlcignJHVpYlJlc29sdmUnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzb2x2ZSA9IHRoaXM7XG4gICAgdGhpcy5yZXNvbHZlciA9IG51bGw7XG5cbiAgICB0aGlzLnNldFJlc29sdmVyID0gZnVuY3Rpb24ocmVzb2x2ZXIpIHtcbiAgICAgIHRoaXMucmVzb2x2ZXIgPSByZXNvbHZlcjtcbiAgICB9O1xuXG4gICAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJHEnLCBmdW5jdGlvbigkaW5qZWN0b3IsICRxKSB7XG4gICAgICB2YXIgcmVzb2x2ZXIgPSByZXNvbHZlLnJlc29sdmVyID8gJGluamVjdG9yLmdldChyZXNvbHZlLnJlc29sdmVyKSA6IG51bGw7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbihpbnZvY2FibGVzLCBsb2NhbHMsIHBhcmVudCwgc2VsZikge1xuICAgICAgICAgIGlmIChyZXNvbHZlcikge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVyLnJlc29sdmUoaW52b2NhYmxlcywgbG9jYWxzLCBwYXJlbnQsIHNlbGYpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xuXG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGludm9jYWJsZXMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHZhbHVlKSB8fCBhbmd1bGFyLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHByb21pc2VzLnB1c2goJHEucmVzb2x2ZSgkaW5qZWN0b3IuaW52b2tlKHZhbHVlKSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbmd1bGFyLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKCRxLnJlc29sdmUoJGluamVjdG9yLmdldCh2YWx1ZSkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHByb21pc2VzLnB1c2goJHEucmVzb2x2ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuICRxLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihyZXNvbHZlcykge1xuICAgICAgICAgICAgdmFyIHJlc29sdmVPYmogPSB7fTtcbiAgICAgICAgICAgIHZhciByZXNvbHZlSXRlciA9IDA7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goaW52b2NhYmxlcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICByZXNvbHZlT2JqW2tleV0gPSByZXNvbHZlc1tyZXNvbHZlSXRlcisrXTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZU9iajtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XTtcbiAgfSlcblxuLyoqXG4gKiBBIGhlbHBlciBkaXJlY3RpdmUgZm9yIHRoZSAkbW9kYWwgc2VydmljZS4gSXQgY3JlYXRlcyBhIGJhY2tkcm9wIGVsZW1lbnQuXG4gKi9cbiAgLmRpcmVjdGl2ZSgndWliTW9kYWxCYWNrZHJvcCcsIFsnJGFuaW1hdGUnLCAnJGluamVjdG9yJywgJyR1aWJNb2RhbFN0YWNrJyxcbiAgZnVuY3Rpb24oJGFuaW1hdGUsICRpbmplY3RvciwgJG1vZGFsU3RhY2spIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgICAgdEVsZW1lbnQuYWRkQ2xhc3ModEF0dHJzLmJhY2tkcm9wQ2xhc3MpO1xuICAgICAgICByZXR1cm4gbGlua0ZuO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICBpZiAoYXR0cnMubW9kYWxJbkNsYXNzKSB7XG4gICAgICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsIGF0dHJzLm1vZGFsSW5DbGFzcyk7XG5cbiAgICAgICAgc2NvcGUuJG9uKCRtb2RhbFN0YWNrLk5PV19DTE9TSU5HX0VWRU5ULCBmdW5jdGlvbihlLCBzZXRJc0FzeW5jKSB7XG4gICAgICAgICAgdmFyIGRvbmUgPSBzZXRJc0FzeW5jKCk7XG4gICAgICAgICAgaWYgKHNjb3BlLm1vZGFsT3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIGF0dHJzLm1vZGFsSW5DbGFzcykudGhlbihkb25lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XSlcblxuICAuZGlyZWN0aXZlKCd1aWJNb2RhbFdpbmRvdycsIFsnJHVpYk1vZGFsU3RhY2snLCAnJHEnLCAnJGFuaW1hdGVDc3MnLCAnJGRvY3VtZW50JyxcbiAgZnVuY3Rpb24oJG1vZGFsU3RhY2ssICRxLCAkYW5pbWF0ZUNzcywgJGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGluZGV4OiAnQCdcbiAgICAgIH0sXG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICAgIHJldHVybiB0QXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9tb2RhbC93aW5kb3cuaHRtbCc7XG4gICAgICB9LFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoYXR0cnMud2luZG93VG9wQ2xhc3MgfHwgJycpO1xuICAgICAgICBzY29wZS5zaXplID0gYXR0cnMuc2l6ZTtcblxuICAgICAgICBzY29wZS5jbG9zZSA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgIHZhciBtb2RhbCA9ICRtb2RhbFN0YWNrLmdldFRvcCgpO1xuICAgICAgICAgIGlmIChtb2RhbCAmJiBtb2RhbC52YWx1ZS5iYWNrZHJvcCAmJlxuICAgICAgICAgICAgbW9kYWwudmFsdWUuYmFja2Ryb3AgIT09ICdzdGF0aWMnICYmXG4gICAgICAgICAgICBldnQudGFyZ2V0ID09PSBldnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAkbW9kYWxTdGFjay5kaXNtaXNzKG1vZGFsLmtleSwgJ2JhY2tkcm9wIGNsaWNrJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIG1vdmVkIGZyb20gdGVtcGxhdGUgdG8gZml4IGlzc3VlICMyMjgwXG4gICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgc2NvcGUuY2xvc2UpO1xuXG4gICAgICAgIC8vIFRoaXMgcHJvcGVydHkgaXMgb25seSBhZGRlZCB0byB0aGUgc2NvcGUgZm9yIHRoZSBwdXJwb3NlIG9mIGRldGVjdGluZyB3aGVuIHRoaXMgZGlyZWN0aXZlIGlzIHJlbmRlcmVkLlxuICAgICAgICAvLyBXZSBjYW4gZGV0ZWN0IHRoYXQgYnkgdXNpbmcgdGhpcyBwcm9wZXJ0eSBpbiB0aGUgdGVtcGxhdGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZGlyZWN0aXZlIGFuZCB0aGVuIHVzZVxuICAgICAgICAvLyB7QGxpbmsgQXR0cmlidXRlIyRvYnNlcnZlfSBvbiBpdC4gRm9yIG1vcmUgZGV0YWlscyBwbGVhc2Ugc2VlIHtAbGluayBUYWJsZUNvbHVtblJlc2l6ZX0uXG4gICAgICAgIHNjb3BlLiRpc1JlbmRlcmVkID0gdHJ1ZTtcblxuICAgICAgICAvLyBEZWZlcnJlZCBvYmplY3QgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdoZW4gdGhpcyBtb2RhbCBpcyByZW5kZXJlZC5cbiAgICAgICAgdmFyIG1vZGFsUmVuZGVyRGVmZXJPYmogPSAkcS5kZWZlcigpO1xuICAgICAgICAvLyBSZXNvbHZlIHJlbmRlciBwcm9taXNlIHBvc3QtZGlnZXN0XG4gICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICBtb2RhbFJlbmRlckRlZmVyT2JqLnJlc29sdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbW9kYWxSZW5kZXJEZWZlck9iai5wcm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFuaW1hdGlvblByb21pc2UgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGF0dHJzLm1vZGFsSW5DbGFzcykge1xuICAgICAgICAgICAgYW5pbWF0aW9uUHJvbWlzZSA9ICRhbmltYXRlQ3NzKGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgYWRkQ2xhc3M6IGF0dHJzLm1vZGFsSW5DbGFzc1xuICAgICAgICAgICAgfSkuc3RhcnQoKTtcblxuICAgICAgICAgICAgc2NvcGUuJG9uKCRtb2RhbFN0YWNrLk5PV19DTE9TSU5HX0VWRU5ULCBmdW5jdGlvbihlLCBzZXRJc0FzeW5jKSB7XG4gICAgICAgICAgICAgIHZhciBkb25lID0gc2V0SXNBc3luYygpO1xuICAgICAgICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGF0dHJzLm1vZGFsSW5DbGFzc1xuICAgICAgICAgICAgICB9KS5zdGFydCgpLnRoZW4oZG9uZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cblxuICAgICAgICAgICRxLndoZW4oYW5pbWF0aW9uUHJvbWlzZSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIE5vdGlmeSB7QGxpbmsgJG1vZGFsU3RhY2t9IHRoYXQgbW9kYWwgaXMgcmVuZGVyZWQuXG4gICAgICAgICAgICB2YXIgbW9kYWwgPSAkbW9kYWxTdGFjay5nZXRUb3AoKTtcbiAgICAgICAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICAgICAgICAkbW9kYWxTdGFjay5tb2RhbFJlbmRlcmVkKG1vZGFsLmtleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgc29tZXRoaW5nIHdpdGhpbiB0aGUgZnJlc2hseS1vcGVuZWQgbW9kYWwgYWxyZWFkeSBoYXMgZm9jdXMgKHBlcmhhcHMgdmlhIGFcbiAgICAgICAgICAgICAqIGRpcmVjdGl2ZSB0aGF0IGNhdXNlcyBmb2N1cykgdGhlbiB0aGVyZSdzIG5vIG5lZWQgdG8gdHJ5IHRvIGZvY3VzIGFueXRoaW5nLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoISgkZG9jdW1lbnRbMF0uYWN0aXZlRWxlbWVudCAmJiBlbGVtZW50WzBdLmNvbnRhaW5zKCRkb2N1bWVudFswXS5hY3RpdmVFbGVtZW50KSkpIHtcbiAgICAgICAgICAgICAgdmFyIGlucHV0V2l0aEF1dG9mb2N1cyA9IGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignW2F1dG9mb2N1c10nKTtcbiAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAqIEF1dG8tZm9jdXNpbmcgb2YgYSBmcmVzaGx5LW9wZW5lZCBtb2RhbCBlbGVtZW50IGNhdXNlcyBhbnkgY2hpbGQgZWxlbWVudHNcbiAgICAgICAgICAgICAgICogd2l0aCB0aGUgYXV0b2ZvY3VzIGF0dHJpYnV0ZSB0byBsb3NlIGZvY3VzLiBUaGlzIGlzIGFuIGlzc3VlIG9uIHRvdWNoXG4gICAgICAgICAgICAgICAqIGJhc2VkIGRldmljZXMgd2hpY2ggd2lsbCBzaG93IGFuZCB0aGVuIGhpZGUgdGhlIG9uc2NyZWVuIGtleWJvYXJkLlxuICAgICAgICAgICAgICAgKiBBdHRlbXB0cyB0byByZWZvY3VzIHRoZSBhdXRvZm9jdXMgZWxlbWVudCB2aWEgSmF2YVNjcmlwdCB3aWxsIG5vdCByZW9wZW5cbiAgICAgICAgICAgICAgICogdGhlIG9uc2NyZWVuIGtleWJvYXJkLiBGaXhlZCBieSB1cGRhdGVkIHRoZSBmb2N1c2luZyBsb2dpYyB0byBvbmx5IGF1dG9mb2N1c1xuICAgICAgICAgICAgICAgKiB0aGUgbW9kYWwgZWxlbWVudCBpZiB0aGUgbW9kYWwgZG9lcyBub3QgY29udGFpbiBhbiBhdXRvZm9jdXMgZWxlbWVudC5cbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIGlmIChpbnB1dFdpdGhBdXRvZm9jdXMpIHtcbiAgICAgICAgICAgICAgICBpbnB1dFdpdGhBdXRvZm9jdXMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pXG5cbiAgLmRpcmVjdGl2ZSgndWliTW9kYWxBbmltYXRpb25DbGFzcycsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb21waWxlOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICAgIGlmICh0QXR0cnMubW9kYWxBbmltYXRpb24pIHtcbiAgICAgICAgICB0RWxlbWVudC5hZGRDbGFzcyh0QXR0cnMudWliTW9kYWxBbmltYXRpb25DbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KVxuXG4gIC5kaXJlY3RpdmUoJ3VpYk1vZGFsVHJhbnNjbHVkZScsIFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXIsIHRyYW5zY2x1ZGUpIHtcbiAgICAgICAgdHJhbnNjbHVkZShzY29wZS4kcGFyZW50LCBmdW5jdGlvbihjbG9uZSkge1xuICAgICAgICAgIGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgZWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dKVxuXG4gIC5mYWN0b3J5KCckdWliTW9kYWxTdGFjaycsIFsnJGFuaW1hdGUnLCAnJGFuaW1hdGVDc3MnLCAnJGRvY3VtZW50JyxcbiAgICAnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsICckcScsICckJG11bHRpTWFwJywgJyQkc3RhY2tlZE1hcCcsICckdWliUG9zaXRpb24nLFxuICAgIGZ1bmN0aW9uKCRhbmltYXRlLCAkYW5pbWF0ZUNzcywgJGRvY3VtZW50LCAkY29tcGlsZSwgJHJvb3RTY29wZSwgJHEsICQkbXVsdGlNYXAsICQkc3RhY2tlZE1hcCwgJHVpYlBvc2l0aW9uKSB7XG4gICAgICB2YXIgT1BFTkVEX01PREFMX0NMQVNTID0gJ21vZGFsLW9wZW4nO1xuXG4gICAgICB2YXIgYmFja2Ryb3BEb21FbCwgYmFja2Ryb3BTY29wZTtcbiAgICAgIHZhciBvcGVuZWRXaW5kb3dzID0gJCRzdGFja2VkTWFwLmNyZWF0ZU5ldygpO1xuICAgICAgdmFyIG9wZW5lZENsYXNzZXMgPSAkJG11bHRpTWFwLmNyZWF0ZU5ldygpO1xuICAgICAgdmFyICRtb2RhbFN0YWNrID0ge1xuICAgICAgICBOT1dfQ0xPU0lOR19FVkVOVDogJ21vZGFsLnN0YWNrLm5vdy1jbG9zaW5nJ1xuICAgICAgfTtcbiAgICAgIHZhciB0b3BNb2RhbEluZGV4ID0gMDtcbiAgICAgIHZhciBwcmV2aW91c1RvcE9wZW5lZE1vZGFsID0gbnVsbDtcbiAgICAgIHZhciBBUklBX0hJRERFTl9BVFRSSUJVVEVfTkFNRSA9ICdkYXRhLWJvb3RzdHJhcC1tb2RhbC1hcmlhLWhpZGRlbi1jb3VudCc7XG5cbiAgICAgIC8vTW9kYWwgZm9jdXMgYmVoYXZpb3JcbiAgICAgIHZhciB0YWJiYWJsZVNlbGVjdG9yID0gJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKTpub3QoW3RhYmluZGV4PVxcJy0xXFwnXSksICcgK1xuICAgICAgICAnYnV0dG9uOm5vdChbZGlzYWJsZWRdKTpub3QoW3RhYmluZGV4PVxcJy0xXFwnXSksc2VsZWN0Om5vdChbZGlzYWJsZWRdKTpub3QoW3RhYmluZGV4PVxcJy0xXFwnXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKTpub3QoW3RhYmluZGV4PVxcJy0xXFwnXSksICcgK1xuICAgICAgICAnaWZyYW1lLCBvYmplY3QsIGVtYmVkLCAqW3RhYmluZGV4XTpub3QoW3RhYmluZGV4PVxcJy0xXFwnXSksICpbY29udGVudGVkaXRhYmxlPXRydWVdJztcbiAgICAgIHZhciBzY3JvbGxiYXJQYWRkaW5nO1xuICAgICAgdmFyIFNOQUtFX0NBU0VfUkVHRVhQID0gL1tBLVpdL2c7XG5cbiAgICAgIC8vIFRPRE86IGV4dHJhY3QgaW50byBjb21tb24gZGVwZW5kZW5jeSB3aXRoIHRvb2x0aXBcbiAgICAgIGZ1bmN0aW9uIHNuYWtlX2Nhc2UobmFtZSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJy0nO1xuICAgICAgICByZXR1cm4gbmFtZS5yZXBsYWNlKFNOQUtFX0NBU0VfUkVHRVhQLCBmdW5jdGlvbihsZXR0ZXIsIHBvcykge1xuICAgICAgICAgIHJldHVybiAocG9zID8gc2VwYXJhdG9yIDogJycpICsgbGV0dGVyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpc1Zpc2libGUoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gISEoZWxlbWVudC5vZmZzZXRXaWR0aCB8fFxuICAgICAgICAgIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8XG4gICAgICAgICAgZWxlbWVudC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJhY2tkcm9wSW5kZXgoKSB7XG4gICAgICAgIHZhciB0b3BCYWNrZHJvcEluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvcGVuZWQgPSBvcGVuZWRXaW5kb3dzLmtleXMoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcGVuZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAob3BlbmVkV2luZG93cy5nZXQob3BlbmVkW2ldKS52YWx1ZS5iYWNrZHJvcCkge1xuICAgICAgICAgICAgdG9wQmFja2Ryb3BJbmRleCA9IGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYW55IGJhY2tkcm9wIGV4aXN0LCBlbnN1cmUgdGhhdCBpdCdzIGluZGV4IGlzIGFsd2F5c1xuICAgICAgICAvLyByaWdodCBiZWxvdyB0aGUgdG9wIG1vZGFsXG4gICAgICAgIGlmICh0b3BCYWNrZHJvcEluZGV4ID4gLTEgJiYgdG9wQmFja2Ryb3BJbmRleCA8IHRvcE1vZGFsSW5kZXgpIHtcbiAgICAgICAgICB0b3BCYWNrZHJvcEluZGV4ID0gdG9wTW9kYWxJbmRleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9wQmFja2Ryb3BJbmRleDtcbiAgICAgIH1cblxuICAgICAgJHJvb3RTY29wZS4kd2F0Y2goYmFja2Ryb3BJbmRleCwgZnVuY3Rpb24obmV3QmFja2Ryb3BJbmRleCkge1xuICAgICAgICBpZiAoYmFja2Ryb3BTY29wZSkge1xuICAgICAgICAgIGJhY2tkcm9wU2NvcGUuaW5kZXggPSBuZXdCYWNrZHJvcEluZGV4O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlTW9kYWxXaW5kb3cobW9kYWxJbnN0YW5jZSwgZWxlbWVudFRvUmVjZWl2ZUZvY3VzKSB7XG4gICAgICAgIHZhciBtb2RhbFdpbmRvdyA9IG9wZW5lZFdpbmRvd3MuZ2V0KG1vZGFsSW5zdGFuY2UpLnZhbHVlO1xuICAgICAgICB2YXIgYXBwZW5kVG9FbGVtZW50ID0gbW9kYWxXaW5kb3cuYXBwZW5kVG87XG5cbiAgICAgICAgLy9jbGVhbiB1cCB0aGUgc3RhY2tcbiAgICAgICAgb3BlbmVkV2luZG93cy5yZW1vdmUobW9kYWxJbnN0YW5jZSk7XG4gICAgICAgIHByZXZpb3VzVG9wT3BlbmVkTW9kYWwgPSBvcGVuZWRXaW5kb3dzLnRvcCgpO1xuICAgICAgICBpZiAocHJldmlvdXNUb3BPcGVuZWRNb2RhbCkge1xuICAgICAgICAgIHRvcE1vZGFsSW5kZXggPSBwYXJzZUludChwcmV2aW91c1RvcE9wZW5lZE1vZGFsLnZhbHVlLm1vZGFsRG9tRWwuYXR0cignaW5kZXgnKSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVtb3ZlQWZ0ZXJBbmltYXRlKG1vZGFsV2luZG93Lm1vZGFsRG9tRWwsIG1vZGFsV2luZG93Lm1vZGFsU2NvcGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBtb2RhbEJvZHlDbGFzcyA9IG1vZGFsV2luZG93Lm9wZW5lZENsYXNzIHx8IE9QRU5FRF9NT0RBTF9DTEFTUztcbiAgICAgICAgICBvcGVuZWRDbGFzc2VzLnJlbW92ZShtb2RhbEJvZHlDbGFzcywgbW9kYWxJbnN0YW5jZSk7XG4gICAgICAgICAgdmFyIGFyZUFueU9wZW4gPSBvcGVuZWRDbGFzc2VzLmhhc0tleShtb2RhbEJvZHlDbGFzcyk7XG4gICAgICAgICAgYXBwZW5kVG9FbGVtZW50LnRvZ2dsZUNsYXNzKG1vZGFsQm9keUNsYXNzLCBhcmVBbnlPcGVuKTtcbiAgICAgICAgICBpZiAoIWFyZUFueU9wZW4gJiYgc2Nyb2xsYmFyUGFkZGluZyAmJiBzY3JvbGxiYXJQYWRkaW5nLmhlaWdodE92ZXJmbG93ICYmIHNjcm9sbGJhclBhZGRpbmcuc2Nyb2xsYmFyV2lkdGgpIHtcbiAgICAgICAgICAgIGlmIChzY3JvbGxiYXJQYWRkaW5nLm9yaWdpbmFsUmlnaHQpIHtcbiAgICAgICAgICAgICAgYXBwZW5kVG9FbGVtZW50LmNzcyh7cGFkZGluZ1JpZ2h0OiBzY3JvbGxiYXJQYWRkaW5nLm9yaWdpbmFsUmlnaHQgKyAncHgnfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQuY3NzKHtwYWRkaW5nUmlnaHQ6ICcnfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzY3JvbGxiYXJQYWRkaW5nID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9nZ2xlVG9wV2luZG93Q2xhc3ModHJ1ZSk7XG4gICAgICAgIH0sIG1vZGFsV2luZG93LmNsb3NlZERlZmVycmVkKTtcbiAgICAgICAgY2hlY2tSZW1vdmVCYWNrZHJvcCgpO1xuXG4gICAgICAgIC8vbW92ZSBmb2N1cyB0byBzcGVjaWZpZWQgZWxlbWVudCBpZiBhdmFpbGFibGUsIG9yIGVsc2UgdG8gYm9keVxuICAgICAgICBpZiAoZWxlbWVudFRvUmVjZWl2ZUZvY3VzICYmIGVsZW1lbnRUb1JlY2VpdmVGb2N1cy5mb2N1cykge1xuICAgICAgICAgIGVsZW1lbnRUb1JlY2VpdmVGb2N1cy5mb2N1cygpO1xuICAgICAgICB9IGVsc2UgaWYgKGFwcGVuZFRvRWxlbWVudC5mb2N1cykge1xuICAgICAgICAgIGFwcGVuZFRvRWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBvciByZW1vdmUgXCJ3aW5kb3dUb3BDbGFzc1wiIGZyb20gdGhlIHRvcCB3aW5kb3cgaW4gdGhlIHN0YWNrXG4gICAgICBmdW5jdGlvbiB0b2dnbGVUb3BXaW5kb3dDbGFzcyh0b2dnbGVTd2l0Y2gpIHtcbiAgICAgICAgdmFyIG1vZGFsV2luZG93O1xuXG4gICAgICAgIGlmIChvcGVuZWRXaW5kb3dzLmxlbmd0aCgpID4gMCkge1xuICAgICAgICAgIG1vZGFsV2luZG93ID0gb3BlbmVkV2luZG93cy50b3AoKS52YWx1ZTtcbiAgICAgICAgICBtb2RhbFdpbmRvdy5tb2RhbERvbUVsLnRvZ2dsZUNsYXNzKG1vZGFsV2luZG93LndpbmRvd1RvcENsYXNzIHx8ICcnLCB0b2dnbGVTd2l0Y2gpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoZWNrUmVtb3ZlQmFja2Ryb3AoKSB7XG4gICAgICAgIC8vcmVtb3ZlIGJhY2tkcm9wIGlmIG5vIGxvbmdlciBuZWVkZWRcbiAgICAgICAgaWYgKGJhY2tkcm9wRG9tRWwgJiYgYmFja2Ryb3BJbmRleCgpID09PSAtMSkge1xuICAgICAgICAgIHZhciBiYWNrZHJvcFNjb3BlUmVmID0gYmFja2Ryb3BTY29wZTtcbiAgICAgICAgICByZW1vdmVBZnRlckFuaW1hdGUoYmFja2Ryb3BEb21FbCwgYmFja2Ryb3BTY29wZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBiYWNrZHJvcFNjb3BlUmVmID0gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBiYWNrZHJvcERvbUVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGJhY2tkcm9wU2NvcGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlQWZ0ZXJBbmltYXRlKGRvbUVsLCBzY29wZSwgZG9uZSwgY2xvc2VkRGVmZXJyZWQpIHtcbiAgICAgICAgdmFyIGFzeW5jRGVmZXJyZWQ7XG4gICAgICAgIHZhciBhc3luY1Byb21pc2UgPSBudWxsO1xuICAgICAgICB2YXIgc2V0SXNBc3luYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICghYXN5bmNEZWZlcnJlZCkge1xuICAgICAgICAgICAgYXN5bmNEZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICBhc3luY1Byb21pc2UgPSBhc3luY0RlZmVycmVkLnByb21pc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFzeW5jRG9uZSgpIHtcbiAgICAgICAgICAgIGFzeW5jRGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHNjb3BlLiRicm9hZGNhc3QoJG1vZGFsU3RhY2suTk9XX0NMT1NJTkdfRVZFTlQsIHNldElzQXN5bmMpO1xuXG4gICAgICAgIC8vIE5vdGUgdGhhdCBpdCdzIGludGVudGlvbmFsIHRoYXQgYXN5bmNQcm9taXNlIG1pZ2h0IGJlIG51bGwuXG4gICAgICAgIC8vIFRoYXQncyB3aGVuIHNldElzQXN5bmMgaGFzIG5vdCBiZWVuIGNhbGxlZCBkdXJpbmcgdGhlXG4gICAgICAgIC8vIE5PV19DTE9TSU5HX0VWRU5UIGJyb2FkY2FzdC5cbiAgICAgICAgcmV0dXJuICRxLndoZW4oYXN5bmNQcm9taXNlKS50aGVuKGFmdGVyQW5pbWF0aW5nKTtcblxuICAgICAgICBmdW5jdGlvbiBhZnRlckFuaW1hdGluZygpIHtcbiAgICAgICAgICBpZiAoYWZ0ZXJBbmltYXRpbmcuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlckFuaW1hdGluZy5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgICRhbmltYXRlLmxlYXZlKGRvbUVsKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkb21FbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIGlmIChjbG9zZWREZWZlcnJlZCkge1xuICAgICAgICAgICAgICBjbG9zZWREZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzY29wZS4kZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRkb2N1bWVudC5vbigna2V5ZG93bicsIGtleWRvd25MaXN0ZW5lcik7XG5cbiAgICAgICRyb290U2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAkZG9jdW1lbnQub2ZmKCdrZXlkb3duJywga2V5ZG93bkxpc3RlbmVyKTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBrZXlkb3duTGlzdGVuZXIoZXZ0KSB7XG4gICAgICAgIGlmIChldnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm4gZXZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1vZGFsID0gb3BlbmVkV2luZG93cy50b3AoKTtcbiAgICAgICAgaWYgKG1vZGFsKSB7XG4gICAgICAgICAgc3dpdGNoIChldnQud2hpY2gpIHtcbiAgICAgICAgICAgIGNhc2UgMjc6IHtcbiAgICAgICAgICAgICAgaWYgKG1vZGFsLnZhbHVlLmtleWJvYXJkKSB7XG4gICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAkbW9kYWxTdGFjay5kaXNtaXNzKG1vZGFsLmtleSwgJ2VzY2FwZSBrZXkgcHJlc3MnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgOToge1xuICAgICAgICAgICAgICB2YXIgbGlzdCA9ICRtb2RhbFN0YWNrLmxvYWRGb2N1c0VsZW1lbnRMaXN0KG1vZGFsKTtcbiAgICAgICAgICAgICAgdmFyIGZvY3VzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoZXZ0LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCRtb2RhbFN0YWNrLmlzRm9jdXNJbkZpcnN0SXRlbShldnQsIGxpc3QpIHx8ICRtb2RhbFN0YWNrLmlzTW9kYWxGb2N1c2VkKGV2dCwgbW9kYWwpKSB7XG4gICAgICAgICAgICAgICAgICBmb2N1c0NoYW5nZWQgPSAkbW9kYWxTdGFjay5mb2N1c0xhc3RGb2N1c2FibGVFbGVtZW50KGxpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoJG1vZGFsU3RhY2suaXNGb2N1c0luTGFzdEl0ZW0oZXZ0LCBsaXN0KSkge1xuICAgICAgICAgICAgICAgICAgZm9jdXNDaGFuZ2VkID0gJG1vZGFsU3RhY2suZm9jdXNGaXJzdEZvY3VzYWJsZUVsZW1lbnQobGlzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGZvY3VzQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkbW9kYWxTdGFjay5vcGVuID0gZnVuY3Rpb24obW9kYWxJbnN0YW5jZSwgbW9kYWwpIHtcbiAgICAgICAgdmFyIG1vZGFsT3BlbmVyID0gJGRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgbW9kYWxCb2R5Q2xhc3MgPSBtb2RhbC5vcGVuZWRDbGFzcyB8fCBPUEVORURfTU9EQUxfQ0xBU1M7XG5cbiAgICAgICAgdG9nZ2xlVG9wV2luZG93Q2xhc3MoZmFsc2UpO1xuXG4gICAgICAgIC8vIFN0b3JlIHRoZSBjdXJyZW50IHRvcCBmaXJzdCwgdG8gZGV0ZXJtaW5lIHdoYXQgaW5kZXggd2Ugb3VnaHQgdG8gdXNlXG4gICAgICAgIC8vIGZvciB0aGUgY3VycmVudCB0b3AgbW9kYWxcbiAgICAgICAgcHJldmlvdXNUb3BPcGVuZWRNb2RhbCA9IG9wZW5lZFdpbmRvd3MudG9wKCk7XG5cbiAgICAgICAgb3BlbmVkV2luZG93cy5hZGQobW9kYWxJbnN0YW5jZSwge1xuICAgICAgICAgIGRlZmVycmVkOiBtb2RhbC5kZWZlcnJlZCxcbiAgICAgICAgICByZW5kZXJEZWZlcnJlZDogbW9kYWwucmVuZGVyRGVmZXJyZWQsXG4gICAgICAgICAgY2xvc2VkRGVmZXJyZWQ6IG1vZGFsLmNsb3NlZERlZmVycmVkLFxuICAgICAgICAgIG1vZGFsU2NvcGU6IG1vZGFsLnNjb3BlLFxuICAgICAgICAgIGJhY2tkcm9wOiBtb2RhbC5iYWNrZHJvcCxcbiAgICAgICAgICBrZXlib2FyZDogbW9kYWwua2V5Ym9hcmQsXG4gICAgICAgICAgb3BlbmVkQ2xhc3M6IG1vZGFsLm9wZW5lZENsYXNzLFxuICAgICAgICAgIHdpbmRvd1RvcENsYXNzOiBtb2RhbC53aW5kb3dUb3BDbGFzcyxcbiAgICAgICAgICBhbmltYXRpb246IG1vZGFsLmFuaW1hdGlvbixcbiAgICAgICAgICBhcHBlbmRUbzogbW9kYWwuYXBwZW5kVG9cbiAgICAgICAgfSk7XG5cbiAgICAgICAgb3BlbmVkQ2xhc3Nlcy5wdXQobW9kYWxCb2R5Q2xhc3MsIG1vZGFsSW5zdGFuY2UpO1xuXG4gICAgICAgIHZhciBhcHBlbmRUb0VsZW1lbnQgPSBtb2RhbC5hcHBlbmRUbyxcbiAgICAgICAgICAgIGN1cnJCYWNrZHJvcEluZGV4ID0gYmFja2Ryb3BJbmRleCgpO1xuXG4gICAgICAgIGlmIChjdXJyQmFja2Ryb3BJbmRleCA+PSAwICYmICFiYWNrZHJvcERvbUVsKSB7XG4gICAgICAgICAgYmFja2Ryb3BTY29wZSA9ICRyb290U2NvcGUuJG5ldyh0cnVlKTtcbiAgICAgICAgICBiYWNrZHJvcFNjb3BlLm1vZGFsT3B0aW9ucyA9IG1vZGFsO1xuICAgICAgICAgIGJhY2tkcm9wU2NvcGUuaW5kZXggPSBjdXJyQmFja2Ryb3BJbmRleDtcbiAgICAgICAgICBiYWNrZHJvcERvbUVsID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IHVpYi1tb2RhbC1iYWNrZHJvcD1cIm1vZGFsLWJhY2tkcm9wXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgYmFja2Ryb3BEb21FbC5hdHRyKHtcbiAgICAgICAgICAgICdjbGFzcyc6ICdtb2RhbC1iYWNrZHJvcCcsXG4gICAgICAgICAgICAnbmctc3R5bGUnOiAne1xcJ3otaW5kZXhcXCc6IDEwNDAgKyAoaW5kZXggJiYgMSB8fCAwKSArIGluZGV4KjEwfScsXG4gICAgICAgICAgICAndWliLW1vZGFsLWFuaW1hdGlvbi1jbGFzcyc6ICdmYWRlJyxcbiAgICAgICAgICAgICdtb2RhbC1pbi1jbGFzcyc6ICdpbidcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAobW9kYWwuYmFja2Ryb3BDbGFzcykge1xuICAgICAgICAgICAgYmFja2Ryb3BEb21FbC5hZGRDbGFzcyhtb2RhbC5iYWNrZHJvcENsYXNzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobW9kYWwuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBiYWNrZHJvcERvbUVsLmF0dHIoJ21vZGFsLWFuaW1hdGlvbicsICd0cnVlJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgICRjb21waWxlKGJhY2tkcm9wRG9tRWwpKGJhY2tkcm9wU2NvcGUpO1xuICAgICAgICAgICRhbmltYXRlLmVudGVyKGJhY2tkcm9wRG9tRWwsIGFwcGVuZFRvRWxlbWVudCk7XG4gICAgICAgICAgaWYgKCR1aWJQb3NpdGlvbi5pc1Njcm9sbGFibGUoYXBwZW5kVG9FbGVtZW50KSkge1xuICAgICAgICAgICAgc2Nyb2xsYmFyUGFkZGluZyA9ICR1aWJQb3NpdGlvbi5zY3JvbGxiYXJQYWRkaW5nKGFwcGVuZFRvRWxlbWVudCk7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsYmFyUGFkZGluZy5oZWlnaHRPdmVyZmxvdyAmJiBzY3JvbGxiYXJQYWRkaW5nLnNjcm9sbGJhcldpZHRoKSB7XG4gICAgICAgICAgICAgIGFwcGVuZFRvRWxlbWVudC5jc3Moe3BhZGRpbmdSaWdodDogc2Nyb2xsYmFyUGFkZGluZy5yaWdodCArICdweCd9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29udGVudDtcbiAgICAgICAgaWYgKG1vZGFsLmNvbXBvbmVudCkge1xuICAgICAgICAgIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHNuYWtlX2Nhc2UobW9kYWwuY29tcG9uZW50Lm5hbWUpKTtcbiAgICAgICAgICBjb250ZW50ID0gYW5ndWxhci5lbGVtZW50KGNvbnRlbnQpO1xuICAgICAgICAgIGNvbnRlbnQuYXR0cih7XG4gICAgICAgICAgICByZXNvbHZlOiAnJHJlc29sdmUnLFxuICAgICAgICAgICAgJ21vZGFsLWluc3RhbmNlJzogJyR1aWJNb2RhbEluc3RhbmNlJyxcbiAgICAgICAgICAgIGNsb3NlOiAnJGNsb3NlKCR2YWx1ZSknLFxuICAgICAgICAgICAgZGlzbWlzczogJyRkaXNtaXNzKCR2YWx1ZSknXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGVudCA9IG1vZGFsLmNvbnRlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdGhlIHRvcCBtb2RhbCBpbmRleCBiYXNlZCBvbiB0aGUgaW5kZXggb2YgdGhlIHByZXZpb3VzIHRvcCBtb2RhbFxuICAgICAgICB0b3BNb2RhbEluZGV4ID0gcHJldmlvdXNUb3BPcGVuZWRNb2RhbCA/IHBhcnNlSW50KHByZXZpb3VzVG9wT3BlbmVkTW9kYWwudmFsdWUubW9kYWxEb21FbC5hdHRyKCdpbmRleCcpLCAxMCkgKyAxIDogMDtcbiAgICAgICAgdmFyIGFuZ3VsYXJEb21FbCA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiB1aWItbW9kYWwtd2luZG93PVwibW9kYWwtd2luZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgIGFuZ3VsYXJEb21FbC5hdHRyKHtcbiAgICAgICAgICAnY2xhc3MnOiAnbW9kYWwnLFxuICAgICAgICAgICd0ZW1wbGF0ZS11cmwnOiBtb2RhbC53aW5kb3dUZW1wbGF0ZVVybCxcbiAgICAgICAgICAnd2luZG93LXRvcC1jbGFzcyc6IG1vZGFsLndpbmRvd1RvcENsYXNzLFxuICAgICAgICAgICdyb2xlJzogJ2RpYWxvZycsXG4gICAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IG1vZGFsLmFyaWFMYWJlbGxlZEJ5LFxuICAgICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogbW9kYWwuYXJpYURlc2NyaWJlZEJ5LFxuICAgICAgICAgICdzaXplJzogbW9kYWwuc2l6ZSxcbiAgICAgICAgICAnaW5kZXgnOiB0b3BNb2RhbEluZGV4LFxuICAgICAgICAgICdhbmltYXRlJzogJ2FuaW1hdGUnLFxuICAgICAgICAgICduZy1zdHlsZSc6ICd7XFwnei1pbmRleFxcJzogMTA1MCArICQkdG9wTW9kYWxJbmRleCoxMCwgZGlzcGxheTogXFwnYmxvY2tcXCd9JyxcbiAgICAgICAgICAndGFiaW5kZXgnOiAtMSxcbiAgICAgICAgICAndWliLW1vZGFsLWFuaW1hdGlvbi1jbGFzcyc6ICdmYWRlJyxcbiAgICAgICAgICAnbW9kYWwtaW4tY2xhc3MnOiAnaW4nXG4gICAgICAgIH0pLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgaWYgKG1vZGFsLndpbmRvd0NsYXNzKSB7XG4gICAgICAgICAgYW5ndWxhckRvbUVsLmFkZENsYXNzKG1vZGFsLndpbmRvd0NsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb2RhbC5hbmltYXRpb24pIHtcbiAgICAgICAgICBhbmd1bGFyRG9tRWwuYXR0cignbW9kYWwtYW5pbWF0aW9uJywgJ3RydWUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcGVuZFRvRWxlbWVudC5hZGRDbGFzcyhtb2RhbEJvZHlDbGFzcyk7XG4gICAgICAgIGlmIChtb2RhbC5zY29wZSkge1xuICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZXhwbGljaXRseSBhZGQgdGhlIG1vZGFsIGluZGV4IHRvIHRoZSBtb2RhbCBzY29wZVxuICAgICAgICAgIC8vIGJlY2F1c2UgaXQgaXMgbmVlZGVkIGJ5IG5nU3R5bGUgdG8gY29tcHV0ZSB0aGUgekluZGV4IHByb3BlcnR5LlxuICAgICAgICAgIG1vZGFsLnNjb3BlLiQkdG9wTW9kYWxJbmRleCA9IHRvcE1vZGFsSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgJGFuaW1hdGUuZW50ZXIoJGNvbXBpbGUoYW5ndWxhckRvbUVsKShtb2RhbC5zY29wZSksIGFwcGVuZFRvRWxlbWVudCk7XG5cbiAgICAgICAgb3BlbmVkV2luZG93cy50b3AoKS52YWx1ZS5tb2RhbERvbUVsID0gYW5ndWxhckRvbUVsO1xuICAgICAgICBvcGVuZWRXaW5kb3dzLnRvcCgpLnZhbHVlLm1vZGFsT3BlbmVyID0gbW9kYWxPcGVuZXI7XG5cbiAgICAgICAgYXBwbHlBcmlhSGlkZGVuKGFuZ3VsYXJEb21FbCk7XG5cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlBcmlhSGlkZGVuKGVsKSB7XG4gICAgICAgICAgaWYgKCFlbCB8fCBlbFswXS50YWdOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnZXRTaWJsaW5ncyhlbCkuZm9yRWFjaChmdW5jdGlvbihzaWJsaW5nKSB7XG4gICAgICAgICAgICB2YXIgZWxlbUlzQWxyZWFkeUhpZGRlbiA9IHNpYmxpbmcuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpID09PSAndHJ1ZScsXG4gICAgICAgICAgICAgIGFyaWFIaWRkZW5Db3VudCA9IHBhcnNlSW50KHNpYmxpbmcuZ2V0QXR0cmlidXRlKEFSSUFfSElEREVOX0FUVFJJQlVURV9OQU1FKSwgMTApO1xuXG4gICAgICAgICAgICBpZiAoIWFyaWFIaWRkZW5Db3VudCkge1xuICAgICAgICAgICAgICBhcmlhSGlkZGVuQ291bnQgPSBlbGVtSXNBbHJlYWR5SGlkZGVuID8gMSA6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNpYmxpbmcuc2V0QXR0cmlidXRlKEFSSUFfSElEREVOX0FUVFJJQlVURV9OQU1FLCBhcmlhSGlkZGVuQ291bnQgKyAxKTtcbiAgICAgICAgICAgIHNpYmxpbmcuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gYXBwbHlBcmlhSGlkZGVuKGVsLnBhcmVudCgpKTtcblxuICAgICAgICAgIGZ1bmN0aW9uIGdldFNpYmxpbmdzKGVsKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbC5wYXJlbnQoKSA/IGVsLnBhcmVudCgpLmNoaWxkcmVuKCkgOiBbXTtcblxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChjaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkICE9PSBlbFswXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gYnJvYWRjYXN0Q2xvc2luZyhtb2RhbFdpbmRvdywgcmVzdWx0T3JSZWFzb24sIGNsb3NpbmcpIHtcbiAgICAgICAgcmV0dXJuICFtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbFNjb3BlLiRicm9hZGNhc3QoJ21vZGFsLmNsb3NpbmcnLCByZXN1bHRPclJlYXNvbiwgY2xvc2luZykuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdW5oaWRlQmFja2dyb3VuZEVsZW1lbnRzKCkge1xuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKFxuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1snICsgQVJJQV9ISURERU5fQVRUUklCVVRFX05BTUUgKyAnXScpLFxuICAgICAgICAgIGZ1bmN0aW9uKGhpZGRlbkVsKSB7XG4gICAgICAgICAgICB2YXIgYXJpYUhpZGRlbkNvdW50ID0gcGFyc2VJbnQoaGlkZGVuRWwuZ2V0QXR0cmlidXRlKEFSSUFfSElEREVOX0FUVFJJQlVURV9OQU1FKSwgMTApLFxuICAgICAgICAgICAgICBuZXdIaWRkZW5Db3VudCA9IGFyaWFIaWRkZW5Db3VudCAtIDE7XG4gICAgICAgICAgICBoaWRkZW5FbC5zZXRBdHRyaWJ1dGUoQVJJQV9ISURERU5fQVRUUklCVVRFX05BTUUsIG5ld0hpZGRlbkNvdW50KTtcblxuICAgICAgICAgICAgaWYgKCFuZXdIaWRkZW5Db3VudCkge1xuICAgICAgICAgICAgICBoaWRkZW5FbC5yZW1vdmVBdHRyaWJ1dGUoQVJJQV9ISURERU5fQVRUUklCVVRFX05BTUUpO1xuICAgICAgICAgICAgICBoaWRkZW5FbC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAkbW9kYWxTdGFjay5jbG9zZSA9IGZ1bmN0aW9uKG1vZGFsSW5zdGFuY2UsIHJlc3VsdCkge1xuICAgICAgICB2YXIgbW9kYWxXaW5kb3cgPSBvcGVuZWRXaW5kb3dzLmdldChtb2RhbEluc3RhbmNlKTtcbiAgICAgICAgdW5oaWRlQmFja2dyb3VuZEVsZW1lbnRzKCk7XG4gICAgICAgIGlmIChtb2RhbFdpbmRvdyAmJiBicm9hZGNhc3RDbG9zaW5nKG1vZGFsV2luZG93LCByZXN1bHQsIHRydWUpKSB7XG4gICAgICAgICAgbW9kYWxXaW5kb3cudmFsdWUubW9kYWxTY29wZS4kJHVpYkRlc3RydWN0aW9uU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICBtb2RhbFdpbmRvdy52YWx1ZS5kZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgcmVtb3ZlTW9kYWxXaW5kb3cobW9kYWxJbnN0YW5jZSwgbW9kYWxXaW5kb3cudmFsdWUubW9kYWxPcGVuZXIpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICFtb2RhbFdpbmRvdztcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmRpc21pc3MgPSBmdW5jdGlvbihtb2RhbEluc3RhbmNlLCByZWFzb24pIHtcbiAgICAgICAgdmFyIG1vZGFsV2luZG93ID0gb3BlbmVkV2luZG93cy5nZXQobW9kYWxJbnN0YW5jZSk7XG4gICAgICAgIHVuaGlkZUJhY2tncm91bmRFbGVtZW50cygpO1xuICAgICAgICBpZiAobW9kYWxXaW5kb3cgJiYgYnJvYWRjYXN0Q2xvc2luZyhtb2RhbFdpbmRvdywgcmVhc29uLCBmYWxzZSkpIHtcbiAgICAgICAgICBtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbFNjb3BlLiQkdWliRGVzdHJ1Y3Rpb25TY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgIG1vZGFsV2luZG93LnZhbHVlLmRlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgICAgICAgIHJlbW92ZU1vZGFsV2luZG93KG1vZGFsSW5zdGFuY2UsIG1vZGFsV2luZG93LnZhbHVlLm1vZGFsT3BlbmVyKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIW1vZGFsV2luZG93O1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suZGlzbWlzc0FsbCA9IGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICB2YXIgdG9wTW9kYWwgPSB0aGlzLmdldFRvcCgpO1xuICAgICAgICB3aGlsZSAodG9wTW9kYWwgJiYgdGhpcy5kaXNtaXNzKHRvcE1vZGFsLmtleSwgcmVhc29uKSkge1xuICAgICAgICAgIHRvcE1vZGFsID0gdGhpcy5nZXRUb3AoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suZ2V0VG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBvcGVuZWRXaW5kb3dzLnRvcCgpO1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2subW9kYWxSZW5kZXJlZCA9IGZ1bmN0aW9uKG1vZGFsSW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIG1vZGFsV2luZG93ID0gb3BlbmVkV2luZG93cy5nZXQobW9kYWxJbnN0YW5jZSk7XG4gICAgICAgIGlmIChtb2RhbFdpbmRvdykge1xuICAgICAgICAgIG1vZGFsV2luZG93LnZhbHVlLnJlbmRlckRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suZm9jdXNGaXJzdEZvY3VzYWJsZUVsZW1lbnQgPSBmdW5jdGlvbihsaXN0KSB7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBsaXN0WzBdLmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suZm9jdXNMYXN0Rm9jdXNhYmxlRWxlbWVudCA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGxpc3RbbGlzdC5sZW5ndGggLSAxXS5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmlzTW9kYWxGb2N1c2VkID0gZnVuY3Rpb24oZXZ0LCBtb2RhbFdpbmRvdykge1xuICAgICAgICBpZiAoZXZ0ICYmIG1vZGFsV2luZG93KSB7XG4gICAgICAgICAgdmFyIG1vZGFsRG9tRWwgPSBtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbERvbUVsO1xuICAgICAgICAgIGlmIChtb2RhbERvbUVsICYmIG1vZGFsRG9tRWwubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gKGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQpID09PSBtb2RhbERvbUVsWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5pc0ZvY3VzSW5GaXJzdEl0ZW0gPSBmdW5jdGlvbihldnQsIGxpc3QpIHtcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiAoZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudCkgPT09IGxpc3RbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suaXNGb2N1c0luTGFzdEl0ZW0gPSBmdW5jdGlvbihldnQsIGxpc3QpIHtcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiAoZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudCkgPT09IGxpc3RbbGlzdC5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5sb2FkRm9jdXNFbGVtZW50TGlzdCA9IGZ1bmN0aW9uKG1vZGFsV2luZG93KSB7XG4gICAgICAgIGlmIChtb2RhbFdpbmRvdykge1xuICAgICAgICAgIHZhciBtb2RhbERvbUUxID0gbW9kYWxXaW5kb3cudmFsdWUubW9kYWxEb21FbDtcbiAgICAgICAgICBpZiAobW9kYWxEb21FMSAmJiBtb2RhbERvbUUxLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gbW9kYWxEb21FMVswXS5xdWVyeVNlbGVjdG9yQWxsKHRhYmJhYmxlU2VsZWN0b3IpO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzID9cbiAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVmlzaWJsZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgfSkgOiBlbGVtZW50cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiAkbW9kYWxTdGFjaztcbiAgICB9XSlcblxuICAucHJvdmlkZXIoJyR1aWJNb2RhbCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciAkbW9kYWxQcm92aWRlciA9IHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgICAgICBiYWNrZHJvcDogdHJ1ZSwgLy9jYW4gYWxzbyBiZSBmYWxzZSBvciAnc3RhdGljJ1xuICAgICAgICBrZXlib2FyZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICRnZXQ6IFsnJHJvb3RTY29wZScsICckcScsICckZG9jdW1lbnQnLCAnJHRlbXBsYXRlUmVxdWVzdCcsICckY29udHJvbGxlcicsICckdWliUmVzb2x2ZScsICckdWliTW9kYWxTdGFjaycsXG4gICAgICAgIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkcSwgJGRvY3VtZW50LCAkdGVtcGxhdGVSZXF1ZXN0LCAkY29udHJvbGxlciwgJHVpYlJlc29sdmUsICRtb2RhbFN0YWNrKSB7XG4gICAgICAgICAgdmFyICRtb2RhbCA9IHt9O1xuXG4gICAgICAgICAgZnVuY3Rpb24gZ2V0VGVtcGxhdGVQcm9taXNlKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRlbXBsYXRlID8gJHEud2hlbihvcHRpb25zLnRlbXBsYXRlKSA6XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZVJlcXVlc3QoYW5ndWxhci5pc0Z1bmN0aW9uKG9wdGlvbnMudGVtcGxhdGVVcmwpID9cbiAgICAgICAgICAgICAgICBvcHRpb25zLnRlbXBsYXRlVXJsKCkgOiBvcHRpb25zLnRlbXBsYXRlVXJsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcHJvbWlzZUNoYWluID0gbnVsbDtcbiAgICAgICAgICAkbW9kYWwuZ2V0UHJvbWlzZUNoYWluID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZUNoYWluO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICAkbW9kYWwub3BlbiA9IGZ1bmN0aW9uKG1vZGFsT3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIG1vZGFsUmVzdWx0RGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIG1vZGFsT3BlbmVkRGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIG1vZGFsQ2xvc2VkRGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIG1vZGFsUmVuZGVyRGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAvL3ByZXBhcmUgYW4gaW5zdGFuY2Ugb2YgYSBtb2RhbCB0byBiZSBpbmplY3RlZCBpbnRvIGNvbnRyb2xsZXJzIGFuZCByZXR1cm5lZCB0byBhIGNhbGxlclxuICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSB7XG4gICAgICAgICAgICAgIHJlc3VsdDogbW9kYWxSZXN1bHREZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgICAgICBvcGVuZWQ6IG1vZGFsT3BlbmVkRGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICAgICAgY2xvc2VkOiBtb2RhbENsb3NlZERlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgICAgIHJlbmRlcmVkOiBtb2RhbFJlbmRlckRlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRtb2RhbFN0YWNrLmNsb3NlKG1vZGFsSW5zdGFuY2UsIHJlc3VsdCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRpc21pc3M6IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJG1vZGFsU3RhY2suZGlzbWlzcyhtb2RhbEluc3RhbmNlLCByZWFzb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvL21lcmdlIGFuZCBjbGVhbiB1cCBvcHRpb25zXG4gICAgICAgICAgICBtb2RhbE9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgJG1vZGFsUHJvdmlkZXIub3B0aW9ucywgbW9kYWxPcHRpb25zKTtcbiAgICAgICAgICAgIG1vZGFsT3B0aW9ucy5yZXNvbHZlID0gbW9kYWxPcHRpb25zLnJlc29sdmUgfHwge307XG4gICAgICAgICAgICBtb2RhbE9wdGlvbnMuYXBwZW5kVG8gPSBtb2RhbE9wdGlvbnMuYXBwZW5kVG8gfHwgJGRvY3VtZW50LmZpbmQoJ2JvZHknKS5lcSgwKTtcblxuICAgICAgICAgICAgaWYgKCFtb2RhbE9wdGlvbnMuYXBwZW5kVG8ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXBwZW5kVG8gZWxlbWVudCBub3QgZm91bmQuIE1ha2Ugc3VyZSB0aGF0IHRoZSBlbGVtZW50IHBhc3NlZCBpcyBpbiBET00uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdmVyaWZ5IG9wdGlvbnNcbiAgICAgICAgICAgIGlmICghbW9kYWxPcHRpb25zLmNvbXBvbmVudCAmJiAhbW9kYWxPcHRpb25zLnRlbXBsYXRlICYmICFtb2RhbE9wdGlvbnMudGVtcGxhdGVVcmwpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmUgb2YgY29tcG9uZW50IG9yIHRlbXBsYXRlIG9yIHRlbXBsYXRlVXJsIG9wdGlvbnMgaXMgcmVxdWlyZWQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZUFuZFJlc29sdmVQcm9taXNlO1xuICAgICAgICAgICAgaWYgKG1vZGFsT3B0aW9ucy5jb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgdGVtcGxhdGVBbmRSZXNvbHZlUHJvbWlzZSA9ICRxLndoZW4oJHVpYlJlc29sdmUucmVzb2x2ZShtb2RhbE9wdGlvbnMucmVzb2x2ZSwge30sIG51bGwsIG51bGwpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRlbXBsYXRlQW5kUmVzb2x2ZVByb21pc2UgPVxuICAgICAgICAgICAgICAgICRxLmFsbChbZ2V0VGVtcGxhdGVQcm9taXNlKG1vZGFsT3B0aW9ucyksICR1aWJSZXNvbHZlLnJlc29sdmUobW9kYWxPcHRpb25zLnJlc29sdmUsIHt9LCBudWxsLCBudWxsKV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlV2l0aFRlbXBsYXRlKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGVBbmRSZXNvbHZlUHJvbWlzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIHJlc29sdXRpb24gb2YgdGhlIGV4aXN0aW5nIHByb21pc2UgY2hhaW4uXG4gICAgICAgICAgICAvLyBUaGVuIHN3aXRjaCB0byBvdXIgb3duIGNvbWJpbmVkIHByb21pc2UgZGVwZW5kZW5jeSAocmVnYXJkbGVzcyBvZiBob3cgdGhlIHByZXZpb3VzIG1vZGFsIGZhcmVkKS5cbiAgICAgICAgICAgIC8vIFRoZW4gYWRkIHRvICRtb2RhbFN0YWNrIGFuZCByZXNvbHZlIG9wZW5lZC5cbiAgICAgICAgICAgIC8vIEZpbmFsbHkgY2xlYW4gdXAgdGhlIGNoYWluIHZhcmlhYmxlIGlmIG5vIHN1YnNlcXVlbnQgbW9kYWwgaGFzIG92ZXJ3cml0dGVuIGl0LlxuICAgICAgICAgICAgdmFyIHNhbWVQcm9taXNlO1xuICAgICAgICAgICAgc2FtZVByb21pc2UgPSBwcm9taXNlQ2hhaW4gPSAkcS5hbGwoW3Byb21pc2VDaGFpbl0pXG4gICAgICAgICAgICAgIC50aGVuKHJlc29sdmVXaXRoVGVtcGxhdGUsIHJlc29sdmVXaXRoVGVtcGxhdGUpXG4gICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHJlc29sdmVTdWNjZXNzKHRwbEFuZFZhcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZWRTY29wZSA9IG1vZGFsT3B0aW9ucy5zY29wZSB8fCAkcm9vdFNjb3BlO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsU2NvcGUgPSBwcm92aWRlZFNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgICBtb2RhbFNjb3BlLiRjbG9zZSA9IG1vZGFsSW5zdGFuY2UuY2xvc2U7XG4gICAgICAgICAgICAgICAgbW9kYWxTY29wZS4kZGlzbWlzcyA9IG1vZGFsSW5zdGFuY2UuZGlzbWlzcztcblxuICAgICAgICAgICAgICAgIG1vZGFsU2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFtb2RhbFNjb3BlLiQkdWliRGVzdHJ1Y3Rpb25TY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxTY29wZS4kZGlzbWlzcygnJHVpYlVuc2NoZWR1bGVkRGVzdHJ1Y3Rpb24nKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBtb2RhbCA9IHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlOiBtb2RhbFNjb3BlLFxuICAgICAgICAgICAgICAgICAgZGVmZXJyZWQ6IG1vZGFsUmVzdWx0RGVmZXJyZWQsXG4gICAgICAgICAgICAgICAgICByZW5kZXJEZWZlcnJlZDogbW9kYWxSZW5kZXJEZWZlcnJlZCxcbiAgICAgICAgICAgICAgICAgIGNsb3NlZERlZmVycmVkOiBtb2RhbENsb3NlZERlZmVycmVkLFxuICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiBtb2RhbE9wdGlvbnMuYW5pbWF0aW9uLFxuICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6IG1vZGFsT3B0aW9ucy5iYWNrZHJvcCxcbiAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBtb2RhbE9wdGlvbnMua2V5Ym9hcmQsXG4gICAgICAgICAgICAgICAgICBiYWNrZHJvcENsYXNzOiBtb2RhbE9wdGlvbnMuYmFja2Ryb3BDbGFzcyxcbiAgICAgICAgICAgICAgICAgIHdpbmRvd1RvcENsYXNzOiBtb2RhbE9wdGlvbnMud2luZG93VG9wQ2xhc3MsXG4gICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogbW9kYWxPcHRpb25zLndpbmRvd0NsYXNzLFxuICAgICAgICAgICAgICAgICAgd2luZG93VGVtcGxhdGVVcmw6IG1vZGFsT3B0aW9ucy53aW5kb3dUZW1wbGF0ZVVybCxcbiAgICAgICAgICAgICAgICAgIGFyaWFMYWJlbGxlZEJ5OiBtb2RhbE9wdGlvbnMuYXJpYUxhYmVsbGVkQnksXG4gICAgICAgICAgICAgICAgICBhcmlhRGVzY3JpYmVkQnk6IG1vZGFsT3B0aW9ucy5hcmlhRGVzY3JpYmVkQnksXG4gICAgICAgICAgICAgICAgICBzaXplOiBtb2RhbE9wdGlvbnMuc2l6ZSxcbiAgICAgICAgICAgICAgICAgIG9wZW5lZENsYXNzOiBtb2RhbE9wdGlvbnMub3BlbmVkQ2xhc3MsXG4gICAgICAgICAgICAgICAgICBhcHBlbmRUbzogbW9kYWxPcHRpb25zLmFwcGVuZFRvXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgY3RybEluc3RhbmNlLCBjdHJsSW5zdGFudGlhdGUsIGN0cmxMb2NhbHMgPSB7fTtcblxuICAgICAgICAgICAgICAgIGlmIChtb2RhbE9wdGlvbnMuY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RMb2NhbHMoY29tcG9uZW50LCBmYWxzZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgY29tcG9uZW50Lm5hbWUgPSBtb2RhbE9wdGlvbnMuY29tcG9uZW50O1xuICAgICAgICAgICAgICAgICAgbW9kYWwuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kYWxPcHRpb25zLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdExvY2FscyhjdHJsTG9jYWxzLCB0cnVlLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgIC8vIHRoZSB0aGlyZCBwYXJhbSB3aWxsIG1ha2UgdGhlIGNvbnRyb2xsZXIgaW5zdGFudGlhdGUgbGF0ZXIscHJpdmF0ZSBhcGlcbiAgICAgICAgICAgICAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9ibG9iL21hc3Rlci9zcmMvbmcvY29udHJvbGxlci5qcyNMMTI2XG4gICAgICAgICAgICAgICAgICBjdHJsSW5zdGFudGlhdGUgPSAkY29udHJvbGxlcihtb2RhbE9wdGlvbnMuY29udHJvbGxlciwgY3RybExvY2FscywgdHJ1ZSwgbW9kYWxPcHRpb25zLmNvbnRyb2xsZXJBcyk7XG4gICAgICAgICAgICAgICAgICBpZiAobW9kYWxPcHRpb25zLmNvbnRyb2xsZXJBcyAmJiBtb2RhbE9wdGlvbnMuYmluZFRvQ29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgICBjdHJsSW5zdGFuY2UgPSBjdHJsSW5zdGFudGlhdGUuaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIGN0cmxJbnN0YW5jZS4kY2xvc2UgPSBtb2RhbFNjb3BlLiRjbG9zZTtcbiAgICAgICAgICAgICAgICAgICAgY3RybEluc3RhbmNlLiRkaXNtaXNzID0gbW9kYWxTY29wZS4kZGlzbWlzcztcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoY3RybEluc3RhbmNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgJHJlc29sdmU6IGN0cmxMb2NhbHMuJHNjb3BlLiRyZXNvbHZlXG4gICAgICAgICAgICAgICAgICAgIH0sIHByb3ZpZGVkU2NvcGUpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBjdHJsSW5zdGFuY2UgPSBjdHJsSW5zdGFudGlhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihjdHJsSW5zdGFuY2UuJG9uSW5pdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3RybEluc3RhbmNlLiRvbkluaXQoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIW1vZGFsT3B0aW9ucy5jb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgIG1vZGFsLmNvbnRlbnQgPSB0cGxBbmRWYXJzWzBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICRtb2RhbFN0YWNrLm9wZW4obW9kYWxJbnN0YW5jZSwgbW9kYWwpO1xuICAgICAgICAgICAgICAgIG1vZGFsT3BlbmVkRGVmZXJyZWQucmVzb2x2ZSh0cnVlKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbnN0cnVjdExvY2FscyhvYmosIHRlbXBsYXRlLCBpbnN0YW5jZU9uU2NvcGUsIGluamVjdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgIG9iai4kc2NvcGUgPSBtb2RhbFNjb3BlO1xuICAgICAgICAgICAgICAgICAgb2JqLiRzY29wZS4kcmVzb2x2ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlT25TY29wZSkge1xuICAgICAgICAgICAgICAgICAgICBvYmouJHNjb3BlLiR1aWJNb2RhbEluc3RhbmNlID0gbW9kYWxJbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai4kdWliTW9kYWxJbnN0YW5jZSA9IG1vZGFsSW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHZhciByZXNvbHZlcyA9IHRlbXBsYXRlID8gdHBsQW5kVmFyc1sxXSA6IHRwbEFuZFZhcnM7XG4gICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocmVzb2x2ZXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluamVjdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgb2JqLiRzY29wZS4kcmVzb2x2ZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiByZXNvbHZlRXJyb3IocmVhc29uKSB7XG4gICAgICAgICAgICAgIG1vZGFsT3BlbmVkRGVmZXJyZWQucmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICAgIG1vZGFsUmVzdWx0RGVmZXJyZWQucmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICB9KVsnZmluYWxseSddKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAocHJvbWlzZUNoYWluID09PSBzYW1lUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIHByb21pc2VDaGFpbiA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbW9kYWxJbnN0YW5jZTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuICRtb2RhbDtcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG5cbiAgICByZXR1cm4gJG1vZGFsUHJvdmlkZXI7XG4gIH0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnBhZ2luZycsIFtdKVxuLyoqXG4gKiBIZWxwZXIgaW50ZXJuYWwgc2VydmljZSBmb3IgZ2VuZXJhdGluZyBjb21tb24gY29udHJvbGxlciBjb2RlIGJldHdlZW4gdGhlXG4gKiBwYWdlciBhbmQgcGFnaW5hdGlvbiBjb21wb25lbnRzXG4gKi9cbi5mYWN0b3J5KCd1aWJQYWdpbmcnLCBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkge1xuICByZXR1cm4ge1xuICAgIGNyZWF0ZTogZnVuY3Rpb24oY3RybCwgJHNjb3BlLCAkYXR0cnMpIHtcbiAgICAgIGN0cmwuc2V0TnVtUGFnZXMgPSAkYXR0cnMubnVtUGFnZXMgPyAkcGFyc2UoJGF0dHJzLm51bVBhZ2VzKS5hc3NpZ24gOiBhbmd1bGFyLm5vb3A7XG4gICAgICBjdHJsLm5nTW9kZWxDdHJsID0geyAkc2V0Vmlld1ZhbHVlOiBhbmd1bGFyLm5vb3AgfTsgLy8gbnVsbE1vZGVsQ3RybFxuICAgICAgY3RybC5fd2F0Y2hlcnMgPSBbXTtcblxuICAgICAgY3RybC5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmwsIGNvbmZpZykge1xuICAgICAgICBjdHJsLm5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmw7XG4gICAgICAgIGN0cmwuY29uZmlnID0gY29uZmlnO1xuXG4gICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjdHJsLnJlbmRlcigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICgkYXR0cnMuaXRlbXNQZXJQYWdlKSB7XG4gICAgICAgICAgY3RybC5fd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJGF0dHJzLml0ZW1zUGVyUGFnZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGN0cmwuaXRlbXNQZXJQYWdlID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgICAgICAgICRzY29wZS50b3RhbFBhZ2VzID0gY3RybC5jYWxjdWxhdGVUb3RhbFBhZ2VzKCk7XG4gICAgICAgICAgICBjdHJsLnVwZGF0ZVBhZ2UoKTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3RybC5pdGVtc1BlclBhZ2UgPSBjb25maWcuaXRlbXNQZXJQYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgndG90YWxJdGVtcycsIGZ1bmN0aW9uKG5ld1RvdGFsLCBvbGRUb3RhbCkge1xuICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChuZXdUb3RhbCkgfHwgbmV3VG90YWwgIT09IG9sZFRvdGFsKSB7XG4gICAgICAgICAgICAkc2NvcGUudG90YWxQYWdlcyA9IGN0cmwuY2FsY3VsYXRlVG90YWxQYWdlcygpO1xuICAgICAgICAgICAgY3RybC51cGRhdGVQYWdlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGN0cmwuY2FsY3VsYXRlVG90YWxQYWdlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdG90YWxQYWdlcyA9IGN0cmwuaXRlbXNQZXJQYWdlIDwgMSA/IDEgOiBNYXRoLmNlaWwoJHNjb3BlLnRvdGFsSXRlbXMgLyBjdHJsLml0ZW1zUGVyUGFnZSk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0b3RhbFBhZ2VzIHx8IDAsIDEpO1xuICAgICAgfTtcblxuICAgICAgY3RybC5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJHNjb3BlLnBhZ2UgPSBwYXJzZUludChjdHJsLm5nTW9kZWxDdHJsLiR2aWV3VmFsdWUsIDEwKSB8fCAxO1xuICAgICAgfTtcblxuICAgICAgJHNjb3BlLnNlbGVjdFBhZ2UgPSBmdW5jdGlvbihwYWdlLCBldnQpIHtcbiAgICAgICAgaWYgKGV2dCkge1xuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsaWNrQWxsb3dlZCA9ICEkc2NvcGUubmdEaXNhYmxlZCB8fCAhZXZ0O1xuICAgICAgICBpZiAoY2xpY2tBbGxvd2VkICYmICRzY29wZS5wYWdlICE9PSBwYWdlICYmIHBhZ2UgPiAwICYmIHBhZ2UgPD0gJHNjb3BlLnRvdGFsUGFnZXMpIHtcbiAgICAgICAgICBpZiAoZXZ0ICYmIGV2dC50YXJnZXQpIHtcbiAgICAgICAgICAgIGV2dC50YXJnZXQuYmx1cigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdHJsLm5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUocGFnZSk7XG4gICAgICAgICAgY3RybC5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgICRzY29wZS5nZXRUZXh0ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiAkc2NvcGVba2V5ICsgJ1RleHQnXSB8fCBjdHJsLmNvbmZpZ1trZXkgKyAnVGV4dCddO1xuICAgICAgfTtcblxuICAgICAgJHNjb3BlLm5vUHJldmlvdXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICRzY29wZS5wYWdlID09PSAxO1xuICAgICAgfTtcblxuICAgICAgJHNjb3BlLm5vTmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJHNjb3BlLnBhZ2UgPT09ICRzY29wZS50b3RhbFBhZ2VzO1xuICAgICAgfTtcblxuICAgICAgY3RybC51cGRhdGVQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGN0cmwuc2V0TnVtUGFnZXMoJHNjb3BlLiRwYXJlbnQsICRzY29wZS50b3RhbFBhZ2VzKTsgLy8gUmVhZG9ubHkgdmFyaWFibGVcblxuICAgICAgICBpZiAoJHNjb3BlLnBhZ2UgPiAkc2NvcGUudG90YWxQYWdlcykge1xuICAgICAgICAgICRzY29wZS5zZWxlY3RQYWdlKCRzY29wZS50b3RhbFBhZ2VzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdHJsLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgd2hpbGUgKGN0cmwuX3dhdGNoZXJzLmxlbmd0aCkge1xuICAgICAgICAgIGN0cmwuX3dhdGNoZXJzLnNoaWZ0KCkoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnBhZ2VyJywgWyd1aS5ib290c3RyYXAucGFnaW5nJywgJ3VpLmJvb3RzdHJhcC50YWJpbmRleCddKVxuXG4uY29udHJvbGxlcignVWliUGFnZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJ3VpYlBhZ2luZycsICd1aWJQYWdlckNvbmZpZycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCB1aWJQYWdpbmcsIHVpYlBhZ2VyQ29uZmlnKSB7XG4gICRzY29wZS5hbGlnbiA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5hbGlnbikgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuYWxpZ24pIDogdWliUGFnZXJDb25maWcuYWxpZ247XG5cbiAgdWliUGFnaW5nLmNyZWF0ZSh0aGlzLCAkc2NvcGUsICRhdHRycyk7XG59XSlcblxuLmNvbnN0YW50KCd1aWJQYWdlckNvbmZpZycsIHtcbiAgaXRlbXNQZXJQYWdlOiAxMCxcbiAgcHJldmlvdXNUZXh0OiAnwqsgUHJldmlvdXMnLFxuICBuZXh0VGV4dDogJ05leHQgwrsnLFxuICBhbGlnbjogdHJ1ZVxufSlcblxuLmRpcmVjdGl2ZSgndWliUGFnZXInLCBbJ3VpYlBhZ2VyQ29uZmlnJywgZnVuY3Rpb24odWliUGFnZXJDb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICBzY29wZToge1xuICAgICAgdG90YWxJdGVtczogJz0nLFxuICAgICAgcHJldmlvdXNUZXh0OiAnQCcsXG4gICAgICBuZXh0VGV4dDogJ0AnLFxuICAgICAgbmdEaXNhYmxlZDogJz0nXG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ3VpYlBhZ2VyJywgJz9uZ01vZGVsJ10sXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnVWliUGFnZXJDb250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICdwYWdlcicsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9wYWdlci9wYWdlci5odG1sJztcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ3BhZ2VyJyk7XG4gICAgICB2YXIgcGFnaW5hdGlvbkN0cmwgPSBjdHJsc1swXSwgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgaWYgKCFuZ01vZGVsQ3RybCkge1xuICAgICAgICByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgbm8gbmctbW9kZWxcbiAgICAgIH1cblxuICAgICAgcGFnaW5hdGlvbkN0cmwuaW5pdChuZ01vZGVsQ3RybCwgdWliUGFnZXJDb25maWcpO1xuICAgIH1cbiAgfTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5wYWdpbmF0aW9uJywgWyd1aS5ib290c3RyYXAucGFnaW5nJywgJ3VpLmJvb3RzdHJhcC50YWJpbmRleCddKVxuLmNvbnRyb2xsZXIoJ1VpYlBhZ2luYXRpb25Db250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJyRwYXJzZScsICd1aWJQYWdpbmcnLCAndWliUGFnaW5hdGlvbkNvbmZpZycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCAkcGFyc2UsIHVpYlBhZ2luZywgdWliUGFnaW5hdGlvbkNvbmZpZykge1xuICB2YXIgY3RybCA9IHRoaXM7XG4gIC8vIFNldHVwIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyc1xuICB2YXIgbWF4U2l6ZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5tYXhTaXplKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5tYXhTaXplKSA6IHVpYlBhZ2luYXRpb25Db25maWcubWF4U2l6ZSxcbiAgICByb3RhdGUgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMucm90YXRlKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5yb3RhdGUpIDogdWliUGFnaW5hdGlvbkNvbmZpZy5yb3RhdGUsXG4gICAgZm9yY2VFbGxpcHNlcyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5mb3JjZUVsbGlwc2VzKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5mb3JjZUVsbGlwc2VzKSA6IHVpYlBhZ2luYXRpb25Db25maWcuZm9yY2VFbGxpcHNlcyxcbiAgICBib3VuZGFyeUxpbmtOdW1iZXJzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmJvdW5kYXJ5TGlua051bWJlcnMpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmJvdW5kYXJ5TGlua051bWJlcnMpIDogdWliUGFnaW5hdGlvbkNvbmZpZy5ib3VuZGFyeUxpbmtOdW1iZXJzLFxuICAgIHBhZ2VMYWJlbCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5wYWdlTGFiZWwpID8gZnVuY3Rpb24oaWR4KSB7IHJldHVybiAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMucGFnZUxhYmVsLCB7JHBhZ2U6IGlkeH0pOyB9IDogYW5ndWxhci5pZGVudGl0eTtcbiAgJHNjb3BlLmJvdW5kYXJ5TGlua3MgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuYm91bmRhcnlMaW5rcykgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuYm91bmRhcnlMaW5rcykgOiB1aWJQYWdpbmF0aW9uQ29uZmlnLmJvdW5kYXJ5TGlua3M7XG4gICRzY29wZS5kaXJlY3Rpb25MaW5rcyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kaXJlY3Rpb25MaW5rcykgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuZGlyZWN0aW9uTGlua3MpIDogdWliUGFnaW5hdGlvbkNvbmZpZy5kaXJlY3Rpb25MaW5rcztcbiAgJGF0dHJzLiRzZXQoJ3JvbGUnLCAnbWVudScpO1xuXG4gIHVpYlBhZ2luZy5jcmVhdGUodGhpcywgJHNjb3BlLCAkYXR0cnMpO1xuXG4gIGlmICgkYXR0cnMubWF4U2l6ZSkge1xuICAgIGN0cmwuX3dhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMubWF4U2l6ZSksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBtYXhTaXplID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgIGN0cmwucmVuZGVyKCk7XG4gICAgfSkpO1xuICB9XG5cbiAgLy8gQ3JlYXRlIHBhZ2Ugb2JqZWN0IHVzZWQgaW4gdGVtcGxhdGVcbiAgZnVuY3Rpb24gbWFrZVBhZ2UobnVtYmVyLCB0ZXh0LCBpc0FjdGl2ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBudW1iZXI6IG51bWJlcixcbiAgICAgIHRleHQ6IHRleHQsXG4gICAgICBhY3RpdmU6IGlzQWN0aXZlXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBhZ2VzKGN1cnJlbnRQYWdlLCB0b3RhbFBhZ2VzKSB7XG4gICAgdmFyIHBhZ2VzID0gW107XG5cbiAgICAvLyBEZWZhdWx0IHBhZ2UgbGltaXRzXG4gICAgdmFyIHN0YXJ0UGFnZSA9IDEsIGVuZFBhZ2UgPSB0b3RhbFBhZ2VzO1xuICAgIHZhciBpc01heFNpemVkID0gYW5ndWxhci5pc0RlZmluZWQobWF4U2l6ZSkgJiYgbWF4U2l6ZSA8IHRvdGFsUGFnZXM7XG5cbiAgICAvLyByZWNvbXB1dGUgaWYgbWF4U2l6ZVxuICAgIGlmIChpc01heFNpemVkKSB7XG4gICAgICBpZiAocm90YXRlKSB7XG4gICAgICAgIC8vIEN1cnJlbnQgcGFnZSBpcyBkaXNwbGF5ZWQgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdmlzaWJsZSBvbmVzXG4gICAgICAgIHN0YXJ0UGFnZSA9IE1hdGgubWF4KGN1cnJlbnRQYWdlIC0gTWF0aC5mbG9vcihtYXhTaXplIC8gMiksIDEpO1xuICAgICAgICBlbmRQYWdlID0gc3RhcnRQYWdlICsgbWF4U2l6ZSAtIDE7XG5cbiAgICAgICAgLy8gQWRqdXN0IGlmIGxpbWl0IGlzIGV4Y2VlZGVkXG4gICAgICAgIGlmIChlbmRQYWdlID4gdG90YWxQYWdlcykge1xuICAgICAgICAgIGVuZFBhZ2UgPSB0b3RhbFBhZ2VzO1xuICAgICAgICAgIHN0YXJ0UGFnZSA9IGVuZFBhZ2UgLSBtYXhTaXplICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVmlzaWJsZSBwYWdlcyBhcmUgcGFnaW5hdGVkIHdpdGggbWF4U2l6ZVxuICAgICAgICBzdGFydFBhZ2UgPSAoTWF0aC5jZWlsKGN1cnJlbnRQYWdlIC8gbWF4U2l6ZSkgLSAxKSAqIG1heFNpemUgKyAxO1xuXG4gICAgICAgIC8vIEFkanVzdCBsYXN0IHBhZ2UgaWYgbGltaXQgaXMgZXhjZWVkZWRcbiAgICAgICAgZW5kUGFnZSA9IE1hdGgubWluKHN0YXJ0UGFnZSArIG1heFNpemUgLSAxLCB0b3RhbFBhZ2VzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgcGFnZSBudW1iZXIgbGlua3NcbiAgICBmb3IgKHZhciBudW1iZXIgPSBzdGFydFBhZ2U7IG51bWJlciA8PSBlbmRQYWdlOyBudW1iZXIrKykge1xuICAgICAgdmFyIHBhZ2UgPSBtYWtlUGFnZShudW1iZXIsIHBhZ2VMYWJlbChudW1iZXIpLCBudW1iZXIgPT09IGN1cnJlbnRQYWdlKTtcbiAgICAgIHBhZ2VzLnB1c2gocGFnZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIGxpbmtzIHRvIG1vdmUgYmV0d2VlbiBwYWdlIHNldHNcbiAgICBpZiAoaXNNYXhTaXplZCAmJiBtYXhTaXplID4gMCAmJiAoIXJvdGF0ZSB8fCBmb3JjZUVsbGlwc2VzIHx8IGJvdW5kYXJ5TGlua051bWJlcnMpKSB7XG4gICAgICBpZiAoc3RhcnRQYWdlID4gMSkge1xuICAgICAgICBpZiAoIWJvdW5kYXJ5TGlua051bWJlcnMgfHwgc3RhcnRQYWdlID4gMykgeyAvL25lZWQgZWxsaXBzaXMgZm9yIGFsbCBvcHRpb25zIHVubGVzcyByYW5nZSBpcyB0b28gY2xvc2UgdG8gYmVnaW5uaW5nXG4gICAgICAgIHZhciBwcmV2aW91c1BhZ2VTZXQgPSBtYWtlUGFnZShzdGFydFBhZ2UgLSAxLCAnLi4uJywgZmFsc2UpO1xuICAgICAgICBwYWdlcy51bnNoaWZ0KHByZXZpb3VzUGFnZVNldCk7XG4gICAgICB9XG4gICAgICAgIGlmIChib3VuZGFyeUxpbmtOdW1iZXJzKSB7XG4gICAgICAgICAgaWYgKHN0YXJ0UGFnZSA9PT0gMykgeyAvL25lZWQgdG8gcmVwbGFjZSBlbGxpcHNpcyB3aGVuIHRoZSBidXR0b25zIHdvdWxkIGJlIHNlcXVlbnRpYWxcbiAgICAgICAgICAgIHZhciBzZWNvbmRQYWdlTGluayA9IG1ha2VQYWdlKDIsICcyJywgZmFsc2UpO1xuICAgICAgICAgICAgcGFnZXMudW5zaGlmdChzZWNvbmRQYWdlTGluayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vYWRkIHRoZSBmaXJzdCBwYWdlXG4gICAgICAgICAgdmFyIGZpcnN0UGFnZUxpbmsgPSBtYWtlUGFnZSgxLCAnMScsIGZhbHNlKTtcbiAgICAgICAgICBwYWdlcy51bnNoaWZ0KGZpcnN0UGFnZUxpbmspO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmRQYWdlIDwgdG90YWxQYWdlcykge1xuICAgICAgICBpZiAoIWJvdW5kYXJ5TGlua051bWJlcnMgfHwgZW5kUGFnZSA8IHRvdGFsUGFnZXMgLSAyKSB7IC8vbmVlZCBlbGxpcHNpcyBmb3IgYWxsIG9wdGlvbnMgdW5sZXNzIHJhbmdlIGlzIHRvbyBjbG9zZSB0byBlbmRcbiAgICAgICAgdmFyIG5leHRQYWdlU2V0ID0gbWFrZVBhZ2UoZW5kUGFnZSArIDEsICcuLi4nLCBmYWxzZSk7XG4gICAgICAgIHBhZ2VzLnB1c2gobmV4dFBhZ2VTZXQpO1xuICAgICAgfVxuICAgICAgICBpZiAoYm91bmRhcnlMaW5rTnVtYmVycykge1xuICAgICAgICAgIGlmIChlbmRQYWdlID09PSB0b3RhbFBhZ2VzIC0gMikgeyAvL25lZWQgdG8gcmVwbGFjZSBlbGxpcHNpcyB3aGVuIHRoZSBidXR0b25zIHdvdWxkIGJlIHNlcXVlbnRpYWxcbiAgICAgICAgICAgIHZhciBzZWNvbmRUb0xhc3RQYWdlTGluayA9IG1ha2VQYWdlKHRvdGFsUGFnZXMgLSAxLCB0b3RhbFBhZ2VzIC0gMSwgZmFsc2UpO1xuICAgICAgICAgICAgcGFnZXMucHVzaChzZWNvbmRUb0xhc3RQYWdlTGluayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vYWRkIHRoZSBsYXN0IHBhZ2VcbiAgICAgICAgICB2YXIgbGFzdFBhZ2VMaW5rID0gbWFrZVBhZ2UodG90YWxQYWdlcywgdG90YWxQYWdlcywgZmFsc2UpO1xuICAgICAgICAgIHBhZ2VzLnB1c2gobGFzdFBhZ2VMaW5rKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFnZXM7XG4gIH1cblxuICB2YXIgb3JpZ2luYWxSZW5kZXIgPSB0aGlzLnJlbmRlcjtcbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICBvcmlnaW5hbFJlbmRlcigpO1xuICAgIGlmICgkc2NvcGUucGFnZSA+IDAgJiYgJHNjb3BlLnBhZ2UgPD0gJHNjb3BlLnRvdGFsUGFnZXMpIHtcbiAgICAgICRzY29wZS5wYWdlcyA9IGdldFBhZ2VzKCRzY29wZS5wYWdlLCAkc2NvcGUudG90YWxQYWdlcyk7XG4gICAgfVxuICB9O1xufV0pXG5cbi5jb25zdGFudCgndWliUGFnaW5hdGlvbkNvbmZpZycsIHtcbiAgaXRlbXNQZXJQYWdlOiAxMCxcbiAgYm91bmRhcnlMaW5rczogZmFsc2UsXG4gIGJvdW5kYXJ5TGlua051bWJlcnM6IGZhbHNlLFxuICBkaXJlY3Rpb25MaW5rczogdHJ1ZSxcbiAgZmlyc3RUZXh0OiAnRmlyc3QnLFxuICBwcmV2aW91c1RleHQ6ICdQcmV2aW91cycsXG4gIG5leHRUZXh0OiAnTmV4dCcsXG4gIGxhc3RUZXh0OiAnTGFzdCcsXG4gIHJvdGF0ZTogdHJ1ZSxcbiAgZm9yY2VFbGxpcHNlczogZmFsc2Vcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlBhZ2luYXRpb24nLCBbJyRwYXJzZScsICd1aWJQYWdpbmF0aW9uQ29uZmlnJywgZnVuY3Rpb24oJHBhcnNlLCB1aWJQYWdpbmF0aW9uQ29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgc2NvcGU6IHtcbiAgICAgIHRvdGFsSXRlbXM6ICc9JyxcbiAgICAgIGZpcnN0VGV4dDogJ0AnLFxuICAgICAgcHJldmlvdXNUZXh0OiAnQCcsXG4gICAgICBuZXh0VGV4dDogJ0AnLFxuICAgICAgbGFzdFRleHQ6ICdAJyxcbiAgICAgIG5nRGlzYWJsZWQ6Jz0nXG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ3VpYlBhZ2luYXRpb24nLCAnP25nTW9kZWwnXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJQYWdpbmF0aW9uQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAncGFnaW5hdGlvbicsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2luYXRpb24uaHRtbCc7XG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdwYWdpbmF0aW9uJyk7XG4gICAgICB2YXIgcGFnaW5hdGlvbkN0cmwgPSBjdHJsc1swXSwgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgaWYgKCFuZ01vZGVsQ3RybCkge1xuICAgICAgICAgcmV0dXJuOyAvLyBkbyBub3RoaW5nIGlmIG5vIG5nLW1vZGVsXG4gICAgICB9XG5cbiAgICAgIHBhZ2luYXRpb25DdHJsLmluaXQobmdNb2RlbEN0cmwsIHVpYlBhZ2luYXRpb25Db25maWcpO1xuICAgIH1cbiAgfTtcbn1dKTtcblxuLyoqXG4gKiBUaGUgZm9sbG93aW5nIGZlYXR1cmVzIGFyZSBzdGlsbCBvdXRzdGFuZGluZzogYW5pbWF0aW9uIGFzIGFcbiAqIGZ1bmN0aW9uLCBwbGFjZW1lbnQgYXMgYSBmdW5jdGlvbiwgaW5zaWRlLCBzdXBwb3J0IGZvciBtb3JlIHRyaWdnZXJzIHRoYW5cbiAqIGp1c3QgbW91c2UgZW50ZXIvbGVhdmUsIGh0bWwgdG9vbHRpcHMsIGFuZCBzZWxlY3RvciBkZWxlZ2F0aW9uLlxuICovXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnRvb2x0aXAnLCBbJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbicsICd1aS5ib290c3RyYXAuc3RhY2tlZE1hcCddKVxuXG4vKipcbiAqIFRoZSAkdG9vbHRpcCBzZXJ2aWNlIGNyZWF0ZXMgdG9vbHRpcC0gYW5kIHBvcG92ZXItbGlrZSBkaXJlY3RpdmVzIGFzIHdlbGwgYXNcbiAqIGhvdXNlcyBnbG9iYWwgb3B0aW9ucyBmb3IgdGhlbS5cbiAqL1xuLnByb3ZpZGVyKCckdWliVG9vbHRpcCcsIGZ1bmN0aW9uKCkge1xuICAvLyBUaGUgZGVmYXVsdCBvcHRpb25zIHRvb2x0aXAgYW5kIHBvcG92ZXIuXG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIHBsYWNlbWVudENsYXNzUHJlZml4OiAnJyxcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgcG9wdXBEZWxheTogMCxcbiAgICBwb3B1cENsb3NlRGVsYXk6IDAsXG4gICAgdXNlQ29udGVudEV4cDogZmFsc2VcbiAgfTtcblxuICAvLyBEZWZhdWx0IGhpZGUgdHJpZ2dlcnMgZm9yIGVhY2ggc2hvdyB0cmlnZ2VyXG4gIHZhciB0cmlnZ2VyTWFwID0ge1xuICAgICdtb3VzZWVudGVyJzogJ21vdXNlbGVhdmUnLFxuICAgICdjbGljayc6ICdjbGljaycsXG4gICAgJ291dHNpZGVDbGljayc6ICdvdXRzaWRlQ2xpY2snLFxuICAgICdmb2N1cyc6ICdibHVyJyxcbiAgICAnbm9uZSc6ICcnXG4gIH07XG5cbiAgLy8gVGhlIG9wdGlvbnMgc3BlY2lmaWVkIHRvIHRoZSBwcm92aWRlciBnbG9iYWxseS5cbiAgdmFyIGdsb2JhbE9wdGlvbnMgPSB7fTtcblxuICAvKipcbiAgICogYG9wdGlvbnMoe30pYCBhbGxvd3MgZ2xvYmFsIGNvbmZpZ3VyYXRpb24gb2YgYWxsIHRvb2x0aXBzIGluIHRoZVxuICAgKiBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoICdBcHAnLCBbJ3VpLmJvb3RzdHJhcC50b29sdGlwJ10sIGZ1bmN0aW9uKCAkdG9vbHRpcFByb3ZpZGVyICkge1xuICAgKiAgICAgLy8gcGxhY2UgdG9vbHRpcHMgbGVmdCBpbnN0ZWFkIG9mIHRvcCBieSBkZWZhdWx0XG4gICAqICAgICAkdG9vbHRpcFByb3ZpZGVyLm9wdGlvbnMoIHsgcGxhY2VtZW50OiAnbGVmdCcgfSApO1xuICAgKiAgIH0pO1xuICAgKi9cblx0dGhpcy5vcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRhbmd1bGFyLmV4dGVuZChnbG9iYWxPcHRpb25zLCB2YWx1ZSk7XG5cdH07XG5cbiAgLyoqXG4gICAqIFRoaXMgYWxsb3dzIHlvdSB0byBleHRlbmQgdGhlIHNldCBvZiB0cmlnZ2VyIG1hcHBpbmdzIGF2YWlsYWJsZS4gRS5nLjpcbiAgICpcbiAgICogICAkdG9vbHRpcFByb3ZpZGVyLnNldFRyaWdnZXJzKCB7ICdvcGVuVHJpZ2dlcic6ICdjbG9zZVRyaWdnZXInIH0gKTtcbiAgICovXG4gIHRoaXMuc2V0VHJpZ2dlcnMgPSBmdW5jdGlvbiBzZXRUcmlnZ2Vycyh0cmlnZ2Vycykge1xuICAgIGFuZ3VsYXIuZXh0ZW5kKHRyaWdnZXJNYXAsIHRyaWdnZXJzKTtcbiAgfTtcblxuICAvKipcbiAgICogVGhpcyBpcyBhIGhlbHBlciBmdW5jdGlvbiBmb3IgdHJhbnNsYXRpbmcgY2FtZWwtY2FzZSB0byBzbmFrZV9jYXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gc25ha2VfY2FzZShuYW1lKSB7XG4gICAgdmFyIHJlZ2V4cCA9IC9bQS1aXS9nO1xuICAgIHZhciBzZXBhcmF0b3IgPSAnLSc7XG4gICAgcmV0dXJuIG5hbWUucmVwbGFjZShyZWdleHAsIGZ1bmN0aW9uKGxldHRlciwgcG9zKSB7XG4gICAgICByZXR1cm4gKHBvcyA/IHNlcGFyYXRvciA6ICcnKSArIGxldHRlci50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFjdHVhbCBpbnN0YW5jZSBvZiB0aGUgJHRvb2x0aXAgc2VydmljZS5cbiAgICogVE9ETyBzdXBwb3J0IG11bHRpcGxlIHRyaWdnZXJzXG4gICAqL1xuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGNvbXBpbGUnLCAnJHRpbWVvdXQnLCAnJGRvY3VtZW50JywgJyR1aWJQb3NpdGlvbicsICckaW50ZXJwb2xhdGUnLCAnJHJvb3RTY29wZScsICckcGFyc2UnLCAnJCRzdGFja2VkTWFwJywgZnVuY3Rpb24oJHdpbmRvdywgJGNvbXBpbGUsICR0aW1lb3V0LCAkZG9jdW1lbnQsICRwb3NpdGlvbiwgJGludGVycG9sYXRlLCAkcm9vdFNjb3BlLCAkcGFyc2UsICQkc3RhY2tlZE1hcCkge1xuICAgIHZhciBvcGVuZWRUb29sdGlwcyA9ICQkc3RhY2tlZE1hcC5jcmVhdGVOZXcoKTtcbiAgICAkZG9jdW1lbnQub24oJ2tleXVwJywga2V5cHJlc3NMaXN0ZW5lcik7XG5cbiAgICAkcm9vdFNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICRkb2N1bWVudC5vZmYoJ2tleXVwJywga2V5cHJlc3NMaXN0ZW5lcik7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBrZXlwcmVzc0xpc3RlbmVyKGUpIHtcbiAgICAgIGlmIChlLndoaWNoID09PSAyNykge1xuICAgICAgICB2YXIgbGFzdCA9IG9wZW5lZFRvb2x0aXBzLnRvcCgpO1xuICAgICAgICBpZiAobGFzdCkge1xuICAgICAgICAgIGxhc3QudmFsdWUuY2xvc2UoKTtcbiAgICAgICAgICBsYXN0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAkdG9vbHRpcCh0dFR5cGUsIHByZWZpeCwgZGVmYXVsdFRyaWdnZXJTaG93LCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBnbG9iYWxPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBzaG93IGFuZCBoaWRlIHRyaWdnZXJzLlxuICAgICAgICpcbiAgICAgICAqIElmIGEgdHJpZ2dlciBpcyBzdXBwbGllZCxcbiAgICAgICAqIGl0IGlzIHVzZWQgdG8gc2hvdyB0aGUgdG9vbHRpcDsgb3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRyaWdnZXJgXG4gICAgICAgKiBvcHRpb24gcGFzc2VkIHRvIHRoZSBgJHRvb2x0aXBQcm92aWRlci5vcHRpb25zYCBtZXRob2Q7IGVsc2UgaXQgd2lsbFxuICAgICAgICogZGVmYXVsdCB0byB0aGUgdHJpZ2dlciBzdXBwbGllZCB0byB0aGlzIGRpcmVjdGl2ZSBmYWN0b3J5LlxuICAgICAgICpcbiAgICAgICAqIFRoZSBoaWRlIHRyaWdnZXIgaXMgYmFzZWQgb24gdGhlIHNob3cgdHJpZ2dlci4gSWYgdGhlIGB0cmlnZ2VyYCBvcHRpb25cbiAgICAgICAqIHdhcyBwYXNzZWQgdG8gdGhlIGAkdG9vbHRpcFByb3ZpZGVyLm9wdGlvbnNgIG1ldGhvZCwgaXQgd2lsbCB1c2UgdGhlXG4gICAgICAgKiBtYXBwZWQgdHJpZ2dlciBmcm9tIGB0cmlnZ2VyTWFwYCBvciB0aGUgcGFzc2VkIHRyaWdnZXIgaWYgdGhlIG1hcCBpc1xuICAgICAgICogdW5kZWZpbmVkOyBvdGhlcndpc2UsIGl0IHVzZXMgdGhlIGB0cmlnZ2VyTWFwYCB2YWx1ZSBvZiB0aGUgc2hvd1xuICAgICAgICogdHJpZ2dlcjsgZWxzZSBpdCB3aWxsIGp1c3QgdXNlIHRoZSBzaG93IHRyaWdnZXIuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldFRyaWdnZXJzKHRyaWdnZXIpIHtcbiAgICAgICAgdmFyIHNob3cgPSAodHJpZ2dlciB8fCBvcHRpb25zLnRyaWdnZXIgfHwgZGVmYXVsdFRyaWdnZXJTaG93KS5zcGxpdCgnICcpO1xuICAgICAgICB2YXIgaGlkZSA9IHNob3cubWFwKGZ1bmN0aW9uKHRyaWdnZXIpIHtcbiAgICAgICAgICByZXR1cm4gdHJpZ2dlck1hcFt0cmlnZ2VyXSB8fCB0cmlnZ2VyO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG93OiBzaG93LFxuICAgICAgICAgIGhpZGU6IGhpZGVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBzbmFrZV9jYXNlKHR0VHlwZSk7XG5cbiAgICAgIHZhciBzdGFydFN5bSA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpO1xuICAgICAgdmFyIGVuZFN5bSA9ICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2woKTtcbiAgICAgIHZhciB0ZW1wbGF0ZSA9XG4gICAgICAgICc8ZGl2ICcrIGRpcmVjdGl2ZU5hbWUgKyAnLXBvcHVwICcgK1xuICAgICAgICAgICd1aWItdGl0bGU9XCInICsgc3RhcnRTeW0gKyAndGl0bGUnICsgZW5kU3ltICsgJ1wiICcgK1xuICAgICAgICAgIChvcHRpb25zLnVzZUNvbnRlbnRFeHAgP1xuICAgICAgICAgICAgJ2NvbnRlbnQtZXhwPVwiY29udGVudEV4cCgpXCIgJyA6XG4gICAgICAgICAgICAnY29udGVudD1cIicgKyBzdGFydFN5bSArICdjb250ZW50JyArIGVuZFN5bSArICdcIiAnKSArXG4gICAgICAgICAgJ29yaWdpbi1zY29wZT1cIm9yaWdTY29wZVwiICcgK1xuICAgICAgICAgICdjbGFzcz1cInVpYi1wb3NpdGlvbi1tZWFzdXJlICcgKyBwcmVmaXggKyAnXCIgJyArXG4gICAgICAgICAgJ3Rvb2x0aXAtYW5pbWF0aW9uLWNsYXNzPVwiZmFkZVwiJyArXG4gICAgICAgICAgJ3VpYi10b29sdGlwLWNsYXNzZXMgJyArXG4gICAgICAgICAgJ25nLWNsYXNzPVwieyBpbjogaXNPcGVuIH1cIiAnICtcbiAgICAgICAgICAnPicgK1xuICAgICAgICAnPC9kaXY+JztcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24odEVsZW0sIHRBdHRycykge1xuICAgICAgICAgIHZhciB0b29sdGlwTGlua2VyID0gJGNvbXBpbGUodGVtcGxhdGUpO1xuXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB0b29sdGlwQ3RybCkge1xuICAgICAgICAgICAgdmFyIHRvb2x0aXA7XG4gICAgICAgICAgICB2YXIgdG9vbHRpcExpbmtlZFNjb3BlO1xuICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgICAgICAgdmFyIHNob3dUaW1lb3V0O1xuICAgICAgICAgICAgdmFyIGhpZGVUaW1lb3V0O1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uVGltZW91dDtcbiAgICAgICAgICAgIHZhciBhZGp1c3RtZW50VGltZW91dDtcbiAgICAgICAgICAgIHZhciBhcHBlbmRUb0JvZHkgPSBhbmd1bGFyLmlzRGVmaW5lZChvcHRpb25zLmFwcGVuZFRvQm9keSkgPyBvcHRpb25zLmFwcGVuZFRvQm9keSA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHRyaWdnZXJzID0gZ2V0VHJpZ2dlcnModW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHZhciBoYXNFbmFibGVFeHAgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRyc1twcmVmaXggKyAnRW5hYmxlJ10pO1xuICAgICAgICAgICAgdmFyIHR0U2NvcGUgPSBzY29wZS4kbmV3KHRydWUpO1xuICAgICAgICAgICAgdmFyIHJlcG9zaXRpb25TY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpc09wZW5QYXJzZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzW3ByZWZpeCArICdJc09wZW4nXSkgPyAkcGFyc2UoYXR0cnNbcHJlZml4ICsgJ0lzT3BlbiddKSA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRQYXJzZSA9IG9wdGlvbnMudXNlQ29udGVudEV4cCA/ICRwYXJzZShhdHRyc1t0dFR5cGVdKSA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IFtdO1xuICAgICAgICAgICAgdmFyIGxhc3RQbGFjZW1lbnQ7XG5cbiAgICAgICAgICAgIHZhciBwb3NpdGlvblRvb2x0aXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdG9vbHRpcCBleGlzdHMgYW5kIGlzIG5vdCBlbXB0eVxuICAgICAgICAgICAgICBpZiAoIXRvb2x0aXAgfHwgIXRvb2x0aXAuaHRtbCgpKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgICAgIGlmICghcG9zaXRpb25UaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25UaW1lb3V0ID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdHRQb3NpdGlvbiA9ICRwb3NpdGlvbi5wb3NpdGlvbkVsZW1lbnRzKGVsZW1lbnQsIHRvb2x0aXAsIHR0U2NvcGUucGxhY2VtZW50LCBhcHBlbmRUb0JvZHkpO1xuICAgICAgICAgICAgICAgICAgdmFyIGluaXRpYWxIZWlnaHQgPSBhbmd1bGFyLmlzRGVmaW5lZCh0b29sdGlwLm9mZnNldEhlaWdodCkgPyB0b29sdGlwLm9mZnNldEhlaWdodCA6IHRvb2x0aXAucHJvcCgnb2Zmc2V0SGVpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFBvcyA9IGFwcGVuZFRvQm9keSA/ICRwb3NpdGlvbi5vZmZzZXQoZWxlbWVudCkgOiAkcG9zaXRpb24ucG9zaXRpb24oZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICB0b29sdGlwLmNzcyh7IHRvcDogdHRQb3NpdGlvbi50b3AgKyAncHgnLCBsZWZ0OiB0dFBvc2l0aW9uLmxlZnQgKyAncHgnIH0pO1xuICAgICAgICAgICAgICAgICAgdmFyIHBsYWNlbWVudENsYXNzZXMgPSB0dFBvc2l0aW9uLnBsYWNlbWVudC5zcGxpdCgnLScpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoIXRvb2x0aXAuaGFzQ2xhc3MocGxhY2VtZW50Q2xhc3Nlc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5yZW1vdmVDbGFzcyhsYXN0UGxhY2VtZW50LnNwbGl0KCctJylbMF0pO1xuICAgICAgICAgICAgICAgICAgICB0b29sdGlwLmFkZENsYXNzKHBsYWNlbWVudENsYXNzZXNbMF0pO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBpZiAoIXRvb2x0aXAuaGFzQ2xhc3Mob3B0aW9ucy5wbGFjZW1lbnRDbGFzc1ByZWZpeCArIHR0UG9zaXRpb24ucGxhY2VtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICB0b29sdGlwLnJlbW92ZUNsYXNzKG9wdGlvbnMucGxhY2VtZW50Q2xhc3NQcmVmaXggKyBsYXN0UGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5hZGRDbGFzcyhvcHRpb25zLnBsYWNlbWVudENsYXNzUHJlZml4ICsgdHRQb3NpdGlvbi5wbGFjZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBhZGp1c3RtZW50VGltZW91dCA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudEhlaWdodCA9IGFuZ3VsYXIuaXNEZWZpbmVkKHRvb2x0aXAub2Zmc2V0SGVpZ2h0KSA/IHRvb2x0aXAub2Zmc2V0SGVpZ2h0IDogdG9vbHRpcC5wcm9wKCdvZmZzZXRIZWlnaHQnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkanVzdG1lbnQgPSAkcG9zaXRpb24uYWRqdXN0VG9wKHBsYWNlbWVudENsYXNzZXMsIGVsZW1lbnRQb3MsIGluaXRpYWxIZWlnaHQsIGN1cnJlbnRIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWRqdXN0bWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuY3NzKGFkanVzdG1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFkanVzdG1lbnRUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIH0sIDAsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgLy8gZmlyc3QgdGltZSB0aHJvdWdoIHR0IGVsZW1lbnQgd2lsbCBoYXZlIHRoZVxuICAgICAgICAgICAgICAgICAgLy8gdWliLXBvc2l0aW9uLW1lYXN1cmUgY2xhc3Mgb3IgaWYgdGhlIHBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgLy8gaGFzIGNoYW5nZWQgd2UgbmVlZCB0byBwb3NpdGlvbiB0aGUgYXJyb3cuXG4gICAgICAgICAgICAgICAgICBpZiAodG9vbHRpcC5oYXNDbGFzcygndWliLXBvc2l0aW9uLW1lYXN1cmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAkcG9zaXRpb24ucG9zaXRpb25BcnJvdyh0b29sdGlwLCB0dFBvc2l0aW9uLnBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAucmVtb3ZlQ2xhc3MoJ3VpYi1wb3NpdGlvbi1tZWFzdXJlJyk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RQbGFjZW1lbnQgIT09IHR0UG9zaXRpb24ucGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICRwb3NpdGlvbi5wb3NpdGlvbkFycm93KHRvb2x0aXAsIHR0UG9zaXRpb24ucGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGxhc3RQbGFjZW1lbnQgPSB0dFBvc2l0aW9uLnBsYWNlbWVudDtcblxuICAgICAgICAgICAgICAgICAgcG9zaXRpb25UaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9LCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIFNldCB1cCB0aGUgY29ycmVjdCBzY29wZSB0byBhbGxvdyB0cmFuc2NsdXNpb24gbGF0ZXJcbiAgICAgICAgICAgIHR0U2NvcGUub3JpZ1Njb3BlID0gc2NvcGU7XG5cbiAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIHRoZSB0b29sdGlwIGlzIG5vdCBvcGVuLlxuICAgICAgICAgICAgLy8gVE9ETyBhZGQgYWJpbGl0eSB0byBzdGFydCB0b29sdGlwIG9wZW5lZFxuICAgICAgICAgICAgdHRTY29wZS5pc09wZW4gPSBmYWxzZTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdG9nZ2xlVG9vbHRpcEJpbmQoKSB7XG4gICAgICAgICAgICAgIGlmICghdHRTY29wZS5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICBzaG93VG9vbHRpcEJpbmQoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoaWRlVG9vbHRpcEJpbmQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTaG93IHRoZSB0b29sdGlwIHdpdGggZGVsYXkgaWYgc3BlY2lmaWVkLCBvdGhlcndpc2Ugc2hvdyBpdCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgZnVuY3Rpb24gc2hvd1Rvb2x0aXBCaW5kKCkge1xuICAgICAgICAgICAgICBpZiAoaGFzRW5hYmxlRXhwICYmICFzY29wZS4kZXZhbChhdHRyc1twcmVmaXggKyAnRW5hYmxlJ10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY2FuY2VsSGlkZSgpO1xuICAgICAgICAgICAgICBwcmVwYXJlVG9vbHRpcCgpO1xuXG4gICAgICAgICAgICAgIGlmICh0dFNjb3BlLnBvcHVwRGVsYXkpIHtcbiAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nIGlmIHRoZSB0b29sdGlwIHdhcyBhbHJlYWR5IHNjaGVkdWxlZCB0byBwb3AtdXAuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBoYXBwZW5zIGlmIHNob3cgaXMgdHJpZ2dlcmVkIG11bHRpcGxlIHRpbWVzIGJlZm9yZSBhbnkgaGlkZSBpcyB0cmlnZ2VyZWQuXG4gICAgICAgICAgICAgICAgaWYgKCFzaG93VGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgc2hvd1RpbWVvdXQgPSAkdGltZW91dChzaG93LCB0dFNjb3BlLnBvcHVwRGVsYXksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2hvdygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhpZGVUb29sdGlwQmluZCgpIHtcbiAgICAgICAgICAgICAgY2FuY2VsU2hvdygpO1xuXG4gICAgICAgICAgICAgIGlmICh0dFNjb3BlLnBvcHVwQ2xvc2VEZWxheSkge1xuICAgICAgICAgICAgICAgIGlmICghaGlkZVRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgIGhpZGVUaW1lb3V0ID0gJHRpbWVvdXQoaGlkZSwgdHRTY29wZS5wb3B1cENsb3NlRGVsYXksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNob3cgdGhlIHRvb2x0aXAgcG9wdXAgZWxlbWVudC5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgICAgICAgIGNhbmNlbFNob3coKTtcbiAgICAgICAgICAgICAgY2FuY2VsSGlkZSgpO1xuXG4gICAgICAgICAgICAgIC8vIERvbid0IHNob3cgZW1wdHkgdG9vbHRpcHMuXG4gICAgICAgICAgICAgIGlmICghdHRTY29wZS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIubm9vcDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNyZWF0ZVRvb2x0aXAoKTtcblxuICAgICAgICAgICAgICAvLyBBbmQgc2hvdyB0aGUgdG9vbHRpcC5cbiAgICAgICAgICAgICAgdHRTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHR0U2NvcGUuaXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhc3NpZ25Jc09wZW4odHJ1ZSk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25Ub29sdGlwKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxTaG93KCkge1xuICAgICAgICAgICAgICBpZiAoc2hvd1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwoc2hvd1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHNob3dUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChwb3NpdGlvblRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwocG9zaXRpb25UaW1lb3V0KTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEhpZGUgdGhlIHRvb2x0aXAgcG9wdXAgZWxlbWVudC5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgICAgICAgIGlmICghdHRTY29wZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIEZpcnN0IHRoaW5ncyBmaXJzdDogd2UgZG9uJ3Qgc2hvdyBpdCBhbnltb3JlLlxuICAgICAgICAgICAgICB0dFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR0U2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgIHR0U2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICBhc3NpZ25Jc09wZW4oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgLy8gQW5kIG5vdyB3ZSByZW1vdmUgaXQgZnJvbSB0aGUgRE9NLiBIb3dldmVyLCBpZiB3ZSBoYXZlIGFuaW1hdGlvbiwgd2VcbiAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gd2FpdCBmb3IgaXQgdG8gZXhwaXJlIGJlZm9yZWhhbmQuXG4gICAgICAgICAgICAgICAgICAvLyBGSVhNRTogdGhpcyBpcyBhIHBsYWNlaG9sZGVyIGZvciBhIHBvcnQgb2YgdGhlIHRyYW5zaXRpb25zIGxpYnJhcnkuXG4gICAgICAgICAgICAgICAgICAvLyBUaGUgZmFkZSB0cmFuc2l0aW9uIGluIFRXQlMgaXMgMTUwbXMuXG4gICAgICAgICAgICAgICAgICBpZiAodHRTY29wZS5hbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmFuc2l0aW9uVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1lb3V0ID0gJHRpbWVvdXQocmVtb3ZlVG9vbHRpcCwgMTUwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxIaWRlKCkge1xuICAgICAgICAgICAgICBpZiAoaGlkZVRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwoaGlkZVRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIGhpZGVUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0cmFuc2l0aW9uVGltZW91dCk7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXAoKSB7XG4gICAgICAgICAgICAgIC8vIFRoZXJlIGNhbiBvbmx5IGJlIG9uZSB0b29sdGlwIGVsZW1lbnQgcGVyIGRpcmVjdGl2ZSBzaG93biBhdCBvbmNlLlxuICAgICAgICAgICAgICBpZiAodG9vbHRpcCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZSA9IHR0U2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgICB0b29sdGlwID0gdG9vbHRpcExpbmtlcih0b29sdGlwTGlua2VkU2NvcGUsIGZ1bmN0aW9uKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAgICAgICAgICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLmFwcGVuZCh0b29sdGlwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZnRlcih0b29sdGlwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIG9wZW5lZFRvb2x0aXBzLmFkZCh0dFNjb3BlLCB7XG4gICAgICAgICAgICAgICAgY2xvc2U6IGhpZGVcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcHJlcE9ic2VydmVycygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVUb29sdGlwKCkge1xuICAgICAgICAgICAgICBjYW5jZWxTaG93KCk7XG4gICAgICAgICAgICAgIGNhbmNlbEhpZGUoKTtcbiAgICAgICAgICAgICAgdW5yZWdpc3Rlck9ic2VydmVycygpO1xuXG4gICAgICAgICAgICAgIGlmICh0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcC5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIHRvb2x0aXAgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChhZGp1c3RtZW50VGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGFkanVzdG1lbnRUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvcGVuZWRUb29sdGlwcy5yZW1vdmUodHRTY29wZSk7XG5cbiAgICAgICAgICAgICAgaWYgKHRvb2x0aXBMaW5rZWRTY29wZSkge1xuICAgICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZSA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgdGhlIGluaXRpYWwgc2NvcGUgdmFsdWVzLiBPbmNlXG4gICAgICAgICAgICAgKiB0aGUgdG9vbHRpcCBpcyBjcmVhdGVkLCB0aGUgb2JzZXJ2ZXJzXG4gICAgICAgICAgICAgKiB3aWxsIGJlIGFkZGVkIHRvIGtlZXAgdGhpbmdzIGluIHN5bmMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBhcmVUb29sdGlwKCkge1xuICAgICAgICAgICAgICB0dFNjb3BlLnRpdGxlID0gYXR0cnNbcHJlZml4ICsgJ1RpdGxlJ107XG4gICAgICAgICAgICAgIGlmIChjb250ZW50UGFyc2UpIHtcbiAgICAgICAgICAgICAgICB0dFNjb3BlLmNvbnRlbnQgPSBjb250ZW50UGFyc2Uoc2NvcGUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHR0U2NvcGUuY29udGVudCA9IGF0dHJzW3R0VHlwZV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0dFNjb3BlLnBvcHVwQ2xhc3MgPSBhdHRyc1twcmVmaXggKyAnQ2xhc3MnXTtcbiAgICAgICAgICAgICAgdHRTY29wZS5wbGFjZW1lbnQgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRyc1twcmVmaXggKyAnUGxhY2VtZW50J10pID8gYXR0cnNbcHJlZml4ICsgJ1BsYWNlbWVudCddIDogb3B0aW9ucy5wbGFjZW1lbnQ7XG4gICAgICAgICAgICAgIHZhciBwbGFjZW1lbnQgPSAkcG9zaXRpb24ucGFyc2VQbGFjZW1lbnQodHRTY29wZS5wbGFjZW1lbnQpO1xuICAgICAgICAgICAgICBsYXN0UGxhY2VtZW50ID0gcGxhY2VtZW50WzFdID8gcGxhY2VtZW50WzBdICsgJy0nICsgcGxhY2VtZW50WzFdIDogcGxhY2VtZW50WzBdO1xuXG4gICAgICAgICAgICAgIHZhciBkZWxheSA9IHBhcnNlSW50KGF0dHJzW3ByZWZpeCArICdQb3B1cERlbGF5J10sIDEwKTtcbiAgICAgICAgICAgICAgdmFyIGNsb3NlRGVsYXkgPSBwYXJzZUludChhdHRyc1twcmVmaXggKyAnUG9wdXBDbG9zZURlbGF5J10sIDEwKTtcbiAgICAgICAgICAgICAgdHRTY29wZS5wb3B1cERlbGF5ID0gIWlzTmFOKGRlbGF5KSA/IGRlbGF5IDogb3B0aW9ucy5wb3B1cERlbGF5O1xuICAgICAgICAgICAgICB0dFNjb3BlLnBvcHVwQ2xvc2VEZWxheSA9ICFpc05hTihjbG9zZURlbGF5KSA/IGNsb3NlRGVsYXkgOiBvcHRpb25zLnBvcHVwQ2xvc2VEZWxheTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gYXNzaWduSXNPcGVuKGlzT3Blbikge1xuICAgICAgICAgICAgICBpZiAoaXNPcGVuUGFyc2UgJiYgYW5ndWxhci5pc0Z1bmN0aW9uKGlzT3BlblBhcnNlLmFzc2lnbikpIHtcbiAgICAgICAgICAgICAgICBpc09wZW5QYXJzZS5hc3NpZ24oc2NvcGUsIGlzT3Blbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHRTY29wZS5jb250ZW50RXhwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0dFNjb3BlLmNvbnRlbnQ7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE9ic2VydmUgdGhlIHJlbGV2YW50IGF0dHJpYnV0ZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKCdkaXNhYmxlZCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsU2hvdygpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHZhbCAmJiB0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpc09wZW5QYXJzZSkge1xuICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goaXNPcGVuUGFyc2UsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgIGlmICh0dFNjb3BlICYmICF2YWwgPT09IHR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICB0b2dnbGVUb29sdGlwQmluZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBPYnNlcnZlcnMoKSB7XG4gICAgICAgICAgICAgIG9ic2VydmVycy5sZW5ndGggPSAwO1xuXG4gICAgICAgICAgICAgIGlmIChjb250ZW50UGFyc2UpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlcnMucHVzaChcbiAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChjb250ZW50UGFyc2UsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICB0dFNjb3BlLmNvbnRlbnQgPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsICYmIHR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBvYnNlcnZlcnMucHVzaChcbiAgICAgICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVwb3NpdGlvblNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJlcG9zaXRpb25TY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvc2l0aW9uU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHRTY29wZSAmJiB0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ic2VydmVycy5wdXNoKFxuICAgICAgICAgICAgICAgICAgYXR0cnMuJG9ic2VydmUodHRUeXBlLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdHRTY29wZS5jb250ZW50ID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbCAmJiB0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgYXR0cnMuJG9ic2VydmUocHJlZml4ICsgJ1RpdGxlJywgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgICB0dFNjb3BlLnRpdGxlID0gdmFsO1xuICAgICAgICAgICAgICAgICAgaWYgKHR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uVG9vbHRpcCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgYXR0cnMuJG9ic2VydmUocHJlZml4ICsgJ1BsYWNlbWVudCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgICAgdHRTY29wZS5wbGFjZW1lbnQgPSB2YWwgPyB2YWwgOiBvcHRpb25zLnBsYWNlbWVudDtcbiAgICAgICAgICAgICAgICAgIGlmICh0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiB1bnJlZ2lzdGVyT2JzZXJ2ZXJzKCkge1xuICAgICAgICAgICAgICBpZiAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChvYnNlcnZlcnMsIGZ1bmN0aW9uKG9ic2VydmVyKSB7XG4gICAgICAgICAgICAgICAgICBvYnNlcnZlcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG9ic2VydmVycy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGhpZGUgdG9vbHRpcHMvcG9wb3ZlcnMgZm9yIG91dHNpZGVDbGljayB0cmlnZ2VyXG4gICAgICAgICAgICBmdW5jdGlvbiBib2R5SGlkZVRvb2x0aXBCaW5kKGUpIHtcbiAgICAgICAgICAgICAgaWYgKCF0dFNjb3BlIHx8ICF0dFNjb3BlLmlzT3BlbiB8fCAhdG9vbHRpcCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIHRvb2x0aXAvcG9wb3ZlciBsaW5rIG9yIHRvb2wgdG9vbHRpcC9wb3BvdmVyIGl0c2VsZiB3ZXJlIG5vdCBjbGlja2VkXG4gICAgICAgICAgICAgIGlmICghZWxlbWVudFswXS5jb250YWlucyhlLnRhcmdldCkgJiYgIXRvb2x0aXBbMF0uY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgaGlkZVRvb2x0aXBCaW5kKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gS2V5Ym9hcmRFdmVudCBoYW5kbGVyIHRvIGhpZGUgdGhlIHRvb2x0aXAgb24gRXNjYXBlIGtleSBwcmVzc1xuICAgICAgICAgICAgZnVuY3Rpb24gaGlkZU9uRXNjYXBlS2V5KGUpIHtcbiAgICAgICAgICAgICAgaWYgKGUud2hpY2ggPT09IDI3KSB7XG4gICAgICAgICAgICAgICAgaGlkZVRvb2x0aXBCaW5kKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHVucmVnaXN0ZXJUcmlnZ2VycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB0cmlnZ2Vycy5zaG93LmZvckVhY2goZnVuY3Rpb24odHJpZ2dlcikge1xuICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyID09PSAnb3V0c2lkZUNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5vZmYoJ2NsaWNrJywgdG9nZ2xlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50Lm9mZih0cmlnZ2VyLCBzaG93VG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5vZmYodHJpZ2dlciwgdG9nZ2xlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbGVtZW50Lm9mZigna2V5cHJlc3MnLCBoaWRlT25Fc2NhcGVLZXkpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdHJpZ2dlcnMuaGlkZS5mb3JFYWNoKGZ1bmN0aW9uKHRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHJpZ2dlciA9PT0gJ291dHNpZGVDbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICRkb2N1bWVudC5vZmYoJ2NsaWNrJywgYm9keUhpZGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQub2ZmKHRyaWdnZXIsIGhpZGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBUcmlnZ2VycygpIHtcbiAgICAgICAgICAgICAgdmFyIHNob3dUcmlnZ2VycyA9IFtdLCBoaWRlVHJpZ2dlcnMgPSBbXTtcbiAgICAgICAgICAgICAgdmFyIHZhbCA9IHNjb3BlLiRldmFsKGF0dHJzW3ByZWZpeCArICdUcmlnZ2VyJ10pO1xuICAgICAgICAgICAgICB1bnJlZ2lzdGVyVHJpZ2dlcnMoKTtcblxuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc09iamVjdCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModmFsKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgICAgICAgc2hvd1RyaWdnZXJzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgIGhpZGVUcmlnZ2Vycy5wdXNoKHZhbFtrZXldKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VycyA9IHtcbiAgICAgICAgICAgICAgICAgIHNob3c6IHNob3dUcmlnZ2VycyxcbiAgICAgICAgICAgICAgICAgIGhpZGU6IGhpZGVUcmlnZ2Vyc1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcnMgPSBnZXRUcmlnZ2Vycyh2YWwpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHRyaWdnZXJzLnNob3cgIT09ICdub25lJykge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJzLnNob3cuZm9yRWFjaChmdW5jdGlvbih0cmlnZ2VyLCBpZHgpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyID09PSAnb3V0c2lkZUNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIHRvZ2dsZVRvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICAgICAgJGRvY3VtZW50Lm9uKCdjbGljaycsIGJvZHlIaWRlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyID09PSB0cmlnZ2Vycy5oaWRlW2lkeF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbih0cmlnZ2VyLCB0b2dnbGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbih0cmlnZ2VyLCBzaG93VG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm9uKHRyaWdnZXJzLmhpZGVbaWR4XSwgaGlkZVRvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQub24oJ2tleXByZXNzJywgaGlkZU9uRXNjYXBlS2V5KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcmVwVHJpZ2dlcnMoKTtcblxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHNjb3BlLiRldmFsKGF0dHJzW3ByZWZpeCArICdBbmltYXRpb24nXSk7XG4gICAgICAgICAgICB0dFNjb3BlLmFuaW1hdGlvbiA9IGFuZ3VsYXIuaXNEZWZpbmVkKGFuaW1hdGlvbikgPyAhIWFuaW1hdGlvbiA6IG9wdGlvbnMuYW5pbWF0aW9uO1xuXG4gICAgICAgICAgICB2YXIgYXBwZW5kVG9Cb2R5VmFsO1xuICAgICAgICAgICAgdmFyIGFwcGVuZEtleSA9IHByZWZpeCArICdBcHBlbmRUb0JvZHknO1xuICAgICAgICAgICAgaWYgKGFwcGVuZEtleSBpbiBhdHRycyAmJiBhdHRyc1thcHBlbmRLZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgYXBwZW5kVG9Cb2R5VmFsID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFwcGVuZFRvQm9keVZhbCA9IHNjb3BlLiRldmFsKGF0dHJzW2FwcGVuZEtleV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhcHBlbmRUb0JvZHkgPSBhbmd1bGFyLmlzRGVmaW5lZChhcHBlbmRUb0JvZHlWYWwpID8gYXBwZW5kVG9Cb2R5VmFsIDogYXBwZW5kVG9Cb2R5O1xuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdG9vbHRpcCBpcyBkZXN0cm95ZWQgYW5kIHJlbW92ZWQuXG4gICAgICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gb25EZXN0cm95VG9vbHRpcCgpIHtcbiAgICAgICAgICAgICAgdW5yZWdpc3RlclRyaWdnZXJzKCk7XG4gICAgICAgICAgICAgIHJlbW92ZVRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgdHRTY29wZSA9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gIH1dO1xufSlcblxuLy8gVGhpcyBpcyBtb3N0bHkgbmdJbmNsdWRlIGNvZGUgYnV0IHdpdGggYSBjdXN0b20gc2NvcGVcbi5kaXJlY3RpdmUoJ3VpYlRvb2x0aXBUZW1wbGF0ZVRyYW5zY2x1ZGUnLCBbXG4gICAgICAgICAnJGFuaW1hdGUnLCAnJHNjZScsICckY29tcGlsZScsICckdGVtcGxhdGVSZXF1ZXN0JyxcbmZ1bmN0aW9uICgkYW5pbWF0ZSwgJHNjZSwgJGNvbXBpbGUsICR0ZW1wbGF0ZVJlcXVlc3QpIHtcbiAgcmV0dXJuIHtcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbSwgYXR0cnMpIHtcbiAgICAgIHZhciBvcmlnU2NvcGUgPSBzY29wZS4kZXZhbChhdHRycy50b29sdGlwVGVtcGxhdGVUcmFuc2NsdWRlU2NvcGUpO1xuXG4gICAgICB2YXIgY2hhbmdlQ291bnRlciA9IDAsXG4gICAgICAgIGN1cnJlbnRTY29wZSxcbiAgICAgICAgcHJldmlvdXNFbGVtZW50LFxuICAgICAgICBjdXJyZW50RWxlbWVudDtcblxuICAgICAgdmFyIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudCkge1xuICAgICAgICAgIHByZXZpb3VzRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnRTY29wZSkge1xuICAgICAgICAgIGN1cnJlbnRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShjdXJyZW50RWxlbWVudCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gY3VycmVudEVsZW1lbnQ7XG4gICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzY29wZS4kd2F0Y2goJHNjZS5wYXJzZUFzUmVzb3VyY2VVcmwoYXR0cnMudWliVG9vbHRpcFRlbXBsYXRlVHJhbnNjbHVkZSksIGZ1bmN0aW9uKHNyYykge1xuICAgICAgICB2YXIgdGhpc0NoYW5nZUlkID0gKytjaGFuZ2VDb3VudGVyO1xuXG4gICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAvL3NldCB0aGUgMm5kIHBhcmFtIHRvIHRydWUgdG8gaWdub3JlIHRoZSB0ZW1wbGF0ZSByZXF1ZXN0IGVycm9yIHNvIHRoYXQgdGhlIGlubmVyXG4gICAgICAgICAgLy9jb250ZW50cyBhbmQgc2NvcGUgY2FuIGJlIGNsZWFuZWQgdXAuXG4gICAgICAgICAgJHRlbXBsYXRlUmVxdWVzdChzcmMsIHRydWUpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgIT09IGNoYW5nZUNvdW50ZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICB2YXIgbmV3U2NvcGUgPSBvcmlnU2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gcmVzcG9uc2U7XG5cbiAgICAgICAgICAgIHZhciBjbG9uZSA9ICRjb21waWxlKHRlbXBsYXRlKShuZXdTY29wZSwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgZWxlbSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGNsb25lO1xuXG4gICAgICAgICAgICBjdXJyZW50U2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudExvYWRlZCcsIHNyYyk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkID09PSBjaGFuZ2VDb3VudGVyKSB7XG4gICAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudEVycm9yJywgc3JjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50UmVxdWVzdGVkJywgc3JjKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCk7XG4gICAgfVxuICB9O1xufV0pXG5cbi8qKlxuICogTm90ZSB0aGF0IGl0J3MgaW50ZW50aW9uYWwgdGhhdCB0aGVzZSBjbGFzc2VzIGFyZSAqbm90KiBhcHBsaWVkIHRocm91Z2ggJGFuaW1hdGUuXG4gKiBUaGV5IG11c3Qgbm90IGJlIGFuaW1hdGVkIGFzIHRoZXkncmUgZXhwZWN0ZWQgdG8gYmUgcHJlc2VudCBvbiB0aGUgdG9vbHRpcCBvblxuICogaW5pdGlhbGl6YXRpb24uXG4gKi9cbi5kaXJlY3RpdmUoJ3VpYlRvb2x0aXBDbGFzc2VzJywgWyckdWliUG9zaXRpb24nLCBmdW5jdGlvbigkdWliUG9zaXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgLy8gbmVlZCB0byBzZXQgdGhlIHByaW1hcnkgcG9zaXRpb24gc28gdGhlXG4gICAgICAvLyBhcnJvdyBoYXMgc3BhY2UgZHVyaW5nIHBvc2l0aW9uIG1lYXN1cmUuXG4gICAgICAvLyB0b29sdGlwLnBvc2l0aW9uVG9vbHRpcCgpXG4gICAgICBpZiAoc2NvcGUucGxhY2VtZW50KSB7XG4gICAgICAgIC8vIC8vIFRoZXJlIGFyZSBubyB0b3AtbGVmdCBldGMuLi4gY2xhc3Nlc1xuICAgICAgICAvLyAvLyBpbiBUV0JTLCBzbyB3ZSBuZWVkIHRoZSBwcmltYXJ5IHBvc2l0aW9uLlxuICAgICAgICB2YXIgcG9zaXRpb24gPSAkdWliUG9zaXRpb24ucGFyc2VQbGFjZW1lbnQoc2NvcGUucGxhY2VtZW50KTtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhwb3NpdGlvblswXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzY29wZS5wb3B1cENsYXNzKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3Moc2NvcGUucG9wdXBDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzY29wZS5hbmltYXRpb24pIHtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhhdHRycy50b29sdGlwQW5pbWF0aW9uQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7IGNvbnRlbnQ6ICdAJyB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1wb3B1cC5odG1sJ1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliVG9vbHRpcCcsIFsgJyR1aWJUb29sdGlwJywgZnVuY3Rpb24oJHVpYlRvb2x0aXApIHtcbiAgcmV0dXJuICR1aWJUb29sdGlwKCd1aWJUb29sdGlwJywgJ3Rvb2x0aXAnLCAnbW91c2VlbnRlcicpO1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRvb2x0aXBUZW1wbGF0ZVBvcHVwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogeyBjb250ZW50RXhwOiAnJicsIG9yaWdpblNjb3BlOiAnJicgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtdGVtcGxhdGUtcG9wdXAuaHRtbCdcbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRvb2x0aXBUZW1wbGF0ZScsIFsnJHVpYlRvb2x0aXAnLCBmdW5jdGlvbigkdWliVG9vbHRpcCkge1xuICByZXR1cm4gJHVpYlRvb2x0aXAoJ3VpYlRvb2x0aXBUZW1wbGF0ZScsICd0b29sdGlwJywgJ21vdXNlZW50ZXInLCB7XG4gICAgdXNlQ29udGVudEV4cDogdHJ1ZVxuICB9KTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwSHRtbFBvcHVwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogeyBjb250ZW50RXhwOiAnJicgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtaHRtbC1wb3B1cC5odG1sJ1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliVG9vbHRpcEh0bWwnLCBbJyR1aWJUb29sdGlwJywgZnVuY3Rpb24oJHVpYlRvb2x0aXApIHtcbiAgcmV0dXJuICR1aWJUb29sdGlwKCd1aWJUb29sdGlwSHRtbCcsICd0b29sdGlwJywgJ21vdXNlZW50ZXInLCB7XG4gICAgdXNlQ29udGVudEV4cDogdHJ1ZVxuICB9KTtcbn1dKTtcblxuLyoqXG4gKiBUaGUgZm9sbG93aW5nIGZlYXR1cmVzIGFyZSBzdGlsbCBvdXRzdGFuZGluZzogcG9wdXAgZGVsYXksIGFuaW1hdGlvbiBhcyBhXG4gKiBmdW5jdGlvbiwgcGxhY2VtZW50IGFzIGEgZnVuY3Rpb24sIGluc2lkZSwgc3VwcG9ydCBmb3IgbW9yZSB0cmlnZ2VycyB0aGFuXG4gKiBqdXN0IG1vdXNlIGVudGVyL2xlYXZlLCBhbmQgc2VsZWN0b3IgZGVsZWdhdGF0aW9uLlxuICovXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnBvcG92ZXInLCBbJ3VpLmJvb3RzdHJhcC50b29sdGlwJ10pXG5cbi5kaXJlY3RpdmUoJ3VpYlBvcG92ZXJUZW1wbGF0ZVBvcHVwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogeyB1aWJUaXRsZTogJ0AnLCBjb250ZW50RXhwOiAnJicsIG9yaWdpblNjb3BlOiAnJicgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItdGVtcGxhdGUuaHRtbCdcbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlBvcG92ZXJUZW1wbGF0ZScsIFsnJHVpYlRvb2x0aXAnLCBmdW5jdGlvbigkdWliVG9vbHRpcCkge1xuICByZXR1cm4gJHVpYlRvb2x0aXAoJ3VpYlBvcG92ZXJUZW1wbGF0ZScsICdwb3BvdmVyJywgJ2NsaWNrJywge1xuICAgIHVzZUNvbnRlbnRFeHA6IHRydWVcbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliUG9wb3Zlckh0bWxQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHsgY29udGVudEV4cDogJyYnLCB1aWJUaXRsZTogJ0AnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLWh0bWwuaHRtbCdcbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlBvcG92ZXJIdG1sJywgWyckdWliVG9vbHRpcCcsIGZ1bmN0aW9uKCR1aWJUb29sdGlwKSB7XG4gIHJldHVybiAkdWliVG9vbHRpcCgndWliUG9wb3Zlckh0bWwnLCAncG9wb3ZlcicsICdjbGljaycsIHtcbiAgICB1c2VDb250ZW50RXhwOiB0cnVlXG4gIH0pO1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlBvcG92ZXJQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHsgdWliVGl0bGU6ICdAJywgY29udGVudDogJ0AnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJQb3BvdmVyJywgWyckdWliVG9vbHRpcCcsIGZ1bmN0aW9uKCR1aWJUb29sdGlwKSB7XG4gIHJldHVybiAkdWliVG9vbHRpcCgndWliUG9wb3ZlcicsICdwb3BvdmVyJywgJ2NsaWNrJyk7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucHJvZ3Jlc3NiYXInLCBbXSlcblxuLmNvbnN0YW50KCd1aWJQcm9ncmVzc0NvbmZpZycsIHtcbiAgYW5pbWF0ZTogdHJ1ZSxcbiAgbWF4OiAxMDBcbn0pXG5cbi5jb250cm9sbGVyKCdVaWJQcm9ncmVzc0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckYXR0cnMnLCAndWliUHJvZ3Jlc3NDb25maWcnLCBmdW5jdGlvbigkc2NvcGUsICRhdHRycywgcHJvZ3Jlc3NDb25maWcpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgYW5pbWF0ZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5hbmltYXRlKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5hbmltYXRlKSA6IHByb2dyZXNzQ29uZmlnLmFuaW1hdGU7XG5cbiAgdGhpcy5iYXJzID0gW107XG4gICRzY29wZS5tYXggPSBnZXRNYXhPckRlZmF1bHQoKTtcblxuICB0aGlzLmFkZEJhciA9IGZ1bmN0aW9uKGJhciwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICBpZiAoIWFuaW1hdGUpIHtcbiAgICAgIGVsZW1lbnQuY3NzKHsndHJhbnNpdGlvbic6ICdub25lJ30pO1xuICAgIH1cblxuICAgIHRoaXMuYmFycy5wdXNoKGJhcik7XG5cbiAgICBiYXIubWF4ID0gZ2V0TWF4T3JEZWZhdWx0KCk7XG4gICAgYmFyLnRpdGxlID0gYXR0cnMgJiYgYW5ndWxhci5pc0RlZmluZWQoYXR0cnMudGl0bGUpID8gYXR0cnMudGl0bGUgOiAncHJvZ3Jlc3NiYXInO1xuXG4gICAgYmFyLiR3YXRjaCgndmFsdWUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgYmFyLnJlY2FsY3VsYXRlUGVyY2VudGFnZSgpO1xuICAgIH0pO1xuXG4gICAgYmFyLnJlY2FsY3VsYXRlUGVyY2VudGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRvdGFsUGVyY2VudGFnZSA9IHNlbGYuYmFycy5yZWR1Y2UoZnVuY3Rpb24odG90YWwsIGJhcikge1xuICAgICAgICBiYXIucGVyY2VudCA9ICsoMTAwICogYmFyLnZhbHVlIC8gYmFyLm1heCkudG9GaXhlZCgyKTtcbiAgICAgICAgcmV0dXJuIHRvdGFsICsgYmFyLnBlcmNlbnQ7XG4gICAgICB9LCAwKTtcblxuICAgICAgaWYgKHRvdGFsUGVyY2VudGFnZSA+IDEwMCkge1xuICAgICAgICBiYXIucGVyY2VudCAtPSB0b3RhbFBlcmNlbnRhZ2UgLSAxMDA7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGJhci4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICBlbGVtZW50ID0gbnVsbDtcbiAgICAgIHNlbGYucmVtb3ZlQmFyKGJhcik7XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5yZW1vdmVCYXIgPSBmdW5jdGlvbihiYXIpIHtcbiAgICB0aGlzLmJhcnMuc3BsaWNlKHRoaXMuYmFycy5pbmRleE9mKGJhciksIDEpO1xuICAgIHRoaXMuYmFycy5mb3JFYWNoKGZ1bmN0aW9uIChiYXIpIHtcbiAgICAgIGJhci5yZWNhbGN1bGF0ZVBlcmNlbnRhZ2UoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyRhdHRycy4kb2JzZXJ2ZSgnbWF4UGFyYW0nLCBmdW5jdGlvbihtYXhQYXJhbSkge1xuICAkc2NvcGUuJHdhdGNoKCdtYXhQYXJhbScsIGZ1bmN0aW9uKG1heFBhcmFtKSB7XG4gICAgc2VsZi5iYXJzLmZvckVhY2goZnVuY3Rpb24oYmFyKSB7XG4gICAgICBiYXIubWF4ID0gZ2V0TWF4T3JEZWZhdWx0KCk7XG4gICAgICBiYXIucmVjYWxjdWxhdGVQZXJjZW50YWdlKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGdldE1heE9yRGVmYXVsdCAoKSB7XG4gICAgcmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKCRzY29wZS5tYXhQYXJhbSkgPyAkc2NvcGUubWF4UGFyYW0gOiBwcm9ncmVzc0NvbmZpZy5tYXg7XG4gIH1cbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJQcm9ncmVzcycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiAnVWliUHJvZ3Jlc3NDb250cm9sbGVyJyxcbiAgICByZXF1aXJlOiAndWliUHJvZ3Jlc3MnLFxuICAgIHNjb3BlOiB7XG4gICAgICBtYXhQYXJhbTogJz0/bWF4J1xuICAgIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3MuaHRtbCdcbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYkJhcicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICByZXF1aXJlOiAnXnVpYlByb2dyZXNzJyxcbiAgICBzY29wZToge1xuICAgICAgdmFsdWU6ICc9JyxcbiAgICAgIHR5cGU6ICdAJ1xuICAgIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvYmFyLmh0bWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgcHJvZ3Jlc3NDdHJsKSB7XG4gICAgICBwcm9ncmVzc0N0cmwuYWRkQmFyKHNjb3BlLCBlbGVtZW50LCBhdHRycyk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliUHJvZ3Jlc3NiYXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgY29udHJvbGxlcjogJ1VpYlByb2dyZXNzQ29udHJvbGxlcicsXG4gICAgc2NvcGU6IHtcbiAgICAgIHZhbHVlOiAnPScsXG4gICAgICBtYXhQYXJhbTogJz0/bWF4JyxcbiAgICAgIHR5cGU6ICdAJ1xuICAgIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXIuaHRtbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBwcm9ncmVzc0N0cmwpIHtcbiAgICAgIHByb2dyZXNzQ3RybC5hZGRCYXIoc2NvcGUsIGFuZ3VsYXIuZWxlbWVudChlbGVtZW50LmNoaWxkcmVuKClbMF0pLCB7dGl0bGU6IGF0dHJzLnRpdGxlfSk7XG4gICAgfVxuICB9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucmF0aW5nJywgW10pXG5cbi5jb25zdGFudCgndWliUmF0aW5nQ29uZmlnJywge1xuICBtYXg6IDUsXG4gIHN0YXRlT246IG51bGwsXG4gIHN0YXRlT2ZmOiBudWxsLFxuICBlbmFibGVSZXNldDogdHJ1ZSxcbiAgdGl0bGVzOiBbJ29uZScsICd0d28nLCAndGhyZWUnLCAnZm91cicsICdmaXZlJ11cbn0pXG5cbi5jb250cm9sbGVyKCdVaWJSYXRpbmdDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJ3VpYlJhdGluZ0NvbmZpZycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCByYXRpbmdDb25maWcpIHtcbiAgdmFyIG5nTW9kZWxDdHJsID0geyAkc2V0Vmlld1ZhbHVlOiBhbmd1bGFyLm5vb3AgfSxcbiAgICBzZWxmID0gdGhpcztcblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihuZ01vZGVsQ3RybF8pIHtcbiAgICBuZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsXztcbiAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gdGhpcy5yZW5kZXI7XG5cbiAgICBuZ01vZGVsQ3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgPDwgMCAhPT0gdmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZU9uID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnN0YXRlT24pID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnN0YXRlT24pIDogcmF0aW5nQ29uZmlnLnN0YXRlT247XG4gICAgdGhpcy5zdGF0ZU9mZiA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5zdGF0ZU9mZikgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuc3RhdGVPZmYpIDogcmF0aW5nQ29uZmlnLnN0YXRlT2ZmO1xuICAgIHRoaXMuZW5hYmxlUmVzZXQgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZW5hYmxlUmVzZXQpID9cbiAgICAgICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5lbmFibGVSZXNldCkgOiByYXRpbmdDb25maWcuZW5hYmxlUmVzZXQ7XG4gICAgdmFyIHRtcFRpdGxlcyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy50aXRsZXMpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnRpdGxlcykgOiByYXRpbmdDb25maWcudGl0bGVzO1xuICAgIHRoaXMudGl0bGVzID0gYW5ndWxhci5pc0FycmF5KHRtcFRpdGxlcykgJiYgdG1wVGl0bGVzLmxlbmd0aCA+IDAgP1xuICAgICAgdG1wVGl0bGVzIDogcmF0aW5nQ29uZmlnLnRpdGxlcztcblxuICAgIHZhciByYXRpbmdTdGF0ZXMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMucmF0aW5nU3RhdGVzKSA/XG4gICAgICAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMucmF0aW5nU3RhdGVzKSA6XG4gICAgICBuZXcgQXJyYXkoYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLm1heCkgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMubWF4KSA6IHJhdGluZ0NvbmZpZy5tYXgpO1xuICAgICRzY29wZS5yYW5nZSA9IHRoaXMuYnVpbGRUZW1wbGF0ZU9iamVjdHMocmF0aW5nU3RhdGVzKTtcbiAgfTtcblxuICB0aGlzLmJ1aWxkVGVtcGxhdGVPYmplY3RzID0gZnVuY3Rpb24oc3RhdGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBzdGF0ZXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICBzdGF0ZXNbaV0gPSBhbmd1bGFyLmV4dGVuZCh7IGluZGV4OiBpIH0sIHsgc3RhdGVPbjogdGhpcy5zdGF0ZU9uLCBzdGF0ZU9mZjogdGhpcy5zdGF0ZU9mZiwgdGl0bGU6IHRoaXMuZ2V0VGl0bGUoaSkgfSwgc3RhdGVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlcztcbiAgfTtcblxuICB0aGlzLmdldFRpdGxlID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPj0gdGhpcy50aXRsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRpdGxlc1tpbmRleF07XG4gIH07XG5cbiAgJHNjb3BlLnJhdGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICghJHNjb3BlLnJlYWRvbmx5ICYmIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gJHNjb3BlLnJhbmdlLmxlbmd0aCkge1xuICAgICAgdmFyIG5ld1ZpZXdWYWx1ZSA9IHNlbGYuZW5hYmxlUmVzZXQgJiYgbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA9PT0gdmFsdWUgPyAwIDogdmFsdWU7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG5ld1ZpZXdWYWx1ZSk7XG4gICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5lbnRlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCEkc2NvcGUucmVhZG9ubHkpIHtcbiAgICAgICRzY29wZS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICAkc2NvcGUub25Ib3Zlcih7dmFsdWU6IHZhbHVlfSk7XG4gIH07XG5cbiAgJHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgJHNjb3BlLnZhbHVlID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTtcbiAgICAkc2NvcGUub25MZWF2ZSgpO1xuICB9O1xuXG4gICRzY29wZS5vbktleWRvd24gPSBmdW5jdGlvbihldnQpIHtcbiAgICBpZiAoLygzN3wzOHwzOXw0MCkvLnRlc3QoZXZ0LndoaWNoKSkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAkc2NvcGUucmF0ZSgkc2NvcGUudmFsdWUgKyAoZXZ0LndoaWNoID09PSAzOCB8fCBldnQud2hpY2ggPT09IDM5ID8gMSA6IC0xKSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgJHNjb3BlLnZhbHVlID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTtcbiAgICAkc2NvcGUudGl0bGUgPSBzZWxmLmdldFRpdGxlKCRzY29wZS52YWx1ZSAtIDEpO1xuICB9O1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlJhdGluZycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFsndWliUmF0aW5nJywgJ25nTW9kZWwnXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7XG4gICAgICByZWFkb25seTogJz0/cmVhZE9ubHknLFxuICAgICAgb25Ib3ZlcjogJyYnLFxuICAgICAgb25MZWF2ZTogJyYnXG4gICAgfSxcbiAgICBjb250cm9sbGVyOiAnVWliUmF0aW5nQ29udHJvbGxlcicsXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvcmF0aW5nL3JhdGluZy5odG1sJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgcmF0aW5nQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuICAgICAgcmF0aW5nQ3RybC5pbml0KG5nTW9kZWxDdHJsKTtcbiAgICB9XG4gIH07XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50YWJzJywgW10pXG5cbi5jb250cm9sbGVyKCdVaWJUYWJzZXRDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gIHZhciBjdHJsID0gdGhpcyxcbiAgICBvbGRJbmRleDtcbiAgY3RybC50YWJzID0gW107XG5cbiAgY3RybC5zZWxlY3QgPSBmdW5jdGlvbihpbmRleCwgZXZ0KSB7XG4gICAgaWYgKCFkZXN0cm95ZWQpIHtcbiAgICAgIHZhciBwcmV2aW91c0luZGV4ID0gZmluZFRhYkluZGV4KG9sZEluZGV4KTtcbiAgICAgIHZhciBwcmV2aW91c1NlbGVjdGVkID0gY3RybC50YWJzW3ByZXZpb3VzSW5kZXhdO1xuICAgICAgaWYgKHByZXZpb3VzU2VsZWN0ZWQpIHtcbiAgICAgICAgcHJldmlvdXNTZWxlY3RlZC50YWIub25EZXNlbGVjdCh7XG4gICAgICAgICAgJGV2ZW50OiBldnQsXG4gICAgICAgICAgJHNlbGVjdGVkSW5kZXg6IGluZGV4XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZXZ0ICYmIGV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c1NlbGVjdGVkLnRhYi5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlbGVjdGVkID0gY3RybC50YWJzW2luZGV4XTtcbiAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICBzZWxlY3RlZC50YWIub25TZWxlY3Qoe1xuICAgICAgICAgICRldmVudDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxlY3RlZC50YWIuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgY3RybC5hY3RpdmUgPSBzZWxlY3RlZC5pbmRleDtcbiAgICAgICAgb2xkSW5kZXggPSBzZWxlY3RlZC5pbmRleDtcbiAgICAgIH0gZWxzZSBpZiAoIXNlbGVjdGVkICYmIGFuZ3VsYXIuaXNEZWZpbmVkKG9sZEluZGV4KSkge1xuICAgICAgICBjdHJsLmFjdGl2ZSA9IG51bGw7XG4gICAgICAgIG9sZEluZGV4ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY3RybC5hZGRUYWIgPSBmdW5jdGlvbiBhZGRUYWIodGFiKSB7XG4gICAgY3RybC50YWJzLnB1c2goe1xuICAgICAgdGFiOiB0YWIsXG4gICAgICBpbmRleDogdGFiLmluZGV4XG4gICAgfSk7XG4gICAgY3RybC50YWJzLnNvcnQoZnVuY3Rpb24odDEsIHQyKSB7XG4gICAgICBpZiAodDEuaW5kZXggPiB0Mi5pbmRleCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKHQxLmluZGV4IDwgdDIuaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gMDtcbiAgICB9KTtcblxuICAgIGlmICh0YWIuaW5kZXggPT09IGN0cmwuYWN0aXZlIHx8ICFhbmd1bGFyLmlzRGVmaW5lZChjdHJsLmFjdGl2ZSkgJiYgY3RybC50YWJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gZmluZFRhYkluZGV4KHRhYi5pbmRleCk7XG4gICAgICBjdHJsLnNlbGVjdChuZXdBY3RpdmVJbmRleCk7XG4gICAgfVxuICB9O1xuXG4gIGN0cmwucmVtb3ZlVGFiID0gZnVuY3Rpb24gcmVtb3ZlVGFiKHRhYikge1xuICAgIHZhciBpbmRleDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN0cmwudGFicy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGN0cmwudGFic1tpXS50YWIgPT09IHRhYikge1xuICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjdHJsLnRhYnNbaW5kZXhdLmluZGV4ID09PSBjdHJsLmFjdGl2ZSkge1xuICAgICAgdmFyIG5ld0FjdGl2ZVRhYkluZGV4ID0gaW5kZXggPT09IGN0cmwudGFicy5sZW5ndGggLSAxID9cbiAgICAgICAgaW5kZXggLSAxIDogaW5kZXggKyAxICUgY3RybC50YWJzLmxlbmd0aDtcbiAgICAgIGN0cmwuc2VsZWN0KG5ld0FjdGl2ZVRhYkluZGV4KTtcbiAgICB9XG5cbiAgICBjdHJsLnRhYnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfTtcblxuICAkc2NvcGUuJHdhdGNoKCd0YWJzZXQuYWN0aXZlJywgZnVuY3Rpb24odmFsKSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbCkgJiYgdmFsICE9PSBvbGRJbmRleCkge1xuICAgICAgY3RybC5zZWxlY3QoZmluZFRhYkluZGV4KHZhbCkpO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGRlc3Ryb3llZDtcbiAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICBkZXN0cm95ZWQgPSB0cnVlO1xuICB9KTtcblxuICBmdW5jdGlvbiBmaW5kVGFiSW5kZXgoaW5kZXgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN0cmwudGFicy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGN0cmwudGFic1tpXS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XSlcblxuLmRpcmVjdGl2ZSgndWliVGFic2V0JywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHNjb3BlOiB7fSxcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XG4gICAgICBhY3RpdmU6ICc9PycsXG4gICAgICB0eXBlOiAnQCdcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6ICdVaWJUYWJzZXRDb250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICd0YWJzZXQnLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvdGFicy90YWJzZXQuaHRtbCc7XG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHNjb3BlLnZlcnRpY2FsID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnMudmVydGljYWwpID9cbiAgICAgICAgc2NvcGUuJHBhcmVudC4kZXZhbChhdHRycy52ZXJ0aWNhbCkgOiBmYWxzZTtcbiAgICAgIHNjb3BlLmp1c3RpZmllZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLmp1c3RpZmllZCkgP1xuICAgICAgICBzY29wZS4kcGFyZW50LiRldmFsKGF0dHJzLmp1c3RpZmllZCkgOiBmYWxzZTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJUYWInLCBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6ICdedWliVGFic2V0JyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvdGFicy90YWIuaHRtbCc7XG4gICAgfSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHNjb3BlOiB7XG4gICAgICBoZWFkaW5nOiAnQCcsXG4gICAgICBpbmRleDogJz0/JyxcbiAgICAgIGNsYXNzZXM6ICdAPycsXG4gICAgICBvblNlbGVjdDogJyZzZWxlY3QnLCAvL1RoaXMgY2FsbGJhY2sgaXMgY2FsbGVkIGluIGNvbnRlbnRIZWFkaW5nVHJhbnNjbHVkZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAvL29uY2UgaXQgaW5zZXJ0cyB0aGUgdGFiJ3MgY29udGVudCBpbnRvIHRoZSBkb21cbiAgICAgIG9uRGVzZWxlY3Q6ICcmZGVzZWxlY3QnXG4gICAgfSxcbiAgICBjb250cm9sbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vRW1wdHkgY29udHJvbGxlciBzbyBvdGhlciBkaXJlY3RpdmVzIGNhbiByZXF1aXJlIGJlaW5nICd1bmRlcicgYSB0YWJcbiAgICB9LFxuICAgIGNvbnRyb2xsZXJBczogJ3RhYicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0cnMsIHRhYnNldEN0cmwsIHRyYW5zY2x1ZGUpIHtcbiAgICAgIHNjb3BlLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICBpZiAoYXR0cnMuZGlzYWJsZSkge1xuICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoYXR0cnMuZGlzYWJsZSksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgc2NvcGUuZGlzYWJsZWQgPSAhISB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKGF0dHJzLmluZGV4KSkge1xuICAgICAgICBpZiAodGFic2V0Q3RybC50YWJzICYmIHRhYnNldEN0cmwudGFicy5sZW5ndGgpIHtcbiAgICAgICAgICBzY29wZS5pbmRleCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIHRhYnNldEN0cmwudGFicy5tYXAoZnVuY3Rpb24odCkgeyByZXR1cm4gdC5pbmRleDsgfSkpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY29wZS5pbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoYXR0cnMuY2xhc3NlcykpIHtcbiAgICAgICAgc2NvcGUuY2xhc3NlcyA9ICcnO1xuICAgICAgfVxuXG4gICAgICBzY29wZS5zZWxlY3QgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgaWYgKCFzY29wZS5kaXNhYmxlZCkge1xuICAgICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhYnNldEN0cmwudGFicy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRhYnNldEN0cmwudGFic1tpXS50YWIgPT09IHNjb3BlKSB7XG4gICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGFic2V0Q3RybC5zZWxlY3QoaW5kZXgsIGV2dCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRhYnNldEN0cmwuYWRkVGFiKHNjb3BlKTtcbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdGFic2V0Q3RybC5yZW1vdmVUYWIoc2NvcGUpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vV2UgbmVlZCB0byB0cmFuc2NsdWRlIGxhdGVyLCBvbmNlIHRoZSBjb250ZW50IGNvbnRhaW5lciBpcyByZWFkeS5cbiAgICAgIC8vd2hlbiB0aGlzIGxpbmsgaGFwcGVucywgd2UncmUgaW5zaWRlIGEgdGFiIGhlYWRpbmcuXG4gICAgICBzY29wZS4kdHJhbnNjbHVkZUZuID0gdHJhbnNjbHVkZTtcbiAgICB9XG4gIH07XG59XSlcblxuLmRpcmVjdGl2ZSgndWliVGFiSGVhZGluZ1RyYW5zY2x1ZGUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICdedWliVGFiJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtKSB7XG4gICAgICBzY29wZS4kd2F0Y2goJ2hlYWRpbmdFbGVtZW50JywgZnVuY3Rpb24gdXBkYXRlSGVhZGluZ0VsZW1lbnQoaGVhZGluZykge1xuICAgICAgICBpZiAoaGVhZGluZykge1xuICAgICAgICAgIGVsbS5odG1sKCcnKTtcbiAgICAgICAgICBlbG0uYXBwZW5kKGhlYWRpbmcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJUYWJDb250ZW50VHJhbnNjbHVkZScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJ151aWJUYWJzZXQnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHJzKSB7XG4gICAgICB2YXIgdGFiID0gc2NvcGUuJGV2YWwoYXR0cnMudWliVGFiQ29udGVudFRyYW5zY2x1ZGUpLnRhYjtcblxuICAgICAgLy9Ob3cgb3VyIHRhYiBpcyByZWFkeSB0byBiZSB0cmFuc2NsdWRlZDogYm90aCB0aGUgdGFiIGhlYWRpbmcgYXJlYVxuICAgICAgLy9hbmQgdGhlIHRhYiBjb250ZW50IGFyZWEgYXJlIGxvYWRlZC4gIFRyYW5zY2x1ZGUgJ2VtIGJvdGguXG4gICAgICB0YWIuJHRyYW5zY2x1ZGVGbih0YWIuJHBhcmVudCwgZnVuY3Rpb24oY29udGVudHMpIHtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNvbnRlbnRzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgaWYgKGlzVGFiSGVhZGluZyhub2RlKSkge1xuICAgICAgICAgICAgLy9MZXQgdGFiSGVhZGluZ1RyYW5zY2x1ZGUga25vdy5cbiAgICAgICAgICAgIHRhYi5oZWFkaW5nRWxlbWVudCA9IG5vZGU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsbS5hcHBlbmQobm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBpc1RhYkhlYWRpbmcobm9kZSkge1xuICAgIHJldHVybiBub2RlLnRhZ05hbWUgJiYgKFxuICAgICAgbm9kZS5oYXNBdHRyaWJ1dGUoJ3VpYi10YWItaGVhZGluZycpIHx8XG4gICAgICBub2RlLmhhc0F0dHJpYnV0ZSgnZGF0YS11aWItdGFiLWhlYWRpbmcnKSB8fFxuICAgICAgbm9kZS5oYXNBdHRyaWJ1dGUoJ3gtdWliLXRhYi1oZWFkaW5nJykgfHxcbiAgICAgIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndWliLXRhYi1oZWFkaW5nJyB8fFxuICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdkYXRhLXVpYi10YWItaGVhZGluZycgfHxcbiAgICAgIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAneC11aWItdGFiLWhlYWRpbmcnIHx8XG4gICAgICBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3VpYjp0YWItaGVhZGluZydcbiAgICApO1xuICB9XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50aW1lcGlja2VyJywgW10pXG5cbi5jb25zdGFudCgndWliVGltZXBpY2tlckNvbmZpZycsIHtcbiAgaG91clN0ZXA6IDEsXG4gIG1pbnV0ZVN0ZXA6IDEsXG4gIHNlY29uZFN0ZXA6IDEsXG4gIHNob3dNZXJpZGlhbjogdHJ1ZSxcbiAgc2hvd1NlY29uZHM6IGZhbHNlLFxuICBtZXJpZGlhbnM6IG51bGwsXG4gIHJlYWRvbmx5SW5wdXQ6IGZhbHNlLFxuICBtb3VzZXdoZWVsOiB0cnVlLFxuICBhcnJvd2tleXM6IHRydWUsXG4gIHNob3dTcGlubmVyczogdHJ1ZSxcbiAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvdGltZXBpY2tlci90aW1lcGlja2VyLmh0bWwnXG59KVxuXG4uY29udHJvbGxlcignVWliVGltZXBpY2tlckNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICckYXR0cnMnLCAnJHBhcnNlJywgJyRsb2cnLCAnJGxvY2FsZScsICd1aWJUaW1lcGlja2VyQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkcGFyc2UsICRsb2csICRsb2NhbGUsIHRpbWVwaWNrZXJDb25maWcpIHtcbiAgdmFyIGhvdXJzTW9kZWxDdHJsLCBtaW51dGVzTW9kZWxDdHJsLCBzZWNvbmRzTW9kZWxDdHJsO1xuICB2YXIgc2VsZWN0ZWQgPSBuZXcgRGF0ZSgpLFxuICAgIHdhdGNoZXJzID0gW10sXG4gICAgbmdNb2RlbEN0cmwgPSB7ICRzZXRWaWV3VmFsdWU6IGFuZ3VsYXIubm9vcCB9LCAvLyBudWxsTW9kZWxDdHJsXG4gICAgbWVyaWRpYW5zID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLm1lcmlkaWFucykgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMubWVyaWRpYW5zKSA6IHRpbWVwaWNrZXJDb25maWcubWVyaWRpYW5zIHx8ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5BTVBNUyxcbiAgICBwYWRIb3VycyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5wYWRIb3VycykgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMucGFkSG91cnMpIDogdHJ1ZTtcblxuICAkc2NvcGUudGFiaW5kZXggPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMudGFiaW5kZXgpID8gJGF0dHJzLnRhYmluZGV4IDogMDtcbiAgJGVsZW1lbnQucmVtb3ZlQXR0cigndGFiaW5kZXgnKTtcblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihuZ01vZGVsQ3RybF8sIGlucHV0cykge1xuICAgIG5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmxfO1xuICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSB0aGlzLnJlbmRlcjtcblxuICAgIG5nTW9kZWxDdHJsLiRmb3JtYXR0ZXJzLnVuc2hpZnQoZnVuY3Rpb24obW9kZWxWYWx1ZSkge1xuICAgICAgcmV0dXJuIG1vZGVsVmFsdWUgPyBuZXcgRGF0ZShtb2RlbFZhbHVlKSA6IG51bGw7XG4gICAgfSk7XG5cbiAgICB2YXIgaG91cnNJbnB1dEVsID0gaW5wdXRzLmVxKDApLFxuICAgICAgICBtaW51dGVzSW5wdXRFbCA9IGlucHV0cy5lcSgxKSxcbiAgICAgICAgc2Vjb25kc0lucHV0RWwgPSBpbnB1dHMuZXEoMik7XG5cbiAgICBob3Vyc01vZGVsQ3RybCA9IGhvdXJzSW5wdXRFbC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG4gICAgbWludXRlc01vZGVsQ3RybCA9IG1pbnV0ZXNJbnB1dEVsLmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcbiAgICBzZWNvbmRzTW9kZWxDdHJsID0gc2Vjb25kc0lucHV0RWwuY29udHJvbGxlcignbmdNb2RlbCcpO1xuXG4gICAgdmFyIG1vdXNld2hlZWwgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMubW91c2V3aGVlbCkgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMubW91c2V3aGVlbCkgOiB0aW1lcGlja2VyQ29uZmlnLm1vdXNld2hlZWw7XG5cbiAgICBpZiAobW91c2V3aGVlbCkge1xuICAgICAgdGhpcy5zZXR1cE1vdXNld2hlZWxFdmVudHMoaG91cnNJbnB1dEVsLCBtaW51dGVzSW5wdXRFbCwgc2Vjb25kc0lucHV0RWwpO1xuICAgIH1cblxuICAgIHZhciBhcnJvd2tleXMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuYXJyb3drZXlzKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5hcnJvd2tleXMpIDogdGltZXBpY2tlckNvbmZpZy5hcnJvd2tleXM7XG4gICAgaWYgKGFycm93a2V5cykge1xuICAgICAgdGhpcy5zZXR1cEFycm93a2V5RXZlbnRzKGhvdXJzSW5wdXRFbCwgbWludXRlc0lucHV0RWwsIHNlY29uZHNJbnB1dEVsKTtcbiAgICB9XG5cbiAgICAkc2NvcGUucmVhZG9ubHlJbnB1dCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5yZWFkb25seUlucHV0KSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5yZWFkb25seUlucHV0KSA6IHRpbWVwaWNrZXJDb25maWcucmVhZG9ubHlJbnB1dDtcbiAgICB0aGlzLnNldHVwSW5wdXRFdmVudHMoaG91cnNJbnB1dEVsLCBtaW51dGVzSW5wdXRFbCwgc2Vjb25kc0lucHV0RWwpO1xuICB9O1xuXG4gIHZhciBob3VyU3RlcCA9IHRpbWVwaWNrZXJDb25maWcuaG91clN0ZXA7XG4gIGlmICgkYXR0cnMuaG91clN0ZXApIHtcbiAgICB3YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLmhvdXJTdGVwKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGhvdXJTdGVwID0gK3ZhbHVlO1xuICAgIH0pKTtcbiAgfVxuXG4gIHZhciBtaW51dGVTdGVwID0gdGltZXBpY2tlckNvbmZpZy5taW51dGVTdGVwO1xuICBpZiAoJGF0dHJzLm1pbnV0ZVN0ZXApIHtcbiAgICB3YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLm1pbnV0ZVN0ZXApLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgbWludXRlU3RlcCA9ICt2YWx1ZTtcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgbWluO1xuICB3YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLm1pbiksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGR0ID0gbmV3IERhdGUodmFsdWUpO1xuICAgIG1pbiA9IGlzTmFOKGR0KSA/IHVuZGVmaW5lZCA6IGR0O1xuICB9KSk7XG5cbiAgdmFyIG1heDtcbiAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5tYXgpLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBkdCA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICBtYXggPSBpc05hTihkdCkgPyB1bmRlZmluZWQgOiBkdDtcbiAgfSkpO1xuXG4gIHZhciBkaXNhYmxlZCA9IGZhbHNlO1xuICBpZiAoJGF0dHJzLm5nRGlzYWJsZWQpIHtcbiAgICB3YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLm5nRGlzYWJsZWQpLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgZGlzYWJsZWQgPSB2YWx1ZTtcbiAgICB9KSk7XG4gIH1cblxuICAkc2NvcGUubm9JbmNyZW1lbnRIb3VycyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmNyZW1lbnRlZFNlbGVjdGVkID0gYWRkTWludXRlcyhzZWxlY3RlZCwgaG91clN0ZXAgKiA2MCk7XG4gICAgcmV0dXJuIGRpc2FibGVkIHx8IGluY3JlbWVudGVkU2VsZWN0ZWQgPiBtYXggfHxcbiAgICAgIGluY3JlbWVudGVkU2VsZWN0ZWQgPCBzZWxlY3RlZCAmJiBpbmNyZW1lbnRlZFNlbGVjdGVkIDwgbWluO1xuICB9O1xuXG4gICRzY29wZS5ub0RlY3JlbWVudEhvdXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlY3JlbWVudGVkU2VsZWN0ZWQgPSBhZGRNaW51dGVzKHNlbGVjdGVkLCAtaG91clN0ZXAgKiA2MCk7XG4gICAgcmV0dXJuIGRpc2FibGVkIHx8IGRlY3JlbWVudGVkU2VsZWN0ZWQgPCBtaW4gfHxcbiAgICAgIGRlY3JlbWVudGVkU2VsZWN0ZWQgPiBzZWxlY3RlZCAmJiBkZWNyZW1lbnRlZFNlbGVjdGVkID4gbWF4O1xuICB9O1xuXG4gICRzY29wZS5ub0luY3JlbWVudE1pbnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5jcmVtZW50ZWRTZWxlY3RlZCA9IGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIG1pbnV0ZVN0ZXApO1xuICAgIHJldHVybiBkaXNhYmxlZCB8fCBpbmNyZW1lbnRlZFNlbGVjdGVkID4gbWF4IHx8XG4gICAgICBpbmNyZW1lbnRlZFNlbGVjdGVkIDwgc2VsZWN0ZWQgJiYgaW5jcmVtZW50ZWRTZWxlY3RlZCA8IG1pbjtcbiAgfTtcblxuICAkc2NvcGUubm9EZWNyZW1lbnRNaW51dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlY3JlbWVudGVkU2VsZWN0ZWQgPSBhZGRNaW51dGVzKHNlbGVjdGVkLCAtbWludXRlU3RlcCk7XG4gICAgcmV0dXJuIGRpc2FibGVkIHx8IGRlY3JlbWVudGVkU2VsZWN0ZWQgPCBtaW4gfHxcbiAgICAgIGRlY3JlbWVudGVkU2VsZWN0ZWQgPiBzZWxlY3RlZCAmJiBkZWNyZW1lbnRlZFNlbGVjdGVkID4gbWF4O1xuICB9O1xuXG4gICRzY29wZS5ub0luY3JlbWVudFNlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5jcmVtZW50ZWRTZWxlY3RlZCA9IGFkZFNlY29uZHMoc2VsZWN0ZWQsIHNlY29uZFN0ZXApO1xuICAgIHJldHVybiBkaXNhYmxlZCB8fCBpbmNyZW1lbnRlZFNlbGVjdGVkID4gbWF4IHx8XG4gICAgICBpbmNyZW1lbnRlZFNlbGVjdGVkIDwgc2VsZWN0ZWQgJiYgaW5jcmVtZW50ZWRTZWxlY3RlZCA8IG1pbjtcbiAgfTtcblxuICAkc2NvcGUubm9EZWNyZW1lbnRTZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlY3JlbWVudGVkU2VsZWN0ZWQgPSBhZGRTZWNvbmRzKHNlbGVjdGVkLCAtc2Vjb25kU3RlcCk7XG4gICAgcmV0dXJuIGRpc2FibGVkIHx8IGRlY3JlbWVudGVkU2VsZWN0ZWQgPCBtaW4gfHxcbiAgICAgIGRlY3JlbWVudGVkU2VsZWN0ZWQgPiBzZWxlY3RlZCAmJiBkZWNyZW1lbnRlZFNlbGVjdGVkID4gbWF4O1xuICB9O1xuXG4gICRzY29wZS5ub1RvZ2dsZU1lcmlkaWFuID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGVjdGVkLmdldEhvdXJzKCkgPCAxMikge1xuICAgICAgcmV0dXJuIGRpc2FibGVkIHx8IGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIDEyICogNjApID4gbWF4O1xuICAgIH1cblxuICAgIHJldHVybiBkaXNhYmxlZCB8fCBhZGRNaW51dGVzKHNlbGVjdGVkLCAtMTIgKiA2MCkgPCBtaW47XG4gIH07XG5cbiAgdmFyIHNlY29uZFN0ZXAgPSB0aW1lcGlja2VyQ29uZmlnLnNlY29uZFN0ZXA7XG4gIGlmICgkYXR0cnMuc2Vjb25kU3RlcCkge1xuICAgIHdhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMuc2Vjb25kU3RlcCksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBzZWNvbmRTdGVwID0gK3ZhbHVlO1xuICAgIH0pKTtcbiAgfVxuXG4gICRzY29wZS5zaG93U2Vjb25kcyA9IHRpbWVwaWNrZXJDb25maWcuc2hvd1NlY29uZHM7XG4gIGlmICgkYXR0cnMuc2hvd1NlY29uZHMpIHtcbiAgICB3YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLnNob3dTZWNvbmRzKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICRzY29wZS5zaG93U2Vjb25kcyA9ICEhdmFsdWU7XG4gICAgfSkpO1xuICB9XG5cbiAgLy8gMTJIIC8gMjRIIG1vZGVcbiAgJHNjb3BlLnNob3dNZXJpZGlhbiA9IHRpbWVwaWNrZXJDb25maWcuc2hvd01lcmlkaWFuO1xuICBpZiAoJGF0dHJzLnNob3dNZXJpZGlhbikge1xuICAgIHdhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMuc2hvd01lcmlkaWFuKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICRzY29wZS5zaG93TWVyaWRpYW4gPSAhIXZhbHVlO1xuXG4gICAgICBpZiAobmdNb2RlbEN0cmwuJGVycm9yLnRpbWUpIHtcbiAgICAgICAgLy8gRXZhbHVhdGUgZnJvbSB0ZW1wbGF0ZVxuICAgICAgICB2YXIgaG91cnMgPSBnZXRIb3Vyc0Zyb21UZW1wbGF0ZSgpLCBtaW51dGVzID0gZ2V0TWludXRlc0Zyb21UZW1wbGF0ZSgpO1xuICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoaG91cnMpICYmIGFuZ3VsYXIuaXNEZWZpbmVkKG1pbnV0ZXMpKSB7XG4gICAgICAgICAgc2VsZWN0ZWQuc2V0SG91cnMoaG91cnMpO1xuICAgICAgICAgIHJlZnJlc2goKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlVGVtcGxhdGUoKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cblxuICAvLyBHZXQgJHNjb3BlLmhvdXJzIGluIDI0SCBtb2RlIGlmIHZhbGlkXG4gIGZ1bmN0aW9uIGdldEhvdXJzRnJvbVRlbXBsYXRlKCkge1xuICAgIHZhciBob3VycyA9ICskc2NvcGUuaG91cnM7XG4gICAgdmFyIHZhbGlkID0gJHNjb3BlLnNob3dNZXJpZGlhbiA/IGhvdXJzID4gMCAmJiBob3VycyA8IDEzIDpcbiAgICAgIGhvdXJzID49IDAgJiYgaG91cnMgPCAyNDtcbiAgICBpZiAoIXZhbGlkIHx8ICRzY29wZS5ob3VycyA9PT0gJycpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKCRzY29wZS5zaG93TWVyaWRpYW4pIHtcbiAgICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgICAgaG91cnMgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKCRzY29wZS5tZXJpZGlhbiA9PT0gbWVyaWRpYW5zWzFdKSB7XG4gICAgICAgIGhvdXJzID0gaG91cnMgKyAxMjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhvdXJzO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TWludXRlc0Zyb21UZW1wbGF0ZSgpIHtcbiAgICB2YXIgbWludXRlcyA9ICskc2NvcGUubWludXRlcztcbiAgICB2YXIgdmFsaWQgPSBtaW51dGVzID49IDAgJiYgbWludXRlcyA8IDYwO1xuICAgIGlmICghdmFsaWQgfHwgJHNjb3BlLm1pbnV0ZXMgPT09ICcnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbWludXRlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNlY29uZHNGcm9tVGVtcGxhdGUoKSB7XG4gICAgdmFyIHNlY29uZHMgPSArJHNjb3BlLnNlY29uZHM7XG4gICAgcmV0dXJuIHNlY29uZHMgPj0gMCAmJiBzZWNvbmRzIDwgNjAgPyBzZWNvbmRzIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFkKHZhbHVlLCBub1BhZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkgJiYgdmFsdWUudG9TdHJpbmcoKS5sZW5ndGggPCAyICYmICFub1BhZCA/XG4gICAgICAnMCcgKyB2YWx1ZSA6IHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvLyBSZXNwb25kIG9uIG1vdXNld2hlZWwgc3BpblxuICB0aGlzLnNldHVwTW91c2V3aGVlbEV2ZW50cyA9IGZ1bmN0aW9uKGhvdXJzSW5wdXRFbCwgbWludXRlc0lucHV0RWwsIHNlY29uZHNJbnB1dEVsKSB7XG4gICAgdmFyIGlzU2Nyb2xsaW5nVXAgPSBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSB7XG4gICAgICAgIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICB9XG4gICAgICAvL3BpY2sgY29ycmVjdCBkZWx0YSB2YXJpYWJsZSBkZXBlbmRpbmcgb24gZXZlbnRcbiAgICAgIHZhciBkZWx0YSA9IGUud2hlZWxEZWx0YSA/IGUud2hlZWxEZWx0YSA6IC1lLmRlbHRhWTtcbiAgICAgIHJldHVybiBlLmRldGFpbCB8fCBkZWx0YSA+IDA7XG4gICAgfTtcblxuICAgIGhvdXJzSW5wdXRFbC5vbignbW91c2V3aGVlbCB3aGVlbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseShpc1Njcm9sbGluZ1VwKGUpID8gJHNjb3BlLmluY3JlbWVudEhvdXJzKCkgOiAkc2NvcGUuZGVjcmVtZW50SG91cnMoKSk7XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICBtaW51dGVzSW5wdXRFbC5vbignbW91c2V3aGVlbCB3aGVlbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseShpc1Njcm9sbGluZ1VwKGUpID8gJHNjb3BlLmluY3JlbWVudE1pbnV0ZXMoKSA6ICRzY29wZS5kZWNyZW1lbnRNaW51dGVzKCkpO1xuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgIHNlY29uZHNJbnB1dEVsLm9uKCdtb3VzZXdoZWVsIHdoZWVsJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGlzU2Nyb2xsaW5nVXAoZSkgPyAkc2NvcGUuaW5jcmVtZW50U2Vjb25kcygpIDogJHNjb3BlLmRlY3JlbWVudFNlY29uZHMoKSk7XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gUmVzcG9uZCBvbiB1cC9kb3duIGFycm93a2V5c1xuICB0aGlzLnNldHVwQXJyb3drZXlFdmVudHMgPSBmdW5jdGlvbihob3Vyc0lucHV0RWwsIG1pbnV0ZXNJbnB1dEVsLCBzZWNvbmRzSW5wdXRFbCkge1xuICAgIGhvdXJzSW5wdXRFbC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgaWYgKGUud2hpY2ggPT09IDM4KSB7IC8vIHVwXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRzY29wZS5pbmNyZW1lbnRIb3VycygpO1xuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09PSA0MCkgeyAvLyBkb3duXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRzY29wZS5kZWNyZW1lbnRIb3VycygpO1xuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbWludXRlc0lucHV0RWwub24oJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgIGlmIChlLndoaWNoID09PSAzOCkgeyAvLyB1cFxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAkc2NvcGUuaW5jcmVtZW50TWludXRlcygpO1xuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09PSA0MCkgeyAvLyBkb3duXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRzY29wZS5kZWNyZW1lbnRNaW51dGVzKCk7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzZWNvbmRzSW5wdXRFbC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgaWYgKGUud2hpY2ggPT09IDM4KSB7IC8vIHVwXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRzY29wZS5pbmNyZW1lbnRTZWNvbmRzKCk7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT09IDQwKSB7IC8vIGRvd25cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgJHNjb3BlLmRlY3JlbWVudFNlY29uZHMoKTtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLnNldHVwSW5wdXRFdmVudHMgPSBmdW5jdGlvbihob3Vyc0lucHV0RWwsIG1pbnV0ZXNJbnB1dEVsLCBzZWNvbmRzSW5wdXRFbCkge1xuICAgIGlmICgkc2NvcGUucmVhZG9ubHlJbnB1dCkge1xuICAgICAgJHNjb3BlLnVwZGF0ZUhvdXJzID0gYW5ndWxhci5ub29wO1xuICAgICAgJHNjb3BlLnVwZGF0ZU1pbnV0ZXMgPSBhbmd1bGFyLm5vb3A7XG4gICAgICAkc2NvcGUudXBkYXRlU2Vjb25kcyA9IGFuZ3VsYXIubm9vcDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKGludmFsaWRIb3VycywgaW52YWxpZE1pbnV0ZXMsIGludmFsaWRTZWNvbmRzKSB7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG51bGwpO1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCd0aW1lJywgZmFsc2UpO1xuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGludmFsaWRIb3VycykpIHtcbiAgICAgICAgJHNjb3BlLmludmFsaWRIb3VycyA9IGludmFsaWRIb3VycztcbiAgICAgICAgaWYgKGhvdXJzTW9kZWxDdHJsKSB7XG4gICAgICAgICAgaG91cnNNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdob3VycycsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoaW52YWxpZE1pbnV0ZXMpKSB7XG4gICAgICAgICRzY29wZS5pbnZhbGlkTWludXRlcyA9IGludmFsaWRNaW51dGVzO1xuICAgICAgICBpZiAobWludXRlc01vZGVsQ3RybCkge1xuICAgICAgICAgIG1pbnV0ZXNNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdtaW51dGVzJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpbnZhbGlkU2Vjb25kcykpIHtcbiAgICAgICAgJHNjb3BlLmludmFsaWRTZWNvbmRzID0gaW52YWxpZFNlY29uZHM7XG4gICAgICAgIGlmIChzZWNvbmRzTW9kZWxDdHJsKSB7XG4gICAgICAgICAgc2Vjb25kc01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3NlY29uZHMnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJHNjb3BlLnVwZGF0ZUhvdXJzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaG91cnMgPSBnZXRIb3Vyc0Zyb21UZW1wbGF0ZSgpLFxuICAgICAgICBtaW51dGVzID0gZ2V0TWludXRlc0Zyb21UZW1wbGF0ZSgpO1xuXG4gICAgICBuZ01vZGVsQ3RybC4kc2V0RGlydHkoKTtcblxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGhvdXJzKSAmJiBhbmd1bGFyLmlzRGVmaW5lZChtaW51dGVzKSkge1xuICAgICAgICBzZWxlY3RlZC5zZXRIb3Vycyhob3Vycyk7XG4gICAgICAgIHNlbGVjdGVkLnNldE1pbnV0ZXMobWludXRlcyk7XG4gICAgICAgIGlmIChzZWxlY3RlZCA8IG1pbiB8fCBzZWxlY3RlZCA+IG1heCkge1xuICAgICAgICAgIGludmFsaWRhdGUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVmcmVzaCgnaCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnZhbGlkYXRlKHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBob3Vyc0lucHV0RWwub24oJ2JsdXInLCBmdW5jdGlvbihlKSB7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0VG91Y2hlZCgpO1xuICAgICAgaWYgKG1vZGVsSXNFbXB0eSgpKSB7XG4gICAgICAgIG1ha2VWYWxpZCgpO1xuICAgICAgfSBlbHNlIGlmICgkc2NvcGUuaG91cnMgPT09IG51bGwgfHwgJHNjb3BlLmhvdXJzID09PSAnJykge1xuICAgICAgICBpbnZhbGlkYXRlKHRydWUpO1xuICAgICAgfSBlbHNlIGlmICghJHNjb3BlLmludmFsaWRIb3VycyAmJiAkc2NvcGUuaG91cnMgPCAxMCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS5ob3VycyA9IHBhZCgkc2NvcGUuaG91cnMsICFwYWRIb3Vycyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLnVwZGF0ZU1pbnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBtaW51dGVzID0gZ2V0TWludXRlc0Zyb21UZW1wbGF0ZSgpLFxuICAgICAgICBob3VycyA9IGdldEhvdXJzRnJvbVRlbXBsYXRlKCk7XG5cbiAgICAgIG5nTW9kZWxDdHJsLiRzZXREaXJ0eSgpO1xuXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQobWludXRlcykgJiYgYW5ndWxhci5pc0RlZmluZWQoaG91cnMpKSB7XG4gICAgICAgIHNlbGVjdGVkLnNldEhvdXJzKGhvdXJzKTtcbiAgICAgICAgc2VsZWN0ZWQuc2V0TWludXRlcyhtaW51dGVzKTtcbiAgICAgICAgaWYgKHNlbGVjdGVkIDwgbWluIHx8IHNlbGVjdGVkID4gbWF4KSB7XG4gICAgICAgICAgaW52YWxpZGF0ZSh1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZnJlc2goJ20nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW52YWxpZGF0ZSh1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBtaW51dGVzSW5wdXRFbC5vbignYmx1cicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRUb3VjaGVkKCk7XG4gICAgICBpZiAobW9kZWxJc0VtcHR5KCkpIHtcbiAgICAgICAgbWFrZVZhbGlkKCk7XG4gICAgICB9IGVsc2UgaWYgKCRzY29wZS5taW51dGVzID09PSBudWxsKSB7XG4gICAgICAgIGludmFsaWRhdGUodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoISRzY29wZS5pbnZhbGlkTWludXRlcyAmJiAkc2NvcGUubWludXRlcyA8IDEwKSB7XG4gICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLm1pbnV0ZXMgPSBwYWQoJHNjb3BlLm1pbnV0ZXMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS51cGRhdGVTZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2Vjb25kcyA9IGdldFNlY29uZHNGcm9tVGVtcGxhdGUoKTtcblxuICAgICAgbmdNb2RlbEN0cmwuJHNldERpcnR5KCk7XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChzZWNvbmRzKSkge1xuICAgICAgICBzZWxlY3RlZC5zZXRTZWNvbmRzKHNlY29uZHMpO1xuICAgICAgICByZWZyZXNoKCdzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnZhbGlkYXRlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2Vjb25kc0lucHV0RWwub24oJ2JsdXInLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAobW9kZWxJc0VtcHR5KCkpIHtcbiAgICAgICAgbWFrZVZhbGlkKCk7XG4gICAgICB9IGVsc2UgaWYgKCEkc2NvcGUuaW52YWxpZFNlY29uZHMgJiYgJHNjb3BlLnNlY29uZHMgPCAxMCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUuc2Vjb25kcyA9IHBhZCgkc2NvcGUuc2Vjb25kcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH07XG5cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGF0ZSA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7XG5cbiAgICBpZiAoaXNOYU4oZGF0ZSkpIHtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgndGltZScsIGZhbHNlKTtcbiAgICAgICRsb2cuZXJyb3IoJ1RpbWVwaWNrZXIgZGlyZWN0aXZlOiBcIm5nLW1vZGVsXCIgdmFsdWUgbXVzdCBiZSBhIERhdGUgb2JqZWN0LCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgMDEuMDEuMTk3MCBvciBhIHN0cmluZyByZXByZXNlbnRpbmcgYW4gUkZDMjgyMiBvciBJU08gODYwMSBkYXRlLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGF0ZSkge1xuICAgICAgICBzZWxlY3RlZCA9IGRhdGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3RlZCA8IG1pbiB8fCBzZWxlY3RlZCA+IG1heCkge1xuICAgICAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3RpbWUnLCBmYWxzZSk7XG4gICAgICAgICRzY29wZS5pbnZhbGlkSG91cnMgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuaW52YWxpZE1pbnV0ZXMgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFrZVZhbGlkKCk7XG4gICAgICB9XG4gICAgICB1cGRhdGVUZW1wbGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBDYWxsIGludGVybmFsbHkgd2hlbiB3ZSBrbm93IHRoYXQgbW9kZWwgaXMgdmFsaWQuXG4gIGZ1bmN0aW9uIHJlZnJlc2goa2V5Ym9hcmRDaGFuZ2UpIHtcbiAgICBtYWtlVmFsaWQoKTtcbiAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG5ldyBEYXRlKHNlbGVjdGVkKSk7XG4gICAgdXBkYXRlVGVtcGxhdGUoa2V5Ym9hcmRDaGFuZ2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZVZhbGlkKCkge1xuICAgIGlmIChob3Vyc01vZGVsQ3RybCkge1xuICAgICAgaG91cnNNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdob3VycycsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChtaW51dGVzTW9kZWxDdHJsKSB7XG4gICAgICBtaW51dGVzTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnbWludXRlcycsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChzZWNvbmRzTW9kZWxDdHJsKSB7XG4gICAgICBzZWNvbmRzTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnc2Vjb25kcycsIHRydWUpO1xuICAgIH1cblxuICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgndGltZScsIHRydWUpO1xuICAgICRzY29wZS5pbnZhbGlkSG91cnMgPSBmYWxzZTtcbiAgICAkc2NvcGUuaW52YWxpZE1pbnV0ZXMgPSBmYWxzZTtcbiAgICAkc2NvcGUuaW52YWxpZFNlY29uZHMgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVRlbXBsYXRlKGtleWJvYXJkQ2hhbmdlKSB7XG4gICAgaWYgKCFuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSkge1xuICAgICAgJHNjb3BlLmhvdXJzID0gbnVsbDtcbiAgICAgICRzY29wZS5taW51dGVzID0gbnVsbDtcbiAgICAgICRzY29wZS5zZWNvbmRzID0gbnVsbDtcbiAgICAgICRzY29wZS5tZXJpZGlhbiA9IG1lcmlkaWFuc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGhvdXJzID0gc2VsZWN0ZWQuZ2V0SG91cnMoKSxcbiAgICAgICAgbWludXRlcyA9IHNlbGVjdGVkLmdldE1pbnV0ZXMoKSxcbiAgICAgICAgc2Vjb25kcyA9IHNlbGVjdGVkLmdldFNlY29uZHMoKTtcblxuICAgICAgaWYgKCRzY29wZS5zaG93TWVyaWRpYW4pIHtcbiAgICAgICAgaG91cnMgPSBob3VycyA9PT0gMCB8fCBob3VycyA9PT0gMTIgPyAxMiA6IGhvdXJzICUgMTI7IC8vIENvbnZlcnQgMjQgdG8gMTIgaG91ciBzeXN0ZW1cbiAgICAgIH1cblxuICAgICAgJHNjb3BlLmhvdXJzID0ga2V5Ym9hcmRDaGFuZ2UgPT09ICdoJyA/IGhvdXJzIDogcGFkKGhvdXJzLCAhcGFkSG91cnMpO1xuICAgICAgaWYgKGtleWJvYXJkQ2hhbmdlICE9PSAnbScpIHtcbiAgICAgICAgJHNjb3BlLm1pbnV0ZXMgPSBwYWQobWludXRlcyk7XG4gICAgICB9XG4gICAgICAkc2NvcGUubWVyaWRpYW4gPSBzZWxlY3RlZC5nZXRIb3VycygpIDwgMTIgPyBtZXJpZGlhbnNbMF0gOiBtZXJpZGlhbnNbMV07XG5cbiAgICAgIGlmIChrZXlib2FyZENoYW5nZSAhPT0gJ3MnKSB7XG4gICAgICAgICRzY29wZS5zZWNvbmRzID0gcGFkKHNlY29uZHMpO1xuICAgICAgfVxuICAgICAgJHNjb3BlLm1lcmlkaWFuID0gc2VsZWN0ZWQuZ2V0SG91cnMoKSA8IDEyID8gbWVyaWRpYW5zWzBdIDogbWVyaWRpYW5zWzFdO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFNlY29uZHNUb1NlbGVjdGVkKHNlY29uZHMpIHtcbiAgICBzZWxlY3RlZCA9IGFkZFNlY29uZHMoc2VsZWN0ZWQsIHNlY29uZHMpO1xuICAgIHJlZnJlc2goKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIG1pbnV0ZXMpIHtcbiAgICByZXR1cm4gYWRkU2Vjb25kcyhzZWxlY3RlZCwgbWludXRlcyo2MCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRTZWNvbmRzKGRhdGUsIHNlY29uZHMpIHtcbiAgICB2YXIgZHQgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSArIHNlY29uZHMgKiAxMDAwKTtcbiAgICB2YXIgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIG5ld0RhdGUuc2V0SG91cnMoZHQuZ2V0SG91cnMoKSwgZHQuZ2V0TWludXRlcygpLCBkdC5nZXRTZWNvbmRzKCkpO1xuICAgIHJldHVybiBuZXdEYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gbW9kZWxJc0VtcHR5KCkge1xuICAgIHJldHVybiAoJHNjb3BlLmhvdXJzID09PSBudWxsIHx8ICRzY29wZS5ob3VycyA9PT0gJycpICYmXG4gICAgICAoJHNjb3BlLm1pbnV0ZXMgPT09IG51bGwgfHwgJHNjb3BlLm1pbnV0ZXMgPT09ICcnKSAmJlxuICAgICAgKCEkc2NvcGUuc2hvd1NlY29uZHMgfHwgJHNjb3BlLnNob3dTZWNvbmRzICYmICgkc2NvcGUuc2Vjb25kcyA9PT0gbnVsbCB8fCAkc2NvcGUuc2Vjb25kcyA9PT0gJycpKTtcbiAgfVxuXG4gICRzY29wZS5zaG93U3Bpbm5lcnMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuc2hvd1NwaW5uZXJzKSA/XG4gICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnNob3dTcGlubmVycykgOiB0aW1lcGlja2VyQ29uZmlnLnNob3dTcGlubmVycztcblxuICAkc2NvcGUuaW5jcmVtZW50SG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub0luY3JlbWVudEhvdXJzKCkpIHtcbiAgICAgIGFkZFNlY29uZHNUb1NlbGVjdGVkKGhvdXJTdGVwICogNjAgKiA2MCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5kZWNyZW1lbnRIb3VycyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghJHNjb3BlLm5vRGVjcmVtZW50SG91cnMoKSkge1xuICAgICAgYWRkU2Vjb25kc1RvU2VsZWN0ZWQoLWhvdXJTdGVwICogNjAgKiA2MCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5pbmNyZW1lbnRNaW51dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9JbmNyZW1lbnRNaW51dGVzKCkpIHtcbiAgICAgIGFkZFNlY29uZHNUb1NlbGVjdGVkKG1pbnV0ZVN0ZXAgKiA2MCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5kZWNyZW1lbnRNaW51dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9EZWNyZW1lbnRNaW51dGVzKCkpIHtcbiAgICAgIGFkZFNlY29uZHNUb1NlbGVjdGVkKC1taW51dGVTdGVwICogNjApO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuaW5jcmVtZW50U2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghJHNjb3BlLm5vSW5jcmVtZW50U2Vjb25kcygpKSB7XG4gICAgICBhZGRTZWNvbmRzVG9TZWxlY3RlZChzZWNvbmRTdGVwKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmRlY3JlbWVudFNlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub0RlY3JlbWVudFNlY29uZHMoKSkge1xuICAgICAgYWRkU2Vjb25kc1RvU2VsZWN0ZWQoLXNlY29uZFN0ZXApO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUudG9nZ2xlTWVyaWRpYW4gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbWludXRlcyA9IGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKSxcbiAgICAgICAgaG91cnMgPSBnZXRIb3Vyc0Zyb21UZW1wbGF0ZSgpO1xuXG4gICAgaWYgKCEkc2NvcGUubm9Ub2dnbGVNZXJpZGlhbigpKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQobWludXRlcykgJiYgYW5ndWxhci5pc0RlZmluZWQoaG91cnMpKSB7XG4gICAgICAgIGFkZFNlY29uZHNUb1NlbGVjdGVkKDEyICogNjAgKiAoc2VsZWN0ZWQuZ2V0SG91cnMoKSA8IDEyID8gNjAgOiAtNjApKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRzY29wZS5tZXJpZGlhbiA9ICRzY29wZS5tZXJpZGlhbiA9PT0gbWVyaWRpYW5zWzBdID8gbWVyaWRpYW5zWzFdIDogbWVyaWRpYW5zWzBdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuYmx1ciA9IGZ1bmN0aW9uKCkge1xuICAgIG5nTW9kZWxDdHJsLiRzZXRUb3VjaGVkKCk7XG4gIH07XG5cbiAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICB3aGlsZSAod2F0Y2hlcnMubGVuZ3RoKSB7XG4gICAgICB3YXRjaGVycy5zaGlmdCgpKCk7XG4gICAgfVxuICB9KTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJUaW1lcGlja2VyJywgWyd1aWJUaW1lcGlja2VyQ29uZmlnJywgZnVuY3Rpb24odWliVGltZXBpY2tlckNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFsndWliVGltZXBpY2tlcicsICc/Xm5nTW9kZWwnXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJUaW1lcGlja2VyQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAndGltZXBpY2tlcicsXG4gICAgc2NvcGU6IHt9LFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8IHVpYlRpbWVwaWNrZXJDb25maWcudGVtcGxhdGVVcmw7XG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgdGltZXBpY2tlckN0cmwgPSBjdHJsc1swXSwgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgaWYgKG5nTW9kZWxDdHJsKSB7XG4gICAgICAgIHRpbWVwaWNrZXJDdHJsLmluaXQobmdNb2RlbEN0cmwsIGVsZW1lbnQuZmluZCgnaW5wdXQnKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnR5cGVhaGVhZCcsIFsndWkuYm9vdHN0cmFwLmRlYm91bmNlJywgJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbiddKVxuXG4vKipcbiAqIEEgaGVscGVyIHNlcnZpY2UgdGhhdCBjYW4gcGFyc2UgdHlwZWFoZWFkJ3Mgc3ludGF4IChzdHJpbmcgcHJvdmlkZWQgYnkgdXNlcnMpXG4gKiBFeHRyYWN0ZWQgdG8gYSBzZXBhcmF0ZSBzZXJ2aWNlIGZvciBlYXNlIG9mIHVuaXQgdGVzdGluZ1xuICovXG4gIC5mYWN0b3J5KCd1aWJUeXBlYWhlYWRQYXJzZXInLCBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkge1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgIDAwMDAwMTExMTExMTEwMDAwMDAwMDAwMDAwMjIyMjIyMjIwMDAwMDAwMDAwMDAwMDAwMzMzMzMzMzMzMzMzMzMzMDAwMDAwMDAwMDA0NDQ0NDQ0NDAwMFxuICAgIHZhciBUWVBFQUhFQURfUkVHRVhQID0gL15cXHMqKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/XFxzK2ZvclxccysoPzooW1xcJFxcd11bXFwkXFx3XFxkXSopKVxccytpblxccysoW1xcc1xcU10rPykkLztcbiAgICByZXR1cm4ge1xuICAgICAgcGFyc2U6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGlucHV0Lm1hdGNoKFRZUEVBSEVBRF9SRUdFWFApO1xuICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ0V4cGVjdGVkIHR5cGVhaGVhZCBzcGVjaWZpY2F0aW9uIGluIGZvcm0gb2YgXCJfbW9kZWxWYWx1ZV8gKGFzIF9sYWJlbF8pPyBmb3IgX2l0ZW1fIGluIF9jb2xsZWN0aW9uX1wiJyArXG4gICAgICAgICAgICAgICcgYnV0IGdvdCBcIicgKyBpbnB1dCArICdcIi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXRlbU5hbWU6IG1hdGNoWzNdLFxuICAgICAgICAgIHNvdXJjZTogJHBhcnNlKG1hdGNoWzRdKSxcbiAgICAgICAgICB2aWV3TWFwcGVyOiAkcGFyc2UobWF0Y2hbMl0gfHwgbWF0Y2hbMV0pLFxuICAgICAgICAgIG1vZGVsTWFwcGVyOiAkcGFyc2UobWF0Y2hbMV0pXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfV0pXG5cbiAgLmNvbnRyb2xsZXIoJ1VpYlR5cGVhaGVhZENvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICckYXR0cnMnLCAnJGNvbXBpbGUnLCAnJHBhcnNlJywgJyRxJywgJyR0aW1lb3V0JywgJyRkb2N1bWVudCcsICckd2luZG93JywgJyRyb290U2NvcGUnLCAnJCRkZWJvdW5jZScsICckdWliUG9zaXRpb24nLCAndWliVHlwZWFoZWFkUGFyc2VyJyxcbiAgICBmdW5jdGlvbihvcmlnaW5hbFNjb3BlLCBlbGVtZW50LCBhdHRycywgJGNvbXBpbGUsICRwYXJzZSwgJHEsICR0aW1lb3V0LCAkZG9jdW1lbnQsICR3aW5kb3csICRyb290U2NvcGUsICQkZGVib3VuY2UsICRwb3NpdGlvbiwgdHlwZWFoZWFkUGFyc2VyKSB7XG4gICAgdmFyIEhPVF9LRVlTID0gWzksIDEzLCAyNywgMzgsIDQwXTtcbiAgICB2YXIgZXZlbnREZWJvdW5jZVRpbWUgPSAyMDA7XG4gICAgdmFyIG1vZGVsQ3RybCwgbmdNb2RlbE9wdGlvbnM7XG4gICAgLy9TVVBQT1JURUQgQVRUUklCVVRFUyAoT1BUSU9OUylcblxuICAgIC8vbWluaW1hbCBubyBvZiBjaGFyYWN0ZXJzIHRoYXQgbmVlZHMgdG8gYmUgZW50ZXJlZCBiZWZvcmUgdHlwZWFoZWFkIGtpY2tzLWluXG4gICAgdmFyIG1pbkxlbmd0aCA9IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkTWluTGVuZ3RoKTtcbiAgICBpZiAoIW1pbkxlbmd0aCAmJiBtaW5MZW5ndGggIT09IDApIHtcbiAgICAgIG1pbkxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgb3JpZ2luYWxTY29wZS4kd2F0Y2goYXR0cnMudHlwZWFoZWFkTWluTGVuZ3RoLCBmdW5jdGlvbiAobmV3VmFsKSB7XG4gICAgICAgIG1pbkxlbmd0aCA9ICFuZXdWYWwgJiYgbmV3VmFsICE9PSAwID8gMSA6IG5ld1ZhbDtcbiAgICB9KTtcblxuICAgIC8vbWluaW1hbCB3YWl0IHRpbWUgYWZ0ZXIgbGFzdCBjaGFyYWN0ZXIgdHlwZWQgYmVmb3JlIHR5cGVhaGVhZCBraWNrcy1pblxuICAgIHZhciB3YWl0VGltZSA9IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkV2FpdE1zKSB8fCAwO1xuXG4gICAgLy9zaG91bGQgaXQgcmVzdHJpY3QgbW9kZWwgdmFsdWVzIHRvIHRoZSBvbmVzIHNlbGVjdGVkIGZyb20gdGhlIHBvcHVwIG9ubHk/XG4gICAgdmFyIGlzRWRpdGFibGUgPSBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZEVkaXRhYmxlKSAhPT0gZmFsc2U7XG4gICAgb3JpZ2luYWxTY29wZS4kd2F0Y2goYXR0cnMudHlwZWFoZWFkRWRpdGFibGUsIGZ1bmN0aW9uIChuZXdWYWwpIHtcbiAgICAgIGlzRWRpdGFibGUgPSBuZXdWYWwgIT09IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgLy9iaW5kaW5nIHRvIGEgdmFyaWFibGUgdGhhdCBpbmRpY2F0ZXMgaWYgbWF0Y2hlcyBhcmUgYmVpbmcgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5XG4gICAgdmFyIGlzTG9hZGluZ1NldHRlciA9ICRwYXJzZShhdHRycy50eXBlYWhlYWRMb2FkaW5nKS5hc3NpZ24gfHwgYW5ndWxhci5ub29wO1xuXG4gICAgLy9hIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBhbiBldmVudCBzaG91bGQgY2F1c2Ugc2VsZWN0aW9uXG4gICAgdmFyIGlzU2VsZWN0RXZlbnQgPSBhdHRycy50eXBlYWhlYWRTaG91bGRTZWxlY3QgPyAkcGFyc2UoYXR0cnMudHlwZWFoZWFkU2hvdWxkU2VsZWN0KSA6IGZ1bmN0aW9uKHNjb3BlLCB2YWxzKSB7XG4gICAgICB2YXIgZXZ0ID0gdmFscy4kZXZlbnQ7XG4gICAgICByZXR1cm4gZXZ0LndoaWNoID09PSAxMyB8fCBldnQud2hpY2ggPT09IDk7XG4gICAgfTtcblxuICAgIC8vYSBjYWxsYmFjayBleGVjdXRlZCB3aGVuIGEgbWF0Y2ggaXMgc2VsZWN0ZWRcbiAgICB2YXIgb25TZWxlY3RDYWxsYmFjayA9ICRwYXJzZShhdHRycy50eXBlYWhlYWRPblNlbGVjdCk7XG5cbiAgICAvL3Nob3VsZCBpdCBzZWxlY3QgaGlnaGxpZ2h0ZWQgcG9wdXAgdmFsdWUgd2hlbiBsb3NpbmcgZm9jdXM/XG4gICAgdmFyIGlzU2VsZWN0T25CbHVyID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnMudHlwZWFoZWFkU2VsZWN0T25CbHVyKSA/IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkU2VsZWN0T25CbHVyKSA6IGZhbHNlO1xuXG4gICAgLy9iaW5kaW5nIHRvIGEgdmFyaWFibGUgdGhhdCBpbmRpY2F0ZXMgaWYgdGhlcmUgd2VyZSBubyByZXN1bHRzIGFmdGVyIHRoZSBxdWVyeSBpcyBjb21wbGV0ZWRcbiAgICB2YXIgaXNOb1Jlc3VsdHNTZXR0ZXIgPSAkcGFyc2UoYXR0cnMudHlwZWFoZWFkTm9SZXN1bHRzKS5hc3NpZ24gfHwgYW5ndWxhci5ub29wO1xuXG4gICAgdmFyIGlucHV0Rm9ybWF0dGVyID0gYXR0cnMudHlwZWFoZWFkSW5wdXRGb3JtYXR0ZXIgPyAkcGFyc2UoYXR0cnMudHlwZWFoZWFkSW5wdXRGb3JtYXR0ZXIpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGFwcGVuZFRvQm9keSA9IGF0dHJzLnR5cGVhaGVhZEFwcGVuZFRvQm9keSA/IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkQXBwZW5kVG9Cb2R5KSA6IGZhbHNlO1xuXG4gICAgdmFyIGFwcGVuZFRvID0gYXR0cnMudHlwZWFoZWFkQXBwZW5kVG8gP1xuICAgICAgb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRBcHBlbmRUbykgOiBudWxsO1xuXG4gICAgdmFyIGZvY3VzRmlyc3QgPSBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZEZvY3VzRmlyc3QpICE9PSBmYWxzZTtcblxuICAgIC8vSWYgaW5wdXQgbWF0Y2hlcyBhbiBpdGVtIG9mIHRoZSBsaXN0IGV4YWN0bHksIHNlbGVjdCBpdCBhdXRvbWF0aWNhbGx5XG4gICAgdmFyIHNlbGVjdE9uRXhhY3QgPSBhdHRycy50eXBlYWhlYWRTZWxlY3RPbkV4YWN0ID8gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRTZWxlY3RPbkV4YWN0KSA6IGZhbHNlO1xuXG4gICAgLy9iaW5kaW5nIHRvIGEgdmFyaWFibGUgdGhhdCBpbmRpY2F0ZXMgaWYgZHJvcGRvd24gaXMgb3BlblxuICAgIHZhciBpc09wZW5TZXR0ZXIgPSAkcGFyc2UoYXR0cnMudHlwZWFoZWFkSXNPcGVuKS5hc3NpZ24gfHwgYW5ndWxhci5ub29wO1xuXG4gICAgdmFyIHNob3dIaW50ID0gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRTaG93SGludCkgfHwgZmFsc2U7XG5cbiAgICAvL0lOVEVSTkFMIFZBUklBQkxFU1xuXG4gICAgLy9tb2RlbCBzZXR0ZXIgZXhlY3V0ZWQgdXBvbiBtYXRjaCBzZWxlY3Rpb25cbiAgICB2YXIgcGFyc2VkTW9kZWwgPSAkcGFyc2UoYXR0cnMubmdNb2RlbCk7XG4gICAgdmFyIGludm9rZU1vZGVsU2V0dGVyID0gJHBhcnNlKGF0dHJzLm5nTW9kZWwgKyAnKCQkJHApJyk7XG4gICAgdmFyICRzZXRNb2RlbFZhbHVlID0gZnVuY3Rpb24oc2NvcGUsIG5ld1ZhbHVlKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHBhcnNlZE1vZGVsKG9yaWdpbmFsU2NvcGUpKSAmJlxuICAgICAgICBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ2dldHRlclNldHRlcicpKSB7XG4gICAgICAgIHJldHVybiBpbnZva2VNb2RlbFNldHRlcihzY29wZSwgeyQkJHA6IG5ld1ZhbHVlfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJzZWRNb2RlbC5hc3NpZ24oc2NvcGUsIG5ld1ZhbHVlKTtcbiAgICB9O1xuXG4gICAgLy9leHByZXNzaW9ucyB1c2VkIGJ5IHR5cGVhaGVhZFxuICAgIHZhciBwYXJzZXJSZXN1bHQgPSB0eXBlYWhlYWRQYXJzZXIucGFyc2UoYXR0cnMudWliVHlwZWFoZWFkKTtcblxuICAgIHZhciBoYXNGb2N1cztcblxuICAgIC8vVXNlZCB0byBhdm9pZCBidWcgaW4gaU9TIHdlYnZpZXcgd2hlcmUgaU9TIGtleWJvYXJkIGRvZXMgbm90IGZpcmVcbiAgICAvL21vdXNlZG93biAmIG1vdXNldXAgZXZlbnRzXG4gICAgLy9Jc3N1ZSAjMzY5OVxuICAgIHZhciBzZWxlY3RlZDtcblxuICAgIC8vY3JlYXRlIGEgY2hpbGQgc2NvcGUgZm9yIHRoZSB0eXBlYWhlYWQgZGlyZWN0aXZlIHNvIHdlIGFyZSBub3QgcG9sbHV0aW5nIG9yaWdpbmFsIHNjb3BlXG4gICAgLy93aXRoIHR5cGVhaGVhZC1zcGVjaWZpYyBkYXRhIChtYXRjaGVzLCBxdWVyeSBldGMuKVxuICAgIHZhciBzY29wZSA9IG9yaWdpbmFsU2NvcGUuJG5ldygpO1xuICAgIHZhciBvZmZEZXN0cm95ID0gb3JpZ2luYWxTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICBzY29wZS4kZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBvZmZEZXN0cm95KTtcblxuICAgIC8vIFdBSS1BUklBXG4gICAgdmFyIHBvcHVwSWQgPSAndHlwZWFoZWFkLScgKyBzY29wZS4kaWQgKyAnLScgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCk7XG4gICAgZWxlbWVudC5hdHRyKHtcbiAgICAgICdhcmlhLWF1dG9jb21wbGV0ZSc6ICdsaXN0JyxcbiAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAnYXJpYS1vd25zJzogcG9wdXBJZFxuICAgIH0pO1xuXG4gICAgdmFyIGlucHV0c0NvbnRhaW5lciwgaGludElucHV0RWxlbTtcbiAgICAvL2FkZCByZWFkLW9ubHkgaW5wdXQgdG8gc2hvdyBoaW50XG4gICAgaWYgKHNob3dIaW50KSB7XG4gICAgICBpbnB1dHNDb250YWluZXIgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXY+PC9kaXY+Jyk7XG4gICAgICBpbnB1dHNDb250YWluZXIuY3NzKCdwb3NpdGlvbicsICdyZWxhdGl2ZScpO1xuICAgICAgZWxlbWVudC5hZnRlcihpbnB1dHNDb250YWluZXIpO1xuICAgICAgaGludElucHV0RWxlbSA9IGVsZW1lbnQuY2xvbmUoKTtcbiAgICAgIGhpbnRJbnB1dEVsZW0uYXR0cigncGxhY2Vob2xkZXInLCAnJyk7XG4gICAgICBoaW50SW5wdXRFbGVtLmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICBoaW50SW5wdXRFbGVtLnZhbCgnJyk7XG4gICAgICBoaW50SW5wdXRFbGVtLmNzcyh7XG4gICAgICAgICdwb3NpdGlvbic6ICdhYnNvbHV0ZScsXG4gICAgICAgICd0b3AnOiAnMHB4JyxcbiAgICAgICAgJ2xlZnQnOiAnMHB4JyxcbiAgICAgICAgJ2JvcmRlci1jb2xvcic6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICdib3gtc2hhZG93JzogJ25vbmUnLFxuICAgICAgICAnb3BhY2l0eSc6IDEsXG4gICAgICAgICdiYWNrZ3JvdW5kJzogJ25vbmUgMCUgMCUgLyBhdXRvIHJlcGVhdCBzY3JvbGwgcGFkZGluZy1ib3ggYm9yZGVyLWJveCByZ2IoMjU1LCAyNTUsIDI1NSknLFxuICAgICAgICAnY29sb3InOiAnIzk5OSdcbiAgICAgIH0pO1xuICAgICAgZWxlbWVudC5jc3Moe1xuICAgICAgICAncG9zaXRpb24nOiAncmVsYXRpdmUnLFxuICAgICAgICAndmVydGljYWwtYWxpZ24nOiAndG9wJyxcbiAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAndHJhbnNwYXJlbnQnXG4gICAgICB9KTtcblxuICAgICAgaWYgKGhpbnRJbnB1dEVsZW0uYXR0cignaWQnKSkge1xuICAgICAgICBoaW50SW5wdXRFbGVtLnJlbW92ZUF0dHIoJ2lkJyk7IC8vIHJlbW92ZSBkdXBsaWNhdGUgaWQgaWYgcHJlc2VudC5cbiAgICAgIH1cbiAgICAgIGlucHV0c0NvbnRhaW5lci5hcHBlbmQoaGludElucHV0RWxlbSk7XG4gICAgICBoaW50SW5wdXRFbGVtLmFmdGVyKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vcG9wLXVwIGVsZW1lbnQgdXNlZCB0byBkaXNwbGF5IG1hdGNoZXNcbiAgICB2YXIgcG9wVXBFbCA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiB1aWItdHlwZWFoZWFkLXBvcHVwPjwvZGl2PicpO1xuICAgIHBvcFVwRWwuYXR0cih7XG4gICAgICBpZDogcG9wdXBJZCxcbiAgICAgIG1hdGNoZXM6ICdtYXRjaGVzJyxcbiAgICAgIGFjdGl2ZTogJ2FjdGl2ZUlkeCcsXG4gICAgICBzZWxlY3Q6ICdzZWxlY3QoYWN0aXZlSWR4LCBldnQpJyxcbiAgICAgICdtb3ZlLWluLXByb2dyZXNzJzogJ21vdmVJblByb2dyZXNzJyxcbiAgICAgIHF1ZXJ5OiAncXVlcnknLFxuICAgICAgcG9zaXRpb246ICdwb3NpdGlvbicsXG4gICAgICAnYXNzaWduLWlzLW9wZW4nOiAnYXNzaWduSXNPcGVuKGlzT3BlbiknLFxuICAgICAgZGVib3VuY2U6ICdkZWJvdW5jZVVwZGF0ZSdcbiAgICB9KTtcbiAgICAvL2N1c3RvbSBpdGVtIHRlbXBsYXRlXG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnR5cGVhaGVhZFRlbXBsYXRlVXJsKSkge1xuICAgICAgcG9wVXBFbC5hdHRyKCd0ZW1wbGF0ZS11cmwnLCBhdHRycy50eXBlYWhlYWRUZW1wbGF0ZVVybCk7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnR5cGVhaGVhZFBvcHVwVGVtcGxhdGVVcmwpKSB7XG4gICAgICBwb3BVcEVsLmF0dHIoJ3BvcHVwLXRlbXBsYXRlLXVybCcsIGF0dHJzLnR5cGVhaGVhZFBvcHVwVGVtcGxhdGVVcmwpO1xuICAgIH1cblxuICAgIHZhciByZXNldEhpbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzaG93SGludCkge1xuICAgICAgICBoaW50SW5wdXRFbGVtLnZhbCgnJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNldE1hdGNoZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNjb3BlLm1hdGNoZXMgPSBbXTtcbiAgICAgIHNjb3BlLmFjdGl2ZUlkeCA9IC0xO1xuICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgcmVzZXRIaW50KCk7XG4gICAgfTtcblxuICAgIHZhciBnZXRNYXRjaElkID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiBwb3B1cElkICsgJy1vcHRpb24tJyArIGluZGV4O1xuICAgIH07XG5cbiAgICAvLyBJbmRpY2F0ZSB0aGF0IHRoZSBzcGVjaWZpZWQgbWF0Y2ggaXMgdGhlIGFjdGl2ZSAocHJlLXNlbGVjdGVkKSBpdGVtIGluIHRoZSBsaXN0IG93bmVkIGJ5IHRoaXMgdHlwZWFoZWFkLlxuICAgIC8vIFRoaXMgYXR0cmlidXRlIGlzIGFkZGVkIG9yIHJlbW92ZWQgYXV0b21hdGljYWxseSB3aGVuIHRoZSBgYWN0aXZlSWR4YCBjaGFuZ2VzLlxuICAgIHNjb3BlLiR3YXRjaCgnYWN0aXZlSWR4JywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuYXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgZ2V0TWF0Y2hJZChpbmRleCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGlucHV0SXNFeGFjdE1hdGNoID0gZnVuY3Rpb24oaW5wdXRWYWx1ZSwgaW5kZXgpIHtcbiAgICAgIGlmIChzY29wZS5tYXRjaGVzLmxlbmd0aCA+IGluZGV4ICYmIGlucHV0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0VmFsdWUudG9VcHBlckNhc2UoKSA9PT0gc2NvcGUubWF0Y2hlc1tpbmRleF0ubGFiZWwudG9VcHBlckNhc2UoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0TWF0Y2hlc0FzeW5jID0gZnVuY3Rpb24oaW5wdXRWYWx1ZSwgZXZ0KSB7XG4gICAgICB2YXIgbG9jYWxzID0geyR2aWV3VmFsdWU6IGlucHV0VmFsdWV9O1xuICAgICAgaXNMb2FkaW5nU2V0dGVyKG9yaWdpbmFsU2NvcGUsIHRydWUpO1xuICAgICAgaXNOb1Jlc3VsdHNTZXR0ZXIob3JpZ2luYWxTY29wZSwgZmFsc2UpO1xuICAgICAgJHEud2hlbihwYXJzZXJSZXN1bHQuc291cmNlKG9yaWdpbmFsU2NvcGUsIGxvY2FscykpLnRoZW4oZnVuY3Rpb24obWF0Y2hlcykge1xuICAgICAgICAvL2l0IG1pZ2h0IGhhcHBlbiB0aGF0IHNldmVyYWwgYXN5bmMgcXVlcmllcyB3ZXJlIGluIHByb2dyZXNzIGlmIGEgdXNlciB3ZXJlIHR5cGluZyBmYXN0XG4gICAgICAgIC8vYnV0IHdlIGFyZSBpbnRlcmVzdGVkIG9ubHkgaW4gcmVzcG9uc2VzIHRoYXQgY29ycmVzcG9uZCB0byB0aGUgY3VycmVudCB2aWV3IHZhbHVlXG4gICAgICAgIHZhciBvbkN1cnJlbnRSZXF1ZXN0ID0gaW5wdXRWYWx1ZSA9PT0gbW9kZWxDdHJsLiR2aWV3VmFsdWU7XG4gICAgICAgIGlmIChvbkN1cnJlbnRSZXF1ZXN0ICYmIGhhc0ZvY3VzKSB7XG4gICAgICAgICAgaWYgKG1hdGNoZXMgJiYgbWF0Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzY29wZS5hY3RpdmVJZHggPSBmb2N1c0ZpcnN0ID8gMCA6IC0xO1xuICAgICAgICAgICAgaXNOb1Jlc3VsdHNTZXR0ZXIob3JpZ2luYWxTY29wZSwgZmFsc2UpO1xuICAgICAgICAgICAgc2NvcGUubWF0Y2hlcy5sZW5ndGggPSAwO1xuXG4gICAgICAgICAgICAvL3RyYW5zZm9ybSBsYWJlbHNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBsb2NhbHNbcGFyc2VyUmVzdWx0Lml0ZW1OYW1lXSA9IG1hdGNoZXNbaV07XG4gICAgICAgICAgICAgIHNjb3BlLm1hdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IGdldE1hdGNoSWQoaSksXG4gICAgICAgICAgICAgICAgbGFiZWw6IHBhcnNlclJlc3VsdC52aWV3TWFwcGVyKHNjb3BlLCBsb2NhbHMpLFxuICAgICAgICAgICAgICAgIG1vZGVsOiBtYXRjaGVzW2ldXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY29wZS5xdWVyeSA9IGlucHV0VmFsdWU7XG4gICAgICAgICAgICAvL3Bvc2l0aW9uIHBvcC11cCB3aXRoIG1hdGNoZXMgLSB3ZSBuZWVkIHRvIHJlLWNhbGN1bGF0ZSBpdHMgcG9zaXRpb24gZWFjaCB0aW1lIHdlIGFyZSBvcGVuaW5nIGEgd2luZG93XG4gICAgICAgICAgICAvL3dpdGggbWF0Y2hlcyBhcyBhIHBvcC11cCBtaWdodCBiZSBhYnNvbHV0ZS1wb3NpdGlvbmVkIGFuZCBwb3NpdGlvbiBvZiBhbiBpbnB1dCBtaWdodCBoYXZlIGNoYW5nZWQgb24gYSBwYWdlXG4gICAgICAgICAgICAvL2R1ZSB0byBvdGhlciBlbGVtZW50cyBiZWluZyByZW5kZXJlZFxuICAgICAgICAgICAgcmVjYWxjdWxhdGVQb3NpdGlvbigpO1xuXG4gICAgICAgICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcblxuICAgICAgICAgICAgLy9TZWxlY3QgdGhlIHNpbmdsZSByZW1haW5pbmcgb3B0aW9uIGlmIHVzZXIgaW5wdXQgbWF0Y2hlc1xuICAgICAgICAgICAgaWYgKHNlbGVjdE9uRXhhY3QgJiYgc2NvcGUubWF0Y2hlcy5sZW5ndGggPT09IDEgJiYgaW5wdXRJc0V4YWN0TWF0Y2goaW5wdXRWYWx1ZSwgMCkpIHtcbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoc2NvcGUuZGVib3VuY2VVcGRhdGUpIHx8IGFuZ3VsYXIuaXNPYmplY3Qoc2NvcGUuZGVib3VuY2VVcGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgJCRkZWJvdW5jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdCgwLCBldnQpO1xuICAgICAgICAgICAgICAgIH0sIGFuZ3VsYXIuaXNOdW1iZXIoc2NvcGUuZGVib3VuY2VVcGRhdGUpID8gc2NvcGUuZGVib3VuY2VVcGRhdGUgOiBzY29wZS5kZWJvdW5jZVVwZGF0ZVsnZGVmYXVsdCddKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3QoMCwgZXZ0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2hvd0hpbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGZpcnN0TGFiZWwgPSBzY29wZS5tYXRjaGVzWzBdLmxhYmVsO1xuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhpbnB1dFZhbHVlKSAmJlxuICAgICAgICAgICAgICAgIGlucHV0VmFsdWUubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgIGZpcnN0TGFiZWwuc2xpY2UoMCwgaW5wdXRWYWx1ZS5sZW5ndGgpLnRvVXBwZXJDYXNlKCkgPT09IGlucHV0VmFsdWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIGhpbnRJbnB1dEVsZW0udmFsKGlucHV0VmFsdWUgKyBmaXJzdExhYmVsLnNsaWNlKGlucHV0VmFsdWUubGVuZ3RoKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGludElucHV0RWxlbS52YWwoJycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICAgICAgaXNOb1Jlc3VsdHNTZXR0ZXIob3JpZ2luYWxTY29wZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvbkN1cnJlbnRSZXF1ZXN0KSB7XG4gICAgICAgICAgaXNMb2FkaW5nU2V0dGVyKG9yaWdpbmFsU2NvcGUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICBpc0xvYWRpbmdTZXR0ZXIob3JpZ2luYWxTY29wZSwgZmFsc2UpO1xuICAgICAgICBpc05vUmVzdWx0c1NldHRlcihvcmlnaW5hbFNjb3BlLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBiaW5kIGV2ZW50cyBvbmx5IGlmIGFwcGVuZFRvQm9keSBwYXJhbXMgZXhpc3QgLSBwZXJmb3JtYW5jZSBmZWF0dXJlXG4gICAgaWYgKGFwcGVuZFRvQm9keSkge1xuICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9uKCdyZXNpemUnLCBmaXJlUmVjYWxjdWxhdGluZyk7XG4gICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLm9uKCdzY3JvbGwnLCBmaXJlUmVjYWxjdWxhdGluZyk7XG4gICAgfVxuXG4gICAgLy8gRGVjbGFyZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIG91dHNpZGUgcmVjYWxjdWxhdGluZyBmb3JcbiAgICAvLyBwcm9wZXIgZGVib3VuY2luZ1xuICAgIHZhciBkZWJvdW5jZWRSZWNhbGN1bGF0ZSA9ICQkZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpZiBwb3B1cCBpcyB2aXNpYmxlXG4gICAgICBpZiAoc2NvcGUubWF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVjYWxjdWxhdGVQb3NpdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBzY29wZS5tb3ZlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgIH0sIGV2ZW50RGVib3VuY2VUaW1lKTtcblxuICAgIC8vIERlZmF1bHQgcHJvZ3Jlc3MgdHlwZVxuICAgIHNjb3BlLm1vdmVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBmaXJlUmVjYWxjdWxhdGluZygpIHtcbiAgICAgIGlmICghc2NvcGUubW92ZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgc2NvcGUubW92ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICB9XG5cbiAgICAgIGRlYm91bmNlZFJlY2FsY3VsYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gcmVjYWxjdWxhdGUgYWN0dWFsIHBvc2l0aW9uIGFuZCBzZXQgbmV3IHZhbHVlcyB0byBzY29wZVxuICAgIC8vIGFmdGVyIGRpZ2VzdCBsb29wIGlzIHBvcHVwIGluIHJpZ2h0IHBvc2l0aW9uXG4gICAgZnVuY3Rpb24gcmVjYWxjdWxhdGVQb3NpdGlvbigpIHtcbiAgICAgIHNjb3BlLnBvc2l0aW9uID0gYXBwZW5kVG9Cb2R5ID8gJHBvc2l0aW9uLm9mZnNldChlbGVtZW50KSA6ICRwb3NpdGlvbi5wb3NpdGlvbihlbGVtZW50KTtcbiAgICAgIHNjb3BlLnBvc2l0aW9uLnRvcCArPSBlbGVtZW50LnByb3AoJ29mZnNldEhlaWdodCcpO1xuICAgIH1cblxuICAgIC8vd2UgbmVlZCB0byBwcm9wYWdhdGUgdXNlcidzIHF1ZXJ5IHNvIHdlIGNhbiBoaWdsaWdodCBtYXRjaGVzXG4gICAgc2NvcGUucXVlcnkgPSB1bmRlZmluZWQ7XG5cbiAgICAvL0RlY2xhcmUgdGhlIHRpbWVvdXQgcHJvbWlzZSB2YXIgb3V0c2lkZSB0aGUgZnVuY3Rpb24gc2NvcGUgc28gdGhhdCBzdGFja2VkIGNhbGxzIGNhbiBiZSBjYW5jZWxsZWQgbGF0ZXJcbiAgICB2YXIgdGltZW91dFByb21pc2U7XG5cbiAgICB2YXIgc2NoZWR1bGVTZWFyY2hXaXRoVGltZW91dCA9IGZ1bmN0aW9uKGlucHV0VmFsdWUpIHtcbiAgICAgIHRpbWVvdXRQcm9taXNlID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGdldE1hdGNoZXNBc3luYyhpbnB1dFZhbHVlKTtcbiAgICAgIH0sIHdhaXRUaW1lKTtcbiAgICB9O1xuXG4gICAgdmFyIGNhbmNlbFByZXZpb3VzVGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRpbWVvdXRQcm9taXNlKSB7XG4gICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lb3V0UHJvbWlzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJlc2V0TWF0Y2hlcygpO1xuXG4gICAgc2NvcGUuYXNzaWduSXNPcGVuID0gZnVuY3Rpb24gKGlzT3Blbikge1xuICAgICAgaXNPcGVuU2V0dGVyKG9yaWdpbmFsU2NvcGUsIGlzT3Blbik7XG4gICAgfTtcblxuICAgIHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uKGFjdGl2ZUlkeCwgZXZ0KSB7XG4gICAgICAvL2NhbGxlZCBmcm9tIHdpdGhpbiB0aGUgJGRpZ2VzdCgpIGN5Y2xlXG4gICAgICB2YXIgbG9jYWxzID0ge307XG4gICAgICB2YXIgbW9kZWwsIGl0ZW07XG5cbiAgICAgIHNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIGxvY2Fsc1twYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gaXRlbSA9IHNjb3BlLm1hdGNoZXNbYWN0aXZlSWR4XS5tb2RlbDtcbiAgICAgIG1vZGVsID0gcGFyc2VyUmVzdWx0Lm1vZGVsTWFwcGVyKG9yaWdpbmFsU2NvcGUsIGxvY2Fscyk7XG4gICAgICAkc2V0TW9kZWxWYWx1ZShvcmlnaW5hbFNjb3BlLCBtb2RlbCk7XG4gICAgICBtb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdlZGl0YWJsZScsIHRydWUpO1xuICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgncGFyc2UnLCB0cnVlKTtcblxuICAgICAgb25TZWxlY3RDYWxsYmFjayhvcmlnaW5hbFNjb3BlLCB7XG4gICAgICAgICRpdGVtOiBpdGVtLFxuICAgICAgICAkbW9kZWw6IG1vZGVsLFxuICAgICAgICAkbGFiZWw6IHBhcnNlclJlc3VsdC52aWV3TWFwcGVyKG9yaWdpbmFsU2NvcGUsIGxvY2FscyksXG4gICAgICAgICRldmVudDogZXZ0XG4gICAgICB9KTtcblxuICAgICAgcmVzZXRNYXRjaGVzKCk7XG5cbiAgICAgIC8vcmV0dXJuIGZvY3VzIHRvIHRoZSBpbnB1dCBlbGVtZW50IGlmIGEgbWF0Y2ggd2FzIHNlbGVjdGVkIHZpYSBhIG1vdXNlIGNsaWNrIGV2ZW50XG4gICAgICAvLyB1c2UgdGltZW91dCB0byBhdm9pZCAkcm9vdFNjb3BlOmlucHJvZyBlcnJvclxuICAgICAgaWYgKHNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZEZvY3VzT25TZWxlY3QpICE9PSBmYWxzZSkge1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHsgZWxlbWVudFswXS5mb2N1cygpOyB9LCAwLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vYmluZCBrZXlib2FyZCBldmVudHM6IGFycm93cyB1cCgzOCkgLyBkb3duKDQwKSwgZW50ZXIoMTMpIGFuZCB0YWIoOSksIGVzYygyNylcbiAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAvL3R5cGVhaGVhZCBpcyBvcGVuIGFuZCBhbiBcImludGVyZXN0aW5nXCIga2V5IHdhcyBwcmVzc2VkXG4gICAgICBpZiAoc2NvcGUubWF0Y2hlcy5sZW5ndGggPT09IDAgfHwgSE9UX0tFWVMuaW5kZXhPZihldnQud2hpY2gpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG91bGRTZWxlY3QgPSBpc1NlbGVjdEV2ZW50KG9yaWdpbmFsU2NvcGUsIHskZXZlbnQ6IGV2dH0pO1xuXG4gICAgICAvKipcbiAgICAgICAqIGlmIHRoZXJlJ3Mgbm90aGluZyBzZWxlY3RlZCAoaS5lLiBmb2N1c0ZpcnN0KSBhbmQgZW50ZXIgb3IgdGFiIGlzIGhpdFxuICAgICAgICogb3JcbiAgICAgICAqIHNoaWZ0ICsgdGFiIGlzIHByZXNzZWQgdG8gYnJpbmcgZm9jdXMgdG8gdGhlIHByZXZpb3VzIGVsZW1lbnRcbiAgICAgICAqIHRoZW4gY2xlYXIgdGhlIHJlc3VsdHNcbiAgICAgICAqL1xuICAgICAgaWYgKHNjb3BlLmFjdGl2ZUlkeCA9PT0gLTEgJiYgc2hvdWxkU2VsZWN0IHx8IGV2dC53aGljaCA9PT0gOSAmJiAhIWV2dC5zaGlmdEtleSkge1xuICAgICAgICByZXNldE1hdGNoZXMoKTtcbiAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIHRhcmdldDtcbiAgICAgIHN3aXRjaCAoZXZ0LndoaWNoKSB7XG4gICAgICAgIGNhc2UgMjc6IC8vIGVzY2FwZVxuICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICAgIG9yaWdpbmFsU2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM4OiAvLyB1cCBhcnJvd1xuICAgICAgICAgIHNjb3BlLmFjdGl2ZUlkeCA9IChzY29wZS5hY3RpdmVJZHggPiAwID8gc2NvcGUuYWN0aXZlSWR4IDogc2NvcGUubWF0Y2hlcy5sZW5ndGgpIC0gMTtcbiAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgdGFyZ2V0ID0gcG9wVXBFbFswXS5xdWVyeVNlbGVjdG9yQWxsKCcudWliLXR5cGVhaGVhZC1tYXRjaCcpW3Njb3BlLmFjdGl2ZUlkeF07XG4gICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuc2Nyb2xsVG9wID0gdGFyZ2V0Lm9mZnNldFRvcDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0MDogLy8gZG93biBhcnJvd1xuICAgICAgICAgIHNjb3BlLmFjdGl2ZUlkeCA9IChzY29wZS5hY3RpdmVJZHggKyAxKSAlIHNjb3BlLm1hdGNoZXMubGVuZ3RoO1xuICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICB0YXJnZXQgPSBwb3BVcEVsWzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJy51aWItdHlwZWFoZWFkLW1hdGNoJylbc2NvcGUuYWN0aXZlSWR4XTtcbiAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5zY3JvbGxUb3AgPSB0YXJnZXQub2Zmc2V0VG9wO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChzaG91bGRTZWxlY3QpIHtcbiAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoc2NvcGUuZGVib3VuY2VVcGRhdGUpIHx8IGFuZ3VsYXIuaXNPYmplY3Qoc2NvcGUuZGVib3VuY2VVcGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgJCRkZWJvdW5jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdChzY29wZS5hY3RpdmVJZHgsIGV2dCk7XG4gICAgICAgICAgICAgICAgfSwgYW5ndWxhci5pc051bWJlcihzY29wZS5kZWJvdW5jZVVwZGF0ZSkgPyBzY29wZS5kZWJvdW5jZVVwZGF0ZSA6IHNjb3BlLmRlYm91bmNlVXBkYXRlWydkZWZhdWx0J10pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdChzY29wZS5hY3RpdmVJZHgsIGV2dCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGVsZW1lbnQub24oJ2ZvY3VzJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgaGFzRm9jdXMgPSB0cnVlO1xuICAgICAgaWYgKG1pbkxlbmd0aCA9PT0gMCAmJiAhbW9kZWxDdHJsLiR2aWV3VmFsdWUpIHtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZ2V0TWF0Y2hlc0FzeW5jKG1vZGVsQ3RybC4kdmlld1ZhbHVlLCBldnQpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGVsZW1lbnQub24oJ2JsdXInLCBmdW5jdGlvbihldnQpIHtcbiAgICAgIGlmIChpc1NlbGVjdE9uQmx1ciAmJiBzY29wZS5tYXRjaGVzLmxlbmd0aCAmJiBzY29wZS5hY3RpdmVJZHggIT09IC0xICYmICFzZWxlY3RlZCkge1xuICAgICAgICBzZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoYW5ndWxhci5pc09iamVjdChzY29wZS5kZWJvdW5jZVVwZGF0ZSkgJiYgYW5ndWxhci5pc051bWJlcihzY29wZS5kZWJvdW5jZVVwZGF0ZS5ibHVyKSkge1xuICAgICAgICAgICAgJCRkZWJvdW5jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0KHNjb3BlLmFjdGl2ZUlkeCwgZXZ0KTtcbiAgICAgICAgICAgIH0sIHNjb3BlLmRlYm91bmNlVXBkYXRlLmJsdXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY29wZS5zZWxlY3Qoc2NvcGUuYWN0aXZlSWR4LCBldnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzRWRpdGFibGUgJiYgbW9kZWxDdHJsLiRlcnJvci5lZGl0YWJsZSkge1xuICAgICAgICBtb2RlbEN0cmwuJHNldFZpZXdWYWx1ZSgpO1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gUmVzZXQgdmFsaWRpdHkgYXMgd2UgYXJlIGNsZWFyaW5nXG4gICAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZWRpdGFibGUnLCB0cnVlKTtcbiAgICAgICAgICBtb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdwYXJzZScsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudC52YWwoJycpO1xuICAgICAgfVxuICAgICAgaGFzRm9jdXMgPSBmYWxzZTtcbiAgICAgIHNlbGVjdGVkID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICAvLyBLZWVwIHJlZmVyZW5jZSB0byBjbGljayBoYW5kbGVyIHRvIHVuYmluZCBpdC5cbiAgICB2YXIgZGlzbWlzc0NsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgLy8gSXNzdWUgIzM5NzNcbiAgICAgIC8vIEZpcmVmb3ggdHJlYXRzIHJpZ2h0IGNsaWNrIGFzIGEgY2xpY2sgb24gZG9jdW1lbnRcbiAgICAgIGlmIChlbGVtZW50WzBdICE9PSBldnQudGFyZ2V0ICYmIGV2dC53aGljaCAhPT0gMyAmJiBzY29wZS5tYXRjaGVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICByZXNldE1hdGNoZXMoKTtcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICBvcmlnaW5hbFNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAkZG9jdW1lbnQub24oJ2NsaWNrJywgZGlzbWlzc0NsaWNrSGFuZGxlcik7XG5cbiAgICBvcmlnaW5hbFNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICRkb2N1bWVudC5vZmYoJ2NsaWNrJywgZGlzbWlzc0NsaWNrSGFuZGxlcik7XG4gICAgICBpZiAoYXBwZW5kVG9Cb2R5IHx8IGFwcGVuZFRvKSB7XG4gICAgICAgICRwb3B1cC5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFwcGVuZFRvQm9keSkge1xuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub2ZmKCdyZXNpemUnLCBmaXJlUmVjYWxjdWxhdGluZyk7XG4gICAgICAgICRkb2N1bWVudC5maW5kKCdib2R5Jykub2ZmKCdzY3JvbGwnLCBmaXJlUmVjYWxjdWxhdGluZyk7XG4gICAgICB9XG4gICAgICAvLyBQcmV2ZW50IGpRdWVyeSBjYWNoZSBtZW1vcnkgbGVha1xuICAgICAgcG9wVXBFbC5yZW1vdmUoKTtcblxuICAgICAgaWYgKHNob3dIaW50KSB7XG4gICAgICAgICAgaW5wdXRzQ29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyICRwb3B1cCA9ICRjb21waWxlKHBvcFVwRWwpKHNjb3BlKTtcblxuICAgIGlmIChhcHBlbmRUb0JvZHkpIHtcbiAgICAgICRkb2N1bWVudC5maW5kKCdib2R5JykuYXBwZW5kKCRwb3B1cCk7XG4gICAgfSBlbHNlIGlmIChhcHBlbmRUbykge1xuICAgICAgYW5ndWxhci5lbGVtZW50KGFwcGVuZFRvKS5lcSgwKS5hcHBlbmQoJHBvcHVwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5hZnRlcigkcG9wdXApO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKF9tb2RlbEN0cmwpIHtcbiAgICAgIG1vZGVsQ3RybCA9IF9tb2RlbEN0cmw7XG4gICAgICBuZ01vZGVsT3B0aW9ucyA9IGV4dHJhY3RPcHRpb25zKG1vZGVsQ3RybCk7XG5cbiAgICAgIHNjb3BlLmRlYm91bmNlVXBkYXRlID0gJHBhcnNlKG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbignZGVib3VuY2UnKSkob3JpZ2luYWxTY29wZSk7XG5cbiAgICAgIC8vcGx1ZyBpbnRvICRwYXJzZXJzIHBpcGVsaW5lIHRvIG9wZW4gYSB0eXBlYWhlYWQgb24gdmlldyBjaGFuZ2VzIGluaXRpYXRlZCBmcm9tIERPTVxuICAgICAgLy8kcGFyc2VycyBraWNrLWluIG9uIGFsbCB0aGUgY2hhbmdlcyBjb21pbmcgZnJvbSB0aGUgdmlldyBhcyB3ZWxsIGFzIG1hbnVhbGx5IHRyaWdnZXJlZCBieSAkc2V0Vmlld1ZhbHVlXG4gICAgICBtb2RlbEN0cmwuJHBhcnNlcnMudW5zaGlmdChmdW5jdGlvbihpbnB1dFZhbHVlKSB7XG4gICAgICAgIGhhc0ZvY3VzID0gdHJ1ZTtcblxuICAgICAgICBpZiAobWluTGVuZ3RoID09PSAwIHx8IGlucHV0VmFsdWUgJiYgaW5wdXRWYWx1ZS5sZW5ndGggPj0gbWluTGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHdhaXRUaW1lID4gMCkge1xuICAgICAgICAgICAgY2FuY2VsUHJldmlvdXNUaW1lb3V0KCk7XG4gICAgICAgICAgICBzY2hlZHVsZVNlYXJjaFdpdGhUaW1lb3V0KGlucHV0VmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRNYXRjaGVzQXN5bmMoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzTG9hZGluZ1NldHRlcihvcmlnaW5hbFNjb3BlLCBmYWxzZSk7XG4gICAgICAgICAgY2FuY2VsUHJldmlvdXNUaW1lb3V0KCk7XG4gICAgICAgICAgcmVzZXRNYXRjaGVzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNFZGl0YWJsZSkge1xuICAgICAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgLy8gUmVzZXQgaW4gY2FzZSB1c2VyIGhhZCB0eXBlZCBzb21ldGhpbmcgcHJldmlvdXNseS5cbiAgICAgICAgICBtb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdlZGl0YWJsZScsIHRydWUpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZWRpdGFibGUnLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9KTtcblxuICAgICAgbW9kZWxDdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24obW9kZWxWYWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlVmlld1ZhbHVlLCBlbXB0eVZpZXdWYWx1ZTtcbiAgICAgICAgdmFyIGxvY2FscyA9IHt9O1xuXG4gICAgICAgIC8vIFRoZSB2YWxpZGl0eSBtYXkgYmUgc2V0IHRvIGZhbHNlIHZpYSAkcGFyc2VycyAoc2VlIGFib3ZlKSBpZlxuICAgICAgICAvLyB0aGUgbW9kZWwgaXMgcmVzdHJpY3RlZCB0byBzZWxlY3RlZCB2YWx1ZXMuIElmIHRoZSBtb2RlbFxuICAgICAgICAvLyBpcyBzZXQgbWFudWFsbHkgaXQgaXMgY29uc2lkZXJlZCB0byBiZSB2YWxpZC5cbiAgICAgICAgaWYgKCFpc0VkaXRhYmxlKSB7XG4gICAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZWRpdGFibGUnLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnB1dEZvcm1hdHRlcikge1xuICAgICAgICAgIGxvY2Fscy4kbW9kZWwgPSBtb2RlbFZhbHVlO1xuICAgICAgICAgIHJldHVybiBpbnB1dEZvcm1hdHRlcihvcmlnaW5hbFNjb3BlLCBsb2NhbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pdCBtaWdodCBoYXBwZW4gdGhhdCB3ZSBkb24ndCBoYXZlIGVub3VnaCBpbmZvIHRvIHByb3Blcmx5IHJlbmRlciBpbnB1dCB2YWx1ZVxuICAgICAgICAvL3dlIG5lZWQgdG8gY2hlY2sgZm9yIHRoaXMgc2l0dWF0aW9uIGFuZCBzaW1wbHkgcmV0dXJuIG1vZGVsIHZhbHVlIGlmIHdlIGNhbid0IGFwcGx5IGN1c3RvbSBmb3JtYXR0aW5nXG4gICAgICAgIGxvY2Fsc1twYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gbW9kZWxWYWx1ZTtcbiAgICAgICAgY2FuZGlkYXRlVmlld1ZhbHVlID0gcGFyc2VyUmVzdWx0LnZpZXdNYXBwZXIob3JpZ2luYWxTY29wZSwgbG9jYWxzKTtcbiAgICAgICAgbG9jYWxzW3BhcnNlclJlc3VsdC5pdGVtTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIGVtcHR5Vmlld1ZhbHVlID0gcGFyc2VyUmVzdWx0LnZpZXdNYXBwZXIob3JpZ2luYWxTY29wZSwgbG9jYWxzKTtcblxuICAgICAgICByZXR1cm4gY2FuZGlkYXRlVmlld1ZhbHVlICE9PSBlbXB0eVZpZXdWYWx1ZSA/IGNhbmRpZGF0ZVZpZXdWYWx1ZSA6IG1vZGVsVmFsdWU7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZXh0cmFjdE9wdGlvbnMobmdNb2RlbEN0cmwpIHtcbiAgICAgIHZhciBuZ01vZGVsT3B0aW9ucztcblxuICAgICAgaWYgKGFuZ3VsYXIudmVyc2lvbi5taW5vciA8IDYpIHsgLy8gaW4gYW5ndWxhciA8IDEuNiAkb3B0aW9ucyBjb3VsZCBiZSBtaXNzaW5nXG4gICAgICAgIC8vIGd1YXJhbnRlZSBhIHZhbHVlXG4gICAgICAgIG5nTW9kZWxPcHRpb25zID0gbmdNb2RlbEN0cmwuJG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgLy8gbWltaWMgMS42KyBhcGlcbiAgICAgICAgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBuZ01vZGVsT3B0aW9uc1trZXldO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHsgLy8gaW4gYW5ndWxhciA+PTEuNiAkb3B0aW9ucyBpcyBhbHdheXMgcHJlc2VudFxuICAgICAgICBuZ01vZGVsT3B0aW9ucyA9IG5nTW9kZWxDdHJsLiRvcHRpb25zO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmdNb2RlbE9wdGlvbnM7XG4gICAgfVxuICB9XSlcblxuICAuZGlyZWN0aXZlKCd1aWJUeXBlYWhlYWQnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udHJvbGxlcjogJ1VpYlR5cGVhaGVhZENvbnRyb2xsZXInLFxuICAgICAgcmVxdWlyZTogWyduZ01vZGVsJywgJ3VpYlR5cGVhaGVhZCddLFxuICAgICAgbGluazogZnVuY3Rpb24ob3JpZ2luYWxTY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICAgIGN0cmxzWzFdLmluaXQoY3RybHNbMF0pO1xuICAgICAgfVxuICAgIH07XG4gIH0pXG5cbiAgLmRpcmVjdGl2ZSgndWliVHlwZWFoZWFkUG9wdXAnLCBbJyQkZGVib3VuY2UnLCBmdW5jdGlvbigkJGRlYm91bmNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIG1hdGNoZXM6ICc9JyxcbiAgICAgICAgcXVlcnk6ICc9JyxcbiAgICAgICAgYWN0aXZlOiAnPScsXG4gICAgICAgIHBvc2l0aW9uOiAnJicsXG4gICAgICAgIG1vdmVJblByb2dyZXNzOiAnPScsXG4gICAgICAgIHNlbGVjdDogJyYnLFxuICAgICAgICBhc3NpZ25Jc09wZW46ICcmJyxcbiAgICAgICAgZGVib3VuY2U6ICcmJ1xuICAgICAgfSxcbiAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgcmV0dXJuIGF0dHJzLnBvcHVwVGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLXBvcHVwLmh0bWwnO1xuICAgICAgfSxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBzY29wZS50ZW1wbGF0ZVVybCA9IGF0dHJzLnRlbXBsYXRlVXJsO1xuXG4gICAgICAgIHNjb3BlLmlzT3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpc0Ryb3Bkb3duT3BlbiA9IHNjb3BlLm1hdGNoZXMubGVuZ3RoID4gMDtcbiAgICAgICAgICBzY29wZS5hc3NpZ25Jc09wZW4oeyBpc09wZW46IGlzRHJvcGRvd25PcGVuIH0pO1xuICAgICAgICAgIHJldHVybiBpc0Ryb3Bkb3duT3BlbjtcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uKG1hdGNoSWR4KSB7XG4gICAgICAgICAgcmV0dXJuIHNjb3BlLmFjdGl2ZSA9PT0gbWF0Y2hJZHg7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuc2VsZWN0QWN0aXZlID0gZnVuY3Rpb24obWF0Y2hJZHgpIHtcbiAgICAgICAgICBzY29wZS5hY3RpdmUgPSBtYXRjaElkeDtcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5zZWxlY3RNYXRjaCA9IGZ1bmN0aW9uKGFjdGl2ZUlkeCwgZXZ0KSB7XG4gICAgICAgICAgdmFyIGRlYm91bmNlID0gc2NvcGUuZGVib3VuY2UoKTtcbiAgICAgICAgICBpZiAoYW5ndWxhci5pc051bWJlcihkZWJvdW5jZSkgfHwgYW5ndWxhci5pc09iamVjdChkZWJvdW5jZSkpIHtcbiAgICAgICAgICAgICQkZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHNjb3BlLnNlbGVjdCh7YWN0aXZlSWR4OiBhY3RpdmVJZHgsIGV2dDogZXZ0fSk7XG4gICAgICAgICAgICB9LCBhbmd1bGFyLmlzTnVtYmVyKGRlYm91bmNlKSA/IGRlYm91bmNlIDogZGVib3VuY2VbJ2RlZmF1bHQnXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjb3BlLnNlbGVjdCh7YWN0aXZlSWR4OiBhY3RpdmVJZHgsIGV2dDogZXZ0fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1dKVxuXG4gIC5kaXJlY3RpdmUoJ3VpYlR5cGVhaGVhZE1hdGNoJywgWyckdGVtcGxhdGVSZXF1ZXN0JywgJyRjb21waWxlJywgJyRwYXJzZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZVJlcXVlc3QsICRjb21waWxlLCAkcGFyc2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgaW5kZXg6ICc9JyxcbiAgICAgICAgbWF0Y2g6ICc9JyxcbiAgICAgICAgcXVlcnk6ICc9J1xuICAgICAgfSxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICB2YXIgdHBsVXJsID0gJHBhcnNlKGF0dHJzLnRlbXBsYXRlVXJsKShzY29wZS4kcGFyZW50KSB8fCAndWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtbWF0Y2guaHRtbCc7XG4gICAgICAgICR0ZW1wbGF0ZVJlcXVlc3QodHBsVXJsKS50aGVuKGZ1bmN0aW9uKHRwbENvbnRlbnQpIHtcbiAgICAgICAgICB2YXIgdHBsRWwgPSBhbmd1bGFyLmVsZW1lbnQodHBsQ29udGVudC50cmltKCkpO1xuICAgICAgICAgIGVsZW1lbnQucmVwbGFjZVdpdGgodHBsRWwpO1xuICAgICAgICAgICRjb21waWxlKHRwbEVsKShzY29wZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dKVxuXG4gIC5maWx0ZXIoJ3VpYlR5cGVhaGVhZEhpZ2hsaWdodCcsIFsnJHNjZScsICckaW5qZWN0b3InLCAnJGxvZycsIGZ1bmN0aW9uKCRzY2UsICRpbmplY3RvciwgJGxvZykge1xuICAgIHZhciBpc1Nhbml0aXplUHJlc2VudDtcbiAgICBpc1Nhbml0aXplUHJlc2VudCA9ICRpbmplY3Rvci5oYXMoJyRzYW5pdGl6ZScpO1xuXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnZXhwKHF1ZXJ5VG9Fc2NhcGUpIHtcbiAgICAgIC8vIFJlZ2V4OiBjYXB0dXJlIHRoZSB3aG9sZSBxdWVyeSBzdHJpbmcgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGUgc3RyaW5nIHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1hdGNoXG4gICAgICAvLyB0aGUgcmVzdWx0cywgZm9yIGV4YW1wbGUgaWYgdGhlIGNhcHR1cmUgaXMgXCJhXCIgdGhlIHJlc3VsdCB3aWxsIGJlIFxcYVxuICAgICAgcmV0dXJuIHF1ZXJ5VG9Fc2NhcGUucmVwbGFjZSgvKFsuPyorXiRbXFxdXFxcXCgpe318LV0pL2csICdcXFxcJDEnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb250YWluc0h0bWwobWF0Y2hJdGVtKSB7XG4gICAgICByZXR1cm4gLzwuKj4vZy50ZXN0KG1hdGNoSXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG1hdGNoSXRlbSwgcXVlcnkpIHtcbiAgICAgIGlmICghaXNTYW5pdGl6ZVByZXNlbnQgJiYgY29udGFpbnNIdG1sKG1hdGNoSXRlbSkpIHtcbiAgICAgICAgJGxvZy53YXJuKCdVbnNhZmUgdXNlIG9mIHR5cGVhaGVhZCBwbGVhc2UgdXNlIG5nU2FuaXRpemUnKTsgLy8gV2FybiB0aGUgdXNlciBhYm91dCB0aGUgZGFuZ2VyXG4gICAgICB9XG4gICAgICBtYXRjaEl0ZW0gPSBxdWVyeSA/ICgnJyArIG1hdGNoSXRlbSkucmVwbGFjZShuZXcgUmVnRXhwKGVzY2FwZVJlZ2V4cChxdWVyeSksICdnaScpLCAnPHN0cm9uZz4kJjwvc3Ryb25nPicpIDogbWF0Y2hJdGVtOyAvLyBSZXBsYWNlcyB0aGUgY2FwdHVyZSBzdHJpbmcgd2l0aCBhIHRoZSBzYW1lIHN0cmluZyBpbnNpZGUgb2YgYSBcInN0cm9uZ1wiIHRhZ1xuICAgICAgaWYgKCFpc1Nhbml0aXplUHJlc2VudCkge1xuICAgICAgICBtYXRjaEl0ZW0gPSAkc2NlLnRydXN0QXNIdG1sKG1hdGNoSXRlbSk7IC8vIElmICRzYW5pdGl6ZSBpcyBub3QgcHJlc2VudCB3ZSBwYWNrIHRoZSBzdHJpbmcgaW4gYSAkc2NlIG9iamVjdCBmb3IgdGhlIG5nLWJpbmQtaHRtbCBkaXJlY3RpdmVcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaEl0ZW07XG4gICAgfTtcbiAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLWdyb3VwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi1ncm91cC5odG1sXCIsXG4gICAgXCI8ZGl2IHJvbGU9XFxcInRhYlxcXCIgaWQ9XFxcInt7OjpoZWFkaW5nSWR9fVxcXCIgYXJpYS1zZWxlY3RlZD1cXFwie3tpc09wZW59fVxcXCIgY2xhc3M9XFxcInBhbmVsLWhlYWRpbmdcXFwiIG5nLWtleXByZXNzPVxcXCJ0b2dnbGVPcGVuKCRldmVudClcXFwiPlxcblwiICtcbiAgICBcIiAgPGg0IGNsYXNzPVxcXCJwYW5lbC10aXRsZVxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxhIHJvbGU9XFxcImJ1dHRvblxcXCIgZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIiBocmVmIGFyaWEtZXhwYW5kZWQ9XFxcInt7aXNPcGVufX1cXFwiIGFyaWEtY29udHJvbHM9XFxcInt7OjpwYW5lbElkfX1cXFwiIHRhYmluZGV4PVxcXCIwXFxcIiBjbGFzcz1cXFwiYWNjb3JkaW9uLXRvZ2dsZVxcXCIgbmctY2xpY2s9XFxcInRvZ2dsZU9wZW4oKVxcXCIgdWliLWFjY29yZGlvbi10cmFuc2NsdWRlPVxcXCJoZWFkaW5nXFxcIiBuZy1kaXNhYmxlZD1cXFwiaXNEaXNhYmxlZFxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT48c3BhbiB1aWItYWNjb3JkaW9uLWhlYWRlciBuZy1jbGFzcz1cXFwieyd0ZXh0LW11dGVkJzogaXNEaXNhYmxlZH1cXFwiPnt7aGVhZGluZ319PC9zcGFuPjwvYT5cXG5cIiArXG4gICAgXCIgIDwvaDQ+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiPGRpdiBpZD1cXFwie3s6OnBhbmVsSWR9fVxcXCIgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6aGVhZGluZ0lkfX1cXFwiIGFyaWEtaGlkZGVuPVxcXCJ7eyFpc09wZW59fVxcXCIgcm9sZT1cXFwidGFicGFuZWxcXFwiIGNsYXNzPVxcXCJwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZVxcXCIgdWliLWNvbGxhcHNlPVxcXCIhaXNPcGVuXFxcIj5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcInBhbmVsLWJvZHlcXFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi5odG1sXCIsXG4gICAgXCI8ZGl2IHJvbGU9XFxcInRhYmxpc3RcXFwiIGNsYXNzPVxcXCJwYW5lbC1ncm91cFxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2FsZXJ0L2FsZXJ0Lmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbFwiLFxuICAgIFwiPGJ1dHRvbiBuZy1zaG93PVxcXCJjbG9zZWFibGVcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImNsb3NlXFxcIiBuZy1jbGljaz1cXFwiY2xvc2UoeyRldmVudDogJGV2ZW50fSlcXFwiPlxcblwiICtcbiAgICBcIiAgPHNwYW4gYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPiZ0aW1lczs8L3NwYW4+XFxuXCIgK1xuICAgIFwiICA8c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+Q2xvc2U8L3NwYW4+XFxuXCIgK1xuICAgIFwiPC9idXR0b24+XFxuXCIgK1xuICAgIFwiPGRpdiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9jYXJvdXNlbC9jYXJvdXNlbC5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJjYXJvdXNlbC1pbm5lclxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCI8YSByb2xlPVxcXCJidXR0b25cXFwiIGhyZWYgY2xhc3M9XFxcImxlZnQgY2Fyb3VzZWwtY29udHJvbFxcXCIgbmctY2xpY2s9XFxcInByZXYoKVxcXCIgbmctY2xhc3M9XFxcInsgZGlzYWJsZWQ6IGlzUHJldkRpc2FibGVkKCkgfVxcXCIgbmctc2hvdz1cXFwic2xpZGVzLmxlbmd0aCA+IDFcXFwiPlxcblwiICtcbiAgICBcIiAgPGkgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJmYSBmYS1jaGV2cm9uLWxlZnRcXFwiPjwvaT5cXG5cIiArXG4gICAgXCIgIDxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5wcmV2aW91czwvc3Bhbj5cXG5cIiArXG4gICAgXCI8L2E+XFxuXCIgK1xuICAgIFwiPGEgcm9sZT1cXFwiYnV0dG9uXFxcIiBocmVmIGNsYXNzPVxcXCJyaWdodCBjYXJvdXNlbC1jb250cm9sXFxcIiBuZy1jbGljaz1cXFwibmV4dCgpXFxcIiBuZy1jbGFzcz1cXFwieyBkaXNhYmxlZDogaXNOZXh0RGlzYWJsZWQoKSB9XFxcIiBuZy1zaG93PVxcXCJzbGlkZXMubGVuZ3RoID4gMVxcXCI+XFxuXCIgK1xuICAgIFwiICA8aSBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImZhIGZhLWNoZXZyb24tcmlnaHRcXFwiPjwvaT5cXG5cIiArXG4gICAgXCIgIDxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5uZXh0PC9zcGFuPlxcblwiICtcbiAgICBcIjwvYT5cXG5cIiArXG4gICAgXCI8b2wgY2xhc3M9XFxcImNhcm91c2VsLWluZGljYXRvcnNcXFwiIG5nLXNob3c9XFxcInNsaWRlcy5sZW5ndGggPiAxXFxcIj5cXG5cIiArXG4gICAgXCIgIDxsaSBuZy1yZXBlYXQ9XFxcInNsaWRlIGluIHNsaWRlcyB8IG9yZGVyQnk6aW5kZXhPZlNsaWRlIHRyYWNrIGJ5ICRpbmRleFxcXCIgbmctY2xhc3M9XFxcInsgYWN0aXZlOiBpc0FjdGl2ZShzbGlkZSkgfVxcXCIgbmctY2xpY2s9XFxcInNlbGVjdChzbGlkZSlcXFwiPlxcblwiICtcbiAgICBcIiAgICA8c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+c2xpZGUge3sgJGluZGV4ICsgMSB9fSBvZiB7eyBzbGlkZXMubGVuZ3RoIH19PHNwYW4gbmctaWY9XFxcImlzQWN0aXZlKHNsaWRlKVxcXCI+LCBjdXJyZW50bHkgYWN0aXZlPC9zcGFuPjwvc3Bhbj5cXG5cIiArXG4gICAgXCIgIDwvbGk+XFxuXCIgK1xuICAgIFwiPC9vbD5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2Nhcm91c2VsL3NsaWRlLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbFwiLFxuICAgIFwiPGRpdiBuZy1zd2l0Y2g9XFxcImRhdGVwaWNrZXJNb2RlXFxcIj5cXG5cIiArXG4gICAgXCIgIDxkaXYgdWliLWRheXBpY2tlciBuZy1zd2l0Y2gtd2hlbj1cXFwiZGF5XFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcInVpYi1kYXlwaWNrZXJcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIiAgPGRpdiB1aWItbW9udGhwaWNrZXIgbmctc3dpdGNoLXdoZW49XFxcIm1vbnRoXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcInVpYi1tb250aHBpY2tlclxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiICA8ZGl2IHVpYi15ZWFycGlja2VyIG5nLXN3aXRjaC13aGVuPVxcXCJ5ZWFyXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcInVpYi15ZWFycGlja2VyXFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF5Lmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXkuaHRtbFwiLFxuICAgIFwiPHRhYmxlIHJvbGU9XFxcImdyaWRcXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnVuaXF1ZUlkfX0tdGl0bGVcXFwiIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cXFwie3thY3RpdmVEYXRlSWR9fVxcXCI+XFxuXCIgK1xuICAgIFwiICA8dGhlYWQ+XFxuXCIgK1xuICAgIFwiICAgIDx0cj5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtbGVmdCB1aWItbGVmdFxcXCIgbmctY2xpY2s9XFxcIm1vdmUoLTEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZmEgZmEtY2hldnJvbi1sZWZ0XFxcIj48L2k+PHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPnByZXZpb3VzPC9zcGFuPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoIGNvbHNwYW49XFxcInt7Ojo1ICsgc2hvd1dlZWtzfX1cXFwiPjxidXR0b24gaWQ9XFxcInt7Ojp1bmlxdWVJZH19LXRpdGxlXFxcIiByb2xlPVxcXCJoZWFkaW5nXFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCIgYXJpYS1hdG9taWM9XFxcInRydWVcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gdWliLXRpdGxlXFxcIiBuZy1jbGljaz1cXFwidG9nZ2xlTW9kZSgpXFxcIiBuZy1kaXNhYmxlZD1cXFwiZGF0ZXBpY2tlck1vZGUgPT09IG1heE1vZGVcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PHN0cm9uZz57e3RpdGxlfX08L3N0cm9uZz48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1yaWdodCB1aWItcmlnaHRcXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKDEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZmEgZmEtY2hldnJvbi1yaWdodFxcXCI+PC9pPjxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5uZXh0PC9zcGFuPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICAgIDx0cj5cXG5cIiArXG4gICAgXCIgICAgICA8dGggbmctaWY9XFxcInNob3dXZWVrc1xcXCIgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgIDx0aCBuZy1yZXBlYXQ9XFxcImxhYmVsIGluIDo6bGFiZWxzIHRyYWNrIGJ5ICRpbmRleFxcXCIgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj48c21hbGwgYXJpYS1sYWJlbD1cXFwie3s6OmxhYmVsLmZ1bGx9fVxcXCI+e3s6OmxhYmVsLmFiYnJ9fTwvc21hbGw+PC90aD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgIDwvdGhlYWQ+XFxuXCIgK1xuICAgIFwiICA8dGJvZHk+XFxuXCIgK1xuICAgIFwiICAgIDx0ciBjbGFzcz1cXFwidWliLXdlZWtzXFxcIiBuZy1yZXBlYXQ9XFxcInJvdyBpbiByb3dzIHRyYWNrIGJ5ICRpbmRleFxcXCIgcm9sZT1cXFwicm93XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctaWY9XFxcInNob3dXZWVrc1xcXCIgY2xhc3M9XFxcInRleHQtY2VudGVyIGg2XFxcIj48ZW0+e3sgd2Vla051bWJlcnNbJGluZGV4XSB9fTwvZW0+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctcmVwZWF0PVxcXCJkdCBpbiByb3dcXFwiIGNsYXNzPVxcXCJ1aWItZGF5IHRleHQtY2VudGVyXFxcIiByb2xlPVxcXCJncmlkY2VsbFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgIGlkPVxcXCJ7ezo6ZHQudWlkfX1cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICBuZy1jbGFzcz1cXFwiOjpkdC5jdXN0b21DbGFzc1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIHVpYi1pcy1jbGFzcz1cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgJ2J0bi1pbmZvJyBmb3Igc2VsZWN0ZWREdCxcXG5cIiArXG4gICAgXCIgICAgICAgICAgICAnYWN0aXZlJyBmb3IgYWN0aXZlRHRcXG5cIiArXG4gICAgXCIgICAgICAgICAgICBvbiBkdFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgbmctY2xpY2s9XFxcInNlbGVjdChkdC5kYXRlKVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgbmctZGlzYWJsZWQ9XFxcIjo6ZHQuZGlzYWJsZWRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCI+PHNwYW4gbmctY2xhc3M9XFxcIjo6eyd0ZXh0LW11dGVkJzogZHQuc2Vjb25kYXJ5LCAndGV4dC1pbmZvJzogZHQuY3VycmVudH1cXFwiPnt7OjpkdC5sYWJlbH19PC9zcGFuPjwvYnV0dG9uPlxcblwiICtcbiAgICBcIiAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3Rib2R5PlxcblwiICtcbiAgICBcIjwvdGFibGU+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL21vbnRoLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9tb250aC5odG1sXCIsXG4gICAgXCI8dGFibGUgcm9sZT1cXFwiZ3JpZFxcXCIgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6dW5pcXVlSWR9fS10aXRsZVxcXCIgYXJpYS1hY3RpdmVkZXNjZW5kYW50PVxcXCJ7e2FjdGl2ZURhdGVJZH19XFxcIj5cXG5cIiArXG4gICAgXCIgIDx0aGVhZD5cXG5cIiArXG4gICAgXCIgICAgPHRyPlxcblwiICtcbiAgICBcIiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1sZWZ0IHVpYi1sZWZ0XFxcIiBuZy1jbGljaz1cXFwibW92ZSgtMSlcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PGkgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJmYSBmYS1jaGV2cm9uLWxlZnRcXFwiPjwvaT48c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+cHJldmlvdXM8L3NwYW4+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGggY29sc3Bhbj1cXFwie3s6OnllYXJIZWFkZXJDb2xzcGFufX1cXFwiPjxidXR0b24gaWQ9XFxcInt7Ojp1bmlxdWVJZH19LXRpdGxlXFxcIiByb2xlPVxcXCJoZWFkaW5nXFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCIgYXJpYS1hdG9taWM9XFxcInRydWVcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gdWliLXRpdGxlXFxcIiBuZy1jbGljaz1cXFwidG9nZ2xlTW9kZSgpXFxcIiBuZy1kaXNhYmxlZD1cXFwiZGF0ZXBpY2tlck1vZGUgPT09IG1heE1vZGVcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PHN0cm9uZz57e3RpdGxlfX08L3N0cm9uZz48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1yaWdodCB1aWItcmlnaHRcXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKDEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZmEgZmEtY2hldnJvbi1yaWdodFxcXCI+PC9pPjxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5uZXh0PC9zcGFuPjwvaT48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90aGVhZD5cXG5cIiArXG4gICAgXCIgIDx0Ym9keT5cXG5cIiArXG4gICAgXCIgICAgPHRyIGNsYXNzPVxcXCJ1aWItbW9udGhzXFxcIiBuZy1yZXBlYXQ9XFxcInJvdyBpbiByb3dzIHRyYWNrIGJ5ICRpbmRleFxcXCIgcm9sZT1cXFwicm93XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctcmVwZWF0PVxcXCJkdCBpbiByb3dcXFwiIGNsYXNzPVxcXCJ1aWItbW9udGggdGV4dC1jZW50ZXJcXFwiIHJvbGU9XFxcImdyaWRjZWxsXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgaWQ9XFxcInt7OjpkdC51aWR9fVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgIG5nLWNsYXNzPVxcXCI6OmR0LmN1c3RvbUNsYXNzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICB1aWItaXMtY2xhc3M9XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICdidG4taW5mbycgZm9yIHNlbGVjdGVkRHQsXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgJ2FjdGl2ZScgZm9yIGFjdGl2ZUR0XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgb24gZHRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIG5nLWNsaWNrPVxcXCJzZWxlY3QoZHQuZGF0ZSlcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIG5nLWRpc2FibGVkPVxcXCI6OmR0LmRpc2FibGVkXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIG5nLWNsYXNzPVxcXCI6OnsndGV4dC1pbmZvJzogZHQuY3VycmVudH1cXFwiPnt7OjpkdC5sYWJlbH19PC9zcGFuPjwvYnV0dG9uPlxcblwiICtcbiAgICBcIiAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3Rib2R5PlxcblwiICtcbiAgICBcIjwvdGFibGU+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL3llYXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL3llYXIuaHRtbFwiLFxuICAgIFwiPHRhYmxlIHJvbGU9XFxcImdyaWRcXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnVuaXF1ZUlkfX0tdGl0bGVcXFwiIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cXFwie3thY3RpdmVEYXRlSWR9fVxcXCI+XFxuXCIgK1xuICAgIFwiICA8dGhlYWQ+XFxuXCIgK1xuICAgIFwiICAgIDx0cj5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtbGVmdCB1aWItbGVmdFxcXCIgbmctY2xpY2s9XFxcIm1vdmUoLTEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZmEgZmEtY2hldnJvbi1sZWZ0XFxcIj48L2k+PHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPnByZXZpb3VzPC9zcGFuPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoIGNvbHNwYW49XFxcInt7Ojpjb2x1bW5zIC0gMn19XFxcIj48YnV0dG9uIGlkPVxcXCJ7ezo6dW5pcXVlSWR9fS10aXRsZVxcXCIgcm9sZT1cXFwiaGVhZGluZ1xcXCIgYXJpYS1saXZlPVxcXCJhc3NlcnRpdmVcXFwiIGFyaWEtYXRvbWljPVxcXCJ0cnVlXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHVpYi10aXRsZVxcXCIgbmctY2xpY2s9XFxcInRvZ2dsZU1vZGUoKVxcXCIgbmctZGlzYWJsZWQ9XFxcImRhdGVwaWNrZXJNb2RlID09PSBtYXhNb2RlXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzdHJvbmc+e3t0aXRsZX19PC9zdHJvbmc+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtcmlnaHQgdWliLXJpZ2h0XFxcIiBuZy1jbGljaz1cXFwibW92ZSgxKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48aSBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImZhIGZhLWNoZXZyb24tcmlnaHRcXFwiPjwvaT48c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+bmV4dDwvc3Bhbj48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90aGVhZD5cXG5cIiArXG4gICAgXCIgIDx0Ym9keT5cXG5cIiArXG4gICAgXCIgICAgPHRyIGNsYXNzPVxcXCJ1aWIteWVhcnNcXFwiIG5nLXJlcGVhdD1cXFwicm93IGluIHJvd3MgdHJhY2sgYnkgJGluZGV4XFxcIiByb2xlPVxcXCJyb3dcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1yZXBlYXQ9XFxcImR0IGluIHJvd1xcXCIgY2xhc3M9XFxcInVpYi15ZWFyIHRleHQtY2VudGVyXFxcIiByb2xlPVxcXCJncmlkY2VsbFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgIGlkPVxcXCJ7ezo6ZHQudWlkfX1cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICBuZy1jbGFzcz1cXFwiOjpkdC5jdXN0b21DbGFzc1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgdWliLWlzLWNsYXNzPVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgICAnYnRuLWluZm8nIGZvciBzZWxlY3RlZER0LFxcblwiICtcbiAgICBcIiAgICAgICAgICAgICdhY3RpdmUnIGZvciBhY3RpdmVEdFxcblwiICtcbiAgICBcIiAgICAgICAgICAgIG9uIGR0XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICBuZy1jbGljaz1cXFwic2VsZWN0KGR0LmRhdGUpXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICBuZy1kaXNhYmxlZD1cXFwiOjpkdC5kaXNhYmxlZFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3BhbiBuZy1jbGFzcz1cXFwiOjp7J3RleHQtaW5mbyc6IGR0LmN1cnJlbnR9XFxcIj57ezo6ZHQubGFiZWx9fTwvc3Bhbj48L2J1dHRvbj5cXG5cIiArXG4gICAgXCIgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90Ym9keT5cXG5cIiArXG4gICAgXCI8L3RhYmxlPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlclBvcHVwL3BvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlclBvcHVwL3BvcHVwLmh0bWxcIixcbiAgICBcIjx1bCByb2xlPVxcXCJwcmVzZW50YXRpb25cXFwiIGNsYXNzPVxcXCJ1aWItZGF0ZXBpY2tlci1wb3B1cCBkcm9wZG93bi1tZW51IHVpYi1wb3NpdGlvbi1tZWFzdXJlXFxcIiBkcm9wZG93bi1uZXN0ZWQgbmctaWY9XFxcImlzT3BlblxcXCIgbmcta2V5ZG93bj1cXFwia2V5ZG93bigkZXZlbnQpXFxcIiBuZy1jbGljaz1cXFwiJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXFxcIj5cXG5cIiArXG4gICAgXCIgIDxsaSBuZy10cmFuc2NsdWRlPjwvbGk+XFxuXCIgK1xuICAgIFwiICA8bGkgbmctaWY9XFxcInNob3dCdXR0b25CYXJcXFwiIGNsYXNzPVxcXCJ1aWItYnV0dG9uLWJhclxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxzcGFuIGNsYXNzPVxcXCJidG4tZ3JvdXAgcHVsbC1sZWZ0XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tc20gYnRuLWluZm8gdWliLWRhdGVwaWNrZXItY3VycmVudFxcXCIgbmctY2xpY2s9XFxcInNlbGVjdCgndG9kYXknLCAkZXZlbnQpXFxcIiBuZy1kaXNhYmxlZD1cXFwiaXNEaXNhYmxlZCgndG9kYXknKVxcXCI+e3sgZ2V0VGV4dCgnY3VycmVudCcpIH19PC9idXR0b24+XFxuXCIgK1xuICAgIFwiICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXNtIGJ0bi1kYW5nZXIgdWliLWNsZWFyXFxcIiBuZy1jbGljaz1cXFwic2VsZWN0KG51bGwsICRldmVudClcXFwiPnt7IGdldFRleHQoJ2NsZWFyJykgfX08L2J1dHRvbj5cXG5cIiArXG4gICAgXCIgICAgPC9zcGFuPlxcblwiICtcbiAgICBcIiAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tc20gYnRuLXN1Y2Nlc3MgcHVsbC1yaWdodCB1aWItY2xvc2VcXFwiIG5nLWNsaWNrPVxcXCJjbG9zZSgkZXZlbnQpXFxcIj57eyBnZXRUZXh0KCdjbG9zZScpIH19PC9idXR0b24+XFxuXCIgK1xuICAgIFwiICA8L2xpPlxcblwiICtcbiAgICBcIjwvdWw+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9tb2RhbC93aW5kb3cuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9tb2RhbC93aW5kb3cuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwibW9kYWwtZGlhbG9nIHt7c2l6ZSA/ICdtb2RhbC0nICsgc2l6ZSA6ICcnfX1cXFwiPjxkaXYgY2xhc3M9XFxcIm1vZGFsLWNvbnRlbnRcXFwiIHVpYi1tb2RhbC10cmFuc2NsdWRlPjwvZGl2PjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcGFnZXIvcGFnZXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9wYWdlci9wYWdlci5odG1sXCIsXG4gICAgXCI8bGkgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkLCBwcmV2aW91czogYWxpZ259XFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHBhZ2UgLSAxLCAkZXZlbnQpXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCdwcmV2aW91cycpfX08L2E+PC9saT5cXG5cIiArXG4gICAgXCI8bGkgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9OZXh0KCl8fG5nRGlzYWJsZWQsIG5leHQ6IGFsaWdufVxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZShwYWdlICsgMSwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vTmV4dCgpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCduZXh0Jyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWxcIixcbiAgICBcIjxsaSByb2xlPVxcXCJtZW51aXRlbVxcXCIgbmctaWY9XFxcIjo6Ym91bmRhcnlMaW5rc1xcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkfVxcXCIgY2xhc3M9XFxcInBhZ2luYXRpb24tZmlyc3RcXFwiPjxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UoMSwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vUHJldmlvdXMoKXx8bmdEaXNhYmxlZFxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT57ezo6Z2V0VGV4dCgnZmlyc3QnKX19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiPGxpIHJvbGU9XFxcIm1lbnVpdGVtXFxcIiBuZy1pZj1cXFwiOjpkaXJlY3Rpb25MaW5rc1xcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkfVxcXCIgY2xhc3M9XFxcInBhZ2luYXRpb24tcHJldlxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZShwYWdlIC0gMSwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vUHJldmlvdXMoKXx8bmdEaXNhYmxlZFxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT57ezo6Z2V0VGV4dCgncHJldmlvdXMnKX19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiPGxpIHJvbGU9XFxcIm1lbnVpdGVtXFxcIiBuZy1yZXBlYXQ9XFxcInBhZ2UgaW4gcGFnZXMgdHJhY2sgYnkgJGluZGV4XFxcIiBuZy1jbGFzcz1cXFwie2FjdGl2ZTogcGFnZS5hY3RpdmUsZGlzYWJsZWQ6IG5nRGlzYWJsZWQmJiFwYWdlLmFjdGl2ZX1cXFwiIGNsYXNzPVxcXCJwYWdpbmF0aW9uLXBhZ2VcXFwiPjxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UocGFnZS5udW1iZXIsICRldmVudClcXFwiIG5nLWRpc2FibGVkPVxcXCJuZ0Rpc2FibGVkJiYhcGFnZS5hY3RpdmVcXFwiIHVpYi10YWJpbmRleC10b2dnbGU+e3twYWdlLnRleHR9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIjxsaSByb2xlPVxcXCJtZW51aXRlbVxcXCIgbmctaWY9XFxcIjo6ZGlyZWN0aW9uTGlua3NcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vTmV4dCgpfHxuZ0Rpc2FibGVkfVxcXCIgY2xhc3M9XFxcInBhZ2luYXRpb24tbmV4dFxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZShwYWdlICsgMSwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vTmV4dCgpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCduZXh0Jyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIjxsaSByb2xlPVxcXCJtZW51aXRlbVxcXCIgbmctaWY9XFxcIjo6Ym91bmRhcnlMaW5rc1xcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9OZXh0KCl8fG5nRGlzYWJsZWR9XFxcIiBjbGFzcz1cXFwicGFnaW5hdGlvbi1sYXN0XFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHRvdGFsUGFnZXMsICRldmVudClcXFwiIG5nLWRpc2FibGVkPVxcXCJub05leHQoKXx8bmdEaXNhYmxlZFxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT57ezo6Z2V0VGV4dCgnbGFzdCcpfX08L2E+PC9saT5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1odG1sLXBvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtcG9wdXAuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1hcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1pbm5lclxcXCIgbmctYmluZC1odG1sPVxcXCJjb250ZW50RXhwKClcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXBvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXBvcHVwLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInRvb2x0aXAtYXJyb3dcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIjxkaXYgY2xhc3M9XFxcInRvb2x0aXAtaW5uZXJcXFwiIG5nLWJpbmQ9XFxcImNvbnRlbnRcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXRlbXBsYXRlLXBvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXRlbXBsYXRlLXBvcHVwLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInRvb2x0aXAtYXJyb3dcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIjxkaXYgY2xhc3M9XFxcInRvb2x0aXAtaW5uZXJcXFwiXFxuXCIgK1xuICAgIFwiICB1aWItdG9vbHRpcC10ZW1wbGF0ZS10cmFuc2NsdWRlPVxcXCJjb250ZW50RXhwKClcXFwiXFxuXCIgK1xuICAgIFwiICB0b29sdGlwLXRlbXBsYXRlLXRyYW5zY2x1ZGUtc2NvcGU9XFxcIm9yaWdpblNjb3BlKClcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLWh0bWwuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItaHRtbC5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJhcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1pbm5lclxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxoMyBjbGFzcz1cXFwicG9wb3Zlci10aXRsZVxcXCIgbmctYmluZD1cXFwidWliVGl0bGVcXFwiIG5nLWlmPVxcXCJ1aWJUaXRsZVxcXCI+PC9oMz5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1jb250ZW50XFxcIiBuZy1iaW5kLWh0bWw9XFxcImNvbnRlbnRFeHAoKVxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItdGVtcGxhdGUuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItdGVtcGxhdGUuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwiYXJyb3dcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIlxcblwiICtcbiAgICBcIjxkaXYgY2xhc3M9XFxcInBvcG92ZXItaW5uZXJcXFwiPlxcblwiICtcbiAgICBcIiAgICA8aDMgY2xhc3M9XFxcInBvcG92ZXItdGl0bGVcXFwiIG5nLWJpbmQ9XFxcInVpYlRpdGxlXFxcIiBuZy1pZj1cXFwidWliVGl0bGVcXFwiPjwvaDM+XFxuXCIgK1xuICAgIFwiICAgIDxkaXYgY2xhc3M9XFxcInBvcG92ZXItY29udGVudFxcXCJcXG5cIiArXG4gICAgXCIgICAgICB1aWItdG9vbHRpcC10ZW1wbGF0ZS10cmFuc2NsdWRlPVxcXCJjb250ZW50RXhwKClcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgdG9vbHRpcC10ZW1wbGF0ZS10cmFuc2NsdWRlLXNjb3BlPVxcXCJvcmlnaW5TY29wZSgpXFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJhcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1pbm5lclxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxoMyBjbGFzcz1cXFwicG9wb3Zlci10aXRsZVxcXCIgbmctYmluZD1cXFwidWliVGl0bGVcXFwiIG5nLWlmPVxcXCJ1aWJUaXRsZVxcXCI+PC9oMz5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1jb250ZW50XFxcIiBuZy1iaW5kPVxcXCJjb250ZW50XFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1iYXJcXFwiIG5nLWNsYXNzPVxcXCJ0eXBlICYmICdwcm9ncmVzcy1iYXItJyArIHR5cGVcXFwiIHJvbGU9XFxcInByb2dyZXNzYmFyXFxcIiBhcmlhLXZhbHVlbm93PVxcXCJ7e3ZhbHVlfX1cXFwiIGFyaWEtdmFsdWVtaW49XFxcIjBcXFwiIGFyaWEtdmFsdWVtYXg9XFxcInt7bWF4fX1cXFwiIG5nLXN0eWxlPVxcXCJ7d2lkdGg6IChwZXJjZW50IDwgMTAwID8gcGVyY2VudCA6IDEwMCkgKyAnJSd9XFxcIiBhcmlhLXZhbHVldGV4dD1cXFwie3twZXJjZW50IHwgbnVtYmVyOjB9fSVcXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnRpdGxlfX1cXFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzcy5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInByb2dyZXNzXFxcIiBuZy10cmFuc2NsdWRlIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnRpdGxlfX1cXFwiPjwvZGl2PlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzc1xcXCI+XFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1iYXJcXFwiIG5nLWNsYXNzPVxcXCJ0eXBlICYmICdwcm9ncmVzcy1iYXItJyArIHR5cGVcXFwiIHJvbGU9XFxcInByb2dyZXNzYmFyXFxcIiBhcmlhLXZhbHVlbm93PVxcXCJ7e3ZhbHVlfX1cXFwiIGFyaWEtdmFsdWVtaW49XFxcIjBcXFwiIGFyaWEtdmFsdWVtYXg9XFxcInt7bWF4fX1cXFwiIG5nLXN0eWxlPVxcXCJ7d2lkdGg6IChwZXJjZW50IDwgMTAwID8gcGVyY2VudCA6IDEwMCkgKyAnJSd9XFxcIiBhcmlhLXZhbHVldGV4dD1cXFwie3twZXJjZW50IHwgbnVtYmVyOjB9fSVcXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnRpdGxlfX1cXFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9yYXRpbmcvcmF0aW5nLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvcmF0aW5nL3JhdGluZy5odG1sXCIsXG4gICAgXCI8c3BhbiBuZy1tb3VzZWxlYXZlPVxcXCJyZXNldCgpXFxcIiBuZy1rZXlkb3duPVxcXCJvbktleWRvd24oJGV2ZW50KVxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIHJvbGU9XFxcInNsaWRlclxcXCIgYXJpYS12YWx1ZW1pbj1cXFwiMFxcXCIgYXJpYS12YWx1ZW1heD1cXFwie3tyYW5nZS5sZW5ndGh9fVxcXCIgYXJpYS12YWx1ZW5vdz1cXFwie3t2YWx1ZX19XFxcIiBhcmlhLXZhbHVldGV4dD1cXFwie3t0aXRsZX19XFxcIj5cXG5cIiArXG4gICAgXCIgICAgPHNwYW4gbmctcmVwZWF0LXN0YXJ0PVxcXCJyIGluIHJhbmdlIHRyYWNrIGJ5ICRpbmRleFxcXCIgY2xhc3M9XFxcInNyLW9ubHlcXFwiPih7eyAkaW5kZXggPCB2YWx1ZSA/ICcqJyA6ICcgJyB9fSk8L3NwYW4+XFxuXCIgK1xuICAgIFwiICAgIDxpIG5nLXJlcGVhdC1lbmQgbmctbW91c2VlbnRlcj1cXFwiZW50ZXIoJGluZGV4ICsgMSlcXFwiIG5nLWNsaWNrPVxcXCJyYXRlKCRpbmRleCArIDEpXFxcIiBjbGFzcz1cXFwiZmFcXFwiIG5nLWNsYXNzPVxcXCIkaW5kZXggPCB2YWx1ZSAmJiAoci5zdGF0ZU9uIHx8ICdmYS1zdGFyJykgfHwgKHIuc3RhdGVPZmYgfHwgJ2ZhLXN0YXItZW1wdHknKVxcXCIgbmctYXR0ci10aXRsZT1cXFwie3tyLnRpdGxlfX1cXFwiPjwvaT5cXG5cIiArXG4gICAgXCI8L3NwYW4+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90YWJzL3RhYi5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3RhYnMvdGFiLmh0bWxcIixcbiAgICBcIjxsaSBuZy1jbGFzcz1cXFwiW3thY3RpdmU6IGFjdGl2ZSwgZGlzYWJsZWQ6IGRpc2FibGVkfSwgY2xhc3Nlc11cXFwiIGNsYXNzPVxcXCJ1aWItdGFiIG5hdi1pdGVtXFxcIj5cXG5cIiArXG4gICAgXCIgIDxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdCgkZXZlbnQpXFxcIiBjbGFzcz1cXFwibmF2LWxpbmtcXFwiIHVpYi10YWItaGVhZGluZy10cmFuc2NsdWRlPnt7aGVhZGluZ319PC9hPlxcblwiICtcbiAgICBcIjwvbGk+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90YWJzL3RhYnNldC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWxcIixcbiAgICBcIjxkaXY+XFxuXCIgK1xuICAgIFwiICA8dWwgY2xhc3M9XFxcIm5hdiBuYXYte3t0YWJzZXQudHlwZSB8fCAndGFicyd9fVxcXCIgbmctY2xhc3M9XFxcInsnbmF2LXN0YWNrZWQnOiB2ZXJ0aWNhbCwgJ25hdi1qdXN0aWZpZWQnOiBqdXN0aWZpZWR9XFxcIiBuZy10cmFuc2NsdWRlPjwvdWw+XFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJ0YWItY29udGVudFxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxkaXYgY2xhc3M9XFxcInRhYi1wYW5lXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgIG5nLXJlcGVhdD1cXFwidGFiIGluIHRhYnNldC50YWJzXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgIG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiB0YWJzZXQuYWN0aXZlID09PSB0YWIuaW5kZXh9XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgIHVpYi10YWItY29udGVudC10cmFuc2NsdWRlPVxcXCJ0YWJcXFwiPlxcblwiICtcbiAgICBcIiAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgIDwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdGltZXBpY2tlci90aW1lcGlja2VyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdGltZXBpY2tlci90aW1lcGlja2VyLmh0bWxcIixcbiAgICBcIjx0YWJsZSBjbGFzcz1cXFwidWliLXRpbWVwaWNrZXJcXFwiPlxcblwiICtcbiAgICBcIiAgPHRib2R5PlxcblwiICtcbiAgICBcIiAgICA8dHIgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIiBuZy1zaG93PVxcXCI6OnNob3dTcGlubmVyc1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIGNsYXNzPVxcXCJ1aWItaW5jcmVtZW50IGhvdXJzXFxcIj48YSBuZy1jbGljaz1cXFwiaW5jcmVtZW50SG91cnMoKVxcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9JbmNyZW1lbnRIb3VycygpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50SG91cnMoKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3BhbiBjbGFzcz1cXFwiZmEgZmEtY2hldnJvbi11cFxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZD4mbmJzcDs8L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBjbGFzcz1cXFwidWliLWluY3JlbWVudCBtaW51dGVzXFxcIj48YSBuZy1jbGljaz1cXFwiaW5jcmVtZW50TWludXRlcygpXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub0luY3JlbWVudE1pbnV0ZXMoKX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiIG5nLWRpc2FibGVkPVxcXCJub0luY3JlbWVudE1pbnV0ZXMoKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3BhbiBjbGFzcz1cXFwiZmEgZmEtY2hldnJvbi11cFxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93U2Vjb25kc1xcXCI+Jm5ic3A7PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiIGNsYXNzPVxcXCJ1aWItaW5jcmVtZW50IHNlY29uZHNcXFwiPjxhIG5nLWNsaWNrPVxcXCJpbmNyZW1lbnRTZWNvbmRzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vSW5jcmVtZW50U2Vjb25kcygpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50U2Vjb25kcygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJmYSBmYS1jaGV2cm9uLXVwXFxcIj48L3NwYW4+PC9hPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXNob3c9XFxcInNob3dNZXJpZGlhblxcXCI+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgICAgPHRyPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBjbGFzcz1cXFwiZm9ybS1ncm91cCB1aWItdGltZSBob3Vyc1xcXCIgbmctY2xhc3M9XFxcInsnaGFzLWVycm9yJzogaW52YWxpZEhvdXJzfVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgcGxhY2Vob2xkZXI9XFxcIkhIXFxcIiBuZy1tb2RlbD1cXFwiaG91cnNcXFwiIG5nLWNoYW5nZT1cXFwidXBkYXRlSG91cnMoKVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbCB0ZXh0LWNlbnRlclxcXCIgbmctcmVhZG9ubHk9XFxcIjo6cmVhZG9ubHlJbnB1dFxcXCIgbWF4bGVuZ3RoPVxcXCIyXFxcIiB0YWJpbmRleD1cXFwie3s6OnRhYmluZGV4fX1cXFwiIG5nLWRpc2FibGVkPVxcXCJub0luY3JlbWVudEhvdXJzKClcXFwiIG5nLWJsdXI9XFxcImJsdXIoKVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcInVpYi1zZXBhcmF0b3JcXFwiPjo8L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBjbGFzcz1cXFwiZm9ybS1ncm91cCB1aWItdGltZSBtaW51dGVzXFxcIiBuZy1jbGFzcz1cXFwieydoYXMtZXJyb3InOiBpbnZhbGlkTWludXRlc31cXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIHBsYWNlaG9sZGVyPVxcXCJNTVxcXCIgbmctbW9kZWw9XFxcIm1pbnV0ZXNcXFwiIG5nLWNoYW5nZT1cXFwidXBkYXRlTWludXRlcygpXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIHRleHQtY2VudGVyXFxcIiBuZy1yZWFkb25seT1cXFwiOjpyZWFkb25seUlucHV0XFxcIiBtYXhsZW5ndGg9XFxcIjJcXFwiIHRhYmluZGV4PVxcXCJ7ezo6dGFiaW5kZXh9fVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50TWludXRlcygpXFxcIiBuZy1ibHVyPVxcXCJibHVyKClcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXNob3c9XFxcInNob3dTZWNvbmRzXFxcIiBjbGFzcz1cXFwidWliLXNlcGFyYXRvclxcXCI+OjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIGNsYXNzPVxcXCJmb3JtLWdyb3VwIHVpYi10aW1lIHNlY29uZHNcXFwiIG5nLWNsYXNzPVxcXCJ7J2hhcy1lcnJvcic6IGludmFsaWRTZWNvbmRzfVxcXCIgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIHBsYWNlaG9sZGVyPVxcXCJTU1xcXCIgbmctbW9kZWw9XFxcInNlY29uZHNcXFwiIG5nLWNoYW5nZT1cXFwidXBkYXRlU2Vjb25kcygpXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIHRleHQtY2VudGVyXFxcIiBuZy1yZWFkb25seT1cXFwicmVhZG9ubHlJbnB1dFxcXCIgbWF4bGVuZ3RoPVxcXCIyXFxcIiB0YWJpbmRleD1cXFwie3s6OnRhYmluZGV4fX1cXFwiIG5nLWRpc2FibGVkPVxcXCJub0luY3JlbWVudFNlY29uZHMoKVxcXCIgbmctYmx1cj1cXFwiYmx1cigpXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93TWVyaWRpYW5cXFwiIGNsYXNzPVxcXCJ1aWItdGltZSBhbS1wbVxcXCI+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vVG9nZ2xlTWVyaWRpYW4oKX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgdGV4dC1jZW50ZXJcXFwiIG5nLWNsaWNrPVxcXCJ0b2dnbGVNZXJpZGlhbigpXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9Ub2dnbGVNZXJpZGlhbigpXFxcIiB0YWJpbmRleD1cXFwie3s6OnRhYmluZGV4fX1cXFwiPnt7bWVyaWRpYW59fTwvYnV0dG9uPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICAgIDx0ciBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIG5nLXNob3c9XFxcIjo6c2hvd1NwaW5uZXJzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcInVpYi1kZWNyZW1lbnQgaG91cnNcXFwiPjxhIG5nLWNsaWNrPVxcXCJkZWNyZW1lbnRIb3VycygpXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub0RlY3JlbWVudEhvdXJzKCl9XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9EZWNyZW1lbnRIb3VycygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJmYSBmYS1jaGV2cm9uLWRvd25cXFwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQ+Jm5ic3A7PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcInVpYi1kZWNyZW1lbnQgbWludXRlc1xcXCI+PGEgbmctY2xpY2s9XFxcImRlY3JlbWVudE1pbnV0ZXMoKVxcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9EZWNyZW1lbnRNaW51dGVzKCl9XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9EZWNyZW1lbnRNaW51dGVzKClcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PHNwYW4gY2xhc3M9XFxcImZhIGZhLWNoZXZyb24tZG93blxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93U2Vjb25kc1xcXCI+Jm5ic3A7PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiIGNsYXNzPVxcXCJ1aWItZGVjcmVtZW50IHNlY29uZHNcXFwiPjxhIG5nLWNsaWNrPVxcXCJkZWNyZW1lbnRTZWNvbmRzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vRGVjcmVtZW50U2Vjb25kcygpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCIgbmctZGlzYWJsZWQ9XFxcIm5vRGVjcmVtZW50U2Vjb25kcygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJmYSBmYS1jaGV2cm9uLWRvd25cXFwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd01lcmlkaWFuXFxcIj48L3RkPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90Ym9keT5cXG5cIiArXG4gICAgXCI8L3RhYmxlPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtbWF0Y2guaHRtbFwiLFxuICAgIFwiPGEgaHJlZlxcblwiICtcbiAgICBcIiAgIHRhYmluZGV4PVxcXCItMVxcXCJcXG5cIiArXG4gICAgXCIgICBuZy1iaW5kLWh0bWw9XFxcIm1hdGNoLmxhYmVsIHwgdWliVHlwZWFoZWFkSGlnaGxpZ2h0OnF1ZXJ5XFxcIlxcblwiICtcbiAgICBcIiAgIG5nLWF0dHItdGl0bGU9XFxcInt7bWF0Y2gubGFiZWx9fVxcXCI+PC9hPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtcG9wdXAuaHRtbFwiLFxuICAgIFwiPHVsIGNsYXNzPVxcXCJkcm9wZG93bi1tZW51XFxcIiBuZy1zaG93PVxcXCJpc09wZW4oKSAmJiAhbW92ZUluUHJvZ3Jlc3NcXFwiIG5nLXN0eWxlPVxcXCJ7dG9wOiBwb3NpdGlvbigpLnRvcCsncHgnLCBsZWZ0OiBwb3NpdGlvbigpLmxlZnQrJ3B4J31cXFwiIHJvbGU9XFxcImxpc3Rib3hcXFwiIGFyaWEtaGlkZGVuPVxcXCJ7eyFpc09wZW4oKX19XFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGxpIGNsYXNzPVxcXCJ1aWItdHlwZWFoZWFkLW1hdGNoXFxcIiBuZy1yZXBlYXQ9XFxcIm1hdGNoIGluIG1hdGNoZXMgdHJhY2sgYnkgJGluZGV4XFxcIiBuZy1jbGFzcz1cXFwie2FjdGl2ZTogaXNBY3RpdmUoJGluZGV4KSB9XFxcIiBuZy1tb3VzZWVudGVyPVxcXCJzZWxlY3RBY3RpdmUoJGluZGV4KVxcXCIgbmctY2xpY2s9XFxcInNlbGVjdE1hdGNoKCRpbmRleCwgJGV2ZW50KVxcXCIgcm9sZT1cXFwib3B0aW9uXFxcIiBpZD1cXFwie3s6Om1hdGNoLmlkfX1cXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGRpdiB1aWItdHlwZWFoZWFkLW1hdGNoIGluZGV4PVxcXCIkaW5kZXhcXFwiIG1hdGNoPVxcXCJtYXRjaFxcXCIgcXVlcnk9XFxcInF1ZXJ5XFxcIiB0ZW1wbGF0ZS11cmw9XFxcInRlbXBsYXRlVXJsXFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCIgICAgPC9saT5cXG5cIiArXG4gICAgXCI8L3VsPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuY2Fyb3VzZWwnKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliQ2Fyb3VzZWxDc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5uZy1hbmltYXRlLml0ZW06bm90KC5sZWZ0KTpub3QoLnJpZ2h0KXstd2Via2l0LXRyYW5zaXRpb246MHMgZWFzZS1pbi1vdXQgbGVmdDt0cmFuc2l0aW9uOjBzIGVhc2UtaW4tb3V0IGxlZnR9PC9zdHlsZT4nKTsgYW5ndWxhci4kJHVpYkNhcm91c2VsQ3NzID0gdHJ1ZTsgfSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRhdGVwaWNrZXInKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliRGF0ZXBpY2tlckNzcyAmJiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnVpYi1kYXRlcGlja2VyIC51aWItdGl0bGV7d2lkdGg6MTAwJTt9LnVpYi1kYXkgYnV0dG9uLC51aWItbW9udGggYnV0dG9uLC51aWIteWVhciBidXR0b257bWluLXdpZHRoOjEwMCU7fS51aWItbGVmdCwudWliLXJpZ2h0e3dpZHRoOjEwMCV9PC9zdHlsZT4nKTsgYW5ndWxhci4kJHVpYkRhdGVwaWNrZXJDc3MgPSB0cnVlOyB9KTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucG9zaXRpb24nKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliUG9zaXRpb25Dc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi51aWItcG9zaXRpb24tbWVhc3VyZXtkaXNwbGF5OmJsb2NrICFpbXBvcnRhbnQ7dmlzaWJpbGl0eTpoaWRkZW4gIWltcG9ydGFudDtwb3NpdGlvbjphYnNvbHV0ZSAhaW1wb3J0YW50O3RvcDotOTk5OXB4ICFpbXBvcnRhbnQ7bGVmdDotOTk5OXB4ICFpbXBvcnRhbnQ7fS51aWItcG9zaXRpb24tc2Nyb2xsYmFyLW1lYXN1cmV7cG9zaXRpb246YWJzb2x1dGUgIWltcG9ydGFudDt0b3A6LTk5OTlweCAhaW1wb3J0YW50O3dpZHRoOjUwcHggIWltcG9ydGFudDtoZWlnaHQ6NTBweCAhaW1wb3J0YW50O292ZXJmbG93OnNjcm9sbCAhaW1wb3J0YW50O30udWliLXBvc2l0aW9uLWJvZHktc2Nyb2xsYmFyLW1lYXN1cmV7b3ZlcmZsb3c6c2Nyb2xsICFpbXBvcnRhbnQ7fTwvc3R5bGU+Jyk7IGFuZ3VsYXIuJCR1aWJQb3NpdGlvbkNzcyA9IHRydWU7IH0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5kYXRlcGlja2VyUG9wdXAnKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliRGF0ZXBpY2tlcnBvcHVwQ3NzICYmIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCgnaGVhZCcpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4udWliLWRhdGVwaWNrZXItcG9wdXAuZHJvcGRvd24tbWVudXtkaXNwbGF5OmJsb2NrO2Zsb2F0Om5vbmU7bWFyZ2luOjA7fS51aWItYnV0dG9uLWJhcntwYWRkaW5nOjEwcHggOXB4IDJweDt9PC9zdHlsZT4nKTsgYW5ndWxhci4kJHVpYkRhdGVwaWNrZXJwb3B1cENzcyA9IHRydWU7IH0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50b29sdGlwJykucnVuKGZ1bmN0aW9uKCkgeyFhbmd1bGFyLiQkY3NwKCkubm9JbmxpbmVTdHlsZSAmJiAhYW5ndWxhci4kJHVpYlRvb2x0aXBDc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlt1aWItdG9vbHRpcC1wb3B1cF0udG9vbHRpcC50b3AtbGVmdCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1wb3B1cF0udG9vbHRpcC50b3AtcmlnaHQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtcG9wdXBdLnRvb2x0aXAuYm90dG9tLWxlZnQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtcG9wdXBdLnRvb2x0aXAuYm90dG9tLXJpZ2h0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLmxlZnQtdG9wID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLmxlZnQtYm90dG9tID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLnJpZ2h0LXRvcCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1wb3B1cF0udG9vbHRpcC5yaWdodC1ib3R0b20gPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtaHRtbC1wb3B1cF0udG9vbHRpcC50b3AtbGVmdCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLnRvcC1yaWdodCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLmJvdHRvbS1sZWZ0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAuYm90dG9tLXJpZ2h0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAubGVmdC10b3AgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtaHRtbC1wb3B1cF0udG9vbHRpcC5sZWZ0LWJvdHRvbSA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLnJpZ2h0LXRvcCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLnJpZ2h0LWJvdHRvbSA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cF0udG9vbHRpcC50b3AtbGVmdCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cF0udG9vbHRpcC50b3AtcmlnaHQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtdGVtcGxhdGUtcG9wdXBdLnRvb2x0aXAuYm90dG9tLWxlZnQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtdGVtcGxhdGUtcG9wdXBdLnRvb2x0aXAuYm90dG9tLXJpZ2h0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLmxlZnQtdG9wID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLmxlZnQtYm90dG9tID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLnJpZ2h0LXRvcCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cF0udG9vbHRpcC5yaWdodC1ib3R0b20gPiAudG9vbHRpcC1hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIudG9wLWxlZnQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLnRvcC1yaWdodCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIuYm90dG9tLWxlZnQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLmJvdHRvbS1yaWdodCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIubGVmdC10b3AgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLmxlZnQtYm90dG9tID4gLmFycm93LFt1aWItcG9wb3Zlci1wb3B1cF0ucG9wb3Zlci5yaWdodC10b3AgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLnJpZ2h0LWJvdHRvbSA+IC5hcnJvdyxbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3Zlci50b3AtbGVmdCA+IC5hcnJvdyxbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3Zlci50b3AtcmlnaHQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLWh0bWwtcG9wdXBdLnBvcG92ZXIuYm90dG9tLWxlZnQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLWh0bWwtcG9wdXBdLnBvcG92ZXIuYm90dG9tLXJpZ2h0ID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLmxlZnQtdG9wID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLmxlZnQtYm90dG9tID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLnJpZ2h0LXRvcCA+IC5hcnJvdyxbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3Zlci5yaWdodC1ib3R0b20gPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLnRvcC1sZWZ0ID4gLmFycm93LFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3Zlci50b3AtcmlnaHQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLmJvdHRvbS1sZWZ0ID4gLmFycm93LFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3Zlci5ib3R0b20tcmlnaHQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLmxlZnQtdG9wID4gLmFycm93LFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3Zlci5sZWZ0LWJvdHRvbSA+IC5hcnJvdyxbdWliLXBvcG92ZXItdGVtcGxhdGUtcG9wdXBdLnBvcG92ZXIucmlnaHQtdG9wID4gLmFycm93LFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3Zlci5yaWdodC1ib3R0b20gPiAuYXJyb3d7dG9wOmF1dG87Ym90dG9tOmF1dG87bGVmdDphdXRvO3JpZ2h0OmF1dG87bWFyZ2luOjA7fVt1aWItcG9wb3Zlci1wb3B1cF0ucG9wb3ZlcixbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3ZlcixbdWliLXBvcG92ZXItdGVtcGxhdGUtcG9wdXBdLnBvcG92ZXJ7ZGlzcGxheTpibG9jayAhaW1wb3J0YW50O308L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliVG9vbHRpcENzcyA9IHRydWU7IH0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50aW1lcGlja2VyJykucnVuKGZ1bmN0aW9uKCkgeyFhbmd1bGFyLiQkY3NwKCkubm9JbmxpbmVTdHlsZSAmJiAhYW5ndWxhci4kJHVpYlRpbWVwaWNrZXJDc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi51aWItdGltZSBpbnB1dHt3aWR0aDo1MHB4O308L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliVGltZXBpY2tlckNzcyA9IHRydWU7IH0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50eXBlYWhlYWQnKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliVHlwZWFoZWFkQ3NzICYmIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCgnaGVhZCcpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5bdWliLXR5cGVhaGVhZC1wb3B1cF0uZHJvcGRvd24tbWVudXtkaXNwbGF5OmJsb2NrO308L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliVHlwZWFoZWFkQ3NzID0gdHJ1ZTsgfSk7XG4iXX0=
