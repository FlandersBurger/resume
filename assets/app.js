var defaultDiacriticsRemovalMap = [{
    base: "A",
    letters: /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g
  }, {
    base: "AA",
    letters: /[\uA732]/g
  }, {
    base: "AE",
    letters: /[\u00C6\u01FC\u01E2]/g
  }, {
    base: "AO",
    letters: /[\uA734]/g
  }, {
    base: "AU",
    letters: /[\uA736]/g
  }, {
    base: "AV",
    letters: /[\uA738\uA73A]/g
  }, {
    base: "AY",
    letters: /[\uA73C]/g
  }, {
    base: "B",
    letters: /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g
  }, {
    base: "C",
    letters: /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g
  }, {
    base: "D",
    letters: /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g
  }, {
    base: "DZ",
    letters: /[\u01F1\u01C4]/g
  }, {
    base: "Dz",
    letters: /[\u01F2\u01C5]/g
  }, {
    base: "E",
    letters: /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g
  }, {
    base: "F",
    letters: /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g
  }, {
    base: "G",
    letters: /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g
  }, {
    base: "H",
    letters: /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g
  }, {
    base: "I",
    letters: /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g
  }, {
    base: "J",
    letters: /[\u004A\u24BF\uFF2A\u0134\u0248]/g
  }, {
    base: "K",
    letters: /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g
  }, {
    base: "L",
    letters: /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g
  }, {
    base: "LJ",
    letters: /[\u01C7]/g
  }, {
    base: "Lj",
    letters: /[\u01C8]/g
  }, {
    base: "M",
    letters: /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g
  }, {
    base: "N",
    letters: /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g
  }, {
    base: "NJ",
    letters: /[\u01CA]/g
  }, {
    base: "Nj",
    letters: /[\u01CB]/g
  }, {
    base: "O",
    letters: /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g
  }, {
    base: "OI",
    letters: /[\u01A2]/g
  }, {
    base: "OO",
    letters: /[\uA74E]/g
  }, {
    base: "OU",
    letters: /[\u0222]/g
  }, {
    base: "P",
    letters: /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g
  }, {
    base: "Q",
    letters: /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g
  }, {
    base: "R",
    letters: /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g
  }, {
    base: "S",
    letters: /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g
  }, {
    base: "T",
    letters: /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g
  }, {
    base: "TZ",
    letters: /[\uA728]/g
  }, {
    base: "U",
    letters: /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g
  }, {
    base: "V",
    letters: /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g
  }, {
    base: "VY",
    letters: /[\uA760]/g
  }, {
    base: "W",
    letters: /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g
  }, {
    base: "X",
    letters: /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g
  }, {
    base: "Y",
    letters: /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g
  }, {
    base: "Z",
    letters: /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g
  }, {
    base: "a",
    letters: /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
  }, {
    base: "aa",
    letters: /[\uA733]/g
  }, {
    base: "ae",
    letters: /[\u00E6\u01FD\u01E3]/g
  }, {
    base: "ao",
    letters: /[\uA735]/g
  }, {
    base: "au",
    letters: /[\uA737]/g
  }, {
    base: "av",
    letters: /[\uA739\uA73B]/g
  }, {
    base: "ay",
    letters: /[\uA73D]/g
  }, {
    base: "b",
    letters: /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g
  }, {
    base: "c",
    letters: /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
  }, {
    base: "d",
    letters: /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
  }, {
    base: "dz",
    letters: /[\u01F3\u01C6]/g
  }, {
    base: "e",
    letters: /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
  }, {
    base: "f",
    letters: /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g
  }, {
    base: "g",
    letters: /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
  }, {
    base: "h",
    letters: /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
  }, {
    base: "hv",
    letters: /[\u0195]/g
  }, {
    base: "i",
    letters: /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
  }, {
    base: "j",
    letters: /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g
  }, {
    base: "k",
    letters: /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
  }, {
    base: "l",
    letters: /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
  }, {
    base: "lj",
    letters: /[\u01C9]/g
  }, {
    base: "m",
    letters: /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g
  }, {
    base: "n",
    letters: /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
  }, {
    base: "nj",
    letters: /[\u01CC]/g
  }, {
    base: "o",
    letters: /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
  }, {
    base: "oi",
    letters: /[\u01A3]/g
  }, {
    base: "ou",
    letters: /[\u0223]/g
  }, {
    base: "oo",
    letters: /[\uA74F]/g
  }, {
    base: "p",
    letters: /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g
  }, {
    base: "q",
    letters: /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g
  }, {
    base: "r",
    letters: /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
  }, {
    base: "s",
    letters: /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
  }, {
    base: "t",
    letters: /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
  }, {
    base: "tz",
    letters: /[\uA729]/g
  }, {
    base: "u",
    letters: /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
  }, {
    base: "v",
    letters: /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g
  }, {
    base: "vy",
    letters: /[\uA761]/g
  }, {
    base: "w",
    letters: /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g
  }, {
    base: "x",
    letters: /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g
  }, {
    base: "y",
    letters: /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
  }, {
    base: "z",
    letters: /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
  }],
  domains = [".com", ".org", ".net", ".ac", ".ad", ".ae", ".af", ".ag", ".ai", ".al", ".am", ".ao", ".aq", ".ar", ".as", ".at", ".au", ".aw", ".ax", ".az", ".ba", ".bb", ".bd", ".be", ".bf", ".bg", ".bh", ".bi", ".bj", ".bm", ".bn", ".bo", ".bq", ".br", ".bs", ".bt", ".bw", ".by", ".bz", ".ca", ".cc", ".cd", ".cf", ".cg", ".ch", ".ci", ".ck", ".cl", ".cm", ".cn", ".co", ".cr", ".cu", ".cv", ".cw", ".cx", ".cy", ".cz", ".de", ".dj", ".dk", ".dm", ".do", ".dz", ".ec", ".ee", ".eg", ".eh", ".er", ".es", ".et", ".eu", ".fi", ".fj", ".fk", ".fm", ".fo", ".fr", ".ga", ".gd", ".ge", ".gf", ".gg", ".gh", ".gi", ".gl", ".gm", ".gn", ".gp", ".gq", ".gr", ".gs", ".gt", ".gu", ".gw", ".gy", ".hk", ".hm", ".hn", ".hr", ".ht", ".hu", ".id", ".ie", ".il", ".im", ".in", ".io", ".iq", ".ir", ".is", ".it", ".je", ".jm", ".jo", ".jp", ".ke", ".kg", ".kh", ".ki", ".km", ".kn", ".kp", ".kr", ".kw", ".ky", ".kz", ".la", ".lb", ".lc", ".li", ".lk", ".lr", ".ls", ".lt", ".lu", ".lv", ".ly", ".ma", ".mc", ".md", ".me", ".mg", ".mh", ".mk", ".ml", ".mm", ".mn", ".mo", ".mp", ".mq", ".mr", ".ms", ".mt", ".mu", ".mv", ".mw", ".mx", ".my", ".mz", ".na", ".nc", ".ne", ".nf", ".ng", ".ni", ".nl", ".no", ".np", ".nr", ".nu", ".nz", ".om", ".pa", ".pe", ".pf", ".pg", ".ph", ".pk", ".pl", ".pm", ".pn", ".pr", ".ps", ".pt", ".pw", ".py", ".qa", ".re", ".ro", ".rs", ".ru", ".rw", ".sa", ".sb", ".sc", ".sd", ".se", ".sg", ".sh", ".si", ".sk", ".sl", ".sm", ".sn", ".so", ".sr", ".ss", ".st", ".su", ".sv", ".sx", ".sy", ".sz", ".tc", ".td", ".tf", ".tg", ".th", ".tj", ".tk", ".tl", ".tm", ".tn", ".to", ".tr", ".tt", ".tv", ".tw", ".tz", ".ua", ".ug", ".uk", ".us", ".uy", ".uz", ".va", ".vc", ".ve", ".vg", ".vi", ".vn", ".vu", ".wf", ".ws", ".ye", ".yt", ".za", ".zm", ".zw"];
String.prototype.removeDiacritics = function () {
  return defaultDiacriticsRemovalMap.reduce((result, letter) => result.replace(letter.letters, letter.base), this);
};
const SPECIAL_CHARACTERS = "\\\\/ !?@#$%^&*()_+:.{},;\\-'``’‘\"";
String.prototype.removeSpecialCharacters = function () {
  return this.replace(new RegExp(`[${SPECIAL_CHARACTERS}]`, "gi"), "");
}, String.prototype.removeAllButLetters = function () {
  return this.toLowerCase().removeDiacritics().removeSpecialCharacters();
}, String.prototype.conceal = function (extra) {
  return this.replace(new RegExp(`[^${SPECIAL_CHARACTERS}${extra}]`, "gi"), "⁎");
}, String.prototype.capitalize = function () {
  return this.charAt(0).toUpperCase() + this.slice(1);
}, String.prototype.removeHTML = function () {
  return this.replace(">", "≻").replace("<", "≺");
}, String.prototype.angleBrackets = function () {
  return this.replace("<", "&lt;").replace(">", "&gt;");
}, String.prototype.replaceArray = function (find, replace) {
  for (var replaceString = this, i = 0; i < find.length; i++) replaceString = replaceString.replace(find[i], replace[i]);
  return replaceString;
}, String.prototype.maskURLs = function () {
  return this.replaceArray(["https://", "http://"], "nope://").replaceArray(domains, ".nope");
}, Number.prototype.makeReadable = function () {
  return this.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}, Number.prototype.makePercentage = function (decimals) {
  return decimals || (decimals = 2), `${(100 * this).toFixed(decimals)}%`;
}, Array.prototype.getRandom = function (n) {
  if (n > this.length) return this;
  const result = new Array(n);
  let len = this.length;
  const taken = new Array(len);
  for (; n--;) {
    const x = Math.floor(Math.random() * len);
    result[n] = this[x in taken ? taken[x] : x], taken[x] = --len in taken ? taken[len] : len;
  }
  return result;
};
const sortObject = (obj, direction) => {
  let arr = [];
  for (const key in obj) arr.push([key, obj[key]]);
  arr.sort((a, b) => direction ? a[1] - b[1] : b[1] - a[1]);
  let objSorted = {};
  return arr.forEach(item => objSorted[item[0]] = item[1]), objSorted;
};
angular.module("app", ["ui.router", "ui.bootstrap", "ngAnimate", "ngSanitize", "ngDragDrop", "ngTagsInput", "vcRecaptcha", "chart.js", "tc.chartjs"]), angular.module("app").config(["$stateProvider", "$urlRouterProvider", "$urlServiceProvider", "$locationProvider", function ($stateProvider, $urlRouterProvider, $urlServiceProvider, $locationProvider) {
  $urlRouterProvider.otherwise("/home"), $urlServiceProvider.config.strictMode(!1), $stateProvider.state("home", {
    url: "/home",
    templateUrl: "/home.html"
  }).state("policy", {
    url: "/policy",
    templateUrl: "/policy.html"
  }).state("print", {
    url: "/print",
    templateUrl: "/print.html"
  }).state("experience", {
    url: "/experience",
    controller: "ExperienceCtrl",
    templateUrl: "/experience.html"
  }).state("skills", {
    url: "/skills",
    controller: "SkillsCtrl",
    templateUrl: "/skills.html"
  }).state("hobbies", {
    url: "/hobbies",
    controller: "HobbiesCtrl",
    templateUrl: "/hobbies.html"
  }).state("contact", {
    url: "/contact",
    controller: "ContactCtrl",
    templateUrl: "/contact.html"
  }).state("workout", {
    url: "/workout",
    controller: "WorkoutCtrl",
    templateUrl: "/workout.html"
  }).state("posts", {
    url: "/posts",
    controller: "PostsCtrl",
    templateUrl: "/posts.html"
  }).state("profile", {
    url: "/profile",
    controller: "ProfileCtrl",
    templateUrl: "/profile.html"
  }).state("lists", {
    url: "/lists",
    controller: "ListsCtrl",
    templateUrl: "lists.html"
  }).state("prioritize", {
    url: "/prioritize",
    controller: "PrioritizeCtrl",
    templateUrl: "prioritize.html"
  }).state("bubbles", {
    url: "/bubbles",
    controller: "BubblesCtrl",
    templateUrl: "bubbles.html"
  }).state("asteroids", {
    url: "/asteroids",
    controller: "AsteroidsCtrl",
    templateUrl: "asteroids.html"
  }).state("lemmings", {
    url: "/lemmings",
    controller: "LemmingsCtrl",
    templateUrl: "lemmings.html"
  }).state("bots", {
    url: "/bots",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("tenthings", {
    url: "/tenthings",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("tenthings-admin", {
    url: "/tenthings-admin",
    controller: "TenThingsAdminCtrl",
    templateUrl: "tenthings-admin.html"
  }).state("tenthings-curate", {
    url: "/tenthings-curate",
    controller: "TenThingsCurateCtrl",
    templateUrl: "tenthings-curate.html"
  }).state("tenthings-game", {
    url: "/tenthings/:game",
    controller: "TenThingsGameCtrl",
    templateUrl: "tenthings-game.html"
  }).state("quiz-google", {
    url: "/google",
    controller: "QuizGoogleCtrl",
    templateUrl: "quizzes/google.html"
  }).state("quiz-logos", {
    url: "/logos",
    controller: "QuizLogosCtrl",
    templateUrl: "quizzes/logos.html"
  }).state("quiz-animals", {
    url: "/animals",
    controller: "QuizAnimalsCtrl",
    templateUrl: "quizzes/animals.html"
  }).state("quiz-skeletons", {
    url: "/skeletons",
    controller: "QuizSkeletonsCtrl",
    templateUrl: "quizzes/skeletons.html"
  }).state("quiz-movies", {
    url: "/movies",
    controller: "QuizMoviesCtrl",
    templateUrl: "quizzes/movies.html"
  }).state("charades", {
    url: "/charades",
    controller: "CharadesCtrl",
    templateUrl: "/charades.html"
  }), $locationProvider.html5Mode({
    enabled: !0,
    requireBase: !1
  });
}]), angular.module("app").service("WebSocketSvc", ["$rootScope", "$timeout", function ($rootScope, $timeout) {
  var connection,
    connect = function () {
      (connection = new WebSocket("https:" === window.location.protocol ? "wss://" + window.location.host : "ws://" + window.location.host)).onopen = function () {
        console.log("Websocket connected");
      }, connection.onclose = function (e) {
        console.log("Websocket closed. Reconnecting..."), $timeout(connect, 1e3);
      }, connection.onerror = function (e) {
        console.log("Error: " + e + " - State: " + connection.readyState);
      }, connection.onmessage = function (e) {
        var payload = JSON.parse(e.data);
        $rootScope.$broadcast("ws:" + payload.topic, payload.data);
      };
    };
  this.send = function (topic, data) {
    var json = JSON.stringify({
      topic,
      data
    });
    connection.send(json);
  }, this.connect = connect;
}]).run(["WebSocketSvc", function (WebSocketSvc) {
  WebSocketSvc.connect();
}]), angular.module("app").controller("AppCtrl", ["$scope", "$location", "LanguageSvc", "UserSvc", function ($scope, $location, LanguageSvc, UserSvc) {
  function login(user) {
    $scope.loggedIn || (window.localStorage.user = user._id, $scope.loggedIn = !0, $scope.currentUser = user, $scope.$broadcast("login"));
  }
  console.log("%cYou sneaky bugger!", "font: 2em sans-serif; color: DodgerBlue; text-shadow: 2px 0 0 #444, -2px 0 0 #444, 0 2px 0 #444, 0 -2px 0 #444, 1px 1px #444, -1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444;"), console.log("I'm glad you're curious whether something is popping up in here. I'm a bit of a stickler when it comes to messages in the console so I try to make sure only things I want are visible. That being said, if there is a big error here, I would really appreciate you telling me so I can get rid of it!"), console.log("The code for my resume is hosted on Github if you really want to go into all this! => https://github.com/FlandersBurger/resume"), $(window).load(function () {
    $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
  }), $scope.themeCounter = 6, $scope.today = new Date(), $scope.year = $scope.today.getFullYear(), $scope.random = Math.floor(1e6 * Math.random()), $scope.flipTheme = function () {
    $(".loading").show(), $(".content").hide(), setTimeout(function () {
      $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
    }, 800), $scope.themeCounter = $scope.themeCounter < 6 ? $scope.themeCounter + 1 : $scope.themeCounter = 1;
  }, $.getJSON("/skills.json", function (data) {
    $scope.skills = data.filter(function (skill) {
      return skill.enabled;
    });
  }), $.getJSON("/hobbies.json", function (data) {
    $scope.hobbies = data;
  }), $.getJSON("/experience.json", function (data) {
    $scope.jobs = data, $scope.jobs.forEach(function (job) {
      job.startDate = new Date(job.startDate), job.endDate && (job.endDate = new Date(job.endDate));
    });
  }), $.getJSON("/charades.json", function (data) {
    $scope.charades = data;
  }), $scope.getTimeSpan = function (job) {
    return job.startDate.getFullYear() + (job.endDate ? " - " + job.endDate.getFullYear() : " - Today");
  }, $scope.languages = LanguageSvc.languages, $scope.selectedLanguage = LanguageSvc.getLanguage(), $scope.selectLanguage = function (language) {
    $scope.selectedLanguage = LanguageSvc.setLanguage(language);
  }, $scope.hoverdiv = function (e, divid) {
    var left = e.clientX + "px",
      top = e.clientY + 20 + "px";
    document.getElementById(divid);
    return $("#" + divid).css("left", left), $("#" + divid).css("top", top), $("#" + divid).toggle(), !1;
  }, $scope.socialMedia = [{
    name: "instagram",
    url: "https://www.instagram.com/flandersburger/",
    icon: "fa-instagram"
  }, {
    name: "linkedin",
    url: "https://www.linkedin.com/in/laurent-debacker-1633a916",
    icon: "fa-linkedin"
  }, {
    name: "github",
    url: "https://github.com/FlandersBurger",
    icon: "fa-github"
  }, {
    name: "jsfiddle",
    url: "https://jsfiddle.net/user/BelgoCanadian/fiddles/",
    icon: "fa-jsfiddle"
  }, {
    name: "stackoverflow",
    url: "http://stackoverflow.com/users/1083923/belgocanadian",
    icon: "fa-stack-overflow"
  }, {
    name: "goodreads",
    url: "https://www.goodreads.com/user/show/17070010-laurent",
    icon: "fa-goodreads"
  }], window.localStorage.user && UserSvc.login(window.localStorage.user).then(function (response) {
    login(response.data);
  }), $scope.$on("login", function (_, user) {
    login(user);
  }), $scope.$on("update", function (_, user) {
    $scope.currentUser = user, $scope.currentUser.birthDate = new Date($scope.currentUser.birthDate), $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.$on("loading", function (_, user) {
    $scope.loading = !0, $("#loading-icon").show();
  }), $scope.$on("loaded", function (_, user) {
    $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.logout = function () {
    firebase.auth().signOut().then(function () {
      $scope.loggedIn = !1, window.localStorage.clear(), $scope.$broadcast("logout");
    }).catch(function (error) {});
  }, $scope.formatDate = function (date) {
    return (date = new Date(date)).getDate() + "-" + ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][date.getMonth()] + "-" + date.getFullYear();
  }, String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };
}]), angular.module("app").controller("AsteroidsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  $scope.announce = !1;
  var canvas = document.getElementById("asteroids-page"),
    ctx = canvas.getContext("2d");
  ctx.font = "30px Comic Sans MS", ctx.fillStyle = "red", ctx.textAlign = "center";
  var shots = {},
    asteroids = {},
    powerups = {},
    explosions = {},
    map = {},
    spacepics = 10,
    space = Math.floor(Math.random() * spacepics),
    powerupTypes = [{
      name: "speed",
      announcement: "Max Speed ⇧",
      cycle: {
        rows: 1,
        columns: 4,
        size: [14, 35],
        i: 0,
        direction: !0
      },
      img: new Image(),
      activate: function (spaceship) {
        spaceship.maxSpeed += 100;
      }
    }, {
      name: "cooldown",
      announcement: "Cooldown ⇩",
      cycle: {
        rows: 1,
        columns: 3,
        size: [17, 17],
        i: 0,
        direction: !0
      },
      img: new Image(),
      activate: function (spaceship) {
        spaceship.cooldown > 0 && (spaceship.cooldownTime -= 1);
      }
    }, {
      name: "range",
      announcement: "Firing Range ⇧",
      cycle: {
        rows: 4,
        columns: 1,
        size: [30, 8],
        i: 0,
        direction: !0
      },
      img: new Image(),
      activate: function (spaceship) {
        spaceship.range += 5;
      }
    }, {
      name: "shield",
      announcement: "Shield",
      cycle: {
        rows: 5,
        columns: 1,
        size: [19, 19],
        i: 0,
        direction: !0
      },
      img: new Image(),
      activate: function (spaceship) {
        spaceship.shield = !0;
      }
    }, {
      name: "nuke",
      announcement: "Nuke",
      cycle: {
        rows: 1,
        columns: 8,
        size: [15, 15],
        i: 0,
        direction: !0
      },
      img: new Image(),
      activate: function (spaceship) {
        for (var i in asteroids) asteroids[i].explode();
        spawnAsteroids(5);
      }
    }];
  powerupTypes.forEach(function (powerup, i, array) {
    array[i].img.src = "asteroids/" + powerup.name + ".png";
  });
  var spaceship,
    explosionImage = new Image();
  function evaluateKeys() {
    $scope.playing ? (map[32] && 0 === spaceship.cooldown && spaceship.shoot(), map[37] && (0 === spaceship.rotation ? spaceship.rotation = 360 : spaceship.rotation -= 3), map[39] && (360 === spaceship.rotation ? spaceship.rotation = 0 : spaceship.rotation += 3), map[38] ? spaceship.speed <= spaceship.maxSpeed && (spaceship.speed += 5) : spaceship.speed > 0 && spaceship.speed--, map[40] && spaceship.speed > 0 && (spaceship.speed -= 2)) : map[32] && ($scope.playing = !0, $scope.score = 0, space = Math.floor(Math.random() * spacepics), $scope.$apply(), spaceship = new Spaceship(), $scope.score = 0, spawnAsteroids(5), autoSpawn());
  }
  function Spaceship() {
    this.width = 50, this.height = 50, this.shield = !1, this.range = 80, this.cannon = {
      x: this.width / 2 - 4.5,
      y: this.height / 2 - .078125 * this.height
    }, this.cooldown = 0, this.cooldownTime = 20, this.position = [canvas.width / 2 - this.width / 2, canvas.height / 2 - this.height / 2], this.img = new Image(), this.img.src = "asteroids/spaceship.png", this.speed = 0, this.maxSpeed = 1e3, this.angle = 0, this.rotation = 0, this.shoot = function () {
      this.cooldown = this.cooldownTime;
      var id = Math.round(1e8 * Math.random());
      shots[id] = new Shot(id, this);
    }, this.move = function () {
      for (var i in this.shield && (ctx.beginPath(), ctx.arc(this.position[0] + this.width / 2, this.position[1] + this.height / 2, 30, 0, 2 * Math.PI), ctx.fillStyle = "rgb(35, 237, 86, 0.5)", ctx.strokeStyle = "rgb(66, 168, 36, 0.8)", ctx.lineWidth = 5, ctx.stroke(), ctx.fill()), asteroids) {
        var asteroid = asteroids[i];
        if (hit(asteroid, this)) {
          if (!this.shield) return gameOver();
          this.shield = !1, asteroid.explode();
        }
      }
      this.angle = this.rotation, this.cooldown > 0 && this.cooldown--, move(this);
    };
  }
  function Shot(id, spaceship) {
    this.id = id, this.position = [spaceship.position[0] + spaceship.cannon.x + spaceship.cannon.x * Math.cos((spaceship.rotation - 90) * Math.PI / 180), spaceship.position[1] + spaceship.cannon.y + spaceship.cannon.y * Math.sin((spaceship.rotation - 90) * Math.PI / 180)], this.width = 9, this.height = 15, this.angle = spaceship.angle, this.rotation = spaceship.rotation, this.speed = spaceship.speed + 500, this.lifespan = spaceship.range, this.img = new Image(), this.img.src = "asteroids/shot.png", this.move = function () {
      this.lifespan--, move(this);
    };
  }
  function Asteroid(id) {
    this.id = id, this.width = 50 * Math.random() + 20, this.height = this.width, this.position = getEntryPosition(this.width, this.height), this.angle = 360 * Math.random(), this.rotation = 360 * Math.random(), this.rotationSpeed = 6 * Math.random() - 3, this.speed = 300 * Math.random() + 2, this.img = new Image(), this.img.src = "asteroids/asteroid" + (Math.round(6 * Math.random()) + 1) + ".png", this.explode = function () {
      return explosions[this.id] = new Explosion(this), delete asteroids[this.id];
    }, this.move = function () {
      for (var i in this.rotation += this.rotationSpeed, this.rotation > 360 ? this.rotation = this.rotation - 360 : this.rotation < 0 && (this.rotation = 360 + this.rotation), shots) {
        var shot = shots[i];
        if (hit(shot, this)) {
          this.explode();
          var points = Math.floor((shot.speed - 500) / 10 + 70 - this.width);
          Math.floor((points + $scope.score) / 100) > Math.floor($scope.score / 100) && spawnPowerup(), $scope.score += points, $scope.$apply(), delete shots[i];
        }
      }
      move(this);
    };
  }
  function Explosion(object) {
    this.position = [object.position[0], object.position[1]], this.width = object.width, this.height = object.height, this.speed = 0, this.angle = 360 * Math.random(), this.cycle = {
      rows: 6,
      columns: 8,
      size: [256, 256],
      i: 0,
      direction: !0
    }, this.lifespan = 47, this.img = explosionImage, this.move = function () {
      this.lifespan--, move(this), this.cycle.direction ? this.cycle.i++ : this.cycle.i--;
    };
  }
  function Powerup(id) {
    this.id = id, this.powerup = powerupTypes[Math.floor(Math.random() * powerupTypes.length)], this.cycle = this.powerup.cycle, this.lifespan = 1e3, this.cycle.size[1] > this.cycle.size[0] ? (this.height = 40, this.width = Math.round(this.height / this.cycle.size[1] * this.cycle.size[0])) : (this.width = 40, this.height = Math.round(this.width / this.cycle.size[0] * this.cycle.size[1])), this.position = getEntryPosition(this.width, this.height), this.img = this.powerup.img, this.angle = 360 * Math.random(), this.speed = 150 * Math.random() + 50;
    var delay = 5;
    this.move = function () {
      return this.lifespan <= 0 ? delete powerups[this.id] : hit(spaceship, this) ? ($scope.announce = !0, $scope.announcement = this.powerup.announcement, $scope.$apply(), setTimeout(function () {
        $scope.announce = !1, $scope.$apply();
      }, 1e3), this.powerup.activate(spaceship), delete powerups[this.id]) : (this.lifespan--, move(this), void (delay <= 0 ? (this.cycle.direction ? this.cycle.i++ : this.cycle.i--, delay = 5) : delay--));
    };
  }
  function move(object) {
    if (object.position[0] += object.speed / 100 * Math.cos((object.angle - 90) * Math.PI / 180), object.position[1] += object.speed / 100 * Math.sin((object.angle - 90) * Math.PI / 180), object.position[0] > canvas.width ? object.position[0] = -object.width : object.position[0] < -object.width && (object.position[0] = canvas.width), object.position[1] > canvas.height ? object.position[1] = -object.height : object.position[1] < -object.height && (object.position[1] = canvas.height), ctx.save(), ctx.translate(object.position[0], object.position[1]), ctx.translate(object.width / 2, object.height / 2), ctx.rotate(object.rotation * Math.PI / 180), object.cycle) {
      var column = object.cycle.i % object.cycle.columns,
        row = Math.floor(object.cycle.i / object.cycle.columns);
      ctx.drawImage(object.img, object.cycle.size[0] * column, object.cycle.size[1] * row, object.cycle.size[0], object.cycle.size[1], -object.width / 2, -object.height / 2, object.width, object.height), object.cycle.i <= 0 ? (object.cycle.i = 0, object.cycle.direction = !0) : object.cycle.i >= object.cycle.columns * object.cycle.rows && (object.cycle.i = object.cycle.columns * object.cycle.rows - 1, object.cycle.direction = !1);
    } else ctx.drawImage(object.img, -object.width / 2, -object.height / 2, object.width, object.height);
    ctx.restore();
  }
  function getEntryPosition(width, height) {
    var x,
      gridX = 2 * Math.random(),
      gridY = 2 * Math.random(),
      y = 0;
    return gridX >= 1 ? (x = Math.random() * canvas.width, y = y >= 1 ? 0 - height : canvas.height) : (y = Math.random() * canvas.height, x = gridY >= 1 ? 0 - width : canvas.width), [x, y];
  }
  function hit(object1, object2) {
    return object1.position[0] < object2.position[0] + object2.width && object2.position[0] < object1.position[0] + object1.width && object1.position[1] < object2.position[1] + object2.height && object2.position[1] < object1.position[1] + object1.height;
  }
  function autoSpawn() {
    if (Object.keys(asteroids).length < 200) {
      var id = Math.round(1e8 * Math.random());
      asteroids[id] = new Asteroid(id);
    }
    $scope.playing && setTimeout(function () {
      autoSpawn();
    }, $scope.score < 1e3 ? 1e3 : $scope.score < 2e3 ? 900 : $scope.score < 3e3 ? 800 : $scope.score < 4e3 ? 700 : $scope.score < 5e3 ? 600 : $scope.score < 6e3 ? 500 : $scope.score < 7e3 ? 400 : $scope.score < 8e3 ? 300 : 200);
  }
  function spawnAsteroids(amount) {
    var i = 0;
    do {
      var id = Math.round(1e8 * Math.random());
      asteroids[id] = new Asteroid(id);
    } while (i++ <= amount);
  }
  function spawnPowerup() {
    if (Object.keys(powerups).length < 3) {
      var id = Math.round(1e8 * Math.random());
      powerups[id] = new Powerup(id);
    }
  }
  function gameOver() {
    for (var i in $scope.playing = !1, asteroids) asteroids[i].explode();
    shots = {}, $scope.loggedIn ? $scope.currentUser.highscore.asteroids < $scope.score && ($scope.currentUser.highscore.asteroids = $scope.score, GameSvc.setHighscore("asteroids", $scope.currentUser._id, $scope.score)) : $scope.highscore < $scope.score && ($scope.highscore = $scope.score);
  }
  function resizeCanvas() {
    console.log(window.innerWidth), canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }
  explosionImage.src = "asteroids/explosion.png", window.addEventListener("keydown", function (e) {
    map[e.keyCode || e.which] = !0;
  }, !0), window.addEventListener("keyup", function (e) {
    map[e.keyCode || e.which] = !1;
  }, !0), $scope.highscore = 0, window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), requestAnimationFrame(function draw() {
    for (var i in ctx.clearRect(0, 0, canvas.width, canvas.height), shots) shots[i].lifespan <= 0 ? delete shots[i] : shots[i].move();
    for (i in asteroids) asteroids[i].move();
    for (i in powerups) powerups[i].move();
    for (i in explosions) explosions[i].lifespan <= 0 ? delete explosions[i] : explosions[i].move();
    if (evaluateKeys(), $scope.playing) spaceship.move();else {
      var gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
      gradient.addColorStop("0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.25", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.5", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + ")"), gradient.addColorStop("0.75", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("1.0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), ctx.fillStyle = gradient, ctx.font = "60px Monoton", ctx.fillText("Asteroids", canvas.width / 2 - ctx.measureText("Asteroids").width / 2, canvas.height / 2), ctx.font = "20px Aldrich", ctx.fillText("Press space to start", canvas.width / 2 - ctx.measureText("Press space to start").width / 2, canvas.height / 2 + 20), ctx.fillText("Designed and developed by Laurent Debacker", canvas.width / 2 - ctx.measureText("Designed and developed by Laurent Debacker").width / 2, canvas.height - 30);
    }
    (tally += direction ? 1 : -1) > 100 ? (tally = 100, direction = !1) : tally < 0 && (tally = 0, direction = !0);
    requestAnimationFrame(draw);
  });
  var tally = 0,
    direction = !0;
  $scope.space = function () {
    return {
      backgroundImage: 'url("asteroids/space' + space + '.jpg")'
    };
  };
}]), angular.module("app").controller("BubblesCtrl", ["$scope", function ($scope) {
  var canvas = document.getElementById("bubbles-page"),
    ctx = canvas.getContext("2d"),
    bubbles = [],
    colors = ["#ffc300", "#ff5733", "#c70039", "#900c3e", "#571845"];
  function Bubble() {
    this.lifespan = 0, this.radius = 1, this.expanding = !0, this.speed = Math.round(3 * Math.random()), this.circumference = Math.round(50 * Math.random()) + 5, this.maxRadius = Math.round(200 * Math.random()) + 20, this.x = Math.round(Math.random() * canvas.width), this.y = Math.round(Math.random() * canvas.height), this.vx = Math.random() >= .5 ? 1 : -1, this.vy = Math.random() >= .5 ? 1 : -1;
  }
  requestAnimationFrame(function filterBubbles() {
    bubbles.push(new Bubble()), bubbles = bubbles.filter(function (bubble) {
      return bubble.radius === bubble.maxRadius && (bubble.expanding = !1), bubble.x += bubble.vx * bubble.speed, bubble.y += bubble.vy * bubble.speed, bubble.radius += bubble.expanding ? 1 : -1, bubble.radius > 0;
    }), ctx.clearRect(0, 0, canvas.width, canvas.height), bubbles.forEach(function (bubble) {
      colors[Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.beginPath(), ctx.arc(bubble.x, bubble.y, bubble.radius, 0, 2 * Math.PI), ctx.fillStyle = colors[Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.fill(), ctx.strokeStyle = colors[colors.length - Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.lineWidth = bubble.circumference * bubble.radius / bubble.maxRadius, ctx.stroke();
    }), requestAnimationFrame(filterBubbles);
  }), function () {
    function resizeCanvas() {
      canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 55 : 111);
    }
    window.addEventListener("resize", resizeCanvas, !1), resizeCanvas();
  }();
}]), angular.module("app").controller("CharadesCtrl", ["$scope", function ($scope) {
  $scope.selectWord = category => {
    $scope.word = $scope.charades[category][Math.floor(Math.random() * $scope.charades[category].length)], console.log($scope.word);
  };
}]), angular.module("app").controller("ContactCtrl", ["$scope", "EmailSvc", function ($scope, EmailSvc) {
  $scope.options = [{
    name: "Spam",
    text: "I am a spam bot and automatically check the first option I find!"
  }, {
    name: "Opportunitiy",
    text: "You seem to have the skills I seek, I'd like to talk about some opportunities."
  }, {
    name: "Resume",
    text: "I dig the resume, how did you make it?"
  }, {
    name: "Other",
    text: "Sumtin else!"
  }], $scope.contact = {
    email: "",
    name: "",
    phone: "",
    about: "",
    message: ""
  }, $scope.send = function () {
    $scope.sending = !0, console.log("here"), EmailSvc.send({
      email: $scope.contact.email,
      name: $scope.contact.name,
      phone: $scope.contact.phone,
      about: $scope.contact.about,
      message: $scope.contact.message
    }).then(function (response) {
      $scope.sent = !0, console.log("SUCCESS. status=%d, text=%s", response.status, response.text), console.log(response);
    }, function (err) {
      $scope.sending = !1, console.log("FAILED. error=", err);
    });
  };
}]), angular.module("app").controller("ExperienceCtrl", ["$scope", function ($scope) {
  $scope.getSkill = function (skillCode) {
    if ($scope.skills) return $scope.skills.find(function (skill) {
      return skill.code === skillCode;
    });
  };
}]), angular.module("app").controller("HobbiesCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.hobbySelectorVisible = !1, $.getJSON("https://www.reddit.com/user/belgocanadian/about/.json", function (response) {}), $scope.selectedHobby = $scope.hobbies[0], $scope.selectHobby = function (hobby) {
    $scope.selectedHobby = hobby, $scope.hobbySelectorVisible = !1;
  }, $scope.showHobby = function (value, index, array) {
    return !!value.images && value.images.length > 0;
  };
}]), angular.module("app").controller("LemmingsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  var LEFT = 0,
    RIGHT = 1,
    canvas = document.getElementById("lemmings-page"),
    ctx = canvas.getContext("2d"),
    lemmingsImage = new Image();
  lemmingsImage.src = "lemmings/lemmings.png";
  var decorImage = new Image();
  decorImage.src = "lemmings/decor.png";
  var lemmings = {},
    started = !1,
    actions = {
      walk: {
        start: [0, 0],
        end: [320, 20],
        columns: 8,
        rows: 1,
        reverse: !1
      },
      huh: {
        start: [320, 0],
        end: [640, 20],
        columns: 8,
        rows: 1,
        reverse: !0
      },
      fall: {
        start: [0, 80],
        end: [160, 100],
        columns: 4,
        rows: 1,
        reverse: !1
      },
      fly: {
        start: [160, 80],
        end: [480, 110],
        columns: 8,
        rows: 1,
        reverse: !1
      },
      stop: {
        start: [0, 120],
        end: [640, 140],
        columns: 16,
        rows: 1,
        reverse: !1
      },
      climb: {
        start: [0, 160],
        end: [640, 185],
        columns: 16,
        rows: 1,
        reverse: !1
      },
      build: {
        start: [0, 200],
        end: [640, 225],
        columns: 16,
        rows: 1,
        reverse: !1
      },
      punch: {
        start: [0, 240],
        end: [640, 300],
        columns: 16,
        rows: 2,
        reverse: !1
      },
      dig: {
        start: [0, 320],
        end: [320, 345],
        columns: 8,
        rows: 1,
        reverse: !1
      }
    };
  function Lemming(init) {
    this.position = [Math.floor(Math.random() * (canvas.width - 200)) + 100, Math.floor(Math.random() * (canvas.height - 200)) + 100], this.direction = 2 * Math.random() > 1 ? LEFT : RIGHT, this.act = function (action) {
      this.action = actions[action], this.cycle = 0, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1] - 20 * (this.action.rows - 1)) / this.action.rows, this.animation = !0;
    }, this.act(init), this.move = function () {
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), this.direction === LEFT && ctx.scale(-1, 1);
      var column = this.cycle % this.action.columns,
        row = Math.floor(this.cycle / this.action.columns);
      ctx.drawImage(lemmingsImage, this.width * column + this.action.start[0], (this.height + 20) * row + this.action.start[1], this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore(), this.action.reverse ? this.animation ? (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.animation = !this.animation, this.cycle--)) : (this.cycle--, this.cycle < 0 && (this.animation = !this.animation, this.cycle = 0)) : (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.cycle = 0));
    };
  }
  function resizeCanvas() {
    canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }
  window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), Object.keys(actions).forEach(function (action) {
    lemmings[Math.round(1e8 * Math.random())] = new Lemming(action);
  });
  let hatch = new function () {
    this.position = [20, 20], this.action = {
      start: [0, 0],
      end: [82, 500],
      columns: 1,
      rows: 10
    }, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1]) / this.action.rows, this.cycle = 0, this.open = function () {
      var column, row;
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), started ? (column = this.cycle % this.action.columns, row = Math.floor(this.cycle / this.action.columns), this.cycle < 9 && this.cycle++) : (column = 0, row = 0), ctx.drawImage(decorImage, this.width * column + this.action.start[0], this.height * row + this.action.start[1] - 1, this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore();
    };
  }();
  !function draw() {
    if (ctx.clearRect(0, 0, canvas.width, canvas.height), started) for (var i in lemmings) lemmings[i].move();else ctx.beginPath(), ctx.font = "40px Monoton", ctx.lineWidth = "10", ctx.strokeStyle = "blue", ctx.rect(15, canvas.height - 45, ctx.measureText("Start").width + 20, ctx.measureText("Start").height + canvas.height - 45), ctx.fill(), ctx.fillText("Start", 20, canvas.height - 50);
    hatch.open(), started = !0, setTimeout(function () {
      draw();
    }, 150);
  }();
}]), angular.module("app").controller("ListsCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.showCategory = !0, $scope.init = function () {
    CategoriesSvc.getCategories().then(function (response) {
      for (var i in $scope.categories = response.data, $scope.tasks = [], $scope.categories) for (var j in $scope.categories[i].tasks) $scope.tasks.push({
        category: $scope.categories[i].name,
        task: $scope.categories[i].tasks[j].name
      });
    });
  }, $scope.selectCategory = function (category) {
    for (var i in $scope.selectedCategory = category, $scope.selectedTasks = [], $scope.selectableTasks = [], $scope.selectedCategory.tasks) $scope.selectableTasks.push($scope.selectedCategory.tasks[i]);
    $scope.showCategory = !1, $scope.enteredCategory = "";
  }, $scope.newCategory = function (category) {
    for (var found = !1, i = 0; i < $scope.categories.length; i++) $scope.categories[i].name === category && ($scope.selectCategory($scope.categories[i]), found = !0);
    found || CategoriesSvc.addCategory({
      category
    }).then(function (category) {
      $scope.init(), $scope.selectCategory(category);
    }), $scope.enteredCategory = "";
  }, $scope.newTask = function (task) {
    var found = !1;
    for (var i in $scope.selectedCategory.tasks) $scope.selectedCategory.tasks[i].name === task && (found = !0, $scope.selectTask($scope.selectedCategory.tasks[i]));
    found || CategoriesSvc.addTask($scope.selectedCategory.name, {
      task
    }).then(function () {
      $scope.selectedCategory.tasks.push({
        name: task
      }), $scope.addTask($scope.selectedTasks, $scope.selectedCategory.tasks[$scope.selectedCategory.tasks.length - 1]);
    }), $scope.enteredTask = "";
  }, $scope.selectTask = function (task) {
    $scope.addTask($scope.selectedTasks, task), $scope.removeTask($scope.selectableTasks, task), $scope.enteredTask = "";
  }, $scope.unselectTask = function (task) {
    $scope.addTask($scope.selectableTasks, task), $scope.removeTask($scope.selectedTasks, task);
  }, $scope.addTask = function (taskList, task) {
    taskList.push(task);
  }, $scope.removeTask = function (taskList, task) {
    taskList.splice(taskList.indexOf(task), 1);
  }, $scope.startPrioritizing = function () {
    CategoriesSvc.setPriorityList($scope.selectedTasks), $location.path("/prioritize");
  }, $scope.getQuestions = function () {
    if (!$scope.selectedTasks) return "";
    for (var counter = 0, i = $scope.selectedTasks.length - 1; i > 0; i--) counter += i;
    return counter;
  };
}]), angular.module("app").controller("LoginCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  var ui = new firebaseui.auth.AuthUI(firebase.auth());
  function startUI() {
    ui.start("#firebaseui-auth-container", {
      callbacks: {
        signInSuccess: function (currentUser, credential, redirectUrl) {
          return firebase.auth().currentUser.getIdToken(!0).then(function (idToken) {
            UserSvc.authenticate({
              displayName: currentUser.displayName,
              email: currentUser.email,
              photoURL: currentUser.photoURL,
              emailVerified: currentUser.emailVerified,
              idToken
            }).then(function (response) {
              $scope.$emit("login", response.data), $("#modal-login").modal("hide");
            }, function () {
              $scope.$emit("popup", {
                message: "Login Failed",
                type: "alert-danger"
              });
            });
          }).catch(function (error) {
            console.error(error);
          }), !1;
        },
        signInFailure: function (error) {
          if ("firebaseui/anonymous-upgrade-merge-conflict" != error.code) return Promise.resolve();
          var cred = error.credential;
          return firebase.auth().signInWithCredential(cred);
        },
        uiShown: function () {
          document.getElementById("loader").style.display = "none";
        }
      },
      signInSuccessUrl: "/home",
      signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID],
      signInFlow: "popup"
    });
  }
  $scope.$on("logout", function (event) {
    ui.reset(), startUI();
  }), startUI();
}]), angular.module("app").controller("PostsCtrl", ["$scope", "$filter", "PostsSvc", function ($scope, $filter, PostsSvc) {
  $scope.addPost = function () {
    $scope.postBody && PostsSvc.create({
      body: $scope.postBody
    }).then(function (post) {
      $scope.postBody = null;
    });
  }, PostsSvc.fetch().then(function (response) {
    $scope.posts = response.data;
  }), $scope.$on("ws:new_post", function (_, post) {
    $scope.$apply(function () {
      PostsSvc.getPost(post).then(function (response) {
        $scope.posts.unshift(response.data);
      });
    });
  });
}]), angular.module("app").controller("PrioritizeCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.priorityList = CategoriesSvc.getPriorityList(), $scope.priorityList ? ($scope.selectedQuestion = 1, $scope.currentQuestion = 1, $scope.done = !1) : $location.path("/lists"), $scope.makeChoice = function (choice) {
    for (var i in $scope.priorityList) $scope.priorityList[i].id === $scope.selectedQuestion && ($scope.priorityList[i].choice = 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice);
    $scope.selectedQuestion === $scope.currentQuestion && ($scope.currentQuestion = $scope.currentQuestion === $scope.priorityList.length ? 1 : $scope.currentQuestion + 1), $scope.selectedQuestion = $scope.currentQuestion;
    var found = !1;
    for (i in $scope.priorityList) if ("" === $scope.priorityList[i].choice) {
      found = !0;
      break;
    }
    found || ($("#prioritizeChoices").hide(300), $scope.done = !0);
  }, $scope.getButtonValue = function (choice) {
    if (!$scope.priorityList) return "";
    for (var i = 0; i < $scope.priorityList.length; i++) if ($scope.priorityList[i].id === $scope.selectedQuestion) return 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice;
  }, $scope.selectQuestion = function (question) {
    $scope.selectedQuestion = question;
  }, $scope.getFilteredPriorityList = function () {
    return $scope.priorityList ? $scope.priorityList.sort(function (a, b) {
      return a.id - b.id;
    }).filter(function (question) {
      return "" !== question.choice || question.id === $scope.currentQuestion;
    }) : [];
  }, $scope.getChoicesMade = function () {
    if (!$scope.priorityList) return "";
    var choicesMade = 0;
    for (var i in $scope.priorityList) "" !== $scope.priorityList[i].choice && choicesMade++;
    return choicesMade;
  }, $scope.getButtonClass = function (choice) {
    if (!$scope.priorityList) return "";
    for (var i in $scope.priorityList) if ($scope.priorityList[i].id === $scope.selectedQuestion) return "" === $scope.priorityList[i].choice ? "btn-primary" : 1 === choice ? $scope.priorityList[i].firstChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger" : $scope.priorityList[i].secondChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger";
  }, $scope.showChoices = function () {
    $("#prioritizeChoices").show(1e3), $("#reviewChoices").hide();
  }, $scope.chartClick = function (event) {
    $scope.chart && console.log($scope.chart.getSegmentsAtEvent(event));
  }, $scope.showResults = function () {
    for (var i in $scope.data = [], $scope.options = {
      responsive: !0,
      segmentShowStroke: !0,
      segmentStrokeColor: "#fff",
      segmentStrokeWidth: 2,
      percentageInnerCutout: 0,
      animationSteps: 100,
      animationEasing: "easeOutBounce",
      animateRotate: !0,
      animateScale: !1,
      legendTemplate: '<h3 class="tc-chart-js-legend" style="padding:5px"><% for (var i=0; i<segments.length; i++){%><div class="label" style="float:left;margin:5px;background-color:<%=segments[i].fillColor%>"><%if(segments[i].label){%><%=segments[i].label%><%}%></div><%}%></h3>'
    }, CategoriesSvc.choices) for (var j in CategoriesSvc.choices[i].votes = 0, $scope.priorityList) CategoriesSvc.choices[i].name === $scope.priorityList[j].choice && CategoriesSvc.choices[i].votes++;
    for (i in CategoriesSvc.choices.sort(function (a, b) {
      return a.votes < b.votes;
    }), CategoriesSvc.choices) $scope.data.push({
      value: CategoriesSvc.choices[i].votes,
      label: CategoriesSvc.choices[i].name
    });
    $("#prioritizeResult").hide(), $("#prioritizeChoices").hide(), $("#priorityResults").show(1e3);
  };
}]), angular.module("app").controller("ProfileCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  $scope.currentUser ? ($("#sex-indicator").offset({
    left: $scope.currentUser.gender.sex / 200 * $("#sex").width() + $("#sex").offset().left
  }), $("#identity-indicator").offset({
    left: $scope.currentUser.gender.identity / 200 * $("#identity").width() + $("#identity").offset().left
  })) : $location.path("/"), $scope.sexes = ["Male", "FtM Male", "Intersex", "MtF Female", "Female"], $scope.identities = ["Man", "Bigender", "Pangender", "Agender", "Polygender", "Genderfluid", "Genderqueer", "Queer", "Woman"], $scope.dateOptions = {
    maxDate: new Date(),
    minDate: new Date(1900, 1, 1),
    initDate: new Date(2e3, 1, 1),
    datepickerMode: "year"
  }, $scope.gender = function (array, percentage) {
    return array[Math.round(percentage / 200 * (array.length - 1))];
  }, $scope.startSlider = function () {}, $scope.dragSlider = function (event, ui, type) {
    $scope.currentUser.gender[type] = Math.round(($("#" + type + "-indicator").offset().left - $("#" + type).offset().left) / ($("#" + type).width() - $("#" + type + "-indicator").width()) * 200), $scope.$apply();
  }, $scope.stopSlider = function () {}, $scope.usernameToggle = !0, $scope.passwordToggle = !0, $scope.toggleUsername = function () {
    $scope.usernameToggle = !$scope.usernameToggle, $scope.newUsername = $scope.currentUser.username;
  }, $scope.togglePassword = function () {
    $scope.newPassword = null, $scope.confirmPassword = null, $scope.passwordToggle = !$scope.passwordToggle;
  }, $scope.checkPassword = function (password) {
    if (password) {
      var user = $scope.currentUser._id;
      UserSvc.checkPassword(user, password).then(function (response) {
        $scope.togglePassword();
      }, function () {
        var originalBg = $(".password").css("backgroundColor");
        $(".password").animate({
          backgroundColor: "#FFB6C1"
        }, 200).animate({
          backgroundColor: originalBg
        }, 200);
      });
    }
  }, $scope.changePassword = function (oldPassword, newPassword, confirmPassword) {
    if (newPassword) if (newPassword == confirmPassword) {
      var user = $scope.currentUser._id;
      UserSvc.changePassword(user, oldPassword, newPassword).then(function (response) {
        $scope.$emit("popup", {
          message: "Password Changed",
          type: "alert-success"
        }), $scope.oldPassword = null, $scope.togglePassword();
      }, function () {
        $scope.$emit("popup", {
          message: "Password Change Failed",
          type: "alert-danger"
        });
      });
    } else {
      var originalBg = $(".password").css("backgroundColor");
      $(".password").animate({
        backgroundColor: "#FFB6C1"
      }, 200).animate({
        backgroundColor: originalBg
      }, 200);
    }
  }, $scope.changeUsername = function (username) {
    $scope.$emit("loading"), UserSvc.changeUsername($scope.currentUser._id, username).then(function (response) {
      $scope.$emit("update", response.data);
    }, function (response) {
      $scope.$emit("popup", {
        message: username + " already in use",
        type: "alert-danger"
      });
    });
  }, $scope.updateUser = function () {
    $scope.currentUser && ($scope.$emit("loading"), UserSvc.updateUser($scope.currentUser).then(function (response) {
      $scope.$emit("update", response.data);
    }));
  }, $scope.$watch("currentUser.flags.length", function (length) {
    $scope.updateUser();
  }), $scope.loadCountries = function ($query) {
    return [{
      name: "Andorra",
      flag: "flag-ad",
      tidbit: ""
    }, {
      name: "United Arab Emirates",
      flag: "flag-ae"
    }, {
      name: "Afghanistan",
      flag: "flag-af"
    }, {
      name: "Antigua and Barbuda",
      flag: "flag-ag"
    }, {
      name: "Anguilla",
      flag: "flag-ai"
    }, {
      name: "Albania",
      flag: "flag-al"
    }, {
      name: "Armenia",
      flag: "flag-am"
    }, {
      name: "Angola",
      flag: "flag-ao"
    }, {
      name: "Antarctica",
      flag: "flag-aq"
    }, {
      name: "Argentina",
      flag: "flag-ar"
    }, {
      name: "American Somoa",
      flag: "flag-as"
    }, {
      name: "Austria",
      flag: "flag-at"
    }, {
      name: "Australia",
      flag: "flag-au"
    }, {
      name: "Aruba",
      flag: "flag-aw"
    }, {
      name: "Åland Islands",
      flag: "flag-ax"
    }, {
      name: "Azerbaijan",
      flag: "flag-az"
    }, {
      name: "Bosnia and Herzegovina",
      flag: "flag-ba"
    }, {
      name: "Barbados",
      flag: "flag-bb"
    }, {
      name: "Bangladesh",
      flag: "flag-bd"
    }, {
      name: "Belgium",
      flag: "flag-be"
    }, {
      name: "Burkina Faso",
      flag: "flag-bf"
    }, {
      name: "Bulgaria",
      flag: "flag-bg"
    }, {
      name: "Bahrain",
      flag: "flag-bh"
    }, {
      name: "Burundi",
      flag: "flag-bi"
    }, {
      name: "Benin",
      flag: "flag-bj"
    }, {
      name: "Saint Barthélemy",
      flag: "flag-bl"
    }, {
      name: "Bermuda",
      flag: "flag-bm"
    }, {
      name: "Brunei ",
      flag: "flag-bn"
    }, {
      name: "Bolivia, Plurinational State of",
      flag: "flag-bo"
    }, {
      name: "Bonaire, Sint Eustatius and Saba",
      flag: "flag-bq"
    }, {
      name: "Brazil",
      flag: "flag-br"
    }, {
      name: "Bahamas",
      flag: "flag-bs"
    }, {
      name: "Bhutan",
      flag: "flag-bt"
    }, {
      name: "Bouvet Island",
      flag: "flag-bv"
    }, {
      name: "Botswana",
      flag: "flag-bw"
    }, {
      name: "Belarus",
      flag: "flag-by"
    }, {
      name: "Belize",
      flag: "flag-bz"
    }, {
      name: "Canada",
      flag: "flag-ca"
    }, {
      name: "Cocos (Keeling) Islands",
      flag: "flag-cc"
    }, {
      name: "Congo, the Democratic Republic of the",
      flag: "flag-cd"
    }, {
      name: "Central African Republic",
      flag: "flag-cf"
    }, {
      name: "Congo",
      flag: "flag-cg"
    }, {
      name: "Switzerland",
      flag: "flag-ch"
    }, {
      name: "Côte d'Ivoire",
      flag: "flag-ci"
    }, {
      name: "Cook Islands",
      flag: "flag-ck"
    }, {
      name: "Chile",
      flag: "flag-cl"
    }, {
      name: "Cameroon",
      flag: "flag-cm"
    }, {
      name: "China",
      flag: "flag-cn"
    }, {
      name: "Colombia",
      flag: "flag-co"
    }, {
      name: "Costa Rica",
      flag: "flag-cr"
    }, {
      name: "Cuba",
      flag: "flag-cu"
    }, {
      name: "Cabo Verde",
      flag: "flag-cv"
    }, {
      name: "Curaçao",
      flag: "flag-cw"
    }, {
      name: "Christmas Island",
      flag: "flag-cx"
    }, {
      name: "Cyprus",
      flag: "flag-cy"
    }, {
      name: "Czech Republic",
      flag: "flag-cz"
    }, {
      name: "Germany",
      flag: "flag-de"
    }, {
      name: "Djibouti",
      flag: "flag-dj"
    }, {
      name: "Denmark",
      flag: "flag-dk"
    }, {
      name: "Dominica",
      flag: "flag-dm"
    }, {
      name: "Dominican Republic",
      flag: "flag-do"
    }, {
      name: "Algeria",
      flag: "flag-dz"
    }, {
      name: "Ecuador",
      flag: "flag-ec"
    }, {
      name: "Estonia",
      flag: "flag-ee"
    }, {
      name: "Egypt",
      flag: "flag-eg"
    }, {
      name: "Western Sahara",
      flag: "flag-eh"
    }, {
      name: "Eritrea",
      flag: "flag-er"
    }, {
      name: "Spain",
      flag: "flag-es"
    }, {
      name: "Ethiopia",
      flag: "flag-et"
    }, {
      name: "Finland",
      flag: "flag-fi"
    }, {
      name: "Fiji",
      flag: "flag-fj"
    }, {
      name: "Falkland Islands (Malvinas)",
      flag: "flag-fk"
    }, {
      name: "Micronesia, Federated States of",
      flag: "flag-fm"
    }, {
      name: "Faroe Islands",
      flag: "flag-fo"
    }, {
      name: "France",
      flag: "flag-fr"
    }, {
      name: "Gabon",
      flag: "flag-ga"
    }, {
      name: "United Kingdom of Great Britain and Northern Ireland",
      flag: "flag-gb"
    }, {
      name: "Grenada",
      flag: "flag-gd"
    }, {
      name: "Georgia",
      flag: "flag-ge"
    }, {
      name: "French Guiana",
      flag: "flag-gf"
    }, {
      name: "Guernsey",
      flag: "flag-gg"
    }, {
      name: "Ghana",
      flag: "flag-gh"
    }, {
      name: "Gibraltar",
      flag: "flag-gi"
    }, {
      name: "Greenland",
      flag: "flag-gl"
    }, {
      name: "Gambia",
      flag: "flag-gm"
    }, {
      name: "Guinea",
      flag: "flag-gn"
    }, {
      name: "Guadeloupe",
      flag: "flag-gp"
    }, {
      name: "Equatorial Guinea",
      flag: "flag-gq"
    }, {
      name: "Greece",
      flag: "flag-gr"
    }, {
      name: "South Georgia and the South Sandwich Islands",
      flag: "flag-gs"
    }, {
      name: "Guatemala",
      flag: "flag-gt"
    }, {
      name: "Guam",
      flag: "flag-gu"
    }, {
      name: "Guinea-Bissau",
      flag: "flag-gw"
    }, {
      name: "Guyana",
      flag: "flag-gy"
    }, {
      name: "Hong Kong",
      flag: "flag-hk"
    }, {
      name: "Heard Island and McDonald Islands",
      flag: "flag-hm"
    }, {
      name: "Honduras",
      flag: "flag-hn"
    }, {
      name: "Croatia",
      flag: "flag-hr"
    }, {
      name: "Haiti",
      flag: "flag-ht"
    }, {
      name: "Hungary",
      flag: "flag-hu"
    }, {
      name: "Indonesia",
      flag: "flag-id"
    }, {
      name: "Ireland",
      flag: "flag-ie"
    }, {
      name: "Israel",
      flag: "flag-il"
    }, {
      name: "Isle of Man",
      flag: "flag-im"
    }, {
      name: "India",
      flag: "flag-in"
    }, {
      name: "British Indian Ocean Territory",
      flag: "flag-io"
    }, {
      name: "Iraq",
      flag: "flag-iq"
    }, {
      name: "Iran, Islamic Republic of",
      flag: "flag-ir"
    }, {
      name: "Iceland",
      flag: "flag-is"
    }, {
      name: "Italy",
      flag: "flag-it"
    }, {
      name: "Jersey",
      flag: "flag-je"
    }, {
      name: "Jamaica",
      flag: "flag-jm"
    }, {
      name: "Jordan",
      flag: "flag-jo"
    }, {
      name: "Japan",
      flag: "flag-jp"
    }, {
      name: "Kenya",
      flag: "flag-ke"
    }, {
      name: "Kyrgyzstan",
      flag: "flag-kg"
    }, {
      name: "Cambodia",
      flag: "flag-kh"
    }, {
      name: "Kiribati",
      flag: "flag-ki"
    }, {
      name: "Comoros",
      flag: "flag-km"
    }, {
      name: "Saint Kitts and Nevis",
      flag: "flag-kn"
    }, {
      name: "Korea, Democratic People's Republic of",
      flag: "flag-kp"
    }, {
      name: "Korea, Republic of",
      flag: "flag-kr"
    }, {
      name: "Kuwait",
      flag: "flag-kw"
    }, {
      name: "Cayman Islands",
      flag: "flag-ky"
    }, {
      name: "Kazakhstan",
      flag: "flag-kz"
    }, {
      name: "Lao People's Democratic Republic",
      flag: "flag-la"
    }, {
      name: "Lebanon",
      flag: "flag-lb"
    }, {
      name: "Saint Lucia",
      flag: "flag-lc"
    }, {
      name: "Liechtenstein",
      flag: "flag-li"
    }, {
      name: "Sri Lanka",
      flag: "flag-lk"
    }, {
      name: "Liberia",
      flag: "flag-lr"
    }, {
      name: "Lesotho",
      flag: "flag-ls"
    }, {
      name: "Lithuania",
      flag: "flag-lt"
    }, {
      name: "Luxembourg",
      flag: "flag-lu"
    }, {
      name: "Latvia",
      flag: "flag-lv"
    }, {
      name: "Libya",
      flag: "flag-ly"
    }, {
      name: "Morocco",
      flag: "flag-ma"
    }, {
      name: "Monaco",
      flag: "flag-mc"
    }, {
      name: "Moldova, Republic of",
      flag: "flag-md"
    }, {
      name: "Montenegro",
      flag: "flag-me"
    }, {
      name: "Saint Martin (French part)",
      flag: "flag-mf"
    }, {
      name: "Madagascar",
      flag: "flag-mg"
    }, {
      name: "Marshall Islands",
      flag: "flag-mh"
    }, {
      name: "Macedonia, the former Yugoslav Republic of",
      flag: "flag-mk"
    }, {
      name: "Mali",
      flag: "flag-ml"
    }, {
      name: "Myanmar",
      flag: "flag-mm"
    }, {
      name: "Mongolia",
      flag: "flag-mn"
    }, {
      name: "Macao",
      flag: "flag-mo"
    }, {
      name: "Northern Mariana Islands",
      flag: "flag-mp"
    }, {
      name: "Martinique",
      flag: "flag-mq"
    }, {
      name: "Mauritania",
      flag: "flag-mr"
    }, {
      name: "Montserrat",
      flag: "flag-ms"
    }, {
      name: "Malta",
      flag: "flag-mt"
    }, {
      name: "Mauritius",
      flag: "flag-mu"
    }, {
      name: "Maldives",
      flag: "flag-mv"
    }, {
      name: "Malawi",
      flag: "flag-mw"
    }, {
      name: "Mexico",
      flag: "flag-mx"
    }, {
      name: "Malaysia",
      flag: "flag-my"
    }, {
      name: "Mozambique",
      flag: "flag-mz"
    }, {
      name: "Namibia",
      flag: "flag-na"
    }, {
      name: "New Caledonia",
      flag: "flag-nc"
    }, {
      name: "Niger",
      flag: "flag-ne"
    }, {
      name: "Norfolk Island",
      flag: "flag-nf"
    }, {
      name: "Nigeria",
      flag: "flag-ng"
    }, {
      name: "Nicaragua",
      flag: "flag-ni"
    }, {
      name: "Netherlands",
      flag: "flag-nl"
    }, {
      name: "Norway",
      flag: "flag-no"
    }, {
      name: "Nepal",
      flag: "flag-np"
    }, {
      name: "Nauru",
      flag: "flag-nr"
    }, {
      name: "Niue",
      flag: "flag-nu"
    }, {
      name: "New Zealand",
      flag: "flag-nz"
    }, {
      name: "Oman",
      flag: "flag-om"
    }, {
      name: "Panama",
      flag: "flag-pa"
    }, {
      name: "Peru",
      flag: "flag-pe"
    }, {
      name: "French Polynesia",
      flag: "flag-pf"
    }, {
      name: "Papua New Guinea",
      flag: "flag-pg"
    }, {
      name: "Philippines",
      flag: "flag-ph"
    }, {
      name: "Pakistan",
      flag: "flag-pk"
    }, {
      name: "Poland",
      flag: "flag-pl"
    }, {
      name: "Saint Pierre and Miquelon",
      flag: "flag-pm"
    }, {
      name: "Pitcairn",
      flag: "flag-pn"
    }, {
      name: "Puerto Rico",
      flag: "flag-pr"
    }, {
      name: "Palestine, State of",
      flag: "flag-ps"
    }, {
      name: "Portugal",
      flag: "flag-pt"
    }, {
      name: "Palau",
      flag: "flag-pw"
    }, {
      name: "Paraguay",
      flag: "flag-py"
    }, {
      name: "Qatar",
      flag: "flag-qa"
    }, {
      name: "Réunion",
      flag: "flag-re"
    }, {
      name: "Romania",
      flag: "flag-ro"
    }, {
      name: "Serbia",
      flag: "flag-rs"
    }, {
      name: "Russian Federation",
      flag: "flag-ru"
    }, {
      name: "Rwanda",
      flag: "flag-rw"
    }, {
      name: "Saudi Arabia",
      flag: "flag-sa"
    }, {
      name: "Solomon Islands",
      flag: "flag-sb"
    }, {
      name: "Seychelles",
      flag: "flag-sc"
    }, {
      name: "Sudan",
      flag: "flag-sd"
    }, {
      name: "Sweden",
      flag: "flag-se"
    }, {
      name: "Singapore",
      flag: "flag-sg"
    }, {
      name: "Saint Helena, Ascension and Tristan da Cunha",
      flag: "flag-sh"
    }, {
      name: "Slovenia",
      flag: "flag-si"
    }, {
      name: "Svalbard and Jan Mayen",
      flag: "flag-sj"
    }, {
      name: "Slovakia",
      flag: "flag-sk"
    }, {
      name: "Sierra Leone",
      flag: "flag-sl"
    }, {
      name: "San Marino",
      flag: "flag-sm"
    }, {
      name: "Senegal",
      flag: "flag-sn"
    }, {
      name: "Somalia",
      flag: "flag-so"
    }, {
      name: "Suriname",
      flag: "flag-sr"
    }, {
      name: "South Sudan",
      flag: "flag-ss"
    }, {
      name: "Sao Tome and Principe",
      flag: "flag-st"
    }, {
      name: "El Salvador",
      flag: "flag-sv"
    }, {
      name: "Sint Maarten (Dutch part)",
      flag: "flag-sx"
    }, {
      name: "Syrian Arab Republic",
      flag: "flag-sy"
    }, {
      name: "Swaziland",
      flag: "flag-sz"
    }, {
      name: "Turks and Caicos Islands",
      flag: "flag-tc"
    }, {
      name: "Chad",
      flag: "flag-td"
    }, {
      name: "French Southern Territories",
      flag: "flag-tf"
    }, {
      name: "Togo",
      flag: "flag-tg"
    }, {
      name: "Thailand",
      flag: "flag-th"
    }, {
      name: "Tajikistan",
      flag: "flag-tj"
    }, {
      name: "Tokelau",
      flag: "flag-tk"
    }, {
      name: "Timor-Leste",
      flag: "flag-tl"
    }, {
      name: "Turkmenistan",
      flag: "flag-tm"
    }, {
      name: "Tunisia",
      flag: "flag-tn"
    }, {
      name: "Tonga",
      flag: "flag-to"
    }, {
      name: "Turkey",
      flag: "flag-tr"
    }, {
      name: "Trinidad and Tobago",
      flag: "flag-tt"
    }, {
      name: "Tuvalu",
      flag: "flag-tv"
    }, {
      name: "Taiwan, Province of China",
      flag: "flag-tw"
    }, {
      name: "Tanzania, United Republic of",
      flag: "flag-tz"
    }, {
      name: "Ukraine",
      flag: "flag-ua"
    }, {
      name: "Uganda",
      flag: "flag-ug"
    }, {
      name: "United States Minor Outlying Islands",
      flag: "flag-um"
    }, {
      name: "United States of America",
      flag: "flag-us"
    }, {
      name: "Uruguay",
      flag: "flag-uy"
    }, {
      name: "Uzbekistan",
      flag: "flag-uz"
    }, {
      name: "Holy See",
      flag: "flag-va"
    }, {
      name: "Saint Vincent and the Grenadines",
      flag: "flag-vc"
    }, {
      name: "Venezuela, Bolivarian Republic of",
      flag: "flag-ve"
    }, {
      name: "Virgin Islands, British",
      flag: "flag-vg"
    }, {
      name: "Virgin Islands, U.S.",
      flag: "flag-vi"
    }, {
      name: "Viet Nam",
      flag: "flag-vn"
    }, {
      name: "Vanuatu",
      flag: "flag-vu"
    }, {
      name: "Wallis and Futuna",
      flag: "flag-wf"
    }, {
      name: "Samoa",
      flag: "flag-ws"
    }, {
      name: "Yemen",
      flag: "flag-ye"
    }, {
      name: "Mayotte",
      flag: "flag-yt"
    }, {
      name: "South Africa",
      flag: "flag-za"
    }, {
      name: "Zambia",
      flag: "flag-zm"
    }, {
      name: "Zimbabwe",
      flag: "flag-zw"
    }].filter(function (country) {
      return -1 != country.name.toLowerCase().indexOf($query.toLowerCase());
    });
  };
}]), angular.module("app").controller("SkillsCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.selectedSkill = 0, $scope.skillsVisible = !1, $scope.projects = [], $scope.labels = ["Download Sales", "In-Store Sales", "Mail-Order Sales"], $scope.data = [300, 500, 100], $.getJSON("/experience.json", function (data) {
    $scope.projects = data.reduce((projects, employer) => employer.projects ? employer.projects.concat(projects) : projects, {});
  }), $scope.filteredProjects = () => $scope.projects.filter(project => project.skills && project.skills.includes($scope.selectedSkill.code)), $.getJSON("/skills.json", function (data) {
    const skills = data.filter(skill => skill.enabled);
    $scope.categories = skills.reduce(function (categories, skill) {
      return categories[skill.category] ? categories[skill.category].push(skill) : categories[skill.category] = [skill], categories;
    }, {}), $scope.setSelectedSkill = function (skill) {
      $scope.selectedSkill = skill, $scope.selectedSkill.chartOptions = {
        cutoutPercentage: 80,
        circumference: 2 * Math.PI,
        maintainAspectRatio: !0,
        tooltips: {
          enabled: !1
        }
      }, $scope.selectedSkill.chartStyle = {
        "background-image": "url(/skills/" + $scope.selectedSkill.image + ")",
        "background-repeat": "no-repeat",
        "background-size": "60%",
        "background-position": "50% 50%"
      };
    }, $scope.setSelectedSkill($scope.skills[0]), $scope.$apply();
  });
}]), angular.module("app").controller("TenThingsCtrl", ["$scope", "$location", "TenThingsSvc", function ($scope, $location, TenThingsSvc) {
  function flash(element) {
    const color = $(element).css("background-color");
    $(element).animate({
      backgroundColor: "#FA8072"
    }, 100, () => {
      $(element).animate({
        backgroundColor: color
      }, 100);
    });
  }
  $scope.search = {
    name: "",
    values: ""
  }, TenThingsSvc.getCategories().then(response => {
    $scope.categories = response.data, $scope.categoryFilters = $scope.categories.map(category => category), $scope.categoryFilters.push("All"), $scope.categoryFilters.push("Blank"), $scope.categoryFilter = "All", $scope.updateFilter = "all";
  }), TenThingsSvc.getLanguages().then(response => {
    $scope.languages = response.data, $scope.languageFilters = $scope.languages.map(language => language), $scope.languageFilters.push({
      name: "All",
      code: "all"
    }), $scope.languageFilter = {
      name: "All",
      code: "all"
    };
  }), $scope.keyDown = e => {
    switch ((e = e || window.event).keyCode) {
      case 9:
        $("#new-blurb").is(":focus") && setTimeout(() => {
          $scope.addValue();
        }, 100);
        break;
      case 13:
        $("#new-blurb").is(":focus") ? $scope.addValue() : $("#new-value").is(":focus") && $("#new-blurb").focus();
    }
  }, $scope.searchName = "", $scope.newItem = {}, $scope.setCategoryFilter = category => $scope.categoryFilter = category, $scope.setUserFilter = user => $scope.userFilter = user, $scope.setUpdateFilter = type => $scope.updateFilter = type, $scope.setLanguageFilter = language => $scope.languageFilter = language, $scope.filteredLists = () => $scope.lists ? $scope.lists.filter(({
    isDynamic
  }) => "all" === $scope.updateFilter || !("static" === $scope.updateFilter && !0 === isDynamic || "dynamic" === $scope.updateFilter && !1 === isDynamic)).filter(({
    categories
  }) => "All" === $scope.categoryFilter || (categories.length > 0 ? categories.indexOf($scope.categoryFilter) >= 0 : "Blank" === $scope.categoryFilter)).filter(({
    creator
  }) => "All" === $scope.userFilter || creator === $scope.userFilter).filter(({
    language
  }) => "all" === $scope.languageFilter.code || language === $scope.languageFilter.code) : [], $scope.$on("login", _ => {
    $scope.getLists();
  }), $scope.listOrder = {
    field: "date",
    direction: !0,
    label: "Creation Date"
  }, $scope.valueOrder = {
    field: "value",
    direction: !1,
    label: "Value"
  }, $scope.sort = (sorter, sortField, sortLabel) => {
    $scope[sorter].label = sortLabel, $scope[sorter].field === sortField ? $scope[sorter].direction = !$scope[sorter].direction : ($scope[sorter].field = sortField, $scope[sorter].direction = !0);
  }, $scope.getLanguageCount = language => {
    if (!$scope.lists) return 0;
    const count = $scope.lists.filter(list => ("All" === $scope.categoryFilter || list.categories.includes($scope.categoryFilter)) && ("all" === language.code || list.language === language.code) && ("All" === $scope.userFilter || list.creator === $scope.userFilter) && ("all" === $scope.updateFilter || list.isDynamic === ("dynamic" === $scope.updateFilter))).length;
    return `${count} - ${Math.round(count / $scope.lists.length * 100)}%`;
  }, $scope.getCategoryCount = category => {
    if (!$scope.lists) return 0;
    const count = $scope.lists.filter(list => !(!("All" === category || list.categories.indexOf(category) >= 0) || "all" !== $scope.languageFilter.code && list.language !== $scope.languageFilter.code || "All" !== $scope.userFilter && list.creator !== $scope.userFilter || "all" !== $scope.updateFilter && list.isDynamic !== ("dynamic" === $scope.updateFilter))).length;
    return `${count} - ${Math.round(count / $scope.lists.length * 100)}%`;
  }, $scope.getUpdateCount = type => {
    if (!$scope.lists) return 0;
    const count = $scope.lists.filter(list => "all" === type || list.isDynamic && "dynamic" === type || !list.isDynamic && "static" === type).length;
    return `${count} - ${Math.round(count / $scope.lists.length * 100)}%`;
  }, $scope.getLists = () => {
    $scope.loading || ($scope.loading = !0, TenThingsSvc.getLists().then(({
      data
    }) => {
      $scope.lists = data, $scope.userFilters = {}, $scope.userFilters.All = $scope.lists.length, $scope.userFilters = $scope.lists.sort((list1, list2) => list1.creator > list2.creator).reduce((users, {
        creator
      }) => (users[creator] || (users[creator] = 0), users[creator]++, users), $scope.userFilters), $scope.userCount = Object.keys($scope.userFilters).length, $scope.userFilters = sortObject($scope.userFilters, !1), $scope.userFilter = "All", $scope.loading = !1;
    }));
  }, $scope.selectList = list => {
    TenThingsSvc.getList(list).then(({
      data
    }) => {
      $scope.selectedList = data, $location.search("list", data._id);
    });
  }, $location.search().list && $scope.selectList({
    _id: $location.search().list
  }), $scope.selectCategory = category => {
    $scope.selectedList.category = category, $("#category-select").hide();
  }, $scope.getCategoryClass = category => $scope.selectedList && $scope.selectedList.categories.indexOf(category) >= 0 ? "btn-success" : "btn-default", $scope.toggleCategory = category => {
    const categoryIndex = $scope.selectedList.categories.indexOf(category);
    categoryIndex >= 0 ? $scope.selectedList.categories.splice(categoryIndex, 1) : $scope.selectedList.categories.push(category);
  }, $scope.selectLanguage = language => {
    $scope.selectedList.language = language.code;
    const nonEnglishIndex = $scope.selectedList.categories.indexOf("Non-English");
    "EN" !== language.code && nonEnglishIndex < 0 ? $scope.selectedList.categories.push("Non-English") : "EN" === language.code && nonEnglishIndex >= 0 && $scope.selectedList.categories.splice(nonEnglishIndex, 1);
  }, $scope.addList = () => {
    const currentLanguage = $scope.selectedList ? $scope.selectedList.language : "EN";
    $location.search("list", ""), $scope.selectedList = {
      name: "",
      creator: $scope.currentUser._id,
      date: new Date(),
      values: [],
      answers: 0,
      isDynamic: !0,
      category: "",
      categories: [],
      language: currentLanguage
    };
  }, $scope.hasDuplicate = () => $scope.selectedList && $scope.newItem.value && _.some($scope.selectedList.values, answer => answer.value.removeAllButLetters() == $scope.newItem.value.removeAllButLetters()), $scope.addValue = () => {
    $scope.newItem.value && (_.some($scope.selectedList.values, answer => answer.value.removeAllButLetters() == $scope.newItem.value.removeAllButLetters()) ? alert(`${$scope.newItem.value} is already in the list`) : ($scope.newItem.creator = $scope.currentUser._id, $scope.selectedList.values.unshift(JSON.parse(JSON.stringify($scope.newItem))), $scope.selectedList.answers++, $scope.newItem.value = "", $scope.newItem.blurb = "", $scope.selectedList.values.length >= 10 && $scope.selectedList.name && $scope.selectedList.categories.length > 0 && $scope.saveList($scope.selectedList))), $("#new-value").focus();
  }, $scope.reportList = list => {
    list.reported = !0, TenThingsSvc.reportList($scope.currentUser, list);
  }, $scope.saveList = list => {
    $scope.saving || (list.values = list.values.filter(({
      value
    }) => value), list.values.length >= 10 && list.name && list.categories.length > 0 ? ($scope.saving = !0, TenThingsSvc.saveList($scope.currentUser, list).then(({
      data
    }) => {
      if ($scope.selectedList._id) {
        for (let i = 0; i < $scope.lists.length; i++) if ($scope.lists[i]._id === data._id) {
          $scope.lists[i] = data;
          break;
        }
        $scope.selectList(list);
      } else $scope.lists.unshift(data), $scope.selectList(data);
      $scope.saving = !1;
    }, err => {
      console.error(err), $scope.saving = !1;
    })) : list.values.length < 10 ? alert("Lists must contain 10 or more values!") : list.name ? flash(".list-category") : flash("#list-name"));
  }, $scope.deleteList = list => {
    list._id ? confirm("Are you sure you want to delete this list?") && TenThingsSvc.deleteList(list).then(response => {
      $scope.getLists(), $scope.selectedList = null;
    }) : ($scope.lists = $scope.lists.filter(({
      _id
    }) => _id), $scope.selectedList = null);
  }, $scope.listButtonClass = list => {
    const values = list.values.length,
      blurbs = list.blurbs;
    return values === blurbs && list.description ? "btn-default" : 0 !== blurbs || list.description ? 0 === blurbs && list.description ? "btn-info" : "btn-primary" : "btn-warning";
  }, $scope.getMoviePics = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getMoviePics($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  }, $scope.getTVPics = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getTVPics($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  }, $scope.getActorPics = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getActorPics($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  }, $scope.getBookPics = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getBookPics($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  }, $scope.getMusicVideos = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getMusicVideos($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  }, $scope.getPics = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getPics($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  };
}]), angular.module("app").controller("TenThingsAdminCtrl", ["$scope", "TenThingsSvc", "UserSvc", function ($scope, TenThingsSvc, UserSvc) {
  $scope.$on("login", _ => {
    $scope.currentUser.admin && getUsers();
  }), $scope.order = {
    field: "username",
    reverse: !1
  }, $scope.orderBy = field => {
    $scope.order.field === field ? $scope.order.reverse = !$scope.order.reverse : $scope.order = {
      field,
      reverse: !1
    };
  }, $scope.getQueue = () => {
    $scope.loading = !0, TenThingsSvc.getQueue().then(response => {
      $scope.queue = response.data.replace("/n", "<br/>"), $scope.loading = !1;
    });
  }, $scope.getQueue(), TenThingsSvc.getPause().then(response => {
    $scope.paused = response.data, console.log($scope.paused);
  });
  const getUsers = () => {
    $scope.loading = !0, UserSvc.getUsers().then(response => {
      $scope.users = response.data.filter(user => !user.admin), $scope.loading = !1;
    });
  };
  $scope.toggleBan = user => {
    $scope.loading = !0, UserSvc.toggleBan(user._id).then(response => {
      getUsers();
    });
  }, $scope.togglePause = user => {
    TenThingsSvc.togglePause().then(response => {
      $scope.paused = response.data, console.log($scope.paused);
    });
  };
}]), angular.module("app").controller("TenThingsCurateCtrl", ["$scope", "TenThingsSvc", function ($scope, TenThingsSvc) {
  TenThingsSvc.getLanguages().then(response => {
    $scope.languages = response.data;
  }), $scope.$on("login", _ => {
    $scope.getLists();
  }), $scope.order = {
    field: "name",
    reverse: !1
  }, $scope.orderBy = field => {
    $scope.order.field === field ? $scope.order.reverse = !$scope.order.reverse : $scope.order = {
      field,
      reverse: !1
    };
  }, $scope.getLists = () => {
    $scope.loading = !0, TenThingsSvc.getLists().then(({
      data
    }) => {
      $scope.lists = data, console.log(data), $scope.loading = !1;
    });
  }, $scope.setDifficulty = (list, difficulty) => {
    list.difficulty = difficulty, TenThingsSvc.updateList({
      _id: list._id,
      difficulty
    });
  };
}]), angular.module("app").controller("TenThingsGameCtrl", ["$scope", "$stateParams", "TenThingsSvc", function ($scope, $stateParams, TenThingsSvc) {
  $scope.$on("login", _ => {
    $scope.currentUser.admin && getUsers();
  }), $stateParams.game && TenThingsSvc.getGame($stateParams.game).then(response => {
    $scope.game = response.data, console.log($scope.game);
  });
}]), angular.module("app").controller("WorkoutCtrl", ["$scope", function ($scope) {
  $scope.timeRemaining = 0, $scope.timeExercising = 30, $scope.timeResting = 10, $scope.rest = !1;
  var exercising,
    sounds = {
      on: new Audio("on.wav"),
      off: new Audio("off.wav"),
      switch: new Audio("switch.wav")
    },
    exercises = [{
      name: "Jumping Jacks",
      split: !1
    }, {
      name: "Wall Sit",
      split: !1
    }, {
      name: "Push-Up",
      split: !1
    }, {
      name: "Crunch",
      split: !1
    }, {
      name: "Step-Up",
      split: !0
    }, {
      name: "Squat",
      split: !1
    }, {
      name: "Triceps Dip",
      split: !1
    }, {
      name: "Plank",
      split: !1
    }, {
      name: "High Knees",
      split: !1
    }, {
      name: "Lunge",
      split: !1
    }, {
      name: "Push-Up with Rotation",
      split: !1
    }, {
      name: "Side Plank",
      split: !0
    }];
  $scope.progress = function () {
    return exercises.length - Math.floor($scope.timeRemaining / ($scope.timeExercising + $scope.timeResting)) + "/" + exercises.length;
  }, $scope.workout = function () {
    var excerciseTime = $scope.timeExercising + $scope.timeResting;
    $scope.timeRemaining ? (clearInterval(exercising), $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.exercise = {
      name: "",
      split: !1
    }) : ($scope.timeRemaining = exercises.length * excerciseTime, exercising = setInterval(function () {
      if ($scope.timeRemaining--, 0 === $scope.timeRemaining) return $scope.exercise = {
        name: "Finished! Congrats!",
        split: !1
      }, $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.$apply(), clearInterval(exercising);
      var currentExercise = Math.floor($scope.timeRemaining / excerciseTime),
        timer = $scope.timeRemaining - currentExercise * excerciseTime;
      $scope.timer = timer > $scope.timeExercising ? timer - $scope.timeExercising : timer, timer > $scope.timeExercising ? $scope.rest = !0 : $scope.rest = !1, $scope.exercise = exercises[exercises.length - currentExercise - 1], timer === $scope.timeExercising ? sounds.on.play() : 0 === timer ? sounds.off.play() : $scope.exercise.split && timer === Math.floor($scope.timeExercising / 2) && sounds.switch.play(), $scope.$apply();
    }, 1e3));
  };
}]), angular.module("app").directive("head", ["$rootScope", "$state", "$compile", "$interpolate", function ($rootScope, $state, $compile, $interpolate) {
  var getStyle = function (templateStyleUrl) {
    var style = {
      href: templateStyleUrl,
      rel: "stylesheet"
    };
    return style.href.match(/\.less$/) && (style.rel = "stylesheet/less"), style;
  };
  return {
    restrict: "E",
    link: function (scope, elem) {
      scope.templateStyles = [];
      var html = '<link ng-attr-rel="{{style.rel}}" ng-repeat="style in templateStyles" ng-href="{{style.href}}">';
      html = (html = html.replace(/\{\{/g, $interpolate.startSymbol())).replace(/\}\}/g, $interpolate.endSymbol()), elem.append($compile(html)(scope)), $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
        scope.templateStyles = function (state) {
          for (var states = {}; "" !== state.name;) {
            var parent = $state.get("^", state);
            states[parent.name] || (states[parent.name] = {}), state.templateStyleUrl && (states[parent.name][""] || (states[parent.name][""] = getStyle(state.templateStyleUrl))), state.views && _.forEach(state.views, function (view, key) {
              if (view.templateStyleUrl) return (key = key.split("@"))[1] ? (states[key[1]] || (states[key[1]] = {}), void (states[key[1]][key[0]] || (states[key[1]][key[0]] = getStyle(view.templateStyleUrl)))) : void (states[parent.name][key[0]] = getStyle(view.templateStyleUrl));
            }), state = parent;
          }
          var flat = [];
          return _.forEach(states, function (views) {
            _.forEach(views, function (style) {
              _.includes(flat, style) || flat.push(style);
            });
          }), flat.reverse(), flat;
        }(toState);
      });
    }
  };
}]), angular.module("app").service("CategoriesSvc", ["$http", function ($http) {
  var svc = this;
  svc.getCategories = function () {
    return $http.get("/api/categories");
  }, svc.getTasks = function (category) {
    return $http.get("/api/categories/" + category);
  }, svc.addCategory = function (category) {
    return $http.post("/api/categories/", category);
  }, svc.addTask = function (category, task) {
    return $http.post("/api/categories/" + category + "/tasks", task);
  }, svc.setPriorityList = function (list) {
    svc.choices = list, svc.priorityList = [];
    for (var i = 0; i < list.length; i++) for (var j = i + 1; j < list.length; j++) {
      var random = Math.round(Math.random());
      svc.priorityList.push({
        id: 0,
        firstChoice: list[0 === random ? i : j].name,
        secondChoice: list[0 === random ? j : i].name,
        choice: ""
      });
    }
    for (i in function (array) {
      var t,
        i,
        m = array.length;
      for (; m;) i = Math.floor(Math.random() * m--), t = array[m], array[m] = array[i], array[i] = t;
    }(svc.priorityList), svc.priorityList) svc.priorityList[i].id = i + 1;
  }, svc.getPriorityList = function (list) {
    return svc.priorityList;
  };
}]), angular.module("app").service("EmailSvc", ["$http", function ($http) {
  this.send = function (email) {
    return console.log(email), $http.post("/api/email", email);
  };
}]), angular.module("app").service("FileSvc", ["$http", function ($http) {
  this.getImages = function (folder) {
    return $http.get("/api/files/images/" + folder);
  }, this.getSounds = function (folder) {
    return $http.get("/api/files/sounds/" + folder);
  };
}]), angular.module("app").service("GameSvc", ["$http", function ($http) {
  this.getHighscore = function (game, user) {
    return $http.get("/api/games/" + game + "/" + user + "/highscore");
  }, this.setHighscore = function (game, user, score) {
    return $http.post("/api/games/" + game + "/" + user + "/highscore", {
      score
    });
  };
}]), angular.module("app").service("LanguageSvc", function () {
  var svc = this;
  svc.languages = [{
    code: "EN",
    name: "English",
    flag: "flag-icon-gb"
  }, {
    code: "NL",
    name: "Nederlands",
    flag: "flag-icon-nl"
  }, {
    code: "FR",
    name: "Français",
    flag: "flag-icon-fr"
  }], svc.text = [{
    code: "EN"
  }, {
    code: "NL"
  }, {
    code: "FR"
  }], svc.selectedLanguage = svc.languages[0], svc.setLanguage = function (language) {
    return svc.selectedLanguage = language, language;
  }, svc.getLanguage = function () {
    return svc.selectedLanguage;
  };
}), angular.module("app").service("PostsSvc", ["$http", function ($http) {
  this.fetch = function () {
    return $http.get("/api/posts");
  }, this.create = function (post) {
    return $http.post("/api/posts", post);
  }, this.getPost = function (post) {
    return $http.get("/api/posts/" + post._id);
  };
}]), angular.module("app").service("TenThingsSvc", ["$http", function ($http) {
  var svc = this;
  svc.getQueue = function () {
    return $http.get("/bots/tenthings/queue");
  }, svc.getLists = function () {
    return $http.get("/api/tenthings/lists");
  }, svc.getCategories = () => $http.get("/api/tenthings/categories"), svc.getLanguages = () => $http.get("/api/tenthings/languages"), svc.getList = function (list) {
    return $http.get("/api/tenthings/lists/" + list._id);
  }, svc.updateList = function (list) {
    return $http.post("/api/tenthings/lists/" + list._id, list);
  }, svc.saveList = function (user, list) {
    return $http.put("/api/tenthings/lists", {
      user,
      list
    });
  }, svc.reportList = function (user, list) {
    $http.get("/api/tenthings/lists/" + list._id + "/report/" + user._id);
  }, svc.deleteList = function (list) {
    return $http.delete("/api/tenthings/lists/" + list._id);
  }, svc.getMoviePics = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/movies`);
  }, svc.getTVPics = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/tv`);
  }, svc.getActorPics = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/actors`);
  }, svc.getBookPics = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/books`);
  }, svc.getMusicVideos = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/musicvideos`);
  }, svc.getPics = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/pics`);
  }, svc.getPause = function () {
    return $http.get("/api/tenthings/pause");
  }, svc.togglePause = function () {
    return $http.post("/api/tenthings/pause");
  }, svc.getGame = function (id) {
    return $http.get(`/api/tenthings/game/${id}`);
  };
}]), angular.module("app").service("UserSvc", ["$http", function ($http) {
  var svc = this;
  svc.getUser = function () {
    return $http.get("/api/users");
  }, svc.getUsers = function () {
    return $http.get("/api/users/all");
  }, svc.toggleBan = function (id) {
    return $http.get(`/api/users/ban/${id}`);
  }, svc.setToken = function (token) {
    return $http.defaults.headers.common["X-Auth"] = token, svc.getUser();
  }, svc.authenticate = function (user) {
    return $http.post("/api/users/authenticate", {
      user
    }).then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.login = function (user) {
    return $http.get("/api/users/" + user + "/login").then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.updateUser = function (user) {
    return $http.post("/api/users/" + user._id, {
      user
    }).then(function () {
      return svc.getUser();
    });
  }, svc.checkPassword = function (user, password) {
    return $http.post("/api/users/" + user + "/verification", {
      password
    });
  }, svc.changePassword = function (user, oldPassword, newPassword) {
    return $http.post("/api/users/" + user + "/password", {
      oldPassword,
      newPassword
    });
  }, svc.changeUsername = function (user, newUsername) {
    return $http.post("/api/users/" + user + "/username", {
      newUsername
    }).then(function () {
      return svc.getUser();
    });
  }, svc.logout = function () {
    window.localStorage.clear(), $http.defaults.headers.common["X-Auth"] = "";
  }, svc.createUser = function (username, password) {
    return $http.post("/api/users", {
      username,
      password
    }).then(function () {
      return svc.login(username, password);
    });
  };
}]), angular.module("app").controller("QuizAnimalsCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getSounds("animals").then(function (response) {
    $scope.animals = _.shuffle(response.data.map(animal => ({
      sound: animal,
      name: animal.substring(0, animal.indexOf(".")).replace("_", " ").capitalize()
    })));
    for (let animal of $scope.animals) animal.answers = _.shuffle([animal.name, ...getRandomAnimals(animal.name)]);
    console.log($scope.animals);
  }), $scope.guess = (animal, guess) => {
    animal.guess = guess;
  };
  const getRandomAnimals = name => _.shuffle($scope.animals.filter(animal => name !== animal.name).map(animal => animal.name)).slice(0, 5);
  $scope.getScore = () => `${$scope.animals.filter(animal => animal.name === animal.guess).length}/${$scope.animals.length}`, $scope.isScoreVisible = () => $scope.animals.filter(animal => animal.guess).length === $scope.animals.length;
}]), angular.module("app").controller("QuizGoogleCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("google").then(function (response) {
    $scope.images = response.data;
  });
}]), angular.module("app").controller("QuizLogosCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("logos").then(function (response) {
    $scope.images = response.data;
  });
}]), angular.module("app").controller("QuizMoviesCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("movies").then(function (response) {
    $scope.images = response.data;
  });
}]), angular.module("app").controller("QuizSkeletonsCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("skeletons").then(function (response) {
    $scope.animals = _.shuffle(response.data.map(animal => ({
      image: animal,
      name: animal.substring(0, animal.indexOf(".")).replace("_", " ").capitalize()
    })));
    for (let animal of $scope.animals) animal.answers = _.shuffle([animal.name, ...getRandomAnimals(animal.name)]);
    console.log($scope.animals);
  }), $scope.guess = (animal, guess) => {
    animal.guess = guess;
  };
  const getRandomAnimals = name => _.shuffle($scope.animals.filter(animal => name !== animal.name).map(animal => animal.name)).slice(0, 10);
  $scope.getScore = () => `${$scope.animals.filter(animal => animal.name === animal.guess).length}/${$scope.animals.length}`, $scope.isScoreVisible = () => $scope.animals.filter(animal => animal.guess).length === $scope.animals.length;
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3RvdHlwZXMuanMiLCJhcHAuanMiLCJtb2R1bGUuanMiLCJyb3V0ZXMuanMiLCJ3ZWJzb2NrZXRzLmpzIiwiY29udHJvbGxlcnMvYXBwLmN0cmwuanMiLCJjb250cm9sbGVycy9hc3Rlcm9pZHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2J1YmJsZXMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2NoYXJhZGVzLmN0cmwuanMiLCJjb250cm9sbGVycy9jb250YWN0LmN0cmwuanMiLCJjb250cm9sbGVycy9leHBlcmllbmNlLmN0cmwuanMiLCJjb250cm9sbGVycy9ob2JiaWVzLmN0cmwuanMiLCJjb250cm9sbGVycy9sZW1taW5ncy5jdHJsLmpzIiwiY29udHJvbGxlcnMvbGlzdHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2xvZ2luLmN0cmwuanMiLCJjb250cm9sbGVycy9wb3N0cy5jdHJsLmpzIiwiY29udHJvbGxlcnMvcHJpb3JpdGl6ZS5jdHJsLmpzIiwiY29udHJvbGxlcnMvcHJvZmlsZS5jdHJsLmpzIiwiY29udHJvbGxlcnMvc2tpbGxzLmN0cmwuanMiLCJjb250cm9sbGVycy90ZW50aGluZ3MuY3RybC5qcyIsImNvbnRyb2xsZXJzL3RlbnRoaW5nc2FkbWluLmN0cmwuanMiLCJjb250cm9sbGVycy90ZW50aGluZ3NjdXJhdGUuY3RybC5qcyIsImNvbnRyb2xsZXJzL3RlbnRoaW5nc2dhbWUuY3RybC5qcyIsImNvbnRyb2xsZXJzL3dvcmtvdXQuY3RybC5qcyIsImRpcmVjdGl2ZXMvdWktcm91dGVyLXN0eWxlcy5kaXIuanMiLCJzZXJ2aWNlcy9jYXRlZ29yaWVzLnN2Yy5qcyIsInNlcnZpY2VzL2VtYWlsLnN2Yy5qcyIsInNlcnZpY2VzL2ZpbGUuc3ZjLmpzIiwic2VydmljZXMvZ2FtZS5zdmMuanMiLCJzZXJ2aWNlcy9sYW5ndWFnZS5zdmMuanMiLCJzZXJ2aWNlcy9wb3N0cy5zdmMuanMiLCJzZXJ2aWNlcy90ZW50aGluZ3Muc3ZjLmpzIiwic2VydmljZXMvdXNlci5zdmMuanMiLCJjb250cm9sbGVycy9xdWl6emVzL2FuaW1hbHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL3F1aXp6ZXMvZ29vZ2xlLmN0cmwuanMiLCJjb250cm9sbGVycy9xdWl6emVzL2xvZ29zLmN0cmwuanMiLCJjb250cm9sbGVycy9xdWl6emVzL21vdmllcy5jdHJsLmpzIiwiY29udHJvbGxlcnMvcXVpenplcy9za2VsZXRvbnMuY3RybC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxNYXAiLCJiYXNlIiwibGV0dGVycyIsImRvbWFpbnMiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJyZW1vdmVEaWFjcml0aWNzIiwicmVkdWNlIiwicmVzdWx0IiwibGV0dGVyIiwicmVwbGFjZSIsInRoaXMiLCJTUEVDSUFMX0NIQVJBQ1RFUlMiLCJyZW1vdmVTcGVjaWFsQ2hhcmFjdGVycyIsIlJlZ0V4cCIsInJlbW92ZUFsbEJ1dExldHRlcnMiLCJ0b0xvd2VyQ2FzZSIsImNvbmNlYWwiLCJleHRyYSIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwicmVtb3ZlSFRNTCIsImFuZ2xlQnJhY2tldHMiLCJyZXBsYWNlQXJyYXkiLCJmaW5kIiwicmVwbGFjZVN0cmluZyIsImkiLCJsZW5ndGgiLCJtYXNrVVJMcyIsIk51bWJlciIsIm1ha2VSZWFkYWJsZSIsInRvU3RyaW5nIiwibWFrZVBlcmNlbnRhZ2UiLCJkZWNpbWFscyIsInRvRml4ZWQiLCJBcnJheSIsImdldFJhbmRvbSIsIm4iLCJsZW4iLCJ0YWtlbiIsIngiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJzb3J0T2JqZWN0Iiwib2JqIiwiZGlyZWN0aW9uIiwiYXJyIiwia2V5IiwicHVzaCIsInNvcnQiLCJhIiwiYiIsIm9ialNvcnRlZCIsImZvckVhY2giLCJpdGVtIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJHVybFNlcnZpY2VQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwib3RoZXJ3aXNlIiwic3RyaWN0TW9kZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiaHRtbDVNb2RlIiwiZW5hYmxlZCIsInJlcXVpcmVCYXNlIiwic2VydmljZSIsIiRyb290U2NvcGUiLCIkdGltZW91dCIsImNvbm5lY3Rpb24iLCJjb25uZWN0IiwiV2ViU29ja2V0Iiwid2luZG93IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3QiLCJvbm9wZW4iLCJjb25zb2xlIiwibG9nIiwib25jbG9zZSIsImUiLCJvbmVycm9yIiwicmVhZHlTdGF0ZSIsIm9ubWVzc2FnZSIsInBheWxvYWQiLCJKU09OIiwicGFyc2UiLCJkYXRhIiwiJGJyb2FkY2FzdCIsInRvcGljIiwic2VuZCIsImpzb24iLCJzdHJpbmdpZnkiLCJydW4iLCJXZWJTb2NrZXRTdmMiLCIkc2NvcGUiLCIkbG9jYXRpb24iLCJMYW5ndWFnZVN2YyIsIlVzZXJTdmMiLCJsb2dpbiIsInVzZXIiLCJsb2dnZWRJbiIsImxvY2FsU3RvcmFnZSIsIl9pZCIsImN1cnJlbnRVc2VyIiwiJCIsImxvYWQiLCJmYWRlT3V0IiwiZmFkZUluIiwidGhlbWVDb3VudGVyIiwidG9kYXkiLCJEYXRlIiwieWVhciIsImdldEZ1bGxZZWFyIiwiZmxpcFRoZW1lIiwic2hvdyIsImhpZGUiLCJzZXRUaW1lb3V0IiwiZ2V0SlNPTiIsInNraWxscyIsImZpbHRlciIsInNraWxsIiwiaG9iYmllcyIsImpvYnMiLCJqb2IiLCJzdGFydERhdGUiLCJlbmREYXRlIiwiY2hhcmFkZXMiLCJnZXRUaW1lU3BhbiIsImxhbmd1YWdlcyIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJnZXRMYW5ndWFnZSIsInNlbGVjdExhbmd1YWdlIiwibGFuZ3VhZ2UiLCJzZXRMYW5ndWFnZSIsImhvdmVyZGl2IiwiZGl2aWQiLCJsZWZ0IiwiY2xpZW50WCIsInRvcCIsImNsaWVudFkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3NzIiwidG9nZ2xlIiwic29jaWFsTWVkaWEiLCJuYW1lIiwiaWNvbiIsInRoZW4iLCJyZXNwb25zZSIsIiRvbiIsIl8iLCJiaXJ0aERhdGUiLCJsb2FkaW5nIiwibG9nb3V0IiwiZmlyZWJhc2UiLCJhdXRoIiwic2lnbk91dCIsImNsZWFyIiwiY2F0Y2giLCJlcnJvciIsImZvcm1hdERhdGUiLCJkYXRlIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwiR2FtZVN2YyIsImFubm91bmNlIiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImZvbnQiLCJmaWxsU3R5bGUiLCJ0ZXh0QWxpZ24iLCJzaG90cyIsImFzdGVyb2lkcyIsInBvd2VydXBzIiwiZXhwbG9zaW9ucyIsIm1hcCIsInNwYWNlcGljcyIsInNwYWNlIiwicG93ZXJ1cFR5cGVzIiwiYW5ub3VuY2VtZW50IiwiY3ljbGUiLCJyb3dzIiwiY29sdW1ucyIsInNpemUiLCJpbWciLCJJbWFnZSIsImFjdGl2YXRlIiwic3BhY2VzaGlwIiwibWF4U3BlZWQiLCJjb29sZG93biIsImNvb2xkb3duVGltZSIsInJhbmdlIiwic2hpZWxkIiwiZXhwbG9kZSIsInNwYXduQXN0ZXJvaWRzIiwicG93ZXJ1cCIsImFycmF5Iiwic3JjIiwiZXhwbG9zaW9uSW1hZ2UiLCJldmFsdWF0ZUtleXMiLCJwbGF5aW5nIiwic2hvb3QiLCJyb3RhdGlvbiIsInNwZWVkIiwic2NvcmUiLCIkYXBwbHkiLCJTcGFjZXNoaXAiLCJhdXRvU3Bhd24iLCJ3aWR0aCIsImhlaWdodCIsImNhbm5vbiIsInkiLCJwb3NpdGlvbiIsImFuZ2xlIiwiaWQiLCJyb3VuZCIsIlNob3QiLCJtb3ZlIiwiYmVnaW5QYXRoIiwiYXJjIiwiUEkiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZSIsImZpbGwiLCJhc3Rlcm9pZCIsImhpdCIsImdhbWVPdmVyIiwiY29zIiwic2luIiwibGlmZXNwYW4iLCJBc3Rlcm9pZCIsImdldEVudHJ5UG9zaXRpb24iLCJyb3RhdGlvblNwZWVkIiwiRXhwbG9zaW9uIiwic2hvdCIsInBvaW50cyIsInNwYXduUG93ZXJ1cCIsIm9iamVjdCIsIlBvd2VydXAiLCJkZWxheSIsInNhdmUiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJjb2x1bW4iLCJyb3ciLCJkcmF3SW1hZ2UiLCJyZXN0b3JlIiwiZ3JpZFgiLCJncmlkWSIsIm9iamVjdDEiLCJvYmplY3QyIiwiT2JqZWN0Iiwia2V5cyIsImFtb3VudCIsImhpZ2hzY29yZSIsInNldEhpZ2hzY29yZSIsInJlc2l6ZUNhbnZhcyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImFkZEV2ZW50TGlzdGVuZXIiLCJrZXlDb2RlIiwid2hpY2giLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkcmF3IiwiY2xlYXJSZWN0IiwiZ3JhZGllbnQiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImFkZENvbG9yU3RvcCIsInRhbGx5IiwiZmlsbFRleHQiLCJtZWFzdXJlVGV4dCIsImJhY2tncm91bmRJbWFnZSIsImJ1YmJsZXMiLCJjb2xvcnMiLCJCdWJibGUiLCJyYWRpdXMiLCJleHBhbmRpbmciLCJjaXJjdW1mZXJlbmNlIiwibWF4UmFkaXVzIiwidngiLCJ2eSIsImZpbHRlckJ1YmJsZXMiLCJidWJibGUiLCJzZWxlY3RXb3JkIiwiY2F0ZWdvcnkiLCJ3b3JkIiwiRW1haWxTdmMiLCJvcHRpb25zIiwidGV4dCIsImNvbnRhY3QiLCJlbWFpbCIsInBob25lIiwiYWJvdXQiLCJtZXNzYWdlIiwic2VuZGluZyIsInNlbnQiLCJzdGF0dXMiLCJlcnIiLCJnZXRTa2lsbCIsInNraWxsQ29kZSIsImNvZGUiLCIkd2luZG93IiwiaG9iYnlTZWxlY3RvclZpc2libGUiLCJzZWxlY3RlZEhvYmJ5Iiwic2VsZWN0SG9iYnkiLCJob2JieSIsInNob3dIb2JieSIsInZhbHVlIiwiaW5kZXgiLCJpbWFnZXMiLCJMRUZUIiwiUklHSFQiLCJsZW1taW5nc0ltYWdlIiwiZGVjb3JJbWFnZSIsImxlbW1pbmdzIiwic3RhcnRlZCIsImFjdGlvbnMiLCJ3YWxrIiwic3RhcnQiLCJlbmQiLCJyZXZlcnNlIiwiaHVoIiwiZmFsbCIsImZseSIsInN0b3AiLCJjbGltYiIsImJ1aWxkIiwicHVuY2giLCJkaWciLCJMZW1taW5nIiwiaW5pdCIsImFjdCIsImFjdGlvbiIsImFuaW1hdGlvbiIsInNjYWxlIiwiaGF0Y2giLCJvcGVuIiwicmVjdCIsIkNhdGVnb3JpZXNTdmMiLCJzaG93Q2F0ZWdvcnkiLCJnZXRDYXRlZ29yaWVzIiwiY2F0ZWdvcmllcyIsInRhc2tzIiwiaiIsInRhc2siLCJzZWxlY3RDYXRlZ29yeSIsInNlbGVjdGVkQ2F0ZWdvcnkiLCJzZWxlY3RlZFRhc2tzIiwic2VsZWN0YWJsZVRhc2tzIiwiZW50ZXJlZENhdGVnb3J5IiwibmV3Q2F0ZWdvcnkiLCJmb3VuZCIsImFkZENhdGVnb3J5IiwibmV3VGFzayIsInNlbGVjdFRhc2siLCJhZGRUYXNrIiwiZW50ZXJlZFRhc2siLCJyZW1vdmVUYXNrIiwidW5zZWxlY3RUYXNrIiwidGFza0xpc3QiLCJzcGxpY2UiLCJpbmRleE9mIiwic3RhcnRQcmlvcml0aXppbmciLCJzZXRQcmlvcml0eUxpc3QiLCJwYXRoIiwiZ2V0UXVlc3Rpb25zIiwiY291bnRlciIsInVpIiwiZmlyZWJhc2V1aSIsIkF1dGhVSSIsInN0YXJ0VUkiLCJjYWxsYmFja3MiLCJzaWduSW5TdWNjZXNzIiwiY3JlZGVudGlhbCIsInJlZGlyZWN0VXJsIiwiZ2V0SWRUb2tlbiIsImlkVG9rZW4iLCJhdXRoZW50aWNhdGUiLCJkaXNwbGF5TmFtZSIsInBob3RvVVJMIiwiZW1haWxWZXJpZmllZCIsIiRlbWl0IiwibW9kYWwiLCJ0eXBlIiwic2lnbkluRmFpbHVyZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiY3JlZCIsInNpZ25JbldpdGhDcmVkZW50aWFsIiwidWlTaG93biIsInN0eWxlIiwiZGlzcGxheSIsInNpZ25JblN1Y2Nlc3NVcmwiLCJzaWduSW5PcHRpb25zIiwiR29vZ2xlQXV0aFByb3ZpZGVyIiwiUFJPVklERVJfSUQiLCJGYWNlYm9va0F1dGhQcm92aWRlciIsInNpZ25JbkZsb3ciLCJldmVudCIsInJlc2V0IiwiJGZpbHRlciIsIlBvc3RzU3ZjIiwiYWRkUG9zdCIsInBvc3RCb2R5IiwiY3JlYXRlIiwiYm9keSIsInBvc3QiLCJmZXRjaCIsInBvc3RzIiwiZ2V0UG9zdCIsInVuc2hpZnQiLCJwcmlvcml0eUxpc3QiLCJnZXRQcmlvcml0eUxpc3QiLCJzZWxlY3RlZFF1ZXN0aW9uIiwiY3VycmVudFF1ZXN0aW9uIiwiZG9uZSIsIm1ha2VDaG9pY2UiLCJjaG9pY2UiLCJmaXJzdENob2ljZSIsInNlY29uZENob2ljZSIsImdldEJ1dHRvblZhbHVlIiwic2VsZWN0UXVlc3Rpb24iLCJxdWVzdGlvbiIsImdldEZpbHRlcmVkUHJpb3JpdHlMaXN0IiwiZ2V0Q2hvaWNlc01hZGUiLCJjaG9pY2VzTWFkZSIsImdldEJ1dHRvbkNsYXNzIiwic2hvd0Nob2ljZXMiLCJjaGFydENsaWNrIiwiY2hhcnQiLCJnZXRTZWdtZW50c0F0RXZlbnQiLCJzaG93UmVzdWx0cyIsInJlc3BvbnNpdmUiLCJzZWdtZW50U2hvd1N0cm9rZSIsInNlZ21lbnRTdHJva2VDb2xvciIsInNlZ21lbnRTdHJva2VXaWR0aCIsInBlcmNlbnRhZ2VJbm5lckN1dG91dCIsImFuaW1hdGlvblN0ZXBzIiwiYW5pbWF0aW9uRWFzaW5nIiwiYW5pbWF0ZVJvdGF0ZSIsImFuaW1hdGVTY2FsZSIsImxlZ2VuZFRlbXBsYXRlIiwiY2hvaWNlcyIsInZvdGVzIiwibGFiZWwiLCJvZmZzZXQiLCJnZW5kZXIiLCJzZXgiLCJpZGVudGl0eSIsInNleGVzIiwiaWRlbnRpdGllcyIsImRhdGVPcHRpb25zIiwibWF4RGF0ZSIsIm1pbkRhdGUiLCJpbml0RGF0ZSIsImRhdGVwaWNrZXJNb2RlIiwicGVyY2VudGFnZSIsInN0YXJ0U2xpZGVyIiwiZHJhZ1NsaWRlciIsInN0b3BTbGlkZXIiLCJ1c2VybmFtZVRvZ2dsZSIsInBhc3N3b3JkVG9nZ2xlIiwidG9nZ2xlVXNlcm5hbWUiLCJuZXdVc2VybmFtZSIsInVzZXJuYW1lIiwidG9nZ2xlUGFzc3dvcmQiLCJuZXdQYXNzd29yZCIsImNvbmZpcm1QYXNzd29yZCIsImNoZWNrUGFzc3dvcmQiLCJwYXNzd29yZCIsIm9yaWdpbmFsQmciLCJhbmltYXRlIiwiYmFja2dyb3VuZENvbG9yIiwiY2hhbmdlUGFzc3dvcmQiLCJvbGRQYXNzd29yZCIsImNoYW5nZVVzZXJuYW1lIiwidXBkYXRlVXNlciIsIiR3YXRjaCIsImxvYWRDb3VudHJpZXMiLCIkcXVlcnkiLCJmbGFnIiwidGlkYml0IiwiY291bnRyeSIsInNlbGVjdGVkU2tpbGwiLCJza2lsbHNWaXNpYmxlIiwicHJvamVjdHMiLCJsYWJlbHMiLCJlbXBsb3llciIsImNvbmNhdCIsImZpbHRlcmVkUHJvamVjdHMiLCJwcm9qZWN0IiwiaW5jbHVkZXMiLCJzZXRTZWxlY3RlZFNraWxsIiwiY2hhcnRPcHRpb25zIiwiY3V0b3V0UGVyY2VudGFnZSIsIm1haW50YWluQXNwZWN0UmF0aW8iLCJ0b29sdGlwcyIsImNoYXJ0U3R5bGUiLCJpbWFnZSIsIlRlblRoaW5nc1N2YyIsImZsYXNoIiwiZWxlbWVudCIsImNvbG9yIiwic2VhcmNoIiwidmFsdWVzIiwiY2F0ZWdvcnlGaWx0ZXJzIiwiY2F0ZWdvcnlGaWx0ZXIiLCJ1cGRhdGVGaWx0ZXIiLCJnZXRMYW5ndWFnZXMiLCJsYW5ndWFnZUZpbHRlcnMiLCJsYW5ndWFnZUZpbHRlciIsImtleURvd24iLCJpcyIsImFkZFZhbHVlIiwiZm9jdXMiLCJzZWFyY2hOYW1lIiwibmV3SXRlbSIsInNldENhdGVnb3J5RmlsdGVyIiwic2V0VXNlckZpbHRlciIsInVzZXJGaWx0ZXIiLCJzZXRVcGRhdGVGaWx0ZXIiLCJzZXRMYW5ndWFnZUZpbHRlciIsImZpbHRlcmVkTGlzdHMiLCJsaXN0cyIsImlzRHluYW1pYyIsImNyZWF0b3IiLCJnZXRMaXN0cyIsImxpc3RPcmRlciIsImZpZWxkIiwidmFsdWVPcmRlciIsInNvcnRlciIsInNvcnRGaWVsZCIsInNvcnRMYWJlbCIsImdldExhbmd1YWdlQ291bnQiLCJjb3VudCIsImxpc3QiLCJnZXRDYXRlZ29yeUNvdW50IiwiZ2V0VXBkYXRlQ291bnQiLCJ1c2VyRmlsdGVycyIsIkFsbCIsImxpc3QxIiwibGlzdDIiLCJ1c2VycyIsInVzZXJDb3VudCIsInNlbGVjdExpc3QiLCJnZXRMaXN0Iiwic2VsZWN0ZWRMaXN0IiwiZ2V0Q2F0ZWdvcnlDbGFzcyIsInRvZ2dsZUNhdGVnb3J5IiwiY2F0ZWdvcnlJbmRleCIsIm5vbkVuZ2xpc2hJbmRleCIsImFkZExpc3QiLCJjdXJyZW50TGFuZ3VhZ2UiLCJhbnN3ZXJzIiwiaGFzRHVwbGljYXRlIiwic29tZSIsImFuc3dlciIsImFsZXJ0IiwiYmx1cmIiLCJzYXZlTGlzdCIsInJlcG9ydExpc3QiLCJyZXBvcnRlZCIsInNhdmluZyIsImRlbGV0ZUxpc3QiLCJjb25maXJtIiwibGlzdEJ1dHRvbkNsYXNzIiwiYmx1cmJzIiwiZGVzY3JpcHRpb24iLCJnZXRNb3ZpZVBpY3MiLCJnZXR0aW5nQmx1cmJzIiwiZ2V0VFZQaWNzIiwiZ2V0QWN0b3JQaWNzIiwiZ2V0Qm9va1BpY3MiLCJnZXRNdXNpY1ZpZGVvcyIsImdldFBpY3MiLCJhZG1pbiIsImdldFVzZXJzIiwib3JkZXIiLCJvcmRlckJ5IiwiZ2V0UXVldWUiLCJxdWV1ZSIsImdldFBhdXNlIiwicGF1c2VkIiwidG9nZ2xlQmFuIiwidG9nZ2xlUGF1c2UiLCJzZXREaWZmaWN1bHR5IiwiZGlmZmljdWx0eSIsInVwZGF0ZUxpc3QiLCIkc3RhdGVQYXJhbXMiLCJnYW1lIiwiZ2V0R2FtZSIsInRpbWVSZW1haW5pbmciLCJ0aW1lRXhlcmNpc2luZyIsInRpbWVSZXN0aW5nIiwicmVzdCIsImV4ZXJjaXNpbmciLCJzb3VuZHMiLCJvbiIsIkF1ZGlvIiwib2ZmIiwic3dpdGNoIiwiZXhlcmNpc2VzIiwic3BsaXQiLCJwcm9ncmVzcyIsIndvcmtvdXQiLCJleGNlcmNpc2VUaW1lIiwiY2xlYXJJbnRlcnZhbCIsInRpbWVyIiwiZXhlcmNpc2UiLCJzZXRJbnRlcnZhbCIsImN1cnJlbnRFeGVyY2lzZSIsInBsYXkiLCJkaXJlY3RpdmUiLCIkc3RhdGUiLCIkY29tcGlsZSIsIiRpbnRlcnBvbGF0ZSIsImdldFN0eWxlIiwidGVtcGxhdGVTdHlsZVVybCIsImhyZWYiLCJyZWwiLCJtYXRjaCIsInJlc3RyaWN0IiwibGluayIsInNjb3BlIiwiZWxlbSIsInRlbXBsYXRlU3R5bGVzIiwiaHRtbCIsInN0YXJ0U3ltYm9sIiwiZW5kU3ltYm9sIiwiYXBwZW5kIiwidG9TdGF0ZSIsInRvUGFyYW1zIiwiZnJvbVN0YXRlIiwiZnJvbVBhcmFtcyIsInN0YXRlcyIsInBhcmVudCIsImdldCIsInZpZXdzIiwidmlldyIsImZsYXQiLCJnZXRTdHlsZXMiLCIkaHR0cCIsInN2YyIsImdldFRhc2tzIiwidCIsIm0iLCJzaHVmZmxlIiwiZ2V0SW1hZ2VzIiwiZm9sZGVyIiwiZ2V0U291bmRzIiwiZ2V0SGlnaHNjb3JlIiwicHV0IiwiZGVsZXRlIiwiZ2V0VXNlciIsInNldFRva2VuIiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJjcmVhdGVVc2VyIiwiRmlsZVN2YyIsImFuaW1hbHMiLCJhbmltYWwiLCJzb3VuZCIsInN1YnN0cmluZyIsImdldFJhbmRvbUFuaW1hbHMiLCJndWVzcyIsImdldFNjb3JlIiwiaXNTY29yZVZpc2libGUiXSwibWFwcGluZ3MiOiJBQUFBLElBQUFBLDJCQUFBQSxHQUFBLENBQ0E7SUFDQUMsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxJQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQUE7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLEVBRUE7SUFDQUQsSUFBQUEsRUFBQSxHQUFBO0lBQ0FDLE9BQUFBLEVBQ0E7RUFBQSxDQUFBLENBQUE7RUFHQUMsT0FBQUEsR0FBQSxDQUNBLE1BQUEsRUFDQSxNQUFBLEVBQ0EsTUFBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsRUFDQSxLQUFBLEVBQ0EsS0FBQSxFQUNBLEtBQUEsQ0FBQTtBQUdBQyxNQUFBQSxDQUFBQyxTQUFBQSxDQUFBQyxnQkFBQUEsR0FBQSxZQUFBO0VBQ0EsT0FBQU4sMkJBQUFBLENBQUFPLE1BQUFBLENBQUEsQ0FBQUMsTUFBQUEsRUFBQUMsTUFBQUEsS0NDV0QsTUFBQUEsQ0FBT0UsT0FBQUEsQ0FBUUQsTUFBQUEsQ0FBT1AsT0FBQUEsRUFBU08sTUFBQUEsQ0FBT1IsSUFBQUEsQ0FBQUEsRURDakRVLElBQUFBLENDQ0E7QUFBQSxDQUFBO0FERUEsTUFBQUMsa0JBQUFBLEdBQUEscUNBQUE7QUFDQVIsTUFBQUEsQ0FBQUMsU0FBQUEsQ0FBQVEsdUJBQUFBLEdBQUEsWUFBQTtFQUNBLE9BQUFGLElBQUFBLENBQUFELE9BQUFBLENBQUEsSUFBQUksTUFBQUEsQ0FBQSxJQUFBRixrQkFBQUEsR0FB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QyxHQUFBQSxFQUFBLFNBQUE7SUFDQUUsVUFBQUEsRUFBQSxZQUFBO0lBQ0FELFdBQUFBLEVBQUE7RUFBQSxDQUFBLENBQUEsQ0FFQUYsS0FBQUEsQ0FBQSxTQUFBLEVBQUE7SUFDQUMsR0FBQUEsRUFBQSxVQUFBO0lBQ0FFLFVBQUFBLEVBQUEsYUFBQTtJQUNBRCxXQUFBQSxFQUFBO0VBQUEsQ0FBQSxDQUFBLENBRUFGLEtBQUFBLENBQUEsU0FBQSxFQUFBO0lBQ0FDLEdBQUFBLEVBQUEsVUFBQTtJQUNBRSxVQUFBQSxFQUFBLGFBQUE7SUFDQUQsV0FBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUVBRixLQUFBQSxDQUFBLFNBQUEsRUFBQTtJQUNBQyxHQUFBQSxFQUFBLFVBQUE7SUFDQUUsVUFBQUEsRUFBQSxhQUFBO0lBQ0FELFdBQUFBLEVBQUE7RUFBQSxDQUFBLENBQUEsQ0FFQUYsS0FBQUEsQ0FBQSxPQUFBLEVBQUE7SUFDQUMsR0FBQUEsRUFBQSxRQUFBO0lBQ0FFLFVBQUFBLEVBQUEsV0FBQTtJQUNBRCxXQUFBQSxFQUFBO0VBQUEsQ0FBQSxDQUFBLENBRUFGLEtBQUFBLENBQUEsU0FBQSxFQUFBO0lBQ0FDLEdBQUFBLEVBQUEsVUFBQTtJQUNBRSxVQUFBQSxFQUFBLGFBQUE7SUFDQUQsV0FBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUVBRixLQUFBQSxDQUFBLE9BQUEsRUFBQTtJQUNBQyxHQUFBQSxFQUFBLFFBQUE7SUFDQUUsVUFBQUEsRUFBQSxXQUFBO0lBQ0FELFdBQUFBLEVBQUE7RUFBQSxDQUFBLENBQUEsQ0FFQUYsS0FBQUEsQ0FBQSxZQUFBLEVBQUE7SUFDQUMsR0FBQUEsRUFBQSxhQUFBO0lBQ0FFLFVBQUFBLEVBQUEsZ0JBQUE7SUFDQUQsV0FBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUVBRixLQUFBQSxDQUFBLFNBQUEsRUFBQTtJQUNBQyxHQUFBQSxFQUFBLFVBQUE7SUFDQUUsVUFBQUEsRUFBQSxhQUFBO0lBQ0FELFdBQUFBLEVBQUE7RUFBQSxDQUFBLENBQUEsQ0FFQUYsS0FBQUEsQ0FBQSxXQUFBLEVBQUE7SUFDQUMsR0FBQUEsRUFBQSxZQUFBO0lBQ0FFLFVBQUFBLEVBQUEsZUFBQTtJQUNBRCxXQUFBQSxFQUFBO0VBQUEsQ0FBQSxDQUFBLENBRUFGLEtBQUFBLENBQUEsVUFBQSxFQUFBO0lBQ0FDLEdBQUFBLEVBQUEsV0FBQTtJQUNBRSxVQUFBQSxFQUFBLGNBQUE7SUFDQUQsV0FBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUVBRixLQUFBQSxDQUFBLE1BQUEsRUFBQTtJQUNBQyxHQUFBQSxFQUFBLE9BQUE7SUFDQUUsVUFBQUEsRUFBQSxlQUFBO0lBQ0FELFdBQUFBLEVBQUE7RUFBQSxDQUFBLENBQUEsQ0FFQUYsS0FBQUEsQ0FBQSxXQUFBLEVBQUE7SUFDQUMsR0FBQUEsRUFBQSxZQUFBO0lBQ0FFLFVBQUFBLEVBQUEsZUFBQTtJQUNBRCxXQUFBQSxFQUFBO0VBQUEsQ0FBQSxDQUFBLENBRUFGLEtBQUFBLENBQUEsaUJBQUEsRUFBQTtJQUNBQyxHQUFBQSxFQUFBLGtCQUFBO0lBQ0FFLFVBQUFBLEVBQUEsb0JBQUE7SUFDQUQsV0FBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUVBRixLQUFBQSxDQUFBLGtCQUFBLEVBQUE7SUFDQUMsR0FBQUEsRUFBQSxtQkFBQTtJQUNBRSxVQUFBQSxFQUFBLHFCQUFBO0lBQ0FELFdBQUFBLEVBQUE7RUFBQSxDQUFBLENBQUEsQ0FFQUYsS0FBQUEsQ0FBQSxnQkFBQSxFQUFBO0lBQ0FDLEdBQUFBLEVBQUEsa0JBQUE7SUFDQUUsVUFBQUEsRUFBQSxtQkFBQTtJQUNBRCxXQUFBQSxFQUFBO0VBQUEsQ0FBQSxDQUFBLENBRUFGLEtBQUFBLENBQUEsYUFBQSxFQUFBO0lBQ0FDLEdBQUFBLEVBQUEsU0FBQTtJQUNBRSxVQUFBQSxFQUFBLGdCQUFBO0lBQ0FELFdBQUFBLEVBQUE7RUFBQSxDQUFBLENBQUEsQ0FFQUYsS0FBQUEsQ0FBQSxZQUFBLEVBQUE7SUFDQUMsR0FBQUEsRUFBQSxRQUFBO0lBQ0FFLFVBQUFBLEVBQUEsZUFB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QTVPLElBQUFBLENBQUFDLEtBQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsR0FBQTJPLEtBQUFBLEdBQUEsR0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEVBQ0FILFFBQUFBLENBQUFFLFlBQUFBLENBQUEsS0FBQSxFQUFBLE1BQUEsR0FBQTNPLElBQUFBLENBQUFDLEtBQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsR0FBQTJPLEtBQUFBLEdBQUEsR0FBQSxDQUFBLEdBQUEsR0FBQSxHQUFBNU8sSUFBQUEsQ0FBQUMsS0FBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxHQUFBMk8sS0FBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxHQUFBLEdBQUE1TyxJQUFBQSxDQUFBQyxLQUFBQSxDQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEyTyxLQUFBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxFQUNBSCxRQUFBQSxDQUFBRSxZQUFBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLEdBQUEzTyxJQUFBQSxDQUFBQyxLQUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLEdBQUEyTyxLQUFBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLEdBQUEsR0FBQTVPLElBQUFBLENBQUFDLEtBQUFBLENBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQTJPLEtBQUFBLEdBQUEsR0FBQSxDQUFBLEdBQUEsR0FBQSxHQUFBNU8sSUFBQUEsQ0FBQUMsS0FBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxHQUFBMk8sS0FBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsRUFDQUgsUUFBQUEsQ0FBQUUsWUFBQUEsQ0FBQSxLQUFBLEVBQUEsTUFBQSxHQUFBM08sSUFBQUEsQ0FBQUMsS0FBQUEsQ0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBMk8sS0FBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxHQUFBLEdBQUE1TyxJQUFBQSxDQUFBQyxLQUFBQSxDQUFBLENBQUEsR0FBQSxHQUFBLEdBQUEyTyxLQUFBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLEdBQUEsR0FBQTVPLElB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LENBQUEsR0FBQSxFQUFBLEVBQUEsQ0FBQTtRQUNBQyxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQTtRQUNBMUksT0FBQUEsRUFBQSxDQUFBO1FBQ0FELElBQUFBLEVBQUEsQ0FBQTtRQUNBNEksT0FBQUEsRUFBQUEsQ0FBQTtNQUFBLENBQUE7TUFFQUksSUFBQUEsRUFBQTtRQUNBTixLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQTtRQUNBQyxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQTtRQUNBMUksT0FBQUEsRUFBQSxFQUFBO1FBQ0FELElBQUFBLEVBQUEsQ0FBQTtRQUNBNEksT0FBQUEsRUFBQUEsQ0FBQTtNQUFBLENBQUE7TUFFQUssS0FBQUEsRUFBQTtRQUNBUCxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQTtRQUNBQyxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQTtRQUNBMUksT0FBQUEsRUFBQSxFQUFBO1FBQ0FELElBQUFBLEVBQUEsQ0FBQTtRQUNBNEksT0FBQUEsRUFBQUEsQ0FBQTtNQUFBLENBQUE7TUFFQU0sS0FBQUEsRUFBQTtRQUNBUixLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQTtRQUNBQyxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQTtRQUNBMUksT0FBQUEsRUFBQSxFQUFBO1FBQ0FELElBQUFBLEVBQUEsQ0FBQTtRQUNBNEksT0FBQUEsRUFBQUEsQ0FBQTtNQUFBLENBQUE7TUFFQU8sS0FBQUEsRUFBQTtRQUNBVCxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQTtRQUNBQyxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQTtRQUNBMUksT0FBQUEsRUFBQSxFQUFBO1FBQ0FELElBQUFBLEVBQUEsQ0FBQTtRQUNBNEksT0FBQUEsRUFBQUEsQ0FBQTtNQUFBLENBQUE7TUFFQVEsR0FBQUEsRUFBQTtRQUNBVixLQUFBQSxFQUFB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QSxFQUFBLFlBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsV0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxnQkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxTQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFdBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsT0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxlQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFlBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsd0JBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsVUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxZQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsY0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxVQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxPQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLGtCQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxpQ0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxrQ0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxRQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxlQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFVBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxRQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFFBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEseUJBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsdUNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsMEJBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsT0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxhQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLGVBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsY0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxPQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFVBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsT0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxVQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFlBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsTUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxZQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsa0JBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxnQkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxTQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFVBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxVQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLG9CQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxTQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE9BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsZ0JBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxPQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFVBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxNQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLDZCQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLGlDQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLGVBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxPQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLHNEQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxlQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFVBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsT0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxXQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFdBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxRQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFlBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsbUJBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSw4Q0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxXQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE1BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsZUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxRQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFdBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsbUNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsVUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxTQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE9BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxXQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxhQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE9BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsZ0NBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsTUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSwyQkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxTQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE9BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxTQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFFBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsT0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxPQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFlBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsVUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxVQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsdUJBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsd0NBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsb0JBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxnQkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxZQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLGtDQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsYUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxlQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFdBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxTQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFdBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsWUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxRQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE9BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxRQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLHNCQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFlBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsNEJBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsWUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxrQkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSw0Q0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxNQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsVUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxPQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLDBCQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFlBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsWUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxZQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE9BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsV0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxVQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFFBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxVQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFlBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxlQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE9BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsZ0JBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxXQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLGFBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxPQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE9BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsTUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxhQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE1BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxNQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLGtCQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLGtCQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLGFBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsVUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxRQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLDJCQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFVBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsYUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxxQkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxVQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE9BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsVUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxPQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxRQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLG9CQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFFBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsY0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxpQkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxZQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE9BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxXQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLDhDQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFVBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsd0JBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsVUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxjQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFlBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsU0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxTQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFVBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsYUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSx1QkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxhQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLDJCQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLHNCQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFdBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsMEJBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsTUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSw2QkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxNQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFVBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsWUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxTQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLGFBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsY0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxTQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLE9BQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxxQkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxRQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLDJCQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLDhCQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsUUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxzQ0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSwwQkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxTQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFlBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsVUFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxrQ0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxtQ0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSx5QkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxzQkFBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxVQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsbUJBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsT0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxPQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFBLFNBQUE7TUFBQWlWLElBQUFBLEVBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQWpWLElBQUFBLEVBQUEsY0FBQTtNQUFBaVYsSUFBQUEsRUFBQTtJQUFBLENBQUEsRUFDQTtNQUFBalYsSUFBQUEsRUFBQSxRQUFBO01BQUFpVixJQUFBQSxFQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUFqVixJQUFBQSxFQUFB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QSxRQUFBLENBQUE7TUFDQUMsR0FBQUEsRUFBQSxJQUFBRCxLQUFBQSxDQUFBLFNBQUEsQ0FBQTtNQUNBRSxNQUFBQSxFQUFBLElBQUFGLEtBQUFBLENBQUEsWUFBQTtJQUFBLENBQUE7SUFJQUcsU0FBQUEsR0FBQSxDQUNBO01BQUExYyxJQUFBQSxFQUFBLGVBQUE7TUFBQTJjLEtBQUFBLEVBQUFBLENBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQTNjLElBQUFBLEVBQUEsVUFBQTtNQUFBMmMsS0FBQUEsRUFBQUEsQ0FBQTtJQUFBLENBQUEsRUFDQTtNQUFBM2MsSUFBQUEsRUFBQSxTQUFBO01BQUEyYyxLQUFBQSxFQUFBQSxDQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUEzYyxJQUFBQSxFQUFBLFFBQUE7TUFBQTJjLEtBQUFBLEVBQUFBLENBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQTNjLElBQUFBLEVBQUEsU0FBQTtNQUFBMmMsS0FBQUEsRUFBQUEsQ0FBQTtJQUFBLENBQUEsRUFDQTtNQUFBM2MsSUFBQUEsRUFBQSxPQUFBO01BQUEyYyxLQUFBQSxFQUFBQSxDQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUEzYyxJQUFBQSxFQUFBLGFBQUE7TUFBQTJjLEtBQUFBLEVBQUFBLENBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQTNjLElBQUFBLEVBQUEsT0FBQTtNQUFBMmMsS0FBQUEsRUFBQUEsQ0FBQTtJQUFBLENBQUEsRUFDQTtNQUFBM2MsSUFBQUEsRUFBQSxZQUFBO01BQUEyYyxLQUFBQSxFQUFBQSxDQUFBO0lBQUEsQ0FBQSxFQUNBO01BQUEzYyxJQUFBQSxFQUFBLE9BQUE7TUFBQTJjLEtBQUFBLEVBQUFBLENBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQTNjLElBQUFBLEVBQUEsdUJBQUE7TUFBQTJjLEtBQUFBLEVBQUFBLENBQUE7SUFBQSxDQUFBLEVBQ0E7TUFBQTNjLElBQUFBLEVBQUEsWUFBQTtNQUFBMmMsS0FBQUEsRUFBQUEsQ0FBQTtJQUFBLENBQUEsQ0FBQTtFQUtBOWYsTUFBQUEsQ0FBQStmLFFBQUFBLEdB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LEtBQUFBLENBQUFBLENBQUF4b0IsTUFBQUEsS0FBQTBFLE1BQUFBLENBQUF5akIsT0FBQUEsQ0FBQW5vQixNcEM0OUhFO0FBQUEsQ0FBQSxDQUFBLENBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmF1bHREaWFjcml0aWNzUmVtb3ZhbE1hcCA9IFtcclxuICB7XHJcbiAgICBiYXNlOiAnQScsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNDFcXHUyNEI2XFx1RkYyMVxcdTAwQzBcXHUwMEMxXFx1MDBDMlxcdTFFQTZcXHUxRUE0XFx1MUVBQVxcdTFFQThcXHUwMEMzXFx1MDEwMFxcdTAxMDJcXHUxRUIwXFx1MUVBRVxcdTFFQjRcXHUxRUIyXFx1MDIyNlxcdTAxRTBcXHUwMEM0XFx1MDFERVxcdTFFQTJcXHUwMEM1XFx1MDFGQVxcdTAxQ0RcXHUwMjAwXFx1MDIwMlxcdTFFQTBcXHUxRUFDXFx1MUVCNlxcdTFFMDBcXHUwMTA0XFx1MDIzQVxcdTJDNkZdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnQUEnLFxyXG4gICAgbGV0dGVyczogL1tcXHVBNzMyXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0FFJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDBDNlxcdTAxRkNcXHUwMUUyXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0FPJyxcclxuICAgIGxldHRlcnM6IC9bXFx1QTczNF0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdBVScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdUE3MzZdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnQVYnLFxyXG4gICAgbGV0dGVyczogL1tcXHVBNzM4XFx1QTczQV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdBWScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdUE3M0NdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnQicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNDJcXHUyNEI3XFx1RkYyMlxcdTFFMDJcXHUxRTA0XFx1MUUwNlxcdTAyNDNcXHUwMTgyXFx1MDE4MV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdDJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDA0M1xcdTI0QjhcXHVGRjIzXFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAwQzdcXHUxRTA4XFx1MDE4N1xcdTAyM0JcXHVBNzNFXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0QnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDQ0XFx1MjRCOVxcdUZGMjRcXHUxRTBBXFx1MDEwRVxcdTFFMENcXHUxRTEwXFx1MUUxMlxcdTFFMEVcXHUwMTEwXFx1MDE4QlxcdTAxOEFcXHUwMTg5XFx1QTc3OV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdEWicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAxRjFcXHUwMUM0XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0R6JyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDFGMlxcdTAxQzVdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnRScsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNDVcXHUyNEJBXFx1RkYyNVxcdTAwQzhcXHUwMEM5XFx1MDBDQVxcdTFFQzBcXHUxRUJFXFx1MUVDNFxcdTFFQzJcXHUxRUJDXFx1MDExMlxcdTFFMTRcXHUxRTE2XFx1MDExNFxcdTAxMTZcXHUwMENCXFx1MUVCQVxcdTAxMUFcXHUwMjA0XFx1MDIwNlxcdTFFQjhcXHUxRUM2XFx1MDIyOFxcdTFFMUNcXHUwMTE4XFx1MUUxOFxcdTFFMUFcXHUwMTkwXFx1MDE4RV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdGJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDA0NlxcdTI0QkJcXHVGRjI2XFx1MUUxRVxcdTAxOTFcXHVBNzdCXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0cnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDQ3XFx1MjRCQ1xcdUZGMjdcXHUwMUY0XFx1MDExQ1xcdTFFMjBcXHUwMTFFXFx1MDEyMFxcdTAxRTZcXHUwMTIyXFx1MDFFNFxcdTAxOTNcXHVBN0EwXFx1QTc3RFxcdUE3N0VdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnSCcsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNDhcXHUyNEJEXFx1RkYyOFxcdTAxMjRcXHUxRTIyXFx1MUUyNlxcdTAyMUVcXHUxRTI0XFx1MUUyOFxcdTFFMkFcXHUwMTI2XFx1MkM2N1xcdTJDNzVcXHVBNzhEXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0knLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDQ5XFx1MjRCRVxcdUZGMjlcXHUwMENDXFx1MDBDRFxcdTAwQ0VcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTMwXFx1MDBDRlxcdTFFMkVcXHUxRUM4XFx1MDFDRlxcdTAyMDhcXHUwMjBBXFx1MUVDQVxcdTAxMkVcXHUxRTJDXFx1MDE5N10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdKJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDA0QVxcdTI0QkZcXHVGRjJBXFx1MDEzNFxcdTAyNDhdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnSycsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNEJcXHUyNEMwXFx1RkYyQlxcdTFFMzBcXHUwMUU4XFx1MUUzMlxcdTAxMzZcXHUxRTM0XFx1MDE5OFxcdTJDNjlcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBN0EyXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0wnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDRDXFx1MjRDMVxcdUZGMkNcXHUwMTNGXFx1MDEzOVxcdTAxM0RcXHUxRTM2XFx1MUUzOFxcdTAxM0JcXHUxRTNDXFx1MUUzQVxcdTAxNDFcXHUwMjNEXFx1MkM2MlxcdTJDNjBcXHVBNzQ4XFx1QTc0NlxcdUE3ODBdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnTEonLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMUM3XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0xqJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDFDOF0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdNJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDA0RFxcdTI0QzJcXHVGRjJEXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MkM2RVxcdTAxOUNdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnTicsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNEVcXHUyNEMzXFx1RkYyRVxcdTAxRjhcXHUwMTQzXFx1MDBEMVxcdTFFNDRcXHUwMTQ3XFx1MUU0NlxcdTAxNDVcXHUxRTRBXFx1MUU0OFxcdTAyMjBcXHUwMTlEXFx1QTc5MFxcdUE3QTRdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnTkonLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMUNBXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ05qJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDFDQl0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdPJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA0RlxcdTI0QzRcXHVGRjJGXFx1MDBEMlxcdTAwRDNcXHUwMEQ0XFx1MUVEMlxcdTFFRDBcXHUxRUQ2XFx1MUVENFxcdTAwRDVcXHUxRTRDXFx1MDIyQ1xcdTFFNEVcXHUwMTRDXFx1MUU1MFxcdTFFNTJcXHUwMTRFXFx1MDIyRVxcdTAyMzBcXHUwMEQ2XFx1MDIyQVxcdTFFQ0VcXHUwMTUwXFx1MDFEMVxcdTAyMENcXHUwMjBFXFx1MDFBMFxcdTFFRENcXHUxRURBXFx1MUVFMFxcdTFFREVcXHUxRUUyXFx1MUVDQ1xcdTFFRDhcXHUwMUVBXFx1MDFFQ1xcdTAwRDhcXHUwMUZFXFx1MDE4NlxcdTAxOUZcXHVBNzRBXFx1QTc0Q10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdPSScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAxQTJdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnT08nLFxyXG4gICAgbGV0dGVyczogL1tcXHVBNzRFXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ09VJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDIyMl0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdQJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDA1MFxcdTI0QzVcXHVGRjMwXFx1MUU1NFxcdTFFNTZcXHUwMUE0XFx1MkM2M1xcdUE3NTBcXHVBNzUyXFx1QTc1NF0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdRJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDA1MVxcdTI0QzZcXHVGRjMxXFx1QTc1NlxcdUE3NThcXHUwMjRBXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ1InLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDUyXFx1MjRDN1xcdUZGMzJcXHUwMTU0XFx1MUU1OFxcdTAxNThcXHUwMjEwXFx1MDIxMlxcdTFFNUFcXHUxRTVDXFx1MDE1NlxcdTFFNUVcXHUwMjRDXFx1MkM2NFxcdUE3NUFcXHVBN0E2XFx1QTc4Ml0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdTJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA1M1xcdTI0QzhcXHVGRjMzXFx1MUU5RVxcdTAxNUFcXHUxRTY0XFx1MDE1Q1xcdTFFNjBcXHUwMTYwXFx1MUU2NlxcdTFFNjJcXHUxRTY4XFx1MDIxOFxcdTAxNUVcXHUyQzdFXFx1QTdBOFxcdUE3ODRdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnVCcsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNTRcXHUyNEM5XFx1RkYzNFxcdTFFNkFcXHUwMTY0XFx1MUU2Q1xcdTAyMUFcXHUwMTYyXFx1MUU3MFxcdTFFNkVcXHUwMTY2XFx1MDFBQ1xcdTAxQUVcXHUwMjNFXFx1QTc4Nl0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdUWicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdUE3MjhdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnVScsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNTVcXHUyNENBXFx1RkYzNVxcdTAwRDlcXHUwMERBXFx1MDBEQlxcdTAxNjhcXHUxRTc4XFx1MDE2QVxcdTFFN0FcXHUwMTZDXFx1MDBEQ1xcdTAxREJcXHUwMUQ3XFx1MDFENVxcdTAxRDlcXHUxRUU2XFx1MDE2RVxcdTAxNzBcXHUwMUQzXFx1MDIxNFxcdTAyMTZcXHUwMUFGXFx1MUVFQVxcdTFFRThcXHUxRUVFXFx1MUVFQ1xcdTFFRjBcXHUxRUU0XFx1MUU3MlxcdTAxNzJcXHUxRTc2XFx1MUU3NFxcdTAyNDRdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnVicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNTZcXHUyNENCXFx1RkYzNlxcdTFFN0NcXHUxRTdFXFx1MDFCMlxcdUE3NUVcXHUwMjQ1XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ1ZZJyxcclxuICAgIGxldHRlcnM6IC9bXFx1QTc2MF0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdXJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDA1N1xcdTI0Q0NcXHVGRjM3XFx1MUU4MFxcdTFFODJcXHUwMTc0XFx1MUU4NlxcdTFFODRcXHUxRTg4XFx1MkM3Ml0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdYJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDA1OFxcdTI0Q0RcXHVGRjM4XFx1MUU4QVxcdTFFOENdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnWScsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNTlcXHUyNENFXFx1RkYzOVxcdTFFRjJcXHUwMEREXFx1MDE3NlxcdTFFRjhcXHUwMjMyXFx1MUU4RVxcdTAxNzhcXHUxRUY2XFx1MUVGNFxcdTAxQjNcXHUwMjRFXFx1MUVGRV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdaJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA1QVxcdTI0Q0ZcXHVGRjNBXFx1MDE3OVxcdTFFOTBcXHUwMTdCXFx1MDE3RFxcdTFFOTJcXHUxRTk0XFx1MDFCNVxcdTAyMjRcXHUyQzdGXFx1MkM2QlxcdUE3NjJdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnYScsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNjFcXHUyNEQwXFx1RkY0MVxcdTFFOUFcXHUwMEUwXFx1MDBFMVxcdTAwRTJcXHUxRUE3XFx1MUVBNVxcdTFFQUJcXHUxRUE5XFx1MDBFM1xcdTAxMDFcXHUwMTAzXFx1MUVCMVxcdTFFQUZcXHUxRUI1XFx1MUVCM1xcdTAyMjdcXHUwMUUxXFx1MDBFNFxcdTAxREZcXHUxRUEzXFx1MDBFNVxcdTAxRkJcXHUwMUNFXFx1MDIwMVxcdTAyMDNcXHUxRUExXFx1MUVBRFxcdTFFQjdcXHUxRTAxXFx1MDEwNVxcdTJDNjVcXHUwMjUwXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2FhJyxcclxuICAgIGxldHRlcnM6IC9bXFx1QTczM10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdhZScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwRTZcXHUwMUZEXFx1MDFFM10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdhbycsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdUE3MzVdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnYXUnLFxyXG4gICAgbGV0dGVyczogL1tcXHVBNzM3XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2F2JyxcclxuICAgIGxldHRlcnM6IC9bXFx1QTczOVxcdUE3M0JdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnYXknLFxyXG4gICAgbGV0dGVyczogL1tcXHVBNzNEXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2InLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMDYyXFx1MjREMVxcdUZGNDJcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUwMTgwXFx1MDE4M1xcdTAyNTNdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnYycsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNjNcXHUyNEQyXFx1RkY0M1xcdTAxMDdcXHUwMTA5XFx1MDEwQlxcdTAxMERcXHUwMEU3XFx1MUUwOVxcdTAxODhcXHUwMjNDXFx1QTczRlxcdTIxODRdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnZCcsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNjRcXHUyNEQzXFx1RkY0NFxcdTFFMEJcXHUwMTBGXFx1MUUwRFxcdTFFMTFcXHUxRTEzXFx1MUUwRlxcdTAxMTFcXHUwMThDXFx1MDI1NlxcdTAyNTdcXHVBNzdBXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2R6JyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDFGM1xcdTAxQzZdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnZScsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNjVcXHUyNEQ0XFx1RkY0NVxcdTAwRThcXHUwMEU5XFx1MDBFQVxcdTFFQzFcXHUxRUJGXFx1MUVDNVxcdTFFQzNcXHUxRUJEXFx1MDExM1xcdTFFMTVcXHUxRTE3XFx1MDExNVxcdTAxMTdcXHUwMEVCXFx1MUVCQlxcdTAxMUJcXHUwMjA1XFx1MDIwN1xcdTFFQjlcXHUxRUM3XFx1MDIyOVxcdTFFMURcXHUwMTE5XFx1MUUxOVxcdTFFMUJcXHUwMjQ3XFx1MDI1QlxcdTAxRERdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnZicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNjZcXHUyNEQ1XFx1RkY0NlxcdTFFMUZcXHUwMTkyXFx1QTc3Q10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdnJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA2N1xcdTI0RDZcXHVGRjQ3XFx1MDFGNVxcdTAxMURcXHUxRTIxXFx1MDExRlxcdTAxMjFcXHUwMUU3XFx1MDEyM1xcdTAxRTVcXHUwMjYwXFx1QTdBMVxcdTFENzlcXHVBNzdGXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2gnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDY4XFx1MjREN1xcdUZGNDhcXHUwMTI1XFx1MUUyM1xcdTFFMjdcXHUwMjFGXFx1MUUyNVxcdTFFMjlcXHUxRTJCXFx1MUU5NlxcdTAxMjdcXHUyQzY4XFx1MkM3NlxcdTAyNjVdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnaHYnLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMTk1XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2knLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDY5XFx1MjREOFxcdUZGNDlcXHUwMEVDXFx1MDBFRFxcdTAwRUVcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMEVGXFx1MUUyRlxcdTFFQzlcXHUwMUQwXFx1MDIwOVxcdTAyMEJcXHUxRUNCXFx1MDEyRlxcdTFFMkRcXHUwMjY4XFx1MDEzMV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdqJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDA2QVxcdTI0RDlcXHVGRjRBXFx1MDEzNVxcdTAxRjBcXHUwMjQ5XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2snLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDZCXFx1MjREQVxcdUZGNEJcXHUxRTMxXFx1MDFFOVxcdTFFMzNcXHUwMTM3XFx1MUUzNVxcdTAxOTlcXHUyQzZBXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTdBM10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdsJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA2Q1xcdTI0REJcXHVGRjRDXFx1MDE0MFxcdTAxM0FcXHUwMTNFXFx1MUUzN1xcdTFFMzlcXHUwMTNDXFx1MUUzRFxcdTFFM0JcXHUwMTdGXFx1MDE0MlxcdTAxOUFcXHUwMjZCXFx1MkM2MVxcdUE3NDlcXHVBNzgxXFx1QTc0N10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdsaicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAxQzldL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnbScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNkRcXHUyNERDXFx1RkY0RFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTAyNzFcXHUwMjZGXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ24nLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDZFXFx1MjRERFxcdUZGNEVcXHUwMUY5XFx1MDE0NFxcdTAwRjFcXHUxRTQ1XFx1MDE0OFxcdTFFNDdcXHUwMTQ2XFx1MUU0QlxcdTFFNDlcXHUwMTlFXFx1MDI3MlxcdTAxNDlcXHVBNzkxXFx1QTdBNV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICduaicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAxQ0NdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnbycsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNkZcXHUyNERFXFx1RkY0RlxcdTAwRjJcXHUwMEYzXFx1MDBGNFxcdTFFRDNcXHUxRUQxXFx1MUVEN1xcdTFFRDVcXHUwMEY1XFx1MUU0RFxcdTAyMkRcXHUxRTRGXFx1MDE0RFxcdTFFNTFcXHUxRTUzXFx1MDE0RlxcdTAyMkZcXHUwMjMxXFx1MDBGNlxcdTAyMkJcXHUxRUNGXFx1MDE1MVxcdTAxRDJcXHUwMjBEXFx1MDIwRlxcdTAxQTFcXHUxRUREXFx1MUVEQlxcdTFFRTFcXHUxRURGXFx1MUVFM1xcdTFFQ0RcXHUxRUQ5XFx1MDFFQlxcdTAxRURcXHUwMEY4XFx1MDFGRlxcdTAyNTRcXHVBNzRCXFx1QTc0RFxcdTAyNzVdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnb2knLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMUEzXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ291JyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDIyM10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdvbycsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdUE3NEZdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAncCcsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNzBcXHUyNERGXFx1RkY1MFxcdTFFNTVcXHUxRTU3XFx1MDFBNVxcdTFEN0RcXHVBNzUxXFx1QTc1M1xcdUE3NTVdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAncScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNzFcXHUyNEUwXFx1RkY1MVxcdTAyNEJcXHVBNzU3XFx1QTc1OV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdyJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA3MlxcdTI0RTFcXHVGRjUyXFx1MDE1NVxcdTFFNTlcXHUwMTU5XFx1MDIxMVxcdTAyMTNcXHUxRTVCXFx1MUU1RFxcdTAxNTdcXHUxRTVGXFx1MDI0RFxcdTAyN0RcXHVBNzVCXFx1QTdBN1xcdUE3ODNdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAncycsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNzNcXHUyNEUyXFx1RkY1M1xcdTAwREZcXHUwMTVCXFx1MUU2NVxcdTAxNURcXHUxRTYxXFx1MDE2MVxcdTFFNjdcXHUxRTYzXFx1MUU2OVxcdTAyMTlcXHUwMTVGXFx1MDIzRlxcdUE3QTlcXHVBNzg1XFx1MUU5Ql0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICd0JyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA3NFxcdTI0RTNcXHVGRjU0XFx1MUU2QlxcdTFFOTdcXHUwMTY1XFx1MUU2RFxcdTAyMUJcXHUwMTYzXFx1MUU3MVxcdTFFNkZcXHUwMTY3XFx1MDFBRFxcdTAyODhcXHUyQzY2XFx1QTc4N10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICd0eicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdUE3MjldL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAndScsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNzVcXHUyNEU0XFx1RkY1NVxcdTAwRjlcXHUwMEZBXFx1MDBGQlxcdTAxNjlcXHUxRTc5XFx1MDE2QlxcdTFFN0JcXHUwMTZEXFx1MDBGQ1xcdTAxRENcXHUwMUQ4XFx1MDFENlxcdTAxREFcXHUxRUU3XFx1MDE2RlxcdTAxNzFcXHUwMUQ0XFx1MDIxNVxcdTAyMTdcXHUwMUIwXFx1MUVFQlxcdTFFRTlcXHUxRUVGXFx1MUVFRFxcdTFFRjFcXHUxRUU1XFx1MUU3M1xcdTAxNzNcXHUxRTc3XFx1MUU3NVxcdTAyODldL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAndicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNzZcXHUyNEU1XFx1RkY1NlxcdTFFN0RcXHUxRTdGXFx1MDI4QlxcdUE3NUZcXHUwMjhDXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ3Z5JyxcclxuICAgIGxldHRlcnM6IC9bXFx1QTc2MV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICd3JyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzNdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAneCcsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNzhcXHUyNEU3XFx1RkY1OFxcdTFFOEJcXHUxRThEXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ3knLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDc5XFx1MjRFOFxcdUZGNTlcXHUxRUYzXFx1MDBGRFxcdTAxNzdcXHUxRUY5XFx1MDIzM1xcdTFFOEZcXHUwMEZGXFx1MUVGN1xcdTFFOTlcXHUxRUY1XFx1MDFCNFxcdTAyNEZcXHUxRUZGXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ3onLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDdBXFx1MjRFOVxcdUZGNUFcXHUwMTdBXFx1MUU5MVxcdTAxN0NcXHUwMTdFXFx1MUU5M1xcdTFFOTVcXHUwMUI2XFx1MDIyNVxcdTAyNDBcXHUyQzZDXFx1QTc2M10vZyxcclxuICB9LFxyXG5dO1xyXG52YXIgZG9tYWlucyA9IFtcclxuICAnLmNvbScsXHJcbiAgJy5vcmcnLFxyXG4gICcubmV0JyxcclxuICAnLmFjJyxcclxuICAnLmFkJyxcclxuICAnLmFlJyxcclxuICAnLmFmJyxcclxuICAnLmFnJyxcclxuICAnLmFpJyxcclxuICAnLmFsJyxcclxuICAnLmFtJyxcclxuICAnLmFvJyxcclxuICAnLmFxJyxcclxuICAnLmFyJyxcclxuICAnLmFzJyxcclxuICAnLmF0JyxcclxuICAnLmF1JyxcclxuICAnLmF3JyxcclxuICAnLmF4JyxcclxuICAnLmF6JyxcclxuICAnLmJhJyxcclxuICAnLmJiJyxcclxuICAnLmJkJyxcclxuICAnLmJlJyxcclxuICAnLmJmJyxcclxuICAnLmJnJyxcclxuICAnLmJoJyxcclxuICAnLmJpJyxcclxuICAnLmJqJyxcclxuICAnLmJtJyxcclxuICAnLmJuJyxcclxuICAnLmJvJyxcclxuICAnLmJxJyxcclxuICAnLmJyJyxcclxuICAnLmJzJyxcclxuICAnLmJ0JyxcclxuICAnLmJ3JyxcclxuICAnLmJ5JyxcclxuICAnLmJ6JyxcclxuICAnLmNhJyxcclxuICAnLmNjJyxcclxuICAnLmNkJyxcclxuICAnLmNmJyxcclxuICAnLmNnJyxcclxuICAnLmNoJyxcclxuICAnLmNpJyxcclxuICAnLmNrJyxcclxuICAnLmNsJyxcclxuICAnLmNtJyxcclxuICAnLmNuJyxcclxuICAnLmNvJyxcclxuICAnLmNyJyxcclxuICAnLmN1JyxcclxuICAnLmN2JyxcclxuICAnLmN3JyxcclxuICAnLmN4JyxcclxuICAnLmN5JyxcclxuICAnLmN6JyxcclxuICAnLmRlJyxcclxuICAnLmRqJyxcclxuICAnLmRrJyxcclxuICAnLmRtJyxcclxuICAnLmRvJyxcclxuICAnLmR6JyxcclxuICAnLmVjJyxcclxuICAnLmVlJyxcclxuICAnLmVnJyxcclxuICAnLmVoJyxcclxuICAnLmVyJyxcclxuICAnLmVzJyxcclxuICAnLmV0JyxcclxuICAnLmV1JyxcclxuICAnLmZpJyxcclxuICAnLmZqJyxcclxuICAnLmZrJyxcclxuICAnLmZtJyxcclxuICAnLmZvJyxcclxuICAnLmZyJyxcclxuICAnLmdhJyxcclxuICAnLmdkJyxcclxuICAnLmdlJyxcclxuICAnLmdmJyxcclxuICAnLmdnJyxcclxuICAnLmdoJyxcclxuICAnLmdpJyxcclxuICAnLmdsJyxcclxuICAnLmdtJyxcclxuICAnLmduJyxcclxuICAnLmdwJyxcclxuICAnLmdxJyxcclxuICAnLmdyJyxcclxuICAnLmdzJyxcclxuICAnLmd0JyxcclxuICAnLmd1JyxcclxuICAnLmd3JyxcclxuICAnLmd5JyxcclxuICAnLmhrJyxcclxuICAnLmhtJyxcclxuICAnLmhuJyxcclxuICAnLmhyJyxcclxuICAnLmh0JyxcclxuICAnLmh1JyxcclxuICAnLmlkJyxcclxuICAnLmllJyxcclxuICAnLmlsJyxcclxuICAnLmltJyxcclxuICAnLmluJyxcclxuICAnLmlvJyxcclxuICAnLmlxJyxcclxuICAnLmlyJyxcclxuICAnLmlzJyxcclxuICAnLml0JyxcclxuICAnLmplJyxcclxuICAnLmptJyxcclxuICAnLmpvJyxcclxuICAnLmpwJyxcclxuICAnLmtlJyxcclxuICAnLmtnJyxcclxuICAnLmtoJyxcclxuICAnLmtpJyxcclxuICAnLmttJyxcclxuICAnLmtuJyxcclxuICAnLmtwJyxcclxuICAnLmtyJyxcclxuICAnLmt3JyxcclxuICAnLmt5JyxcclxuICAnLmt6JyxcclxuICAnLmxhJyxcclxuICAnLmxiJyxcclxuICAnLmxjJyxcclxuICAnLmxpJyxcclxuICAnLmxrJyxcclxuICAnLmxyJyxcclxuICAnLmxzJyxcclxuICAnLmx0JyxcclxuICAnLmx1JyxcclxuICAnLmx2JyxcclxuICAnLmx5JyxcclxuICAnLm1hJyxcclxuICAnLm1jJyxcclxuICAnLm1kJyxcclxuICAnLm1lJyxcclxuICAnLm1nJyxcclxuICAnLm1oJyxcclxuICAnLm1rJyxcclxuICAnLm1sJyxcclxuICAnLm1tJyxcclxuICAnLm1uJyxcclxuICAnLm1vJyxcclxuICAnLm1wJyxcclxuICAnLm1xJyxcclxuICAnLm1yJyxcclxuICAnLm1zJyxcclxuICAnLm10JyxcclxuICAnLm11JyxcclxuICAnLm12JyxcclxuICAnLm13JyxcclxuICAnLm14JyxcclxuICAnLm15JyxcclxuICAnLm16JyxcclxuICAnLm5hJyxcclxuICAnLm5jJyxcclxuICAnLm5lJyxcclxuICAnLm5mJyxcclxuICAnLm5nJyxcclxuICAnLm5pJyxcclxuICAnLm5sJyxcclxuICAnLm5vJyxcclxuICAnLm5wJyxcclxuICAnLm5yJyxcclxuICAnLm51JyxcclxuICAnLm56JyxcclxuICAnLm9tJyxcclxuICAnLnBhJyxcclxuICAnLnBlJyxcclxuICAnLnBmJyxcclxuICAnLnBnJyxcclxuICAnLnBoJyxcclxuICAnLnBrJyxcclxuICAnLnBsJyxcclxuICAnLnBtJyxcclxuICAnLnBuJyxcclxuICAnLnByJyxcclxuICAnLnBzJyxcclxuICAnLnB0JyxcclxuICAnLnB3JyxcclxuICAnLnB5JyxcclxuICAnLnFhJyxcclxuICAnLnJlJyxcclxuICAnLnJvJyxcclxuICAnLnJzJyxcclxuICAnLnJ1JyxcclxuICAnLnJ3JyxcclxuICAnLnNhJyxcclxuICAnLnNiJyxcclxuICAnLnNjJyxcclxuICAnLnNkJyxcclxuICAnLnNlJyxcclxuICAnLnNnJyxcclxuICAnLnNoJyxcclxuICAnLnNpJyxcclxuICAnLnNrJyxcclxuICAnLnNsJyxcclxuICAnLnNtJyxcclxuICAnLnNuJyxcclxuICAnLnNvJyxcclxuICAnLnNyJyxcclxuICAnLnNzJyxcclxuICAnLnN0JyxcclxuICAnLnN1JyxcclxuICAnLnN2JyxcclxuICAnLnN4JyxcclxuICAnLnN5JyxcclxuICAnLnN6JyxcclxuICAnLnRjJyxcclxuICAnLnRkJyxcclxuICAnLnRmJyxcclxuICAnLnRnJyxcclxuICAnLnRoJyxcclxuICAnLnRqJyxcclxuICAnLnRrJyxcclxuICAnLnRsJyxcclxuICAnLnRtJyxcclxuICAnLnRuJyxcclxuICAnLnRvJyxcclxuICAnLnRyJyxcclxuICAnLnR0JyxcclxuICAnLnR2JyxcclxuICAnLnR3JyxcclxuICAnLnR6JyxcclxuICAnLnVhJyxcclxuICAnLnVnJyxcclxuICAnLnVrJyxcclxuICAnLnVzJyxcclxuICAnLnV5JyxcclxuICAnLnV6JyxcclxuICAnLnZhJyxcclxuICAnLnZjJyxcclxuICAnLnZlJyxcclxuICAnLnZnJyxcclxuICAnLnZpJyxcclxuICAnLnZuJyxcclxuICAnLnZ1JyxcclxuICAnLndmJyxcclxuICAnLndzJyxcclxuICAnLnllJyxcclxuICAnLnl0JyxcclxuICAnLnphJyxcclxuICAnLnptJyxcclxuICAnLnp3JyxcclxuXTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUucmVtb3ZlRGlhY3JpdGljcyA9IGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gZGVmYXVsdERpYWNyaXRpY3NSZW1vdmFsTWFwLnJlZHVjZSgocmVzdWx0LCBsZXR0ZXIpID0+IHtcclxuICAgIHJldHVybiByZXN1bHQucmVwbGFjZShsZXR0ZXIubGV0dGVycywgbGV0dGVyLmJhc2UpO1xyXG4gIH0sIHRoaXMpO1xyXG59O1xyXG5cclxuY29uc3QgU1BFQ0lBTF9DSEFSQUNURVJTID0gJ1xcXFxcXFxcLyAhP0AjJCVeJiooKV8rOi57fSw7XFxcXC1cXCdgYOKAmeKAmFwiJztcclxuU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVTcGVjaWFsQ2hhcmFjdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gdGhpcy5yZXBsYWNlKG5ldyBSZWdFeHAoYFske1NQRUNJQUxfQ0hBUkFDVEVSU31dYCwgJ2dpJyksICcnKTtcclxufTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUucmVtb3ZlQWxsQnV0TGV0dGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gdGhpcy50b0xvd2VyQ2FzZSgpLnJlbW92ZURpYWNyaXRpY3MoKS5yZW1vdmVTcGVjaWFsQ2hhcmFjdGVycygpO1xyXG59O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5jb25jZWFsID0gZnVuY3Rpb24gKGV4dHJhKSB7XHJcbiAgcmV0dXJuIHRoaXMucmVwbGFjZShuZXcgUmVnRXhwKGBbXiR7U1BFQ0lBTF9DSEFSQUNURVJTfSR7ZXh0cmF9XWAsICdnaScpLCAn4oGOJyk7XHJcbn07XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLmNhcGl0YWxpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIHRoaXMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnNsaWNlKDEpO1xyXG59O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVIVE1MID0gZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiB0aGlzLnJlcGxhY2UoJz4nLCAnXFx1MjI3QicpLnJlcGxhY2UoJzwnLCAnXFx1MjI3QScpO1xyXG59O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5hbmdsZUJyYWNrZXRzID0gZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiB0aGlzLnJlcGxhY2UoJzwnLCAnJmx0OycpLnJlcGxhY2UoJz4nLCAnJmd0OycpO1xyXG59O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlQXJyYXkgPSBmdW5jdGlvbiAoZmluZCwgcmVwbGFjZSkge1xyXG4gIHZhciByZXBsYWNlU3RyaW5nID0gdGhpcztcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbmQubGVuZ3RoOyBpKyspIHtcclxuICAgIHJlcGxhY2VTdHJpbmcgPSByZXBsYWNlU3RyaW5nLnJlcGxhY2UoZmluZFtpXSwgcmVwbGFjZVtpXSk7XHJcbiAgfVxyXG4gIHJldHVybiByZXBsYWNlU3RyaW5nO1xyXG59O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5tYXNrVVJMcyA9IGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gdGhpcy5yZXBsYWNlQXJyYXkoWydodHRwczovLycsICdodHRwOi8vJ10sICdub3BlOi8vJykucmVwbGFjZUFycmF5KGRvbWFpbnMsICcubm9wZScpO1xyXG59O1xyXG5cclxuTnVtYmVyLnByb3RvdHlwZS5tYWtlUmVhZGFibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCAnLCcpO1xyXG59O1xyXG5cclxuTnVtYmVyLnByb3RvdHlwZS5tYWtlUGVyY2VudGFnZSA9IGZ1bmN0aW9uIChkZWNpbWFscykge1xyXG4gIGlmICghZGVjaW1hbHMpIGRlY2ltYWxzID0gMjtcclxuICByZXR1cm4gYCR7KHRoaXMgKiAxMDApLnRvRml4ZWQoZGVjaW1hbHMpfSVgO1xyXG59O1xyXG5cclxuQXJyYXkucHJvdG90eXBlLmdldFJhbmRvbSA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgaWYgKG4gPiB0aGlzLmxlbmd0aCkge1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShuKTtcclxuICBsZXQgbGVuID0gdGhpcy5sZW5ndGg7XHJcbiAgY29uc3QgdGFrZW4gPSBuZXcgQXJyYXkobGVuKTtcclxuICB3aGlsZSAobi0tKSB7XHJcbiAgICBjb25zdCB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbGVuKTtcclxuICAgIHJlc3VsdFtuXSA9IHRoaXNbeCBpbiB0YWtlbiA/IHRha2VuW3hdIDogeF07XHJcbiAgICB0YWtlblt4XSA9IC0tbGVuIGluIHRha2VuID8gdGFrZW5bbGVuXSA6IGxlbjtcclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbmNvbnN0IHNvcnRPYmplY3QgPSAob2JqLCBkaXJlY3Rpb24pID0+IHtcclxuICBsZXQgYXJyID0gW107XHJcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICBhcnIucHVzaChba2V5LCBvYmpba2V5XV0pO1xyXG4gIH1cclxuICBhcnIuc29ydCgoYSwgYikgPT4gKGRpcmVjdGlvbiA/IGFbMV0gLSBiWzFdIDogYlsxXSAtIGFbMV0pKTtcclxuICBsZXQgb2JqU29ydGVkID0ge307XHJcbiAgYXJyLmZvckVhY2goKGl0ZW0pID0+IChvYmpTb3J0ZWRbaXRlbVswXV0gPSBpdGVtWzFdKSk7XHJcbiAgLy9hcnIuc29ydChmdW5jdGlvbihhLCBiKSB7IGEudmFsdWUudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIudmFsdWUudG9Mb3dlckNhc2UoKSk7IH0pOyAvL3VzZSB0aGlzIHRvIHNvcnQgYXMgc3RyaW5nc1xyXG4gIHJldHVybiBvYmpTb3J0ZWQ7IC8vIHJldHVybnMgYXJyYXlcclxufTtcclxuIiwidmFyIGRlZmF1bHREaWFjcml0aWNzUmVtb3ZhbE1hcD1be2Jhc2U6XCJBXCIsbGV0dGVyczovW1xcdTAwNDFcXHUyNEI2XFx1RkYyMVxcdTAwQzBcXHUwMEMxXFx1MDBDMlxcdTFFQTZcXHUxRUE0XFx1MUVBQVxcdTFFQThcXHUwMEMzXFx1MDEwMFxcdTAxMDJcXHUxRUIwXFx1MUVBRVxcdTFFQjRcXHUxRUIyXFx1MDIyNlxcdTAxRTBcXHUwMEM0XFx1MDFERVxcdTFFQTJcXHUwMEM1XFx1MDFGQVxcdTAxQ0RcXHUwMjAwXFx1MDIwMlxcdTFFQTBcXHUxRUFDXFx1MUVCNlxcdTFFMDBcXHUwMTA0XFx1MDIzQVxcdTJDNkZdL2d9LHtiYXNlOlwiQUFcIixsZXR0ZXJzOi9bXFx1QTczMl0vZ30se2Jhc2U6XCJBRVwiLGxldHRlcnM6L1tcXHUwMEM2XFx1MDFGQ1xcdTAxRTJdL2d9LHtiYXNlOlwiQU9cIixsZXR0ZXJzOi9bXFx1QTczNF0vZ30se2Jhc2U6XCJBVVwiLGxldHRlcnM6L1tcXHVBNzM2XS9nfSx7YmFzZTpcIkFWXCIsbGV0dGVyczovW1xcdUE3MzhcXHVBNzNBXS9nfSx7YmFzZTpcIkFZXCIsbGV0dGVyczovW1xcdUE3M0NdL2d9LHtiYXNlOlwiQlwiLGxldHRlcnM6L1tcXHUwMDQyXFx1MjRCN1xcdUZGMjJcXHUxRTAyXFx1MUUwNFxcdTFFMDZcXHUwMjQzXFx1MDE4MlxcdTAxODFdL2d9LHtiYXNlOlwiQ1wiLGxldHRlcnM6L1tcXHUwMDQzXFx1MjRCOFxcdUZGMjNcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDBDN1xcdTFFMDhcXHUwMTg3XFx1MDIzQlxcdUE3M0VdL2d9LHtiYXNlOlwiRFwiLGxldHRlcnM6L1tcXHUwMDQ0XFx1MjRCOVxcdUZGMjRcXHUxRTBBXFx1MDEwRVxcdTFFMENcXHUxRTEwXFx1MUUxMlxcdTFFMEVcXHUwMTEwXFx1MDE4QlxcdTAxOEFcXHUwMTg5XFx1QTc3OV0vZ30se2Jhc2U6XCJEWlwiLGxldHRlcnM6L1tcXHUwMUYxXFx1MDFDNF0vZ30se2Jhc2U6XCJEelwiLGxldHRlcnM6L1tcXHUwMUYyXFx1MDFDNV0vZ30se2Jhc2U6XCJFXCIsbGV0dGVyczovW1xcdTAwNDVcXHUyNEJBXFx1RkYyNVxcdTAwQzhcXHUwMEM5XFx1MDBDQVxcdTFFQzBcXHUxRUJFXFx1MUVDNFxcdTFFQzJcXHUxRUJDXFx1MDExMlxcdTFFMTRcXHUxRTE2XFx1MDExNFxcdTAxMTZcXHUwMENCXFx1MUVCQVxcdTAxMUFcXHUwMjA0XFx1MDIwNlxcdTFFQjhcXHUxRUM2XFx1MDIyOFxcdTFFMUNcXHUwMTE4XFx1MUUxOFxcdTFFMUFcXHUwMTkwXFx1MDE4RV0vZ30se2Jhc2U6XCJGXCIsbGV0dGVyczovW1xcdTAwNDZcXHUyNEJCXFx1RkYyNlxcdTFFMUVcXHUwMTkxXFx1QTc3Ql0vZ30se2Jhc2U6XCJHXCIsbGV0dGVyczovW1xcdTAwNDdcXHUyNEJDXFx1RkYyN1xcdTAxRjRcXHUwMTFDXFx1MUUyMFxcdTAxMUVcXHUwMTIwXFx1MDFFNlxcdTAxMjJcXHUwMUU0XFx1MDE5M1xcdUE3QTBcXHVBNzdEXFx1QTc3RV0vZ30se2Jhc2U6XCJIXCIsbGV0dGVyczovW1xcdTAwNDhcXHUyNEJEXFx1RkYyOFxcdTAxMjRcXHUxRTIyXFx1MUUyNlxcdTAyMUVcXHUxRTI0XFx1MUUyOFxcdTFFMkFcXHUwMTI2XFx1MkM2N1xcdTJDNzVcXHVBNzhEXS9nfSx7YmFzZTpcIklcIixsZXR0ZXJzOi9bXFx1MDA0OVxcdTI0QkVcXHVGRjI5XFx1MDBDQ1xcdTAwQ0RcXHUwMENFXFx1MDEyOFxcdTAxMkFcXHUwMTJDXFx1MDEzMFxcdTAwQ0ZcXHUxRTJFXFx1MUVDOFxcdTAxQ0ZcXHUwMjA4XFx1MDIwQVxcdTFFQ0FcXHUwMTJFXFx1MUUyQ1xcdTAxOTddL2d9LHtiYXNlOlwiSlwiLGxldHRlcnM6L1tcXHUwMDRBXFx1MjRCRlxcdUZGMkFcXHUwMTM0XFx1MDI0OF0vZ30se2Jhc2U6XCJLXCIsbGV0dGVyczovW1xcdTAwNEJcXHUyNEMwXFx1RkYyQlxcdTFFMzBcXHUwMUU4XFx1MUUzMlxcdTAxMzZcXHUxRTM0XFx1MDE5OFxcdTJDNjlcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBN0EyXS9nfSx7YmFzZTpcIkxcIixsZXR0ZXJzOi9bXFx1MDA0Q1xcdTI0QzFcXHVGRjJDXFx1MDEzRlxcdTAxMzlcXHUwMTNEXFx1MUUzNlxcdTFFMzhcXHUwMTNCXFx1MUUzQ1xcdTFFM0FcXHUwMTQxXFx1MDIzRFxcdTJDNjJcXHUyQzYwXFx1QTc0OFxcdUE3NDZcXHVBNzgwXS9nfSx7YmFzZTpcIkxKXCIsbGV0dGVyczovW1xcdTAxQzddL2d9LHtiYXNlOlwiTGpcIixsZXR0ZXJzOi9bXFx1MDFDOF0vZ30se2Jhc2U6XCJNXCIsbGV0dGVyczovW1xcdTAwNERcXHUyNEMyXFx1RkYyRFxcdTFFM0VcXHUxRTQwXFx1MUU0MlxcdTJDNkVcXHUwMTlDXS9nfSx7YmFzZTpcIk5cIixsZXR0ZXJzOi9bXFx1MDA0RVxcdTI0QzNcXHVGRjJFXFx1MDFGOFxcdTAxNDNcXHUwMEQxXFx1MUU0NFxcdTAxNDdcXHUxRTQ2XFx1MDE0NVxcdTFFNEFcXHUxRTQ4XFx1MDIyMFxcdTAxOURcXHVBNzkwXFx1QTdBNF0vZ30se2Jhc2U6XCJOSlwiLGxldHRlcnM6L1tcXHUwMUNBXS9nfSx7YmFzZTpcIk5qXCIsbGV0dGVyczovW1xcdTAxQ0JdL2d9LHtiYXNlOlwiT1wiLGxldHRlcnM6L1tcXHUwMDRGXFx1MjRDNFxcdUZGMkZcXHUwMEQyXFx1MDBEM1xcdTAwRDRcXHUxRUQyXFx1MUVEMFxcdTFFRDZcXHUxRUQ0XFx1MDBENVxcdTFFNENcXHUwMjJDXFx1MUU0RVxcdTAxNENcXHUxRTUwXFx1MUU1MlxcdTAxNEVcXHUwMjJFXFx1MDIzMFxcdTAwRDZcXHUwMjJBXFx1MUVDRVxcdTAxNTBcXHUwMUQxXFx1MDIwQ1xcdTAyMEVcXHUwMUEwXFx1MUVEQ1xcdTFFREFcXHUxRUUwXFx1MUVERVxcdTFFRTJcXHUxRUNDXFx1MUVEOFxcdTAxRUFcXHUwMUVDXFx1MDBEOFxcdTAxRkVcXHUwMTg2XFx1MDE5RlxcdUE3NEFcXHVBNzRDXS9nfSx7YmFzZTpcIk9JXCIsbGV0dGVyczovW1xcdTAxQTJdL2d9LHtiYXNlOlwiT09cIixsZXR0ZXJzOi9bXFx1QTc0RV0vZ30se2Jhc2U6XCJPVVwiLGxldHRlcnM6L1tcXHUwMjIyXS9nfSx7YmFzZTpcIlBcIixsZXR0ZXJzOi9bXFx1MDA1MFxcdTI0QzVcXHVGRjMwXFx1MUU1NFxcdTFFNTZcXHUwMUE0XFx1MkM2M1xcdUE3NTBcXHVBNzUyXFx1QTc1NF0vZ30se2Jhc2U6XCJRXCIsbGV0dGVyczovW1xcdTAwNTFcXHUyNEM2XFx1RkYzMVxcdUE3NTZcXHVBNzU4XFx1MDI0QV0vZ30se2Jhc2U6XCJSXCIsbGV0dGVyczovW1xcdTAwNTJcXHUyNEM3XFx1RkYzMlxcdTAxNTRcXHUxRTU4XFx1MDE1OFxcdTAyMTBcXHUwMjEyXFx1MUU1QVxcdTFFNUNcXHUwMTU2XFx1MUU1RVxcdTAyNENcXHUyQzY0XFx1QTc1QVxcdUE3QTZcXHVBNzgyXS9nfSx7YmFzZTpcIlNcIixsZXR0ZXJzOi9bXFx1MDA1M1xcdTI0QzhcXHVGRjMzXFx1MUU5RVxcdTAxNUFcXHUxRTY0XFx1MDE1Q1xcdTFFNjBcXHUwMTYwXFx1MUU2NlxcdTFFNjJcXHUxRTY4XFx1MDIxOFxcdTAxNUVcXHUyQzdFXFx1QTdBOFxcdUE3ODRdL2d9LHtiYXNlOlwiVFwiLGxldHRlcnM6L1tcXHUwMDU0XFx1MjRDOVxcdUZGMzRcXHUxRTZBXFx1MDE2NFxcdTFFNkNcXHUwMjFBXFx1MDE2MlxcdTFFNzBcXHUxRTZFXFx1MDE2NlxcdTAxQUNcXHUwMUFFXFx1MDIzRVxcdUE3ODZdL2d9LHtiYXNlOlwiVFpcIixsZXR0ZXJzOi9bXFx1QTcyOF0vZ30se2Jhc2U6XCJVXCIsbGV0dGVyczovW1xcdTAwNTVcXHUyNENBXFx1RkYzNVxcdTAwRDlcXHUwMERBXFx1MDBEQlxcdTAxNjhcXHUxRTc4XFx1MDE2QVxcdTFFN0FcXHUwMTZDXFx1MDBEQ1xcdTAxREJcXHUwMUQ3XFx1MDFENVxcdTAxRDlcXHUxRUU2XFx1MDE2RVxcdTAxNzBcXHUwMUQzXFx1MDIxNFxcdTAyMTZcXHUwMUFGXFx1MUVFQVxcdTFFRThcXHUxRUVFXFx1MUVFQ1xcdTFFRjBcXHUxRUU0XFx1MUU3MlxcdTAxNzJcXHUxRTc2XFx1MUU3NFxcdTAyNDRdL2d9LHtiYXNlOlwiVlwiLGxldHRlcnM6L1tcXHUwMDU2XFx1MjRDQlxcdUZGMzZcXHUxRTdDXFx1MUU3RVxcdTAxQjJcXHVBNzVFXFx1MDI0NV0vZ30se2Jhc2U6XCJWWVwiLGxldHRlcnM6L1tcXHVBNzYwXS9nfSx7YmFzZTpcIldcIixsZXR0ZXJzOi9bXFx1MDA1N1xcdTI0Q0NcXHVGRjM3XFx1MUU4MFxcdTFFODJcXHUwMTc0XFx1MUU4NlxcdTFFODRcXHUxRTg4XFx1MkM3Ml0vZ30se2Jhc2U6XCJYXCIsbGV0dGVyczovW1xcdTAwNThcXHUyNENEXFx1RkYzOFxcdTFFOEFcXHUxRThDXS9nfSx7YmFzZTpcIllcIixsZXR0ZXJzOi9bXFx1MDA1OVxcdTI0Q0VcXHVGRjM5XFx1MUVGMlxcdTAwRERcXHUwMTc2XFx1MUVGOFxcdTAyMzJcXHUxRThFXFx1MDE3OFxcdTFFRjZcXHUxRUY0XFx1MDFCM1xcdTAyNEVcXHUxRUZFXS9nfSx7YmFzZTpcIlpcIixsZXR0ZXJzOi9bXFx1MDA1QVxcdTI0Q0ZcXHVGRjNBXFx1MDE3OVxcdTFFOTBcXHUwMTdCXFx1MDE3RFxcdTFFOTJcXHUxRTk0XFx1MDFCNVxcdTAyMjRcXHUyQzdGXFx1MkM2QlxcdUE3NjJdL2d9LHtiYXNlOlwiYVwiLGxldHRlcnM6L1tcXHUwMDYxXFx1MjREMFxcdUZGNDFcXHUxRTlBXFx1MDBFMFxcdTAwRTFcXHUwMEUyXFx1MUVBN1xcdTFFQTVcXHUxRUFCXFx1MUVBOVxcdTAwRTNcXHUwMTAxXFx1MDEwM1xcdTFFQjFcXHUxRUFGXFx1MUVCNVxcdTFFQjNcXHUwMjI3XFx1MDFFMVxcdTAwRTRcXHUwMURGXFx1MUVBM1xcdTAwRTVcXHUwMUZCXFx1MDFDRVxcdTAyMDFcXHUwMjAzXFx1MUVBMVxcdTFFQURcXHUxRUI3XFx1MUUwMVxcdTAxMDVcXHUyQzY1XFx1MDI1MF0vZ30se2Jhc2U6XCJhYVwiLGxldHRlcnM6L1tcXHVBNzMzXS9nfSx7YmFzZTpcImFlXCIsbGV0dGVyczovW1xcdTAwRTZcXHUwMUZEXFx1MDFFM10vZ30se2Jhc2U6XCJhb1wiLGxldHRlcnM6L1tcXHVBNzM1XS9nfSx7YmFzZTpcImF1XCIsbGV0dGVyczovW1xcdUE3MzddL2d9LHtiYXNlOlwiYXZcIixsZXR0ZXJzOi9bXFx1QTczOVxcdUE3M0JdL2d9LHtiYXNlOlwiYXlcIixsZXR0ZXJzOi9bXFx1QTczRF0vZ30se2Jhc2U6XCJiXCIsbGV0dGVyczovW1xcdTAwNjJcXHUyNEQxXFx1RkY0MlxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTAxODBcXHUwMTgzXFx1MDI1M10vZ30se2Jhc2U6XCJjXCIsbGV0dGVyczovW1xcdTAwNjNcXHUyNEQyXFx1RkY0M1xcdTAxMDdcXHUwMTA5XFx1MDEwQlxcdTAxMERcXHUwMEU3XFx1MUUwOVxcdTAxODhcXHUwMjNDXFx1QTczRlxcdTIxODRdL2d9LHtiYXNlOlwiZFwiLGxldHRlcnM6L1tcXHUwMDY0XFx1MjREM1xcdUZGNDRcXHUxRTBCXFx1MDEwRlxcdTFFMERcXHUxRTExXFx1MUUxM1xcdTFFMEZcXHUwMTExXFx1MDE4Q1xcdTAyNTZcXHUwMjU3XFx1QTc3QV0vZ30se2Jhc2U6XCJkelwiLGxldHRlcnM6L1tcXHUwMUYzXFx1MDFDNl0vZ30se2Jhc2U6XCJlXCIsbGV0dGVyczovW1xcdTAwNjVcXHUyNEQ0XFx1RkY0NVxcdTAwRThcXHUwMEU5XFx1MDBFQVxcdTFFQzFcXHUxRUJGXFx1MUVDNVxcdTFFQzNcXHUxRUJEXFx1MDExM1xcdTFFMTVcXHUxRTE3XFx1MDExNVxcdTAxMTdcXHUwMEVCXFx1MUVCQlxcdTAxMUJcXHUwMjA1XFx1MDIwN1xcdTFFQjlcXHUxRUM3XFx1MDIyOVxcdTFFMURcXHUwMTE5XFx1MUUxOVxcdTFFMUJcXHUwMjQ3XFx1MDI1QlxcdTAxRERdL2d9LHtiYXNlOlwiZlwiLGxldHRlcnM6L1tcXHUwMDY2XFx1MjRENVxcdUZGNDZcXHUxRTFGXFx1MDE5MlxcdUE3N0NdL2d9LHtiYXNlOlwiZ1wiLGxldHRlcnM6L1tcXHUwMDY3XFx1MjRENlxcdUZGNDdcXHUwMUY1XFx1MDExRFxcdTFFMjFcXHUwMTFGXFx1MDEyMVxcdTAxRTdcXHUwMTIzXFx1MDFFNVxcdTAyNjBcXHVBN0ExXFx1MUQ3OVxcdUE3N0ZdL2d9LHtiYXNlOlwiaFwiLGxldHRlcnM6L1tcXHUwMDY4XFx1MjREN1xcdUZGNDhcXHUwMTI1XFx1MUUyM1xcdTFFMjdcXHUwMjFGXFx1MUUyNVxcdTFFMjlcXHUxRTJCXFx1MUU5NlxcdTAxMjdcXHUyQzY4XFx1MkM3NlxcdTAyNjVdL2d9LHtiYXNlOlwiaHZcIixsZXR0ZXJzOi9bXFx1MDE5NV0vZ30se2Jhc2U6XCJpXCIsbGV0dGVyczovW1xcdTAwNjlcXHUyNEQ4XFx1RkY0OVxcdTAwRUNcXHUwMEVEXFx1MDBFRVxcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAwRUZcXHUxRTJGXFx1MUVDOVxcdTAxRDBcXHUwMjA5XFx1MDIwQlxcdTFFQ0JcXHUwMTJGXFx1MUUyRFxcdTAyNjhcXHUwMTMxXS9nfSx7YmFzZTpcImpcIixsZXR0ZXJzOi9bXFx1MDA2QVxcdTI0RDlcXHVGRjRBXFx1MDEzNVxcdTAxRjBcXHUwMjQ5XS9nfSx7YmFzZTpcImtcIixsZXR0ZXJzOi9bXFx1MDA2QlxcdTI0REFcXHVGRjRCXFx1MUUzMVxcdTAxRTlcXHUxRTMzXFx1MDEzN1xcdTFFMzVcXHUwMTk5XFx1MkM2QVxcdUE3NDFcXHVBNzQzXFx1QTc0NVxcdUE3QTNdL2d9LHtiYXNlOlwibFwiLGxldHRlcnM6L1tcXHUwMDZDXFx1MjREQlxcdUZGNENcXHUwMTQwXFx1MDEzQVxcdTAxM0VcXHUxRTM3XFx1MUUzOVxcdTAxM0NcXHUxRTNEXFx1MUUzQlxcdTAxN0ZcXHUwMTQyXFx1MDE5QVxcdTAyNkJcXHUyQzYxXFx1QTc0OVxcdUE3ODFcXHVBNzQ3XS9nfSx7YmFzZTpcImxqXCIsbGV0dGVyczovW1xcdTAxQzldL2d9LHtiYXNlOlwibVwiLGxldHRlcnM6L1tcXHUwMDZEXFx1MjREQ1xcdUZGNERcXHUxRTNGXFx1MUU0MVxcdTFFNDNcXHUwMjcxXFx1MDI2Rl0vZ30se2Jhc2U6XCJuXCIsbGV0dGVyczovW1xcdTAwNkVcXHUyNEREXFx1RkY0RVxcdTAxRjlcXHUwMTQ0XFx1MDBGMVxcdTFFNDVcXHUwMTQ4XFx1MUU0N1xcdTAxNDZcXHUxRTRCXFx1MUU0OVxcdTAxOUVcXHUwMjcyXFx1MDE0OVxcdUE3OTFcXHVBN0E1XS9nfSx7YmFzZTpcIm5qXCIsbGV0dGVyczovW1xcdTAxQ0NdL2d9LHtiYXNlOlwib1wiLGxldHRlcnM6L1tcXHUwMDZGXFx1MjRERVxcdUZGNEZcXHUwMEYyXFx1MDBGM1xcdTAwRjRcXHUxRUQzXFx1MUVEMVxcdTFFRDdcXHUxRUQ1XFx1MDBGNVxcdTFFNERcXHUwMjJEXFx1MUU0RlxcdTAxNERcXHUxRTUxXFx1MUU1M1xcdTAxNEZcXHUwMjJGXFx1MDIzMVxcdTAwRjZcXHUwMjJCXFx1MUVDRlxcdTAxNTFcXHUwMUQyXFx1MDIwRFxcdTAyMEZcXHUwMUExXFx1MUVERFxcdTFFREJcXHUxRUUxXFx1MUVERlxcdTFFRTNcXHUxRUNEXFx1MUVEOVxcdTAxRUJcXHUwMUVEXFx1MDBGOFxcdTAxRkZcXHUwMjU0XFx1QTc0QlxcdUE3NERcXHUwMjc1XS9nfSx7YmFzZTpcIm9pXCIsbGV0dGVyczovW1xcdTAxQTNdL2d9LHtiYXNlOlwib3VcIixsZXR0ZXJzOi9bXFx1MDIyM10vZ30se2Jhc2U6XCJvb1wiLGxldHRlcnM6L1tcXHVBNzRGXS9nfSx7YmFzZTpcInBcIixsZXR0ZXJzOi9bXFx1MDA3MFxcdTI0REZcXHVGRjUwXFx1MUU1NVxcdTFFNTdcXHUwMUE1XFx1MUQ3RFxcdUE3NTFcXHVBNzUzXFx1QTc1NV0vZ30se2Jhc2U6XCJxXCIsbGV0dGVyczovW1xcdTAwNzFcXHUyNEUwXFx1RkY1MVxcdTAyNEJcXHVBNzU3XFx1QTc1OV0vZ30se2Jhc2U6XCJyXCIsbGV0dGVyczovW1xcdTAwNzJcXHUyNEUxXFx1RkY1MlxcdTAxNTVcXHUxRTU5XFx1MDE1OVxcdTAyMTFcXHUwMjEzXFx1MUU1QlxcdTFFNURcXHUwMTU3XFx1MUU1RlxcdTAyNERcXHUwMjdEXFx1QTc1QlxcdUE3QTdcXHVBNzgzXS9nfSx7YmFzZTpcInNcIixsZXR0ZXJzOi9bXFx1MDA3M1xcdTI0RTJcXHVGRjUzXFx1MDBERlxcdTAxNUJcXHUxRTY1XFx1MDE1RFxcdTFFNjFcXHUwMTYxXFx1MUU2N1xcdTFFNjNcXHUxRTY5XFx1MDIxOVxcdTAxNUZcXHUwMjNGXFx1QTdBOVxcdUE3ODVcXHUxRTlCXS9nfSx7YmFzZTpcInRcIixsZXR0ZXJzOi9bXFx1MDA3NFxcdTI0RTNcXHVGRjU0XFx1MUU2QlxcdTFFOTdcXHUwMTY1XFx1MUU2RFxcdTAyMUJcXHUwMTYzXFx1MUU3MVxcdTFFNkZcXHUwMTY3XFx1MDFBRFxcdTAyODhcXHUyQzY2XFx1QTc4N10vZ30se2Jhc2U6XCJ0elwiLGxldHRlcnM6L1tcXHVBNzI5XS9nfSx7YmFzZTpcInVcIixsZXR0ZXJzOi9bXFx1MDA3NVxcdTI0RTRcXHVGRjU1XFx1MDBGOVxcdTAwRkFcXHUwMEZCXFx1MDE2OVxcdTFFNzlcXHUwMTZCXFx1MUU3QlxcdTAxNkRcXHUwMEZDXFx1MDFEQ1xcdTAxRDhcXHUwMUQ2XFx1MDFEQVxcdTFFRTdcXHUwMTZGXFx1MDE3MVxcdTAxRDRcXHUwMjE1XFx1MDIxN1xcdTAxQjBcXHUxRUVCXFx1MUVFOVxcdTFFRUZcXHUxRUVEXFx1MUVGMVxcdTFFRTVcXHUxRTczXFx1MDE3M1xcdTFFNzdcXHUxRTc1XFx1MDI4OV0vZ30se2Jhc2U6XCJ2XCIsbGV0dGVyczovW1xcdTAwNzZcXHUyNEU1XFx1RkY1NlxcdTFFN0RcXHUxRTdGXFx1MDI4QlxcdUE3NUZcXHUwMjhDXS9nfSx7YmFzZTpcInZ5XCIsbGV0dGVyczovW1xcdUE3NjFdL2d9LHtiYXNlOlwid1wiLGxldHRlcnM6L1tcXHUwMDc3XFx1MjRFNlxcdUZGNTdcXHUxRTgxXFx1MUU4M1xcdTAxNzVcXHUxRTg3XFx1MUU4NVxcdTFFOThcXHUxRTg5XFx1MkM3M10vZ30se2Jhc2U6XCJ4XCIsbGV0dGVyczovW1xcdTAwNzhcXHUyNEU3XFx1RkY1OFxcdTFFOEJcXHUxRThEXS9nfSx7YmFzZTpcInlcIixsZXR0ZXJzOi9bXFx1MDA3OVxcdTI0RThcXHVGRjU5XFx1MUVGM1xcdTAwRkRcXHUwMTc3XFx1MUVGOVxcdTAyMzNcXHUxRThGXFx1MDBGRlxcdTFFRjdcXHUxRTk5XFx1MUVGNVxcdTAxQjRcXHUwMjRGXFx1MUVGRl0vZ30se2Jhc2U6XCJ6XCIsbGV0dGVyczovW1xcdTAwN0FcXHUyNEU5XFx1RkY1QVxcdTAxN0FcXHUxRTkxXFx1MDE3Q1xcdTAxN0VcXHUxRTkzXFx1MUU5NVxcdTAxQjZcXHUwMjI1XFx1MDI0MFxcdTJDNkNcXHVBNzYzXS9nfV0sZG9tYWlucz1bXCIuY29tXCIsXCIub3JnXCIsXCIubmV0XCIsXCIuYWNcIixcIi5hZFwiLFwiLmFlXCIsXCIuYWZcIixcIi5hZ1wiLFwiLmFpXCIsXCIuYWxcIixcIi5hbVwiLFwiLmFvXCIsXCIuYXFcIixcIi5hclwiLFwiLmFzXCIsXCIuYXRcIixcIi5hdVwiLFwiLmF3XCIsXCIuYXhcIixcIi5helwiLFwiLmJhXCIsXCIuYmJcIixcIi5iZFwiLFwiLmJlXCIsXCIuYmZcIixcIi5iZ1wiLFwiLmJoXCIsXCIuYmlcIixcIi5ialwiLFwiLmJtXCIsXCIuYm5cIixcIi5ib1wiLFwiLmJxXCIsXCIuYnJcIixcIi5ic1wiLFwiLmJ0XCIsXCIuYndcIixcIi5ieVwiLFwiLmJ6XCIsXCIuY2FcIixcIi5jY1wiLFwiLmNkXCIsXCIuY2ZcIixcIi5jZ1wiLFwiLmNoXCIsXCIuY2lcIixcIi5ja1wiLFwiLmNsXCIsXCIuY21cIixcIi5jblwiLFwiLmNvXCIsXCIuY3JcIixcIi5jdVwiLFwiLmN2XCIsXCIuY3dcIixcIi5jeFwiLFwiLmN5XCIsXCIuY3pcIixcIi5kZVwiLFwiLmRqXCIsXCIuZGtcIixcIi5kbVwiLFwiLmRvXCIsXCIuZHpcIixcIi5lY1wiLFwiLmVlXCIsXCIuZWdcIixcIi5laFwiLFwiLmVyXCIsXCIuZXNcIixcIi5ldFwiLFwiLmV1XCIsXCIuZmlcIixcIi5malwiLFwiLmZrXCIsXCIuZm1cIixcIi5mb1wiLFwiLmZyXCIsXCIuZ2FcIixcIi5nZFwiLFwiLmdlXCIsXCIuZ2ZcIixcIi5nZ1wiLFwiLmdoXCIsXCIuZ2lcIixcIi5nbFwiLFwiLmdtXCIsXCIuZ25cIixcIi5ncFwiLFwiLmdxXCIsXCIuZ3JcIixcIi5nc1wiLFwiLmd0XCIsXCIuZ3VcIixcIi5nd1wiLFwiLmd5XCIsXCIuaGtcIixcIi5obVwiLFwiLmhuXCIsXCIuaHJcIixcIi5odFwiLFwiLmh1XCIsXCIuaWRcIixcIi5pZVwiLFwiLmlsXCIsXCIuaW1cIixcIi5pblwiLFwiLmlvXCIsXCIuaXFcIixcIi5pclwiLFwiLmlzXCIsXCIuaXRcIixcIi5qZVwiLFwiLmptXCIsXCIuam9cIixcIi5qcFwiLFwiLmtlXCIsXCIua2dcIixcIi5raFwiLFwiLmtpXCIsXCIua21cIixcIi5rblwiLFwiLmtwXCIsXCIua3JcIixcIi5rd1wiLFwiLmt5XCIsXCIua3pcIixcIi5sYVwiLFwiLmxiXCIsXCIubGNcIixcIi5saVwiLFwiLmxrXCIsXCIubHJcIixcIi5sc1wiLFwiLmx0XCIsXCIubHVcIixcIi5sdlwiLFwiLmx5XCIsXCIubWFcIixcIi5tY1wiLFwiLm1kXCIsXCIubWVcIixcIi5tZ1wiLFwiLm1oXCIsXCIubWtcIixcIi5tbFwiLFwiLm1tXCIsXCIubW5cIixcIi5tb1wiLFwiLm1wXCIsXCIubXFcIixcIi5tclwiLFwiLm1zXCIsXCIubXRcIixcIi5tdVwiLFwiLm12XCIsXCIubXdcIixcIi5teFwiLFwiLm15XCIsXCIubXpcIixcIi5uYVwiLFwiLm5jXCIsXCIubmVcIixcIi5uZlwiLFwiLm5nXCIsXCIubmlcIixcIi5ubFwiLFwiLm5vXCIsXCIubnBcIixcIi5uclwiLFwiLm51XCIsXCIubnpcIixcIi5vbVwiLFwiLnBhXCIsXCIucGVcIixcIi5wZlwiLFwiLnBnXCIsXCIucGhcIixcIi5wa1wiLFwiLnBsXCIsXCIucG1cIixcIi5wblwiLFwiLnByXCIsXCIucHNcIixcIi5wdFwiLFwiLnB3XCIsXCIucHlcIixcIi5xYVwiLFwiLnJlXCIsXCIucm9cIixcIi5yc1wiLFwiLnJ1XCIsXCIucndcIixcIi5zYVwiLFwiLnNiXCIsXCIuc2NcIixcIi5zZFwiLFwiLnNlXCIsXCIuc2dcIixcIi5zaFwiLFwiLnNpXCIsXCIuc2tcIixcIi5zbFwiLFwiLnNtXCIsXCIuc25cIixcIi5zb1wiLFwiLnNyXCIsXCIuc3NcIixcIi5zdFwiLFwiLnN1XCIsXCIuc3ZcIixcIi5zeFwiLFwiLnN5XCIsXCIuc3pcIixcIi50Y1wiLFwiLnRkXCIsXCIudGZcIixcIi50Z1wiLFwiLnRoXCIsXCIudGpcIixcIi50a1wiLFwiLnRsXCIsXCIudG1cIixcIi50blwiLFwiLnRvXCIsXCIudHJcIixcIi50dFwiLFwiLnR2XCIsXCIudHdcIixcIi50elwiLFwiLnVhXCIsXCIudWdcIixcIi51a1wiLFwiLnVzXCIsXCIudXlcIixcIi51elwiLFwiLnZhXCIsXCIudmNcIixcIi52ZVwiLFwiLnZnXCIsXCIudmlcIixcIi52blwiLFwiLnZ1XCIsXCIud2ZcIixcIi53c1wiLFwiLnllXCIsXCIueXRcIixcIi56YVwiLFwiLnptXCIsXCIuendcIl07U3RyaW5nLnByb3RvdHlwZS5yZW1vdmVEaWFjcml0aWNzPWZ1bmN0aW9uKCl7cmV0dXJuIGRlZmF1bHREaWFjcml0aWNzUmVtb3ZhbE1hcC5yZWR1Y2UoKChyZXN1bHQsbGV0dGVyKT0+cmVzdWx0LnJlcGxhY2UobGV0dGVyLmxldHRlcnMsbGV0dGVyLmJhc2UpKSx0aGlzKX07Y29uc3QgU1BFQ0lBTF9DSEFSQUNURVJTPVwiXFxcXFxcXFwvICE/QCMkJV4mKigpXys6Lnt9LDtcXFxcLSdgYOKAmeKAmFxcXCJcIjtTdHJpbmcucHJvdG90eXBlLnJlbW92ZVNwZWNpYWxDaGFyYWN0ZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVwbGFjZShuZXcgUmVnRXhwKGBbJHtTUEVDSUFMX0NIQVJBQ1RFUlN9XWAsXCJnaVwiKSxcIlwiKX0sU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVBbGxCdXRMZXR0ZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9Mb3dlckNhc2UoKS5yZW1vdmVEaWFjcml0aWNzKCkucmVtb3ZlU3BlY2lhbENoYXJhY3RlcnMoKX0sU3RyaW5nLnByb3RvdHlwZS5jb25jZWFsPWZ1bmN0aW9uKGV4dHJhKXtyZXR1cm4gdGhpcy5yZXBsYWNlKG5ldyBSZWdFeHAoYFteJHtTUEVDSUFMX0NIQVJBQ1RFUlN9JHtleHRyYX1dYCxcImdpXCIpLFwi4oGOXCIpfSxTdHJpbmcucHJvdG90eXBlLmNhcGl0YWxpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0aGlzLnNsaWNlKDEpfSxTdHJpbmcucHJvdG90eXBlLnJlbW92ZUhUTUw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXBsYWNlKFwiPlwiLFwi4om7XCIpLnJlcGxhY2UoXCI8XCIsXCLiibpcIil9LFN0cmluZy5wcm90b3R5cGUuYW5nbGVCcmFja2V0cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcGxhY2UoXCI8XCIsXCImbHQ7XCIpLnJlcGxhY2UoXCI+XCIsXCImZ3Q7XCIpfSxTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VBcnJheT1mdW5jdGlvbihmaW5kLHJlcGxhY2Upe2Zvcih2YXIgcmVwbGFjZVN0cmluZz10aGlzLGk9MDtpPGZpbmQubGVuZ3RoO2krKylyZXBsYWNlU3RyaW5nPXJlcGxhY2VTdHJpbmcucmVwbGFjZShmaW5kW2ldLHJlcGxhY2VbaV0pO3JldHVybiByZXBsYWNlU3RyaW5nfSxTdHJpbmcucHJvdG90eXBlLm1hc2tVUkxzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVwbGFjZUFycmF5KFtcImh0dHBzOi8vXCIsXCJodHRwOi8vXCJdLFwibm9wZTovL1wiKS5yZXBsYWNlQXJyYXkoZG9tYWlucyxcIi5ub3BlXCIpfSxOdW1iZXIucHJvdG90eXBlLm1ha2VSZWFkYWJsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZyxcIixcIil9LE51bWJlci5wcm90b3R5cGUubWFrZVBlcmNlbnRhZ2U9ZnVuY3Rpb24oZGVjaW1hbHMpe3JldHVybiBkZWNpbWFsc3x8KGRlY2ltYWxzPTIpLGAkeygxMDAqdGhpcykudG9GaXhlZChkZWNpbWFscyl9JWB9LEFycmF5LnByb3RvdHlwZS5nZXRSYW5kb209ZnVuY3Rpb24obil7aWYobj50aGlzLmxlbmd0aClyZXR1cm4gdGhpcztjb25zdCByZXN1bHQ9bmV3IEFycmF5KG4pO2xldCBsZW49dGhpcy5sZW5ndGg7Y29uc3QgdGFrZW49bmV3IEFycmF5KGxlbik7Zm9yKDtuLS07KXtjb25zdCB4PU1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpsZW4pO3Jlc3VsdFtuXT10aGlzW3ggaW4gdGFrZW4/dGFrZW5beF06eF0sdGFrZW5beF09LS1sZW4gaW4gdGFrZW4/dGFrZW5bbGVuXTpsZW59cmV0dXJuIHJlc3VsdH07Y29uc3Qgc29ydE9iamVjdD0ob2JqLGRpcmVjdGlvbik9PntsZXQgYXJyPVtdO2Zvcihjb25zdCBrZXkgaW4gb2JqKWFyci5wdXNoKFtrZXksb2JqW2tleV1dKTthcnIuc29ydCgoKGEsYik9PmRpcmVjdGlvbj9hWzFdLWJbMV06YlsxXS1hWzFdKSk7bGV0IG9ialNvcnRlZD17fTtyZXR1cm4gYXJyLmZvckVhY2goKGl0ZW09Pm9ialNvcnRlZFtpdGVtWzBdXT1pdGVtWzFdKSksb2JqU29ydGVkfTthbmd1bGFyLm1vZHVsZShcImFwcFwiLFtcInVpLnJvdXRlclwiLFwidWkuYm9vdHN0cmFwXCIsXCJuZ0FuaW1hdGVcIixcIm5nU2FuaXRpemVcIixcIm5nRHJhZ0Ryb3BcIixcIm5nVGFnc0lucHV0XCIsXCJ2Y1JlY2FwdGNoYVwiLFwiY2hhcnQuanNcIixcInRjLmNoYXJ0anNcIl0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbmZpZyhbXCIkc3RhdGVQcm92aWRlclwiLFwiJHVybFJvdXRlclByb3ZpZGVyXCIsXCIkdXJsU2VydmljZVByb3ZpZGVyXCIsXCIkbG9jYXRpb25Qcm92aWRlclwiLGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCR1cmxSb3V0ZXJQcm92aWRlciwkdXJsU2VydmljZVByb3ZpZGVyLCRsb2NhdGlvblByb3ZpZGVyKXskdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL2hvbWVcIiksJHVybFNlcnZpY2VQcm92aWRlci5jb25maWcuc3RyaWN0TW9kZSghMSksJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJob21lXCIse3VybDpcIi9ob21lXCIsdGVtcGxhdGVVcmw6XCIvaG9tZS5odG1sXCJ9KS5zdGF0ZShcInBvbGljeVwiLHt1cmw6XCIvcG9saWN5XCIsdGVtcGxhdGVVcmw6XCIvcG9saWN5Lmh0bWxcIn0pLnN0YXRlKFwicHJpbnRcIix7dXJsOlwiL3ByaW50XCIsdGVtcGxhdGVVcmw6XCIvcHJpbnQuaHRtbFwifSkuc3RhdGUoXCJleHBlcmllbmNlXCIse3VybDpcIi9leHBlcmllbmNlXCIsY29udHJvbGxlcjpcIkV4cGVyaWVuY2VDdHJsXCIsdGVtcGxhdGVVcmw6XCIvZXhwZXJpZW5jZS5odG1sXCJ9KS5zdGF0ZShcInNraWxsc1wiLHt1cmw6XCIvc2tpbGxzXCIsY29udHJvbGxlcjpcIlNraWxsc0N0cmxcIix0ZW1wbGF0ZVVybDpcIi9za2lsbHMuaHRtbFwifSkuc3RhdGUoXCJob2JiaWVzXCIse3VybDpcIi9ob2JiaWVzXCIsY29udHJvbGxlcjpcIkhvYmJpZXNDdHJsXCIsdGVtcGxhdGVVcmw6XCIvaG9iYmllcy5odG1sXCJ9KS5zdGF0ZShcImNvbnRhY3RcIix7dXJsOlwiL2NvbnRhY3RcIixjb250cm9sbGVyOlwiQ29udGFjdEN0cmxcIix0ZW1wbGF0ZVVybDpcIi9jb250YWN0Lmh0bWxcIn0pLnN0YXRlKFwid29ya291dFwiLHt1cmw6XCIvd29ya291dFwiLGNvbnRyb2xsZXI6XCJXb3Jrb3V0Q3RybFwiLHRlbXBsYXRlVXJsOlwiL3dvcmtvdXQuaHRtbFwifSkuc3RhdGUoXCJwb3N0c1wiLHt1cmw6XCIvcG9zdHNcIixjb250cm9sbGVyOlwiUG9zdHNDdHJsXCIsdGVtcGxhdGVVcmw6XCIvcG9zdHMuaHRtbFwifSkuc3RhdGUoXCJwcm9maWxlXCIse3VybDpcIi9wcm9maWxlXCIsY29udHJvbGxlcjpcIlByb2ZpbGVDdHJsXCIsdGVtcGxhdGVVcmw6XCIvcHJvZmlsZS5odG1sXCJ9KS5zdGF0ZShcImxpc3RzXCIse3VybDpcIi9saXN0c1wiLGNvbnRyb2xsZXI6XCJMaXN0c0N0cmxcIix0ZW1wbGF0ZVVybDpcImxpc3RzLmh0bWxcIn0pLnN0YXRlKFwicHJpb3JpdGl6ZVwiLHt1cmw6XCIvcHJpb3JpdGl6ZVwiLGNvbnRyb2xsZXI6XCJQcmlvcml0aXplQ3RybFwiLHRlbXBsYXRlVXJsOlwicHJpb3JpdGl6ZS5odG1sXCJ9KS5zdGF0ZShcImJ1YmJsZXNcIix7dXJsOlwiL2J1YmJsZXNcIixjb250cm9sbGVyOlwiQnViYmxlc0N0cmxcIix0ZW1wbGF0ZVVybDpcImJ1YmJsZXMuaHRtbFwifSkuc3RhdGUoXCJhc3Rlcm9pZHNcIix7dXJsOlwiL2FzdGVyb2lkc1wiLGNvbnRyb2xsZXI6XCJBc3Rlcm9pZHNDdHJsXCIsdGVtcGxhdGVVcmw6XCJhc3Rlcm9pZHMuaHRtbFwifSkuc3RhdGUoXCJsZW1taW5nc1wiLHt1cmw6XCIvbGVtbWluZ3NcIixjb250cm9sbGVyOlwiTGVtbWluZ3NDdHJsXCIsdGVtcGxhdGVVcmw6XCJsZW1taW5ncy5odG1sXCJ9KS5zdGF0ZShcImJvdHNcIix7dXJsOlwiL2JvdHNcIixjb250cm9sbGVyOlwiVGVuVGhpbmdzQ3RybFwiLHRlbXBsYXRlVXJsOlwidGVudGhpbmdzLmh0bWxcIn0pLnN0YXRlKFwidGVudGhpbmdzXCIse3VybDpcIi90ZW50aGluZ3NcIixjb250cm9sbGVyOlwiVGVuVGhpbmdzQ3RybFwiLHRlbXBsYXRlVXJsOlwidGVudGhpbmdzLmh0bWxcIn0pLnN0YXRlKFwidGVudGhpbmdzLWFkbWluXCIse3VybDpcIi90ZW50aGluZ3MtYWRtaW5cIixjb250cm9sbGVyOlwiVGVuVGhpbmdzQWRtaW5DdHJsXCIsdGVtcGxhdGVVcmw6XCJ0ZW50aGluZ3MtYWRtaW4uaHRtbFwifSkuc3RhdGUoXCJ0ZW50aGluZ3MtY3VyYXRlXCIse3VybDpcIi90ZW50aGluZ3MtY3VyYXRlXCIsY29udHJvbGxlcjpcIlRlblRoaW5nc0N1cmF0ZUN0cmxcIix0ZW1wbGF0ZVVybDpcInRlbnRoaW5ncy1jdXJhdGUuaHRtbFwifSkuc3RhdGUoXCJ0ZW50aGluZ3MtZ2FtZVwiLHt1cmw6XCIvdGVudGhpbmdzLzpnYW1lXCIsY29udHJvbGxlcjpcIlRlblRoaW5nc0dhbWVDdHJsXCIsdGVtcGxhdGVVcmw6XCJ0ZW50aGluZ3MtZ2FtZS5odG1sXCJ9KS5zdGF0ZShcInF1aXotZ29vZ2xlXCIse3VybDpcIi9nb29nbGVcIixjb250cm9sbGVyOlwiUXVpekdvb2dsZUN0cmxcIix0ZW1wbGF0ZVVybDpcInF1aXp6ZXMvZ29vZ2xlLmh0bWxcIn0pLnN0YXRlKFwicXVpei1sb2dvc1wiLHt1cmw6XCIvbG9nb3NcIixjb250cm9sbGVyOlwiUXVpekxvZ29zQ3RybFwiLHRlbXBsYXRlVXJsOlwicXVpenplcy9sb2dvcy5odG1sXCJ9KS5zdGF0ZShcInF1aXotYW5pbWFsc1wiLHt1cmw6XCIvYW5pbWFsc1wiLGNvbnRyb2xsZXI6XCJRdWl6QW5pbWFsc0N0cmxcIix0ZW1wbGF0ZVVybDpcInF1aXp6ZXMvYW5pbWFscy5odG1sXCJ9KS5zdGF0ZShcInF1aXotc2tlbGV0b25zXCIse3VybDpcIi9za2VsZXRvbnNcIixjb250cm9sbGVyOlwiUXVpelNrZWxldG9uc0N0cmxcIix0ZW1wbGF0ZVVybDpcInF1aXp6ZXMvc2tlbGV0b25zLmh0bWxcIn0pLnN0YXRlKFwicXVpei1tb3ZpZXNcIix7dXJsOlwiL21vdmllc1wiLGNvbnRyb2xsZXI6XCJRdWl6TW92aWVzQ3RybFwiLHRlbXBsYXRlVXJsOlwicXVpenplcy9tb3ZpZXMuaHRtbFwifSkuc3RhdGUoXCJjaGFyYWRlc1wiLHt1cmw6XCIvY2hhcmFkZXNcIixjb250cm9sbGVyOlwiQ2hhcmFkZXNDdHJsXCIsdGVtcGxhdGVVcmw6XCIvY2hhcmFkZXMuaHRtbFwifSksJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtlbmFibGVkOiEwLHJlcXVpcmVCYXNlOiExfSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIldlYlNvY2tldFN2Y1wiLFtcIiRyb290U2NvcGVcIixcIiR0aW1lb3V0XCIsZnVuY3Rpb24oJHJvb3RTY29wZSwkdGltZW91dCl7dmFyIGNvbm5lY3Rpb24sY29ubmVjdD1mdW5jdGlvbigpeyhjb25uZWN0aW9uPW5ldyBXZWJTb2NrZXQoXCJodHRwczpcIj09PXdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbD9cIndzczovL1wiK3dpbmRvdy5sb2NhdGlvbi5ob3N0Olwid3M6Ly9cIit3aW5kb3cubG9jYXRpb24uaG9zdCkpLm9ub3Blbj1mdW5jdGlvbigpe2NvbnNvbGUubG9nKFwiV2Vic29ja2V0IGNvbm5lY3RlZFwiKX0sY29ubmVjdGlvbi5vbmNsb3NlPWZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKFwiV2Vic29ja2V0IGNsb3NlZC4gUmVjb25uZWN0aW5nLi4uXCIpLCR0aW1lb3V0KGNvbm5lY3QsMWUzKX0sY29ubmVjdGlvbi5vbmVycm9yPWZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKFwiRXJyb3I6IFwiK2UrXCIgLSBTdGF0ZTogXCIrY29ubmVjdGlvbi5yZWFkeVN0YXRlKX0sY29ubmVjdGlvbi5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7dmFyIHBheWxvYWQ9SlNPTi5wYXJzZShlLmRhdGEpOyRyb290U2NvcGUuJGJyb2FkY2FzdChcIndzOlwiK3BheWxvYWQudG9waWMscGF5bG9hZC5kYXRhKX19O3RoaXMuc2VuZD1mdW5jdGlvbih0b3BpYyxkYXRhKXt2YXIganNvbj1KU09OLnN0cmluZ2lmeSh7dG9waWMsZGF0YX0pO2Nvbm5lY3Rpb24uc2VuZChqc29uKX0sdGhpcy5jb25uZWN0PWNvbm5lY3R9XSkucnVuKFtcIldlYlNvY2tldFN2Y1wiLGZ1bmN0aW9uKFdlYlNvY2tldFN2Yyl7V2ViU29ja2V0U3ZjLmNvbm5lY3QoKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQXBwQ3RybFwiLFtcIiRzY29wZVwiLFwiJGxvY2F0aW9uXCIsXCJMYW5ndWFnZVN2Y1wiLFwiVXNlclN2Y1wiLGZ1bmN0aW9uKCRzY29wZSwkbG9jYXRpb24sTGFuZ3VhZ2VTdmMsVXNlclN2Yyl7ZnVuY3Rpb24gbG9naW4odXNlcil7JHNjb3BlLmxvZ2dlZElufHwod2luZG93LmxvY2FsU3RvcmFnZS51c2VyPXVzZXIuX2lkLCRzY29wZS5sb2dnZWRJbj0hMCwkc2NvcGUuY3VycmVudFVzZXI9dXNlciwkc2NvcGUuJGJyb2FkY2FzdChcImxvZ2luXCIpKX1jb25zb2xlLmxvZyhcIiVjWW91IHNuZWFreSBidWdnZXIhXCIsXCJmb250OiAyZW0gc2Fucy1zZXJpZjsgY29sb3I6IERvZGdlckJsdWU7IHRleHQtc2hhZG93OiAycHggMCAwICM0NDQsIC0ycHggMCAwICM0NDQsIDAgMnB4IDAgIzQ0NCwgMCAtMnB4IDAgIzQ0NCwgMXB4IDFweCAjNDQ0LCAtMXB4IC0xcHggMCAjNDQ0LCAxcHggLTFweCAwICM0NDQsIC0xcHggMXB4IDAgIzQ0NDtcIiksY29uc29sZS5sb2coXCJJJ20gZ2xhZCB5b3UncmUgY3VyaW91cyB3aGV0aGVyIHNvbWV0aGluZyBpcyBwb3BwaW5nIHVwIGluIGhlcmUuIEknbSBhIGJpdCBvZiBhIHN0aWNrbGVyIHdoZW4gaXQgY29tZXMgdG8gbWVzc2FnZXMgaW4gdGhlIGNvbnNvbGUgc28gSSB0cnkgdG8gbWFrZSBzdXJlIG9ubHkgdGhpbmdzIEkgd2FudCBhcmUgdmlzaWJsZS4gVGhhdCBiZWluZyBzYWlkLCBpZiB0aGVyZSBpcyBhIGJpZyBlcnJvciBoZXJlLCBJIHdvdWxkIHJlYWxseSBhcHByZWNpYXRlIHlvdSB0ZWxsaW5nIG1lIHNvIEkgY2FuIGdldCByaWQgb2YgaXQhXCIpLGNvbnNvbGUubG9nKFwiVGhlIGNvZGUgZm9yIG15IHJlc3VtZSBpcyBob3N0ZWQgb24gR2l0aHViIGlmIHlvdSByZWFsbHkgd2FudCB0byBnbyBpbnRvIGFsbCB0aGlzISA9PiBodHRwczovL2dpdGh1Yi5jb20vRmxhbmRlcnNCdXJnZXIvcmVzdW1lXCIpLCQod2luZG93KS5sb2FkKChmdW5jdGlvbigpeyQoXCIubG9hZGluZ1wiKS5mYWRlT3V0KFwic2xvd1wiKSwkKFwiLmNvbnRlbnRcIikuZmFkZUluKFwic2xvd1wiKX0pKSwkc2NvcGUudGhlbWVDb3VudGVyPTYsJHNjb3BlLnRvZGF5PW5ldyBEYXRlLCRzY29wZS55ZWFyPSRzY29wZS50b2RheS5nZXRGdWxsWWVhcigpLCRzY29wZS5yYW5kb209TWF0aC5mbG9vcigxZTYqTWF0aC5yYW5kb20oKSksJHNjb3BlLmZsaXBUaGVtZT1mdW5jdGlvbigpeyQoXCIubG9hZGluZ1wiKS5zaG93KCksJChcIi5jb250ZW50XCIpLmhpZGUoKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpeyQoXCIubG9hZGluZ1wiKS5mYWRlT3V0KFwic2xvd1wiKSwkKFwiLmNvbnRlbnRcIikuZmFkZUluKFwic2xvd1wiKX0pLDgwMCksJHNjb3BlLnRoZW1lQ291bnRlcj0kc2NvcGUudGhlbWVDb3VudGVyPDY/JHNjb3BlLnRoZW1lQ291bnRlcisxOiRzY29wZS50aGVtZUNvdW50ZXI9MX0sJC5nZXRKU09OKFwiL3NraWxscy5qc29uXCIsKGZ1bmN0aW9uKGRhdGEpeyRzY29wZS5za2lsbHM9ZGF0YS5maWx0ZXIoKGZ1bmN0aW9uKHNraWxsKXtyZXR1cm4gc2tpbGwuZW5hYmxlZH0pKX0pKSwkLmdldEpTT04oXCIvaG9iYmllcy5qc29uXCIsKGZ1bmN0aW9uKGRhdGEpeyRzY29wZS5ob2JiaWVzPWRhdGF9KSksJC5nZXRKU09OKFwiL2V4cGVyaWVuY2UuanNvblwiLChmdW5jdGlvbihkYXRhKXskc2NvcGUuam9icz1kYXRhLCRzY29wZS5qb2JzLmZvckVhY2goKGZ1bmN0aW9uKGpvYil7am9iLnN0YXJ0RGF0ZT1uZXcgRGF0ZShqb2Iuc3RhcnREYXRlKSxqb2IuZW5kRGF0ZSYmKGpvYi5lbmREYXRlPW5ldyBEYXRlKGpvYi5lbmREYXRlKSl9KSl9KSksJC5nZXRKU09OKFwiL2NoYXJhZGVzLmpzb25cIiwoZnVuY3Rpb24oZGF0YSl7JHNjb3BlLmNoYXJhZGVzPWRhdGF9KSksJHNjb3BlLmdldFRpbWVTcGFuPWZ1bmN0aW9uKGpvYil7cmV0dXJuIGpvYi5zdGFydERhdGUuZ2V0RnVsbFllYXIoKSsoam9iLmVuZERhdGU/XCIgLSBcIitqb2IuZW5kRGF0ZS5nZXRGdWxsWWVhcigpOlwiIC0gVG9kYXlcIil9LCRzY29wZS5sYW5ndWFnZXM9TGFuZ3VhZ2VTdmMubGFuZ3VhZ2VzLCRzY29wZS5zZWxlY3RlZExhbmd1YWdlPUxhbmd1YWdlU3ZjLmdldExhbmd1YWdlKCksJHNjb3BlLnNlbGVjdExhbmd1YWdlPWZ1bmN0aW9uKGxhbmd1YWdlKXskc2NvcGUuc2VsZWN0ZWRMYW5ndWFnZT1MYW5ndWFnZVN2Yy5zZXRMYW5ndWFnZShsYW5ndWFnZSl9LCRzY29wZS5ob3ZlcmRpdj1mdW5jdGlvbihlLGRpdmlkKXt2YXIgbGVmdD1lLmNsaWVudFgrXCJweFwiLHRvcD1lLmNsaWVudFkrMjArXCJweFwiO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdmlkKTtyZXR1cm4gJChcIiNcIitkaXZpZCkuY3NzKFwibGVmdFwiLGxlZnQpLCQoXCIjXCIrZGl2aWQpLmNzcyhcInRvcFwiLHRvcCksJChcIiNcIitkaXZpZCkudG9nZ2xlKCksITF9LCRzY29wZS5zb2NpYWxNZWRpYT1be25hbWU6XCJpbnN0YWdyYW1cIix1cmw6XCJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2ZsYW5kZXJzYnVyZ2VyL1wiLGljb246XCJmYS1pbnN0YWdyYW1cIn0se25hbWU6XCJsaW5rZWRpblwiLHVybDpcImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9sYXVyZW50LWRlYmFja2VyLTE2MzNhOTE2XCIsaWNvbjpcImZhLWxpbmtlZGluXCJ9LHtuYW1lOlwiZ2l0aHViXCIsdXJsOlwiaHR0cHM6Ly9naXRodWIuY29tL0ZsYW5kZXJzQnVyZ2VyXCIsaWNvbjpcImZhLWdpdGh1YlwifSx7bmFtZTpcImpzZmlkZGxlXCIsdXJsOlwiaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvdXNlci9CZWxnb0NhbmFkaWFuL2ZpZGRsZXMvXCIsaWNvbjpcImZhLWpzZmlkZGxlXCJ9LHtuYW1lOlwic3RhY2tvdmVyZmxvd1wiLHVybDpcImh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS91c2Vycy8xMDgzOTIzL2JlbGdvY2FuYWRpYW5cIixpY29uOlwiZmEtc3RhY2stb3ZlcmZsb3dcIn0se25hbWU6XCJnb29kcmVhZHNcIix1cmw6XCJodHRwczovL3d3dy5nb29kcmVhZHMuY29tL3VzZXIvc2hvdy8xNzA3MDAxMC1sYXVyZW50XCIsaWNvbjpcImZhLWdvb2RyZWFkc1wifV0sd2luZG93LmxvY2FsU3RvcmFnZS51c2VyJiZVc2VyU3ZjLmxvZ2luKHdpbmRvdy5sb2NhbFN0b3JhZ2UudXNlcikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2Upe2xvZ2luKHJlc3BvbnNlLmRhdGEpfSkpLCRzY29wZS4kb24oXCJsb2dpblwiLChmdW5jdGlvbihfLHVzZXIpe2xvZ2luKHVzZXIpfSkpLCRzY29wZS4kb24oXCJ1cGRhdGVcIiwoZnVuY3Rpb24oXyx1c2VyKXskc2NvcGUuY3VycmVudFVzZXI9dXNlciwkc2NvcGUuY3VycmVudFVzZXIuYmlydGhEYXRlPW5ldyBEYXRlKCRzY29wZS5jdXJyZW50VXNlci5iaXJ0aERhdGUpLCRzY29wZS5sb2FkaW5nPSExLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7JChcIiNsb2FkaW5nLWljb25cIikuZmFkZU91dChcInNsb3dcIil9KSwxZTMpfSkpLCRzY29wZS4kb24oXCJsb2FkaW5nXCIsKGZ1bmN0aW9uKF8sdXNlcil7JHNjb3BlLmxvYWRpbmc9ITAsJChcIiNsb2FkaW5nLWljb25cIikuc2hvdygpfSkpLCRzY29wZS4kb24oXCJsb2FkZWRcIiwoZnVuY3Rpb24oXyx1c2VyKXskc2NvcGUubG9hZGluZz0hMSxzZXRUaW1lb3V0KChmdW5jdGlvbigpeyQoXCIjbG9hZGluZy1pY29uXCIpLmZhZGVPdXQoXCJzbG93XCIpfSksMWUzKX0pKSwkc2NvcGUubG9nb3V0PWZ1bmN0aW9uKCl7ZmlyZWJhc2UuYXV0aCgpLnNpZ25PdXQoKS50aGVuKChmdW5jdGlvbigpeyRzY29wZS5sb2dnZWRJbj0hMSx3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCksJHNjb3BlLiRicm9hZGNhc3QoXCJsb2dvdXRcIil9KSkuY2F0Y2goKGZ1bmN0aW9uKGVycm9yKXt9KSl9LCRzY29wZS5mb3JtYXREYXRlPWZ1bmN0aW9uKGRhdGUpe3JldHVybihkYXRlPW5ldyBEYXRlKGRhdGUpKS5nZXREYXRlKCkrXCItXCIrW1wiSmFuXCIsXCJGZWJcIixcIk1hclwiLFwiQXByXCIsXCJNYXlcIixcIkp1blwiLFwiSnVsXCIsXCJBdWdcIixcIlNlcFwiLFwiT2N0XCIsXCJOb3ZcIixcIkRlY1wiXVtkYXRlLmdldE1vbnRoKCldK1wiLVwiK2RhdGUuZ2V0RnVsbFllYXIoKX0sU3RyaW5nLnByb3RvdHlwZS5jYXBpdGFsaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdGhpcy5zbGljZSgxKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkFzdGVyb2lkc0N0cmxcIixbXCIkc2NvcGVcIixcIkdhbWVTdmNcIixmdW5jdGlvbigkc2NvcGUsR2FtZVN2Yyl7JHNjb3BlLmFubm91bmNlPSExO3ZhciBjYW52YXM9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhc3Rlcm9pZHMtcGFnZVwiKSxjdHg9Y2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtjdHguZm9udD1cIjMwcHggQ29taWMgU2FucyBNU1wiLGN0eC5maWxsU3R5bGU9XCJyZWRcIixjdHgudGV4dEFsaWduPVwiY2VudGVyXCI7dmFyIHNob3RzPXt9LGFzdGVyb2lkcz17fSxwb3dlcnVwcz17fSxleHBsb3Npb25zPXt9LG1hcD17fSxzcGFjZXBpY3M9MTAsc3BhY2U9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnNwYWNlcGljcykscG93ZXJ1cFR5cGVzPVt7bmFtZTpcInNwZWVkXCIsYW5ub3VuY2VtZW50OlwiTWF4IFNwZWVkIOKHp1wiLGN5Y2xlOntyb3dzOjEsY29sdW1uczo0LHNpemU6WzE0LDM1XSxpOjAsZGlyZWN0aW9uOiEwfSxpbWc6bmV3IEltYWdlLGFjdGl2YXRlOmZ1bmN0aW9uKHNwYWNlc2hpcCl7c3BhY2VzaGlwLm1heFNwZWVkKz0xMDB9fSx7bmFtZTpcImNvb2xkb3duXCIsYW5ub3VuY2VtZW50OlwiQ29vbGRvd24g4oepXCIsY3ljbGU6e3Jvd3M6MSxjb2x1bW5zOjMsc2l6ZTpbMTcsMTddLGk6MCxkaXJlY3Rpb246ITB9LGltZzpuZXcgSW1hZ2UsYWN0aXZhdGU6ZnVuY3Rpb24oc3BhY2VzaGlwKXtzcGFjZXNoaXAuY29vbGRvd24+MCYmKHNwYWNlc2hpcC5jb29sZG93blRpbWUtPTEpfX0se25hbWU6XCJyYW5nZVwiLGFubm91bmNlbWVudDpcIkZpcmluZyBSYW5nZSDih6dcIixjeWNsZTp7cm93czo0LGNvbHVtbnM6MSxzaXplOlszMCw4XSxpOjAsZGlyZWN0aW9uOiEwfSxpbWc6bmV3IEltYWdlLGFjdGl2YXRlOmZ1bmN0aW9uKHNwYWNlc2hpcCl7c3BhY2VzaGlwLnJhbmdlKz01fX0se25hbWU6XCJzaGllbGRcIixhbm5vdW5jZW1lbnQ6XCJTaGllbGRcIixjeWNsZTp7cm93czo1LGNvbHVtbnM6MSxzaXplOlsxOSwxOV0saTowLGRpcmVjdGlvbjohMH0saW1nOm5ldyBJbWFnZSxhY3RpdmF0ZTpmdW5jdGlvbihzcGFjZXNoaXApe3NwYWNlc2hpcC5zaGllbGQ9ITB9fSx7bmFtZTpcIm51a2VcIixhbm5vdW5jZW1lbnQ6XCJOdWtlXCIsY3ljbGU6e3Jvd3M6MSxjb2x1bW5zOjgsc2l6ZTpbMTUsMTVdLGk6MCxkaXJlY3Rpb246ITB9LGltZzpuZXcgSW1hZ2UsYWN0aXZhdGU6ZnVuY3Rpb24oc3BhY2VzaGlwKXtmb3IodmFyIGkgaW4gYXN0ZXJvaWRzKWFzdGVyb2lkc1tpXS5leHBsb2RlKCk7c3Bhd25Bc3Rlcm9pZHMoNSl9fV07cG93ZXJ1cFR5cGVzLmZvckVhY2goKGZ1bmN0aW9uKHBvd2VydXAsaSxhcnJheSl7YXJyYXlbaV0uaW1nLnNyYz1cImFzdGVyb2lkcy9cIitwb3dlcnVwLm5hbWUrXCIucG5nXCJ9KSk7dmFyIHNwYWNlc2hpcCxleHBsb3Npb25JbWFnZT1uZXcgSW1hZ2U7ZnVuY3Rpb24gZXZhbHVhdGVLZXlzKCl7JHNjb3BlLnBsYXlpbmc/KG1hcFszMl0mJjA9PT1zcGFjZXNoaXAuY29vbGRvd24mJnNwYWNlc2hpcC5zaG9vdCgpLG1hcFszN10mJigwPT09c3BhY2VzaGlwLnJvdGF0aW9uP3NwYWNlc2hpcC5yb3RhdGlvbj0zNjA6c3BhY2VzaGlwLnJvdGF0aW9uLT0zKSxtYXBbMzldJiYoMzYwPT09c3BhY2VzaGlwLnJvdGF0aW9uP3NwYWNlc2hpcC5yb3RhdGlvbj0wOnNwYWNlc2hpcC5yb3RhdGlvbis9MyksbWFwWzM4XT9zcGFjZXNoaXAuc3BlZWQ8PXNwYWNlc2hpcC5tYXhTcGVlZCYmKHNwYWNlc2hpcC5zcGVlZCs9NSk6c3BhY2VzaGlwLnNwZWVkPjAmJnNwYWNlc2hpcC5zcGVlZC0tLG1hcFs0MF0mJnNwYWNlc2hpcC5zcGVlZD4wJiYoc3BhY2VzaGlwLnNwZWVkLT0yKSk6bWFwWzMyXSYmKCRzY29wZS5wbGF5aW5nPSEwLCRzY29wZS5zY29yZT0wLHNwYWNlPU1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpzcGFjZXBpY3MpLCRzY29wZS4kYXBwbHkoKSxzcGFjZXNoaXA9bmV3IFNwYWNlc2hpcCwkc2NvcGUuc2NvcmU9MCxzcGF3bkFzdGVyb2lkcyg1KSxhdXRvU3Bhd24oKSl9ZnVuY3Rpb24gU3BhY2VzaGlwKCl7dGhpcy53aWR0aD01MCx0aGlzLmhlaWdodD01MCx0aGlzLnNoaWVsZD0hMSx0aGlzLnJhbmdlPTgwLHRoaXMuY2Fubm9uPXt4OnRoaXMud2lkdGgvMi00LjUseTp0aGlzLmhlaWdodC8yLS4wNzgxMjUqdGhpcy5oZWlnaHR9LHRoaXMuY29vbGRvd249MCx0aGlzLmNvb2xkb3duVGltZT0yMCx0aGlzLnBvc2l0aW9uPVtjYW52YXMud2lkdGgvMi10aGlzLndpZHRoLzIsY2FudmFzLmhlaWdodC8yLXRoaXMuaGVpZ2h0LzJdLHRoaXMuaW1nPW5ldyBJbWFnZSx0aGlzLmltZy5zcmM9XCJhc3Rlcm9pZHMvc3BhY2VzaGlwLnBuZ1wiLHRoaXMuc3BlZWQ9MCx0aGlzLm1heFNwZWVkPTFlMyx0aGlzLmFuZ2xlPTAsdGhpcy5yb3RhdGlvbj0wLHRoaXMuc2hvb3Q9ZnVuY3Rpb24oKXt0aGlzLmNvb2xkb3duPXRoaXMuY29vbGRvd25UaW1lO3ZhciBpZD1NYXRoLnJvdW5kKDFlOCpNYXRoLnJhbmRvbSgpKTtzaG90c1tpZF09bmV3IFNob3QoaWQsdGhpcyl9LHRoaXMubW92ZT1mdW5jdGlvbigpe2Zvcih2YXIgaSBpbiB0aGlzLnNoaWVsZCYmKGN0eC5iZWdpblBhdGgoKSxjdHguYXJjKHRoaXMucG9zaXRpb25bMF0rdGhpcy53aWR0aC8yLHRoaXMucG9zaXRpb25bMV0rdGhpcy5oZWlnaHQvMiwzMCwwLDIqTWF0aC5QSSksY3R4LmZpbGxTdHlsZT1cInJnYigzNSwgMjM3LCA4NiwgMC41KVwiLGN0eC5zdHJva2VTdHlsZT1cInJnYig2NiwgMTY4LCAzNiwgMC44KVwiLGN0eC5saW5lV2lkdGg9NSxjdHguc3Ryb2tlKCksY3R4LmZpbGwoKSksYXN0ZXJvaWRzKXt2YXIgYXN0ZXJvaWQ9YXN0ZXJvaWRzW2ldO2lmKGhpdChhc3Rlcm9pZCx0aGlzKSl7aWYoIXRoaXMuc2hpZWxkKXJldHVybiBnYW1lT3ZlcigpO3RoaXMuc2hpZWxkPSExLGFzdGVyb2lkLmV4cGxvZGUoKX19dGhpcy5hbmdsZT10aGlzLnJvdGF0aW9uLHRoaXMuY29vbGRvd24+MCYmdGhpcy5jb29sZG93bi0tLG1vdmUodGhpcyl9fWZ1bmN0aW9uIFNob3QoaWQsc3BhY2VzaGlwKXt0aGlzLmlkPWlkLHRoaXMucG9zaXRpb249W3NwYWNlc2hpcC5wb3NpdGlvblswXStzcGFjZXNoaXAuY2Fubm9uLngrc3BhY2VzaGlwLmNhbm5vbi54Kk1hdGguY29zKChzcGFjZXNoaXAucm90YXRpb24tOTApKk1hdGguUEkvMTgwKSxzcGFjZXNoaXAucG9zaXRpb25bMV0rc3BhY2VzaGlwLmNhbm5vbi55K3NwYWNlc2hpcC5jYW5ub24ueSpNYXRoLnNpbigoc3BhY2VzaGlwLnJvdGF0aW9uLTkwKSpNYXRoLlBJLzE4MCldLHRoaXMud2lkdGg9OSx0aGlzLmhlaWdodD0xNSx0aGlzLmFuZ2xlPXNwYWNlc2hpcC5hbmdsZSx0aGlzLnJvdGF0aW9uPXNwYWNlc2hpcC5yb3RhdGlvbix0aGlzLnNwZWVkPXNwYWNlc2hpcC5zcGVlZCs1MDAsdGhpcy5saWZlc3Bhbj1zcGFjZXNoaXAucmFuZ2UsdGhpcy5pbWc9bmV3IEltYWdlLHRoaXMuaW1nLnNyYz1cImFzdGVyb2lkcy9zaG90LnBuZ1wiLHRoaXMubW92ZT1mdW5jdGlvbigpe3RoaXMubGlmZXNwYW4tLSxtb3ZlKHRoaXMpfX1mdW5jdGlvbiBBc3Rlcm9pZChpZCl7dGhpcy5pZD1pZCx0aGlzLndpZHRoPTUwKk1hdGgucmFuZG9tKCkrMjAsdGhpcy5oZWlnaHQ9dGhpcy53aWR0aCx0aGlzLnBvc2l0aW9uPWdldEVudHJ5UG9zaXRpb24odGhpcy53aWR0aCx0aGlzLmhlaWdodCksdGhpcy5hbmdsZT0zNjAqTWF0aC5yYW5kb20oKSx0aGlzLnJvdGF0aW9uPTM2MCpNYXRoLnJhbmRvbSgpLHRoaXMucm90YXRpb25TcGVlZD02Kk1hdGgucmFuZG9tKCktMyx0aGlzLnNwZWVkPTMwMCpNYXRoLnJhbmRvbSgpKzIsdGhpcy5pbWc9bmV3IEltYWdlLHRoaXMuaW1nLnNyYz1cImFzdGVyb2lkcy9hc3Rlcm9pZFwiKyhNYXRoLnJvdW5kKDYqTWF0aC5yYW5kb20oKSkrMSkrXCIucG5nXCIsdGhpcy5leHBsb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cGxvc2lvbnNbdGhpcy5pZF09bmV3IEV4cGxvc2lvbih0aGlzKSxkZWxldGUgYXN0ZXJvaWRzW3RoaXMuaWRdfSx0aGlzLm1vdmU9ZnVuY3Rpb24oKXtmb3IodmFyIGkgaW4gdGhpcy5yb3RhdGlvbis9dGhpcy5yb3RhdGlvblNwZWVkLHRoaXMucm90YXRpb24+MzYwP3RoaXMucm90YXRpb249dGhpcy5yb3RhdGlvbi0zNjA6dGhpcy5yb3RhdGlvbjwwJiYodGhpcy5yb3RhdGlvbj0zNjArdGhpcy5yb3RhdGlvbiksc2hvdHMpe3ZhciBzaG90PXNob3RzW2ldO2lmKGhpdChzaG90LHRoaXMpKXt0aGlzLmV4cGxvZGUoKTt2YXIgcG9pbnRzPU1hdGguZmxvb3IoKHNob3Quc3BlZWQtNTAwKS8xMCs3MC10aGlzLndpZHRoKTtNYXRoLmZsb29yKChwb2ludHMrJHNjb3BlLnNjb3JlKS8xMDApPk1hdGguZmxvb3IoJHNjb3BlLnNjb3JlLzEwMCkmJnNwYXduUG93ZXJ1cCgpLCRzY29wZS5zY29yZSs9cG9pbnRzLCRzY29wZS4kYXBwbHkoKSxkZWxldGUgc2hvdHNbaV19fW1vdmUodGhpcyl9fWZ1bmN0aW9uIEV4cGxvc2lvbihvYmplY3Qpe3RoaXMucG9zaXRpb249W29iamVjdC5wb3NpdGlvblswXSxvYmplY3QucG9zaXRpb25bMV1dLHRoaXMud2lkdGg9b2JqZWN0LndpZHRoLHRoaXMuaGVpZ2h0PW9iamVjdC5oZWlnaHQsdGhpcy5zcGVlZD0wLHRoaXMuYW5nbGU9MzYwKk1hdGgucmFuZG9tKCksdGhpcy5jeWNsZT17cm93czo2LGNvbHVtbnM6OCxzaXplOlsyNTYsMjU2XSxpOjAsZGlyZWN0aW9uOiEwfSx0aGlzLmxpZmVzcGFuPTQ3LHRoaXMuaW1nPWV4cGxvc2lvbkltYWdlLHRoaXMubW92ZT1mdW5jdGlvbigpe3RoaXMubGlmZXNwYW4tLSxtb3ZlKHRoaXMpLHRoaXMuY3ljbGUuZGlyZWN0aW9uP3RoaXMuY3ljbGUuaSsrOnRoaXMuY3ljbGUuaS0tfX1mdW5jdGlvbiBQb3dlcnVwKGlkKXt0aGlzLmlkPWlkLHRoaXMucG93ZXJ1cD1wb3dlcnVwVHlwZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnBvd2VydXBUeXBlcy5sZW5ndGgpXSx0aGlzLmN5Y2xlPXRoaXMucG93ZXJ1cC5jeWNsZSx0aGlzLmxpZmVzcGFuPTFlMyx0aGlzLmN5Y2xlLnNpemVbMV0+dGhpcy5jeWNsZS5zaXplWzBdPyh0aGlzLmhlaWdodD00MCx0aGlzLndpZHRoPU1hdGgucm91bmQodGhpcy5oZWlnaHQvdGhpcy5jeWNsZS5zaXplWzFdKnRoaXMuY3ljbGUuc2l6ZVswXSkpOih0aGlzLndpZHRoPTQwLHRoaXMuaGVpZ2h0PU1hdGgucm91bmQodGhpcy53aWR0aC90aGlzLmN5Y2xlLnNpemVbMF0qdGhpcy5jeWNsZS5zaXplWzFdKSksdGhpcy5wb3NpdGlvbj1nZXRFbnRyeVBvc2l0aW9uKHRoaXMud2lkdGgsdGhpcy5oZWlnaHQpLHRoaXMuaW1nPXRoaXMucG93ZXJ1cC5pbWcsdGhpcy5hbmdsZT0zNjAqTWF0aC5yYW5kb20oKSx0aGlzLnNwZWVkPTE1MCpNYXRoLnJhbmRvbSgpKzUwO3ZhciBkZWxheT01O3RoaXMubW92ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxpZmVzcGFuPD0wP2RlbGV0ZSBwb3dlcnVwc1t0aGlzLmlkXTpoaXQoc3BhY2VzaGlwLHRoaXMpPygkc2NvcGUuYW5ub3VuY2U9ITAsJHNjb3BlLmFubm91bmNlbWVudD10aGlzLnBvd2VydXAuYW5ub3VuY2VtZW50LCRzY29wZS4kYXBwbHkoKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpeyRzY29wZS5hbm5vdW5jZT0hMSwkc2NvcGUuJGFwcGx5KCl9KSwxZTMpLHRoaXMucG93ZXJ1cC5hY3RpdmF0ZShzcGFjZXNoaXApLGRlbGV0ZSBwb3dlcnVwc1t0aGlzLmlkXSk6KHRoaXMubGlmZXNwYW4tLSxtb3ZlKHRoaXMpLHZvaWQoZGVsYXk8PTA/KHRoaXMuY3ljbGUuZGlyZWN0aW9uP3RoaXMuY3ljbGUuaSsrOnRoaXMuY3ljbGUuaS0tLGRlbGF5PTUpOmRlbGF5LS0pKX19ZnVuY3Rpb24gbW92ZShvYmplY3Qpe2lmKG9iamVjdC5wb3NpdGlvblswXSs9b2JqZWN0LnNwZWVkLzEwMCpNYXRoLmNvcygob2JqZWN0LmFuZ2xlLTkwKSpNYXRoLlBJLzE4MCksb2JqZWN0LnBvc2l0aW9uWzFdKz1vYmplY3Quc3BlZWQvMTAwKk1hdGguc2luKChvYmplY3QuYW5nbGUtOTApKk1hdGguUEkvMTgwKSxvYmplY3QucG9zaXRpb25bMF0+Y2FudmFzLndpZHRoP29iamVjdC5wb3NpdGlvblswXT0tb2JqZWN0LndpZHRoOm9iamVjdC5wb3NpdGlvblswXTwtb2JqZWN0LndpZHRoJiYob2JqZWN0LnBvc2l0aW9uWzBdPWNhbnZhcy53aWR0aCksb2JqZWN0LnBvc2l0aW9uWzFdPmNhbnZhcy5oZWlnaHQ/b2JqZWN0LnBvc2l0aW9uWzFdPS1vYmplY3QuaGVpZ2h0Om9iamVjdC5wb3NpdGlvblsxXTwtb2JqZWN0LmhlaWdodCYmKG9iamVjdC5wb3NpdGlvblsxXT1jYW52YXMuaGVpZ2h0KSxjdHguc2F2ZSgpLGN0eC50cmFuc2xhdGUob2JqZWN0LnBvc2l0aW9uWzBdLG9iamVjdC5wb3NpdGlvblsxXSksY3R4LnRyYW5zbGF0ZShvYmplY3Qud2lkdGgvMixvYmplY3QuaGVpZ2h0LzIpLGN0eC5yb3RhdGUob2JqZWN0LnJvdGF0aW9uKk1hdGguUEkvMTgwKSxvYmplY3QuY3ljbGUpe3ZhciBjb2x1bW49b2JqZWN0LmN5Y2xlLmklb2JqZWN0LmN5Y2xlLmNvbHVtbnMscm93PU1hdGguZmxvb3Iob2JqZWN0LmN5Y2xlLmkvb2JqZWN0LmN5Y2xlLmNvbHVtbnMpO2N0eC5kcmF3SW1hZ2Uob2JqZWN0LmltZyxvYmplY3QuY3ljbGUuc2l6ZVswXSpjb2x1bW4sb2JqZWN0LmN5Y2xlLnNpemVbMV0qcm93LG9iamVjdC5jeWNsZS5zaXplWzBdLG9iamVjdC5jeWNsZS5zaXplWzFdLC1vYmplY3Qud2lkdGgvMiwtb2JqZWN0LmhlaWdodC8yLG9iamVjdC53aWR0aCxvYmplY3QuaGVpZ2h0KSxvYmplY3QuY3ljbGUuaTw9MD8ob2JqZWN0LmN5Y2xlLmk9MCxvYmplY3QuY3ljbGUuZGlyZWN0aW9uPSEwKTpvYmplY3QuY3ljbGUuaT49b2JqZWN0LmN5Y2xlLmNvbHVtbnMqb2JqZWN0LmN5Y2xlLnJvd3MmJihvYmplY3QuY3ljbGUuaT1vYmplY3QuY3ljbGUuY29sdW1ucypvYmplY3QuY3ljbGUucm93cy0xLG9iamVjdC5jeWNsZS5kaXJlY3Rpb249ITEpfWVsc2UgY3R4LmRyYXdJbWFnZShvYmplY3QuaW1nLC1vYmplY3Qud2lkdGgvMiwtb2JqZWN0LmhlaWdodC8yLG9iamVjdC53aWR0aCxvYmplY3QuaGVpZ2h0KTtjdHgucmVzdG9yZSgpfWZ1bmN0aW9uIGdldEVudHJ5UG9zaXRpb24od2lkdGgsaGVpZ2h0KXt2YXIgeCxncmlkWD0yKk1hdGgucmFuZG9tKCksZ3JpZFk9MipNYXRoLnJhbmRvbSgpLHk9MDtyZXR1cm4gZ3JpZFg+PTE/KHg9TWF0aC5yYW5kb20oKSpjYW52YXMud2lkdGgseT15Pj0xPzAtaGVpZ2h0OmNhbnZhcy5oZWlnaHQpOih5PU1hdGgucmFuZG9tKCkqY2FudmFzLmhlaWdodCx4PWdyaWRZPj0xPzAtd2lkdGg6Y2FudmFzLndpZHRoKSxbeCx5XX1mdW5jdGlvbiBoaXQob2JqZWN0MSxvYmplY3QyKXtyZXR1cm4gb2JqZWN0MS5wb3NpdGlvblswXTxvYmplY3QyLnBvc2l0aW9uWzBdK29iamVjdDIud2lkdGgmJm9iamVjdDIucG9zaXRpb25bMF08b2JqZWN0MS5wb3NpdGlvblswXStvYmplY3QxLndpZHRoJiZvYmplY3QxLnBvc2l0aW9uWzFdPG9iamVjdDIucG9zaXRpb25bMV0rb2JqZWN0Mi5oZWlnaHQmJm9iamVjdDIucG9zaXRpb25bMV08b2JqZWN0MS5wb3NpdGlvblsxXStvYmplY3QxLmhlaWdodH1mdW5jdGlvbiBhdXRvU3Bhd24oKXtpZihPYmplY3Qua2V5cyhhc3Rlcm9pZHMpLmxlbmd0aDwyMDApe3ZhciBpZD1NYXRoLnJvdW5kKDFlOCpNYXRoLnJhbmRvbSgpKTthc3Rlcm9pZHNbaWRdPW5ldyBBc3Rlcm9pZChpZCl9JHNjb3BlLnBsYXlpbmcmJnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7YXV0b1NwYXduKCl9KSwkc2NvcGUuc2NvcmU8MWUzPzFlMzokc2NvcGUuc2NvcmU8MmUzPzkwMDokc2NvcGUuc2NvcmU8M2UzPzgwMDokc2NvcGUuc2NvcmU8NGUzPzcwMDokc2NvcGUuc2NvcmU8NWUzPzYwMDokc2NvcGUuc2NvcmU8NmUzPzUwMDokc2NvcGUuc2NvcmU8N2UzPzQwMDokc2NvcGUuc2NvcmU8OGUzPzMwMDoyMDApfWZ1bmN0aW9uIHNwYXduQXN0ZXJvaWRzKGFtb3VudCl7dmFyIGk9MDtkb3t2YXIgaWQ9TWF0aC5yb3VuZCgxZTgqTWF0aC5yYW5kb20oKSk7YXN0ZXJvaWRzW2lkXT1uZXcgQXN0ZXJvaWQoaWQpfXdoaWxlKGkrKzw9YW1vdW50KX1mdW5jdGlvbiBzcGF3blBvd2VydXAoKXtpZihPYmplY3Qua2V5cyhwb3dlcnVwcykubGVuZ3RoPDMpe3ZhciBpZD1NYXRoLnJvdW5kKDFlOCpNYXRoLnJhbmRvbSgpKTtwb3dlcnVwc1tpZF09bmV3IFBvd2VydXAoaWQpfX1mdW5jdGlvbiBnYW1lT3Zlcigpe2Zvcih2YXIgaSBpbiAkc2NvcGUucGxheWluZz0hMSxhc3Rlcm9pZHMpYXN0ZXJvaWRzW2ldLmV4cGxvZGUoKTtzaG90cz17fSwkc2NvcGUubG9nZ2VkSW4/JHNjb3BlLmN1cnJlbnRVc2VyLmhpZ2hzY29yZS5hc3Rlcm9pZHM8JHNjb3BlLnNjb3JlJiYoJHNjb3BlLmN1cnJlbnRVc2VyLmhpZ2hzY29yZS5hc3Rlcm9pZHM9JHNjb3BlLnNjb3JlLEdhbWVTdmMuc2V0SGlnaHNjb3JlKFwiYXN0ZXJvaWRzXCIsJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCwkc2NvcGUuc2NvcmUpKTokc2NvcGUuaGlnaHNjb3JlPCRzY29wZS5zY29yZSYmKCRzY29wZS5oaWdoc2NvcmU9JHNjb3BlLnNjb3JlKX1mdW5jdGlvbiByZXNpemVDYW52YXMoKXtjb25zb2xlLmxvZyh3aW5kb3cuaW5uZXJXaWR0aCksY2FudmFzLndpZHRoPXdpbmRvdy5pbm5lcldpZHRoLGNhbnZhcy5oZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0LShjYW52YXMud2lkdGg8PTc2OD81MDoxMDUpfWV4cGxvc2lvbkltYWdlLnNyYz1cImFzdGVyb2lkcy9leHBsb3Npb24ucG5nXCIsd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsKGZ1bmN0aW9uKGUpe21hcFtlLmtleUNvZGV8fGUud2hpY2hdPSEwfSksITApLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwoZnVuY3Rpb24oZSl7bWFwW2Uua2V5Q29kZXx8ZS53aGljaF09ITF9KSwhMCksJHNjb3BlLmhpZ2hzY29yZT0wLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIscmVzaXplQ2FudmFzLCExKSxyZXNpemVDYW52YXMoKSxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uIGRyYXcoKXtmb3IodmFyIGkgaW4gY3R4LmNsZWFyUmVjdCgwLDAsY2FudmFzLndpZHRoLGNhbnZhcy5oZWlnaHQpLHNob3RzKXNob3RzW2ldLmxpZmVzcGFuPD0wP2RlbGV0ZSBzaG90c1tpXTpzaG90c1tpXS5tb3ZlKCk7Zm9yKGkgaW4gYXN0ZXJvaWRzKWFzdGVyb2lkc1tpXS5tb3ZlKCk7Zm9yKGkgaW4gcG93ZXJ1cHMpcG93ZXJ1cHNbaV0ubW92ZSgpO2ZvcihpIGluIGV4cGxvc2lvbnMpZXhwbG9zaW9uc1tpXS5saWZlc3Bhbjw9MD9kZWxldGUgZXhwbG9zaW9uc1tpXTpleHBsb3Npb25zW2ldLm1vdmUoKTtpZihldmFsdWF0ZUtleXMoKSwkc2NvcGUucGxheWluZylzcGFjZXNoaXAubW92ZSgpO2Vsc2V7dmFyIGdyYWRpZW50PWN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLDAsY2FudmFzLndpZHRoLDApO2dyYWRpZW50LmFkZENvbG9yU3RvcChcIjBcIixcInJnYihcIitNYXRoLmZsb29yKDI1Ni0yNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiKVwiKSxncmFkaWVudC5hZGRDb2xvclN0b3AoXCIwLjI1XCIsXCJyZ2IoXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIilcIiksZ3JhZGllbnQuYWRkQ29sb3JTdG9wKFwiMC41XCIsXCJyZ2IoXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDI1Ni0yNTYqdGFsbHkvMTAwKStcIilcIiksZ3JhZGllbnQuYWRkQ29sb3JTdG9wKFwiMC43NVwiLFwicmdiKFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDI1Ni0yNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIpXCIpLGdyYWRpZW50LmFkZENvbG9yU3RvcChcIjEuMFwiLFwicmdiKFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIpXCIpLGN0eC5maWxsU3R5bGU9Z3JhZGllbnQsY3R4LmZvbnQ9XCI2MHB4IE1vbm90b25cIixjdHguZmlsbFRleHQoXCJBc3Rlcm9pZHNcIixjYW52YXMud2lkdGgvMi1jdHgubWVhc3VyZVRleHQoXCJBc3Rlcm9pZHNcIikud2lkdGgvMixjYW52YXMuaGVpZ2h0LzIpLGN0eC5mb250PVwiMjBweCBBbGRyaWNoXCIsY3R4LmZpbGxUZXh0KFwiUHJlc3Mgc3BhY2UgdG8gc3RhcnRcIixjYW52YXMud2lkdGgvMi1jdHgubWVhc3VyZVRleHQoXCJQcmVzcyBzcGFjZSB0byBzdGFydFwiKS53aWR0aC8yLGNhbnZhcy5oZWlnaHQvMisyMCksY3R4LmZpbGxUZXh0KFwiRGVzaWduZWQgYW5kIGRldmVsb3BlZCBieSBMYXVyZW50IERlYmFja2VyXCIsY2FudmFzLndpZHRoLzItY3R4Lm1lYXN1cmVUZXh0KFwiRGVzaWduZWQgYW5kIGRldmVsb3BlZCBieSBMYXVyZW50IERlYmFja2VyXCIpLndpZHRoLzIsY2FudmFzLmhlaWdodC0zMCl9KHRhbGx5Kz1kaXJlY3Rpb24/MTotMSk+MTAwPyh0YWxseT0xMDAsZGlyZWN0aW9uPSExKTp0YWxseTwwJiYodGFsbHk9MCxkaXJlY3Rpb249ITApO3JlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KX0pKTt2YXIgdGFsbHk9MCxkaXJlY3Rpb249ITA7JHNjb3BlLnNwYWNlPWZ1bmN0aW9uKCl7cmV0dXJue2JhY2tncm91bmRJbWFnZTondXJsKFwiYXN0ZXJvaWRzL3NwYWNlJytzcGFjZSsnLmpwZ1wiKSd9fX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQnViYmxlc0N0cmxcIixbXCIkc2NvcGVcIixmdW5jdGlvbigkc2NvcGUpe3ZhciBjYW52YXM9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidWJibGVzLXBhZ2VcIiksY3R4PWNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiksYnViYmxlcz1bXSxjb2xvcnM9W1wiI2ZmYzMwMFwiLFwiI2ZmNTczM1wiLFwiI2M3MDAzOVwiLFwiIzkwMGMzZVwiLFwiIzU3MTg0NVwiXTtmdW5jdGlvbiBCdWJibGUoKXt0aGlzLmxpZmVzcGFuPTAsdGhpcy5yYWRpdXM9MSx0aGlzLmV4cGFuZGluZz0hMCx0aGlzLnNwZWVkPU1hdGgucm91bmQoMypNYXRoLnJhbmRvbSgpKSx0aGlzLmNpcmN1bWZlcmVuY2U9TWF0aC5yb3VuZCg1MCpNYXRoLnJhbmRvbSgpKSs1LHRoaXMubWF4UmFkaXVzPU1hdGgucm91bmQoMjAwKk1hdGgucmFuZG9tKCkpKzIwLHRoaXMueD1NYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkqY2FudmFzLndpZHRoKSx0aGlzLnk9TWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKmNhbnZhcy5oZWlnaHQpLHRoaXMudng9TWF0aC5yYW5kb20oKT49LjU/MTotMSx0aGlzLnZ5PU1hdGgucmFuZG9tKCk+PS41PzE6LTF9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKChmdW5jdGlvbiBmaWx0ZXJCdWJibGVzKCl7YnViYmxlcy5wdXNoKG5ldyBCdWJibGUpLGJ1YmJsZXM9YnViYmxlcy5maWx0ZXIoKGZ1bmN0aW9uKGJ1YmJsZSl7cmV0dXJuIGJ1YmJsZS5yYWRpdXM9PT1idWJibGUubWF4UmFkaXVzJiYoYnViYmxlLmV4cGFuZGluZz0hMSksYnViYmxlLngrPWJ1YmJsZS52eCpidWJibGUuc3BlZWQsYnViYmxlLnkrPWJ1YmJsZS52eSpidWJibGUuc3BlZWQsYnViYmxlLnJhZGl1cys9YnViYmxlLmV4cGFuZGluZz8xOi0xLGJ1YmJsZS5yYWRpdXM+MH0pKSxjdHguY2xlYXJSZWN0KDAsMCxjYW52YXMud2lkdGgsY2FudmFzLmhlaWdodCksYnViYmxlcy5mb3JFYWNoKChmdW5jdGlvbihidWJibGUpe2NvbG9yc1tNYXRoLnJvdW5kKGNvbG9ycy5sZW5ndGgqYnViYmxlLnJhZGl1cy9idWJibGUubWF4UmFkaXVzKV0sY3R4LmJlZ2luUGF0aCgpLGN0eC5hcmMoYnViYmxlLngsYnViYmxlLnksYnViYmxlLnJhZGl1cywwLDIqTWF0aC5QSSksY3R4LmZpbGxTdHlsZT1jb2xvcnNbTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoKmJ1YmJsZS5yYWRpdXMvYnViYmxlLm1heFJhZGl1cyldLGN0eC5maWxsKCksY3R4LnN0cm9rZVN0eWxlPWNvbG9yc1tjb2xvcnMubGVuZ3RoLU1hdGgucm91bmQoY29sb3JzLmxlbmd0aCpidWJibGUucmFkaXVzL2J1YmJsZS5tYXhSYWRpdXMpXSxjdHgubGluZVdpZHRoPWJ1YmJsZS5jaXJjdW1mZXJlbmNlKmJ1YmJsZS5yYWRpdXMvYnViYmxlLm1heFJhZGl1cyxjdHguc3Ryb2tlKCl9KSkscmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZpbHRlckJ1YmJsZXMpfSkpLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcmVzaXplQ2FudmFzKCl7Y2FudmFzLndpZHRoPXdpbmRvdy5pbm5lcldpZHRoLGNhbnZhcy5oZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0LShjYW52YXMud2lkdGg8PTc2OD81NToxMTEpfXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIscmVzaXplQ2FudmFzLCExKSxyZXNpemVDYW52YXMoKX0oKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQ2hhcmFkZXNDdHJsXCIsW1wiJHNjb3BlXCIsZnVuY3Rpb24oJHNjb3BlKXskc2NvcGUuc2VsZWN0V29yZD1jYXRlZ29yeT0+eyRzY29wZS53b3JkPSRzY29wZS5jaGFyYWRlc1tjYXRlZ29yeV1bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKiRzY29wZS5jaGFyYWRlc1tjYXRlZ29yeV0ubGVuZ3RoKV0sY29uc29sZS5sb2coJHNjb3BlLndvcmQpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQ29udGFjdEN0cmxcIixbXCIkc2NvcGVcIixcIkVtYWlsU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEVtYWlsU3ZjKXskc2NvcGUub3B0aW9ucz1be25hbWU6XCJTcGFtXCIsdGV4dDpcIkkgYW0gYSBzcGFtIGJvdCBhbmQgYXV0b21hdGljYWxseSBjaGVjayB0aGUgZmlyc3Qgb3B0aW9uIEkgZmluZCFcIn0se25hbWU6XCJPcHBvcnR1bml0aXlcIix0ZXh0OlwiWW91IHNlZW0gdG8gaGF2ZSB0aGUgc2tpbGxzIEkgc2VlaywgSSdkIGxpa2UgdG8gdGFsayBhYm91dCBzb21lIG9wcG9ydHVuaXRpZXMuXCJ9LHtuYW1lOlwiUmVzdW1lXCIsdGV4dDpcIkkgZGlnIHRoZSByZXN1bWUsIGhvdyBkaWQgeW91IG1ha2UgaXQ/XCJ9LHtuYW1lOlwiT3RoZXJcIix0ZXh0OlwiU3VtdGluIGVsc2UhXCJ9XSwkc2NvcGUuY29udGFjdD17ZW1haWw6XCJcIixuYW1lOlwiXCIscGhvbmU6XCJcIixhYm91dDpcIlwiLG1lc3NhZ2U6XCJcIn0sJHNjb3BlLnNlbmQ9ZnVuY3Rpb24oKXskc2NvcGUuc2VuZGluZz0hMCxjb25zb2xlLmxvZyhcImhlcmVcIiksRW1haWxTdmMuc2VuZCh7ZW1haWw6JHNjb3BlLmNvbnRhY3QuZW1haWwsbmFtZTokc2NvcGUuY29udGFjdC5uYW1lLHBob25lOiRzY29wZS5jb250YWN0LnBob25lLGFib3V0OiRzY29wZS5jb250YWN0LmFib3V0LG1lc3NhZ2U6JHNjb3BlLmNvbnRhY3QubWVzc2FnZX0pLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuc2VudD0hMCxjb25zb2xlLmxvZyhcIlNVQ0NFU1MuIHN0YXR1cz0lZCwgdGV4dD0lc1wiLHJlc3BvbnNlLnN0YXR1cyxyZXNwb25zZS50ZXh0KSxjb25zb2xlLmxvZyhyZXNwb25zZSl9KSwoZnVuY3Rpb24oZXJyKXskc2NvcGUuc2VuZGluZz0hMSxjb25zb2xlLmxvZyhcIkZBSUxFRC4gZXJyb3I9XCIsZXJyKX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkV4cGVyaWVuY2VDdHJsXCIsW1wiJHNjb3BlXCIsZnVuY3Rpb24oJHNjb3BlKXskc2NvcGUuZ2V0U2tpbGw9ZnVuY3Rpb24oc2tpbGxDb2RlKXtpZigkc2NvcGUuc2tpbGxzKXJldHVybiAkc2NvcGUuc2tpbGxzLmZpbmQoKGZ1bmN0aW9uKHNraWxsKXtyZXR1cm4gc2tpbGwuY29kZT09PXNraWxsQ29kZX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkhvYmJpZXNDdHJsXCIsW1wiJHNjb3BlXCIsXCIkd2luZG93XCIsZnVuY3Rpb24oJHNjb3BlLCR3aW5kb3cpeyRzY29wZS5ob2JieVNlbGVjdG9yVmlzaWJsZT0hMSwkLmdldEpTT04oXCJodHRwczovL3d3dy5yZWRkaXQuY29tL3VzZXIvYmVsZ29jYW5hZGlhbi9hYm91dC8uanNvblwiLChmdW5jdGlvbihyZXNwb25zZSl7fSkpLCRzY29wZS5zZWxlY3RlZEhvYmJ5PSRzY29wZS5ob2JiaWVzWzBdLCRzY29wZS5zZWxlY3RIb2JieT1mdW5jdGlvbihob2JieSl7JHNjb3BlLnNlbGVjdGVkSG9iYnk9aG9iYnksJHNjb3BlLmhvYmJ5U2VsZWN0b3JWaXNpYmxlPSExfSwkc2NvcGUuc2hvd0hvYmJ5PWZ1bmN0aW9uKHZhbHVlLGluZGV4LGFycmF5KXtyZXR1cm4hIXZhbHVlLmltYWdlcyYmdmFsdWUuaW1hZ2VzLmxlbmd0aD4wfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiTGVtbWluZ3NDdHJsXCIsW1wiJHNjb3BlXCIsXCJHYW1lU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEdhbWVTdmMpe3ZhciBMRUZUPTAsUklHSFQ9MSxjYW52YXM9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsZW1taW5ncy1wYWdlXCIpLGN0eD1jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLGxlbW1pbmdzSW1hZ2U9bmV3IEltYWdlO2xlbW1pbmdzSW1hZ2Uuc3JjPVwibGVtbWluZ3MvbGVtbWluZ3MucG5nXCI7dmFyIGRlY29ySW1hZ2U9bmV3IEltYWdlO2RlY29ySW1hZ2Uuc3JjPVwibGVtbWluZ3MvZGVjb3IucG5nXCI7dmFyIGxlbW1pbmdzPXt9LHN0YXJ0ZWQ9ITEsYWN0aW9ucz17d2Fsazp7c3RhcnQ6WzAsMF0sZW5kOlszMjAsMjBdLGNvbHVtbnM6OCxyb3dzOjEscmV2ZXJzZTohMX0saHVoOntzdGFydDpbMzIwLDBdLGVuZDpbNjQwLDIwXSxjb2x1bW5zOjgscm93czoxLHJldmVyc2U6ITB9LGZhbGw6e3N0YXJ0OlswLDgwXSxlbmQ6WzE2MCwxMDBdLGNvbHVtbnM6NCxyb3dzOjEscmV2ZXJzZTohMX0sZmx5OntzdGFydDpbMTYwLDgwXSxlbmQ6WzQ4MCwxMTBdLGNvbHVtbnM6OCxyb3dzOjEscmV2ZXJzZTohMX0sc3RvcDp7c3RhcnQ6WzAsMTIwXSxlbmQ6WzY0MCwxNDBdLGNvbHVtbnM6MTYscm93czoxLHJldmVyc2U6ITF9LGNsaW1iOntzdGFydDpbMCwxNjBdLGVuZDpbNjQwLDE4NV0sY29sdW1uczoxNixyb3dzOjEscmV2ZXJzZTohMX0sYnVpbGQ6e3N0YXJ0OlswLDIwMF0sZW5kOls2NDAsMjI1XSxjb2x1bW5zOjE2LHJvd3M6MSxyZXZlcnNlOiExfSxwdW5jaDp7c3RhcnQ6WzAsMjQwXSxlbmQ6WzY0MCwzMDBdLGNvbHVtbnM6MTYscm93czoyLHJldmVyc2U6ITF9LGRpZzp7c3RhcnQ6WzAsMzIwXSxlbmQ6WzMyMCwzNDVdLGNvbHVtbnM6OCxyb3dzOjEscmV2ZXJzZTohMX19O2Z1bmN0aW9uIExlbW1pbmcoaW5pdCl7dGhpcy5wb3NpdGlvbj1bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihjYW52YXMud2lkdGgtMjAwKSkrMTAwLE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooY2FudmFzLmhlaWdodC0yMDApKSsxMDBdLHRoaXMuZGlyZWN0aW9uPTIqTWF0aC5yYW5kb20oKT4xP0xFRlQ6UklHSFQsdGhpcy5hY3Q9ZnVuY3Rpb24oYWN0aW9uKXt0aGlzLmFjdGlvbj1hY3Rpb25zW2FjdGlvbl0sdGhpcy5jeWNsZT0wLHRoaXMud2lkdGg9KHRoaXMuYWN0aW9uLmVuZFswXS10aGlzLmFjdGlvbi5zdGFydFswXSkvdGhpcy5hY3Rpb24uY29sdW1ucyx0aGlzLmhlaWdodD0odGhpcy5hY3Rpb24uZW5kWzFdLXRoaXMuYWN0aW9uLnN0YXJ0WzFdLTIwKih0aGlzLmFjdGlvbi5yb3dzLTEpKS90aGlzLmFjdGlvbi5yb3dzLHRoaXMuYW5pbWF0aW9uPSEwfSx0aGlzLmFjdChpbml0KSx0aGlzLm1vdmU9ZnVuY3Rpb24oKXtjdHguc2F2ZSgpLGN0eC50cmFuc2xhdGUodGhpcy5wb3NpdGlvblswXSx0aGlzLnBvc2l0aW9uWzFdKSxjdHgudHJhbnNsYXRlKHRoaXMud2lkdGgvMix0aGlzLmhlaWdodC8yKSx0aGlzLmRpcmVjdGlvbj09PUxFRlQmJmN0eC5zY2FsZSgtMSwxKTt2YXIgY29sdW1uPXRoaXMuY3ljbGUldGhpcy5hY3Rpb24uY29sdW1ucyxyb3c9TWF0aC5mbG9vcih0aGlzLmN5Y2xlL3RoaXMuYWN0aW9uLmNvbHVtbnMpO2N0eC5kcmF3SW1hZ2UobGVtbWluZ3NJbWFnZSx0aGlzLndpZHRoKmNvbHVtbit0aGlzLmFjdGlvbi5zdGFydFswXSwodGhpcy5oZWlnaHQrMjApKnJvdyt0aGlzLmFjdGlvbi5zdGFydFsxXSx0aGlzLndpZHRoLHRoaXMuaGVpZ2h0LDAsMCwyKnRoaXMud2lkdGgsMip0aGlzLmhlaWdodCksY3R4LnJlc3RvcmUoKSx0aGlzLmFjdGlvbi5yZXZlcnNlP3RoaXMuYW5pbWF0aW9uPyh0aGlzLmN5Y2xlKyssdGhpcy5jeWNsZT49dGhpcy5hY3Rpb24uY29sdW1ucyp0aGlzLmFjdGlvbi5yb3dzJiYodGhpcy5hbmltYXRpb249IXRoaXMuYW5pbWF0aW9uLHRoaXMuY3ljbGUtLSkpOih0aGlzLmN5Y2xlLS0sdGhpcy5jeWNsZTwwJiYodGhpcy5hbmltYXRpb249IXRoaXMuYW5pbWF0aW9uLHRoaXMuY3ljbGU9MCkpOih0aGlzLmN5Y2xlKyssdGhpcy5jeWNsZT49dGhpcy5hY3Rpb24uY29sdW1ucyp0aGlzLmFjdGlvbi5yb3dzJiYodGhpcy5jeWNsZT0wKSl9fWZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpe2NhbnZhcy53aWR0aD13aW5kb3cuaW5uZXJXaWR0aCxjYW52YXMuaGVpZ2h0PXdpbmRvdy5pbm5lckhlaWdodC0oY2FudmFzLndpZHRoPD03Njg/NTA6MTA1KX13aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHJlc2l6ZUNhbnZhcywhMSkscmVzaXplQ2FudmFzKCksT2JqZWN0LmtleXMoYWN0aW9ucykuZm9yRWFjaCgoZnVuY3Rpb24oYWN0aW9uKXtsZW1taW5nc1tNYXRoLnJvdW5kKDFlOCpNYXRoLnJhbmRvbSgpKV09bmV3IExlbW1pbmcoYWN0aW9uKX0pKTtsZXQgaGF0Y2g9bmV3IGZ1bmN0aW9uKCl7dGhpcy5wb3NpdGlvbj1bMjAsMjBdLHRoaXMuYWN0aW9uPXtzdGFydDpbMCwwXSxlbmQ6WzgyLDUwMF0sY29sdW1uczoxLHJvd3M6MTB9LHRoaXMud2lkdGg9KHRoaXMuYWN0aW9uLmVuZFswXS10aGlzLmFjdGlvbi5zdGFydFswXSkvdGhpcy5hY3Rpb24uY29sdW1ucyx0aGlzLmhlaWdodD0odGhpcy5hY3Rpb24uZW5kWzFdLXRoaXMuYWN0aW9uLnN0YXJ0WzFdKS90aGlzLmFjdGlvbi5yb3dzLHRoaXMuY3ljbGU9MCx0aGlzLm9wZW49ZnVuY3Rpb24oKXt2YXIgY29sdW1uLHJvdztjdHguc2F2ZSgpLGN0eC50cmFuc2xhdGUodGhpcy5wb3NpdGlvblswXSx0aGlzLnBvc2l0aW9uWzFdKSxjdHgudHJhbnNsYXRlKHRoaXMud2lkdGgvMix0aGlzLmhlaWdodC8yKSxzdGFydGVkPyhjb2x1bW49dGhpcy5jeWNsZSV0aGlzLmFjdGlvbi5jb2x1bW5zLHJvdz1NYXRoLmZsb29yKHRoaXMuY3ljbGUvdGhpcy5hY3Rpb24uY29sdW1ucyksdGhpcy5jeWNsZTw5JiZ0aGlzLmN5Y2xlKyspOihjb2x1bW49MCxyb3c9MCksY3R4LmRyYXdJbWFnZShkZWNvckltYWdlLHRoaXMud2lkdGgqY29sdW1uK3RoaXMuYWN0aW9uLnN0YXJ0WzBdLHRoaXMuaGVpZ2h0KnJvdyt0aGlzLmFjdGlvbi5zdGFydFsxXS0xLHRoaXMud2lkdGgsdGhpcy5oZWlnaHQsMCwwLDIqdGhpcy53aWR0aCwyKnRoaXMuaGVpZ2h0KSxjdHgucmVzdG9yZSgpfX07IWZ1bmN0aW9uIGRyYXcoKXtpZihjdHguY2xlYXJSZWN0KDAsMCxjYW52YXMud2lkdGgsY2FudmFzLmhlaWdodCksc3RhcnRlZClmb3IodmFyIGkgaW4gbGVtbWluZ3MpbGVtbWluZ3NbaV0ubW92ZSgpO2Vsc2UgY3R4LmJlZ2luUGF0aCgpLGN0eC5mb250PVwiNDBweCBNb25vdG9uXCIsY3R4LmxpbmVXaWR0aD1cIjEwXCIsY3R4LnN0cm9rZVN0eWxlPVwiYmx1ZVwiLGN0eC5yZWN0KDE1LGNhbnZhcy5oZWlnaHQtNDUsY3R4Lm1lYXN1cmVUZXh0KFwiU3RhcnRcIikud2lkdGgrMjAsY3R4Lm1lYXN1cmVUZXh0KFwiU3RhcnRcIikuaGVpZ2h0K2NhbnZhcy5oZWlnaHQtNDUpLGN0eC5maWxsKCksY3R4LmZpbGxUZXh0KFwiU3RhcnRcIiwyMCxjYW52YXMuaGVpZ2h0LTUwKTtoYXRjaC5vcGVuKCksc3RhcnRlZD0hMCxzZXRUaW1lb3V0KChmdW5jdGlvbigpe2RyYXcoKX0pLDE1MCl9KCl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkxpc3RzQ3RybFwiLFtcIiRzY29wZVwiLFwiJGxvY2F0aW9uXCIsXCJDYXRlZ29yaWVzU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRsb2NhdGlvbixDYXRlZ29yaWVzU3ZjKXskc2NvcGUuc2hvd0NhdGVnb3J5PSEwLCRzY29wZS5pbml0PWZ1bmN0aW9uKCl7Q2F0ZWdvcmllc1N2Yy5nZXRDYXRlZ29yaWVzKCkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2Upe2Zvcih2YXIgaSBpbiAkc2NvcGUuY2F0ZWdvcmllcz1yZXNwb25zZS5kYXRhLCRzY29wZS50YXNrcz1bXSwkc2NvcGUuY2F0ZWdvcmllcylmb3IodmFyIGogaW4gJHNjb3BlLmNhdGVnb3JpZXNbaV0udGFza3MpJHNjb3BlLnRhc2tzLnB1c2goe2NhdGVnb3J5OiRzY29wZS5jYXRlZ29yaWVzW2ldLm5hbWUsdGFzazokc2NvcGUuY2F0ZWdvcmllc1tpXS50YXNrc1tqXS5uYW1lfSl9KSl9LCRzY29wZS5zZWxlY3RDYXRlZ29yeT1mdW5jdGlvbihjYXRlZ29yeSl7Zm9yKHZhciBpIGluICRzY29wZS5zZWxlY3RlZENhdGVnb3J5PWNhdGVnb3J5LCRzY29wZS5zZWxlY3RlZFRhc2tzPVtdLCRzY29wZS5zZWxlY3RhYmxlVGFza3M9W10sJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MpJHNjb3BlLnNlbGVjdGFibGVUYXNrcy5wdXNoKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldKTskc2NvcGUuc2hvd0NhdGVnb3J5PSExLCRzY29wZS5lbnRlcmVkQ2F0ZWdvcnk9XCJcIn0sJHNjb3BlLm5ld0NhdGVnb3J5PWZ1bmN0aW9uKGNhdGVnb3J5KXtmb3IodmFyIGZvdW5kPSExLGk9MDtpPCRzY29wZS5jYXRlZ29yaWVzLmxlbmd0aDtpKyspJHNjb3BlLmNhdGVnb3JpZXNbaV0ubmFtZT09PWNhdGVnb3J5JiYoJHNjb3BlLnNlbGVjdENhdGVnb3J5KCRzY29wZS5jYXRlZ29yaWVzW2ldKSxmb3VuZD0hMCk7Zm91bmR8fENhdGVnb3JpZXNTdmMuYWRkQ2F0ZWdvcnkoe2NhdGVnb3J5fSkudGhlbigoZnVuY3Rpb24oY2F0ZWdvcnkpeyRzY29wZS5pbml0KCksJHNjb3BlLnNlbGVjdENhdGVnb3J5KGNhdGVnb3J5KX0pKSwkc2NvcGUuZW50ZXJlZENhdGVnb3J5PVwiXCJ9LCRzY29wZS5uZXdUYXNrPWZ1bmN0aW9uKHRhc2spe3ZhciBmb3VuZD0hMTtmb3IodmFyIGkgaW4gJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MpJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0ubmFtZT09PXRhc2smJihmb3VuZD0hMCwkc2NvcGUuc2VsZWN0VGFzaygkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXSkpO2ZvdW5kfHxDYXRlZ29yaWVzU3ZjLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkubmFtZSx7dGFza30pLnRoZW4oKGZ1bmN0aW9uKCl7JHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MucHVzaCh7bmFtZTp0YXNrfSksJHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MubGVuZ3RoLTFdKX0pKSwkc2NvcGUuZW50ZXJlZFRhc2s9XCJcIn0sJHNjb3BlLnNlbGVjdFRhc2s9ZnVuY3Rpb24odGFzayl7JHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsdGFzayksJHNjb3BlLnJlbW92ZVRhc2soJHNjb3BlLnNlbGVjdGFibGVUYXNrcyx0YXNrKSwkc2NvcGUuZW50ZXJlZFRhc2s9XCJcIn0sJHNjb3BlLnVuc2VsZWN0VGFzaz1mdW5jdGlvbih0YXNrKXskc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLHRhc2spLCRzY29wZS5yZW1vdmVUYXNrKCRzY29wZS5zZWxlY3RlZFRhc2tzLHRhc2spfSwkc2NvcGUuYWRkVGFzaz1mdW5jdGlvbih0YXNrTGlzdCx0YXNrKXt0YXNrTGlzdC5wdXNoKHRhc2spfSwkc2NvcGUucmVtb3ZlVGFzaz1mdW5jdGlvbih0YXNrTGlzdCx0YXNrKXt0YXNrTGlzdC5zcGxpY2UodGFza0xpc3QuaW5kZXhPZih0YXNrKSwxKX0sJHNjb3BlLnN0YXJ0UHJpb3JpdGl6aW5nPWZ1bmN0aW9uKCl7Q2F0ZWdvcmllc1N2Yy5zZXRQcmlvcml0eUxpc3QoJHNjb3BlLnNlbGVjdGVkVGFza3MpLCRsb2NhdGlvbi5wYXRoKFwiL3ByaW9yaXRpemVcIil9LCRzY29wZS5nZXRRdWVzdGlvbnM9ZnVuY3Rpb24oKXtpZighJHNjb3BlLnNlbGVjdGVkVGFza3MpcmV0dXJuXCJcIjtmb3IodmFyIGNvdW50ZXI9MCxpPSRzY29wZS5zZWxlY3RlZFRhc2tzLmxlbmd0aC0xO2k+MDtpLS0pY291bnRlcis9aTtyZXR1cm4gY291bnRlcn19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkxvZ2luQ3RybFwiLFtcIiRzY29wZVwiLFwiJGxvY2F0aW9uXCIsXCJVc2VyU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRsb2NhdGlvbixVc2VyU3ZjKXt2YXIgdWk9bmV3IGZpcmViYXNldWkuYXV0aC5BdXRoVUkoZmlyZWJhc2UuYXV0aCgpKTtmdW5jdGlvbiBzdGFydFVJKCl7dWkuc3RhcnQoXCIjZmlyZWJhc2V1aS1hdXRoLWNvbnRhaW5lclwiLHtjYWxsYmFja3M6e3NpZ25JblN1Y2Nlc3M6ZnVuY3Rpb24oY3VycmVudFVzZXIsY3JlZGVudGlhbCxyZWRpcmVjdFVybCl7cmV0dXJuIGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlci5nZXRJZFRva2VuKCEwKS50aGVuKChmdW5jdGlvbihpZFRva2VuKXtVc2VyU3ZjLmF1dGhlbnRpY2F0ZSh7ZGlzcGxheU5hbWU6Y3VycmVudFVzZXIuZGlzcGxheU5hbWUsZW1haWw6Y3VycmVudFVzZXIuZW1haWwscGhvdG9VUkw6Y3VycmVudFVzZXIucGhvdG9VUkwsZW1haWxWZXJpZmllZDpjdXJyZW50VXNlci5lbWFpbFZlcmlmaWVkLGlkVG9rZW59KS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwibG9naW5cIixyZXNwb25zZS5kYXRhKSwkKFwiI21vZGFsLWxvZ2luXCIpLm1vZGFsKFwiaGlkZVwiKX0pLChmdW5jdGlvbigpeyRzY29wZS4kZW1pdChcInBvcHVwXCIse21lc3NhZ2U6XCJMb2dpbiBGYWlsZWRcIix0eXBlOlwiYWxlcnQtZGFuZ2VyXCJ9KX0pKX0pKS5jYXRjaCgoZnVuY3Rpb24oZXJyb3Ipe2NvbnNvbGUuZXJyb3IoZXJyb3IpfSkpLCExfSxzaWduSW5GYWlsdXJlOmZ1bmN0aW9uKGVycm9yKXtpZihcImZpcmViYXNldWkvYW5vbnltb3VzLXVwZ3JhZGUtbWVyZ2UtY29uZmxpY3RcIiE9ZXJyb3IuY29kZSlyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7dmFyIGNyZWQ9ZXJyb3IuY3JlZGVudGlhbDtyZXR1cm4gZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDcmVkZW50aWFsKGNyZWQpfSx1aVNob3duOmZ1bmN0aW9uKCl7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2FkZXJcIikuc3R5bGUuZGlzcGxheT1cIm5vbmVcIn19LHNpZ25JblN1Y2Nlc3NVcmw6XCIvaG9tZVwiLHNpZ25Jbk9wdGlvbnM6W2ZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIuUFJPVklERVJfSURdLHNpZ25JbkZsb3c6XCJwb3B1cFwifSl9JHNjb3BlLiRvbihcImxvZ291dFwiLChmdW5jdGlvbihldmVudCl7dWkucmVzZXQoKSxzdGFydFVJKCl9KSksc3RhcnRVSSgpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJQb3N0c0N0cmxcIixbXCIkc2NvcGVcIixcIiRmaWx0ZXJcIixcIlBvc3RzU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRmaWx0ZXIsUG9zdHNTdmMpeyRzY29wZS5hZGRQb3N0PWZ1bmN0aW9uKCl7JHNjb3BlLnBvc3RCb2R5JiZQb3N0c1N2Yy5jcmVhdGUoe2JvZHk6JHNjb3BlLnBvc3RCb2R5fSkudGhlbigoZnVuY3Rpb24ocG9zdCl7JHNjb3BlLnBvc3RCb2R5PW51bGx9KSl9LFBvc3RzU3ZjLmZldGNoKCkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5wb3N0cz1yZXNwb25zZS5kYXRhfSkpLCRzY29wZS4kb24oXCJ3czpuZXdfcG9zdFwiLChmdW5jdGlvbihfLHBvc3QpeyRzY29wZS4kYXBwbHkoKGZ1bmN0aW9uKCl7UG9zdHNTdmMuZ2V0UG9zdChwb3N0KS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLnBvc3RzLnVuc2hpZnQocmVzcG9uc2UuZGF0YSl9KSl9KSl9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlByaW9yaXRpemVDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIkNhdGVnb3JpZXNTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLENhdGVnb3JpZXNTdmMpeyRzY29wZS5wcmlvcml0eUxpc3Q9Q2F0ZWdvcmllc1N2Yy5nZXRQcmlvcml0eUxpc3QoKSwkc2NvcGUucHJpb3JpdHlMaXN0Pygkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbj0xLCRzY29wZS5jdXJyZW50UXVlc3Rpb249MSwkc2NvcGUuZG9uZT0hMSk6JGxvY2F0aW9uLnBhdGgoXCIvbGlzdHNcIiksJHNjb3BlLm1ha2VDaG9pY2U9ZnVuY3Rpb24oY2hvaWNlKXtmb3IodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkPT09JHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24mJigkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZT0xPT09Y2hvaWNlPyRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2U6JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2UpOyRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uPT09JHNjb3BlLmN1cnJlbnRRdWVzdGlvbiYmKCRzY29wZS5jdXJyZW50UXVlc3Rpb249JHNjb3BlLmN1cnJlbnRRdWVzdGlvbj09PSRzY29wZS5wcmlvcml0eUxpc3QubGVuZ3RoPzE6JHNjb3BlLmN1cnJlbnRRdWVzdGlvbisxKSwkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbj0kc2NvcGUuY3VycmVudFF1ZXN0aW9uO3ZhciBmb3VuZD0hMTtmb3IoaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KWlmKFwiXCI9PT0kc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSl7Zm91bmQ9ITA7YnJlYWt9Zm91bmR8fCgkKFwiI3ByaW9yaXRpemVDaG9pY2VzXCIpLmhpZGUoMzAwKSwkc2NvcGUuZG9uZT0hMCl9LCRzY29wZS5nZXRCdXR0b25WYWx1ZT1mdW5jdGlvbihjaG9pY2Upe2lmKCEkc2NvcGUucHJpb3JpdHlMaXN0KXJldHVyblwiXCI7Zm9yKHZhciBpPTA7aTwkc2NvcGUucHJpb3JpdHlMaXN0Lmxlbmd0aDtpKyspaWYoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZD09PSRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uKXJldHVybiAxPT09Y2hvaWNlPyRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2U6JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2V9LCRzY29wZS5zZWxlY3RRdWVzdGlvbj1mdW5jdGlvbihxdWVzdGlvbil7JHNjb3BlLnNlbGVjdGVkUXVlc3Rpb249cXVlc3Rpb259LCRzY29wZS5nZXRGaWx0ZXJlZFByaW9yaXR5TGlzdD1mdW5jdGlvbigpe3JldHVybiAkc2NvcGUucHJpb3JpdHlMaXN0PyRzY29wZS5wcmlvcml0eUxpc3Quc29ydCgoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5pZC1iLmlkfSkpLmZpbHRlcigoZnVuY3Rpb24ocXVlc3Rpb24pe3JldHVyblwiXCIhPT1xdWVzdGlvbi5jaG9pY2V8fHF1ZXN0aW9uLmlkPT09JHNjb3BlLmN1cnJlbnRRdWVzdGlvbn0pKTpbXX0sJHNjb3BlLmdldENob2ljZXNNYWRlPWZ1bmN0aW9uKCl7aWYoISRzY29wZS5wcmlvcml0eUxpc3QpcmV0dXJuXCJcIjt2YXIgY2hvaWNlc01hZGU9MDtmb3IodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdClcIlwiIT09JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UmJmNob2ljZXNNYWRlKys7cmV0dXJuIGNob2ljZXNNYWRlfSwkc2NvcGUuZ2V0QnV0dG9uQ2xhc3M9ZnVuY3Rpb24oY2hvaWNlKXtpZighJHNjb3BlLnByaW9yaXR5TGlzdClyZXR1cm5cIlwiO2Zvcih2YXIgaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KWlmKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQ9PT0kc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbilyZXR1cm5cIlwiPT09JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2U/XCJidG4tcHJpbWFyeVwiOjE9PT1jaG9pY2U/JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZT09PSRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlP1wiYnRuLXN1Y2Nlc3NcIjpcImJ0bi1kYW5nZXJcIjokc2NvcGUucHJpb3JpdHlMaXN0W2ldLnNlY29uZENob2ljZT09PSRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlP1wiYnRuLXN1Y2Nlc3NcIjpcImJ0bi1kYW5nZXJcIn0sJHNjb3BlLnNob3dDaG9pY2VzPWZ1bmN0aW9uKCl7JChcIiNwcmlvcml0aXplQ2hvaWNlc1wiKS5zaG93KDFlMyksJChcIiNyZXZpZXdDaG9pY2VzXCIpLmhpZGUoKX0sJHNjb3BlLmNoYXJ0Q2xpY2s9ZnVuY3Rpb24oZXZlbnQpeyRzY29wZS5jaGFydCYmY29uc29sZS5sb2coJHNjb3BlLmNoYXJ0LmdldFNlZ21lbnRzQXRFdmVudChldmVudCkpfSwkc2NvcGUuc2hvd1Jlc3VsdHM9ZnVuY3Rpb24oKXtmb3IodmFyIGkgaW4gJHNjb3BlLmRhdGE9W10sJHNjb3BlLm9wdGlvbnM9e3Jlc3BvbnNpdmU6ITAsc2VnbWVudFNob3dTdHJva2U6ITAsc2VnbWVudFN0cm9rZUNvbG9yOlwiI2ZmZlwiLHNlZ21lbnRTdHJva2VXaWR0aDoyLHBlcmNlbnRhZ2VJbm5lckN1dG91dDowLGFuaW1hdGlvblN0ZXBzOjEwMCxhbmltYXRpb25FYXNpbmc6XCJlYXNlT3V0Qm91bmNlXCIsYW5pbWF0ZVJvdGF0ZTohMCxhbmltYXRlU2NhbGU6ITEsbGVnZW5kVGVtcGxhdGU6JzxoMyBjbGFzcz1cInRjLWNoYXJ0LWpzLWxlZ2VuZFwiIHN0eWxlPVwicGFkZGluZzo1cHhcIj48JSBmb3IgKHZhciBpPTA7IGk8c2VnbWVudHMubGVuZ3RoOyBpKyspeyU+PGRpdiBjbGFzcz1cImxhYmVsXCIgc3R5bGU9XCJmbG9hdDpsZWZ0O21hcmdpbjo1cHg7YmFja2dyb3VuZC1jb2xvcjo8JT1zZWdtZW50c1tpXS5maWxsQ29sb3IlPlwiPjwlaWYoc2VnbWVudHNbaV0ubGFiZWwpeyU+PCU9c2VnbWVudHNbaV0ubGFiZWwlPjwlfSU+PC9kaXY+PCV9JT48L2gzPid9LENhdGVnb3JpZXNTdmMuY2hvaWNlcylmb3IodmFyIGogaW4gQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzPTAsJHNjb3BlLnByaW9yaXR5TGlzdClDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0ubmFtZT09PSRzY29wZS5wcmlvcml0eUxpc3Rbal0uY2hvaWNlJiZDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMrKztmb3IoaSBpbiBDYXRlZ29yaWVzU3ZjLmNob2ljZXMuc29ydCgoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS52b3RlczxiLnZvdGVzfSkpLENhdGVnb3JpZXNTdmMuY2hvaWNlcykkc2NvcGUuZGF0YS5wdXNoKHt2YWx1ZTpDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMsbGFiZWw6Q2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLm5hbWV9KTskKFwiI3ByaW9yaXRpemVSZXN1bHRcIikuaGlkZSgpLCQoXCIjcHJpb3JpdGl6ZUNob2ljZXNcIikuaGlkZSgpLCQoXCIjcHJpb3JpdHlSZXN1bHRzXCIpLnNob3coMWUzKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlByb2ZpbGVDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLFVzZXJTdmMpeyRzY29wZS5jdXJyZW50VXNlcj8oJChcIiNzZXgtaW5kaWNhdG9yXCIpLm9mZnNldCh7bGVmdDokc2NvcGUuY3VycmVudFVzZXIuZ2VuZGVyLnNleC8yMDAqJChcIiNzZXhcIikud2lkdGgoKSskKFwiI3NleFwiKS5vZmZzZXQoKS5sZWZ0fSksJChcIiNpZGVudGl0eS1pbmRpY2F0b3JcIikub2Zmc2V0KHtsZWZ0OiRzY29wZS5jdXJyZW50VXNlci5nZW5kZXIuaWRlbnRpdHkvMjAwKiQoXCIjaWRlbnRpdHlcIikud2lkdGgoKSskKFwiI2lkZW50aXR5XCIpLm9mZnNldCgpLmxlZnR9KSk6JGxvY2F0aW9uLnBhdGgoXCIvXCIpLCRzY29wZS5zZXhlcz1bXCJNYWxlXCIsXCJGdE0gTWFsZVwiLFwiSW50ZXJzZXhcIixcIk10RiBGZW1hbGVcIixcIkZlbWFsZVwiXSwkc2NvcGUuaWRlbnRpdGllcz1bXCJNYW5cIixcIkJpZ2VuZGVyXCIsXCJQYW5nZW5kZXJcIixcIkFnZW5kZXJcIixcIlBvbHlnZW5kZXJcIixcIkdlbmRlcmZsdWlkXCIsXCJHZW5kZXJxdWVlclwiLFwiUXVlZXJcIixcIldvbWFuXCJdLCRzY29wZS5kYXRlT3B0aW9ucz17bWF4RGF0ZTpuZXcgRGF0ZSxtaW5EYXRlOm5ldyBEYXRlKDE5MDAsMSwxKSxpbml0RGF0ZTpuZXcgRGF0ZSgyZTMsMSwxKSxkYXRlcGlja2VyTW9kZTpcInllYXJcIn0sJHNjb3BlLmdlbmRlcj1mdW5jdGlvbihhcnJheSxwZXJjZW50YWdlKXtyZXR1cm4gYXJyYXlbTWF0aC5yb3VuZChwZXJjZW50YWdlLzIwMCooYXJyYXkubGVuZ3RoLTEpKV19LCRzY29wZS5zdGFydFNsaWRlcj1mdW5jdGlvbigpe30sJHNjb3BlLmRyYWdTbGlkZXI9ZnVuY3Rpb24oZXZlbnQsdWksdHlwZSl7JHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlclt0eXBlXT1NYXRoLnJvdW5kKCgkKFwiI1wiK3R5cGUrXCItaW5kaWNhdG9yXCIpLm9mZnNldCgpLmxlZnQtJChcIiNcIit0eXBlKS5vZmZzZXQoKS5sZWZ0KS8oJChcIiNcIit0eXBlKS53aWR0aCgpLSQoXCIjXCIrdHlwZStcIi1pbmRpY2F0b3JcIikud2lkdGgoKSkqMjAwKSwkc2NvcGUuJGFwcGx5KCl9LCRzY29wZS5zdG9wU2xpZGVyPWZ1bmN0aW9uKCl7fSwkc2NvcGUudXNlcm5hbWVUb2dnbGU9ITAsJHNjb3BlLnBhc3N3b3JkVG9nZ2xlPSEwLCRzY29wZS50b2dnbGVVc2VybmFtZT1mdW5jdGlvbigpeyRzY29wZS51c2VybmFtZVRvZ2dsZT0hJHNjb3BlLnVzZXJuYW1lVG9nZ2xlLCRzY29wZS5uZXdVc2VybmFtZT0kc2NvcGUuY3VycmVudFVzZXIudXNlcm5hbWV9LCRzY29wZS50b2dnbGVQYXNzd29yZD1mdW5jdGlvbigpeyRzY29wZS5uZXdQYXNzd29yZD1udWxsLCRzY29wZS5jb25maXJtUGFzc3dvcmQ9bnVsbCwkc2NvcGUucGFzc3dvcmRUb2dnbGU9ISRzY29wZS5wYXNzd29yZFRvZ2dsZX0sJHNjb3BlLmNoZWNrUGFzc3dvcmQ9ZnVuY3Rpb24ocGFzc3dvcmQpe2lmKHBhc3N3b3JkKXt2YXIgdXNlcj0kc2NvcGUuY3VycmVudFVzZXIuX2lkO1VzZXJTdmMuY2hlY2tQYXNzd29yZCh1c2VyLHBhc3N3b3JkKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCl9KSwoZnVuY3Rpb24oKXt2YXIgb3JpZ2luYWxCZz0kKFwiLnBhc3N3b3JkXCIpLmNzcyhcImJhY2tncm91bmRDb2xvclwiKTskKFwiLnBhc3N3b3JkXCIpLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjpcIiNGRkI2QzFcIn0sMjAwKS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6b3JpZ2luYWxCZ30sMjAwKX0pKX19LCRzY29wZS5jaGFuZ2VQYXNzd29yZD1mdW5jdGlvbihvbGRQYXNzd29yZCxuZXdQYXNzd29yZCxjb25maXJtUGFzc3dvcmQpe2lmKG5ld1Bhc3N3b3JkKWlmKG5ld1Bhc3N3b3JkPT1jb25maXJtUGFzc3dvcmQpe3ZhciB1c2VyPSRzY29wZS5jdXJyZW50VXNlci5faWQ7VXNlclN2Yy5jaGFuZ2VQYXNzd29yZCh1c2VyLG9sZFBhc3N3b3JkLG5ld1Bhc3N3b3JkKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwicG9wdXBcIix7bWVzc2FnZTpcIlBhc3N3b3JkIENoYW5nZWRcIix0eXBlOlwiYWxlcnQtc3VjY2Vzc1wifSksJHNjb3BlLm9sZFBhc3N3b3JkPW51bGwsJHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCl9KSwoZnVuY3Rpb24oKXskc2NvcGUuJGVtaXQoXCJwb3B1cFwiLHttZXNzYWdlOlwiUGFzc3dvcmQgQ2hhbmdlIEZhaWxlZFwiLHR5cGU6XCJhbGVydC1kYW5nZXJcIn0pfSkpfWVsc2V7dmFyIG9yaWdpbmFsQmc9JChcIi5wYXNzd29yZFwiKS5jc3MoXCJiYWNrZ3JvdW5kQ29sb3JcIik7JChcIi5wYXNzd29yZFwiKS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6XCIjRkZCNkMxXCJ9LDIwMCkuYW5pbWF0ZSh7YmFja2dyb3VuZENvbG9yOm9yaWdpbmFsQmd9LDIwMCl9fSwkc2NvcGUuY2hhbmdlVXNlcm5hbWU9ZnVuY3Rpb24odXNlcm5hbWUpeyRzY29wZS4kZW1pdChcImxvYWRpbmdcIiksVXNlclN2Yy5jaGFuZ2VVc2VybmFtZSgkc2NvcGUuY3VycmVudFVzZXIuX2lkLHVzZXJuYW1lKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwidXBkYXRlXCIscmVzcG9uc2UuZGF0YSl9KSwoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS4kZW1pdChcInBvcHVwXCIse21lc3NhZ2U6dXNlcm5hbWUrXCIgYWxyZWFkeSBpbiB1c2VcIix0eXBlOlwiYWxlcnQtZGFuZ2VyXCJ9KX0pKX0sJHNjb3BlLnVwZGF0ZVVzZXI9ZnVuY3Rpb24oKXskc2NvcGUuY3VycmVudFVzZXImJigkc2NvcGUuJGVtaXQoXCJsb2FkaW5nXCIpLFVzZXJTdmMudXBkYXRlVXNlcigkc2NvcGUuY3VycmVudFVzZXIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuJGVtaXQoXCJ1cGRhdGVcIixyZXNwb25zZS5kYXRhKX0pKSl9LCRzY29wZS4kd2F0Y2goXCJjdXJyZW50VXNlci5mbGFncy5sZW5ndGhcIiwoZnVuY3Rpb24obGVuZ3RoKXskc2NvcGUudXBkYXRlVXNlcigpfSkpLCRzY29wZS5sb2FkQ291bnRyaWVzPWZ1bmN0aW9uKCRxdWVyeSl7cmV0dXJuW3tuYW1lOlwiQW5kb3JyYVwiLGZsYWc6XCJmbGFnLWFkXCIsdGlkYml0OlwiXCJ9LHtuYW1lOlwiVW5pdGVkIEFyYWIgRW1pcmF0ZXNcIixmbGFnOlwiZmxhZy1hZVwifSx7bmFtZTpcIkFmZ2hhbmlzdGFuXCIsZmxhZzpcImZsYWctYWZcIn0se25hbWU6XCJBbnRpZ3VhIGFuZCBCYXJidWRhXCIsZmxhZzpcImZsYWctYWdcIn0se25hbWU6XCJBbmd1aWxsYVwiLGZsYWc6XCJmbGFnLWFpXCJ9LHtuYW1lOlwiQWxiYW5pYVwiLGZsYWc6XCJmbGFnLWFsXCJ9LHtuYW1lOlwiQXJtZW5pYVwiLGZsYWc6XCJmbGFnLWFtXCJ9LHtuYW1lOlwiQW5nb2xhXCIsZmxhZzpcImZsYWctYW9cIn0se25hbWU6XCJBbnRhcmN0aWNhXCIsZmxhZzpcImZsYWctYXFcIn0se25hbWU6XCJBcmdlbnRpbmFcIixmbGFnOlwiZmxhZy1hclwifSx7bmFtZTpcIkFtZXJpY2FuIFNvbW9hXCIsZmxhZzpcImZsYWctYXNcIn0se25hbWU6XCJBdXN0cmlhXCIsZmxhZzpcImZsYWctYXRcIn0se25hbWU6XCJBdXN0cmFsaWFcIixmbGFnOlwiZmxhZy1hdVwifSx7bmFtZTpcIkFydWJhXCIsZmxhZzpcImZsYWctYXdcIn0se25hbWU6XCLDhWxhbmQgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWF4XCJ9LHtuYW1lOlwiQXplcmJhaWphblwiLGZsYWc6XCJmbGFnLWF6XCJ9LHtuYW1lOlwiQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYVwiLGZsYWc6XCJmbGFnLWJhXCJ9LHtuYW1lOlwiQmFyYmFkb3NcIixmbGFnOlwiZmxhZy1iYlwifSx7bmFtZTpcIkJhbmdsYWRlc2hcIixmbGFnOlwiZmxhZy1iZFwifSx7bmFtZTpcIkJlbGdpdW1cIixmbGFnOlwiZmxhZy1iZVwifSx7bmFtZTpcIkJ1cmtpbmEgRmFzb1wiLGZsYWc6XCJmbGFnLWJmXCJ9LHtuYW1lOlwiQnVsZ2FyaWFcIixmbGFnOlwiZmxhZy1iZ1wifSx7bmFtZTpcIkJhaHJhaW5cIixmbGFnOlwiZmxhZy1iaFwifSx7bmFtZTpcIkJ1cnVuZGlcIixmbGFnOlwiZmxhZy1iaVwifSx7bmFtZTpcIkJlbmluXCIsZmxhZzpcImZsYWctYmpcIn0se25hbWU6XCJTYWludCBCYXJ0aMOpbGVteVwiLGZsYWc6XCJmbGFnLWJsXCJ9LHtuYW1lOlwiQmVybXVkYVwiLGZsYWc6XCJmbGFnLWJtXCJ9LHtuYW1lOlwiQnJ1bmVpIFwiLGZsYWc6XCJmbGFnLWJuXCJ9LHtuYW1lOlwiQm9saXZpYSwgUGx1cmluYXRpb25hbCBTdGF0ZSBvZlwiLGZsYWc6XCJmbGFnLWJvXCJ9LHtuYW1lOlwiQm9uYWlyZSwgU2ludCBFdXN0YXRpdXMgYW5kIFNhYmFcIixmbGFnOlwiZmxhZy1icVwifSx7bmFtZTpcIkJyYXppbFwiLGZsYWc6XCJmbGFnLWJyXCJ9LHtuYW1lOlwiQmFoYW1hc1wiLGZsYWc6XCJmbGFnLWJzXCJ9LHtuYW1lOlwiQmh1dGFuXCIsZmxhZzpcImZsYWctYnRcIn0se25hbWU6XCJCb3V2ZXQgSXNsYW5kXCIsZmxhZzpcImZsYWctYnZcIn0se25hbWU6XCJCb3Rzd2FuYVwiLGZsYWc6XCJmbGFnLWJ3XCJ9LHtuYW1lOlwiQmVsYXJ1c1wiLGZsYWc6XCJmbGFnLWJ5XCJ9LHtuYW1lOlwiQmVsaXplXCIsZmxhZzpcImZsYWctYnpcIn0se25hbWU6XCJDYW5hZGFcIixmbGFnOlwiZmxhZy1jYVwifSx7bmFtZTpcIkNvY29zIChLZWVsaW5nKSBJc2xhbmRzXCIsZmxhZzpcImZsYWctY2NcIn0se25hbWU6XCJDb25nbywgdGhlIERlbW9jcmF0aWMgUmVwdWJsaWMgb2YgdGhlXCIsZmxhZzpcImZsYWctY2RcIn0se25hbWU6XCJDZW50cmFsIEFmcmljYW4gUmVwdWJsaWNcIixmbGFnOlwiZmxhZy1jZlwifSx7bmFtZTpcIkNvbmdvXCIsZmxhZzpcImZsYWctY2dcIn0se25hbWU6XCJTd2l0emVybGFuZFwiLGZsYWc6XCJmbGFnLWNoXCJ9LHtuYW1lOlwiQ8O0dGUgZCdJdm9pcmVcIixmbGFnOlwiZmxhZy1jaVwifSx7bmFtZTpcIkNvb2sgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWNrXCJ9LHtuYW1lOlwiQ2hpbGVcIixmbGFnOlwiZmxhZy1jbFwifSx7bmFtZTpcIkNhbWVyb29uXCIsZmxhZzpcImZsYWctY21cIn0se25hbWU6XCJDaGluYVwiLGZsYWc6XCJmbGFnLWNuXCJ9LHtuYW1lOlwiQ29sb21iaWFcIixmbGFnOlwiZmxhZy1jb1wifSx7bmFtZTpcIkNvc3RhIFJpY2FcIixmbGFnOlwiZmxhZy1jclwifSx7bmFtZTpcIkN1YmFcIixmbGFnOlwiZmxhZy1jdVwifSx7bmFtZTpcIkNhYm8gVmVyZGVcIixmbGFnOlwiZmxhZy1jdlwifSx7bmFtZTpcIkN1cmHDp2FvXCIsZmxhZzpcImZsYWctY3dcIn0se25hbWU6XCJDaHJpc3RtYXMgSXNsYW5kXCIsZmxhZzpcImZsYWctY3hcIn0se25hbWU6XCJDeXBydXNcIixmbGFnOlwiZmxhZy1jeVwifSx7bmFtZTpcIkN6ZWNoIFJlcHVibGljXCIsZmxhZzpcImZsYWctY3pcIn0se25hbWU6XCJHZXJtYW55XCIsZmxhZzpcImZsYWctZGVcIn0se25hbWU6XCJEamlib3V0aVwiLGZsYWc6XCJmbGFnLWRqXCJ9LHtuYW1lOlwiRGVubWFya1wiLGZsYWc6XCJmbGFnLWRrXCJ9LHtuYW1lOlwiRG9taW5pY2FcIixmbGFnOlwiZmxhZy1kbVwifSx7bmFtZTpcIkRvbWluaWNhbiBSZXB1YmxpY1wiLGZsYWc6XCJmbGFnLWRvXCJ9LHtuYW1lOlwiQWxnZXJpYVwiLGZsYWc6XCJmbGFnLWR6XCJ9LHtuYW1lOlwiRWN1YWRvclwiLGZsYWc6XCJmbGFnLWVjXCJ9LHtuYW1lOlwiRXN0b25pYVwiLGZsYWc6XCJmbGFnLWVlXCJ9LHtuYW1lOlwiRWd5cHRcIixmbGFnOlwiZmxhZy1lZ1wifSx7bmFtZTpcIldlc3Rlcm4gU2FoYXJhXCIsZmxhZzpcImZsYWctZWhcIn0se25hbWU6XCJFcml0cmVhXCIsZmxhZzpcImZsYWctZXJcIn0se25hbWU6XCJTcGFpblwiLGZsYWc6XCJmbGFnLWVzXCJ9LHtuYW1lOlwiRXRoaW9waWFcIixmbGFnOlwiZmxhZy1ldFwifSx7bmFtZTpcIkZpbmxhbmRcIixmbGFnOlwiZmxhZy1maVwifSx7bmFtZTpcIkZpamlcIixmbGFnOlwiZmxhZy1malwifSx7bmFtZTpcIkZhbGtsYW5kIElzbGFuZHMgKE1hbHZpbmFzKVwiLGZsYWc6XCJmbGFnLWZrXCJ9LHtuYW1lOlwiTWljcm9uZXNpYSwgRmVkZXJhdGVkIFN0YXRlcyBvZlwiLGZsYWc6XCJmbGFnLWZtXCJ9LHtuYW1lOlwiRmFyb2UgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWZvXCJ9LHtuYW1lOlwiRnJhbmNlXCIsZmxhZzpcImZsYWctZnJcIn0se25hbWU6XCJHYWJvblwiLGZsYWc6XCJmbGFnLWdhXCJ9LHtuYW1lOlwiVW5pdGVkIEtpbmdkb20gb2YgR3JlYXQgQnJpdGFpbiBhbmQgTm9ydGhlcm4gSXJlbGFuZFwiLGZsYWc6XCJmbGFnLWdiXCJ9LHtuYW1lOlwiR3JlbmFkYVwiLGZsYWc6XCJmbGFnLWdkXCJ9LHtuYW1lOlwiR2VvcmdpYVwiLGZsYWc6XCJmbGFnLWdlXCJ9LHtuYW1lOlwiRnJlbmNoIEd1aWFuYVwiLGZsYWc6XCJmbGFnLWdmXCJ9LHtuYW1lOlwiR3Vlcm5zZXlcIixmbGFnOlwiZmxhZy1nZ1wifSx7bmFtZTpcIkdoYW5hXCIsZmxhZzpcImZsYWctZ2hcIn0se25hbWU6XCJHaWJyYWx0YXJcIixmbGFnOlwiZmxhZy1naVwifSx7bmFtZTpcIkdyZWVubGFuZFwiLGZsYWc6XCJmbGFnLWdsXCJ9LHtuYW1lOlwiR2FtYmlhXCIsZmxhZzpcImZsYWctZ21cIn0se25hbWU6XCJHdWluZWFcIixmbGFnOlwiZmxhZy1nblwifSx7bmFtZTpcIkd1YWRlbG91cGVcIixmbGFnOlwiZmxhZy1ncFwifSx7bmFtZTpcIkVxdWF0b3JpYWwgR3VpbmVhXCIsZmxhZzpcImZsYWctZ3FcIn0se25hbWU6XCJHcmVlY2VcIixmbGFnOlwiZmxhZy1nclwifSx7bmFtZTpcIlNvdXRoIEdlb3JnaWEgYW5kIHRoZSBTb3V0aCBTYW5kd2ljaCBJc2xhbmRzXCIsZmxhZzpcImZsYWctZ3NcIn0se25hbWU6XCJHdWF0ZW1hbGFcIixmbGFnOlwiZmxhZy1ndFwifSx7bmFtZTpcIkd1YW1cIixmbGFnOlwiZmxhZy1ndVwifSx7bmFtZTpcIkd1aW5lYS1CaXNzYXVcIixmbGFnOlwiZmxhZy1nd1wifSx7bmFtZTpcIkd1eWFuYVwiLGZsYWc6XCJmbGFnLWd5XCJ9LHtuYW1lOlwiSG9uZyBLb25nXCIsZmxhZzpcImZsYWctaGtcIn0se25hbWU6XCJIZWFyZCBJc2xhbmQgYW5kIE1jRG9uYWxkIElzbGFuZHNcIixmbGFnOlwiZmxhZy1obVwifSx7bmFtZTpcIkhvbmR1cmFzXCIsZmxhZzpcImZsYWctaG5cIn0se25hbWU6XCJDcm9hdGlhXCIsZmxhZzpcImZsYWctaHJcIn0se25hbWU6XCJIYWl0aVwiLGZsYWc6XCJmbGFnLWh0XCJ9LHtuYW1lOlwiSHVuZ2FyeVwiLGZsYWc6XCJmbGFnLWh1XCJ9LHtuYW1lOlwiSW5kb25lc2lhXCIsZmxhZzpcImZsYWctaWRcIn0se25hbWU6XCJJcmVsYW5kXCIsZmxhZzpcImZsYWctaWVcIn0se25hbWU6XCJJc3JhZWxcIixmbGFnOlwiZmxhZy1pbFwifSx7bmFtZTpcIklzbGUgb2YgTWFuXCIsZmxhZzpcImZsYWctaW1cIn0se25hbWU6XCJJbmRpYVwiLGZsYWc6XCJmbGFnLWluXCJ9LHtuYW1lOlwiQnJpdGlzaCBJbmRpYW4gT2NlYW4gVGVycml0b3J5XCIsZmxhZzpcImZsYWctaW9cIn0se25hbWU6XCJJcmFxXCIsZmxhZzpcImZsYWctaXFcIn0se25hbWU6XCJJcmFuLCBJc2xhbWljIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWctaXJcIn0se25hbWU6XCJJY2VsYW5kXCIsZmxhZzpcImZsYWctaXNcIn0se25hbWU6XCJJdGFseVwiLGZsYWc6XCJmbGFnLWl0XCJ9LHtuYW1lOlwiSmVyc2V5XCIsZmxhZzpcImZsYWctamVcIn0se25hbWU6XCJKYW1haWNhXCIsZmxhZzpcImZsYWctam1cIn0se25hbWU6XCJKb3JkYW5cIixmbGFnOlwiZmxhZy1qb1wifSx7bmFtZTpcIkphcGFuXCIsZmxhZzpcImZsYWctanBcIn0se25hbWU6XCJLZW55YVwiLGZsYWc6XCJmbGFnLWtlXCJ9LHtuYW1lOlwiS3lyZ3l6c3RhblwiLGZsYWc6XCJmbGFnLWtnXCJ9LHtuYW1lOlwiQ2FtYm9kaWFcIixmbGFnOlwiZmxhZy1raFwifSx7bmFtZTpcIktpcmliYXRpXCIsZmxhZzpcImZsYWcta2lcIn0se25hbWU6XCJDb21vcm9zXCIsZmxhZzpcImZsYWcta21cIn0se25hbWU6XCJTYWludCBLaXR0cyBhbmQgTmV2aXNcIixmbGFnOlwiZmxhZy1rblwifSx7bmFtZTpcIktvcmVhLCBEZW1vY3JhdGljIFBlb3BsZSdzIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWcta3BcIn0se25hbWU6XCJLb3JlYSwgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1rclwifSx7bmFtZTpcIkt1d2FpdFwiLGZsYWc6XCJmbGFnLWt3XCJ9LHtuYW1lOlwiQ2F5bWFuIElzbGFuZHNcIixmbGFnOlwiZmxhZy1reVwifSx7bmFtZTpcIkthemFraHN0YW5cIixmbGFnOlwiZmxhZy1relwifSx7bmFtZTpcIkxhbyBQZW9wbGUncyBEZW1vY3JhdGljIFJlcHVibGljXCIsZmxhZzpcImZsYWctbGFcIn0se25hbWU6XCJMZWJhbm9uXCIsZmxhZzpcImZsYWctbGJcIn0se25hbWU6XCJTYWludCBMdWNpYVwiLGZsYWc6XCJmbGFnLWxjXCJ9LHtuYW1lOlwiTGllY2h0ZW5zdGVpblwiLGZsYWc6XCJmbGFnLWxpXCJ9LHtuYW1lOlwiU3JpIExhbmthXCIsZmxhZzpcImZsYWctbGtcIn0se25hbWU6XCJMaWJlcmlhXCIsZmxhZzpcImZsYWctbHJcIn0se25hbWU6XCJMZXNvdGhvXCIsZmxhZzpcImZsYWctbHNcIn0se25hbWU6XCJMaXRodWFuaWFcIixmbGFnOlwiZmxhZy1sdFwifSx7bmFtZTpcIkx1eGVtYm91cmdcIixmbGFnOlwiZmxhZy1sdVwifSx7bmFtZTpcIkxhdHZpYVwiLGZsYWc6XCJmbGFnLWx2XCJ9LHtuYW1lOlwiTGlieWFcIixmbGFnOlwiZmxhZy1seVwifSx7bmFtZTpcIk1vcm9jY29cIixmbGFnOlwiZmxhZy1tYVwifSx7bmFtZTpcIk1vbmFjb1wiLGZsYWc6XCJmbGFnLW1jXCJ9LHtuYW1lOlwiTW9sZG92YSwgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1tZFwifSx7bmFtZTpcIk1vbnRlbmVncm9cIixmbGFnOlwiZmxhZy1tZVwifSx7bmFtZTpcIlNhaW50IE1hcnRpbiAoRnJlbmNoIHBhcnQpXCIsZmxhZzpcImZsYWctbWZcIn0se25hbWU6XCJNYWRhZ2FzY2FyXCIsZmxhZzpcImZsYWctbWdcIn0se25hbWU6XCJNYXJzaGFsbCBJc2xhbmRzXCIsZmxhZzpcImZsYWctbWhcIn0se25hbWU6XCJNYWNlZG9uaWEsIHRoZSBmb3JtZXIgWXVnb3NsYXYgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1ta1wifSx7bmFtZTpcIk1hbGlcIixmbGFnOlwiZmxhZy1tbFwifSx7bmFtZTpcIk15YW5tYXJcIixmbGFnOlwiZmxhZy1tbVwifSx7bmFtZTpcIk1vbmdvbGlhXCIsZmxhZzpcImZsYWctbW5cIn0se25hbWU6XCJNYWNhb1wiLGZsYWc6XCJmbGFnLW1vXCJ9LHtuYW1lOlwiTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzXCIsZmxhZzpcImZsYWctbXBcIn0se25hbWU6XCJNYXJ0aW5pcXVlXCIsZmxhZzpcImZsYWctbXFcIn0se25hbWU6XCJNYXVyaXRhbmlhXCIsZmxhZzpcImZsYWctbXJcIn0se25hbWU6XCJNb250c2VycmF0XCIsZmxhZzpcImZsYWctbXNcIn0se25hbWU6XCJNYWx0YVwiLGZsYWc6XCJmbGFnLW10XCJ9LHtuYW1lOlwiTWF1cml0aXVzXCIsZmxhZzpcImZsYWctbXVcIn0se25hbWU6XCJNYWxkaXZlc1wiLGZsYWc6XCJmbGFnLW12XCJ9LHtuYW1lOlwiTWFsYXdpXCIsZmxhZzpcImZsYWctbXdcIn0se25hbWU6XCJNZXhpY29cIixmbGFnOlwiZmxhZy1teFwifSx7bmFtZTpcIk1hbGF5c2lhXCIsZmxhZzpcImZsYWctbXlcIn0se25hbWU6XCJNb3phbWJpcXVlXCIsZmxhZzpcImZsYWctbXpcIn0se25hbWU6XCJOYW1pYmlhXCIsZmxhZzpcImZsYWctbmFcIn0se25hbWU6XCJOZXcgQ2FsZWRvbmlhXCIsZmxhZzpcImZsYWctbmNcIn0se25hbWU6XCJOaWdlclwiLGZsYWc6XCJmbGFnLW5lXCJ9LHtuYW1lOlwiTm9yZm9sayBJc2xhbmRcIixmbGFnOlwiZmxhZy1uZlwifSx7bmFtZTpcIk5pZ2VyaWFcIixmbGFnOlwiZmxhZy1uZ1wifSx7bmFtZTpcIk5pY2FyYWd1YVwiLGZsYWc6XCJmbGFnLW5pXCJ9LHtuYW1lOlwiTmV0aGVybGFuZHNcIixmbGFnOlwiZmxhZy1ubFwifSx7bmFtZTpcIk5vcndheVwiLGZsYWc6XCJmbGFnLW5vXCJ9LHtuYW1lOlwiTmVwYWxcIixmbGFnOlwiZmxhZy1ucFwifSx7bmFtZTpcIk5hdXJ1XCIsZmxhZzpcImZsYWctbnJcIn0se25hbWU6XCJOaXVlXCIsZmxhZzpcImZsYWctbnVcIn0se25hbWU6XCJOZXcgWmVhbGFuZFwiLGZsYWc6XCJmbGFnLW56XCJ9LHtuYW1lOlwiT21hblwiLGZsYWc6XCJmbGFnLW9tXCJ9LHtuYW1lOlwiUGFuYW1hXCIsZmxhZzpcImZsYWctcGFcIn0se25hbWU6XCJQZXJ1XCIsZmxhZzpcImZsYWctcGVcIn0se25hbWU6XCJGcmVuY2ggUG9seW5lc2lhXCIsZmxhZzpcImZsYWctcGZcIn0se25hbWU6XCJQYXB1YSBOZXcgR3VpbmVhXCIsZmxhZzpcImZsYWctcGdcIn0se25hbWU6XCJQaGlsaXBwaW5lc1wiLGZsYWc6XCJmbGFnLXBoXCJ9LHtuYW1lOlwiUGFraXN0YW5cIixmbGFnOlwiZmxhZy1wa1wifSx7bmFtZTpcIlBvbGFuZFwiLGZsYWc6XCJmbGFnLXBsXCJ9LHtuYW1lOlwiU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvblwiLGZsYWc6XCJmbGFnLXBtXCJ9LHtuYW1lOlwiUGl0Y2Fpcm5cIixmbGFnOlwiZmxhZy1wblwifSx7bmFtZTpcIlB1ZXJ0byBSaWNvXCIsZmxhZzpcImZsYWctcHJcIn0se25hbWU6XCJQYWxlc3RpbmUsIFN0YXRlIG9mXCIsZmxhZzpcImZsYWctcHNcIn0se25hbWU6XCJQb3J0dWdhbFwiLGZsYWc6XCJmbGFnLXB0XCJ9LHtuYW1lOlwiUGFsYXVcIixmbGFnOlwiZmxhZy1wd1wifSx7bmFtZTpcIlBhcmFndWF5XCIsZmxhZzpcImZsYWctcHlcIn0se25hbWU6XCJRYXRhclwiLGZsYWc6XCJmbGFnLXFhXCJ9LHtuYW1lOlwiUsOpdW5pb25cIixmbGFnOlwiZmxhZy1yZVwifSx7bmFtZTpcIlJvbWFuaWFcIixmbGFnOlwiZmxhZy1yb1wifSx7bmFtZTpcIlNlcmJpYVwiLGZsYWc6XCJmbGFnLXJzXCJ9LHtuYW1lOlwiUnVzc2lhbiBGZWRlcmF0aW9uXCIsZmxhZzpcImZsYWctcnVcIn0se25hbWU6XCJSd2FuZGFcIixmbGFnOlwiZmxhZy1yd1wifSx7bmFtZTpcIlNhdWRpIEFyYWJpYVwiLGZsYWc6XCJmbGFnLXNhXCJ9LHtuYW1lOlwiU29sb21vbiBJc2xhbmRzXCIsZmxhZzpcImZsYWctc2JcIn0se25hbWU6XCJTZXljaGVsbGVzXCIsZmxhZzpcImZsYWctc2NcIn0se25hbWU6XCJTdWRhblwiLGZsYWc6XCJmbGFnLXNkXCJ9LHtuYW1lOlwiU3dlZGVuXCIsZmxhZzpcImZsYWctc2VcIn0se25hbWU6XCJTaW5nYXBvcmVcIixmbGFnOlwiZmxhZy1zZ1wifSx7bmFtZTpcIlNhaW50IEhlbGVuYSwgQXNjZW5zaW9uIGFuZCBUcmlzdGFuIGRhIEN1bmhhXCIsZmxhZzpcImZsYWctc2hcIn0se25hbWU6XCJTbG92ZW5pYVwiLGZsYWc6XCJmbGFnLXNpXCJ9LHtuYW1lOlwiU3ZhbGJhcmQgYW5kIEphbiBNYXllblwiLGZsYWc6XCJmbGFnLXNqXCJ9LHtuYW1lOlwiU2xvdmFraWFcIixmbGFnOlwiZmxhZy1za1wifSx7bmFtZTpcIlNpZXJyYSBMZW9uZVwiLGZsYWc6XCJmbGFnLXNsXCJ9LHtuYW1lOlwiU2FuIE1hcmlub1wiLGZsYWc6XCJmbGFnLXNtXCJ9LHtuYW1lOlwiU2VuZWdhbFwiLGZsYWc6XCJmbGFnLXNuXCJ9LHtuYW1lOlwiU29tYWxpYVwiLGZsYWc6XCJmbGFnLXNvXCJ9LHtuYW1lOlwiU3VyaW5hbWVcIixmbGFnOlwiZmxhZy1zclwifSx7bmFtZTpcIlNvdXRoIFN1ZGFuXCIsZmxhZzpcImZsYWctc3NcIn0se25hbWU6XCJTYW8gVG9tZSBhbmQgUHJpbmNpcGVcIixmbGFnOlwiZmxhZy1zdFwifSx7bmFtZTpcIkVsIFNhbHZhZG9yXCIsZmxhZzpcImZsYWctc3ZcIn0se25hbWU6XCJTaW50IE1hYXJ0ZW4gKER1dGNoIHBhcnQpXCIsZmxhZzpcImZsYWctc3hcIn0se25hbWU6XCJTeXJpYW4gQXJhYiBSZXB1YmxpY1wiLGZsYWc6XCJmbGFnLXN5XCJ9LHtuYW1lOlwiU3dhemlsYW5kXCIsZmxhZzpcImZsYWctc3pcIn0se25hbWU6XCJUdXJrcyBhbmQgQ2FpY29zIElzbGFuZHNcIixmbGFnOlwiZmxhZy10Y1wifSx7bmFtZTpcIkNoYWRcIixmbGFnOlwiZmxhZy10ZFwifSx7bmFtZTpcIkZyZW5jaCBTb3V0aGVybiBUZXJyaXRvcmllc1wiLGZsYWc6XCJmbGFnLXRmXCJ9LHtuYW1lOlwiVG9nb1wiLGZsYWc6XCJmbGFnLXRnXCJ9LHtuYW1lOlwiVGhhaWxhbmRcIixmbGFnOlwiZmxhZy10aFwifSx7bmFtZTpcIlRhamlraXN0YW5cIixmbGFnOlwiZmxhZy10alwifSx7bmFtZTpcIlRva2VsYXVcIixmbGFnOlwiZmxhZy10a1wifSx7bmFtZTpcIlRpbW9yLUxlc3RlXCIsZmxhZzpcImZsYWctdGxcIn0se25hbWU6XCJUdXJrbWVuaXN0YW5cIixmbGFnOlwiZmxhZy10bVwifSx7bmFtZTpcIlR1bmlzaWFcIixmbGFnOlwiZmxhZy10blwifSx7bmFtZTpcIlRvbmdhXCIsZmxhZzpcImZsYWctdG9cIn0se25hbWU6XCJUdXJrZXlcIixmbGFnOlwiZmxhZy10clwifSx7bmFtZTpcIlRyaW5pZGFkIGFuZCBUb2JhZ29cIixmbGFnOlwiZmxhZy10dFwifSx7bmFtZTpcIlR1dmFsdVwiLGZsYWc6XCJmbGFnLXR2XCJ9LHtuYW1lOlwiVGFpd2FuLCBQcm92aW5jZSBvZiBDaGluYVwiLGZsYWc6XCJmbGFnLXR3XCJ9LHtuYW1lOlwiVGFuemFuaWEsIFVuaXRlZCBSZXB1YmxpYyBvZlwiLGZsYWc6XCJmbGFnLXR6XCJ9LHtuYW1lOlwiVWtyYWluZVwiLGZsYWc6XCJmbGFnLXVhXCJ9LHtuYW1lOlwiVWdhbmRhXCIsZmxhZzpcImZsYWctdWdcIn0se25hbWU6XCJVbml0ZWQgU3RhdGVzIE1pbm9yIE91dGx5aW5nIElzbGFuZHNcIixmbGFnOlwiZmxhZy11bVwifSx7bmFtZTpcIlVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYVwiLGZsYWc6XCJmbGFnLXVzXCJ9LHtuYW1lOlwiVXJ1Z3VheVwiLGZsYWc6XCJmbGFnLXV5XCJ9LHtuYW1lOlwiVXpiZWtpc3RhblwiLGZsYWc6XCJmbGFnLXV6XCJ9LHtuYW1lOlwiSG9seSBTZWVcIixmbGFnOlwiZmxhZy12YVwifSx7bmFtZTpcIlNhaW50IFZpbmNlbnQgYW5kIHRoZSBHcmVuYWRpbmVzXCIsZmxhZzpcImZsYWctdmNcIn0se25hbWU6XCJWZW5lenVlbGEsIEJvbGl2YXJpYW4gUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy12ZVwifSx7bmFtZTpcIlZpcmdpbiBJc2xhbmRzLCBCcml0aXNoXCIsZmxhZzpcImZsYWctdmdcIn0se25hbWU6XCJWaXJnaW4gSXNsYW5kcywgVS5TLlwiLGZsYWc6XCJmbGFnLXZpXCJ9LHtuYW1lOlwiVmlldCBOYW1cIixmbGFnOlwiZmxhZy12blwifSx7bmFtZTpcIlZhbnVhdHVcIixmbGFnOlwiZmxhZy12dVwifSx7bmFtZTpcIldhbGxpcyBhbmQgRnV0dW5hXCIsZmxhZzpcImZsYWctd2ZcIn0se25hbWU6XCJTYW1vYVwiLGZsYWc6XCJmbGFnLXdzXCJ9LHtuYW1lOlwiWWVtZW5cIixmbGFnOlwiZmxhZy15ZVwifSx7bmFtZTpcIk1heW90dGVcIixmbGFnOlwiZmxhZy15dFwifSx7bmFtZTpcIlNvdXRoIEFmcmljYVwiLGZsYWc6XCJmbGFnLXphXCJ9LHtuYW1lOlwiWmFtYmlhXCIsZmxhZzpcImZsYWctem1cIn0se25hbWU6XCJaaW1iYWJ3ZVwiLGZsYWc6XCJmbGFnLXp3XCJ9XS5maWx0ZXIoKGZ1bmN0aW9uKGNvdW50cnkpe3JldHVybi0xIT1jb3VudHJ5Lm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCRxdWVyeS50b0xvd2VyQ2FzZSgpKX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlNraWxsc0N0cmxcIixbXCIkc2NvcGVcIixcIiR3aW5kb3dcIixmdW5jdGlvbigkc2NvcGUsJHdpbmRvdyl7JHNjb3BlLnNlbGVjdGVkU2tpbGw9MCwkc2NvcGUuc2tpbGxzVmlzaWJsZT0hMSwkc2NvcGUucHJvamVjdHM9W10sJHNjb3BlLmxhYmVscz1bXCJEb3dubG9hZCBTYWxlc1wiLFwiSW4tU3RvcmUgU2FsZXNcIixcIk1haWwtT3JkZXIgU2FsZXNcIl0sJHNjb3BlLmRhdGE9WzMwMCw1MDAsMTAwXSwkLmdldEpTT04oXCIvZXhwZXJpZW5jZS5qc29uXCIsKGZ1bmN0aW9uKGRhdGEpeyRzY29wZS5wcm9qZWN0cz1kYXRhLnJlZHVjZSgoKHByb2plY3RzLGVtcGxveWVyKT0+ZW1wbG95ZXIucHJvamVjdHM/ZW1wbG95ZXIucHJvamVjdHMuY29uY2F0KHByb2plY3RzKTpwcm9qZWN0cykse30pfSkpLCRzY29wZS5maWx0ZXJlZFByb2plY3RzPSgpPT4kc2NvcGUucHJvamVjdHMuZmlsdGVyKChwcm9qZWN0PT5wcm9qZWN0LnNraWxscyYmcHJvamVjdC5za2lsbHMuaW5jbHVkZXMoJHNjb3BlLnNlbGVjdGVkU2tpbGwuY29kZSkpKSwkLmdldEpTT04oXCIvc2tpbGxzLmpzb25cIiwoZnVuY3Rpb24oZGF0YSl7Y29uc3Qgc2tpbGxzPWRhdGEuZmlsdGVyKChza2lsbD0+c2tpbGwuZW5hYmxlZCkpOyRzY29wZS5jYXRlZ29yaWVzPXNraWxscy5yZWR1Y2UoKGZ1bmN0aW9uKGNhdGVnb3JpZXMsc2tpbGwpe3JldHVybiBjYXRlZ29yaWVzW3NraWxsLmNhdGVnb3J5XT9jYXRlZ29yaWVzW3NraWxsLmNhdGVnb3J5XS5wdXNoKHNraWxsKTpjYXRlZ29yaWVzW3NraWxsLmNhdGVnb3J5XT1bc2tpbGxdLGNhdGVnb3JpZXN9KSx7fSksJHNjb3BlLnNldFNlbGVjdGVkU2tpbGw9ZnVuY3Rpb24oc2tpbGwpeyRzY29wZS5zZWxlY3RlZFNraWxsPXNraWxsLCRzY29wZS5zZWxlY3RlZFNraWxsLmNoYXJ0T3B0aW9ucz17Y3V0b3V0UGVyY2VudGFnZTo4MCxjaXJjdW1mZXJlbmNlOjIqTWF0aC5QSSxtYWludGFpbkFzcGVjdFJhdGlvOiEwLHRvb2x0aXBzOntlbmFibGVkOiExfX0sJHNjb3BlLnNlbGVjdGVkU2tpbGwuY2hhcnRTdHlsZT17XCJiYWNrZ3JvdW5kLWltYWdlXCI6XCJ1cmwoL3NraWxscy9cIiskc2NvcGUuc2VsZWN0ZWRTa2lsbC5pbWFnZStcIilcIixcImJhY2tncm91bmQtcmVwZWF0XCI6XCJuby1yZXBlYXRcIixcImJhY2tncm91bmQtc2l6ZVwiOlwiNjAlXCIsXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6XCI1MCUgNTAlXCJ9fSwkc2NvcGUuc2V0U2VsZWN0ZWRTa2lsbCgkc2NvcGUuc2tpbGxzWzBdKSwkc2NvcGUuJGFwcGx5KCl9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlRlblRoaW5nc0N0cmxcIixbXCIkc2NvcGVcIixcIiRsb2NhdGlvblwiLFwiVGVuVGhpbmdzU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRsb2NhdGlvbixUZW5UaGluZ3NTdmMpe2Z1bmN0aW9uIGZsYXNoKGVsZW1lbnQpe2NvbnN0IGNvbG9yPSQoZWxlbWVudCkuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiKTskKGVsZW1lbnQpLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjpcIiNGQTgwNzJcIn0sMTAwLCgoKT0+eyQoZWxlbWVudCkuYW5pbWF0ZSh7YmFja2dyb3VuZENvbG9yOmNvbG9yfSwxMDApfSkpfSRzY29wZS5zZWFyY2g9e25hbWU6XCJcIix2YWx1ZXM6XCJcIn0sVGVuVGhpbmdzU3ZjLmdldENhdGVnb3JpZXMoKS50aGVuKChyZXNwb25zZT0+eyRzY29wZS5jYXRlZ29yaWVzPXJlc3BvbnNlLmRhdGEsJHNjb3BlLmNhdGVnb3J5RmlsdGVycz0kc2NvcGUuY2F0ZWdvcmllcy5tYXAoKGNhdGVnb3J5PT5jYXRlZ29yeSkpLCRzY29wZS5jYXRlZ29yeUZpbHRlcnMucHVzaChcIkFsbFwiKSwkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzLnB1c2goXCJCbGFua1wiKSwkc2NvcGUuY2F0ZWdvcnlGaWx0ZXI9XCJBbGxcIiwkc2NvcGUudXBkYXRlRmlsdGVyPVwiYWxsXCJ9KSksVGVuVGhpbmdzU3ZjLmdldExhbmd1YWdlcygpLnRoZW4oKHJlc3BvbnNlPT57JHNjb3BlLmxhbmd1YWdlcz1yZXNwb25zZS5kYXRhLCRzY29wZS5sYW5ndWFnZUZpbHRlcnM9JHNjb3BlLmxhbmd1YWdlcy5tYXAoKGxhbmd1YWdlPT5sYW5ndWFnZSkpLCRzY29wZS5sYW5ndWFnZUZpbHRlcnMucHVzaCh7bmFtZTpcIkFsbFwiLGNvZGU6XCJhbGxcIn0pLCRzY29wZS5sYW5ndWFnZUZpbHRlcj17bmFtZTpcIkFsbFwiLGNvZGU6XCJhbGxcIn19KSksJHNjb3BlLmtleURvd249ZT0+e3N3aXRjaCgoZT1lfHx3aW5kb3cuZXZlbnQpLmtleUNvZGUpe2Nhc2UgOTokKFwiI25ldy1ibHVyYlwiKS5pcyhcIjpmb2N1c1wiKSYmc2V0VGltZW91dCgoKCk9Pnskc2NvcGUuYWRkVmFsdWUoKX0pLDEwMCk7YnJlYWs7Y2FzZSAxMzokKFwiI25ldy1ibHVyYlwiKS5pcyhcIjpmb2N1c1wiKT8kc2NvcGUuYWRkVmFsdWUoKTokKFwiI25ldy12YWx1ZVwiKS5pcyhcIjpmb2N1c1wiKSYmJChcIiNuZXctYmx1cmJcIikuZm9jdXMoKX19LCRzY29wZS5zZWFyY2hOYW1lPVwiXCIsJHNjb3BlLm5ld0l0ZW09e30sJHNjb3BlLnNldENhdGVnb3J5RmlsdGVyPWNhdGVnb3J5PT4kc2NvcGUuY2F0ZWdvcnlGaWx0ZXI9Y2F0ZWdvcnksJHNjb3BlLnNldFVzZXJGaWx0ZXI9dXNlcj0+JHNjb3BlLnVzZXJGaWx0ZXI9dXNlciwkc2NvcGUuc2V0VXBkYXRlRmlsdGVyPXR5cGU9PiRzY29wZS51cGRhdGVGaWx0ZXI9dHlwZSwkc2NvcGUuc2V0TGFuZ3VhZ2VGaWx0ZXI9bGFuZ3VhZ2U9PiRzY29wZS5sYW5ndWFnZUZpbHRlcj1sYW5ndWFnZSwkc2NvcGUuZmlsdGVyZWRMaXN0cz0oKT0+JHNjb3BlLmxpc3RzPyRzY29wZS5saXN0cy5maWx0ZXIoKCh7aXNEeW5hbWljfSk9PlwiYWxsXCI9PT0kc2NvcGUudXBkYXRlRmlsdGVyfHwhKFwic3RhdGljXCI9PT0kc2NvcGUudXBkYXRlRmlsdGVyJiYhMD09PWlzRHluYW1pY3x8XCJkeW5hbWljXCI9PT0kc2NvcGUudXBkYXRlRmlsdGVyJiYhMT09PWlzRHluYW1pYykpKS5maWx0ZXIoKCh7Y2F0ZWdvcmllc30pPT5cIkFsbFwiPT09JHNjb3BlLmNhdGVnb3J5RmlsdGVyfHwoY2F0ZWdvcmllcy5sZW5ndGg+MD9jYXRlZ29yaWVzLmluZGV4T2YoJHNjb3BlLmNhdGVnb3J5RmlsdGVyKT49MDpcIkJsYW5rXCI9PT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXIpKSkuZmlsdGVyKCgoe2NyZWF0b3J9KT0+XCJBbGxcIj09PSRzY29wZS51c2VyRmlsdGVyfHxjcmVhdG9yPT09JHNjb3BlLnVzZXJGaWx0ZXIpKS5maWx0ZXIoKCh7bGFuZ3VhZ2V9KT0+XCJhbGxcIj09PSRzY29wZS5sYW5ndWFnZUZpbHRlci5jb2RlfHxsYW5ndWFnZT09PSRzY29wZS5sYW5ndWFnZUZpbHRlci5jb2RlKSk6W10sJHNjb3BlLiRvbihcImxvZ2luXCIsKF89Pnskc2NvcGUuZ2V0TGlzdHMoKX0pKSwkc2NvcGUubGlzdE9yZGVyPXtmaWVsZDpcImRhdGVcIixkaXJlY3Rpb246ITAsbGFiZWw6XCJDcmVhdGlvbiBEYXRlXCJ9LCRzY29wZS52YWx1ZU9yZGVyPXtmaWVsZDpcInZhbHVlXCIsZGlyZWN0aW9uOiExLGxhYmVsOlwiVmFsdWVcIn0sJHNjb3BlLnNvcnQ9KHNvcnRlcixzb3J0RmllbGQsc29ydExhYmVsKT0+eyRzY29wZVtzb3J0ZXJdLmxhYmVsPXNvcnRMYWJlbCwkc2NvcGVbc29ydGVyXS5maWVsZD09PXNvcnRGaWVsZD8kc2NvcGVbc29ydGVyXS5kaXJlY3Rpb249ISRzY29wZVtzb3J0ZXJdLmRpcmVjdGlvbjooJHNjb3BlW3NvcnRlcl0uZmllbGQ9c29ydEZpZWxkLCRzY29wZVtzb3J0ZXJdLmRpcmVjdGlvbj0hMCl9LCRzY29wZS5nZXRMYW5ndWFnZUNvdW50PWxhbmd1YWdlPT57aWYoISRzY29wZS5saXN0cylyZXR1cm4gMDtjb25zdCBjb3VudD0kc2NvcGUubGlzdHMuZmlsdGVyKChsaXN0PT4oXCJBbGxcIj09PSRzY29wZS5jYXRlZ29yeUZpbHRlcnx8bGlzdC5jYXRlZ29yaWVzLmluY2x1ZGVzKCRzY29wZS5jYXRlZ29yeUZpbHRlcikpJiYoXCJhbGxcIj09PWxhbmd1YWdlLmNvZGV8fGxpc3QubGFuZ3VhZ2U9PT1sYW5ndWFnZS5jb2RlKSYmKFwiQWxsXCI9PT0kc2NvcGUudXNlckZpbHRlcnx8bGlzdC5jcmVhdG9yPT09JHNjb3BlLnVzZXJGaWx0ZXIpJiYoXCJhbGxcIj09PSRzY29wZS51cGRhdGVGaWx0ZXJ8fGxpc3QuaXNEeW5hbWljPT09KFwiZHluYW1pY1wiPT09JHNjb3BlLnVwZGF0ZUZpbHRlcikpKSkubGVuZ3RoO3JldHVybmAke2NvdW50fSAtICR7TWF0aC5yb3VuZChjb3VudC8kc2NvcGUubGlzdHMubGVuZ3RoKjEwMCl9JWB9LCRzY29wZS5nZXRDYXRlZ29yeUNvdW50PWNhdGVnb3J5PT57aWYoISRzY29wZS5saXN0cylyZXR1cm4gMDtjb25zdCBjb3VudD0kc2NvcGUubGlzdHMuZmlsdGVyKChsaXN0PT4hKCEoXCJBbGxcIj09PWNhdGVnb3J5fHxsaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSk+PTApfHxcImFsbFwiIT09JHNjb3BlLmxhbmd1YWdlRmlsdGVyLmNvZGUmJmxpc3QubGFuZ3VhZ2UhPT0kc2NvcGUubGFuZ3VhZ2VGaWx0ZXIuY29kZXx8XCJBbGxcIiE9PSRzY29wZS51c2VyRmlsdGVyJiZsaXN0LmNyZWF0b3IhPT0kc2NvcGUudXNlckZpbHRlcnx8XCJhbGxcIiE9PSRzY29wZS51cGRhdGVGaWx0ZXImJmxpc3QuaXNEeW5hbWljIT09KFwiZHluYW1pY1wiPT09JHNjb3BlLnVwZGF0ZUZpbHRlcikpKSkubGVuZ3RoO3JldHVybmAke2NvdW50fSAtICR7TWF0aC5yb3VuZChjb3VudC8kc2NvcGUubGlzdHMubGVuZ3RoKjEwMCl9JWB9LCRzY29wZS5nZXRVcGRhdGVDb3VudD10eXBlPT57aWYoISRzY29wZS5saXN0cylyZXR1cm4gMDtjb25zdCBjb3VudD0kc2NvcGUubGlzdHMuZmlsdGVyKChsaXN0PT5cImFsbFwiPT09dHlwZXx8bGlzdC5pc0R5bmFtaWMmJlwiZHluYW1pY1wiPT09dHlwZXx8IWxpc3QuaXNEeW5hbWljJiZcInN0YXRpY1wiPT09dHlwZSkpLmxlbmd0aDtyZXR1cm5gJHtjb3VudH0gLSAke01hdGgucm91bmQoY291bnQvJHNjb3BlLmxpc3RzLmxlbmd0aCoxMDApfSVgfSwkc2NvcGUuZ2V0TGlzdHM9KCk9Pnskc2NvcGUubG9hZGluZ3x8KCRzY29wZS5sb2FkaW5nPSEwLFRlblRoaW5nc1N2Yy5nZXRMaXN0cygpLnRoZW4oKCh7ZGF0YX0pPT57JHNjb3BlLmxpc3RzPWRhdGEsJHNjb3BlLnVzZXJGaWx0ZXJzPXt9LCRzY29wZS51c2VyRmlsdGVycy5BbGw9JHNjb3BlLmxpc3RzLmxlbmd0aCwkc2NvcGUudXNlckZpbHRlcnM9JHNjb3BlLmxpc3RzLnNvcnQoKChsaXN0MSxsaXN0Mik9Pmxpc3QxLmNyZWF0b3I+bGlzdDIuY3JlYXRvcikpLnJlZHVjZSgoKHVzZXJzLHtjcmVhdG9yfSk9Pih1c2Vyc1tjcmVhdG9yXXx8KHVzZXJzW2NyZWF0b3JdPTApLHVzZXJzW2NyZWF0b3JdKyssdXNlcnMpKSwkc2NvcGUudXNlckZpbHRlcnMpLCRzY29wZS51c2VyQ291bnQ9T2JqZWN0LmtleXMoJHNjb3BlLnVzZXJGaWx0ZXJzKS5sZW5ndGgsJHNjb3BlLnVzZXJGaWx0ZXJzPXNvcnRPYmplY3QoJHNjb3BlLnVzZXJGaWx0ZXJzLCExKSwkc2NvcGUudXNlckZpbHRlcj1cIkFsbFwiLCRzY29wZS5sb2FkaW5nPSExfSkpKX0sJHNjb3BlLnNlbGVjdExpc3Q9bGlzdD0+e1RlblRoaW5nc1N2Yy5nZXRMaXN0KGxpc3QpLnRoZW4oKCh7ZGF0YX0pPT57JHNjb3BlLnNlbGVjdGVkTGlzdD1kYXRhLCRsb2NhdGlvbi5zZWFyY2goXCJsaXN0XCIsZGF0YS5faWQpfSkpfSwkbG9jYXRpb24uc2VhcmNoKCkubGlzdCYmJHNjb3BlLnNlbGVjdExpc3Qoe19pZDokbG9jYXRpb24uc2VhcmNoKCkubGlzdH0pLCRzY29wZS5zZWxlY3RDYXRlZ29yeT1jYXRlZ29yeT0+eyRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcnk9Y2F0ZWdvcnksJChcIiNjYXRlZ29yeS1zZWxlY3RcIikuaGlkZSgpfSwkc2NvcGUuZ2V0Q2F0ZWdvcnlDbGFzcz1jYXRlZ29yeT0+JHNjb3BlLnNlbGVjdGVkTGlzdCYmJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLmluZGV4T2YoY2F0ZWdvcnkpPj0wP1wiYnRuLXN1Y2Nlc3NcIjpcImJ0bi1kZWZhdWx0XCIsJHNjb3BlLnRvZ2dsZUNhdGVnb3J5PWNhdGVnb3J5PT57Y29uc3QgY2F0ZWdvcnlJbmRleD0kc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSk7Y2F0ZWdvcnlJbmRleD49MD8kc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuc3BsaWNlKGNhdGVnb3J5SW5kZXgsMSk6JHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLnB1c2goY2F0ZWdvcnkpfSwkc2NvcGUuc2VsZWN0TGFuZ3VhZ2U9bGFuZ3VhZ2U9Pnskc2NvcGUuc2VsZWN0ZWRMaXN0Lmxhbmd1YWdlPWxhbmd1YWdlLmNvZGU7Y29uc3Qgbm9uRW5nbGlzaEluZGV4PSRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5pbmRleE9mKFwiTm9uLUVuZ2xpc2hcIik7XCJFTlwiIT09bGFuZ3VhZ2UuY29kZSYmbm9uRW5nbGlzaEluZGV4PDA/JHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLnB1c2goXCJOb24tRW5nbGlzaFwiKTpcIkVOXCI9PT1sYW5ndWFnZS5jb2RlJiZub25FbmdsaXNoSW5kZXg+PTAmJiRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5zcGxpY2Uobm9uRW5nbGlzaEluZGV4LDEpfSwkc2NvcGUuYWRkTGlzdD0oKT0+e2NvbnN0IGN1cnJlbnRMYW5ndWFnZT0kc2NvcGUuc2VsZWN0ZWRMaXN0PyRzY29wZS5zZWxlY3RlZExpc3QubGFuZ3VhZ2U6XCJFTlwiOyRsb2NhdGlvbi5zZWFyY2goXCJsaXN0XCIsXCJcIiksJHNjb3BlLnNlbGVjdGVkTGlzdD17bmFtZTpcIlwiLGNyZWF0b3I6JHNjb3BlLmN1cnJlbnRVc2VyLl9pZCxkYXRlOm5ldyBEYXRlLHZhbHVlczpbXSxhbnN3ZXJzOjAsaXNEeW5hbWljOiEwLGNhdGVnb3J5OlwiXCIsY2F0ZWdvcmllczpbXSxsYW5ndWFnZTpjdXJyZW50TGFuZ3VhZ2V9fSwkc2NvcGUuaGFzRHVwbGljYXRlPSgpPT4kc2NvcGUuc2VsZWN0ZWRMaXN0JiYkc2NvcGUubmV3SXRlbS52YWx1ZSYmXy5zb21lKCRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLChhbnN3ZXI9PmFuc3dlci52YWx1ZS5yZW1vdmVBbGxCdXRMZXR0ZXJzKCk9PSRzY29wZS5uZXdJdGVtLnZhbHVlLnJlbW92ZUFsbEJ1dExldHRlcnMoKSkpLCRzY29wZS5hZGRWYWx1ZT0oKT0+eyRzY29wZS5uZXdJdGVtLnZhbHVlJiYoXy5zb21lKCRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLChhbnN3ZXI9PmFuc3dlci52YWx1ZS5yZW1vdmVBbGxCdXRMZXR0ZXJzKCk9PSRzY29wZS5uZXdJdGVtLnZhbHVlLnJlbW92ZUFsbEJ1dExldHRlcnMoKSkpP2FsZXJ0KGAkeyRzY29wZS5uZXdJdGVtLnZhbHVlfSBpcyBhbHJlYWR5IGluIHRoZSBsaXN0YCk6KCRzY29wZS5uZXdJdGVtLmNyZWF0b3I9JHNjb3BlLmN1cnJlbnRVc2VyLl9pZCwkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcy51bnNoaWZ0KEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoJHNjb3BlLm5ld0l0ZW0pKSksJHNjb3BlLnNlbGVjdGVkTGlzdC5hbnN3ZXJzKyssJHNjb3BlLm5ld0l0ZW0udmFsdWU9XCJcIiwkc2NvcGUubmV3SXRlbS5ibHVyYj1cIlwiLCRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLmxlbmd0aD49MTAmJiRzY29wZS5zZWxlY3RlZExpc3QubmFtZSYmJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLmxlbmd0aD4wJiYkc2NvcGUuc2F2ZUxpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCkpKSwkKFwiI25ldy12YWx1ZVwiKS5mb2N1cygpfSwkc2NvcGUucmVwb3J0TGlzdD1saXN0PT57bGlzdC5yZXBvcnRlZD0hMCxUZW5UaGluZ3NTdmMucmVwb3J0TGlzdCgkc2NvcGUuY3VycmVudFVzZXIsbGlzdCl9LCRzY29wZS5zYXZlTGlzdD1saXN0PT57JHNjb3BlLnNhdmluZ3x8KGxpc3QudmFsdWVzPWxpc3QudmFsdWVzLmZpbHRlcigoKHt2YWx1ZX0pPT52YWx1ZSkpLGxpc3QudmFsdWVzLmxlbmd0aD49MTAmJmxpc3QubmFtZSYmbGlzdC5jYXRlZ29yaWVzLmxlbmd0aD4wPygkc2NvcGUuc2F2aW5nPSEwLFRlblRoaW5nc1N2Yy5zYXZlTGlzdCgkc2NvcGUuY3VycmVudFVzZXIsbGlzdCkudGhlbigoKHtkYXRhfSk9PntpZigkc2NvcGUuc2VsZWN0ZWRMaXN0Ll9pZCl7Zm9yKGxldCBpPTA7aTwkc2NvcGUubGlzdHMubGVuZ3RoO2krKylpZigkc2NvcGUubGlzdHNbaV0uX2lkPT09ZGF0YS5faWQpeyRzY29wZS5saXN0c1tpXT1kYXRhO2JyZWFrfSRzY29wZS5zZWxlY3RMaXN0KGxpc3QpfWVsc2UgJHNjb3BlLmxpc3RzLnVuc2hpZnQoZGF0YSksJHNjb3BlLnNlbGVjdExpc3QoZGF0YSk7JHNjb3BlLnNhdmluZz0hMX0pLChlcnI9Pntjb25zb2xlLmVycm9yKGVyciksJHNjb3BlLnNhdmluZz0hMX0pKSk6bGlzdC52YWx1ZXMubGVuZ3RoPDEwP2FsZXJ0KFwiTGlzdHMgbXVzdCBjb250YWluIDEwIG9yIG1vcmUgdmFsdWVzIVwiKTpsaXN0Lm5hbWU/Zmxhc2goXCIubGlzdC1jYXRlZ29yeVwiKTpmbGFzaChcIiNsaXN0LW5hbWVcIikpfSwkc2NvcGUuZGVsZXRlTGlzdD1saXN0PT57bGlzdC5faWQ/Y29uZmlybShcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBsaXN0P1wiKSYmVGVuVGhpbmdzU3ZjLmRlbGV0ZUxpc3QobGlzdCkudGhlbigocmVzcG9uc2U9Pnskc2NvcGUuZ2V0TGlzdHMoKSwkc2NvcGUuc2VsZWN0ZWRMaXN0PW51bGx9KSk6KCRzY29wZS5saXN0cz0kc2NvcGUubGlzdHMuZmlsdGVyKCgoe19pZH0pPT5faWQpKSwkc2NvcGUuc2VsZWN0ZWRMaXN0PW51bGwpfSwkc2NvcGUubGlzdEJ1dHRvbkNsYXNzPWxpc3Q9Pntjb25zdCB2YWx1ZXM9bGlzdC52YWx1ZXMubGVuZ3RoLGJsdXJicz1saXN0LmJsdXJicztyZXR1cm4gdmFsdWVzPT09Ymx1cmJzJiZsaXN0LmRlc2NyaXB0aW9uP1wiYnRuLWRlZmF1bHRcIjowIT09Ymx1cmJzfHxsaXN0LmRlc2NyaXB0aW9uPzA9PT1ibHVyYnMmJmxpc3QuZGVzY3JpcHRpb24/XCJidG4taW5mb1wiOlwiYnRuLXByaW1hcnlcIjpcImJ0bi13YXJuaW5nXCJ9LCRzY29wZS5nZXRNb3ZpZVBpY3M9KCk9Pnskc2NvcGUuZ2V0dGluZ0JsdXJicz0hMCxUZW5UaGluZ3NTdmMuZ2V0TW92aWVQaWNzKCRzY29wZS5zZWxlY3RlZExpc3QpLnRoZW4oKHJlc3BvbnNlPT57JHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCksJHNjb3BlLmdldHRpbmdCbHVyYnM9ITF9KSl9LCRzY29wZS5nZXRUVlBpY3M9KCk9Pnskc2NvcGUuZ2V0dGluZ0JsdXJicz0hMCxUZW5UaGluZ3NTdmMuZ2V0VFZQaWNzKCRzY29wZS5zZWxlY3RlZExpc3QpLnRoZW4oKHJlc3BvbnNlPT57JHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCksJHNjb3BlLmdldHRpbmdCbHVyYnM9ITF9KSl9LCRzY29wZS5nZXRBY3RvclBpY3M9KCk9Pnskc2NvcGUuZ2V0dGluZ0JsdXJicz0hMCxUZW5UaGluZ3NTdmMuZ2V0QWN0b3JQaWNzKCRzY29wZS5zZWxlY3RlZExpc3QpLnRoZW4oKHJlc3BvbnNlPT57JHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCksJHNjb3BlLmdldHRpbmdCbHVyYnM9ITF9KSl9LCRzY29wZS5nZXRCb29rUGljcz0oKT0+eyRzY29wZS5nZXR0aW5nQmx1cmJzPSEwLFRlblRoaW5nc1N2Yy5nZXRCb29rUGljcygkc2NvcGUuc2VsZWN0ZWRMaXN0KS50aGVuKChyZXNwb25zZT0+eyRzY29wZS5zZWxlY3RMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpLCRzY29wZS5nZXR0aW5nQmx1cmJzPSExfSkpfSwkc2NvcGUuZ2V0TXVzaWNWaWRlb3M9KCk9Pnskc2NvcGUuZ2V0dGluZ0JsdXJicz0hMCxUZW5UaGluZ3NTdmMuZ2V0TXVzaWNWaWRlb3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbigocmVzcG9uc2U9Pnskc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KSwkc2NvcGUuZ2V0dGluZ0JsdXJicz0hMX0pKX0sJHNjb3BlLmdldFBpY3M9KCk9Pnskc2NvcGUuZ2V0dGluZ0JsdXJicz0hMCxUZW5UaGluZ3NTdmMuZ2V0UGljcygkc2NvcGUuc2VsZWN0ZWRMaXN0KS50aGVuKChyZXNwb25zZT0+eyRzY29wZS5zZWxlY3RMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpLCRzY29wZS5nZXR0aW5nQmx1cmJzPSExfSkpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiVGVuVGhpbmdzQWRtaW5DdHJsXCIsW1wiJHNjb3BlXCIsXCJUZW5UaGluZ3NTdmNcIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsVGVuVGhpbmdzU3ZjLFVzZXJTdmMpeyRzY29wZS4kb24oXCJsb2dpblwiLChfPT57JHNjb3BlLmN1cnJlbnRVc2VyLmFkbWluJiZnZXRVc2VycygpfSkpLCRzY29wZS5vcmRlcj17ZmllbGQ6XCJ1c2VybmFtZVwiLHJldmVyc2U6ITF9LCRzY29wZS5vcmRlckJ5PWZpZWxkPT57JHNjb3BlLm9yZGVyLmZpZWxkPT09ZmllbGQ/JHNjb3BlLm9yZGVyLnJldmVyc2U9ISRzY29wZS5vcmRlci5yZXZlcnNlOiRzY29wZS5vcmRlcj17ZmllbGQscmV2ZXJzZTohMX19LCRzY29wZS5nZXRRdWV1ZT0oKT0+eyRzY29wZS5sb2FkaW5nPSEwLFRlblRoaW5nc1N2Yy5nZXRRdWV1ZSgpLnRoZW4oKHJlc3BvbnNlPT57JHNjb3BlLnF1ZXVlPXJlc3BvbnNlLmRhdGEucmVwbGFjZShcIi9uXCIsXCI8YnIvPlwiKSwkc2NvcGUubG9hZGluZz0hMX0pKX0sJHNjb3BlLmdldFF1ZXVlKCksVGVuVGhpbmdzU3ZjLmdldFBhdXNlKCkudGhlbigocmVzcG9uc2U9Pnskc2NvcGUucGF1c2VkPXJlc3BvbnNlLmRhdGEsY29uc29sZS5sb2coJHNjb3BlLnBhdXNlZCl9KSk7Y29uc3QgZ2V0VXNlcnM9KCk9Pnskc2NvcGUubG9hZGluZz0hMCxVc2VyU3ZjLmdldFVzZXJzKCkudGhlbigocmVzcG9uc2U9Pnskc2NvcGUudXNlcnM9cmVzcG9uc2UuZGF0YS5maWx0ZXIoKHVzZXI9PiF1c2VyLmFkbWluKSksJHNjb3BlLmxvYWRpbmc9ITF9KSl9OyRzY29wZS50b2dnbGVCYW49dXNlcj0+eyRzY29wZS5sb2FkaW5nPSEwLFVzZXJTdmMudG9nZ2xlQmFuKHVzZXIuX2lkKS50aGVuKChyZXNwb25zZT0+e2dldFVzZXJzKCl9KSl9LCRzY29wZS50b2dnbGVQYXVzZT11c2VyPT57VGVuVGhpbmdzU3ZjLnRvZ2dsZVBhdXNlKCkudGhlbigocmVzcG9uc2U9Pnskc2NvcGUucGF1c2VkPXJlc3BvbnNlLmRhdGEsY29uc29sZS5sb2coJHNjb3BlLnBhdXNlZCl9KSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJUZW5UaGluZ3NDdXJhdGVDdHJsXCIsW1wiJHNjb3BlXCIsXCJUZW5UaGluZ3NTdmNcIixmdW5jdGlvbigkc2NvcGUsVGVuVGhpbmdzU3ZjKXtUZW5UaGluZ3NTdmMuZ2V0TGFuZ3VhZ2VzKCkudGhlbigocmVzcG9uc2U9Pnskc2NvcGUubGFuZ3VhZ2VzPXJlc3BvbnNlLmRhdGF9KSksJHNjb3BlLiRvbihcImxvZ2luXCIsKF89Pnskc2NvcGUuZ2V0TGlzdHMoKX0pKSwkc2NvcGUub3JkZXI9e2ZpZWxkOlwibmFtZVwiLHJldmVyc2U6ITF9LCRzY29wZS5vcmRlckJ5PWZpZWxkPT57JHNjb3BlLm9yZGVyLmZpZWxkPT09ZmllbGQ/JHNjb3BlLm9yZGVyLnJldmVyc2U9ISRzY29wZS5vcmRlci5yZXZlcnNlOiRzY29wZS5vcmRlcj17ZmllbGQscmV2ZXJzZTohMX19LCRzY29wZS5nZXRMaXN0cz0oKT0+eyRzY29wZS5sb2FkaW5nPSEwLFRlblRoaW5nc1N2Yy5nZXRMaXN0cygpLnRoZW4oKCh7ZGF0YX0pPT57JHNjb3BlLmxpc3RzPWRhdGEsY29uc29sZS5sb2coZGF0YSksJHNjb3BlLmxvYWRpbmc9ITF9KSl9LCRzY29wZS5zZXREaWZmaWN1bHR5PShsaXN0LGRpZmZpY3VsdHkpPT57bGlzdC5kaWZmaWN1bHR5PWRpZmZpY3VsdHksVGVuVGhpbmdzU3ZjLnVwZGF0ZUxpc3Qoe19pZDpsaXN0Ll9pZCxkaWZmaWN1bHR5fSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJUZW5UaGluZ3NHYW1lQ3RybFwiLFtcIiRzY29wZVwiLFwiJHN0YXRlUGFyYW1zXCIsXCJUZW5UaGluZ3NTdmNcIixmdW5jdGlvbigkc2NvcGUsJHN0YXRlUGFyYW1zLFRlblRoaW5nc1N2Yyl7JHNjb3BlLiRvbihcImxvZ2luXCIsKF89Pnskc2NvcGUuY3VycmVudFVzZXIuYWRtaW4mJmdldFVzZXJzKCl9KSksJHN0YXRlUGFyYW1zLmdhbWUmJlRlblRoaW5nc1N2Yy5nZXRHYW1lKCRzdGF0ZVBhcmFtcy5nYW1lKS50aGVuKChyZXNwb25zZT0+eyRzY29wZS5nYW1lPXJlc3BvbnNlLmRhdGEsY29uc29sZS5sb2coJHNjb3BlLmdhbWUpfSkpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJXb3Jrb3V0Q3RybFwiLFtcIiRzY29wZVwiLGZ1bmN0aW9uKCRzY29wZSl7JHNjb3BlLnRpbWVSZW1haW5pbmc9MCwkc2NvcGUudGltZUV4ZXJjaXNpbmc9MzAsJHNjb3BlLnRpbWVSZXN0aW5nPTEwLCRzY29wZS5yZXN0PSExO3ZhciBleGVyY2lzaW5nLHNvdW5kcz17b246bmV3IEF1ZGlvKFwib24ud2F2XCIpLG9mZjpuZXcgQXVkaW8oXCJvZmYud2F2XCIpLHN3aXRjaDpuZXcgQXVkaW8oXCJzd2l0Y2gud2F2XCIpfSxleGVyY2lzZXM9W3tuYW1lOlwiSnVtcGluZyBKYWNrc1wiLHNwbGl0OiExfSx7bmFtZTpcIldhbGwgU2l0XCIsc3BsaXQ6ITF9LHtuYW1lOlwiUHVzaC1VcFwiLHNwbGl0OiExfSx7bmFtZTpcIkNydW5jaFwiLHNwbGl0OiExfSx7bmFtZTpcIlN0ZXAtVXBcIixzcGxpdDohMH0se25hbWU6XCJTcXVhdFwiLHNwbGl0OiExfSx7bmFtZTpcIlRyaWNlcHMgRGlwXCIsc3BsaXQ6ITF9LHtuYW1lOlwiUGxhbmtcIixzcGxpdDohMX0se25hbWU6XCJIaWdoIEtuZWVzXCIsc3BsaXQ6ITF9LHtuYW1lOlwiTHVuZ2VcIixzcGxpdDohMX0se25hbWU6XCJQdXNoLVVwIHdpdGggUm90YXRpb25cIixzcGxpdDohMX0se25hbWU6XCJTaWRlIFBsYW5rXCIsc3BsaXQ6ITB9XTskc2NvcGUucHJvZ3Jlc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZXhlcmNpc2VzLmxlbmd0aC1NYXRoLmZsb29yKCRzY29wZS50aW1lUmVtYWluaW5nLygkc2NvcGUudGltZUV4ZXJjaXNpbmcrJHNjb3BlLnRpbWVSZXN0aW5nKSkrXCIvXCIrZXhlcmNpc2VzLmxlbmd0aH0sJHNjb3BlLndvcmtvdXQ9ZnVuY3Rpb24oKXt2YXIgZXhjZXJjaXNlVGltZT0kc2NvcGUudGltZUV4ZXJjaXNpbmcrJHNjb3BlLnRpbWVSZXN0aW5nOyRzY29wZS50aW1lUmVtYWluaW5nPyhjbGVhckludGVydmFsKGV4ZXJjaXNpbmcpLCRzY29wZS50aW1lcj1cIlwiLCRzY29wZS50aW1lUmVtYWluaW5nPTAsJHNjb3BlLnJlc3Q9ITEsJHNjb3BlLmV4ZXJjaXNlPXtuYW1lOlwiXCIsc3BsaXQ6ITF9KTooJHNjb3BlLnRpbWVSZW1haW5pbmc9ZXhlcmNpc2VzLmxlbmd0aCpleGNlcmNpc2VUaW1lLGV4ZXJjaXNpbmc9c2V0SW50ZXJ2YWwoKGZ1bmN0aW9uKCl7aWYoJHNjb3BlLnRpbWVSZW1haW5pbmctLSwwPT09JHNjb3BlLnRpbWVSZW1haW5pbmcpcmV0dXJuICRzY29wZS5leGVyY2lzZT17bmFtZTpcIkZpbmlzaGVkISBDb25ncmF0cyFcIixzcGxpdDohMX0sJHNjb3BlLnRpbWVyPVwiXCIsJHNjb3BlLnRpbWVSZW1haW5pbmc9MCwkc2NvcGUucmVzdD0hMSwkc2NvcGUuJGFwcGx5KCksY2xlYXJJbnRlcnZhbChleGVyY2lzaW5nKTt2YXIgY3VycmVudEV4ZXJjaXNlPU1hdGguZmxvb3IoJHNjb3BlLnRpbWVSZW1haW5pbmcvZXhjZXJjaXNlVGltZSksdGltZXI9JHNjb3BlLnRpbWVSZW1haW5pbmctY3VycmVudEV4ZXJjaXNlKmV4Y2VyY2lzZVRpbWU7JHNjb3BlLnRpbWVyPXRpbWVyPiRzY29wZS50aW1lRXhlcmNpc2luZz90aW1lci0kc2NvcGUudGltZUV4ZXJjaXNpbmc6dGltZXIsdGltZXI+JHNjb3BlLnRpbWVFeGVyY2lzaW5nPyRzY29wZS5yZXN0PSEwOiRzY29wZS5yZXN0PSExLCRzY29wZS5leGVyY2lzZT1leGVyY2lzZXNbZXhlcmNpc2VzLmxlbmd0aC1jdXJyZW50RXhlcmNpc2UtMV0sdGltZXI9PT0kc2NvcGUudGltZUV4ZXJjaXNpbmc/c291bmRzLm9uLnBsYXkoKTowPT09dGltZXI/c291bmRzLm9mZi5wbGF5KCk6JHNjb3BlLmV4ZXJjaXNlLnNwbGl0JiZ0aW1lcj09PU1hdGguZmxvb3IoJHNjb3BlLnRpbWVFeGVyY2lzaW5nLzIpJiZzb3VuZHMuc3dpdGNoLnBsYXkoKSwkc2NvcGUuJGFwcGx5KCl9KSwxZTMpKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZGlyZWN0aXZlKFwiaGVhZFwiLFtcIiRyb290U2NvcGVcIixcIiRzdGF0ZVwiLFwiJGNvbXBpbGVcIixcIiRpbnRlcnBvbGF0ZVwiLGZ1bmN0aW9uKCRyb290U2NvcGUsJHN0YXRlLCRjb21waWxlLCRpbnRlcnBvbGF0ZSl7dmFyIGdldFN0eWxlPWZ1bmN0aW9uKHRlbXBsYXRlU3R5bGVVcmwpe3ZhciBzdHlsZT17aHJlZjp0ZW1wbGF0ZVN0eWxlVXJsLHJlbDpcInN0eWxlc2hlZXRcIn07cmV0dXJuIHN0eWxlLmhyZWYubWF0Y2goL1xcLmxlc3MkLykmJihzdHlsZS5yZWw9XCJzdHlsZXNoZWV0L2xlc3NcIiksc3R5bGV9O3JldHVybntyZXN0cmljdDpcIkVcIixsaW5rOmZ1bmN0aW9uKHNjb3BlLGVsZW0pe3Njb3BlLnRlbXBsYXRlU3R5bGVzPVtdO3ZhciBodG1sPSc8bGluayBuZy1hdHRyLXJlbD1cInt7c3R5bGUucmVsfX1cIiBuZy1yZXBlYXQ9XCJzdHlsZSBpbiB0ZW1wbGF0ZVN0eWxlc1wiIG5nLWhyZWY9XCJ7e3N0eWxlLmhyZWZ9fVwiPic7aHRtbD0oaHRtbD1odG1sLnJlcGxhY2UoL1xce1xcey9nLCRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpKSkucmVwbGFjZSgvXFx9XFx9L2csJGludGVycG9sYXRlLmVuZFN5bWJvbCgpKSxlbGVtLmFwcGVuZCgkY29tcGlsZShodG1sKShzY29wZSkpLCRyb290U2NvcGUuJG9uKFwiJHN0YXRlQ2hhbmdlU3RhcnRcIiwoZnVuY3Rpb24oZXZlbnQsdG9TdGF0ZSx0b1BhcmFtcyxmcm9tU3RhdGUsZnJvbVBhcmFtcyl7c2NvcGUudGVtcGxhdGVTdHlsZXM9ZnVuY3Rpb24oc3RhdGUpe2Zvcih2YXIgc3RhdGVzPXt9O1wiXCIhPT1zdGF0ZS5uYW1lOyl7dmFyIHBhcmVudD0kc3RhdGUuZ2V0KFwiXlwiLHN0YXRlKTtzdGF0ZXNbcGFyZW50Lm5hbWVdfHwoc3RhdGVzW3BhcmVudC5uYW1lXT17fSksc3RhdGUudGVtcGxhdGVTdHlsZVVybCYmKHN0YXRlc1twYXJlbnQubmFtZV1bXCJcIl18fChzdGF0ZXNbcGFyZW50Lm5hbWVdW1wiXCJdPWdldFN0eWxlKHN0YXRlLnRlbXBsYXRlU3R5bGVVcmwpKSksc3RhdGUudmlld3MmJl8uZm9yRWFjaChzdGF0ZS52aWV3cywoZnVuY3Rpb24odmlldyxrZXkpe2lmKHZpZXcudGVtcGxhdGVTdHlsZVVybClyZXR1cm4oa2V5PWtleS5zcGxpdChcIkBcIikpWzFdPyhzdGF0ZXNba2V5WzFdXXx8KHN0YXRlc1trZXlbMV1dPXt9KSx2b2lkKHN0YXRlc1trZXlbMV1dW2tleVswXV18fChzdGF0ZXNba2V5WzFdXVtrZXlbMF1dPWdldFN0eWxlKHZpZXcudGVtcGxhdGVTdHlsZVVybCkpKSk6dm9pZChzdGF0ZXNbcGFyZW50Lm5hbWVdW2tleVswXV09Z2V0U3R5bGUodmlldy50ZW1wbGF0ZVN0eWxlVXJsKSl9KSksc3RhdGU9cGFyZW50fXZhciBmbGF0PVtdO3JldHVybiBfLmZvckVhY2goc3RhdGVzLChmdW5jdGlvbih2aWV3cyl7Xy5mb3JFYWNoKHZpZXdzLChmdW5jdGlvbihzdHlsZSl7Xy5pbmNsdWRlcyhmbGF0LHN0eWxlKXx8ZmxhdC5wdXNoKHN0eWxlKX0pKX0pKSxmbGF0LnJldmVyc2UoKSxmbGF0fSh0b1N0YXRlKX0pKX19fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJDYXRlZ29yaWVzU3ZjXCIsW1wiJGh0dHBcIixmdW5jdGlvbigkaHR0cCl7dmFyIHN2Yz10aGlzO3N2Yy5nZXRDYXRlZ29yaWVzPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvY2F0ZWdvcmllc1wiKX0sc3ZjLmdldFRhc2tzPWZ1bmN0aW9uKGNhdGVnb3J5KXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9jYXRlZ29yaWVzL1wiK2NhdGVnb3J5KX0sc3ZjLmFkZENhdGVnb3J5PWZ1bmN0aW9uKGNhdGVnb3J5KXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvY2F0ZWdvcmllcy9cIixjYXRlZ29yeSl9LHN2Yy5hZGRUYXNrPWZ1bmN0aW9uKGNhdGVnb3J5LHRhc2spe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS9jYXRlZ29yaWVzL1wiK2NhdGVnb3J5K1wiL3Rhc2tzXCIsdGFzayl9LHN2Yy5zZXRQcmlvcml0eUxpc3Q9ZnVuY3Rpb24obGlzdCl7c3ZjLmNob2ljZXM9bGlzdCxzdmMucHJpb3JpdHlMaXN0PVtdO2Zvcih2YXIgaT0wO2k8bGlzdC5sZW5ndGg7aSsrKWZvcih2YXIgaj1pKzE7ajxsaXN0Lmxlbmd0aDtqKyspe3ZhciByYW5kb209TWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKTtzdmMucHJpb3JpdHlMaXN0LnB1c2goe2lkOjAsZmlyc3RDaG9pY2U6bGlzdFswPT09cmFuZG9tP2k6al0ubmFtZSxzZWNvbmRDaG9pY2U6bGlzdFswPT09cmFuZG9tP2o6aV0ubmFtZSxjaG9pY2U6XCJcIn0pfWZvcihpIGluIGZ1bmN0aW9uKGFycmF5KXt2YXIgdCxpLG09YXJyYXkubGVuZ3RoO2Zvcig7bTspaT1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqbS0tKSx0PWFycmF5W21dLGFycmF5W21dPWFycmF5W2ldLGFycmF5W2ldPXR9KHN2Yy5wcmlvcml0eUxpc3QpLHN2Yy5wcmlvcml0eUxpc3Qpc3ZjLnByaW9yaXR5TGlzdFtpXS5pZD1pKzF9LHN2Yy5nZXRQcmlvcml0eUxpc3Q9ZnVuY3Rpb24obGlzdCl7cmV0dXJuIHN2Yy5wcmlvcml0eUxpc3R9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJFbWFpbFN2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3RoaXMuc2VuZD1mdW5jdGlvbihlbWFpbCl7cmV0dXJuIGNvbnNvbGUubG9nKGVtYWlsKSwkaHR0cC5wb3N0KFwiL2FwaS9lbWFpbFwiLGVtYWlsKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIkZpbGVTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLmdldEltYWdlcz1mdW5jdGlvbihmb2xkZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2ZpbGVzL2ltYWdlcy9cIitmb2xkZXIpfSx0aGlzLmdldFNvdW5kcz1mdW5jdGlvbihmb2xkZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2ZpbGVzL3NvdW5kcy9cIitmb2xkZXIpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiR2FtZVN2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3RoaXMuZ2V0SGlnaHNjb3JlPWZ1bmN0aW9uKGdhbWUsdXNlcil7cmV0dXJuICRodHRwLmdldChcIi9hcGkvZ2FtZXMvXCIrZ2FtZStcIi9cIit1c2VyK1wiL2hpZ2hzY29yZVwiKX0sdGhpcy5zZXRIaWdoc2NvcmU9ZnVuY3Rpb24oZ2FtZSx1c2VyLHNjb3JlKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvZ2FtZXMvXCIrZ2FtZStcIi9cIit1c2VyK1wiL2hpZ2hzY29yZVwiLHtzY29yZX0pfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiTGFuZ3VhZ2VTdmNcIiwoZnVuY3Rpb24oKXt2YXIgc3ZjPXRoaXM7c3ZjLmxhbmd1YWdlcz1be2NvZGU6XCJFTlwiLG5hbWU6XCJFbmdsaXNoXCIsZmxhZzpcImZsYWctaWNvbi1nYlwifSx7Y29kZTpcIk5MXCIsbmFtZTpcIk5lZGVybGFuZHNcIixmbGFnOlwiZmxhZy1pY29uLW5sXCJ9LHtjb2RlOlwiRlJcIixuYW1lOlwiRnJhbsOnYWlzXCIsZmxhZzpcImZsYWctaWNvbi1mclwifV0sc3ZjLnRleHQ9W3tjb2RlOlwiRU5cIn0se2NvZGU6XCJOTFwifSx7Y29kZTpcIkZSXCJ9XSxzdmMuc2VsZWN0ZWRMYW5ndWFnZT1zdmMubGFuZ3VhZ2VzWzBdLHN2Yy5zZXRMYW5ndWFnZT1mdW5jdGlvbihsYW5ndWFnZSl7cmV0dXJuIHN2Yy5zZWxlY3RlZExhbmd1YWdlPWxhbmd1YWdlLGxhbmd1YWdlfSxzdmMuZ2V0TGFuZ3VhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gc3ZjLnNlbGVjdGVkTGFuZ3VhZ2V9fSkpLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJQb3N0c1N2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3RoaXMuZmV0Y2g9ZnVuY3Rpb24oKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9wb3N0c1wiKX0sdGhpcy5jcmVhdGU9ZnVuY3Rpb24ocG9zdCl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL3Bvc3RzXCIscG9zdCl9LHRoaXMuZ2V0UG9zdD1mdW5jdGlvbihwb3N0KXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9wb3N0cy9cIitwb3N0Ll9pZCl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJUZW5UaGluZ3NTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt2YXIgc3ZjPXRoaXM7c3ZjLmdldFF1ZXVlPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9ib3RzL3RlbnRoaW5ncy9xdWV1ZVwiKX0sc3ZjLmdldExpc3RzPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvdGVudGhpbmdzL2xpc3RzXCIpfSxzdmMuZ2V0Q2F0ZWdvcmllcz0oKT0+JGh0dHAuZ2V0KFwiL2FwaS90ZW50aGluZ3MvY2F0ZWdvcmllc1wiKSxzdmMuZ2V0TGFuZ3VhZ2VzPSgpPT4kaHR0cC5nZXQoXCIvYXBpL3RlbnRoaW5ncy9sYW5ndWFnZXNcIiksc3ZjLmdldExpc3Q9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvdGVudGhpbmdzL2xpc3RzL1wiK2xpc3QuX2lkKX0sc3ZjLnVwZGF0ZUxpc3Q9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL3RlbnRoaW5ncy9saXN0cy9cIitsaXN0Ll9pZCxsaXN0KX0sc3ZjLnNhdmVMaXN0PWZ1bmN0aW9uKHVzZXIsbGlzdCl7cmV0dXJuICRodHRwLnB1dChcIi9hcGkvdGVudGhpbmdzL2xpc3RzXCIse3VzZXIsbGlzdH0pfSxzdmMucmVwb3J0TGlzdD1mdW5jdGlvbih1c2VyLGxpc3QpeyRodHRwLmdldChcIi9hcGkvdGVudGhpbmdzL2xpc3RzL1wiK2xpc3QuX2lkK1wiL3JlcG9ydC9cIit1c2VyLl9pZCl9LHN2Yy5kZWxldGVMaXN0PWZ1bmN0aW9uKGxpc3Qpe3JldHVybiAkaHR0cC5kZWxldGUoXCIvYXBpL3RlbnRoaW5ncy9saXN0cy9cIitsaXN0Ll9pZCl9LHN2Yy5nZXRNb3ZpZVBpY3M9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvbGlzdHMvJHtsaXN0Ll9pZH0vbW92aWVzYCl9LHN2Yy5nZXRUVlBpY3M9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvbGlzdHMvJHtsaXN0Ll9pZH0vdHZgKX0sc3ZjLmdldEFjdG9yUGljcz1mdW5jdGlvbihsaXN0KXtyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9saXN0cy8ke2xpc3QuX2lkfS9hY3RvcnNgKX0sc3ZjLmdldEJvb2tQaWNzPWZ1bmN0aW9uKGxpc3Qpe3JldHVybiAkaHR0cC5nZXQoYC9hcGkvdGVudGhpbmdzL2xpc3RzLyR7bGlzdC5faWR9L2Jvb2tzYCl9LHN2Yy5nZXRNdXNpY1ZpZGVvcz1mdW5jdGlvbihsaXN0KXtyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9saXN0cy8ke2xpc3QuX2lkfS9tdXNpY3ZpZGVvc2ApfSxzdmMuZ2V0UGljcz1mdW5jdGlvbihsaXN0KXtyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9saXN0cy8ke2xpc3QuX2lkfS9waWNzYCl9LHN2Yy5nZXRQYXVzZT1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3RlbnRoaW5ncy9wYXVzZVwiKX0sc3ZjLnRvZ2dsZVBhdXNlPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL3RlbnRoaW5ncy9wYXVzZVwiKX0sc3ZjLmdldEdhbWU9ZnVuY3Rpb24oaWQpe3JldHVybiAkaHR0cC5nZXQoYC9hcGkvdGVudGhpbmdzL2dhbWUvJHtpZH1gKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIlVzZXJTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt2YXIgc3ZjPXRoaXM7c3ZjLmdldFVzZXI9ZnVuY3Rpb24oKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS91c2Vyc1wiKX0sc3ZjLmdldFVzZXJzPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvdXNlcnMvYWxsXCIpfSxzdmMudG9nZ2xlQmFuPWZ1bmN0aW9uKGlkKXtyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3VzZXJzL2Jhbi8ke2lkfWApfSxzdmMuc2V0VG9rZW49ZnVuY3Rpb24odG9rZW4pe3JldHVybiAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIlgtQXV0aFwiXT10b2tlbixzdmMuZ2V0VXNlcigpfSxzdmMuYXV0aGVudGljYXRlPWZ1bmN0aW9uKHVzZXIpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9hdXRoZW50aWNhdGVcIix7dXNlcn0pLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXtyZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS50b2tlbj1yZXNwb25zZS5kYXRhLHN2Yy5zZXRUb2tlbihyZXNwb25zZS5kYXRhKX0pKX0sc3ZjLmxvZ2luPWZ1bmN0aW9uKHVzZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3VzZXJzL1wiK3VzZXIrXCIvbG9naW5cIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2Upe3JldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuPXJlc3BvbnNlLmRhdGEsc3ZjLnNldFRva2VuKHJlc3BvbnNlLmRhdGEpfSkpfSxzdmMudXBkYXRlVXNlcj1mdW5jdGlvbih1c2VyKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlci5faWQse3VzZXJ9KS50aGVuKChmdW5jdGlvbigpe3JldHVybiBzdmMuZ2V0VXNlcigpfSkpfSxzdmMuY2hlY2tQYXNzd29yZD1mdW5jdGlvbih1c2VyLHBhc3N3b3JkKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlcitcIi92ZXJpZmljYXRpb25cIix7cGFzc3dvcmR9KX0sc3ZjLmNoYW5nZVBhc3N3b3JkPWZ1bmN0aW9uKHVzZXIsb2xkUGFzc3dvcmQsbmV3UGFzc3dvcmQpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9cIit1c2VyK1wiL3Bhc3N3b3JkXCIse29sZFBhc3N3b3JkLG5ld1Bhc3N3b3JkfSl9LHN2Yy5jaGFuZ2VVc2VybmFtZT1mdW5jdGlvbih1c2VyLG5ld1VzZXJuYW1lKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlcitcIi91c2VybmFtZVwiLHtuZXdVc2VybmFtZX0pLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5nZXRVc2VyKCl9KSl9LHN2Yy5sb2dvdXQ9ZnVuY3Rpb24oKXt3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCksJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJYLUF1dGhcIl09XCJcIn0sc3ZjLmNyZWF0ZVVzZXI9ZnVuY3Rpb24odXNlcm5hbWUscGFzc3dvcmQpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vyc1wiLHt1c2VybmFtZSxwYXNzd29yZH0pLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSxwYXNzd29yZCl9KSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJRdWl6QW5pbWFsc0N0cmxcIixbXCIkc2NvcGVcIixcIkZpbGVTdmNcIixmdW5jdGlvbigkc2NvcGUsRmlsZVN2Yyl7RmlsZVN2Yy5nZXRTb3VuZHMoXCJhbmltYWxzXCIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuYW5pbWFscz1fLnNodWZmbGUocmVzcG9uc2UuZGF0YS5tYXAoKGFuaW1hbD0+KHtzb3VuZDphbmltYWwsbmFtZTphbmltYWwuc3Vic3RyaW5nKDAsYW5pbWFsLmluZGV4T2YoXCIuXCIpKS5yZXBsYWNlKFwiX1wiLFwiIFwiKS5jYXBpdGFsaXplKCl9KSkpKTtmb3IobGV0IGFuaW1hbCBvZiAkc2NvcGUuYW5pbWFscylhbmltYWwuYW5zd2Vycz1fLnNodWZmbGUoW2FuaW1hbC5uYW1lLC4uLmdldFJhbmRvbUFuaW1hbHMoYW5pbWFsLm5hbWUpXSk7Y29uc29sZS5sb2coJHNjb3BlLmFuaW1hbHMpfSkpLCRzY29wZS5ndWVzcz0oYW5pbWFsLGd1ZXNzKT0+e2FuaW1hbC5ndWVzcz1ndWVzc307Y29uc3QgZ2V0UmFuZG9tQW5pbWFscz1uYW1lPT5fLnNodWZmbGUoJHNjb3BlLmFuaW1hbHMuZmlsdGVyKChhbmltYWw9Pm5hbWUhPT1hbmltYWwubmFtZSkpLm1hcCgoYW5pbWFsPT5hbmltYWwubmFtZSkpKS5zbGljZSgwLDUpOyRzY29wZS5nZXRTY29yZT0oKT0+YCR7JHNjb3BlLmFuaW1hbHMuZmlsdGVyKChhbmltYWw9PmFuaW1hbC5uYW1lPT09YW5pbWFsLmd1ZXNzKSkubGVuZ3RofS8keyRzY29wZS5hbmltYWxzLmxlbmd0aH1gLCRzY29wZS5pc1Njb3JlVmlzaWJsZT0oKT0+JHNjb3BlLmFuaW1hbHMuZmlsdGVyKChhbmltYWw9PmFuaW1hbC5ndWVzcykpLmxlbmd0aD09PSRzY29wZS5hbmltYWxzLmxlbmd0aH1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiUXVpekdvb2dsZUN0cmxcIixbXCIkc2NvcGVcIixcIkZpbGVTdmNcIixmdW5jdGlvbigkc2NvcGUsRmlsZVN2Yyl7RmlsZVN2Yy5nZXRJbWFnZXMoXCJnb29nbGVcIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5pbWFnZXM9cmVzcG9uc2UuZGF0YX0pKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiUXVpekxvZ29zQ3RybFwiLFtcIiRzY29wZVwiLFwiRmlsZVN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxGaWxlU3ZjKXtGaWxlU3ZjLmdldEltYWdlcyhcImxvZ29zXCIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuaW1hZ2VzPXJlc3BvbnNlLmRhdGF9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlF1aXpNb3ZpZXNDdHJsXCIsW1wiJHNjb3BlXCIsXCJGaWxlU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEZpbGVTdmMpe0ZpbGVTdmMuZ2V0SW1hZ2VzKFwibW92aWVzXCIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuaW1hZ2VzPXJlc3BvbnNlLmRhdGF9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlF1aXpTa2VsZXRvbnNDdHJsXCIsW1wiJHNjb3BlXCIsXCJGaWxlU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEZpbGVTdmMpe0ZpbGVTdmMuZ2V0SW1hZ2VzKFwic2tlbGV0b25zXCIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuYW5pbWFscz1fLnNodWZmbGUocmVzcG9uc2UuZGF0YS5tYXAoKGFuaW1hbD0+KHtpbWFnZTphbmltYWwsbmFtZTphbmltYWwuc3Vic3RyaW5nKDAsYW5pbWFsLmluZGV4T2YoXCIuXCIpKS5yZXBsYWNlKFwiX1wiLFwiIFwiKS5jYXBpdGFsaXplKCl9KSkpKTtmb3IobGV0IGFuaW1hbCBvZiAkc2NvcGUuYW5pbWFscylhbmltYWwuYW5zd2Vycz1fLnNodWZmbGUoW2FuaW1hbC5uYW1lLC4uLmdldFJhbmRvbUFuaW1hbHMoYW5pbWFsLm5hbWUpXSk7Y29uc29sZS5sb2coJHNjb3BlLmFuaW1hbHMpfSkpLCRzY29wZS5ndWVzcz0oYW5pbWFsLGd1ZXNzKT0+e2FuaW1hbC5ndWVzcz1ndWVzc307Y29uc3QgZ2V0UmFuZG9tQW5pbWFscz1uYW1lPT5fLnNodWZmbGUoJHNjb3BlLmFuaW1hbHMuZmlsdGVyKChhbmltYWw9Pm5hbWUhPT1hbmltYWwubmFtZSkpLm1hcCgoYW5pbWFsPT5hbmltYWwubmFtZSkpKS5zbGljZSgwLDEwKTskc2NvcGUuZ2V0U2NvcmU9KCk9PmAkeyRzY29wZS5hbmltYWxzLmZpbHRlcigoYW5pbWFsPT5hbmltYWwubmFtZT09PWFuaW1hbC5ndWVzcykpLmxlbmd0aH0vJHskc2NvcGUuYW5pbWFscy5sZW5ndGh9YCwkc2NvcGUuaXNTY29yZVZpc2libGU9KCk9PiRzY29wZS5hbmltYWxzLmZpbHRlcigoYW5pbWFsPT5hbmltYWwuZ3Vlc3MpKS5sZW5ndGg9PT0kc2NvcGUuYW5pbWFscy5sZW5ndGh9XSk7IiwiLypcclxuJCA9IGpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xyXG52YXIgYm9vdHN0cmFwID0gcmVxdWlyZSgnYm9vdHN0cmFwJyk7XHJcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xyXG52YXIgYW5ndWxhclNhbml0aXplID0gcmVxdWlyZSgnYW5ndWxhci1zYW5pdGl6ZScpO1xyXG52YXIgYW5ndWxhckFuaW1hdGUgPSByZXF1aXJlKCdhbmd1bGFyLWFuaW1hdGUnKTtcclxuKi9cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcclxuICAndWkucm91dGVyJyxcclxuICAndWkuYm9vdHN0cmFwJyxcclxuICAnbmdBbmltYXRlJyxcclxuICAnbmdTYW5pdGl6ZScsXHJcbiAgJ25nRHJhZ0Ryb3AnLFxyXG4gICduZ1RhZ3NJbnB1dCcsXHJcbiAgJ3ZjUmVjYXB0Y2hhJyxcclxuICAnY2hhcnQuanMnLFxyXG4gICd0Yy5jaGFydGpzJ1xyXG5dKTtcclxuIiwiYW5ndWxhclxyXG5cdC5tb2R1bGUoJ2FwcCcpXHJcblx0LmNvbmZpZyhmdW5jdGlvbiAoXHJcblx0XHQkc3RhdGVQcm92aWRlcixcclxuXHRcdCR1cmxSb3V0ZXJQcm92aWRlcixcclxuXHRcdCR1cmxTZXJ2aWNlUHJvdmlkZXIsXHJcblx0XHQkbG9jYXRpb25Qcm92aWRlclxyXG5cdCkge1xyXG5cdFx0JHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2hvbWUnKTtcclxuXHRcdCR1cmxTZXJ2aWNlUHJvdmlkZXIuY29uZmlnLnN0cmljdE1vZGUoZmFsc2UpO1xyXG5cclxuXHRcdCRzdGF0ZVByb3ZpZGVyXHJcblx0XHRcdC5zdGF0ZSgnaG9tZScsIHtcclxuXHRcdFx0XHR1cmw6ICcvaG9tZScsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICcvaG9tZS5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdwb2xpY3knLCB7XHJcblx0XHRcdFx0dXJsOiAnL3BvbGljeScsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICcvcG9saWN5Lmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3ByaW50Jywge1xyXG5cdFx0XHRcdHVybDogJy9wcmludCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICcvcHJpbnQuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnZXhwZXJpZW5jZScsIHtcclxuXHRcdFx0XHR1cmw6ICcvZXhwZXJpZW5jZScsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ0V4cGVyaWVuY2VDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJy9leHBlcmllbmNlLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3NraWxscycsIHtcclxuXHRcdFx0XHR1cmw6ICcvc2tpbGxzJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnU2tpbGxzQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICcvc2tpbGxzLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2hvYmJpZXMnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2hvYmJpZXMnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdIb2JiaWVzQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICcvaG9iYmllcy5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdjb250YWN0Jywge1xyXG5cdFx0XHRcdHVybDogJy9jb250YWN0JyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnQ29udGFjdEN0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnL2NvbnRhY3QuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnd29ya291dCcsIHtcclxuXHRcdFx0XHR1cmw6ICcvd29ya291dCcsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1dvcmtvdXRDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJy93b3Jrb3V0Lmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3Bvc3RzJywge1xyXG5cdFx0XHRcdHVybDogJy9wb3N0cycsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICcvcG9zdHMuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgncHJvZmlsZScsIHtcclxuXHRcdFx0XHR1cmw6ICcvcHJvZmlsZScsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1Byb2ZpbGVDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJy9wcm9maWxlLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2xpc3RzJywge1xyXG5cdFx0XHRcdHVybDogJy9saXN0cycsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ0xpc3RzQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdsaXN0cy5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdwcmlvcml0aXplJywge1xyXG5cdFx0XHRcdHVybDogJy9wcmlvcml0aXplJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnUHJpb3JpdGl6ZUN0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAncHJpb3JpdGl6ZS5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdidWJibGVzJywge1xyXG5cdFx0XHRcdHVybDogJy9idWJibGVzJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnQnViYmxlc0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnYnViYmxlcy5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdhc3Rlcm9pZHMnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2FzdGVyb2lkcycsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ0FzdGVyb2lkc0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnYXN0ZXJvaWRzLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2xlbW1pbmdzJywge1xyXG5cdFx0XHRcdHVybDogJy9sZW1taW5ncycsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ0xlbW1pbmdzQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdsZW1taW5ncy5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdib3RzJywge1xyXG5cdFx0XHRcdHVybDogJy9ib3RzJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnVGVuVGhpbmdzQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICd0ZW50aGluZ3MuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgndGVudGhpbmdzJywge1xyXG5cdFx0XHRcdHVybDogJy90ZW50aGluZ3MnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdUZW5UaGluZ3NDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3RlbnRoaW5ncy5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCd0ZW50aGluZ3MtYWRtaW4nLCB7XHJcblx0XHRcdFx0dXJsOiAnL3RlbnRoaW5ncy1hZG1pbicsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1RlblRoaW5nc0FkbWluQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICd0ZW50aGluZ3MtYWRtaW4uaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgndGVudGhpbmdzLWN1cmF0ZScsIHtcclxuXHRcdFx0XHR1cmw6ICcvdGVudGhpbmdzLWN1cmF0ZScsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1RlblRoaW5nc0N1cmF0ZUN0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAndGVudGhpbmdzLWN1cmF0ZS5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCd0ZW50aGluZ3MtZ2FtZScsIHtcclxuXHRcdFx0XHR1cmw6ICcvdGVudGhpbmdzLzpnYW1lJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnVGVuVGhpbmdzR2FtZUN0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAndGVudGhpbmdzLWdhbWUuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgncXVpei1nb29nbGUnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2dvb2dsZScsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1F1aXpHb29nbGVDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3F1aXp6ZXMvZ29vZ2xlLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3F1aXotbG9nb3MnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2xvZ29zJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnUXVpekxvZ29zQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdxdWl6emVzL2xvZ29zLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3F1aXotYW5pbWFscycsIHtcclxuXHRcdFx0XHR1cmw6ICcvYW5pbWFscycsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1F1aXpBbmltYWxzQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdxdWl6emVzL2FuaW1hbHMuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgncXVpei1za2VsZXRvbnMnLCB7XHJcblx0XHRcdFx0dXJsOiAnL3NrZWxldG9ucycsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1F1aXpTa2VsZXRvbnNDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3F1aXp6ZXMvc2tlbGV0b25zLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3F1aXotbW92aWVzJywge1xyXG5cdFx0XHRcdHVybDogJy9tb3ZpZXMnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdRdWl6TW92aWVzQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdxdWl6emVzL21vdmllcy5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdjaGFyYWRlcycsIHtcclxuXHRcdFx0XHR1cmw6ICcvY2hhcmFkZXMnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdDaGFyYWRlc0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnL2NoYXJhZGVzLmh0bWwnLFxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHQkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUoe1xyXG5cdFx0XHRlbmFibGVkOiB0cnVlLFxyXG5cdFx0XHRyZXF1aXJlQmFzZTogZmFsc2UsXHJcblx0XHR9KTtcclxuXHR9KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdXZWJTb2NrZXRTdmMnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHRpbWVvdXQpIHtcclxuICBmdW5jdGlvbiB3ZWJzb2NrZXRIb3N0KCkge1xyXG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcclxuICAgICAgcmV0dXJuIFwid3NzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBcIndzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBjb25uZWN0aW9uO1xyXG4gIHZhciBjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQod2Vic29ja2V0SG9zdCgpKTtcclxuXHJcbiAgICBjb25uZWN0aW9uLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1dlYnNvY2tldCBjb25uZWN0ZWQnKTtcclxuICAgIH07XHJcblxyXG4gICAgY29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1dlYnNvY2tldCBjbG9zZWQuIFJlY29ubmVjdGluZy4uLicpO1xyXG4gICAgICAkdGltZW91dChjb25uZWN0LCAxMDAwKTtcclxuICAgIH07XHJcblxyXG4gICAgY29ubmVjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiArIGUgKyBcIiAtIFN0YXRlOiBcIiArIGNvbm5lY3Rpb24ucmVhZHlTdGF0ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgdmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGUuZGF0YSk7XHJcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnd3M6JyArIHBheWxvYWQudG9waWMsIHBheWxvYWQuZGF0YSk7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHRoaXMuc2VuZCA9IGZ1bmN0aW9uICh0b3BpYywgZGF0YSkge1xyXG4gICAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeSh7dG9waWM6IHRvcGljLCBkYXRhOiBkYXRhfSk7XHJcbiAgICBjb25uZWN0aW9uLnNlbmQoanNvbik7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5jb25uZWN0ID0gY29ubmVjdDtcclxuXHJcbn0pLnJ1bihmdW5jdGlvbiAoV2ViU29ja2V0U3ZjKSB7XHJcbiAgV2ViU29ja2V0U3ZjLmNvbm5lY3QoKTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdBcHBDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBMYW5ndWFnZVN2YywgVXNlclN2Yykge1xyXG4gIGNvbnNvbGUubG9nKFxyXG4gICAgJyVjWW91IHNuZWFreSBidWdnZXIhJyxcclxuICAgICdmb250OiAyZW0gc2Fucy1zZXJpZjsgY29sb3I6IERvZGdlckJsdWU7IHRleHQtc2hhZG93OiAycHggMCAwICM0NDQsIC0ycHggMCAwICM0NDQsIDAgMnB4IDAgIzQ0NCwgMCAtMnB4IDAgIzQ0NCwgMXB4IDFweCAjNDQ0LCAtMXB4IC0xcHggMCAjNDQ0LCAxcHggLTFweCAwICM0NDQsIC0xcHggMXB4IDAgIzQ0NDsnXHJcbiAgKTtcclxuICBjb25zb2xlLmxvZyhcclxuICAgIFwiSSdtIGdsYWQgeW91J3JlIGN1cmlvdXMgd2hldGhlciBzb21ldGhpbmcgaXMgcG9wcGluZyB1cCBpbiBoZXJlLiBJJ20gYSBiaXQgb2YgYSBzdGlja2xlciB3aGVuIGl0IGNvbWVzIHRvIG1lc3NhZ2VzIGluIHRoZSBjb25zb2xlIHNvIEkgdHJ5IHRvIG1ha2Ugc3VyZSBvbmx5IHRoaW5ncyBJIHdhbnQgYXJlIHZpc2libGUuIFRoYXQgYmVpbmcgc2FpZCwgaWYgdGhlcmUgaXMgYSBiaWcgZXJyb3IgaGVyZSwgSSB3b3VsZCByZWFsbHkgYXBwcmVjaWF0ZSB5b3UgdGVsbGluZyBtZSBzbyBJIGNhbiBnZXQgcmlkIG9mIGl0IVwiXHJcbiAgKTtcclxuICBjb25zb2xlLmxvZyhcclxuICAgICdUaGUgY29kZSBmb3IgbXkgcmVzdW1lIGlzIGhvc3RlZCBvbiBHaXRodWIgaWYgeW91IHJlYWxseSB3YW50IHRvIGdvIGludG8gYWxsIHRoaXMhID0+IGh0dHBzOi8vZ2l0aHViLmNvbS9GbGFuZGVyc0J1cmdlci9yZXN1bWUnXHJcbiAgKTtcclxuXHJcbiAgLypcclxuICAgICQoZG9jdW1lbnQpLmJpbmQoXCJrZXl1cCBrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xyXG4gICAgICBpZihlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09IDgwKXtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAqL1xyXG5cclxuICAkKHdpbmRvdykubG9hZChmdW5jdGlvbiAoKSB7XHJcbiAgICAkKCcubG9hZGluZycpLmZhZGVPdXQoJ3Nsb3cnKTtcclxuICAgICQoJy5jb250ZW50JykuZmFkZUluKCdzbG93Jyk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS50aGVtZUNvdW50ZXIgPSA2O1xyXG4gICRzY29wZS50b2RheSA9IG5ldyBEYXRlKCk7XHJcbiAgJHNjb3BlLnllYXIgPSAkc2NvcGUudG9kYXkuZ2V0RnVsbFllYXIoKTtcclxuICAkc2NvcGUucmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMCk7XHJcblxyXG4gICRzY29wZS5mbGlwVGhlbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAkKCcubG9hZGluZycpLnNob3coKTtcclxuICAgICQoJy5jb250ZW50JykuaGlkZSgpO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICQoJy5sb2FkaW5nJykuZmFkZU91dCgnc2xvdycpO1xyXG4gICAgICAkKCcuY29udGVudCcpLmZhZGVJbignc2xvdycpO1xyXG4gICAgfSwgODAwKTtcclxuICAgICRzY29wZS50aGVtZUNvdW50ZXIgPVxyXG4gICAgICAkc2NvcGUudGhlbWVDb3VudGVyIDwgNiA/ICRzY29wZS50aGVtZUNvdW50ZXIgKyAxIDogKCRzY29wZS50aGVtZUNvdW50ZXIgPSAxKTtcclxuICB9O1xyXG5cclxuICAkLmdldEpTT04oJy9za2lsbHMuanNvbicsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAkc2NvcGUuc2tpbGxzID0gZGF0YS5maWx0ZXIoZnVuY3Rpb24gKHNraWxsKSB7XHJcbiAgICAgIHJldHVybiBza2lsbC5lbmFibGVkO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gICQuZ2V0SlNPTignL2hvYmJpZXMuanNvbicsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAkc2NvcGUuaG9iYmllcyA9IGRhdGE7XHJcbiAgfSk7XHJcblxyXG4gICQuZ2V0SlNPTignL2V4cGVyaWVuY2UuanNvbicsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAkc2NvcGUuam9icyA9IGRhdGE7XHJcbiAgICAkc2NvcGUuam9icy5mb3JFYWNoKGZ1bmN0aW9uIChqb2IpIHtcclxuICAgICAgam9iLnN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGpvYi5zdGFydERhdGUpO1xyXG4gICAgICBpZiAoam9iLmVuZERhdGUpIGpvYi5lbmREYXRlID0gbmV3IERhdGUoam9iLmVuZERhdGUpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gICQuZ2V0SlNPTignL2NoYXJhZGVzLmpzb24nLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgJHNjb3BlLmNoYXJhZGVzID0gZGF0YTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLmdldFRpbWVTcGFuID0gZnVuY3Rpb24gKGpvYikge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgam9iLnN0YXJ0RGF0ZS5nZXRGdWxsWWVhcigpICsgKGpvYi5lbmREYXRlID8gJyAtICcgKyBqb2IuZW5kRGF0ZS5nZXRGdWxsWWVhcigpIDogJyAtIFRvZGF5JylcclxuICAgICk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmxhbmd1YWdlcyA9IExhbmd1YWdlU3ZjLmxhbmd1YWdlcztcclxuXHJcbiAgJHNjb3BlLnNlbGVjdGVkTGFuZ3VhZ2UgPSBMYW5ndWFnZVN2Yy5nZXRMYW5ndWFnZSgpO1xyXG5cclxuICAkc2NvcGUuc2VsZWN0TGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZ3VhZ2UpIHtcclxuICAgICRzY29wZS5zZWxlY3RlZExhbmd1YWdlID0gTGFuZ3VhZ2VTdmMuc2V0TGFuZ3VhZ2UobGFuZ3VhZ2UpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5ob3ZlcmRpdiA9IGZ1bmN0aW9uIChlLCBkaXZpZCkge1xyXG4gICAgdmFyIGxlZnQgPSBlLmNsaWVudFggKyAncHgnO1xyXG4gICAgdmFyIHRvcCA9IGUuY2xpZW50WSArIDIwICsgJ3B4JztcclxuXHJcbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2aWQpO1xyXG5cclxuICAgICQoJyMnICsgZGl2aWQpLmNzcygnbGVmdCcsIGxlZnQpO1xyXG4gICAgJCgnIycgKyBkaXZpZCkuY3NzKCd0b3AnLCB0b3ApO1xyXG5cclxuICAgICQoJyMnICsgZGl2aWQpLnRvZ2dsZSgpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zb2NpYWxNZWRpYSA9IFtcclxuICAgIC8qXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImZhY2Vib29rXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2ZsYW5kZXJzYnVyZ2VyXCIsXHJcbiAgICAgICAgICAgIFwiaWNvblwiOiBcImZhLWZhY2Vib29rLWZcIlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwidHdpdHRlclwiLFxyXG4gICAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vdHdpdHRlci5jb20vQmVsZ29DYW5hZGlhblwiLFxyXG4gICAgICAgICAgICBcImljb25cIjogXCJmYS10d2l0dGVyXCJcclxuICAgICAgICAgIH0sKi9cclxuICAgIHtcclxuICAgICAgbmFtZTogJ2luc3RhZ3JhbScsXHJcbiAgICAgIHVybDogJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vZmxhbmRlcnNidXJnZXIvJyxcclxuICAgICAgaWNvbjogJ2ZhLWluc3RhZ3JhbScsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnbGlua2VkaW4nLFxyXG4gICAgICB1cmw6ICdodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vbGF1cmVudC1kZWJhY2tlci0xNjMzYTkxNicsXHJcbiAgICAgIGljb246ICdmYS1saW5rZWRpbicsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnZ2l0aHViJyxcclxuICAgICAgdXJsOiAnaHR0cHM6Ly9naXRodWIuY29tL0ZsYW5kZXJzQnVyZ2VyJyxcclxuICAgICAgaWNvbjogJ2ZhLWdpdGh1YicsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnanNmaWRkbGUnLFxyXG4gICAgICB1cmw6ICdodHRwczovL2pzZmlkZGxlLm5ldC91c2VyL0JlbGdvQ2FuYWRpYW4vZmlkZGxlcy8nLFxyXG4gICAgICBpY29uOiAnZmEtanNmaWRkbGUnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogJ3N0YWNrb3ZlcmZsb3cnLFxyXG4gICAgICB1cmw6ICdodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTA4MzkyMy9iZWxnb2NhbmFkaWFuJyxcclxuICAgICAgaWNvbjogJ2ZhLXN0YWNrLW92ZXJmbG93JyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdnb29kcmVhZHMnLFxyXG4gICAgICB1cmw6ICdodHRwczovL3d3dy5nb29kcmVhZHMuY29tL3VzZXIvc2hvdy8xNzA3MDAxMC1sYXVyZW50JyxcclxuICAgICAgaWNvbjogJ2ZhLWdvb2RyZWFkcycsXHJcbiAgICB9LFxyXG4gIF07XHJcblxyXG4gIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXIpIHtcclxuICAgIFVzZXJTdmMubG9naW4od2luZG93LmxvY2FsU3RvcmFnZS51c2VyKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICBsb2dpbihyZXNwb25zZS5kYXRhKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbiAoXywgdXNlcikge1xyXG4gICAgbG9naW4odXNlcik7XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIGxvZ2luKHVzZXIpIHtcclxuICAgIGlmICghJHNjb3BlLmxvZ2dlZEluKSB7XHJcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UudXNlciA9IHVzZXIuX2lkO1xyXG4gICAgICAkc2NvcGUubG9nZ2VkSW4gPSB0cnVlO1xyXG4gICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnbG9naW4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gICRzY29wZS4kb24oJ3VwZGF0ZScsIGZ1bmN0aW9uIChfLCB1c2VyKSB7XHJcbiAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gICAgJHNjb3BlLmN1cnJlbnRVc2VyLmJpcnRoRGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5jdXJyZW50VXNlci5iaXJ0aERhdGUpO1xyXG4gICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAkKCcjbG9hZGluZy1pY29uJykuZmFkZU91dCgnc2xvdycpO1xyXG4gICAgfSwgMTAwMCk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS4kb24oJ2xvYWRpbmcnLCBmdW5jdGlvbiAoXywgdXNlcikge1xyXG4gICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgJCgnI2xvYWRpbmctaWNvbicpLnNob3coKTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLiRvbignbG9hZGVkJywgZnVuY3Rpb24gKF8sIHVzZXIpIHtcclxuICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgJCgnI2xvYWRpbmctaWNvbicpLmZhZGVPdXQoJ3Nsb3cnKTtcclxuICAgIH0sIDEwMDApO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZmlyZWJhc2VcclxuICAgICAgLmF1dGgoKVxyXG4gICAgICAuc2lnbk91dCgpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBTaWduLW91dCBzdWNjZXNzZnVsLlxyXG4gICAgICAgICRzY29wZS5sb2dnZWRJbiA9IGZhbHNlO1xyXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKTtcclxuICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnbG9nb3V0Jyk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAvLyBBbiBlcnJvciBoYXBwZW5lZC5cclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmZvcm1hdERhdGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgdmFyIG1vbnRocyA9IFtcclxuICAgICAgJ0phbicsXHJcbiAgICAgICdGZWInLFxyXG4gICAgICAnTWFyJyxcclxuICAgICAgJ0FwcicsXHJcbiAgICAgICdNYXknLFxyXG4gICAgICAnSnVuJyxcclxuICAgICAgJ0p1bCcsXHJcbiAgICAgICdBdWcnLFxyXG4gICAgICAnU2VwJyxcclxuICAgICAgJ09jdCcsXHJcbiAgICAgICdOb3YnLFxyXG4gICAgICAnRGVjJyxcclxuICAgIF07XHJcbiAgICBkYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgKyAnLScgKyBtb250aHNbZGF0ZS5nZXRNb250aCgpXSArICctJyArIGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuICB9O1xyXG5cclxuICBTdHJpbmcucHJvdG90eXBlLmNhcGl0YWxpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRoaXMuc2xpY2UoMSk7XHJcbiAgfTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignQXN0ZXJvaWRzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEdhbWVTdmMpIHtcclxuXHJcbiAgJHNjb3BlLmFubm91bmNlID0gZmFsc2U7XHJcbiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhc3Rlcm9pZHMtcGFnZScpO1xyXG4gIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICBjdHguZm9udCA9IFwiMzBweCBDb21pYyBTYW5zIE1TXCI7XHJcbiAgY3R4LmZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgY3R4LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgdmFyIHNob3RzID0ge307XHJcbiAgdmFyIGFzdGVyb2lkcyA9IHt9O1xyXG4gIHZhciBwb3dlcnVwcyA9IHt9O1xyXG4gIHZhciBleHBsb3Npb25zID0ge307XHJcbiAgdmFyIG1hcCA9IHt9O1xyXG4gIHZhciBzcGFjZXBpY3MgPSAxMDtcclxuICB2YXIgc3BhY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzcGFjZXBpY3MpO1xyXG4gIHZhciBwb3dlcnVwVHlwZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdzcGVlZCcsXHJcbiAgICAgIGFubm91bmNlbWVudDogJ01heCBTcGVlZCDih6cnLFxyXG4gICAgICBjeWNsZToge1xyXG4gICAgICAgIHJvd3M6IDEsXHJcbiAgICAgICAgY29sdW1uczogNCxcclxuICAgICAgICBzaXplOiBbMTQsIDM1XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgc3BhY2VzaGlwLm1heFNwZWVkICs9IDEwMDtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogJ2Nvb2xkb3duJyxcclxuICAgICAgYW5ub3VuY2VtZW50OiAnQ29vbGRvd24g4oepJyxcclxuICAgICAgY3ljbGU6IHtcclxuICAgICAgICByb3dzOiAxLFxyXG4gICAgICAgIGNvbHVtbnM6IDMsXHJcbiAgICAgICAgc2l6ZTogWzE3LCAxN10sXHJcbiAgICAgICAgaTogMCxcclxuICAgICAgICBkaXJlY3Rpb246IHRydWVcclxuICAgICAgfSxcclxuICAgICAgaW1nOiBuZXcgSW1hZ2UoKSxcclxuICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKHNwYWNlc2hpcCkge1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuY29vbGRvd24gPiAwKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAuY29vbGRvd25UaW1lIC09IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAncmFuZ2UnLFxyXG4gICAgICBhbm5vdW5jZW1lbnQ6ICdGaXJpbmcgUmFuZ2Ug4oenJyxcclxuICAgICAgY3ljbGU6IHtcclxuICAgICAgICByb3dzOiA0LFxyXG4gICAgICAgIGNvbHVtbnM6IDEsXHJcbiAgICAgICAgc2l6ZTogWzMwLCA4XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgc3BhY2VzaGlwLnJhbmdlICs9IDU7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdzaGllbGQnLFxyXG4gICAgICBhbm5vdW5jZW1lbnQ6ICdTaGllbGQnLFxyXG4gICAgICBjeWNsZToge1xyXG4gICAgICAgIHJvd3M6IDUsXHJcbiAgICAgICAgY29sdW1uczogMSxcclxuICAgICAgICBzaXplOiBbMTksIDE5XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgc3BhY2VzaGlwLnNoaWVsZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdudWtlJyxcclxuICAgICAgYW5ub3VuY2VtZW50OiAnTnVrZScsXHJcbiAgICAgIGN5Y2xlOiB7XHJcbiAgICAgICAgcm93czogMSxcclxuICAgICAgICBjb2x1bW5zOiA4LFxyXG4gICAgICAgIHNpemU6IFsxNSwgMTVdLFxyXG4gICAgICAgIGk6IDAsXHJcbiAgICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZzogbmV3IEltYWdlKCksXHJcbiAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbihzcGFjZXNoaXApIHtcclxuICAgICAgICBmb3IgKHZhciBpIGluIGFzdGVyb2lkcykge1xyXG4gICAgICAgICAgYXN0ZXJvaWRzW2ldLmV4cGxvZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3Bhd25Bc3Rlcm9pZHMoNSk7XHJcbiAgICAgIH1cclxuICAgIH0sLypcclxuICAgICdzaWRlX2Nhbm5vbnMnLFxyXG4gICAgJ2xhc2VyJyxcclxuICAgICdzaGllbGQnLFxyXG4gICAgJ2xpZmUnLFxyXG4gICAgJ21pc3NpbGVzJyxcclxuICAgICdudWtlJ1xyXG4gICAgKi9cclxuICBdO1xyXG4gIHBvd2VydXBUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHBvd2VydXAsIGksIGFycmF5KSB7XHJcbiAgICBhcnJheVtpXS5pbWcuc3JjID0gJ2FzdGVyb2lkcy8nICsgcG93ZXJ1cC5uYW1lICsgJy5wbmcnO1xyXG4gIH0pO1xyXG5cclxuICB2YXIgZXhwbG9zaW9uSW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICBleHBsb3Npb25JbWFnZS5zcmMgPSAnYXN0ZXJvaWRzL2V4cGxvc2lvbi5wbmcnO1xyXG5cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgbWFwW2Uua2V5Q29kZSB8fCBlLndoaWNoXSA9IHRydWU7XHJcbiAgfSx0cnVlKTtcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgIG1hcFtlLmtleUNvZGUgfHwgZS53aGljaF0gPSBmYWxzZTtcclxuICB9LHRydWUpO1xyXG5cclxuICAkc2NvcGUuaGlnaHNjb3JlID0gMDtcclxuXHJcbiAgZnVuY3Rpb24gZXZhbHVhdGVLZXlzKCkge1xyXG4gICAgaWYgKCRzY29wZS5wbGF5aW5nKSB7XHJcbiAgICAgIGlmIChtYXBbMzJdKSB7XHJcbiAgICAgICAgLy9TcGFjZVxyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuY29vbGRvd24gPT09IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5zaG9vdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobWFwWzM3XSkge1xyXG4gICAgICAgIC8vTGVmdCBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAucm90YXRpb24gPT09IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5yb3RhdGlvbiA9IDM2MDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnJvdGF0aW9uIC09IDM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXBbMzldKSB7XHJcbiAgICAgICAgLy9SaWdodCBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAucm90YXRpb24gPT09IDM2MCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnJvdGF0aW9uID0gMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnJvdGF0aW9uICs9IDM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXBbMzhdKSB7XHJcbiAgICAgICAgLy9VcCBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuc3BlZWQgPD0gc3BhY2VzaGlwLm1heFNwZWVkKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAuc3BlZWQgKz0gNTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5zcGVlZCA+IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5zcGVlZC0tO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobWFwWzQwXSkge1xyXG4gICAgICAgIC8vRG93biBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuc3BlZWQgPiAwKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAuc3BlZWQgLT0gMjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChtYXBbMzJdKSB7XHJcbiAgICAgICAgc3RhcnQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gU3BhY2VzaGlwKCkge1xyXG4gICAgdGhpcy53aWR0aCA9IDUwO1xyXG4gICAgdGhpcy5oZWlnaHQgPSA1MDtcclxuICAgIHRoaXMuc2hpZWxkID0gZmFsc2U7XHJcbiAgICB0aGlzLnJhbmdlID0gODA7XHJcbiAgICB0aGlzLmNhbm5vbiA9IHtcclxuICAgICAgeDogdGhpcy53aWR0aCAvIDIgLSA0LjUsXHJcbiAgICAgIHk6IHRoaXMuaGVpZ2h0IC8gMiAtIHRoaXMuaGVpZ2h0ICogMC4wNzgxMjVcclxuICAgIH07XHJcbiAgICB0aGlzLmNvb2xkb3duID0gMDtcclxuICAgIHRoaXMuY29vbGRvd25UaW1lID0gMjA7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gW1xyXG4gICAgICBjYW52YXMud2lkdGggLyAyIC0gdGhpcy53aWR0aCAvIDIsXHJcbiAgICAgIGNhbnZhcy5oZWlnaHQgLyAyIC0gdGhpcy5oZWlnaHQgLyAyXHJcbiAgICBdO1xyXG4gICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHRoaXMuaW1nLnNyYyA9ICdhc3Rlcm9pZHMvc3BhY2VzaGlwLnBuZyc7XHJcbiAgICB0aGlzLnNwZWVkID0gMDtcclxuICAgIHRoaXMubWF4U3BlZWQgPSAxMDAwO1xyXG4gICAgdGhpcy5hbmdsZSA9IDA7XHJcbiAgICB0aGlzLnJvdGF0aW9uID0gMDtcclxuXHJcbiAgICB0aGlzLnNob290ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuY29vbGRvd24gPSB0aGlzLmNvb2xkb3duVGltZTtcclxuICAgICAgdmFyIGlkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcclxuICAgICAgc2hvdHNbaWRdID0gbmV3IFNob3QoaWQsIHRoaXMpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMuc2hpZWxkKSB7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5hcmModGhpcy5wb3NpdGlvblswXSArIHRoaXMud2lkdGggLyAyLCB0aGlzLnBvc2l0aW9uWzFdICsgdGhpcy5oZWlnaHQgLyAyLCAzMCwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcInJnYigzNSwgMjM3LCA4NiwgMC41KVwiO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwicmdiKDY2LCAxNjgsIDM2LCAwLjgpXCI7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDU7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgIH1cclxuICAgICAgZm9yICh2YXIgaSBpbiBhc3Rlcm9pZHMpIHtcclxuICAgICAgICB2YXIgYXN0ZXJvaWQgPSBhc3Rlcm9pZHNbaV07XHJcbiAgICAgICAgaWYgKGhpdChhc3Rlcm9pZCwgdGhpcykpIHtcclxuICAgICAgICAgIGlmICh0aGlzLnNoaWVsZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNoaWVsZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhc3Rlcm9pZC5leHBsb2RlKCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2FtZU92ZXIoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5hbmdsZSA9IHRoaXMucm90YXRpb247XHJcbiAgICAgIGlmICh0aGlzLmNvb2xkb3duID4gMCkge1xyXG4gICAgICAgIHRoaXMuY29vbGRvd24tLTtcclxuICAgICAgfVxyXG4gICAgICBtb3ZlKHRoaXMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIFNob3QoaWQsIHNwYWNlc2hpcCkge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFtcclxuICAgICAgc3BhY2VzaGlwLnBvc2l0aW9uWzBdICsgc3BhY2VzaGlwLmNhbm5vbi54ICsgc3BhY2VzaGlwLmNhbm5vbi54ICogTWF0aC5jb3MoKHNwYWNlc2hpcC5yb3RhdGlvbiAtIDkwKSAqIE1hdGguUEkgLyAxODApLFxyXG4gICAgICBzcGFjZXNoaXAucG9zaXRpb25bMV0gKyBzcGFjZXNoaXAuY2Fubm9uLnkgKyBzcGFjZXNoaXAuY2Fubm9uLnkgKiBNYXRoLnNpbigoc3BhY2VzaGlwLnJvdGF0aW9uIC0gOTApICogTWF0aC5QSSAvIDE4MClcclxuICAgIF07XHJcbiAgICB0aGlzLndpZHRoID0gOTtcclxuICAgIHRoaXMuaGVpZ2h0ID0gMTU7XHJcbiAgICB0aGlzLmFuZ2xlID0gc3BhY2VzaGlwLmFuZ2xlO1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IHNwYWNlc2hpcC5yb3RhdGlvbjtcclxuICAgIHRoaXMuc3BlZWQgPSBzcGFjZXNoaXAuc3BlZWQgKyA1MDA7XHJcbiAgICB0aGlzLmxpZmVzcGFuID0gc3BhY2VzaGlwLnJhbmdlO1xyXG4gICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHRoaXMuaW1nLnNyYyA9ICdhc3Rlcm9pZHMvc2hvdC5wbmcnO1xyXG5cclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLmxpZmVzcGFuLS07XHJcbiAgICAgIG1vdmUodGhpcyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gQXN0ZXJvaWQoaWQpIHtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMud2lkdGggPSBNYXRoLnJhbmRvbSgpICogNTAgKyAyMDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy53aWR0aDtcclxuICAgIHRoaXMucG9zaXRpb24gPSBnZXRFbnRyeVBvc2l0aW9uKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIHRoaXMuYW5nbGUgPSBNYXRoLnJhbmRvbSgpICogMzYwO1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IE1hdGgucmFuZG9tKCkgKiAzNjA7XHJcbiAgICB0aGlzLnJvdGF0aW9uU3BlZWQgPSBNYXRoLnJhbmRvbSgpICogNiAtIDM7XHJcbiAgICB0aGlzLnNwZWVkID0gTWF0aC5yYW5kb20oKSAqIDMwMCArIDI7XHJcbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgdGhpcy5pbWcuc3JjID0gJ2FzdGVyb2lkcy9hc3Rlcm9pZCcgKyAoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNikgKyAxKSArICcucG5nJztcclxuXHJcbiAgICB0aGlzLmV4cGxvZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgZXhwbG9zaW9uc1t0aGlzLmlkXSA9IG5ldyBFeHBsb3Npb24odGhpcyk7XHJcbiAgICAgIHJldHVybiBkZWxldGUgYXN0ZXJvaWRzW3RoaXMuaWRdO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5yb3RhdGlvbiArPSB0aGlzLnJvdGF0aW9uU3BlZWQ7XHJcbiAgICAgIGlmICh0aGlzLnJvdGF0aW9uID4gMzYwKSB7XHJcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IHRoaXMucm90YXRpb24gLSAzNjA7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5yb3RhdGlvbiA8IDApIHtcclxuICAgICAgICB0aGlzLnJvdGF0aW9uID0gMzYwICsgdGhpcy5yb3RhdGlvbjtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKHZhciBpIGluIHNob3RzKSB7XHJcbiAgICAgICAgdmFyIHNob3QgPSBzaG90c1tpXTtcclxuICAgICAgICBpZiAoaGl0KHNob3QsIHRoaXMpKSB7XHJcbiAgICAgICAgICB0aGlzLmV4cGxvZGUoKTtcclxuICAgICAgICAgIHZhciBwb2ludHMgPSBNYXRoLmZsb29yKChzaG90LnNwZWVkIC0gNTAwKSAvIDEwICsgNzAgLSB0aGlzLndpZHRoKTtcclxuICAgICAgICAgIGlmIChNYXRoLmZsb29yKChwb2ludHMgKyAkc2NvcGUuc2NvcmUpIC8gMTAwKSA+IE1hdGguZmxvb3IoJHNjb3BlLnNjb3JlIC8gMTAwKSkge1xyXG4gICAgICAgICAgICBzcGF3blBvd2VydXAoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICRzY29wZS5zY29yZSArPSBwb2ludHM7XHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICBkZWxldGUgc2hvdHNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIG1vdmUodGhpcyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gRXhwbG9zaW9uKG9iamVjdCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFtvYmplY3QucG9zaXRpb25bMF0sIG9iamVjdC5wb3NpdGlvblsxXV07XHJcbiAgICB0aGlzLndpZHRoID0gb2JqZWN0LndpZHRoO1xyXG4gICAgdGhpcy5oZWlnaHQgPSBvYmplY3QuaGVpZ2h0O1xyXG4gICAgdGhpcy5zcGVlZCA9IDA7XHJcbiAgICB0aGlzLmFuZ2xlID0gTWF0aC5yYW5kb20oKSAqIDM2MDtcclxuICAgIHRoaXMuY3ljbGUgPSB7XHJcbiAgICAgIHJvd3M6IDYsXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHNpemU6IFsyNTYsIDI1Nl0sXHJcbiAgICAgIGk6IDAsXHJcbiAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgfTtcclxuICAgIHRoaXMubGlmZXNwYW4gPSA0NztcclxuICAgIHRoaXMuaW1nID0gZXhwbG9zaW9uSW1hZ2U7XHJcblxyXG4gICAgdGhpcy5tb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMubGlmZXNwYW4tLTtcclxuICAgICAgbW92ZSh0aGlzKTtcclxuICAgICAgaWYgKHRoaXMuY3ljbGUuZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5jeWNsZS5pKys7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5jeWNsZS5pLS07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBQb3dlcnVwKGlkKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnBvd2VydXAgPSBwb3dlcnVwVHlwZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG93ZXJ1cFR5cGVzLmxlbmd0aCldO1xyXG4gICAgdGhpcy5jeWNsZSA9IHRoaXMucG93ZXJ1cC5jeWNsZTtcclxuICAgIHRoaXMubGlmZXNwYW4gPSAxMDAwO1xyXG4gICAgaWYgKHRoaXMuY3ljbGUuc2l6ZVsxXSA+IHRoaXMuY3ljbGUuc2l6ZVswXSkge1xyXG4gICAgICB0aGlzLmhlaWdodCA9IDQwO1xyXG4gICAgICB0aGlzLndpZHRoID0gTWF0aC5yb3VuZCh0aGlzLmhlaWdodCAvIHRoaXMuY3ljbGUuc2l6ZVsxXSAqIHRoaXMuY3ljbGUuc2l6ZVswXSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLndpZHRoID0gNDA7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5yb3VuZCh0aGlzLndpZHRoIC8gdGhpcy5jeWNsZS5zaXplWzBdICogdGhpcy5jeWNsZS5zaXplWzFdKTtcclxuICAgIH1cclxuICAgIHRoaXMucG9zaXRpb24gPSBnZXRFbnRyeVBvc2l0aW9uKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIHRoaXMuaW1nID0gdGhpcy5wb3dlcnVwLmltZztcclxuICAgIHRoaXMuYW5nbGUgPSBNYXRoLnJhbmRvbSgpICogMzYwO1xyXG4gICAgdGhpcy5zcGVlZCA9IE1hdGgucmFuZG9tKCkgKiAxNTAgKyA1MDtcclxuICAgIHZhciBkZWxheSA9IDU7XHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMubGlmZXNwYW4gPD0gMCkge1xyXG4gICAgICAgIHJldHVybiBkZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF07XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGhpdChzcGFjZXNoaXAsIHRoaXMpKSB7XHJcbiAgICAgICAgJHNjb3BlLmFubm91bmNlID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuYW5ub3VuY2VtZW50ID0gdGhpcy5wb3dlcnVwLmFubm91bmNlbWVudDtcclxuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICRzY29wZS5hbm5vdW5jZSA9IGZhbHNlO1xyXG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIHRoaXMucG93ZXJ1cC5hY3RpdmF0ZShzcGFjZXNoaXApO1xyXG4gICAgICAgIHJldHVybiBkZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF07XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5saWZlc3Bhbi0tO1xyXG4gICAgICBtb3ZlKHRoaXMpO1xyXG4gICAgICBpZiAoZGVsYXkgPD0gMCkge1xyXG4gICAgICAgIGlmICh0aGlzLmN5Y2xlLmRpcmVjdGlvbikge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZS5pKys7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuY3ljbGUuaS0tO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxheSA9IDU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGVsYXktLTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1vdmUob2JqZWN0KSB7XHJcbiAgICAgb2JqZWN0LnBvc2l0aW9uWzBdICs9IG9iamVjdC5zcGVlZCAvIDEwMCAqIE1hdGguY29zKChvYmplY3QuYW5nbGUgLSA5MCkgKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICBvYmplY3QucG9zaXRpb25bMV0gKz0gb2JqZWN0LnNwZWVkIC8gMTAwICogTWF0aC5zaW4oKG9iamVjdC5hbmdsZSAtIDkwKSAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgIGlmIChvYmplY3QucG9zaXRpb25bMF0gPiBjYW52YXMud2lkdGgpIHtcclxuICAgICAgIG9iamVjdC5wb3NpdGlvblswXSA9IC1vYmplY3Qud2lkdGg7XHJcbiAgICAgfSBlbHNlIGlmIChvYmplY3QucG9zaXRpb25bMF0gPCAtb2JqZWN0LndpZHRoKSB7XHJcbiAgICAgICBvYmplY3QucG9zaXRpb25bMF0gPSBjYW52YXMud2lkdGg7XHJcbiAgICAgfVxyXG4gICAgIGlmIChvYmplY3QucG9zaXRpb25bMV0gPiBjYW52YXMuaGVpZ2h0KSB7XHJcbiAgICAgICBvYmplY3QucG9zaXRpb25bMV0gPSAtb2JqZWN0LmhlaWdodDtcclxuICAgICB9IGVsc2UgaWYgKG9iamVjdC5wb3NpdGlvblsxXSA8IC1vYmplY3QuaGVpZ2h0KSB7XHJcbiAgICAgICBvYmplY3QucG9zaXRpb25bMV0gPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgIH1cclxuICAgICBjdHguc2F2ZSgpO1xyXG4gICAgIGN0eC50cmFuc2xhdGUob2JqZWN0LnBvc2l0aW9uWzBdLCBvYmplY3QucG9zaXRpb25bMV0pO1xyXG4gICAgIGN0eC50cmFuc2xhdGUob2JqZWN0LndpZHRoIC8gMiwgb2JqZWN0LmhlaWdodCAvIDIpO1xyXG4gICAgIGN0eC5yb3RhdGUob2JqZWN0LnJvdGF0aW9uICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgaWYgKG9iamVjdC5jeWNsZSkge1xyXG4gICAgICAgdmFyIGNvbHVtbiA9IG9iamVjdC5jeWNsZS5pICUgb2JqZWN0LmN5Y2xlLmNvbHVtbnM7XHJcbiAgICAgICB2YXIgcm93ID0gTWF0aC5mbG9vcihvYmplY3QuY3ljbGUuaSAvIG9iamVjdC5jeWNsZS5jb2x1bW5zKTtcclxuICAgICAgIGN0eC5kcmF3SW1hZ2Uob2JqZWN0LmltZywgb2JqZWN0LmN5Y2xlLnNpemVbMF0gKiBjb2x1bW4sIG9iamVjdC5jeWNsZS5zaXplWzFdICogcm93LCBvYmplY3QuY3ljbGUuc2l6ZVswXSwgb2JqZWN0LmN5Y2xlLnNpemVbMV0sIC1vYmplY3Qud2lkdGggLyAyLCAtb2JqZWN0LmhlaWdodCAvIDIsIG9iamVjdC53aWR0aCwgb2JqZWN0LmhlaWdodCk7XHJcblxyXG4gICAgICAgaWYgKG9iamVjdC5jeWNsZS5pIDw9IDApIHtcclxuICAgICAgICAgb2JqZWN0LmN5Y2xlLmkgPSAwO1xyXG4gICAgICAgICBvYmplY3QuY3ljbGUuZGlyZWN0aW9uID0gdHJ1ZTtcclxuICAgICAgIH0gZWxzZSBpZiAob2JqZWN0LmN5Y2xlLmkgPj0gb2JqZWN0LmN5Y2xlLmNvbHVtbnMgKiBvYmplY3QuY3ljbGUucm93cykge1xyXG4gICAgICAgICBvYmplY3QuY3ljbGUuaSA9IG9iamVjdC5jeWNsZS5jb2x1bW5zICogb2JqZWN0LmN5Y2xlLnJvd3MgLSAxO1xyXG4gICAgICAgICBvYmplY3QuY3ljbGUuZGlyZWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICB9XHJcbiAgICAgfSBlbHNlIHtcclxuICAgICAgIGN0eC5kcmF3SW1hZ2Uob2JqZWN0LmltZywgLW9iamVjdC53aWR0aCAvIDIsIC1vYmplY3QuaGVpZ2h0IC8gMiwgb2JqZWN0LndpZHRoLCBvYmplY3QuaGVpZ2h0KTtcclxuICAgICB9XHJcbiAgICAgY3R4LnJlc3RvcmUoKTtcclxuICB9XHJcblxyXG4gIHZhciBzcGFjZXNoaXA7XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXJ0KCkge1xyXG4gICAgJHNjb3BlLnBsYXlpbmcgPSB0cnVlO1xyXG4gICAgJHNjb3BlLnNjb3JlID0gMDtcclxuICAgIHNwYWNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc3BhY2VwaWNzKTtcclxuICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgIHNwYWNlc2hpcCA9IG5ldyBTcGFjZXNoaXAoKTtcclxuICAgICRzY29wZS5zY29yZSA9IDA7XHJcbiAgICBzcGF3bkFzdGVyb2lkcyg1KTtcclxuICAgIGF1dG9TcGF3bigpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0RW50cnlQb3NpdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICB2YXIgZ3JpZFggPSBNYXRoLnJhbmRvbSgpICogMjtcclxuICAgIHZhciBncmlkWSA9IE1hdGgucmFuZG9tKCkgKiAyO1xyXG4gICAgdmFyIHgsIHkgPSAwO1xyXG4gICAgaWYgKGdyaWRYID49IDEpIHtcclxuICAgICAgeCA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMud2lkdGg7XHJcbiAgICAgIGlmICh5ID49IDEpIHtcclxuICAgICAgICB5ID0gMCAtIGhlaWdodDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB5ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgeSA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICBpZiAoZ3JpZFkgPj0gMSkge1xyXG4gICAgICAgIHggPSAwIC0gd2lkdGg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeCA9IGNhbnZhcy53aWR0aDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFt4LCB5XTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGhpdChvYmplY3QxLCBvYmplY3QyKSB7XHJcbiAgICByZXR1cm4gKG9iamVjdDEucG9zaXRpb25bMF0gPCBvYmplY3QyLnBvc2l0aW9uWzBdICsgb2JqZWN0Mi53aWR0aCkgJiZcclxuICAgICAgICAgICAob2JqZWN0Mi5wb3NpdGlvblswXSA8IG9iamVjdDEucG9zaXRpb25bMF0gKyBvYmplY3QxLndpZHRoKSAmJlxyXG4gICAgICAgICAgIChvYmplY3QxLnBvc2l0aW9uWzFdIDwgb2JqZWN0Mi5wb3NpdGlvblsxXSArIG9iamVjdDIuaGVpZ2h0KSAmJlxyXG4gICAgICAgICAgIChvYmplY3QyLnBvc2l0aW9uWzFdIDwgb2JqZWN0MS5wb3NpdGlvblsxXSArIG9iamVjdDEuaGVpZ2h0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGF1dG9TcGF3bigpIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhhc3Rlcm9pZHMpLmxlbmd0aCA8IDIwMCkge1xyXG4gICAgICB2YXIgaWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDApO1xyXG4gICAgICBhc3Rlcm9pZHNbaWRdID0gbmV3IEFzdGVyb2lkKGlkKTtcclxuICAgIH1cclxuICAgIGlmICgkc2NvcGUucGxheWluZykge1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGF1dG9TcGF3bigpO1xyXG4gICAgICB9LCBzcGF3bkludGVydmFsKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3Bhd25JbnRlcnZhbCgpIHtcclxuICAgIGlmICgkc2NvcGUuc2NvcmUgPCAxMDAwKSB7XHJcbiAgICAgIHJldHVybiAxMDAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCAyMDAwKSB7XHJcbiAgICAgIHJldHVybiA5MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDMwMDApIHtcclxuICAgICAgcmV0dXJuIDgwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgNDAwMCkge1xyXG4gICAgICByZXR1cm4gNzAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCA1MDAwKSB7XHJcbiAgICAgIHJldHVybiA2MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDYwMDApIHtcclxuICAgICAgcmV0dXJuIDUwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgNzAwMCkge1xyXG4gICAgICByZXR1cm4gNDAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCA4MDAwKSB7XHJcbiAgICAgIHJldHVybiAzMDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gMjAwO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3Bhd25Bc3Rlcm9pZHMoYW1vdW50KSB7XHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICBkbyB7XHJcbiAgICAgIHZhciBpZCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XHJcbiAgICAgIGFzdGVyb2lkc1tpZF0gPSBuZXcgQXN0ZXJvaWQoaWQpO1xyXG4gICAgfSB3aGlsZSAoaSsrIDw9IGFtb3VudCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzcGF3blBvd2VydXAoKSB7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMocG93ZXJ1cHMpLmxlbmd0aCA8IDMpIHtcclxuICAgICAgdmFyIGlkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcclxuICAgICAgcG93ZXJ1cHNbaWRdID0gbmV3IFBvd2VydXAoaWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2FtZU92ZXIoKSB7XHJcbiAgICAkc2NvcGUucGxheWluZyA9IGZhbHNlO1xyXG4gICAgZm9yICh2YXIgaSBpbiBhc3Rlcm9pZHMpIHtcclxuICAgICAgYXN0ZXJvaWRzW2ldLmV4cGxvZGUoKTtcclxuICAgIH1cclxuICAgIHNob3RzID0ge307XHJcbiAgICBpZiAoJHNjb3BlLmxvZ2dlZEluKSB7XHJcbiAgICAgIGlmICgkc2NvcGUuY3VycmVudFVzZXIuaGlnaHNjb3JlLmFzdGVyb2lkcyA8ICRzY29wZS5zY29yZSkge1xyXG4gICAgICAgICRzY29wZS5jdXJyZW50VXNlci5oaWdoc2NvcmUuYXN0ZXJvaWRzID0gJHNjb3BlLnNjb3JlO1xyXG4gICAgICAgIEdhbWVTdmMuc2V0SGlnaHNjb3JlKCdhc3Rlcm9pZHMnLCAkc2NvcGUuY3VycmVudFVzZXIuX2lkLCAkc2NvcGUuc2NvcmUpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoJHNjb3BlLmhpZ2hzY29yZSA8ICRzY29wZS5zY29yZSkge1xyXG4gICAgICAgICRzY29wZS5oaWdoc2NvcmUgPSAkc2NvcGUuc2NvcmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG5cdC8vIFN0YXJ0IGxpc3RlbmluZyB0byByZXNpemUgZXZlbnRzIGFuZFxyXG5cdC8vIGRyYXcgY2FudmFzLlxyXG5cclxuXHRmdW5jdGlvbiBpbml0aWFsaXplKCkge1xyXG5cdFx0Ly8gUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXIgdG9cclxuXHRcdC8vIGNhbGwgdGhlIHJlc2l6ZUNhbnZhcygpIGZ1bmN0aW9uIGVhY2ggdGltZVxyXG5cdFx0Ly8gdGhlIHdpbmRvdyBpcyByZXNpemVkLlxyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUNhbnZhcywgZmFsc2UpO1xyXG5cclxuXHJcblx0XHQvLyBEcmF3IGNhbnZhcyBib3JkZXIgZm9yIHRoZSBmaXJzdCB0aW1lLlxyXG5cdFx0cmVzaXplQ2FudmFzKCk7XHJcblx0fVxyXG5cdC8vIFJ1bnMgZWFjaCB0aW1lIHRoZSBET00gd2luZG93IHJlc2l6ZSBldmVudCBmaXJlcy5cclxuXHQvLyBSZXNldHMgdGhlIGNhbnZhcyBkaW1lbnNpb25zIHRvIG1hdGNoIHdpbmRvdyxcclxuXHQvLyB0aGVuIGRyYXdzIHRoZSBuZXcgYm9yZGVycyBhY2NvcmRpbmdseS5cclxuXHRmdW5jdGlvbiByZXNpemVDYW52YXMoKSB7XHJcbiAgICBjb25zb2xlLmxvZyh3aW5kb3cuaW5uZXJXaWR0aCk7XHJcblx0XHRjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHRcdGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAoY2FudmFzLndpZHRoIDw9IDc2OCA/IDUwIDogMTA1KTtcclxuXHR9XHJcblxyXG5cdGluaXRpYWxpemUoKTtcclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XHJcblxyXG4gIHZhciB0YWxseSA9IDA7XHJcbiAgdmFyIGRpcmVjdGlvbiA9IHRydWU7XHJcblxyXG4gIGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICBmb3IgKHZhciBpIGluIHNob3RzKSB7XHJcbiAgICAgIGlmIChzaG90c1tpXS5saWZlc3BhbiA8PSAwKSB7XHJcbiAgICAgICAgZGVsZXRlIHNob3RzW2ldO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNob3RzW2ldLm1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChpIGluIGFzdGVyb2lkcykge1xyXG4gICAgICBhc3Rlcm9pZHNbaV0ubW92ZSgpO1xyXG4gICAgfVxyXG4gICAgZm9yIChpIGluIHBvd2VydXBzKSB7XHJcbiAgICAgIHBvd2VydXBzW2ldLm1vdmUoKTtcclxuICAgIH1cclxuICAgIGZvciAoaSBpbiBleHBsb3Npb25zKSB7XHJcbiAgICAgIGlmIChleHBsb3Npb25zW2ldLmxpZmVzcGFuIDw9IDApIHtcclxuICAgICAgICBkZWxldGUgZXhwbG9zaW9uc1tpXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBleHBsb3Npb25zW2ldLm1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXZhbHVhdGVLZXlzKCk7XHJcbiAgICBpZiAoJHNjb3BlLnBsYXlpbmcpIHtcclxuICAgICAgc3BhY2VzaGlwLm1vdmUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBncmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCBjYW52YXMud2lkdGgsIDApO1xyXG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoJzAnLCAncmdiKCcgKyBNYXRoLmZsb29yKDI1NiAtIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcpJyk7XHJcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMC4yNScsICdyZ2IoJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCcwLjUnLCAncmdiKCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDI1NiAtIDI1NiAqIHRhbGx5IC8gMTAwKSArICcpJyk7XHJcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMC43NScsICdyZ2IoJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCcxLjAnLCAncmdiKCcgKyBNYXRoLmZsb29yKDI1NiAtIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcpJyk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBncmFkaWVudDtcclxuICAgICAgY3R4LmZvbnQ9JzYwcHggTW9ub3Rvbic7XHJcbiAgICAgIGN0eC5maWxsVGV4dCgnQXN0ZXJvaWRzJywgY2FudmFzLndpZHRoIC8gMiAtIGN0eC5tZWFzdXJlVGV4dCgnQXN0ZXJvaWRzJykud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgIGN0eC5mb250PScyMHB4IEFsZHJpY2gnO1xyXG4gICAgICBjdHguZmlsbFRleHQoJ1ByZXNzIHNwYWNlIHRvIHN0YXJ0JywgY2FudmFzLndpZHRoIC8gMiAtIGN0eC5tZWFzdXJlVGV4dCgnUHJlc3Mgc3BhY2UgdG8gc3RhcnQnKS53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyICsgMjApO1xyXG4gICAgICBjdHguZmlsbFRleHQoJ0Rlc2lnbmVkIGFuZCBkZXZlbG9wZWQgYnkgTGF1cmVudCBEZWJhY2tlcicsIGNhbnZhcy53aWR0aCAvIDIgLSBjdHgubWVhc3VyZVRleHQoJ0Rlc2lnbmVkIGFuZCBkZXZlbG9wZWQgYnkgTGF1cmVudCBEZWJhY2tlcicpLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAtIDMwKTtcclxuICAgIH1cclxuICAgIHRhbGx5ICs9IGRpcmVjdGlvbiA/IDEgOiAtMTtcclxuICAgIGlmICh0YWxseSA+IDEwMCkge1xyXG4gICAgICB0YWxseSA9IDEwMDtcclxuICAgICAgZGlyZWN0aW9uID0gZmFsc2U7XHJcbiAgICB9IGVsc2UgaWYgKHRhbGx5IDwgMCkge1xyXG4gICAgICB0YWxseSA9IDA7XHJcbiAgICAgIGRpcmVjdGlvbiA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XHJcbiAgfVxyXG5cclxuICAkc2NvcGUuc3BhY2UgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGJhY2tncm91bmRJbWFnZTogJ3VybChcImFzdGVyb2lkcy9zcGFjZScgKyBzcGFjZSArICcuanBnXCIpJ1xyXG4gICAgfTtcclxuICB9O1xyXG5cclxuXHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdCdWJibGVzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuXHJcbiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWJibGVzLXBhZ2UnKTtcclxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgdmFyIGJ1YmJsZXMgPSBbXTtcclxuICB2YXIgY29sb3JzID0gWycjZmZjMzAwJywnI2ZmNTczMycsJyNjNzAwMzknLCcjOTAwYzNlJywnIzU3MTg0NSddO1xyXG5cclxuICBmdW5jdGlvbiBCdWJibGUoKSB7XHJcbiAgICB0aGlzLmxpZmVzcGFuID0gMDtcclxuICAgIHRoaXMucmFkaXVzID0gMTtcclxuICAgIHRoaXMuZXhwYW5kaW5nID0gdHJ1ZTtcclxuICAgIHRoaXMuc3BlZWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAzKTtcclxuICAgIHRoaXMuY2lyY3VtZmVyZW5jZSA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDUwKSArIDU7XHJcbiAgICB0aGlzLm1heFJhZGl1cyA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDIwMCkgKyAyMDtcclxuICAgIHRoaXMueCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aCk7XHJcbiAgICB0aGlzLnkgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0KTtcclxuICAgIHRoaXMudnggPSAoTWF0aC5yYW5kb20oKSA+PSAwLjUgPyAxIDogLTEpO1xyXG4gICAgdGhpcy52eSA9IChNYXRoLnJhbmRvbSgpID49IDAuNSA/IDEgOiAtMSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkcmF3KCkge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgYnViYmxlcy5mb3JFYWNoKGZ1bmN0aW9uKGJ1YmJsZSkge1xyXG4gICAgICB2YXIgY29sb3IgPSBjb2xvcnNbTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoICogYnViYmxlLnJhZGl1cyAvIGJ1YmJsZS5tYXhSYWRpdXMpXTtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguYXJjKGJ1YmJsZS54LCBidWJibGUueSwgYnViYmxlLnJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gY29sb3JzW01hdGgucm91bmQoY29sb3JzLmxlbmd0aCAqIGJ1YmJsZS5yYWRpdXMgLyBidWJibGUubWF4UmFkaXVzKV07XHJcbiAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yc1tjb2xvcnMubGVuZ3RoIC0gTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoICogYnViYmxlLnJhZGl1cyAvIGJ1YmJsZS5tYXhSYWRpdXMpXTtcclxuICAgICAgY3R4LmxpbmVXaWR0aCA9IGJ1YmJsZS5jaXJjdW1mZXJlbmNlICogYnViYmxlLnJhZGl1cyAvIGJ1YmJsZS5tYXhSYWRpdXM7XHJcbiAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZmlsdGVyQnViYmxlcygpIHtcclxuICAgIGJ1YmJsZXMucHVzaChuZXcgQnViYmxlKCkpO1xyXG4gICAgYnViYmxlcyA9IGJ1YmJsZXMuZmlsdGVyKGZ1bmN0aW9uIChidWJibGUpIHtcclxuICAgICAgaWYgKGJ1YmJsZS5yYWRpdXMgPT09IGJ1YmJsZS5tYXhSYWRpdXMpIHtcclxuICAgICAgICBidWJibGUuZXhwYW5kaW5nID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgYnViYmxlLnggKz0gYnViYmxlLnZ4ICogYnViYmxlLnNwZWVkO1xyXG4gICAgICBidWJibGUueSArPSBidWJibGUudnkgKiBidWJibGUuc3BlZWQ7XHJcbiAgICAgIGJ1YmJsZS5yYWRpdXMgKz0gKGJ1YmJsZS5leHBhbmRpbmcgPyAxIDogLTEpO1xyXG4gICAgICByZXR1cm4gYnViYmxlLnJhZGl1cyA+IDA7XHJcbiAgICB9KTtcclxuICAgIGRyYXcoKTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmaWx0ZXJCdWJibGVzKTtcclxuICB9XHJcblxyXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShmaWx0ZXJCdWJibGVzKTtcclxuXHJcblxyXG5cdChmdW5jdGlvbigpIHtcclxuXHJcblx0XHQvLyBTdGFydCBsaXN0ZW5pbmcgdG8gcmVzaXplIGV2ZW50cyBhbmRcclxuXHRcdC8vIGRyYXcgY2FudmFzLlxyXG5cdFx0aW5pdGlhbGl6ZSgpO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcblx0XHRcdC8vIFJlZ2lzdGVyIGFuIGV2ZW50IGxpc3RlbmVyIHRvXHJcblx0XHRcdC8vIGNhbGwgdGhlIHJlc2l6ZUNhbnZhcygpIGZ1bmN0aW9uIGVhY2ggdGltZVxyXG5cdFx0XHQvLyB0aGUgd2luZG93IGlzIHJlc2l6ZWQuXHJcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVDYW52YXMsIGZhbHNlKTtcclxuXHJcblx0XHRcdC8vIERyYXcgY2FudmFzIGJvcmRlciBmb3IgdGhlIGZpcnN0IHRpbWUuXHJcblx0XHRcdHJlc2l6ZUNhbnZhcygpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gUnVucyBlYWNoIHRpbWUgdGhlIERPTSB3aW5kb3cgcmVzaXplIGV2ZW50IGZpcmVzLlxyXG5cdFx0Ly8gUmVzZXRzIHRoZSBjYW52YXMgZGltZW5zaW9ucyB0byBtYXRjaCB3aW5kb3csXHJcblx0XHQvLyB0aGVuIGRyYXdzIHRoZSBuZXcgYm9yZGVycyBhY2NvcmRpbmdseS5cclxuXHRcdGZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpIHtcclxuXHRcdFx0Y2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAoY2FudmFzLndpZHRoIDw9IDc2OCA/IDU1IDogMTExKTtcclxuXHRcdH1cclxuXHJcblx0fSkoKTtcclxuXHJcblxyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdDaGFyYWRlc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XHJcblx0JHNjb3BlLnNlbGVjdFdvcmQgPSBjYXRlZ29yeSA9PiB7XHJcblx0XHQkc2NvcGUud29yZCA9XHJcblx0XHRcdCRzY29wZS5jaGFyYWRlc1tjYXRlZ29yeV1bXHJcblx0XHRcdFx0TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogJHNjb3BlLmNoYXJhZGVzW2NhdGVnb3J5XS5sZW5ndGgpXHJcblx0XHRcdF07XHJcblx0XHRjb25zb2xlLmxvZygkc2NvcGUud29yZCk7XHJcblx0fTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignQ29udGFjdEN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBFbWFpbFN2Yykge1xyXG5cclxuICAkc2NvcGUub3B0aW9ucyA9IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJTcGFtXCIsXHJcbiAgICAgIHRleHQ6IFwiSSBhbSBhIHNwYW0gYm90IGFuZCBhdXRvbWF0aWNhbGx5IGNoZWNrIHRoZSBmaXJzdCBvcHRpb24gSSBmaW5kIVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIk9wcG9ydHVuaXRpeVwiLFxyXG4gICAgICB0ZXh0OiBcIllvdSBzZWVtIHRvIGhhdmUgdGhlIHNraWxscyBJIHNlZWssIEknZCBsaWtlIHRvIHRhbGsgYWJvdXQgc29tZSBvcHBvcnR1bml0aWVzLlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIlJlc3VtZVwiLFxyXG4gICAgICB0ZXh0OiBcIkkgZGlnIHRoZSByZXN1bWUsIGhvdyBkaWQgeW91IG1ha2UgaXQ/XCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiT3RoZXJcIixcclxuICAgICAgdGV4dDogXCJTdW10aW4gZWxzZSFcIlxyXG4gICAgfVxyXG5cclxuICBdO1xyXG5cclxuICAkc2NvcGUuY29udGFjdCA9IHtcclxuICAgIGVtYWlsOiBcIlwiLFxyXG4gICAgbmFtZTogXCJcIixcclxuICAgIHBob25lOiBcIlwiLFxyXG4gICAgYWJvdXQ6IFwiXCIsXHJcbiAgICBtZXNzYWdlOiBcIlwiXHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbmQgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5zZW5kaW5nID0gdHJ1ZTtcclxuICAgIGNvbnNvbGUubG9nKCdoZXJlJyk7XHJcbiAgICBFbWFpbFN2Yy5zZW5kKHtcclxuICAgICAgXCJlbWFpbFwiOiAkc2NvcGUuY29udGFjdC5lbWFpbCxcclxuICAgICAgXCJuYW1lXCI6ICRzY29wZS5jb250YWN0Lm5hbWUsXHJcbiAgICAgIFwicGhvbmVcIjogICRzY29wZS5jb250YWN0LnBob25lLFxyXG4gICAgICBcImFib3V0XCI6ICRzY29wZS5jb250YWN0LmFib3V0LFxyXG4gICAgICBcIm1lc3NhZ2VcIjogJHNjb3BlLmNvbnRhY3QubWVzc2FnZVxyXG4gICAgfSlcclxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICRzY29wZS5zZW50ID0gdHJ1ZTtcclxuICAgICAgY29uc29sZS5sb2coXCJTVUNDRVNTLiBzdGF0dXM9JWQsIHRleHQ9JXNcIiwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS50ZXh0KTtcclxuICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICRzY29wZS5zZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRkFJTEVELiBlcnJvcj1cIiwgZXJyKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdFeHBlcmllbmNlQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuXHJcbiAgJHNjb3BlLmdldFNraWxsID0gZnVuY3Rpb24oc2tpbGxDb2RlKSB7XHJcbiAgICBpZiAoISRzY29wZS5za2lsbHMpIHJldHVybjtcclxuICAgIHJldHVybiAkc2NvcGUuc2tpbGxzLmZpbmQoZnVuY3Rpb24oc2tpbGwpIHtcclxuICAgICAgcmV0dXJuIHNraWxsLmNvZGUgPT09IHNraWxsQ29kZTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdIb2JiaWVzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICR3aW5kb3cpIHtcclxuXHJcbiAgJHNjb3BlLmhvYmJ5U2VsZWN0b3JWaXNpYmxlID0gZmFsc2U7XHJcblxyXG4gICQuZ2V0SlNPTignaHR0cHM6Ly93d3cucmVkZGl0LmNvbS91c2VyL2JlbGdvY2FuYWRpYW4vYWJvdXQvLmpzb24nLCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgIC8vY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS5zZWxlY3RlZEhvYmJ5ID0gJHNjb3BlLmhvYmJpZXNbMF07XHJcblxyXG4gICRzY29wZS5zZWxlY3RIb2JieSA9IGZ1bmN0aW9uIChob2JieSkge1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkSG9iYnkgPSBob2JieTtcclxuICAgICRzY29wZS5ob2JieVNlbGVjdG9yVmlzaWJsZSA9IGZhbHNlO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zaG93SG9iYnkgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xyXG4gICAgaWYgKCF2YWx1ZS5pbWFnZXMpIHJldHVybiBmYWxzZTtcclxuICAgIHJldHVybiB2YWx1ZS5pbWFnZXMubGVuZ3RoID4gMDtcclxuICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdMZW1taW5nc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBHYW1lU3ZjKSB7XHJcblxyXG4gIHZhciBMRUZUID0gMDtcclxuICB2YXIgUklHSFQgPSAxO1xyXG5cclxuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xlbW1pbmdzLXBhZ2UnKTtcclxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgdmFyIGxlbW1pbmdzSW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICBsZW1taW5nc0ltYWdlLnNyYyA9ICdsZW1taW5ncy9sZW1taW5ncy5wbmcnO1xyXG4gIHZhciBkZWNvckltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgZGVjb3JJbWFnZS5zcmMgPSAnbGVtbWluZ3MvZGVjb3IucG5nJztcclxuICB2YXIgbGVtbWluZ3MgPSB7fTtcclxuICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xyXG5cclxuICB2YXIgYWN0aW9ucyA9IHtcclxuICAgIHdhbGs6IHtcclxuICAgICAgc3RhcnQ6IFswLCAwXSxcclxuICAgICAgZW5kOiBbMzIwLCAyMF0sXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgaHVoOiB7XHJcbiAgICAgIHN0YXJ0OiBbMzIwLCAwXSxcclxuICAgICAgZW5kOiBbNjQwLCAyMF0sXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IHRydWVcclxuICAgIH0sXHJcbiAgICBmYWxsOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgODBdLFxyXG4gICAgICBlbmQ6IFsxNjAsIDEwMF0sXHJcbiAgICAgIGNvbHVtbnM6IDQsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZmx5OiB7XHJcbiAgICAgIHN0YXJ0OiBbMTYwLCA4MF0sXHJcbiAgICAgIGVuZDogWzQ4MCwgMTEwXSxcclxuICAgICAgY29sdW1uczogOCxcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBzdG9wOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMTIwXSxcclxuICAgICAgZW5kOiBbNjQwLCAxNDBdLFxyXG4gICAgICBjb2x1bW5zOiAxNixcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBjbGltYjoge1xyXG4gICAgICBzdGFydDogWzAsIDE2MF0sXHJcbiAgICAgIGVuZDogWzY0MCwgMTg1XSxcclxuICAgICAgY29sdW1uczogMTYsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgYnVpbGQ6IHtcclxuICAgICAgc3RhcnQ6IFswLCAyMDBdLFxyXG4gICAgICBlbmQ6IFs2NDAsIDIyNV0sXHJcbiAgICAgIGNvbHVtbnM6IDE2LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHB1bmNoOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMjQwXSxcclxuICAgICAgZW5kOiBbNjQwLCAzMDBdLFxyXG4gICAgICBjb2x1bW5zOiAxNixcclxuICAgICAgcm93czogMixcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBkaWc6IHtcclxuICAgICAgc3RhcnQ6IFswLCAzMjBdLFxyXG4gICAgICBlbmQ6IFszMjAsIDM0NV0sXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIExlbW1pbmcoaW5pdCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoY2FudmFzLndpZHRoIC0gMjAwKSkgKyAxMDAsIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChjYW52YXMuaGVpZ2h0IC0gMjAwKSkgKyAxMDBdO1xyXG4gICAgdGhpcy5kaXJlY3Rpb24gPSBNYXRoLnJhbmRvbSgpICogMiA+IDEgPyBMRUZUIDogUklHSFQ7XHJcbiAgICB0aGlzLmFjdCA9IGZ1bmN0aW9uKGFjdGlvbikge1xyXG4gICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbnNbYWN0aW9uXTtcclxuICAgICAgdGhpcy5jeWNsZSA9IDA7XHJcbiAgICAgIHRoaXMud2lkdGggPSAodGhpcy5hY3Rpb24uZW5kWzBdIC0gdGhpcy5hY3Rpb24uc3RhcnRbMF0pIC8gdGhpcy5hY3Rpb24uY29sdW1ucztcclxuICAgICAgdGhpcy5oZWlnaHQgPSAodGhpcy5hY3Rpb24uZW5kWzFdIC0gdGhpcy5hY3Rpb24uc3RhcnRbMV0gLSAoMjAgKiAodGhpcy5hY3Rpb24ucm93cyAtIDEpKSkgLyB0aGlzLmFjdGlvbi5yb3dzO1xyXG4gICAgICB0aGlzLmFuaW1hdGlvbiA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5hY3QoaW5pdCk7XHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uWzBdLCB0aGlzLnBvc2l0aW9uWzFdKTtcclxuICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSBMRUZUKSB7XHJcbiAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgY29sdW1uID0gdGhpcy5jeWNsZSAlIHRoaXMuYWN0aW9uLmNvbHVtbnM7XHJcbiAgICAgIHZhciByb3cgPSBNYXRoLmZsb29yKHRoaXMuY3ljbGUgLyB0aGlzLmFjdGlvbi5jb2x1bW5zKTtcclxuICAgICAgY3R4LmRyYXdJbWFnZShsZW1taW5nc0ltYWdlLCAodGhpcy53aWR0aCAqIGNvbHVtbikgKyB0aGlzLmFjdGlvbi5zdGFydFswXSwgKCh0aGlzLmhlaWdodCArIDIwKSAqIHJvdykgKyB0aGlzLmFjdGlvbi5zdGFydFsxXSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIDAsIHRoaXMud2lkdGggKiAyLCB0aGlzLmhlaWdodCAqIDIpO1xyXG4gICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICBpZiAodGhpcy5hY3Rpb24ucmV2ZXJzZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZSsrO1xyXG4gICAgICAgICAgaWYgKHRoaXMuY3ljbGUgPj0gdGhpcy5hY3Rpb24uY29sdW1ucyAqIHRoaXMuYWN0aW9uLnJvd3MpIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSAhdGhpcy5hbmltYXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuY3ljbGUtLTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZS0tO1xyXG4gICAgICAgICAgaWYgKHRoaXMuY3ljbGUgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gIXRoaXMuYW5pbWF0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLmN5Y2xlID0gMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5jeWNsZSsrO1xyXG4gICAgICAgIGlmICh0aGlzLmN5Y2xlID49IHRoaXMuYWN0aW9uLmNvbHVtbnMgKiB0aGlzLmFjdGlvbi5yb3dzKSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBIYXRjaCgpIHtcclxuICAgIHRoaXMucG9zaXRpb24gPSBbMjAsIDIwXTtcclxuICAgIHRoaXMuYWN0aW9uID0ge1xyXG4gICAgICBzdGFydDogWzAsIDBdLFxyXG4gICAgICBlbmQ6IFs4MiwgNTAwXSxcclxuICAgICAgY29sdW1uczogMSxcclxuICAgICAgcm93czogMTBcclxuICAgIH1cclxuICAgIHRoaXMud2lkdGggPSAodGhpcy5hY3Rpb24uZW5kWzBdIC0gdGhpcy5hY3Rpb24uc3RhcnRbMF0pIC8gdGhpcy5hY3Rpb24uY29sdW1ucztcclxuICAgIHRoaXMuaGVpZ2h0ID0gKHRoaXMuYWN0aW9uLmVuZFsxXSAtIHRoaXMuYWN0aW9uLnN0YXJ0WzFdKSAvIHRoaXMuYWN0aW9uLnJvd3M7XHJcbiAgICB0aGlzLmN5Y2xlID0gMDtcclxuICAgIHRoaXMub3BlbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMucG9zaXRpb25bMF0sIHRoaXMucG9zaXRpb25bMV0pO1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMud2lkdGggLyAyLCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICB2YXIgY29sdW1uLCByb3c7XHJcbiAgICAgIGlmIChzdGFydGVkKSB7XHJcbiAgICAgICAgY29sdW1uID0gdGhpcy5jeWNsZSAlIHRoaXMuYWN0aW9uLmNvbHVtbnM7XHJcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcih0aGlzLmN5Y2xlIC8gdGhpcy5hY3Rpb24uY29sdW1ucyk7XHJcbiAgICAgICAgaWYgKHRoaXMuY3ljbGUgPCA5KSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlKys7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbHVtbiA9IDA7XHJcbiAgICAgICAgcm93ID0gMDtcclxuICAgICAgfVxyXG4gICAgICBjdHguZHJhd0ltYWdlKGRlY29ySW1hZ2UsICh0aGlzLndpZHRoICogY29sdW1uKSArIHRoaXMuYWN0aW9uLnN0YXJ0WzBdLCAodGhpcy5oZWlnaHQgKiByb3cpICsgdGhpcy5hY3Rpb24uc3RhcnRbMV0gLSAxLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgMCwgMCwgdGhpcy53aWR0aCAqIDIsIHRoaXMuaGVpZ2h0ICogMik7XHJcbiAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzcGF3bkxlbW1pbmcoKSB7XHJcbiAgICBPYmplY3Qua2V5cyhhY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGFjdGlvbikge1xyXG4gICAgICBsZW1taW5nc1tNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDApXSA9IG5ldyBMZW1taW5nKGFjdGlvbik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG5cdGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcblx0XHQvLyBSZWdpc3RlciBhbiBldmVudCBsaXN0ZW5lciB0b1xyXG5cdFx0Ly8gY2FsbCB0aGUgcmVzaXplQ2FudmFzKCkgZnVuY3Rpb24gZWFjaCB0aW1lXHJcblx0XHQvLyB0aGUgd2luZG93IGlzIHJlc2l6ZWQuXHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplQ2FudmFzLCBmYWxzZSk7XHJcblx0XHQvLyBEcmF3IGNhbnZhcyBib3JkZXIgZm9yIHRoZSBmaXJzdCB0aW1lLlxyXG5cdFx0cmVzaXplQ2FudmFzKCk7XHJcblx0fVxyXG5cdC8vIFJ1bnMgZWFjaCB0aW1lIHRoZSBET00gd2luZG93IHJlc2l6ZSBldmVudCBmaXJlcy5cclxuXHQvLyBSZXNldHMgdGhlIGNhbnZhcyBkaW1lbnNpb25zIHRvIG1hdGNoIHdpbmRvdyxcclxuXHQvLyB0aGVuIGRyYXdzIHRoZSBuZXcgYm9yZGVycyBhY2NvcmRpbmdseS5cclxuXHRmdW5jdGlvbiByZXNpemVDYW52YXMoKSB7XHJcblx0XHRjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHRcdGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAoY2FudmFzLndpZHRoIDw9IDc2OCA/IDUwIDogMTA1KTtcclxuXHR9XHJcblxyXG5cdGluaXRpYWxpemUoKTtcclxuICBzcGF3bkxlbW1pbmcoKTtcclxuICBsZXQgaGF0Y2ggPSBuZXcgSGF0Y2goKVxyXG4gIGRyYXcoKTtcclxuXHJcbiAgZnVuY3Rpb24gZHJhdygpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIGlmICghc3RhcnRlZCkge1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5mb250PSc0MHB4IE1vbm90b24nO1xyXG4gICAgICBjdHgubGluZVdpZHRoID0gJzEwJztcclxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ2JsdWUnO1xyXG4gICAgICBjdHgucmVjdCgxNSwgY2FudmFzLmhlaWdodCAtIDQ1LCBjdHgubWVhc3VyZVRleHQoJ1N0YXJ0Jykud2lkdGggKyAyMCwgY3R4Lm1lYXN1cmVUZXh0KCdTdGFydCcpLmhlaWdodCArIGNhbnZhcy5oZWlnaHQgLSA0NSk7XHJcbiAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgIGN0eC5maWxsVGV4dCgnU3RhcnQnLCAyMCwgY2FudmFzLmhlaWdodCAtIDUwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gbGVtbWluZ3MpIHtcclxuICAgICAgICBsZW1taW5nc1tpXS5tb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGhhdGNoLm9wZW4oKTtcclxuICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgZHJhdygpO1xyXG4gICAgfSwgMTUwKTtcclxuICB9XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0xpc3RzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgQ2F0ZWdvcmllc1N2Yykge1xyXG5cclxuICAkc2NvcGUuc2hvd0NhdGVnb3J5ID0gdHJ1ZTtcclxuXHJcbiAgJHNjb3BlLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBDYXRlZ29yaWVzU3ZjLmdldENhdGVnb3JpZXMoKVxyXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgJHNjb3BlLnRhc2tzID0gW107XHJcbiAgICAgIGZvciAodmFyIGkgaW4gJHNjb3BlLmNhdGVnb3JpZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBqIGluICRzY29wZS5jYXRlZ29yaWVzW2ldLnRhc2tzKSB7XHJcbiAgICAgICAgICAkc2NvcGUudGFza3MucHVzaCh7XHJcbiAgICAgICAgICAgIFwiY2F0ZWdvcnlcIjogJHNjb3BlLmNhdGVnb3JpZXNbaV0ubmFtZSxcclxuICAgICAgICAgICAgXCJ0YXNrXCI6ICRzY29wZS5jYXRlZ29yaWVzW2ldLnRhc2tzW2pdLm5hbWVcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdENhdGVnb3J5ID0gZnVuY3Rpb24oY2F0ZWdvcnkpIHtcclxuICAgICRzY29wZS5zZWxlY3RlZENhdGVnb3J5ID0gY2F0ZWdvcnk7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRUYXNrcyA9IFtdO1xyXG4gICAgJHNjb3BlLnNlbGVjdGFibGVUYXNrcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSBpbiAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcykge1xyXG4gICAgICAkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLnB1c2goJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0pO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLnNob3dDYXRlZ29yeSA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmVudGVyZWRDYXRlZ29yeSA9ICcnO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5uZXdDYXRlZ29yeSA9IGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5jYXRlZ29yaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICgkc2NvcGUuY2F0ZWdvcmllc1tpXS5uYW1lID09PSBjYXRlZ29yeSkge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RDYXRlZ29yeSgkc2NvcGUuY2F0ZWdvcmllc1tpXSk7XHJcbiAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWZvdW5kKSB7XHJcbiAgICAgIENhdGVnb3JpZXNTdmMuYWRkQ2F0ZWdvcnkoe1xyXG4gICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeVxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgICAgICRzY29wZS5pbml0KCk7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdENhdGVnb3J5KGNhdGVnb3J5KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuZW50ZXJlZENhdGVnb3J5ID0gJyc7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLm5ld1Rhc2sgPSBmdW5jdGlvbiAodGFzaykge1xyXG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzKSB7XHJcbiAgICAgIGlmICgkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXS5uYW1lID09PSB0YXNrKSB7XHJcbiAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RUYXNrKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFmb3VuZCkge1xyXG4gICAgICBDYXRlZ29yaWVzU3ZjLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkubmFtZSwge1xyXG4gICAgICAgIHRhc2s6IHRhc2tcclxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MucHVzaCh7IG5hbWU6IHRhc2sgfSk7XHJcbiAgICAgICAgJHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsICRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzWyRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzLmxlbmd0aCAtIDFdKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuZW50ZXJlZFRhc2sgPSAnJztcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VsZWN0VGFzayA9IGZ1bmN0aW9uICh0YXNrKSB7XHJcbiAgICAkc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcywgdGFzayk7XHJcbiAgICAkc2NvcGUucmVtb3ZlVGFzaygkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLCB0YXNrKTtcclxuICAgICRzY29wZS5lbnRlcmVkVGFzayA9ICcnO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS51bnNlbGVjdFRhc2sgPSBmdW5jdGlvbiAodGFzaykge1xyXG4gICAgJHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGFibGVUYXNrcywgdGFzayk7XHJcbiAgICAkc2NvcGUucmVtb3ZlVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcywgdGFzayk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmFkZFRhc2sgPSBmdW5jdGlvbih0YXNrTGlzdCwgdGFzaykge1xyXG4gICAgdGFza0xpc3QucHVzaCh0YXNrKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUucmVtb3ZlVGFzayA9IGZ1bmN0aW9uKHRhc2tMaXN0LCB0YXNrKSB7XHJcbiAgICB0YXNrTGlzdC5zcGxpY2UodGFza0xpc3QuaW5kZXhPZih0YXNrKSwgMSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnN0YXJ0UHJpb3JpdGl6aW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICBDYXRlZ29yaWVzU3ZjLnNldFByaW9yaXR5TGlzdCgkc2NvcGUuc2VsZWN0ZWRUYXNrcyk7XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL3ByaW9yaXRpemUnKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0UXVlc3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoISRzY29wZS5zZWxlY3RlZFRhc2tzKSByZXR1cm4gJyc7XHJcbiAgICB2YXIgY291bnRlciA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gJHNjb3BlLnNlbGVjdGVkVGFza3MubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xyXG4gICAgICBjb3VudGVyICs9IGk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY291bnRlcjtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJTdmMpIHtcclxuICAvLyBJbml0aWFsaXplIHRoZSBGaXJlYmFzZVVJIFdpZGdldCB1c2luZyBGaXJlYmFzZS5cclxuICB2YXIgdWkgPSBuZXcgZmlyZWJhc2V1aS5hdXRoLkF1dGhVSShmaXJlYmFzZS5hdXRoKCkpO1xyXG5cclxuICAkc2NvcGUuJG9uKCdsb2dvdXQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIHVpLnJlc2V0KCk7XHJcbiAgICBzdGFydFVJKCk7XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXJ0VUkoKSB7XHJcbiAgICB1aS5zdGFydCgnI2ZpcmViYXNldWktYXV0aC1jb250YWluZXInLCB7XHJcbiAgICAgIGNhbGxiYWNrczoge1xyXG4gICAgICAgIHNpZ25JblN1Y2Nlc3M6IGZ1bmN0aW9uIChjdXJyZW50VXNlciwgY3JlZGVudGlhbCwgcmVkaXJlY3RVcmwpIHtcclxuICAgICAgICAgIC8vIE5vIHJlZGlyZWN0LlxyXG4gICAgICAgICAgZmlyZWJhc2VcclxuICAgICAgICAgICAgLmF1dGgoKVxyXG4gICAgICAgICAgICAuY3VycmVudFVzZXIuZ2V0SWRUb2tlbih0cnVlKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaWRUb2tlbikge1xyXG4gICAgICAgICAgICAgIFVzZXJTdmMuYXV0aGVudGljYXRlKHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBjdXJyZW50VXNlci5kaXNwbGF5TmFtZSxcclxuICAgICAgICAgICAgICAgIGVtYWlsOiBjdXJyZW50VXNlci5lbWFpbCxcclxuICAgICAgICAgICAgICAgIHBob3RvVVJMOiBjdXJyZW50VXNlci5waG90b1VSTCxcclxuICAgICAgICAgICAgICAgIGVtYWlsVmVyaWZpZWQ6IGN1cnJlbnRVc2VyLmVtYWlsVmVyaWZpZWQsXHJcbiAgICAgICAgICAgICAgICBpZFRva2VuOiBpZFRva2VuLFxyXG4gICAgICAgICAgICAgIH0pLnRoZW4oXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAkKCcjbW9kYWwtbG9naW4nKS5tb2RhbCgnaGlkZScpO1xyXG4gICAgICAgICAgICAgICAgICAvLyRsb2NhdGlvbi5wYXRoKCcvJyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3BvcHVwJywge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdMb2dpbiBGYWlsZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhbGVydC1kYW5nZXInLFxyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIC8vIC4uLlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgLy8gSGFuZGxlIGVycm9yXHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIHNpZ25JbkZhaWx1cmUgY2FsbGJhY2sgbXVzdCBiZSBwcm92aWRlZCB0byBoYW5kbGUgbWVyZ2UgY29uZmxpY3RzIHdoaWNoXHJcbiAgICAgICAgLy8gb2NjdXIgd2hlbiBhbiBleGlzdGluZyBjcmVkZW50aWFsIGlzIGxpbmtlZCB0byBhbiBhbm9ueW1vdXMgdXNlci5cclxuICAgICAgICBzaWduSW5GYWlsdXJlOiBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgIC8vIEZvciBtZXJnZSBjb25mbGljdHMsIHRoZSBlcnJvci5jb2RlIHdpbGwgYmVcclxuICAgICAgICAgIC8vICdmaXJlYmFzZXVpL2Fub255bW91cy11cGdyYWRlLW1lcmdlLWNvbmZsaWN0Jy5cclxuICAgICAgICAgIGlmIChlcnJvci5jb2RlICE9ICdmaXJlYmFzZXVpL2Fub255bW91cy11cGdyYWRlLW1lcmdlLWNvbmZsaWN0Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBUaGUgY3JlZGVudGlhbCB0aGUgdXNlciB0cmllZCB0byBzaWduIGluIHdpdGguXHJcbiAgICAgICAgICB2YXIgY3JlZCA9IGVycm9yLmNyZWRlbnRpYWw7XHJcbiAgICAgICAgICAvLyBDb3B5IGRhdGEgZnJvbSBhbm9ueW1vdXMgdXNlciB0byBwZXJtYW5lbnQgdXNlciBhbmQgZGVsZXRlIGFub255bW91c1xyXG4gICAgICAgICAgLy8gdXNlci5cclxuICAgICAgICAgIC8vIC4uLlxyXG4gICAgICAgICAgLy8gRmluaXNoIHNpZ24taW4gYWZ0ZXIgZGF0YSBpcyBjb3BpZWQuXHJcbiAgICAgICAgICByZXR1cm4gZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDcmVkZW50aWFsKGNyZWQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdWlTaG93bjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgLy8gVGhlIHdpZGdldCBpcyByZW5kZXJlZC5cclxuICAgICAgICAgIC8vIEhpZGUgdGhlIGxvYWRlci5cclxuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkZXInKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHNpZ25JblN1Y2Nlc3NVcmw6ICcvaG9tZScsXHJcbiAgICAgIHNpZ25Jbk9wdGlvbnM6IFtcclxuICAgICAgICAvL2ZpcmViYXNlLmF1dGguRW1haWxBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQsXHJcbiAgICAgICAgZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQsXHJcbiAgICAgICAgZmlyZWJhc2UuYXV0aC5GYWNlYm9va0F1dGhQcm92aWRlci5QUk9WSURFUl9JRCxcclxuICAgICAgXSxcclxuXHJcbiAgICAgIC8vIFdpbGwgdXNlIHBvcHVwIGZvciBJRFAgUHJvdmlkZXJzIHNpZ24taW4gZmxvdyBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0LCByZWRpcmVjdC5cclxuICAgICAgc2lnbkluRmxvdzogJ3BvcHVwJyxcclxuICAgICAgLy8gT3RoZXIgY29uZmlnIG9wdGlvbnMuLi5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhcnRVSSgpO1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkZmlsdGVyLCBQb3N0c1N2Yykge1xyXG5cclxuICAkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICgkc2NvcGUucG9zdEJvZHkpIHtcclxuICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcclxuICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHlcclxuICAgICAgfSkudGhlbihmdW5jdGlvbiAocG9zdCkge1xyXG4gICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGw7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIFBvc3RzU3ZjLmZldGNoKClcclxuICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICRzY29wZS5wb3N0cyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS4kb24oJ3dzOm5ld19wb3N0JywgZnVuY3Rpb24gKF8sIHBvc3QpIHtcclxuICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICBQb3N0c1N2Yy5nZXRQb3N0KHBvc3QpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUHJpb3JpdGl6ZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIENhdGVnb3JpZXNTdmMpIHtcclxuXHJcbiAgJHNjb3BlLnByaW9yaXR5TGlzdCA9IENhdGVnb3JpZXNTdmMuZ2V0UHJpb3JpdHlMaXN0KCk7XHJcblxyXG4gIGlmICghJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgJGxvY2F0aW9uLnBhdGgoJy9saXN0cycpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbiA9IDE7XHJcbiAgICAkc2NvcGUuY3VycmVudFF1ZXN0aW9uID0gMTtcclxuICAgICRzY29wZS5kb25lID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAkc2NvcGUubWFrZUNob2ljZSA9IGZ1bmN0aW9uKGNob2ljZSkge1xyXG4gICAgZm9yICh2YXIgaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIGlmICgkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkID09PSAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbikge1xyXG4gICAgICAgICRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlID0gY2hvaWNlID09PSAxID8gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZSA6ICRzY29wZS5wcmlvcml0eUxpc3RbaV0uc2Vjb25kQ2hvaWNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24gPT09ICRzY29wZS5jdXJyZW50UXVlc3Rpb24pIHtcclxuICAgICAgJHNjb3BlLmN1cnJlbnRRdWVzdGlvbiA9ICRzY29wZS5jdXJyZW50UXVlc3Rpb24gPT09ICRzY29wZS5wcmlvcml0eUxpc3QubGVuZ3RoID8gMSA6ICRzY29wZS5jdXJyZW50UXVlc3Rpb24gKyAxO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24gPSAkc2NvcGUuY3VycmVudFF1ZXN0aW9uO1xyXG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICBmb3IgKGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgPT09ICcnKSB7XHJcbiAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWZvdW5kKSB7XHJcbiAgICAgICQoJyNwcmlvcml0aXplQ2hvaWNlcycpLmhpZGUoMzAwKTtcclxuICAgICAgJHNjb3BlLmRvbmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZXRCdXR0b25WYWx1ZSA9IGZ1bmN0aW9uKGNob2ljZSkge1xyXG4gICAgaWYgKCEkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLnByaW9yaXR5TGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZCA9PT0gJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gY2hvaWNlID09PSAxID8gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZSA6ICRzY29wZS5wcmlvcml0eUxpc3RbaV0uc2Vjb25kQ2hvaWNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdFF1ZXN0aW9uID0gZnVuY3Rpb24ocXVlc3Rpb24pIHtcclxuICAgICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uID0gcXVlc3Rpb247XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmdldEZpbHRlcmVkUHJpb3JpdHlMaXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoISRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICRzY29wZS5wcmlvcml0eUxpc3RcclxuICAgICAgLnNvcnQoZnVuY3Rpb24oYSwgYil7IHJldHVybiBhLmlkLWIuaWQ7IH0pXHJcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24ocXVlc3Rpb24pIHsgcmV0dXJuIHF1ZXN0aW9uLmNob2ljZSAhPT0gJycgfHwgcXVlc3Rpb24uaWQgPT09ICRzY29wZS5jdXJyZW50UXVlc3Rpb247IH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZXRDaG9pY2VzTWFkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCEkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHZhciBjaG9pY2VzTWFkZSA9IDA7XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlICE9PSAnJykge1xyXG4gICAgICAgIGNob2ljZXNNYWRlKys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjaG9pY2VzTWFkZTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0QnV0dG9uQ2xhc3MgPSBmdW5jdGlvbihjaG9pY2UpIHtcclxuICAgIGlmICghJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQgPT09ICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uKSB7XHJcbiAgICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlID09PSAnJykge1xyXG4gICAgICAgICAgcmV0dXJuICdidG4tcHJpbWFyeSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaG9pY2UgPT09IDEpIHtcclxuICAgICAgICAgIHJldHVybiAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmZpcnN0Q2hvaWNlID09PSAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSA/ICdidG4tc3VjY2VzcycgOiAnYnRuLWRhbmdlcic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLnNlY29uZENob2ljZSA9PT0gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgPyAnYnRuLXN1Y2Nlc3MnIDogJ2J0bi1kYW5nZXInO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5zaG93Q2hvaWNlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJCgnI3ByaW9yaXRpemVDaG9pY2VzJykuc2hvdygxMDAwKTtcclxuICAgICQoJyNyZXZpZXdDaG9pY2VzJykuaGlkZSgpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5jaGFydENsaWNrID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gICAgaWYgKCAkc2NvcGUuY2hhcnQgKSB7XHJcbiAgICAgIC8vIERpZmZlcmVudCBtZXRob2RzIGRlcGVuZGluZyBvbiBjaGFydCB0eXBlXHJcbiAgICAgIC8vY29uc29sZS5sb2coICRzY29wZS5jaGFydC5nZXRQb2ludHNBdEV2ZW50KCBldmVudCApICk7IC8vIGZvciBQb2ludHNcclxuICAgICAgY29uc29sZS5sb2coICRzY29wZS5jaGFydC5nZXRTZWdtZW50c0F0RXZlbnQoIGV2ZW50ICkgKTsgLy8gZm9yIFNlZ21lbnRzXHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNob3dSZXN1bHRzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgJHNjb3BlLmRhdGEgPSBbXTtcclxuICAgICRzY29wZS5vcHRpb25zID0ge1xyXG4gICAgICAvLyBTZXRzIHRoZSBjaGFydCB0byBiZSByZXNwb25zaXZlXHJcbiAgICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcblxyXG4gICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIHNob3VsZCBzaG93IGEgc3Ryb2tlIG9uIGVhY2ggc2VnbWVudFxyXG4gICAgICBzZWdtZW50U2hvd1N0cm9rZSA6IHRydWUsXHJcblxyXG4gICAgICAvL1N0cmluZyAtIFRoZSBjb2xvdXIgb2YgZWFjaCBzZWdtZW50IHN0cm9rZVxyXG4gICAgICBzZWdtZW50U3Ryb2tlQ29sb3IgOiAnI2ZmZicsXHJcblxyXG4gICAgICAvL051bWJlciAtIFRoZSB3aWR0aCBvZiBlYWNoIHNlZ21lbnQgc3Ryb2tlXHJcbiAgICAgIHNlZ21lbnRTdHJva2VXaWR0aCA6IDIsXHJcblxyXG4gICAgICAvL051bWJlciAtIFRoZSBwZXJjZW50YWdlIG9mIHRoZSBjaGFydCB0aGF0IHdlIGN1dCBvdXQgb2YgdGhlIG1pZGRsZVxyXG4gICAgICBwZXJjZW50YWdlSW5uZXJDdXRvdXQgOiAwLCAvLyBUaGlzIGlzIDAgZm9yIFBpZSBjaGFydHNcclxuXHJcbiAgICAgIC8vTnVtYmVyIC0gQW1vdW50IG9mIGFuaW1hdGlvbiBzdGVwc1xyXG4gICAgICBhbmltYXRpb25TdGVwcyA6IDEwMCxcclxuXHJcbiAgICAgIC8vU3RyaW5nIC0gQW5pbWF0aW9uIGVhc2luZyBlZmZlY3RcclxuICAgICAgYW5pbWF0aW9uRWFzaW5nIDogJ2Vhc2VPdXRCb3VuY2UnLFxyXG5cclxuICAgICAgLy9Cb29sZWFuIC0gV2hldGhlciB3ZSBhbmltYXRlIHRoZSByb3RhdGlvbiBvZiB0aGUgRG91Z2hudXRcclxuICAgICAgYW5pbWF0ZVJvdGF0ZSA6IHRydWUsXHJcblxyXG4gICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgc2NhbGluZyB0aGUgRG91Z2hudXQgZnJvbSB0aGUgY2VudHJlXHJcbiAgICAgIGFuaW1hdGVTY2FsZSA6IGZhbHNlLFxyXG5cclxuICAgICAgLy9TdHJpbmcgLSBBIGxlZ2VuZCB0ZW1wbGF0ZVxyXG4gICAgICBsZWdlbmRUZW1wbGF0ZSA6ICc8aDMgY2xhc3M9XCJ0Yy1jaGFydC1qcy1sZWdlbmRcIiBzdHlsZT1cInBhZGRpbmc6NXB4XCI+PCUgZm9yICh2YXIgaT0wOyBpPHNlZ21lbnRzLmxlbmd0aDsgaSsrKXslPjxkaXYgY2xhc3M9XCJsYWJlbFwiIHN0eWxlPVwiZmxvYXQ6bGVmdDttYXJnaW46NXB4O2JhY2tncm91bmQtY29sb3I6PCU9c2VnbWVudHNbaV0uZmlsbENvbG9yJT5cIj48JWlmKHNlZ21lbnRzW2ldLmxhYmVsKXslPjwlPXNlZ21lbnRzW2ldLmxhYmVsJT48JX0lPjwvZGl2PjwlfSU+PC9oMz4nXHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgaSBpbiBDYXRlZ29yaWVzU3ZjLmNob2ljZXMpIHtcclxuICAgICAgQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzID0gMDtcclxuICAgICAgZm9yICh2YXIgaiBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgICAgaWYgKENhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS5uYW1lID09PSAkc2NvcGUucHJpb3JpdHlMaXN0W2pdLmNob2ljZSkge1xyXG4gICAgICAgICAgQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzKys7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBDYXRlZ29yaWVzU3ZjLmNob2ljZXMuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBhLnZvdGVzIDwgYi52b3RlczsgfSk7XHJcbiAgICBmb3IgKGkgaW4gQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzKSB7XHJcbiAgICAgICRzY29wZS5kYXRhLnB1c2goe1xyXG4gICAgICAgIHZhbHVlOiBDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMsXHJcbiAgICAgICAgbGFiZWw6IENhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS5uYW1lXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgJCgnI3ByaW9yaXRpemVSZXN1bHQnKS5oaWRlKCk7XHJcbiAgICAkKCcjcHJpb3JpdGl6ZUNob2ljZXMnKS5oaWRlKCk7XHJcbiAgICAkKCcjcHJpb3JpdHlSZXN1bHRzJykuc2hvdygxMDAwKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUHJvZmlsZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJTdmMpIHtcclxuXHJcbiAgaWYgKCEkc2NvcGUuY3VycmVudFVzZXIpIHtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgICQoJyNzZXgtaW5kaWNhdG9yJykub2Zmc2V0KHsgbGVmdDogKCRzY29wZS5jdXJyZW50VXNlci5nZW5kZXIuc2V4IC8gMjAwICogJCgnI3NleCcpLndpZHRoKCkpICsgJCgnI3NleCcpLm9mZnNldCgpLmxlZnQgfSk7XHJcbiAgICAkKCcjaWRlbnRpdHktaW5kaWNhdG9yJykub2Zmc2V0KHsgbGVmdDogKCRzY29wZS5jdXJyZW50VXNlci5nZW5kZXIuaWRlbnRpdHkgLyAyMDAgKiAkKCcjaWRlbnRpdHknKS53aWR0aCgpKSArICQoJyNpZGVudGl0eScpLm9mZnNldCgpLmxlZnQgfSk7XHJcbiAgfVxyXG5cclxuICAkc2NvcGUuc2V4ZXMgPSBbXHJcbiAgICAnTWFsZScsXHJcbiAgICAnRnRNIE1hbGUnLFxyXG4gICAgJ0ludGVyc2V4JyxcclxuICAgICdNdEYgRmVtYWxlJyxcclxuICAgICdGZW1hbGUnXHJcbiAgXTtcclxuICAkc2NvcGUuaWRlbnRpdGllcyA9IFtcclxuICAgICdNYW4nLFxyXG4gICAgJ0JpZ2VuZGVyJyxcclxuICAgICdQYW5nZW5kZXInLFxyXG4gICAgJ0FnZW5kZXInLFxyXG4gICAgJ1BvbHlnZW5kZXInLFxyXG4gICAgJ0dlbmRlcmZsdWlkJyxcclxuICAgICdHZW5kZXJxdWVlcicsXHJcbiAgICAnUXVlZXInLFxyXG4gICAgJ1dvbWFuJ1xyXG4gIF07XHJcblxyXG4gICRzY29wZS5kYXRlT3B0aW9ucyA9IHtcclxuICAgIG1heERhdGU6IG5ldyBEYXRlKCksXHJcbiAgICBtaW5EYXRlOiBuZXcgRGF0ZSgxOTAwLCAxLCAxKSxcclxuICAgIGluaXREYXRlOiBuZXcgRGF0ZSgyMDAwLCAxLCAxKSxcclxuICAgIGRhdGVwaWNrZXJNb2RlOiAneWVhcidcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2VuZGVyID0gZnVuY3Rpb24oYXJyYXksIHBlcmNlbnRhZ2UpIHtcclxuICAgIHJldHVybiBhcnJheVtNYXRoLnJvdW5kKHBlcmNlbnRhZ2UgLyAyMDAgKiAoYXJyYXkubGVuZ3RoIC0gMSkpXTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc3RhcnRTbGlkZXIgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgfTtcclxuICAkc2NvcGUuZHJhZ1NsaWRlciA9IGZ1bmN0aW9uKGV2ZW50LCB1aSwgdHlwZSkge1xyXG4gICAgJHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlclt0eXBlXSA9IE1hdGgucm91bmQoKCQoJyMnICsgdHlwZSArICctaW5kaWNhdG9yJykub2Zmc2V0KCkubGVmdCAtICQoJyMnICsgdHlwZSkub2Zmc2V0KCkubGVmdCkgLyAoJCgnIycgKyB0eXBlKS53aWR0aCgpIC0gJCgnIycgKyB0eXBlICsgJy1pbmRpY2F0b3InKS53aWR0aCgpKSAqIDIwMCk7XHJcbiAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgfTtcclxuICAkc2NvcGUuc3RvcFNsaWRlciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICB9O1xyXG5cclxuICAkc2NvcGUudXNlcm5hbWVUb2dnbGUgPSB0cnVlO1xyXG4gICRzY29wZS5wYXNzd29yZFRvZ2dsZSA9IHRydWU7XHJcblxyXG4gICRzY29wZS50b2dnbGVVc2VybmFtZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLnVzZXJuYW1lVG9nZ2xlID0gISRzY29wZS51c2VybmFtZVRvZ2dsZTtcclxuICAgICRzY29wZS5uZXdVc2VybmFtZSA9ICRzY29wZS5jdXJyZW50VXNlci51c2VybmFtZTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUudG9nZ2xlUGFzc3dvcmQgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5uZXdQYXNzd29yZCA9IG51bGw7XHJcbiAgICAkc2NvcGUuY29uZmlybVBhc3N3b3JkID0gbnVsbDtcclxuICAgICRzY29wZS5wYXNzd29yZFRvZ2dsZSA9ICEkc2NvcGUucGFzc3dvcmRUb2dnbGU7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmNoZWNrUGFzc3dvcmQgPSBmdW5jdGlvbiAocGFzc3dvcmQpIHtcclxuICAgIGlmIChwYXNzd29yZCkge1xyXG4gICAgICB2YXIgdXNlciA9ICRzY29wZS5jdXJyZW50VXNlci5faWQ7XHJcbiAgICAgIFVzZXJTdmMuY2hlY2tQYXNzd29yZCh1c2VyLCBwYXNzd29yZClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgJHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb3JpZ2luYWxCZyA9ICQoXCIucGFzc3dvcmRcIikuY3NzKFwiYmFja2dyb3VuZENvbG9yXCIpO1xyXG4gICAgICAgICQoXCIucGFzc3dvcmRcIikuYW5pbWF0ZSh7IGJhY2tncm91bmRDb2xvcjogXCIjRkZCNkMxXCIgfSwgMjAwKS5hbmltYXRlKHsgYmFja2dyb3VuZENvbG9yOiBvcmlnaW5hbEJnIH0sIDIwMCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5jaGFuZ2VQYXNzd29yZCA9IGZ1bmN0aW9uIChvbGRQYXNzd29yZCwgbmV3UGFzc3dvcmQsIGNvbmZpcm1QYXNzd29yZCkge1xyXG4gICAgaWYgKG5ld1Bhc3N3b3JkKSB7XHJcbiAgICAgIGlmIChuZXdQYXNzd29yZCA9PSBjb25maXJtUGFzc3dvcmQpIHtcclxuICAgICAgICB2YXIgdXNlciA9ICRzY29wZS5jdXJyZW50VXNlci5faWQ7XHJcbiAgICAgICAgVXNlclN2Yy5jaGFuZ2VQYXNzd29yZCh1c2VyLCBvbGRQYXNzd29yZCwgbmV3UGFzc3dvcmQpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3BvcHVwJywge1xyXG4gICAgICAgICAgICBtZXNzYWdlOiAnUGFzc3dvcmQgQ2hhbmdlZCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdhbGVydC1zdWNjZXNzJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICAkc2NvcGUub2xkUGFzc3dvcmQgPSBudWxsO1xyXG4gICAgICAgICAgJHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCk7XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdwb3B1cCcsIHtcclxuICAgICAgICAgICAgbWVzc2FnZTogJ1Bhc3N3b3JkIENoYW5nZSBGYWlsZWQnLFxyXG4gICAgICAgICAgICB0eXBlOiAnYWxlcnQtZGFuZ2VyJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsQmcgPSAkKFwiLnBhc3N3b3JkXCIpLmNzcyhcImJhY2tncm91bmRDb2xvclwiKTtcclxuICAgICAgICAkKFwiLnBhc3N3b3JkXCIpLmFuaW1hdGUoeyBiYWNrZ3JvdW5kQ29sb3I6IFwiI0ZGQjZDMVwiIH0sIDIwMCkuYW5pbWF0ZSh7IGJhY2tncm91bmRDb2xvcjogb3JpZ2luYWxCZyB9LCAyMDApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmNoYW5nZVVzZXJuYW1lID0gZnVuY3Rpb24gKHVzZXJuYW1lKSB7XHJcbiAgICAkc2NvcGUuJGVtaXQoJ2xvYWRpbmcnKTtcclxuICAgIFVzZXJTdmMuY2hhbmdlVXNlcm5hbWUoJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCwgdXNlcm5hbWUpXHJcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgJHNjb3BlLiRlbWl0KCd1cGRhdGUnLCByZXNwb25zZS5kYXRhKTtcclxuICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICRzY29wZS4kZW1pdCgncG9wdXAnLCB7XHJcbiAgICAgICAgbWVzc2FnZTogdXNlcm5hbWUgKyAnIGFscmVhZHkgaW4gdXNlJyxcclxuICAgICAgICB0eXBlOiAnYWxlcnQtZGFuZ2VyJ1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS51cGRhdGVVc2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCRzY29wZS5jdXJyZW50VXNlcikgeyAgXHJcbiAgICAgICRzY29wZS4kZW1pdCgnbG9hZGluZycpO1xyXG4gICAgICBVc2VyU3ZjLnVwZGF0ZVVzZXIoJHNjb3BlLmN1cnJlbnRVc2VyKVxyXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUuJGVtaXQoJ3VwZGF0ZScsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuXHJcbiAgJHNjb3BlLiR3YXRjaCgnY3VycmVudFVzZXIuZmxhZ3MubGVuZ3RoJywgZnVuY3Rpb24obGVuZ3RoKSB7XHJcbiAgICAkc2NvcGUudXBkYXRlVXNlcigpO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUubG9hZENvdW50cmllcyA9IGZ1bmN0aW9uKCRxdWVyeSkge1xyXG4gICAgdmFyIGNvdW50cmllcyA9IFtcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbmRvcnJhXCIsIFwiZmxhZ1wiOiBcImZsYWctYWRcIiwgXCJ0aWRiaXRcIjogXCJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVuaXRlZCBBcmFiIEVtaXJhdGVzXCIsIFwiZmxhZ1wiOiBcImZsYWctYWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFmZ2hhbmlzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctYWZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFudGlndWEgYW5kIEJhcmJ1ZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQW5ndWlsbGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1haVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQWxiYW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLWFsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBcm1lbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYW1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFuZ29sYVwiLCBcImZsYWdcIjogXCJmbGFnLWFvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbnRhcmN0aWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctYXFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFyZ2VudGluYVwiLCBcImZsYWdcIjogXCJmbGFnLWFyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbWVyaWNhbiBTb21vYVwiLCBcImZsYWdcIjogXCJmbGFnLWFzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBdXN0cmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYXRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkF1c3RyYWxpYVwiLCBcImZsYWdcIjogXCJmbGFnLWF1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBcnViYVwiLCBcImZsYWdcIjogXCJmbGFnLWF3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCLDhWxhbmQgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWF4XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBemVyYmFpamFuXCIsIFwiZmxhZ1wiOiBcImZsYWctYXpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJvc25pYSBhbmQgSGVyemVnb3ZpbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1iYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmFyYmFkb3NcIiwgXCJmbGFnXCI6IFwiZmxhZy1iYlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmFuZ2xhZGVzaFwiLCBcImZsYWdcIjogXCJmbGFnLWJkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZWxnaXVtXCIsIFwiZmxhZ1wiOiBcImZsYWctYmVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJ1cmtpbmEgRmFzb1wiLCBcImZsYWdcIjogXCJmbGFnLWJmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCdWxnYXJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWJnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCYWhyYWluXCIsIFwiZmxhZ1wiOiBcImZsYWctYmhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJ1cnVuZGlcIiwgXCJmbGFnXCI6IFwiZmxhZy1iaVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmVuaW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1ialwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgQmFydGjDqWxlbXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1ibFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmVybXVkYVwiLCBcImZsYWdcIjogXCJmbGFnLWJtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCcnVuZWkgXCIsIFwiZmxhZ1wiOiBcImZsYWctYm5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJvbGl2aWEsIFBsdXJpbmF0aW9uYWwgU3RhdGUgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1ib1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm9uYWlyZSwgU2ludCBFdXN0YXRpdXMgYW5kIFNhYmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1icVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQnJhemlsXCIsIFwiZmxhZ1wiOiBcImZsYWctYnJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJhaGFtYXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1ic1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmh1dGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctYnRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJvdXZldCBJc2xhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1idlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm90c3dhbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1id1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmVsYXJ1c1wiLCBcImZsYWdcIjogXCJmbGFnLWJ5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZWxpemVcIiwgXCJmbGFnXCI6IFwiZmxhZy1ielwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2FuYWRhXCIsIFwiZmxhZ1wiOiBcImZsYWctY2FcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvY29zIChLZWVsaW5nKSBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctY2NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvbmdvLCB0aGUgRGVtb2NyYXRpYyBSZXB1YmxpYyBvZiB0aGVcIiwgXCJmbGFnXCI6IFwiZmxhZy1jZFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctY2ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvbmdvXCIsIFwiZmxhZ1wiOiBcImZsYWctY2dcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN3aXR6ZXJsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctY2hcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkPDtHRlIGQnSXZvaXJlXCIsIFwiZmxhZ1wiOiBcImZsYWctY2lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvb2sgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWNrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaGlsZVwiLCBcImZsYWdcIjogXCJmbGFnLWNsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYW1lcm9vblwiLCBcImZsYWdcIjogXCJmbGFnLWNtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaGluYVwiLCBcImZsYWdcIjogXCJmbGFnLWNuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb2xvbWJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWNvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb3N0YSBSaWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctY3JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkN1YmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1jdVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2FibyBWZXJkZVwiLCBcImZsYWdcIjogXCJmbGFnLWN2XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDdXJhw6dhb1wiLCBcImZsYWdcIjogXCJmbGFnLWN3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaHJpc3RtYXMgSXNsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctY3hcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkN5cHJ1c1wiLCBcImZsYWdcIjogXCJmbGFnLWN5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDemVjaCBSZXB1YmxpY1wiLCBcImZsYWdcIjogXCJmbGFnLWN6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHZXJtYW55XCIsIFwiZmxhZ1wiOiBcImZsYWctZGVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkRqaWJvdXRpXCIsIFwiZmxhZ1wiOiBcImZsYWctZGpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkRlbm1hcmtcIiwgXCJmbGFnXCI6IFwiZmxhZy1ka1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRG9taW5pY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1kbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRG9taW5pY2FuIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctZG9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFsZ2VyaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1kelwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRWN1YWRvclwiLCBcImZsYWdcIjogXCJmbGFnLWVjXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFc3RvbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctZWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVneXB0XCIsIFwiZmxhZ1wiOiBcImZsYWctZWdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIldlc3Rlcm4gU2FoYXJhXCIsIFwiZmxhZ1wiOiBcImZsYWctZWhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVyaXRyZWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1lclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3BhaW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1lc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRXRoaW9waWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1ldFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRmlubGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWZpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGaWppXCIsIFwiZmxhZ1wiOiBcImZsYWctZmpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZhbGtsYW5kIElzbGFuZHMgKE1hbHZpbmFzKVwiLCBcImZsYWdcIjogXCJmbGFnLWZrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNaWNyb25lc2lhLCBGZWRlcmF0ZWQgU3RhdGVzIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctZm1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZhcm9lIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1mb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRnJhbmNlXCIsIFwiZmxhZ1wiOiBcImZsYWctZnJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdhYm9uXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2FcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVuaXRlZCBLaW5nZG9tIG9mIEdyZWF0IEJyaXRhaW4gYW5kIE5vcnRoZXJuIElyZWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1nYlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3JlbmFkYVwiLCBcImZsYWdcIjogXCJmbGFnLWdkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHZW9yZ2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZyZW5jaCBHdWlhbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1nZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3Vlcm5zZXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1nZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR2hhbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1naFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR2licmFsdGFyXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdyZWVubGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWdsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHYW1iaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1nbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3VpbmVhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ25cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1YWRlbG91cGVcIiwgXCJmbGFnXCI6IFwiZmxhZy1ncFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRXF1YXRvcmlhbCBHdWluZWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1ncVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3JlZWNlXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNvdXRoIEdlb3JnaWEgYW5kIHRoZSBTb3V0aCBTYW5kd2ljaCBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1YXRlbWFsYVwiLCBcImZsYWdcIjogXCJmbGFnLWd0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdWFtXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1aW5lYS1CaXNzYXVcIiwgXCJmbGFnXCI6IFwiZmxhZy1nd1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3V5YW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkhvbmcgS29uZ1wiLCBcImZsYWdcIjogXCJmbGFnLWhrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIZWFyZCBJc2xhbmQgYW5kIE1jRG9uYWxkIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1obVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSG9uZHVyYXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1oblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ3JvYXRpYVwiLCBcImZsYWdcIjogXCJmbGFnLWhyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIYWl0aVwiLCBcImZsYWdcIjogXCJmbGFnLWh0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIdW5nYXJ5XCIsIFwiZmxhZ1wiOiBcImZsYWctaHVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkluZG9uZXNpYVwiLCBcImZsYWdcIjogXCJmbGFnLWlkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJcmVsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctaWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIklzcmFlbFwiLCBcImZsYWdcIjogXCJmbGFnLWlsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJc2xlIG9mIE1hblwiLCBcImZsYWdcIjogXCJmbGFnLWltXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJbmRpYVwiLCBcImZsYWdcIjogXCJmbGFnLWluXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCcml0aXNoIEluZGlhbiBPY2VhbiBUZXJyaXRvcnlcIiwgXCJmbGFnXCI6IFwiZmxhZy1pb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSXJhcVwiLCBcImZsYWdcIjogXCJmbGFnLWlxXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJcmFuLCBJc2xhbWljIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctaXJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkljZWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1pc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSXRhbHlcIiwgXCJmbGFnXCI6IFwiZmxhZy1pdFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSmVyc2V5XCIsIFwiZmxhZ1wiOiBcImZsYWctamVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkphbWFpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1qbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSm9yZGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctam9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkphcGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctanBcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIktlbnlhXCIsIFwiZmxhZ1wiOiBcImZsYWcta2VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkt5cmd5enN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1rZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2FtYm9kaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1raFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS2lyaWJhdGlcIiwgXCJmbGFnXCI6IFwiZmxhZy1raVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29tb3Jvc1wiLCBcImZsYWdcIjogXCJmbGFnLWttXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBLaXR0cyBhbmQgTmV2aXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1rblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS29yZWEsIERlbW9jcmF0aWMgUGVvcGxlJ3MgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1rcFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS29yZWEsIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWcta3JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkt1d2FpdFwiLCBcImZsYWdcIjogXCJmbGFnLWt3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYXltYW4gSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWt5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLYXpha2hzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWcta3pcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxhbyBQZW9wbGUncyBEZW1vY3JhdGljIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctbGFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxlYmFub25cIiwgXCJmbGFnXCI6IFwiZmxhZy1sYlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgTHVjaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1sY1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGllY2h0ZW5zdGVpblwiLCBcImZsYWdcIjogXCJmbGFnLWxpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTcmkgTGFua2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1sa1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGliZXJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWxyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMZXNvdGhvXCIsIFwiZmxhZ1wiOiBcImZsYWctbHNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxpdGh1YW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLWx0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMdXhlbWJvdXJnXCIsIFwiZmxhZ1wiOiBcImZsYWctbHVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxhdHZpYVwiLCBcImZsYWdcIjogXCJmbGFnLWx2XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMaWJ5YVwiLCBcImZsYWdcIjogXCJmbGFnLWx5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb3JvY2NvXCIsIFwiZmxhZ1wiOiBcImZsYWctbWFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vbmFjb1wiLCBcImZsYWdcIjogXCJmbGFnLW1jXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb2xkb3ZhLCBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLW1kXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb250ZW5lZ3JvXCIsIFwiZmxhZ1wiOiBcImZsYWctbWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IE1hcnRpbiAoRnJlbmNoIHBhcnQpXCIsIFwiZmxhZ1wiOiBcImZsYWctbWZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hZGFnYXNjYXJcIiwgXCJmbGFnXCI6IFwiZmxhZy1tZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFyc2hhbGwgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLW1oXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWNlZG9uaWEsIHRoZSBmb3JtZXIgWXVnb3NsYXYgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1ta1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFsaVwiLCBcImZsYWdcIjogXCJmbGFnLW1sXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNeWFubWFyXCIsIFwiZmxhZ1wiOiBcImZsYWctbW1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vbmdvbGlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbW5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hY2FvXCIsIFwiZmxhZ1wiOiBcImZsYWctbW9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5vcnRoZXJuIE1hcmlhbmEgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLW1wXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYXJ0aW5pcXVlXCIsIFwiZmxhZ1wiOiBcImZsYWctbXFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hdXJpdGFuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1tclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTW9udHNlcnJhdFwiLCBcImZsYWdcIjogXCJmbGFnLW1zXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWx0YVwiLCBcImZsYWdcIjogXCJmbGFnLW10XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYXVyaXRpdXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1tdVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFsZGl2ZXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1tdlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFsYXdpXCIsIFwiZmxhZ1wiOiBcImZsYWctbXdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1leGljb1wiLCBcImZsYWdcIjogXCJmbGFnLW14XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWxheXNpYVwiLCBcImZsYWdcIjogXCJmbGFnLW15XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb3phbWJpcXVlXCIsIFwiZmxhZ1wiOiBcImZsYWctbXpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5hbWliaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1uYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmV3IENhbGVkb25pYVwiLCBcImZsYWdcIjogXCJmbGFnLW5jXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOaWdlclwiLCBcImZsYWdcIjogXCJmbGFnLW5lXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOb3Jmb2xrIElzbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLW5mXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOaWdlcmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbmdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5pY2FyYWd1YVwiLCBcImZsYWdcIjogXCJmbGFnLW5pXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOZXRoZXJsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLW5sXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOb3J3YXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1ub1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmVwYWxcIiwgXCJmbGFnXCI6IFwiZmxhZy1ucFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmF1cnVcIiwgXCJmbGFnXCI6IFwiZmxhZy1uclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTml1ZVwiLCBcImZsYWdcIjogXCJmbGFnLW51XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOZXcgWmVhbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLW56XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJPbWFuXCIsIFwiZmxhZ1wiOiBcImZsYWctb21cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhbmFtYVwiLCBcImZsYWdcIjogXCJmbGFnLXBhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQZXJ1XCIsIFwiZmxhZ1wiOiBcImZsYWctcGVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZyZW5jaCBQb2x5bmVzaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1wZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGFwdWEgTmV3IEd1aW5lYVwiLCBcImZsYWdcIjogXCJmbGFnLXBnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQaGlsaXBwaW5lc1wiLCBcImZsYWdcIjogXCJmbGFnLXBoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQYWtpc3RhblwiLCBcImZsYWdcIjogXCJmbGFnLXBrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQb2xhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1wbFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvblwiLCBcImZsYWdcIjogXCJmbGFnLXBtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQaXRjYWlyblwiLCBcImZsYWdcIjogXCJmbGFnLXBuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQdWVydG8gUmljb1wiLCBcImZsYWdcIjogXCJmbGFnLXByXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQYWxlc3RpbmUsIFN0YXRlIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctcHNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBvcnR1Z2FsXCIsIFwiZmxhZ1wiOiBcImZsYWctcHRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhbGF1XCIsIFwiZmxhZ1wiOiBcImZsYWctcHdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhcmFndWF5XCIsIFwiZmxhZ1wiOiBcImZsYWctcHlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlFhdGFyXCIsIFwiZmxhZ1wiOiBcImZsYWctcWFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlLDqXVuaW9uXCIsIFwiZmxhZ1wiOiBcImZsYWctcmVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlJvbWFuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1yb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2VyYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctcnNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlJ1c3NpYW4gRmVkZXJhdGlvblwiLCBcImZsYWdcIjogXCJmbGFnLXJ1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJSd2FuZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1yd1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2F1ZGkgQXJhYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctc2FcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNvbG9tb24gSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLXNiXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTZXljaGVsbGVzXCIsIFwiZmxhZ1wiOiBcImZsYWctc2NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN1ZGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctc2RcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN3ZWRlblwiLCBcImZsYWdcIjogXCJmbGFnLXNlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTaW5nYXBvcmVcIiwgXCJmbGFnXCI6IFwiZmxhZy1zZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgSGVsZW5hLCBBc2NlbnNpb24gYW5kIFRyaXN0YW4gZGEgQ3VuaGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1zaFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2xvdmVuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1zaVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3ZhbGJhcmQgYW5kIEphbiBNYXllblwiLCBcImZsYWdcIjogXCJmbGFnLXNqXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTbG92YWtpYVwiLCBcImZsYWdcIjogXCJmbGFnLXNrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTaWVycmEgTGVvbmVcIiwgXCJmbGFnXCI6IFwiZmxhZy1zbFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FuIE1hcmlub1wiLCBcImZsYWdcIjogXCJmbGFnLXNtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTZW5lZ2FsXCIsIFwiZmxhZ1wiOiBcImZsYWctc25cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNvbWFsaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1zb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3VyaW5hbWVcIiwgXCJmbGFnXCI6IFwiZmxhZy1zclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU291dGggU3VkYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1zc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FvIFRvbWUgYW5kIFByaW5jaXBlXCIsIFwiZmxhZ1wiOiBcImZsYWctc3RcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVsIFNhbHZhZG9yXCIsIFwiZmxhZ1wiOiBcImZsYWctc3ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNpbnQgTWFhcnRlbiAoRHV0Y2ggcGFydClcIiwgXCJmbGFnXCI6IFwiZmxhZy1zeFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3lyaWFuIEFyYWIgUmVwdWJsaWNcIiwgXCJmbGFnXCI6IFwiZmxhZy1zeVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3dhemlsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctc3pcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlR1cmtzIGFuZCBDYWljb3MgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLXRjXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaGFkXCIsIFwiZmxhZ1wiOiBcImZsYWctdGRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZyZW5jaCBTb3V0aGVybiBUZXJyaXRvcmllc1wiLCBcImZsYWdcIjogXCJmbGFnLXRmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUb2dvXCIsIFwiZmxhZ1wiOiBcImZsYWctdGdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRoYWlsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctdGhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRhamlraXN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy10alwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVG9rZWxhdVwiLCBcImZsYWdcIjogXCJmbGFnLXRrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUaW1vci1MZXN0ZVwiLCBcImZsYWdcIjogXCJmbGFnLXRsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdXJrbWVuaXN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy10bVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVHVuaXNpYVwiLCBcImZsYWdcIjogXCJmbGFnLXRuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUb25nYVwiLCBcImZsYWdcIjogXCJmbGFnLXRvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdXJrZXlcIiwgXCJmbGFnXCI6IFwiZmxhZy10clwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVHJpbmlkYWQgYW5kIFRvYmFnb1wiLCBcImZsYWdcIjogXCJmbGFnLXR0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdXZhbHVcIiwgXCJmbGFnXCI6IFwiZmxhZy10dlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVGFpd2FuLCBQcm92aW5jZSBvZiBDaGluYVwiLCBcImZsYWdcIjogXCJmbGFnLXR3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUYW56YW5pYSwgVW5pdGVkIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctdHpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVrcmFpbmVcIiwgXCJmbGFnXCI6IFwiZmxhZy11YVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVWdhbmRhXCIsIFwiZmxhZ1wiOiBcImZsYWctdWdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVuaXRlZCBTdGF0ZXMgTWlub3IgT3V0bHlpbmcgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLXVtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy11c1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVXJ1Z3VheVwiLCBcImZsYWdcIjogXCJmbGFnLXV5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVemJla2lzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctdXpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkhvbHkgU2VlXCIsIFwiZmxhZ1wiOiBcImZsYWctdmFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IFZpbmNlbnQgYW5kIHRoZSBHcmVuYWRpbmVzXCIsIFwiZmxhZ1wiOiBcImZsYWctdmNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlZlbmV6dWVsYSwgQm9saXZhcmlhbiBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLXZlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWaXJnaW4gSXNsYW5kcywgQnJpdGlzaFwiLCBcImZsYWdcIjogXCJmbGFnLXZnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWaXJnaW4gSXNsYW5kcywgVS5TLlwiLCBcImZsYWdcIjogXCJmbGFnLXZpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWaWV0IE5hbVwiLCBcImZsYWdcIjogXCJmbGFnLXZuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWYW51YXR1XCIsIFwiZmxhZ1wiOiBcImZsYWctdnVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIldhbGxpcyBhbmQgRnV0dW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctd2ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhbW9hXCIsIFwiZmxhZ1wiOiBcImZsYWctd3NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlllbWVuXCIsIFwiZmxhZ1wiOiBcImZsYWcteWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1heW90dGVcIiwgXCJmbGFnXCI6IFwiZmxhZy15dFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU291dGggQWZyaWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctemFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlphbWJpYVwiLCBcImZsYWdcIjogXCJmbGFnLXptXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJaaW1iYWJ3ZVwiLCBcImZsYWdcIjogXCJmbGFnLXp3XCIgfSxcclxuICAgIF07XHJcbiAgICByZXR1cm4gY291bnRyaWVzLmZpbHRlcihmdW5jdGlvbihjb3VudHJ5KSB7XHJcbiAgICAgIHJldHVybiBjb3VudHJ5Lm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCRxdWVyeS50b0xvd2VyQ2FzZSgpKSAhPSAtMTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignU2tpbGxzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICR3aW5kb3cpIHtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdGVkU2tpbGwgPSAwO1xyXG4gICRzY29wZS5za2lsbHNWaXNpYmxlID0gZmFsc2U7XHJcbiAgJHNjb3BlLnByb2plY3RzID0gW107XHJcblxyXG4gICRzY29wZS5sYWJlbHMgPSBbXCJEb3dubG9hZCBTYWxlc1wiLCBcIkluLVN0b3JlIFNhbGVzXCIsIFwiTWFpbC1PcmRlciBTYWxlc1wiXTtcclxuICAkc2NvcGUuZGF0YSA9IFszMDAsIDUwMCwgMTAwXTtcclxuXHJcbiAgJC5nZXRKU09OKCcvZXhwZXJpZW5jZS5qc29uJywgZnVuY3Rpb24oIGRhdGEgKSB7XHJcbiAgICAkc2NvcGUucHJvamVjdHMgPSBkYXRhLnJlZHVjZSgocHJvamVjdHMsIGVtcGxveWVyKSA9PiB7XHJcbiAgICAgIGlmIChlbXBsb3llci5wcm9qZWN0cykgcmV0dXJuIGVtcGxveWVyLnByb2plY3RzLmNvbmNhdChwcm9qZWN0cyk7XHJcbiAgICAgIGVsc2UgcmV0dXJuIHByb2plY3RzO1xyXG4gICAgfSwge30pO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUuZmlsdGVyZWRQcm9qZWN0cyA9ICgpID0+ICRzY29wZS5wcm9qZWN0c1xyXG4gICAgLmZpbHRlcigocHJvamVjdCkgPT4gcHJvamVjdC5za2lsbHMgJiYgcHJvamVjdC5za2lsbHMuaW5jbHVkZXMoJHNjb3BlLnNlbGVjdGVkU2tpbGwuY29kZSkpXHJcblxyXG4gICQuZ2V0SlNPTignL3NraWxscy5qc29uJywgZnVuY3Rpb24oIGRhdGEgKSB7XHJcblxyXG4gICAgY29uc3Qgc2tpbGxzID0gZGF0YVxyXG4gICAgLmZpbHRlcigoc2tpbGwpID0+IHNraWxsLmVuYWJsZWQpXHJcblxyXG4gICAgJHNjb3BlLmNhdGVnb3JpZXMgPSBza2lsbHNcclxuICAgIC5yZWR1Y2UoZnVuY3Rpb24oY2F0ZWdvcmllcywgc2tpbGwpIHtcclxuICAgICAgaWYgKCFjYXRlZ29yaWVzW3NraWxsLmNhdGVnb3J5XSkge1xyXG4gICAgICAgIGNhdGVnb3JpZXNbc2tpbGwuY2F0ZWdvcnldID0gW3NraWxsXVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNhdGVnb3JpZXNbc2tpbGwuY2F0ZWdvcnldLnB1c2goc2tpbGwpXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGNhdGVnb3JpZXM7XHJcbiAgICB9LCB7fSk7XHJcblxyXG4gICAgJHNjb3BlLnNldFNlbGVjdGVkU2tpbGwgPSBmdW5jdGlvbiAoc2tpbGwpIHtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkU2tpbGwgPSBza2lsbDtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkU2tpbGwuY2hhcnRPcHRpb25zID0ge1xyXG4gICAgICAgIGN1dG91dFBlcmNlbnRhZ2UgOiA4MCxcclxuICAgICAgICBjaXJjdW1mZXJlbmNlOiAyICogTWF0aC5QSSxcclxuICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiB0cnVlLFxyXG4gICAgICAgIHRvb2x0aXBzOiB7XHJcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkU2tpbGwuY2hhcnRTdHlsZSA9IHtcclxuICAgICAgICAnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoL3NraWxscy8nICsgJHNjb3BlLnNlbGVjdGVkU2tpbGwuaW1hZ2UgKyAnKScsXHJcbiAgICAgICAgJ2JhY2tncm91bmQtcmVwZWF0JzogJ25vLXJlcGVhdCcsXHJcbiAgICAgICAgJ2JhY2tncm91bmQtc2l6ZSc6ICc2MCUnLFxyXG4gICAgICAgICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogJzUwJSA1MCUnXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zZXRTZWxlY3RlZFNraWxsKCRzY29wZS5za2lsbHNbMF0pO1xyXG5cclxuICAgICRzY29wZS4kYXBwbHkoKTtcclxuICB9KTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyXHJcbiAgLm1vZHVsZShcImFwcFwiKVxyXG4gIC8vQW5ndWxhckpzIGNhbid0IGhhdmUgYW4gYXJyb3cgZnVuY3Rpb24gaGVyZVxyXG4gIC5jb250cm9sbGVyKFwiVGVuVGhpbmdzQ3RybFwiLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIFRlblRoaW5nc1N2Yykge1xyXG4gICAgJHNjb3BlLnNlYXJjaCA9IHtcclxuICAgICAgbmFtZTogXCJcIixcclxuICAgICAgdmFsdWVzOiBcIlwiLFxyXG4gICAgfTtcclxuXHJcbiAgICBUZW5UaGluZ3NTdmMuZ2V0Q2F0ZWdvcmllcygpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgJHNjb3BlLmNhdGVnb3J5RmlsdGVycyA9ICRzY29wZS5jYXRlZ29yaWVzLm1hcCgoY2F0ZWdvcnkpID0+IGNhdGVnb3J5KTtcclxuICAgICAgJHNjb3BlLmNhdGVnb3J5RmlsdGVycy5wdXNoKFwiQWxsXCIpO1xyXG4gICAgICAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzLnB1c2goXCJCbGFua1wiKTtcclxuICAgICAgJHNjb3BlLmNhdGVnb3J5RmlsdGVyID0gXCJBbGxcIjtcclxuICAgICAgJHNjb3BlLnVwZGF0ZUZpbHRlciA9IFwiYWxsXCI7XHJcbiAgICB9KTtcclxuICAgIFRlblRoaW5nc1N2Yy5nZXRMYW5ndWFnZXMoKS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAkc2NvcGUubGFuZ3VhZ2VzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgJHNjb3BlLmxhbmd1YWdlRmlsdGVycyA9ICRzY29wZS5sYW5ndWFnZXMubWFwKChsYW5ndWFnZSkgPT4gbGFuZ3VhZ2UpO1xyXG4gICAgICAkc2NvcGUubGFuZ3VhZ2VGaWx0ZXJzLnB1c2goeyBuYW1lOiBcIkFsbFwiLCBjb2RlOiBcImFsbFwiIH0pO1xyXG4gICAgICAkc2NvcGUubGFuZ3VhZ2VGaWx0ZXIgPSB7IG5hbWU6IFwiQWxsXCIsIGNvZGU6IFwiYWxsXCIgfTtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5rZXlEb3duID0gKGUpID0+IHtcclxuICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xyXG4gICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgIGlmICgkKFwiI25ldy1ibHVyYlwiKS5pcyhcIjpmb2N1c1wiKSkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAkc2NvcGUuYWRkVmFsdWUoKTtcclxuICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTM6XHJcbiAgICAgICAgICBpZiAoJChcIiNuZXctYmx1cmJcIikuaXMoXCI6Zm9jdXNcIikpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmFkZFZhbHVlKCk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKCQoXCIjbmV3LXZhbHVlXCIpLmlzKFwiOmZvY3VzXCIpKSB7XHJcbiAgICAgICAgICAgICQoXCIjbmV3LWJsdXJiXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICB9XHJcbiAgICAgIC8vIHVzZSBlLmtleUNvZGVcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnNlYXJjaE5hbWUgPSBcIlwiO1xyXG4gICAgJHNjb3BlLm5ld0l0ZW0gPSB7fTtcclxuXHJcbiAgICAkc2NvcGUuc2V0Q2F0ZWdvcnlGaWx0ZXIgPSAoY2F0ZWdvcnkpID0+ICgkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIgPSBjYXRlZ29yeSk7XHJcbiAgICAkc2NvcGUuc2V0VXNlckZpbHRlciA9ICh1c2VyKSA9PiAoJHNjb3BlLnVzZXJGaWx0ZXIgPSB1c2VyKTtcclxuICAgICRzY29wZS5zZXRVcGRhdGVGaWx0ZXIgPSAodHlwZSkgPT4gKCRzY29wZS51cGRhdGVGaWx0ZXIgPSB0eXBlKTtcclxuICAgICRzY29wZS5zZXRMYW5ndWFnZUZpbHRlciA9IChsYW5ndWFnZSkgPT4gKCRzY29wZS5sYW5ndWFnZUZpbHRlciA9IGxhbmd1YWdlKTtcclxuXHJcbiAgICAkc2NvcGUuZmlsdGVyZWRMaXN0cyA9ICgpID0+IHtcclxuICAgICAgaWYgKCEkc2NvcGUubGlzdHMpIHJldHVybiBbXTtcclxuICAgICAgcmV0dXJuICRzY29wZS5saXN0c1xyXG4gICAgICAgIC5maWx0ZXIoKHsgaXNEeW5hbWljIH0pID0+IHtcclxuICAgICAgICAgIGlmICgkc2NvcGUudXBkYXRlRmlsdGVyICE9PSBcImFsbFwiKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAoJHNjb3BlLnVwZGF0ZUZpbHRlciA9PT0gXCJzdGF0aWNcIiAmJiBpc0R5bmFtaWMgPT09IHRydWUpIHx8XHJcbiAgICAgICAgICAgICAgKCRzY29wZS51cGRhdGVGaWx0ZXIgPT09IFwiZHluYW1pY1wiICYmIGlzRHluYW1pYyA9PT0gZmFsc2UpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5maWx0ZXIoKHsgY2F0ZWdvcmllcyB9KSA9PiB7XHJcbiAgICAgICAgICBpZiAoJHNjb3BlLmNhdGVnb3J5RmlsdGVyID09PSBcIkFsbFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGNhdGVnb3JpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBjYXRlZ29yaWVzLmluZGV4T2YoJHNjb3BlLmNhdGVnb3J5RmlsdGVyKSA+PSAwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIgPT09IFwiQmxhbmtcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmZpbHRlcigoeyBjcmVhdG9yIH0pID0+IHtcclxuICAgICAgICAgIGlmICgkc2NvcGUudXNlckZpbHRlciA9PT0gXCJBbGxcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdG9yID09PSAkc2NvcGUudXNlckZpbHRlcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5maWx0ZXIoKHsgbGFuZ3VhZ2UgfSkgPT4ge1xyXG4gICAgICAgICAgaWYgKCRzY29wZS5sYW5ndWFnZUZpbHRlci5jb2RlID09PSBcImFsbFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxhbmd1YWdlID09PSAkc2NvcGUubGFuZ3VhZ2VGaWx0ZXIuY29kZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLiRvbihcImxvZ2luXCIsIChfKSA9PiB7XHJcbiAgICAgICRzY29wZS5nZXRMaXN0cygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLmxpc3RPcmRlciA9IHtcclxuICAgICAgZmllbGQ6IFwiZGF0ZVwiLFxyXG4gICAgICBkaXJlY3Rpb246IHRydWUsXHJcbiAgICAgIGxhYmVsOiBcIkNyZWF0aW9uIERhdGVcIixcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnZhbHVlT3JkZXIgPSB7XHJcbiAgICAgIGZpZWxkOiBcInZhbHVlXCIsXHJcbiAgICAgIGRpcmVjdGlvbjogZmFsc2UsXHJcbiAgICAgIGxhYmVsOiBcIlZhbHVlXCIsXHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zb3J0ID0gKHNvcnRlciwgc29ydEZpZWxkLCBzb3J0TGFiZWwpID0+IHtcclxuICAgICAgJHNjb3BlW3NvcnRlcl0ubGFiZWwgPSBzb3J0TGFiZWw7XHJcbiAgICAgIGlmICgkc2NvcGVbc29ydGVyXS5maWVsZCA9PT0gc29ydEZpZWxkKSB7XHJcbiAgICAgICAgJHNjb3BlW3NvcnRlcl0uZGlyZWN0aW9uID0gISRzY29wZVtzb3J0ZXJdLmRpcmVjdGlvbjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkc2NvcGVbc29ydGVyXS5maWVsZCA9IHNvcnRGaWVsZDtcclxuICAgICAgICAkc2NvcGVbc29ydGVyXS5kaXJlY3Rpb24gPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRMYW5ndWFnZUNvdW50ID0gKGxhbmd1YWdlKSA9PiB7XHJcbiAgICAgIGlmICghJHNjb3BlLmxpc3RzKSByZXR1cm4gMDtcclxuICAgICAgY29uc3QgY291bnQgPSAkc2NvcGUubGlzdHMuZmlsdGVyKFxyXG4gICAgICAgIChsaXN0KSA9PlxyXG4gICAgICAgICAgKCRzY29wZS5jYXRlZ29yeUZpbHRlciA9PT0gXCJBbGxcIiB8fCBsaXN0LmNhdGVnb3JpZXMuaW5jbHVkZXMoJHNjb3BlLmNhdGVnb3J5RmlsdGVyKSkgJiZcclxuICAgICAgICAgIChsYW5ndWFnZS5jb2RlID09PSBcImFsbFwiIHx8IGxpc3QubGFuZ3VhZ2UgPT09IGxhbmd1YWdlLmNvZGUpICYmXHJcbiAgICAgICAgICAoJHNjb3BlLnVzZXJGaWx0ZXIgPT09IFwiQWxsXCIgfHwgbGlzdC5jcmVhdG9yID09PSAkc2NvcGUudXNlckZpbHRlcikgJiZcclxuICAgICAgICAgICgkc2NvcGUudXBkYXRlRmlsdGVyID09PSBcImFsbFwiIHx8IGxpc3QuaXNEeW5hbWljID09PSAoJHNjb3BlLnVwZGF0ZUZpbHRlciA9PT0gXCJkeW5hbWljXCIpKVxyXG4gICAgICApLmxlbmd0aDtcclxuICAgICAgcmV0dXJuIGAke2NvdW50fSAtICR7TWF0aC5yb3VuZCgoY291bnQgLyAkc2NvcGUubGlzdHMubGVuZ3RoKSAqIDEwMCl9JWA7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRDYXRlZ29yeUNvdW50ID0gKGNhdGVnb3J5KSA9PiB7XHJcbiAgICAgIGlmICghJHNjb3BlLmxpc3RzKSByZXR1cm4gMDtcclxuICAgICAgY29uc3QgY291bnQgPSAkc2NvcGUubGlzdHMuZmlsdGVyKFxyXG4gICAgICAgIChsaXN0KSA9PlxyXG4gICAgICAgICAgKGNhdGVnb3J5ID09PSBcIkFsbFwiIHx8IGxpc3QuY2F0ZWdvcmllcy5pbmRleE9mKGNhdGVnb3J5KSA+PSAwKSAmJlxyXG4gICAgICAgICAgKCRzY29wZS5sYW5ndWFnZUZpbHRlci5jb2RlID09PSBcImFsbFwiIHx8IGxpc3QubGFuZ3VhZ2UgPT09ICRzY29wZS5sYW5ndWFnZUZpbHRlci5jb2RlKSAmJlxyXG4gICAgICAgICAgKCRzY29wZS51c2VyRmlsdGVyID09PSBcIkFsbFwiIHx8IGxpc3QuY3JlYXRvciA9PT0gJHNjb3BlLnVzZXJGaWx0ZXIpICYmXHJcbiAgICAgICAgICAoJHNjb3BlLnVwZGF0ZUZpbHRlciA9PT0gXCJhbGxcIiB8fCBsaXN0LmlzRHluYW1pYyA9PT0gKCRzY29wZS51cGRhdGVGaWx0ZXIgPT09IFwiZHluYW1pY1wiKSlcclxuICAgICAgKS5sZW5ndGg7XHJcbiAgICAgIHJldHVybiBgJHtjb3VudH0gLSAke01hdGgucm91bmQoKGNvdW50IC8gJHNjb3BlLmxpc3RzLmxlbmd0aCkgKiAxMDApfSVgO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0VXBkYXRlQ291bnQgPSAodHlwZSkgPT4ge1xyXG4gICAgICBpZiAoISRzY29wZS5saXN0cykgcmV0dXJuIDA7XHJcbiAgICAgIGNvbnN0IGNvdW50ID0gJHNjb3BlLmxpc3RzLmZpbHRlcihcclxuICAgICAgICAobGlzdCkgPT5cclxuICAgICAgICAgIHR5cGUgPT09IFwiYWxsXCIgfHxcclxuICAgICAgICAgIChsaXN0LmlzRHluYW1pYyAmJiB0eXBlID09PSBcImR5bmFtaWNcIikgfHxcclxuICAgICAgICAgICghbGlzdC5pc0R5bmFtaWMgJiYgdHlwZSA9PT0gXCJzdGF0aWNcIilcclxuICAgICAgKS5sZW5ndGg7XHJcbiAgICAgIHJldHVybiBgJHtjb3VudH0gLSAke01hdGgucm91bmQoKGNvdW50IC8gJHNjb3BlLmxpc3RzLmxlbmd0aCkgKiAxMDApfSVgO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0TGlzdHMgPSAoKSA9PiB7XHJcbiAgICAgIGlmICghJHNjb3BlLmxvYWRpbmcpIHtcclxuICAgICAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgVGVuVGhpbmdzU3ZjLmdldExpc3RzKCkudGhlbigoeyBkYXRhIH0pID0+IHtcclxuICAgICAgICAgICRzY29wZS5saXN0cyA9IGRhdGE7XHJcbiAgICAgICAgICAkc2NvcGUudXNlckZpbHRlcnMgPSB7fTtcclxuICAgICAgICAgICRzY29wZS51c2VyRmlsdGVycy5BbGwgPSAkc2NvcGUubGlzdHMubGVuZ3RoO1xyXG4gICAgICAgICAgJHNjb3BlLnVzZXJGaWx0ZXJzID0gJHNjb3BlLmxpc3RzXHJcbiAgICAgICAgICAgIC5zb3J0KChsaXN0MSwgbGlzdDIpID0+IGxpc3QxLmNyZWF0b3IgPiBsaXN0Mi5jcmVhdG9yKVxyXG4gICAgICAgICAgICAucmVkdWNlKCh1c2VycywgeyBjcmVhdG9yIH0pID0+IHtcclxuICAgICAgICAgICAgICBpZiAoIXVzZXJzW2NyZWF0b3JdKSB1c2Vyc1tjcmVhdG9yXSA9IDA7XHJcbiAgICAgICAgICAgICAgdXNlcnNbY3JlYXRvcl0rKztcclxuICAgICAgICAgICAgICByZXR1cm4gdXNlcnM7XHJcbiAgICAgICAgICAgIH0sICRzY29wZS51c2VyRmlsdGVycyk7XHJcbiAgICAgICAgICAkc2NvcGUudXNlckNvdW50ID0gT2JqZWN0LmtleXMoJHNjb3BlLnVzZXJGaWx0ZXJzKS5sZW5ndGg7XHJcbiAgICAgICAgICAkc2NvcGUudXNlckZpbHRlcnMgPSBzb3J0T2JqZWN0KCRzY29wZS51c2VyRmlsdGVycywgZmFsc2UpO1xyXG4gICAgICAgICAgJHNjb3BlLnVzZXJGaWx0ZXIgPSBcIkFsbFwiO1xyXG4gICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuc2VsZWN0TGlzdCA9IChsaXN0KSA9PiB7XHJcbiAgICAgIFRlblRoaW5nc1N2Yy5nZXRMaXN0KGxpc3QpLnRoZW4oKHsgZGF0YSB9KSA9PiB7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdCA9IGRhdGE7XHJcbiAgICAgICAgJGxvY2F0aW9uLnNlYXJjaChcImxpc3RcIiwgZGF0YS5faWQpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgaWYgKCRsb2NhdGlvbi5zZWFyY2goKS5saXN0KSB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RMaXN0KHsgX2lkOiAkbG9jYXRpb24uc2VhcmNoKCkubGlzdCB9KTtcclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkgPSAoY2F0ZWdvcnkpID0+IHtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yeSA9IGNhdGVnb3J5O1xyXG4gICAgICAkKFwiI2NhdGVnb3J5LXNlbGVjdFwiKS5oaWRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRDYXRlZ29yeUNsYXNzID0gKGNhdGVnb3J5KSA9PiB7XHJcbiAgICAgIHJldHVybiAkc2NvcGUuc2VsZWN0ZWRMaXN0ICYmICRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5pbmRleE9mKGNhdGVnb3J5KSA+PSAwXHJcbiAgICAgICAgPyBcImJ0bi1zdWNjZXNzXCJcclxuICAgICAgICA6IFwiYnRuLWRlZmF1bHRcIjtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnRvZ2dsZUNhdGVnb3J5ID0gKGNhdGVnb3J5KSA9PiB7XHJcbiAgICAgIGNvbnN0IGNhdGVnb3J5SW5kZXggPSAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSk7XHJcbiAgICAgIGlmIChjYXRlZ29yeUluZGV4ID49IDApIHtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuc3BsaWNlKGNhdGVnb3J5SW5kZXgsIDEpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5wdXNoKGNhdGVnb3J5KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuc2VsZWN0TGFuZ3VhZ2UgPSAobGFuZ3VhZ2UpID0+IHtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdC5sYW5ndWFnZSA9IGxhbmd1YWdlLmNvZGU7XHJcbiAgICAgIGNvbnN0IG5vbkVuZ2xpc2hJbmRleCA9ICRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5pbmRleE9mKFwiTm9uLUVuZ2xpc2hcIik7XHJcbiAgICAgIGlmIChsYW5ndWFnZS5jb2RlICE9PSBcIkVOXCIgJiYgbm9uRW5nbGlzaEluZGV4IDwgMCkge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5wdXNoKFwiTm9uLUVuZ2xpc2hcIik7XHJcbiAgICAgIH0gZWxzZSBpZiAobGFuZ3VhZ2UuY29kZSA9PT0gXCJFTlwiICYmIG5vbkVuZ2xpc2hJbmRleCA+PSAwKSB7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLnNwbGljZShub25FbmdsaXNoSW5kZXgsIDEpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5hZGRMaXN0ID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBjdXJyZW50TGFuZ3VhZ2UgPSAkc2NvcGUuc2VsZWN0ZWRMaXN0ID8gJHNjb3BlLnNlbGVjdGVkTGlzdC5sYW5ndWFnZSA6IFwiRU5cIjtcclxuICAgICAgJGxvY2F0aW9uLnNlYXJjaChcImxpc3RcIiwgXCJcIik7XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZExpc3QgPSB7XHJcbiAgICAgICAgbmFtZTogXCJcIixcclxuICAgICAgICBjcmVhdG9yOiAkc2NvcGUuY3VycmVudFVzZXIuX2lkLFxyXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgdmFsdWVzOiBbXSxcclxuICAgICAgICBhbnN3ZXJzOiAwLFxyXG4gICAgICAgIGlzRHluYW1pYzogdHJ1ZSxcclxuICAgICAgICBjYXRlZ29yeTogXCJcIixcclxuICAgICAgICBjYXRlZ29yaWVzOiBbXSxcclxuICAgICAgICBsYW5ndWFnZTogY3VycmVudExhbmd1YWdlLFxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuaGFzRHVwbGljYXRlID0gKCkgPT5cclxuICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdCAmJlxyXG4gICAgICAkc2NvcGUubmV3SXRlbS52YWx1ZSAmJlxyXG4gICAgICBfLnNvbWUoXHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdC52YWx1ZXMsXHJcbiAgICAgICAgKGFuc3dlcikgPT4gYW5zd2VyLnZhbHVlLnJlbW92ZUFsbEJ1dExldHRlcnMoKSA9PSAkc2NvcGUubmV3SXRlbS52YWx1ZS5yZW1vdmVBbGxCdXRMZXR0ZXJzKClcclxuICAgICAgKTtcclxuXHJcbiAgICAkc2NvcGUuYWRkVmFsdWUgPSAoKSA9PiB7XHJcbiAgICAgIGlmICgkc2NvcGUubmV3SXRlbS52YWx1ZSkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIF8uc29tZShcclxuICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdC52YWx1ZXMsXHJcbiAgICAgICAgICAgIChhbnN3ZXIpID0+XHJcbiAgICAgICAgICAgICAgYW5zd2VyLnZhbHVlLnJlbW92ZUFsbEJ1dExldHRlcnMoKSA9PSAkc2NvcGUubmV3SXRlbS52YWx1ZS5yZW1vdmVBbGxCdXRMZXR0ZXJzKClcclxuICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGFsZXJ0KGAkeyRzY29wZS5uZXdJdGVtLnZhbHVlfSBpcyBhbHJlYWR5IGluIHRoZSBsaXN0YCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICRzY29wZS5uZXdJdGVtLmNyZWF0b3IgPSAkc2NvcGUuY3VycmVudFVzZXIuX2lkO1xyXG4gICAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdC52YWx1ZXMudW5zaGlmdChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KCRzY29wZS5uZXdJdGVtKSkpO1xyXG4gICAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdC5hbnN3ZXJzKys7XHJcbiAgICAgICAgICAkc2NvcGUubmV3SXRlbS52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICAkc2NvcGUubmV3SXRlbS5ibHVyYiA9IFwiXCI7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLmxlbmd0aCA+PSAxMCAmJlxyXG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0Lm5hbWUgJiZcclxuICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLmxlbmd0aCA+IDBcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZUxpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICQoXCIjbmV3LXZhbHVlXCIpLmZvY3VzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5yZXBvcnRMaXN0ID0gKGxpc3QpID0+IHtcclxuICAgICAgbGlzdC5yZXBvcnRlZCA9IHRydWU7XHJcbiAgICAgIFRlblRoaW5nc1N2Yy5yZXBvcnRMaXN0KCRzY29wZS5jdXJyZW50VXNlciwgbGlzdCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zYXZlTGlzdCA9IChsaXN0KSA9PiB7XHJcbiAgICAgIGlmICghJHNjb3BlLnNhdmluZykge1xyXG4gICAgICAgIGxpc3QudmFsdWVzID0gbGlzdC52YWx1ZXMuZmlsdGVyKCh7IHZhbHVlIH0pID0+IHZhbHVlKTtcclxuICAgICAgICBpZiAobGlzdC52YWx1ZXMubGVuZ3RoID49IDEwICYmIGxpc3QubmFtZSAmJiBsaXN0LmNhdGVnb3JpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgJHNjb3BlLnNhdmluZyA9IHRydWU7XHJcbiAgICAgICAgICBUZW5UaGluZ3NTdmMuc2F2ZUxpc3QoJHNjb3BlLmN1cnJlbnRVc2VyLCBsaXN0KS50aGVuKFxyXG4gICAgICAgICAgICAoeyBkYXRhIH0pID0+IHtcclxuICAgICAgICAgICAgICBpZiAoISRzY29wZS5zZWxlY3RlZExpc3QuX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdHMudW5zaGlmdChkYXRhKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RMaXN0KGRhdGEpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8ICRzY29wZS5saXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxpc3RzW2ldLl9pZCA9PT0gZGF0YS5faWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdHNbaV0gPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0TGlzdChsaXN0KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgJHNjb3BlLnNhdmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICRzY29wZS5zYXZpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGxpc3QudmFsdWVzLmxlbmd0aCA8IDEwKSB7XHJcbiAgICAgICAgICBhbGVydChcIkxpc3RzIG11c3QgY29udGFpbiAxMCBvciBtb3JlIHZhbHVlcyFcIik7XHJcbiAgICAgICAgfSBlbHNlIGlmICghbGlzdC5uYW1lKSB7XHJcbiAgICAgICAgICBmbGFzaChcIiNsaXN0LW5hbWVcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZsYXNoKFwiLmxpc3QtY2F0ZWdvcnlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGZsYXNoKGVsZW1lbnQpIHtcclxuICAgICAgY29uc3QgY29sb3IgPSAkKGVsZW1lbnQpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIik7XHJcbiAgICAgICQoZWxlbWVudCkuYW5pbWF0ZShcclxuICAgICAgICB7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI0ZBODA3MlwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgMTAwLFxyXG4gICAgICAgICgpID0+IHtcclxuICAgICAgICAgICQoZWxlbWVudCkuYW5pbWF0ZShcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIDEwMFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLmRlbGV0ZUxpc3QgPSAobGlzdCkgPT4ge1xyXG4gICAgICBpZiAoIWxpc3QuX2lkKSB7XHJcbiAgICAgICAgJHNjb3BlLmxpc3RzID0gJHNjb3BlLmxpc3RzLmZpbHRlcigoeyBfaWQgfSkgPT4gX2lkKTtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0ID0gbnVsbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoY29uZmlybShcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBsaXN0P1wiKSkge1xyXG4gICAgICAgICAgVGVuVGhpbmdzU3ZjLmRlbGV0ZUxpc3QobGlzdCkudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgJHNjb3BlLmdldExpc3RzKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZExpc3QgPSBudWxsO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5saXN0QnV0dG9uQ2xhc3MgPSAobGlzdCkgPT4ge1xyXG4gICAgICBjb25zdCB2YWx1ZXMgPSBsaXN0LnZhbHVlcy5sZW5ndGg7XHJcbiAgICAgIGNvbnN0IGJsdXJicyA9IGxpc3QuYmx1cmJzO1xyXG4gICAgICBpZiAodmFsdWVzID09PSBibHVyYnMgJiYgbGlzdC5kZXNjcmlwdGlvbikge1xyXG4gICAgICAgIHJldHVybiBcImJ0bi1kZWZhdWx0XCI7XHJcbiAgICAgIH0gZWxzZSBpZiAoYmx1cmJzID09PSAwICYmICFsaXN0LmRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiYnRuLXdhcm5pbmdcIjtcclxuICAgICAgfSBlbHNlIGlmIChibHVyYnMgPT09IDAgJiYgbGlzdC5kZXNjcmlwdGlvbikge1xyXG4gICAgICAgIHJldHVybiBcImJ0bi1pbmZvXCI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFwiYnRuLXByaW1hcnlcIjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0TW92aWVQaWNzID0gKCkgPT4ge1xyXG4gICAgICAkc2NvcGUuZ2V0dGluZ0JsdXJicyA9IHRydWU7XHJcbiAgICAgIFRlblRoaW5nc1N2Yy5nZXRNb3ZpZVBpY3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KTtcclxuICAgICAgICAkc2NvcGUuZ2V0dGluZ0JsdXJicyA9IGZhbHNlO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLmdldFRWUGljcyA9ICgpID0+IHtcclxuICAgICAgJHNjb3BlLmdldHRpbmdCbHVyYnMgPSB0cnVlO1xyXG4gICAgICBUZW5UaGluZ3NTdmMuZ2V0VFZQaWNzKCRzY29wZS5zZWxlY3RlZExpc3QpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCk7XHJcbiAgICAgICAgJHNjb3BlLmdldHRpbmdCbHVyYnMgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRBY3RvclBpY3MgPSAoKSA9PiB7XHJcbiAgICAgICRzY29wZS5nZXR0aW5nQmx1cmJzID0gdHJ1ZTtcclxuICAgICAgVGVuVGhpbmdzU3ZjLmdldEFjdG9yUGljcygkc2NvcGUuc2VsZWN0ZWRMaXN0KS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpO1xyXG4gICAgICAgICRzY29wZS5nZXR0aW5nQmx1cmJzID0gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0Qm9va1BpY3MgPSAoKSA9PiB7XHJcbiAgICAgICRzY29wZS5nZXR0aW5nQmx1cmJzID0gdHJ1ZTtcclxuICAgICAgVGVuVGhpbmdzU3ZjLmdldEJvb2tQaWNzKCRzY29wZS5zZWxlY3RlZExpc3QpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCk7XHJcbiAgICAgICAgJHNjb3BlLmdldHRpbmdCbHVyYnMgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRNdXNpY1ZpZGVvcyA9ICgpID0+IHtcclxuICAgICAgJHNjb3BlLmdldHRpbmdCbHVyYnMgPSB0cnVlO1xyXG4gICAgICBUZW5UaGluZ3NTdmMuZ2V0TXVzaWNWaWRlb3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KTtcclxuICAgICAgICAkc2NvcGUuZ2V0dGluZ0JsdXJicyA9IGZhbHNlO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLmdldFBpY3MgPSAoKSA9PiB7XHJcbiAgICAgICRzY29wZS5nZXR0aW5nQmx1cmJzID0gdHJ1ZTtcclxuICAgICAgVGVuVGhpbmdzU3ZjLmdldFBpY3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KTtcclxuICAgICAgICAkc2NvcGUuZ2V0dGluZ0JsdXJicyA9IGZhbHNlO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgfSk7XHJcbiIsIi8qanNsaW50IGVzdmVyc2lvbjogNiovXHJcbmFuZ3VsYXJcclxuICAubW9kdWxlKFwiYXBwXCIpXHJcbiAgLy9Bbmd1bGFySnMgY2FuJ3QgaGF2ZSBhbiBhcnJvdyBmdW5jdGlvbiBoZXJlXHJcbiAgLmNvbnRyb2xsZXIoXCJUZW5UaGluZ3NBZG1pbkN0cmxcIiwgZnVuY3Rpb24gKCRzY29wZSwgVGVuVGhpbmdzU3ZjLCBVc2VyU3ZjKSB7XHJcbiAgICAkc2NvcGUuJG9uKFwibG9naW5cIiwgKF8pID0+IHtcclxuICAgICAgaWYgKCRzY29wZS5jdXJyZW50VXNlci5hZG1pbikge1xyXG4gICAgICAgIGdldFVzZXJzKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5vcmRlciA9IHtcclxuICAgICAgZmllbGQ6IFwidXNlcm5hbWVcIixcclxuICAgICAgcmV2ZXJzZTogZmFsc2UsXHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5vcmRlckJ5ID0gKGZpZWxkKSA9PiB7XHJcbiAgICAgIGlmICgkc2NvcGUub3JkZXIuZmllbGQgPT09IGZpZWxkKSB7XHJcbiAgICAgICAgJHNjb3BlLm9yZGVyLnJldmVyc2UgPSAhJHNjb3BlLm9yZGVyLnJldmVyc2U7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJHNjb3BlLm9yZGVyID0ge1xyXG4gICAgICAgICAgZmllbGQ6IGZpZWxkLFxyXG4gICAgICAgICAgcmV2ZXJzZTogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0UXVldWUgPSAoKSA9PiB7XHJcbiAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgVGVuVGhpbmdzU3ZjLmdldFF1ZXVlKCkudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAkc2NvcGUucXVldWUgPSByZXNwb25zZS5kYXRhLnJlcGxhY2UoXCIvblwiLCBcIjxici8+XCIpO1xyXG4gICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgICRzY29wZS5nZXRRdWV1ZSgpO1xyXG5cclxuICAgIFRlblRoaW5nc1N2Yy5nZXRQYXVzZSgpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICRzY29wZS5wYXVzZWQgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICBjb25zb2xlLmxvZygkc2NvcGUucGF1c2VkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGdldFVzZXJzID0gKCkgPT4ge1xyXG4gICAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XHJcbiAgICAgIFVzZXJTdmMuZ2V0VXNlcnMoKS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICRzY29wZS51c2VycyA9IHJlc3BvbnNlLmRhdGEuZmlsdGVyKCh1c2VyKSA9PiAhdXNlci5hZG1pbik7XHJcbiAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS50b2dnbGVCYW4gPSAodXNlcikgPT4ge1xyXG4gICAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XHJcbiAgICAgIFVzZXJTdmMudG9nZ2xlQmFuKHVzZXIuX2lkKS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGdldFVzZXJzKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUudG9nZ2xlUGF1c2UgPSAodXNlcikgPT4ge1xyXG4gICAgICBUZW5UaGluZ3NTdmMudG9nZ2xlUGF1c2UoKS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICRzY29wZS5wYXVzZWQgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5wYXVzZWQpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgfSk7XHJcbiIsImFuZ3VsYXJcclxuXHQubW9kdWxlKCdhcHAnKVxyXG5cdC8vQW5ndWxhckpzIGNhbid0IGhhdmUgYW4gYXJyb3cgZnVuY3Rpb24gaGVyZVxyXG5cdC5jb250cm9sbGVyKFxyXG5cdFx0J1RlblRoaW5nc0N1cmF0ZUN0cmwnLFxyXG5cdFx0ZnVuY3Rpb24gKCRzY29wZSwgVGVuVGhpbmdzU3ZjKSB7XHJcblx0XHRcdFxyXG5cdFx0XHRUZW5UaGluZ3NTdmMuZ2V0TGFuZ3VhZ2VzKCkudGhlbihyZXNwb25zZSA9PiB7XHJcblx0XHRcdFx0JHNjb3BlLmxhbmd1YWdlcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0JHNjb3BlLiRvbignbG9naW4nLCBfID0+IHtcclxuXHRcdFx0XHQkc2NvcGUuZ2V0TGlzdHMoKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdFxyXG5cdFx0XHQkc2NvcGUub3JkZXIgPSB7XHJcbiAgICAgICAgZmllbGQ6ICduYW1lJyxcclxuICAgICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICBcdFx0fTtcclxuXHJcblx0XHRcdCRzY29wZS5vcmRlckJ5ID0gKGZpZWxkKSA9PiB7XHJcblx0XHRcdFx0aWYgKCRzY29wZS5vcmRlci5maWVsZCA9PT0gZmllbGQpIHtcclxuXHRcdFx0XHRcdCRzY29wZS5vcmRlci5yZXZlcnNlID0gISRzY29wZS5vcmRlci5yZXZlcnNlO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0JHNjb3BlLm9yZGVyID0ge1xyXG5cdFx0XHRcdFx0XHRmaWVsZDogZmllbGQsXHJcblx0XHRcdFx0XHRcdHJldmVyc2U6IGZhbHNlXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdCRzY29wZS5nZXRMaXN0cyA9ICgpID0+IHtcclxuXHRcdFx0XHQkc2NvcGUubG9hZGluZyA9IHRydWU7XHJcblx0XHRcdFx0VGVuVGhpbmdzU3ZjLmdldExpc3RzKCkudGhlbigoeyBkYXRhIH0pID0+IHtcdFx0XHRcdFxyXG5cdFx0XHRcdFx0JHNjb3BlLmxpc3RzID0gZGF0YTtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGRhdGEpO1xyXG5cdFx0XHRcdFx0JHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdCRzY29wZS5zZXREaWZmaWN1bHR5ID0gKGxpc3QsIGRpZmZpY3VsdHkpID0+IHtcclxuXHRcdFx0XHRsaXN0LmRpZmZpY3VsdHkgPSBkaWZmaWN1bHR5O1xyXG5cdFx0XHRcdFRlblRoaW5nc1N2Yy51cGRhdGVMaXN0KHtcclxuXHRcdFx0XHRcdF9pZDogbGlzdC5faWQsXHJcblx0XHRcdFx0XHRkaWZmaWN1bHR5OiBkaWZmaWN1bHR5LFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0KTtcclxuIiwiYW5ndWxhclxyXG5cdC5tb2R1bGUoJ2FwcCcpXHJcblx0Ly9Bbmd1bGFySnMgY2FuJ3QgaGF2ZSBhbiBhcnJvdyBmdW5jdGlvbiBoZXJlXHJcblx0LmNvbnRyb2xsZXIoXHJcblx0XHQnVGVuVGhpbmdzR2FtZUN0cmwnLFxyXG5cdFx0ZnVuY3Rpb24gKCRzY29wZSwgJHN0YXRlUGFyYW1zLCBUZW5UaGluZ3NTdmMpIHtcclxuXHRcdFx0JHNjb3BlLiRvbignbG9naW4nLCBfID0+IHtcclxuXHRcdFx0XHRpZiAoJHNjb3BlLmN1cnJlbnRVc2VyLmFkbWluKSB7XHJcblx0XHRcdFx0XHRnZXRVc2VycygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpZiAoJHN0YXRlUGFyYW1zLmdhbWUpIHtcclxuXHRcdFx0XHRUZW5UaGluZ3NTdmMuZ2V0R2FtZSgkc3RhdGVQYXJhbXMuZ2FtZSkudGhlbihyZXNwb25zZSA9PiB7XHJcblx0XHRcdFx0XHQkc2NvcGUuZ2FtZSA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZygkc2NvcGUuZ2FtZSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHQpO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1dvcmtvdXRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xyXG5cclxuICAkc2NvcGUudGltZVJlbWFpbmluZyA9IDA7XHJcbiAgJHNjb3BlLnRpbWVFeGVyY2lzaW5nID0gMzA7XHJcbiAgJHNjb3BlLnRpbWVSZXN0aW5nID0gMTA7XHJcbiAgJHNjb3BlLnJlc3QgPSBmYWxzZTtcclxuXHJcbiAgdmFyIHNvdW5kcyA9IHtcclxuICAgIG9uOiBuZXcgQXVkaW8oJ29uLndhdicpLFxyXG4gICAgb2ZmOiBuZXcgQXVkaW8oJ29mZi53YXYnKSxcclxuICAgIHN3aXRjaDogbmV3IEF1ZGlvKCdzd2l0Y2gud2F2JyksXHJcbiAgfTtcclxuXHJcblxyXG4gIHZhciBleGVyY2lzZXMgPSBbXHJcbiAgICB7bmFtZTogJ0p1bXBpbmcgSmFja3MnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdXYWxsIFNpdCcsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1B1c2gtVXAnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdDcnVuY2gnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdTdGVwLVVwJywgc3BsaXQ6IHRydWV9LFxyXG4gICAge25hbWU6ICdTcXVhdCcsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1RyaWNlcHMgRGlwJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnUGxhbmsnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdIaWdoIEtuZWVzJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnTHVuZ2UnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdQdXNoLVVwIHdpdGggUm90YXRpb24nLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdTaWRlIFBsYW5rJywgc3BsaXQ6IHRydWV9XHJcbiAgXTtcclxuXHJcbiAgdmFyIGV4ZXJjaXNpbmc7XHJcblxyXG4gICRzY29wZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIChleGVyY2lzZXMubGVuZ3RoIC0gTWF0aC5mbG9vcigkc2NvcGUudGltZVJlbWFpbmluZyAvICgkc2NvcGUudGltZUV4ZXJjaXNpbmcgKyAkc2NvcGUudGltZVJlc3RpbmcpKSkgKyAnLycgKyBleGVyY2lzZXMubGVuZ3RoO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS53b3Jrb3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZXhjZXJjaXNlVGltZSA9ICRzY29wZS50aW1lRXhlcmNpc2luZyArICRzY29wZS50aW1lUmVzdGluZztcclxuICAgIGlmICghJHNjb3BlLnRpbWVSZW1haW5pbmcpIHtcclxuICAgICAgJHNjb3BlLnRpbWVSZW1haW5pbmcgPSBleGVyY2lzZXMubGVuZ3RoICogZXhjZXJjaXNlVGltZTtcclxuICAgICAgZXhlcmNpc2luZyA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICRzY29wZS50aW1lUmVtYWluaW5nLS07XHJcbiAgICAgICAgaWYgKCRzY29wZS50aW1lUmVtYWluaW5nID09PSAwKSB7XHJcbiAgICAgICAgICAkc2NvcGUuZXhlcmNpc2UgPSB7bmFtZTogJ0ZpbmlzaGVkISBDb25ncmF0cyEnLCBzcGxpdDogZmFsc2V9O1xyXG4gICAgICAgICAgJHNjb3BlLnRpbWVyID0gJyc7XHJcbiAgICAgICAgICAkc2NvcGUudGltZVJlbWFpbmluZyA9IDA7XHJcbiAgICAgICAgICAkc2NvcGUucmVzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgcmV0dXJuIGNsZWFySW50ZXJ2YWwoZXhlcmNpc2luZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjdXJyZW50RXhlcmNpc2UgPSBNYXRoLmZsb29yKCRzY29wZS50aW1lUmVtYWluaW5nIC8gZXhjZXJjaXNlVGltZSk7XHJcbiAgICAgICAgdmFyIHRpbWVyID0gJHNjb3BlLnRpbWVSZW1haW5pbmcgLSBjdXJyZW50RXhlcmNpc2UgKiBleGNlcmNpc2VUaW1lO1xyXG4gICAgICAgICRzY29wZS50aW1lciA9IHRpbWVyID4gJHNjb3BlLnRpbWVFeGVyY2lzaW5nID8gdGltZXIgLSAkc2NvcGUudGltZUV4ZXJjaXNpbmcgOiB0aW1lcjtcclxuICAgICAgICBpZiAodGltZXIgPiAkc2NvcGUudGltZUV4ZXJjaXNpbmcpIHtcclxuICAgICAgICAgICRzY29wZS5yZXN0ID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJHNjb3BlLnJlc3QgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLmV4ZXJjaXNlID0gZXhlcmNpc2VzW2V4ZXJjaXNlcy5sZW5ndGggLSBjdXJyZW50RXhlcmNpc2UgLSAxXTtcclxuICAgICAgICBpZiAodGltZXIgPT09ICRzY29wZS50aW1lRXhlcmNpc2luZykge1xyXG4gICAgICAgICAgc291bmRzLm9uLnBsYXkoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRpbWVyID09PSAwKSB7XHJcbiAgICAgICAgICBzb3VuZHMub2ZmLnBsYXkoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5leGVyY2lzZS5zcGxpdCAmJiB0aW1lciA9PT0gTWF0aC5mbG9vcigkc2NvcGUudGltZUV4ZXJjaXNpbmcgLyAyKSkge1xyXG4gICAgICAgICAgc291bmRzLnN3aXRjaC5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjbGVhckludGVydmFsKGV4ZXJjaXNpbmcpO1xyXG4gICAgICAkc2NvcGUudGltZXIgPSAnJztcclxuICAgICAgJHNjb3BlLnRpbWVSZW1haW5pbmcgPSAwO1xyXG4gICAgICAkc2NvcGUucmVzdCA9IGZhbHNlO1xyXG4gICAgICAkc2NvcGUuZXhlcmNpc2UgPSB7bmFtZTogJycsIHNwbGl0OiBmYWxzZX07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuXHQuZGlyZWN0aXZlKCdoZWFkJywgW1xyXG5cdFx0JyRyb290U2NvcGUnLFxyXG5cdFx0JyRzdGF0ZScsXHJcblx0XHQnJGNvbXBpbGUnLFxyXG5cdFx0JyRpbnRlcnBvbGF0ZScsXHJcblx0XHRmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHN0YXRlLCAkY29tcGlsZSwgJGludGVycG9sYXRlKSB7XHJcblxyXG5cdFx0XHR2YXIgZ2V0U3R5bGUgPSBmdW5jdGlvbiBnZXRTdHlsZSh0ZW1wbGF0ZVN0eWxlVXJsKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzdHlsZSA9IHtcclxuXHRcdFx0XHRcdGhyZWY6IHRlbXBsYXRlU3R5bGVVcmwsXHJcblx0XHRcdFx0XHRyZWw6ICdzdHlsZXNoZWV0J1xyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdGlmIChzdHlsZS5ocmVmLm1hdGNoKC9cXC5sZXNzJC8pKSB7XHJcblx0XHRcdFx0XHRzdHlsZS5yZWwgPSAnc3R5bGVzaGVldC9sZXNzJztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBzdHlsZTtcclxuXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHR2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gZ2V0U3R5bGVzKHN0YXRlKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzdGF0ZXMgPSB7fTtcclxuXHJcblx0XHRcdFx0Ly9DaGVjayBzdGF0ZSBmb3Igc3R5bGVzXHJcblx0XHRcdFx0d2hpbGUgKHN0YXRlLm5hbWUgIT09ICcnKSB7XHJcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gJHN0YXRlLmdldCgnXicsIHN0YXRlKTtcclxuXHJcblx0XHRcdFx0XHQvL0luaXRpYXRlIG91ciB2aWV3IGxpc3RcclxuXHRcdFx0XHRcdGlmICghc3RhdGVzW3BhcmVudC5uYW1lXSkge1xyXG5cdFx0XHRcdFx0XHRzdGF0ZXNbcGFyZW50Lm5hbWVdID0ge307XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly9DaGVjayB0aGUgdGVtcGxhdGVTdHlsZVxyXG5cdFx0XHRcdFx0aWYgKHN0YXRlLnRlbXBsYXRlU3R5bGVVcmwpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNbcGFyZW50Lm5hbWVdWycnXSkge1xyXG5cdFx0XHRcdFx0XHRcdHN0YXRlc1twYXJlbnQubmFtZV1bJyddID0gZ2V0U3R5bGUoc3RhdGUudGVtcGxhdGVTdHlsZVVybCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvL0NoZWNrIHZpZXdzXHJcblx0XHRcdFx0XHRpZiAoc3RhdGUudmlld3MpIHtcclxuXHRcdFx0XHRcdFx0Xy5mb3JFYWNoKHN0YXRlLnZpZXdzLCBmdW5jdGlvbiAodmlldywga2V5KSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vQ2hlY2sgaWYgd2UgaGF2ZSBhIHN0eWxlXHJcblx0XHRcdFx0XHRcdFx0aWYgKCF2aWV3LnRlbXBsYXRlU3R5bGVVcmwpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vQ2hlY2sgaWYgd2UgYXJlIHRhcmdldGluZyBzb21lIHBhcmVudFxyXG5cdFx0XHRcdFx0XHRcdGlmICgoa2V5ID0ga2V5LnNwbGl0KCdAJykpWzFdKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvL0NoZWNrIGlmIHdlIGhhdmUgc3R5bGVzIGZvciB0aGF0IHBhcmVudFxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNba2V5WzFdXSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZXNba2V5WzFdXSA9IHt9O1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vUGxhY2UgdGhlIHN0eWxlIG9uIHNvbWUgcGFyZW50J3Mgdmlld1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNba2V5WzFdXVtrZXlbMF1dKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlc1trZXlbMV1dW2tleVswXV0gPSBnZXRTdHlsZSh2aWV3LnRlbXBsYXRlU3R5bGVVcmwpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vUGxhY2UgdGhlIHN0eWxlIG9uIG91ciBwYXJlbnQncyB2aWV3XHJcblx0XHRcdFx0XHRcdFx0c3RhdGVzW3BhcmVudC5uYW1lXVtrZXlbMF1dID0gZ2V0U3R5bGUodmlldy50ZW1wbGF0ZVN0eWxlVXJsKTtcclxuXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vQ29udGludWUgd2l0aCB0aGUgcGFyZW50XHJcblx0XHRcdFx0XHRzdGF0ZSA9IHBhcmVudDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vRmxhdHRlbiB0aGUgbGlzdFxyXG5cdFx0XHRcdHZhciBmbGF0ID0gW107XHJcblx0XHRcdFx0Xy5mb3JFYWNoKHN0YXRlcywgZnVuY3Rpb24gKHZpZXdzKSB7XHJcblxyXG5cdFx0XHRcdFx0Xy5mb3JFYWNoKHZpZXdzLCBmdW5jdGlvbiAoc3R5bGUpIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmICghXy5pbmNsdWRlcyhmbGF0LCBzdHlsZSkpIHtcclxuXHRcdFx0XHRcdFx0XHRmbGF0LnB1c2goc3R5bGUpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQvL1JldmVyc2UgaXQgc28gd2UgaGF2ZSBhIHByb3BlciBoaWVyYXJjaHlcclxuXHRcdFx0XHRmbGF0LnJldmVyc2UoKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGZsYXQ7XHJcblxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRyZXN0cmljdDogJ0UnLFxyXG5cdFx0XHRcdGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbSkge1xyXG5cclxuXHRcdFx0XHRcdHNjb3BlLnRlbXBsYXRlU3R5bGVzID0gW107XHJcblxyXG5cdFx0XHRcdFx0dmFyIGh0bWwgPSAnPGxpbmsgbmctYXR0ci1yZWw9XCJ7e3N0eWxlLnJlbH19XCIgbmctcmVwZWF0PVwic3R5bGUgaW4gdGVtcGxhdGVTdHlsZXNcIiBuZy1ocmVmPVwie3tzdHlsZS5ocmVmfX1cIj4nO1xyXG5cclxuXHRcdFx0XHRcdGh0bWwgPSBodG1sLnJlcGxhY2UoL1xce1xcey9nLCAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSk7XHJcblx0XHRcdFx0XHRodG1sID0gaHRtbC5yZXBsYWNlKC9cXH1cXH0vZywgJGludGVycG9sYXRlLmVuZFN5bWJvbCgpKTtcclxuXHJcblx0XHRcdFx0XHRlbGVtLmFwcGVuZCgkY29tcGlsZShodG1sKShzY29wZSkpO1xyXG5cclxuXHRcdFx0XHRcdCRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG5cclxuXHRcdFx0XHRcdFx0c2NvcGUudGVtcGxhdGVTdHlsZXMgPSBnZXRTdHlsZXModG9TdGF0ZSk7XHJcblxyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHR9XHJcblx0XSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnQ2F0ZWdvcmllc1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZ2V0Q2F0ZWdvcmllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2F0ZWdvcmllcycpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRUYXNrcyA9IGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jYXRlZ29yaWVzLycgKyBjYXRlZ29yeSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmFkZENhdGVnb3J5ID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jYXRlZ29yaWVzLycsIGNhdGVnb3J5KTtcclxuICB9O1xyXG5cclxuICBzdmMuYWRkVGFzayA9IGZ1bmN0aW9uIChjYXRlZ29yeSwgdGFzaykge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY2F0ZWdvcmllcy8nICsgY2F0ZWdvcnkgKyAnL3Rhc2tzJywgdGFzayk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLnNldFByaW9yaXR5TGlzdCA9IGZ1bmN0aW9uKGxpc3QpIHtcclxuICAgIHN2Yy5jaG9pY2VzID0gbGlzdDtcclxuICAgIHN2Yy5wcmlvcml0eUxpc3QgPSBbXTtcclxuICAgIC8vTWFrZSBhIG5ldyBjaG9pY2UgbGlzdFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IGxpc3QubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICB2YXIgcmFuZG9tID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKTtcclxuICAgICAgICBzdmMucHJpb3JpdHlMaXN0LnB1c2goe1xyXG4gICAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgICBmaXJzdENob2ljZTogbGlzdFtyYW5kb20gPT09IDAgPyBpIDogal0ubmFtZSxcclxuICAgICAgICAgIHNlY29uZENob2ljZTogbGlzdFtyYW5kb20gPT09IDAgPyBqIDogaV0ubmFtZSxcclxuICAgICAgICAgIGNob2ljZTogJydcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2h1ZmZsZShzdmMucHJpb3JpdHlMaXN0KTtcclxuICAgIGZvciAoaSBpbiBzdmMucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHN2Yy5wcmlvcml0eUxpc3RbaV0uaWQgPSBpICsgMTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzdmMuZ2V0UHJpb3JpdHlMaXN0ID0gZnVuY3Rpb24obGlzdCkge1xyXG4gICAgcmV0dXJuIHN2Yy5wcmlvcml0eUxpc3Q7XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xyXG4gICAgdmFyIG0gPSBhcnJheS5sZW5ndGgsIHQsIGk7XHJcbiAgICAvLyBXaGlsZSB0aGVyZSByZW1haW4gZWxlbWVudHMgdG8gc2h1ZmZsZeKAplxyXG4gICAgd2hpbGUgKG0pIHtcclxuICAgICAgLy8gUGljayBhIHJlbWFpbmluZyBlbGVtZW504oCmXHJcbiAgICAgIGkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtLS0pO1xyXG4gICAgICAvLyBBbmQgc3dhcCBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQuXHJcbiAgICAgIC8vYXJyYXlbbV0uZmlyc3RDaG9pY2U7XHJcbiAgICAgIHQgPSBhcnJheVttXTtcclxuICAgICAgYXJyYXlbbV0gPSBhcnJheVtpXTtcclxuICAgICAgYXJyYXlbaV0gPSB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH1cclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLnNlcnZpY2UoJ0VtYWlsU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gIHN2Yy5zZW5kID0gZnVuY3Rpb24gKGVtYWlsKSB7XHJcbiAgICBjb25zb2xlLmxvZyhlbWFpbCk7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9lbWFpbCcsIGVtYWlsKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gIC5zZXJ2aWNlKCdGaWxlU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgICBzdmMuZ2V0SW1hZ2VzID0gZnVuY3Rpb24oZm9sZGVyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvZmlsZXMvaW1hZ2VzLycgKyBmb2xkZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuZ2V0U291bmRzID0gZnVuY3Rpb24oZm9sZGVyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvZmlsZXMvc291bmRzLycgKyBmb2xkZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdHYW1lU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgICBzdmMuZ2V0SGlnaHNjb3JlID0gZnVuY3Rpb24gKGdhbWUsIHVzZXIpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9nYW1lcy8nICsgZ2FtZSArICcvJyArIHVzZXIgKyAnL2hpZ2hzY29yZScpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuc2V0SGlnaHNjb3JlID0gZnVuY3Rpb24gKGdhbWUsIHVzZXIsIHNjb3JlKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2dhbWVzLycgKyBnYW1lICsgJy8nICsgdXNlciArICcvaGlnaHNjb3JlJywge1xyXG4gICAgICAgIHNjb3JlOiBzY29yZVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdMYW5ndWFnZVN2YycsIGZ1bmN0aW9uKCkge1xyXG5cclxuICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgc3ZjLmxhbmd1YWdlcyA9IFtcclxuICAgIHtcclxuICAgICAgXCJjb2RlXCI6IFwiRU5cIixcclxuICAgICAgXCJuYW1lXCI6IFwiRW5nbGlzaFwiLFxyXG4gICAgICBcImZsYWdcIjogXCJmbGFnLWljb24tZ2JcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJjb2RlXCI6IFwiTkxcIixcclxuICAgICAgXCJuYW1lXCI6IFwiTmVkZXJsYW5kc1wiLFxyXG4gICAgICBcImZsYWdcIjogXCJmbGFnLWljb24tbmxcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJjb2RlXCI6IFwiRlJcIixcclxuICAgICAgXCJuYW1lXCI6IFwiRnJhbsOnYWlzXCIsXHJcbiAgICAgIFwiZmxhZ1wiOiBcImZsYWctaWNvbi1mclwiXHJcbiAgICB9XHJcbiAgXTtcclxuXHJcbiAgc3ZjLnRleHQgPSBbXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIkVOXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIk5MXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIkZSXCJcclxuICAgIH1cclxuICBdO1xyXG5cclxuICBzdmMuc2VsZWN0ZWRMYW5ndWFnZSA9IHN2Yy5sYW5ndWFnZXNbMF07XHJcblxyXG4gIHN2Yy5zZXRMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5ndWFnZSkge1xyXG4gICAgc3ZjLnNlbGVjdGVkTGFuZ3VhZ2UgPSBsYW5ndWFnZTtcclxuICAgIHJldHVybiBsYW5ndWFnZTtcclxuICB9O1xyXG5cclxuICBzdmMuZ2V0TGFuZ3VhZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gc3ZjLnNlbGVjdGVkTGFuZ3VhZ2U7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLnNlcnZpY2UoJ1Bvc3RzU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gIHN2Yy5mZXRjaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKTtcclxuICB9O1xyXG5cclxuICBzdmMuY3JlYXRlID0gZnVuY3Rpb24gKHBvc3QpIHtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldFBvc3QgPSBmdW5jdGlvbiAocG9zdCkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cy8nICsgcG9zdC5faWQpO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpLnNlcnZpY2UoJ1RlblRoaW5nc1N2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZ2V0UXVldWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYm90cy90ZW50aGluZ3MvcXVldWVgKTtcclxuICB9O1xyXG5cclxuICBzdmMuZ2V0TGlzdHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9saXN0c2ApO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRDYXRlZ29yaWVzID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvY2F0ZWdvcmllc2ApO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRMYW5ndWFnZXMgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9sYW5ndWFnZXNgKTtcclxuICB9O1xyXG5cclxuICBzdmMuZ2V0TGlzdCA9IGZ1bmN0aW9uIChsaXN0KSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3RlbnRoaW5ncy9saXN0cy8nICsgbGlzdC5faWQpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy51cGRhdGVMaXN0ID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3RlbnRoaW5ncy9saXN0cy8nICsgbGlzdC5faWQsIGxpc3QpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5zYXZlTGlzdCA9IGZ1bmN0aW9uICh1c2VyLCBsaXN0KSB7XHJcbiAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL3RlbnRoaW5ncy9saXN0cycsIHtcclxuICAgICAgdXNlcjogdXNlcixcclxuICAgICAgbGlzdDogbGlzdCxcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5yZXBvcnRMaXN0ID0gZnVuY3Rpb24gKHVzZXIsIGxpc3QpIHtcclxuICAgICRodHRwLmdldCgnL2FwaS90ZW50aGluZ3MvbGlzdHMvJyArIGxpc3QuX2lkICsgJy9yZXBvcnQvJyArIHVzZXIuX2lkKTtcclxuICB9O1xyXG5cclxuICBzdmMuZGVsZXRlTGlzdCA9IGZ1bmN0aW9uIChsaXN0KSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL3RlbnRoaW5ncy9saXN0cy8nICsgbGlzdC5faWQpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRNb3ZpZVBpY3MgPSBmdW5jdGlvbiAobGlzdCkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvbGlzdHMvJHtsaXN0Ll9pZH0vbW92aWVzYCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldFRWUGljcyA9IGZ1bmN0aW9uIChsaXN0KSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9saXN0cy8ke2xpc3QuX2lkfS90dmApO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRBY3RvclBpY3MgPSBmdW5jdGlvbiAobGlzdCkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvbGlzdHMvJHtsaXN0Ll9pZH0vYWN0b3JzYCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldEJvb2tQaWNzID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvdGVudGhpbmdzL2xpc3RzLyR7bGlzdC5faWR9L2Jvb2tzYCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldE11c2ljVmlkZW9zID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvdGVudGhpbmdzL2xpc3RzLyR7bGlzdC5faWR9L211c2ljdmlkZW9zYCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldFBpY3MgPSBmdW5jdGlvbiAobGlzdCkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvbGlzdHMvJHtsaXN0Ll9pZH0vcGljc2ApO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRQYXVzZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvdGVudGhpbmdzL3BhdXNlYCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLnRvZ2dsZVBhdXNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoYC9hcGkvdGVudGhpbmdzL3BhdXNlYCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldEdhbWUgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvdGVudGhpbmdzL2dhbWUvJHtpZH1gKTtcclxuICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbigkaHR0cCkge1xyXG5cclxuICAgIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICAgIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmdldFVzZXJzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvYWxsJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy50b2dnbGVCYW4gPSBmdW5jdGlvbihpZCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3VzZXJzL2Jhbi8ke2lkfWApO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuc2V0VG9rZW4gPSBmdW5jdGlvbih0b2tlbikge1xyXG4gICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB0b2tlbjtcclxuICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5hdXRoZW50aWNhdGUgPSBmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzL2F1dGhlbnRpY2F0ZScsIHtcclxuICAgICAgICB1c2VyOiB1c2VyXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICByZXR1cm4gc3ZjLnNldFRva2VuKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmxvZ2luID0gZnVuY3Rpb24odXNlcikge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzLycgKyB1c2VyICsgJy9sb2dpbicpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW4gPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgcmV0dXJuIHN2Yy5zZXRUb2tlbihyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLnVwZGF0ZVVzZXIgPSBmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzLycgKyB1c2VyLl9pZCwge1xyXG4gICAgICAgIHVzZXI6IHVzZXJcclxuICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gc3ZjLmdldFVzZXIoKTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5jaGVja1Bhc3N3b3JkID0gZnVuY3Rpb24odXNlciwgcGFzc3dvcmQpIHtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvJyArIHVzZXIgKyAnL3ZlcmlmaWNhdGlvbicsIHtcclxuICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5jaGFuZ2VQYXNzd29yZCA9IGZ1bmN0aW9uKHVzZXIsIG9sZFBhc3N3b3JkLCBuZXdQYXNzd29yZCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy8nICsgdXNlciArICcvcGFzc3dvcmQnLCB7XHJcbiAgICAgICAgb2xkUGFzc3dvcmQ6IG9sZFBhc3N3b3JkLFxyXG4gICAgICAgIG5ld1Bhc3N3b3JkOiBuZXdQYXNzd29yZFxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmNoYW5nZVVzZXJuYW1lID0gZnVuY3Rpb24odXNlciwgbmV3VXNlcm5hbWUpIHtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvJyArIHVzZXIgKyAnL3VzZXJuYW1lJywge1xyXG4gICAgICAgIG5ld1VzZXJuYW1lOiBuZXdVc2VybmFtZVxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmxvZ291dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcbiAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9ICcnO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuY3JlYXRlVXNlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2VycycsIHtcclxuICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXHJcbiAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gIC5jb250cm9sbGVyKCdRdWl6QW5pbWFsc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsIEZpbGVTdmMpIHtcclxuXHJcbiAgICBGaWxlU3ZjLmdldFNvdW5kcygnYW5pbWFscycpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgJHNjb3BlLmFuaW1hbHMgPSBfLnNodWZmbGUocmVzcG9uc2UuZGF0YS5tYXAoYW5pbWFsID0+ICh7XHJcbiAgICAgICAgICBzb3VuZDogYW5pbWFsLFxyXG4gICAgICAgICAgbmFtZTogYW5pbWFsLnN1YnN0cmluZygwLCBhbmltYWwuaW5kZXhPZignLicpKS5yZXBsYWNlKCdfJywgJyAnKS5jYXBpdGFsaXplKClcclxuICAgICAgICB9KSkpO1xyXG4gICAgICAgIGZvciAobGV0IGFuaW1hbCBvZiAkc2NvcGUuYW5pbWFscykge1xyXG4gICAgICAgICAgYW5pbWFsLmFuc3dlcnMgPSBfLnNodWZmbGUoW2FuaW1hbC5uYW1lLCAuLi5nZXRSYW5kb21BbmltYWxzKGFuaW1hbC5uYW1lKV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuYW5pbWFscyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5ndWVzcyA9IChhbmltYWwsIGd1ZXNzKSA9PiB7XHJcbiAgICAgIGFuaW1hbC5ndWVzcyA9IGd1ZXNzO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBnZXRSYW5kb21BbmltYWxzID0gbmFtZSA9PiBfLnNodWZmbGUoJHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbCA9PiBuYW1lICE9PSBhbmltYWwubmFtZSkubWFwKGFuaW1hbCA9PiBhbmltYWwubmFtZSkpLnNsaWNlKDAsIDUpO1xyXG5cclxuICAgICRzY29wZS5nZXRTY29yZSA9ICgpID0+IGAkeyRzY29wZS5hbmltYWxzLmZpbHRlcihhbmltYWwgPT4gYW5pbWFsLm5hbWUgPT09IGFuaW1hbC5ndWVzcykubGVuZ3RofS8keyRzY29wZS5hbmltYWxzLmxlbmd0aH1gO1xyXG5cclxuICAgICRzY29wZS5pc1Njb3JlVmlzaWJsZSA9ICgpID0+ICRzY29wZS5hbmltYWxzLmZpbHRlcihhbmltYWwgPT4gYW5pbWFsLmd1ZXNzKS5sZW5ndGggPT09ICRzY29wZS5hbmltYWxzLmxlbmd0aDtcclxuICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1F1aXpHb29nbGVDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgRmlsZVN2Yykge1xyXG4gIEZpbGVTdmMuZ2V0SW1hZ2VzKCdnb29nbGUnKVxyXG4gIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAkc2NvcGUuaW1hZ2VzID0gcmVzcG9uc2UuZGF0YTtcclxuICB9KTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUXVpekxvZ29zQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEZpbGVTdmMpIHtcclxuICBGaWxlU3ZjLmdldEltYWdlcygnbG9nb3MnKVxyXG4gIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAkc2NvcGUuaW1hZ2VzID0gcmVzcG9uc2UuZGF0YTtcclxuICB9KTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUXVpek1vdmllc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBGaWxlU3ZjKSB7XHJcbiAgRmlsZVN2Yy5nZXRJbWFnZXMoJ21vdmllcycpXHJcbiAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICRzY29wZS5pbWFnZXMgPSByZXNwb25zZS5kYXRhO1xyXG4gIH0pO1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgLmNvbnRyb2xsZXIoJ1F1aXpTa2VsZXRvbnNDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBGaWxlU3ZjKSB7XHJcblxyXG4gICAgRmlsZVN2Yy5nZXRJbWFnZXMoJ3NrZWxldG9ucycpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgJHNjb3BlLmFuaW1hbHMgPSBfLnNodWZmbGUocmVzcG9uc2UuZGF0YS5tYXAoYW5pbWFsID0+ICh7XHJcbiAgICAgICAgICBpbWFnZTogYW5pbWFsLFxyXG4gICAgICAgICAgbmFtZTogYW5pbWFsLnN1YnN0cmluZygwLCBhbmltYWwuaW5kZXhPZignLicpKS5yZXBsYWNlKCdfJywgJyAnKS5jYXBpdGFsaXplKClcclxuICAgICAgICB9KSkpO1xyXG4gICAgICAgIGZvciAobGV0IGFuaW1hbCBvZiAkc2NvcGUuYW5pbWFscykge1xyXG4gICAgICAgICAgYW5pbWFsLmFuc3dlcnMgPSBfLnNodWZmbGUoW2FuaW1hbC5uYW1lLCAuLi5nZXRSYW5kb21BbmltYWxzKGFuaW1hbC5uYW1lKV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuYW5pbWFscyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5ndWVzcyA9IChhbmltYWwsIGd1ZXNzKSA9PiB7XHJcbiAgICAgIGFuaW1hbC5ndWVzcyA9IGd1ZXNzO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBnZXRSYW5kb21BbmltYWxzID0gbmFtZSA9PiBfLnNodWZmbGUoJHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbCA9PiBuYW1lICE9PSBhbmltYWwubmFtZSkubWFwKGFuaW1hbCA9PiBhbmltYWwubmFtZSkpLnNsaWNlKDAsIDEwKTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0U2NvcmUgPSAoKSA9PiBgJHskc2NvcGUuYW5pbWFscy5maWx0ZXIoYW5pbWFsID0+IGFuaW1hbC5uYW1lID09PSBhbmltYWwuZ3Vlc3MpLmxlbmd0aH0vJHskc2NvcGUuYW5pbWFscy5sZW5ndGh9YDtcclxuXHJcbiAgICAkc2NvcGUuaXNTY29yZVZpc2libGUgPSAoKSA9PiAkc2NvcGUuYW5pbWFscy5maWx0ZXIoYW5pbWFsID0+IGFuaW1hbC5ndWVzcykubGVuZ3RoID09PSAkc2NvcGUuYW5pbWFscy5sZW5ndGg7XHJcbiAgfSk7Il19
