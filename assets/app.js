var defaultDiacriticsRemovalMap = [{
  base: "A",
  letters: /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g
}, {
  base: "AA",
  letters: /[\uA732]/g
}, {
  base: "AE",
  letters: /[\u00C6\u01FC\u01E2]/g
}, {
  base: "AO",
  letters: /[\uA734]/g
}, {
  base: "AU",
  letters: /[\uA736]/g
}, {
  base: "AV",
  letters: /[\uA738\uA73A]/g
}, {
  base: "AY",
  letters: /[\uA73C]/g
}, {
  base: "B",
  letters: /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g
}, {
  base: "C",
  letters: /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g
}, {
  base: "D",
  letters: /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g
}, {
  base: "DZ",
  letters: /[\u01F1\u01C4]/g
}, {
  base: "Dz",
  letters: /[\u01F2\u01C5]/g
}, {
  base: "E",
  letters: /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g
}, {
  base: "F",
  letters: /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g
}, {
  base: "G",
  letters: /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g
}, {
  base: "H",
  letters: /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g
}, {
  base: "I",
  letters: /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g
}, {
  base: "J",
  letters: /[\u004A\u24BF\uFF2A\u0134\u0248]/g
}, {
  base: "K",
  letters: /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g
}, {
  base: "L",
  letters: /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g
}, {
  base: "LJ",
  letters: /[\u01C7]/g
}, {
  base: "Lj",
  letters: /[\u01C8]/g
}, {
  base: "M",
  letters: /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g
}, {
  base: "N",
  letters: /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g
}, {
  base: "NJ",
  letters: /[\u01CA]/g
}, {
  base: "Nj",
  letters: /[\u01CB]/g
}, {
  base: "O",
  letters: /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g
}, {
  base: "OI",
  letters: /[\u01A2]/g
}, {
  base: "OO",
  letters: /[\uA74E]/g
}, {
  base: "OU",
  letters: /[\u0222]/g
}, {
  base: "P",
  letters: /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g
}, {
  base: "Q",
  letters: /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g
}, {
  base: "R",
  letters: /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g
}, {
  base: "S",
  letters: /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g
}, {
  base: "T",
  letters: /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g
}, {
  base: "TZ",
  letters: /[\uA728]/g
}, {
  base: "U",
  letters: /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g
}, {
  base: "V",
  letters: /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g
}, {
  base: "VY",
  letters: /[\uA760]/g
}, {
  base: "W",
  letters: /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g
}, {
  base: "X",
  letters: /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g
}, {
  base: "Y",
  letters: /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g
}, {
  base: "Z",
  letters: /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g
}, {
  base: "a",
  letters: /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
}, {
  base: "aa",
  letters: /[\uA733]/g
}, {
  base: "ae",
  letters: /[\u00E6\u01FD\u01E3]/g
}, {
  base: "ao",
  letters: /[\uA735]/g
}, {
  base: "au",
  letters: /[\uA737]/g
}, {
  base: "av",
  letters: /[\uA739\uA73B]/g
}, {
  base: "ay",
  letters: /[\uA73D]/g
}, {
  base: "b",
  letters: /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g
}, {
  base: "c",
  letters: /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
}, {
  base: "d",
  letters: /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
}, {
  base: "dz",
  letters: /[\u01F3\u01C6]/g
}, {
  base: "e",
  letters: /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
}, {
  base: "f",
  letters: /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g
}, {
  base: "g",
  letters: /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
}, {
  base: "h",
  letters: /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
}, {
  base: "hv",
  letters: /[\u0195]/g
}, {
  base: "i",
  letters: /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
}, {
  base: "j",
  letters: /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g
}, {
  base: "k",
  letters: /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
}, {
  base: "l",
  letters: /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
}, {
  base: "lj",
  letters: /[\u01C9]/g
}, {
  base: "m",
  letters: /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g
}, {
  base: "n",
  letters: /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
}, {
  base: "nj",
  letters: /[\u01CC]/g
}, {
  base: "o",
  letters: /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
}, {
  base: "oi",
  letters: /[\u01A3]/g
}, {
  base: "ou",
  letters: /[\u0223]/g
}, {
  base: "oo",
  letters: /[\uA74F]/g
}, {
  base: "p",
  letters: /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g
}, {
  base: "q",
  letters: /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g
}, {
  base: "r",
  letters: /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
}, {
  base: "s",
  letters: /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
}, {
  base: "t",
  letters: /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
}, {
  base: "tz",
  letters: /[\uA729]/g
}, {
  base: "u",
  letters: /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
}, {
  base: "v",
  letters: /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g
}, {
  base: "vy",
  letters: /[\uA761]/g
}, {
  base: "w",
  letters: /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g
}, {
  base: "x",
  letters: /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g
}, {
  base: "y",
  letters: /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
}, {
  base: "z",
  letters: /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
}];

String.prototype.removeDiacritics = function () {
  return defaultDiacriticsRemovalMap.reduce((result, letter) => result.replace(letter.letters, letter.base), this);
};

const SPECIAL_CHARACTERS = "\\\\/ !?@#$%^&*()_+:.{},;\\-'``’‘\"";
String.prototype.removeSpecialCharacters = function () {
  return this.replace(new RegExp(`[${SPECIAL_CHARACTERS}]`, "gi"), "");
}, String.prototype.removeAllButLetters = function () {
  return this.toLowerCase().removeDiacritics().removeSpecialCharacters();
}, String.prototype.conceal = function (extra) {
  return this.replace(new RegExp(`[^${SPECIAL_CHARACTERS}${extra}]`, "gi"), "*");
}, String.prototype.capitalize = function () {
  return this.charAt(0).toUpperCase() + this.slice(1);
}, String.prototype.removeHTML = function () {
  return this.replace(">", "≻").replace("<", "≺");
}, Number.prototype.makeReadable = function () {
  return this.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

const sortObject = (obj, direction) => {
  let arr = [];

  for (const key in obj) arr.push([key, obj[key]]);

  arr.sort((a, b) => direction ? a[1] - b[1] : b[1] - a[1]);
  let objSorted = {};
  return arr.forEach(item => objSorted[item[0]] = item[1]), objSorted;
};

angular.module("app", ["ui.router", "ui.bootstrap", "ngAnimate", "ngSanitize", "ngDragDrop", "ngTagsInput", "vcRecaptcha", "chart.js", "tc.chartjs"]), angular.module("app").config(["$stateProvider", "$urlRouterProvider", "$urlServiceProvider", "$locationProvider", function ($stateProvider, $urlRouterProvider, $urlServiceProvider, $locationProvider) {
  $urlRouterProvider.otherwise("/home"), $urlServiceProvider.config.strictMode(!1), $stateProvider.state("home", {
    url: "/home",
    templateUrl: "/home.html"
  }).state("policy", {
    url: "/policy",
    templateUrl: "/policy.html"
  }).state("print", {
    url: "/print",
    templateUrl: "/print.html"
  }).state("experience", {
    url: "/experience",
    controller: "ExperienceCtrl",
    templateUrl: "/experience.html"
  }).state("skills", {
    url: "/skills",
    controller: "SkillsCtrl",
    templateUrl: "/skills.html"
  }).state("hobbies", {
    url: "/hobbies",
    controller: "HobbiesCtrl",
    templateUrl: "/hobbies.html"
  }).state("contact", {
    url: "/contact",
    controller: "ContactCtrl",
    templateUrl: "/contact.html"
  }).state("workout", {
    url: "/workout",
    controller: "WorkoutCtrl",
    templateUrl: "/workout.html"
  }).state("posts", {
    url: "/posts",
    controller: "PostsCtrl",
    templateUrl: "/posts.html"
  }).state("profile", {
    url: "/profile",
    controller: "ProfileCtrl",
    templateUrl: "/profile.html"
  }).state("lists", {
    url: "/lists",
    controller: "ListsCtrl",
    templateUrl: "lists.html"
  }).state("prioritize", {
    url: "/prioritize",
    controller: "PrioritizeCtrl",
    templateUrl: "prioritize.html"
  }).state("bubbles", {
    url: "/bubbles",
    controller: "BubblesCtrl",
    templateUrl: "bubbles.html"
  }).state("asteroids", {
    url: "/asteroids",
    controller: "AsteroidsCtrl",
    templateUrl: "asteroids.html"
  }).state("lemmings", {
    url: "/lemmings",
    controller: "LemmingsCtrl",
    templateUrl: "lemmings.html"
  }).state("bots", {
    url: "/bots",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("tenthings", {
    url: "/tenthings",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("tenthings-admin", {
    url: "/tenthings-admin",
    controller: "TenThingsAdminCtrl",
    templateUrl: "tenthings-admin.html"
  }).state("quiz-google", {
    url: "/google",
    controller: "QuizGoogleCtrl",
    templateUrl: "quizzes/google.html"
  }).state("quiz-logos", {
    url: "/logos",
    controller: "QuizLogosCtrl",
    templateUrl: "quizzes/logos.html"
  }).state("quiz-animals", {
    url: "/animals",
    controller: "QuizAnimalsCtrl",
    templateUrl: "quizzes/animals.html"
  }), $locationProvider.html5Mode({
    enabled: !0,
    requireBase: !1
  });
}]), angular.module("app").service("WebSocketSvc", ["$rootScope", "$timeout", function ($rootScope, $timeout) {
  var connection,
      connect = function () {
    (connection = new WebSocket("https:" === window.location.protocol ? "wss://" + window.location.host : "ws://" + window.location.host)).onopen = function () {
      console.log("Websocket connected");
    }, connection.onclose = function (e) {
      console.log("Websocket closed. Reconnecting..."), $timeout(connect, 1e3);
    }, connection.onerror = function (e) {
      console.log("Error: " + e + " - State: " + connection.readyState);
    }, connection.onmessage = function (e) {
      var payload = JSON.parse(e.data);
      $rootScope.$broadcast("ws:" + payload.topic, payload.data);
    };
  };

  this.send = function (topic, data) {
    var json = JSON.stringify({
      topic,
      data
    });
    connection.send(json);
  }, this.connect = connect;
}]).run(["WebSocketSvc", function (WebSocketSvc) {
  WebSocketSvc.connect();
}]), angular.module("app").controller("AppCtrl", ["$scope", "$location", "LanguageSvc", "UserSvc", function ($scope, $location, LanguageSvc, UserSvc) {
  function login(user) {
    $scope.loggedIn || (window.localStorage.user = user._id, $scope.loggedIn = !0, $scope.currentUser = user, $scope.$broadcast("login"));
  }

  console.log("%cYou sneaky bugger!", "font: 2em sans-serif; color: DodgerBlue; text-shadow: 2px 0 0 #444, -2px 0 0 #444, 0 2px 0 #444, 0 -2px 0 #444, 1px 1px #444, -1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444;"), console.log("I'm glad you're curious whether something is popping up in here. I'm a bit of a stickler when it comes to messages in the console so I try to make sure only things I want are visible. That being said, if there is a big error here, I would really appreciate you telling me so I can get rid of it!"), console.log("The code for my resume is hosted on Github if you really want to go into all this! => https://github.com/FlandersBurger/resume"), $(window).load(function () {
    $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
  }), $scope.themeCounter = 6, $scope.today = new Date(), $scope.year = $scope.today.getFullYear(), $scope.random = Math.floor(1e6 * Math.random()), $scope.flipTheme = function () {
    $(".loading").show(), $(".content").hide(), setTimeout(function () {
      $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
    }, 800), $scope.themeCounter = $scope.themeCounter < 6 ? $scope.themeCounter + 1 : $scope.themeCounter = 1;
  }, $.getJSON("/skills.json", function (data) {
    $scope.skills = data.filter(function (skill) {
      return skill.enabled;
    });
  }), $.getJSON("/hobbies.json", function (data) {
    $scope.hobbies = data;
  }), $.getJSON("/experience.json", function (data) {
    $scope.jobs = data, $scope.jobs.forEach(function (job) {
      job.startDate = new Date(job.startDate), job.endDate && (job.endDate = new Date(job.endDate));
    });
  }), $scope.getTimeSpan = function (job) {
    return job.startDate.getFullYear() + (job.endDate ? " - " + job.endDate.getFullYear() : " - Today");
  }, $scope.languages = LanguageSvc.languages, $scope.selectedLanguage = LanguageSvc.getLanguage(), $scope.selectLanguage = function (language) {
    $scope.selectedLanguage = LanguageSvc.setLanguage(language);
  }, $scope.hoverdiv = function (e, divid) {
    var left = e.clientX + "px",
        top = e.clientY + 20 + "px";
    document.getElementById(divid);
    return $("#" + divid).css("left", left), $("#" + divid).css("top", top), $("#" + divid).toggle(), !1;
  }, $scope.socialMedia = [{
    name: "linkedin",
    url: "https://www.linkedin.com/in/laurent-debacker-1633a916",
    icon: "fa-linkedin"
  }, {
    name: "github",
    url: "https://github.com/FlandersBurger",
    icon: "fa-github"
  }, {
    name: "jsfiddle",
    url: "https://jsfiddle.net/user/BelgoCanadian/fiddles/",
    icon: "fa-jsfiddle"
  }, {
    name: "stackoverflow",
    url: "http://stackoverflow.com/users/1083923/belgocanadian",
    icon: "fa-stack-overflow"
  }], window.localStorage.user && UserSvc.login(window.localStorage.user).then(function (response) {
    login(response.data);
  }), $scope.$on("login", function (_, user) {
    login(user);
  }), $scope.$on("update", function (_, user) {
    $scope.currentUser = user, $scope.currentUser.birthDate = new Date($scope.currentUser.birthDate), $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.$on("loading", function (_, user) {
    $scope.loading = !0, $("#loading-icon").show();
  }), $scope.$on("loaded", function (_, user) {
    $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.logout = function () {
    firebase.auth().signOut().then(function () {
      $scope.loggedIn = !1, window.localStorage.clear(), $scope.$broadcast("logout");
    }).catch(function (error) {});
  }, $scope.formatDate = function (date) {
    return (date = new Date(date)).getDate() + "-" + ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][date.getMonth()] + "-" + date.getFullYear();
  }, String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };
}]), angular.module("app").controller("AsteroidsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  $scope.announce = !1;
  var canvas = document.getElementById("asteroids-page"),
      ctx = canvas.getContext("2d");
  ctx.font = "30px Comic Sans MS", ctx.fillStyle = "red", ctx.textAlign = "center";
  var shots = {},
      asteroids = {},
      powerups = {},
      explosions = {},
      map = {},
      space = Math.floor(10 * Math.random()),
      powerupTypes = [{
    name: "speed",
    announcement: "Max Speed ⇧",
    cycle: {
      rows: 1,
      columns: 4,
      size: [14, 35],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.maxSpeed += 100;
    }
  }, {
    name: "cooldown",
    announcement: "Cooldown ⇩",
    cycle: {
      rows: 1,
      columns: 3,
      size: [17, 17],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.cooldown > 0 && (spaceship.cooldownTime -= 1);
    }
  }, {
    name: "range",
    announcement: "Firing Range ⇧",
    cycle: {
      rows: 4,
      columns: 1,
      size: [30, 8],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.range += 5;
    }
  }, {
    name: "shield",
    announcement: "Shield",
    cycle: {
      rows: 5,
      columns: 1,
      size: [19, 19],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.shield = !0;
    }
  }, {
    name: "nuke",
    announcement: "Nuke",
    cycle: {
      rows: 1,
      columns: 8,
      size: [15, 15],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      for (var i in asteroids) asteroids[i].explode();

      spawnAsteroids(5);
    }
  }];
  powerupTypes.forEach(function (powerup, i, array) {
    array[i].img.src = "asteroids/" + powerup.name + ".png";
  });
  var spaceship,
      explosionImage = new Image();

  function evaluateKeys() {
    $scope.playing ? (map[32] && 0 === spaceship.cooldown && spaceship.shoot(), map[37] && (0 === spaceship.rotation ? spaceship.rotation = 360 : spaceship.rotation -= 3), map[39] && (360 === spaceship.rotation ? spaceship.rotation = 0 : spaceship.rotation += 3), map[38] ? spaceship.speed <= spaceship.maxSpeed && (spaceship.speed += 5) : spaceship.speed > 0 && spaceship.speed--, map[40] && spaceship.speed > 0 && (spaceship.speed -= 2)) : map[32] && ($scope.playing = !0, $scope.score = 0, space = Math.floor(10 * Math.random()), $scope.$apply(), spaceship = new Spaceship(), $scope.score = 0, spawnAsteroids(5), function autoSpawn() {
      if (Object.keys(asteroids).length < 200) {
        var id = Math.round(1e8 * Math.random());
        asteroids[id] = new Asteroid(id);
      }

      $scope.playing && setTimeout(function () {
        autoSpawn();
      }, $scope.score < 1e3 ? 1e3 : $scope.score < 2e3 ? 900 : $scope.score < 3e3 ? 800 : $scope.score < 4e3 ? 700 : $scope.score < 5e3 ? 600 : $scope.score < 6e3 ? 500 : $scope.score < 7e3 ? 400 : $scope.score < 8e3 ? 300 : 200);
    }());
  }

  function Spaceship() {
    this.width = 50, this.height = 50, this.shield = !1, this.range = 80, this.cannon = {
      x: this.width / 2 - 4.5,
      y: this.height / 2 - .078125 * this.height
    }, this.cooldown = 0, this.cooldownTime = 20, this.position = [canvas.width / 2 - this.width / 2, canvas.height / 2 - this.height / 2], this.img = new Image(), this.img.src = "asteroids/spaceship.png", this.speed = 0, this.maxSpeed = 1e3, this.angle = 0, this.rotation = 0, this.shoot = function () {
      this.cooldown = this.cooldownTime;
      var id = Math.round(1e8 * Math.random());
      shots[id] = new Shot(id, this);
    }, this.move = function () {
      for (var i in this.shield && (ctx.beginPath(), ctx.arc(this.position[0] + this.width / 2, this.position[1] + this.height / 2, 30, 0, 2 * Math.PI), ctx.fillStyle = "rgb(35, 237, 86, 0.5)", ctx.strokeStyle = "rgb(66, 168, 36, 0.8)", ctx.lineWidth = 5, ctx.stroke(), ctx.fill()), asteroids) {
        var asteroid = asteroids[i];

        if (hit(asteroid, this)) {
          if (!this.shield) return gameOver();
          this.shield = !1, asteroid.explode();
        }
      }

      this.angle = this.rotation, this.cooldown > 0 && this.cooldown--, move(this);
    };
  }

  function Shot(id, spaceship) {
    this.id = id, this.position = [spaceship.position[0] + spaceship.cannon.x + spaceship.cannon.x * Math.cos((spaceship.rotation - 90) * Math.PI / 180), spaceship.position[1] + spaceship.cannon.y + spaceship.cannon.y * Math.sin((spaceship.rotation - 90) * Math.PI / 180)], this.width = 9, this.height = 15, this.angle = spaceship.angle, this.rotation = spaceship.rotation, this.speed = spaceship.speed + 500, this.lifespan = spaceship.range, this.img = new Image(), this.img.src = "asteroids/shot.png", this.move = function () {
      this.lifespan--, move(this);
    };
  }

  function Asteroid(id) {
    this.id = id, this.width = 50 * Math.random() + 20, this.height = this.width, this.position = getEntryPosition(this.width, this.height), this.angle = 360 * Math.random(), this.rotation = 360 * Math.random(), this.rotationSpeed = 6 * Math.random() - 3, this.speed = 300 * Math.random() + 2, this.img = new Image(), this.img.src = "asteroids/asteroid" + (Math.round(6 * Math.random()) + 1) + ".png", this.explode = function () {
      return explosions[this.id] = new Explosion(this), delete asteroids[this.id];
    }, this.move = function () {
      for (var i in this.rotation += this.rotationSpeed, this.rotation > 360 ? this.rotation = this.rotation - 360 : this.rotation < 0 && (this.rotation = 360 + this.rotation), shots) {
        var shot = shots[i];

        if (hit(shot, this)) {
          this.explode();
          var points = Math.floor((shot.speed - 500) / 10 + 70 - this.width);
          Math.floor((points + $scope.score) / 100) > Math.floor($scope.score / 100) && spawnPowerup(), $scope.score += points, $scope.$apply(), delete shots[i];
        }
      }

      move(this);
    };
  }

  function Explosion(object) {
    this.position = [object.position[0], object.position[1]], this.width = object.width, this.height = object.height, this.speed = 0, this.angle = 360 * Math.random(), this.cycle = {
      rows: 6,
      columns: 8,
      size: [256, 256],
      i: 0,
      direction: !0
    }, this.lifespan = 47, this.img = explosionImage, this.move = function () {
      this.lifespan--, move(this), this.cycle.direction ? this.cycle.i++ : this.cycle.i--;
    };
  }

  function Powerup(id) {
    this.id = id, this.powerup = powerupTypes[Math.floor(Math.random() * powerupTypes.length)], this.cycle = this.powerup.cycle, this.lifespan = 1e3, this.cycle.size[1] > this.cycle.size[0] ? (this.height = 40, this.width = Math.round(this.height / this.cycle.size[1] * this.cycle.size[0])) : (this.width = 40, this.height = Math.round(this.width / this.cycle.size[0] * this.cycle.size[1])), this.position = getEntryPosition(this.width, this.height), this.img = this.powerup.img, this.angle = 360 * Math.random(), this.speed = 150 * Math.random() + 50;
    var delay = 5;

    this.move = function () {
      return this.lifespan <= 0 ? delete powerups[this.id] : hit(spaceship, this) ? ($scope.announce = !0, $scope.announcement = this.powerup.announcement, $scope.$apply(), setTimeout(function () {
        $scope.announce = !1, $scope.$apply();
      }, 1e3), this.powerup.activate(spaceship), delete powerups[this.id]) : (this.lifespan--, move(this), void (delay <= 0 ? (this.cycle.direction ? this.cycle.i++ : this.cycle.i--, delay = 5) : delay--));
    };
  }

  function move(object) {
    if (object.position[0] += object.speed / 100 * Math.cos((object.angle - 90) * Math.PI / 180), object.position[1] += object.speed / 100 * Math.sin((object.angle - 90) * Math.PI / 180), object.position[0] > canvas.width ? object.position[0] = -object.width : object.position[0] < -object.width && (object.position[0] = canvas.width), object.position[1] > canvas.height ? object.position[1] = -object.height : object.position[1] < -object.height && (object.position[1] = canvas.height), ctx.save(), ctx.translate(object.position[0], object.position[1]), ctx.translate(object.width / 2, object.height / 2), ctx.rotate(object.rotation * Math.PI / 180), object.cycle) {
      var column = object.cycle.i % object.cycle.columns,
          row = Math.floor(object.cycle.i / object.cycle.columns);
      ctx.drawImage(object.img, object.cycle.size[0] * column, object.cycle.size[1] * row, object.cycle.size[0], object.cycle.size[1], -object.width / 2, -object.height / 2, object.width, object.height), object.cycle.i <= 0 ? (object.cycle.i = 0, object.cycle.direction = !0) : object.cycle.i >= object.cycle.columns * object.cycle.rows && (object.cycle.i = object.cycle.columns * object.cycle.rows - 1, object.cycle.direction = !1);
    } else ctx.drawImage(object.img, -object.width / 2, -object.height / 2, object.width, object.height);

    ctx.restore();
  }

  function getEntryPosition(width, height) {
    var x,
        gridX = 2 * Math.random(),
        gridY = 2 * Math.random(),
        y = 0;
    return gridX >= 1 ? (x = Math.random() * canvas.width, y = y >= 1 ? 0 - height : canvas.height) : (y = Math.random() * canvas.height, x = gridY >= 1 ? 0 - width : canvas.width), [x, y];
  }

  function hit(object1, object2) {
    return object1.position[0] < object2.position[0] + object2.width && object2.position[0] < object1.position[0] + object1.width && object1.position[1] < object2.position[1] + object2.height && object2.position[1] < object1.position[1] + object1.height;
  }

  function spawnAsteroids(amount) {
    var i = 0;

    do {
      var id = Math.round(1e8 * Math.random());
      asteroids[id] = new Asteroid(id);
    } while (i++ <= amount);
  }

  function spawnPowerup() {
    if (Object.keys(powerups).length < 3) {
      var id = Math.round(1e8 * Math.random());
      powerups[id] = new Powerup(id);
    }
  }

  function gameOver() {
    for (var i in $scope.playing = !1, asteroids) asteroids[i].explode();

    shots = {}, $scope.loggedIn ? $scope.currentUser.highscore.asteroids < $scope.score && ($scope.currentUser.highscore.asteroids = $scope.score, GameSvc.setHighscore("asteroids", $scope.currentUser._id, $scope.score)) : $scope.highscore < $scope.score && ($scope.highscore = $scope.score);
  }

  function resizeCanvas() {
    console.log(window.innerWidth), canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }

  explosionImage.src = "asteroids/explosion.png", window.addEventListener("keydown", function (e) {
    map[e.keyCode || e.which] = !0;
  }, !0), window.addEventListener("keyup", function (e) {
    map[e.keyCode || e.which] = !1;
  }, !0), $scope.highscore = 0, window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), requestAnimationFrame(function draw() {
    for (var i in ctx.clearRect(0, 0, canvas.width, canvas.height), shots) shots[i].lifespan <= 0 ? delete shots[i] : shots[i].move();

    for (i in asteroids) asteroids[i].move();

    for (i in powerups) powerups[i].move();

    for (i in explosions) explosions[i].lifespan <= 0 ? delete explosions[i] : explosions[i].move();

    if (evaluateKeys(), $scope.playing) spaceship.move();else {
      var gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
      gradient.addColorStop("0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.25", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.5", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + ")"), gradient.addColorStop("0.75", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("1.0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), ctx.fillStyle = gradient, ctx.font = "60px Monoton", ctx.fillText("Asteroids", canvas.width / 2 - ctx.measureText("Asteroids").width / 2, canvas.height / 2), ctx.font = "20px Aldrich", ctx.fillText("Press space to start", canvas.width / 2 - ctx.measureText("Press space to start").width / 2, canvas.height / 2 + 20), ctx.fillText("Designed and developed by Laurent Debacker", canvas.width / 2 - ctx.measureText("Designed and developed by Laurent Debacker").width / 2, canvas.height - 30);
    }
    (tally += direction ? 1 : -1) > 100 ? (tally = 100, direction = !1) : tally < 0 && (tally = 0, direction = !0);
    requestAnimationFrame(draw);
  });
  var tally = 0,
      direction = !0;

  $scope.space = function () {
    return {
      backgroundImage: 'url("asteroids/space' + space + '.jpg")'
    };
  };
}]), angular.module("app").controller("BubblesCtrl", ["$scope", function ($scope) {
  var canvas = document.getElementById("bubbles-page"),
      ctx = canvas.getContext("2d"),
      bubbles = [],
      colors = ["#ffc300", "#ff5733", "#c70039", "#900c3e", "#571845"];

  function Bubble() {
    this.lifespan = 0, this.radius = 1, this.expanding = !0, this.speed = Math.round(3 * Math.random()), this.circumference = Math.round(50 * Math.random()) + 5, this.maxRadius = Math.round(200 * Math.random()) + 20, this.x = Math.round(Math.random() * canvas.width), this.y = Math.round(Math.random() * canvas.height), this.vx = Math.random() >= .5 ? 1 : -1, this.vy = Math.random() >= .5 ? 1 : -1;
  }

  requestAnimationFrame(function filterBubbles() {
    bubbles.push(new Bubble()), bubbles = bubbles.filter(function (bubble) {
      return bubble.radius === bubble.maxRadius && (bubble.expanding = !1), bubble.x += bubble.vx * bubble.speed, bubble.y += bubble.vy * bubble.speed, bubble.radius += bubble.expanding ? 1 : -1, bubble.radius > 0;
    }), ctx.clearRect(0, 0, canvas.width, canvas.height), bubbles.forEach(function (bubble) {
      Math.round(colors.length * bubble.radius / bubble.maxRadius), ctx.beginPath(), ctx.arc(bubble.x, bubble.y, bubble.radius, 0, 2 * Math.PI), ctx.fillStyle = colors[Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.fill(), ctx.strokeStyle = colors[colors.length - Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.lineWidth = bubble.circumference * bubble.radius / bubble.maxRadius, ctx.stroke();
    }), requestAnimationFrame(filterBubbles);
  }), function () {
    function resizeCanvas() {
      canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 55 : 111);
    }

    window.addEventListener("resize", resizeCanvas, !1), resizeCanvas();
  }();
}]), angular.module("app").controller("ContactCtrl", ["$scope", "EmailSvc", function ($scope, EmailSvc) {
  $scope.options = [{
    name: "Spam",
    text: "I am a spam bot and automatically check the first option I find!"
  }, {
    name: "Opportunitiy",
    text: "You seem to have the skills I seek, I'd like to talk about some opportunities."
  }, {
    name: "Resume",
    text: "I dig the resume, how did you make it?"
  }, {
    name: "Other",
    text: "Sumtin else!"
  }], $scope.contact = {
    email: "",
    name: "",
    phone: "",
    about: "",
    message: ""
  }, $scope.send = function () {
    $scope.sending = !0, console.log("here"), EmailSvc.send({
      email: $scope.contact.email,
      name: $scope.contact.name,
      phone: $scope.contact.phone,
      about: $scope.contact.about,
      message: $scope.contact.message
    }).then(function (response) {
      $scope.sent = !0, console.log("SUCCESS. status=%d, text=%s", response.status, response.text), console.log(response);
    }, function (err) {
      $scope.sending = !1, console.log("FAILED. error=", err);
    });
  };
}]), angular.module("app").controller("ExperienceCtrl", ["$scope", function ($scope) {
  $scope.getSkill = function (skillCode) {
    if ($scope.skills) return $scope.skills.find(function (skill) {
      return skill.code === skillCode;
    });
  };
}]), angular.module("app").controller("HobbiesCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.hobbySelectorVisible = !1, $.getJSON("https://www.reddit.com/user/belgocanadian/about/.json", function (response) {}), $scope.selectedHobby = $scope.hobbies[0], $scope.selectHobby = function (hobby) {
    $scope.selectedHobby = hobby, $scope.hobbySelectorVisible = !1;
  }, $scope.showHobby = function (value, index, array) {
    return !!value.images && value.images.length > 0;
  };
}]), angular.module("app").controller("LemmingsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  var canvas = document.getElementById("lemmings-page"),
      ctx = canvas.getContext("2d"),
      lemmingsImage = new Image();
  lemmingsImage.src = "lemmings/lemmings.png";
  var decorImage = new Image();
  decorImage.src = "lemmings/decor.png";
  var lemmings = {},
      started = !1,
      actions = {
    walk: {
      start: [0, 0],
      end: [320, 20],
      columns: 8,
      rows: 1,
      reverse: !1
    },
    huh: {
      start: [320, 0],
      end: [640, 20],
      columns: 8,
      rows: 1,
      reverse: !0
    },
    fall: {
      start: [0, 80],
      end: [160, 100],
      columns: 4,
      rows: 1,
      reverse: !1
    },
    fly: {
      start: [160, 80],
      end: [480, 110],
      columns: 8,
      rows: 1,
      reverse: !1
    },
    stop: {
      start: [0, 120],
      end: [640, 140],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    climb: {
      start: [0, 160],
      end: [640, 185],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    build: {
      start: [0, 200],
      end: [640, 225],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    punch: {
      start: [0, 240],
      end: [640, 300],
      columns: 16,
      rows: 2,
      reverse: !1
    },
    dig: {
      start: [0, 320],
      end: [320, 345],
      columns: 8,
      rows: 1,
      reverse: !1
    }
  };

  function Lemming(init) {
    this.position = [Math.floor(Math.random() * (canvas.width - 200)) + 100, Math.floor(Math.random() * (canvas.height - 200)) + 100], this.direction = 2 * Math.random() > 1 ? 0 : 1, this.act = function (action) {
      this.action = actions[action], this.cycle = 0, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1] - 20 * (this.action.rows - 1)) / this.action.rows, this.animation = !0;
    }, this.act(init), this.move = function () {
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), 0 === this.direction && ctx.scale(-1, 1);
      var column = this.cycle % this.action.columns,
          row = Math.floor(this.cycle / this.action.columns);
      ctx.drawImage(lemmingsImage, this.width * column + this.action.start[0], (this.height + 20) * row + this.action.start[1], this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore(), this.action.reverse ? this.animation ? (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.animation = !this.animation, this.cycle--)) : (this.cycle--, this.cycle < 0 && (this.animation = !this.animation, this.cycle = 0)) : (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.cycle = 0));
    };
  }

  function resizeCanvas() {
    canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }

  window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), Object.keys(actions).forEach(function (action) {
    lemmings[Math.round(1e8 * Math.random())] = new Lemming(action);
  });
  let hatch = new function () {
    this.position = [20, 20], this.action = {
      start: [0, 0],
      end: [82, 500],
      columns: 1,
      rows: 10
    }, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1]) / this.action.rows, this.cycle = 0, this.open = function () {
      var column, row;
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), started ? (column = this.cycle % this.action.columns, row = Math.floor(this.cycle / this.action.columns), this.cycle < 9 && this.cycle++) : (column = 0, row = 0), ctx.drawImage(decorImage, this.width * column + this.action.start[0], this.height * row + this.action.start[1] - 1, this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore();
    };
  }();
  !function draw() {
    if (ctx.clearRect(0, 0, canvas.width, canvas.height), started) for (var i in lemmings) lemmings[i].move();else ctx.beginPath(), ctx.font = "40px Monoton", ctx.lineWidth = "10", ctx.strokeStyle = "blue", ctx.rect(15, canvas.height - 45, ctx.measureText("Start").width + 20, ctx.measureText("Start").height + canvas.height - 45), ctx.fill(), ctx.fillText("Start", 20, canvas.height - 50);
    hatch.open(), started = !0, setTimeout(function () {
      draw();
    }, 150);
  }();
}]), angular.module("app").controller("ListsCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.showCategory = !0, $scope.init = function () {
    CategoriesSvc.getCategories().then(function (response) {
      for (var i in $scope.categories = response.data, $scope.tasks = [], $scope.categories) for (var j in $scope.categories[i].tasks) $scope.tasks.push({
        category: $scope.categories[i].name,
        task: $scope.categories[i].tasks[j].name
      });
    });
  }, $scope.selectCategory = function (category) {
    for (var i in $scope.selectedCategory = category, $scope.selectedTasks = [], $scope.selectableTasks = [], $scope.selectedCategory.tasks) $scope.selectableTasks.push($scope.selectedCategory.tasks[i]);

    $scope.showCategory = !1, $scope.enteredCategory = "";
  }, $scope.newCategory = function (category) {
    for (var found = !1, i = 0; i < $scope.categories.length; i++) $scope.categories[i].name === category && ($scope.selectCategory($scope.categories[i]), found = !0);

    found || CategoriesSvc.addCategory({
      category
    }).then(function (category) {
      $scope.init(), $scope.selectCategory(category);
    }), $scope.enteredCategory = "";
  }, $scope.newTask = function (task) {
    var found = !1;

    for (var i in $scope.selectedCategory.tasks) $scope.selectedCategory.tasks[i].name === task && (found = !0, $scope.selectTask($scope.selectedCategory.tasks[i]));

    found || CategoriesSvc.addTask($scope.selectedCategory.name, {
      task
    }).then(function () {
      $scope.selectedCategory.tasks.push({
        name: task
      }), $scope.addTask($scope.selectedTasks, $scope.selectedCategory.tasks[$scope.selectedCategory.tasks.length - 1]);
    }), $scope.enteredTask = "";
  }, $scope.selectTask = function (task) {
    $scope.addTask($scope.selectedTasks, task), $scope.removeTask($scope.selectableTasks, task), $scope.enteredTask = "";
  }, $scope.unselectTask = function (task) {
    $scope.addTask($scope.selectableTasks, task), $scope.removeTask($scope.selectedTasks, task);
  }, $scope.addTask = function (taskList, task) {
    taskList.push(task);
  }, $scope.removeTask = function (taskList, task) {
    taskList.splice(taskList.indexOf(task), 1);
  }, $scope.startPrioritizing = function () {
    CategoriesSvc.setPriorityList($scope.selectedTasks), $location.path("/prioritize");
  }, $scope.getQuestions = function () {
    if (!$scope.selectedTasks) return "";

    for (var counter = 0, i = $scope.selectedTasks.length - 1; i > 0; i--) counter += i;

    return counter;
  };
}]), angular.module("app").controller("LoginCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  var ui = new firebaseui.auth.AuthUI(firebase.auth());

  function startUI() {
    ui.start("#firebaseui-auth-container", {
      callbacks: {
        signInSuccess: function (currentUser, credential, redirectUrl) {
          return firebase.auth().currentUser.getIdToken(!0).then(function (idToken) {
            UserSvc.authenticate({
              displayName: currentUser.displayName,
              email: currentUser.email,
              photoURL: currentUser.photoURL,
              emailVerified: currentUser.emailVerified,
              idToken
            }).then(function (response) {
              $scope.$emit("login", response.data), $("#modal-login").modal("hide");
            }, function () {
              $scope.$emit("popup", {
                message: "Login Failed",
                type: "alert-danger"
              });
            });
          }).catch(function (error) {}), !1;
        },
        signInFailure: function (error) {
          if ("firebaseui/anonymous-upgrade-merge-conflict" != error.code) return Promise.resolve();
          var cred = error.credential;
          return firebase.auth().signInWithCredential(cred);
        },
        uiShown: function () {
          document.getElementById("loader").style.display = "none";
        }
      },
      signInSuccessUrl: "/home",
      signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID],
      signInFlow: "popup"
    });
  }

  $scope.$on("logout", function (event) {
    ui.reset(), startUI();
  }), startUI();
}]), angular.module("app").controller("PostsCtrl", ["$scope", "$filter", "PostsSvc", function ($scope, $filter, PostsSvc) {
  $scope.addPost = function () {
    $scope.postBody && PostsSvc.create({
      body: $scope.postBody
    }).then(function (post) {
      $scope.postBody = null;
    });
  }, PostsSvc.fetch().then(function (response) {
    $scope.posts = response.data;
  }), $scope.$on("ws:new_post", function (_, post) {
    $scope.$apply(function () {
      PostsSvc.getPost(post).then(function (response) {
        $scope.posts.unshift(response.data);
      });
    });
  });
}]), angular.module("app").controller("PrioritizeCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.priorityList = CategoriesSvc.getPriorityList(), $scope.priorityList ? ($scope.selectedQuestion = 1, $scope.currentQuestion = 1, $scope.done = !1) : $location.path("/lists"), $scope.makeChoice = function (choice) {
    for (var i in $scope.priorityList) $scope.priorityList[i].id === $scope.selectedQuestion && ($scope.priorityList[i].choice = 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice);

    $scope.selectedQuestion === $scope.currentQuestion && ($scope.currentQuestion = $scope.currentQuestion === $scope.priorityList.length ? 1 : $scope.currentQuestion + 1), $scope.selectedQuestion = $scope.currentQuestion;
    var found = !1;

    for (i in $scope.priorityList) if ("" === $scope.priorityList[i].choice) {
      found = !0;
      break;
    }

    found || ($("#prioritizeChoices").hide(300), $scope.done = !0);
  }, $scope.getButtonValue = function (choice) {
    if (!$scope.priorityList) return "";

    for (var i = 0; i < $scope.priorityList.length; i++) if ($scope.priorityList[i].id === $scope.selectedQuestion) return 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice;
  }, $scope.selectQuestion = function (question) {
    $scope.selectedQuestion = question;
  }, $scope.getFilteredPriorityList = function () {
    return $scope.priorityList ? $scope.priorityList.sort(function (a, b) {
      return a.id - b.id;
    }).filter(function (question) {
      return "" !== question.choice || question.id === $scope.currentQuestion;
    }) : [];
  }, $scope.getChoicesMade = function () {
    if (!$scope.priorityList) return "";
    var choicesMade = 0;

    for (var i in $scope.priorityList) "" !== $scope.priorityList[i].choice && choicesMade++;

    return choicesMade;
  }, $scope.getButtonClass = function (choice) {
    if (!$scope.priorityList) return "";

    for (var i in $scope.priorityList) if ($scope.priorityList[i].id === $scope.selectedQuestion) return "" === $scope.priorityList[i].choice ? "btn-primary" : 1 === choice ? $scope.priorityList[i].firstChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger" : $scope.priorityList[i].secondChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger";
  }, $scope.showChoices = function () {
    $("#prioritizeChoices").show(1e3), $("#reviewChoices").hide();
  }, $scope.chartClick = function (event) {
    $scope.chart && console.log($scope.chart.getSegmentsAtEvent(event));
  }, $scope.showResults = function () {
    for (var i in $scope.data = [], $scope.options = {
      responsive: !0,
      segmentShowStroke: !0,
      segmentStrokeColor: "#fff",
      segmentStrokeWidth: 2,
      percentageInnerCutout: 0,
      animationSteps: 100,
      animationEasing: "easeOutBounce",
      animateRotate: !0,
      animateScale: !1,
      legendTemplate: '<h3 class="tc-chart-js-legend" style="padding:5px"><% for (var i=0; i<segments.length; i++){%><div class="label" style="float:left;margin:5px;background-color:<%=segments[i].fillColor%>"><%if(segments[i].label){%><%=segments[i].label%><%}%></div><%}%></h3>'
    }, CategoriesSvc.choices) for (var j in CategoriesSvc.choices[i].votes = 0, $scope.priorityList) CategoriesSvc.choices[i].name === $scope.priorityList[j].choice && CategoriesSvc.choices[i].votes++;

    for (i in CategoriesSvc.choices.sort(function (a, b) {
      return a.votes < b.votes;
    }), CategoriesSvc.choices) $scope.data.push({
      value: CategoriesSvc.choices[i].votes,
      label: CategoriesSvc.choices[i].name
    });

    $("#prioritizeResult").hide(), $("#prioritizeChoices").hide(), $("#priorityResults").show(1e3);
  };
}]), angular.module("app").controller("ProfileCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  $scope.currentUser ? ($("#sex-indicator").offset({
    left: $scope.currentUser.gender.sex / 200 * $("#sex").width() + $("#sex").offset().left
  }), $("#identity-indicator").offset({
    left: $scope.currentUser.gender.identity / 200 * $("#identity").width() + $("#identity").offset().left
  })) : $location.path("/"), $scope.sexes = ["Male", "FtM Male", "Intersex", "MtF Female", "Female"], $scope.identities = ["Man", "Bigender", "Pangender", "Agender", "Polygender", "Genderfluid", "Genderqueer", "Queer", "Woman"], $scope.dateOptions = {
    maxDate: new Date(),
    minDate: new Date(1900, 1, 1),
    initDate: new Date(2e3, 1, 1),
    datepickerMode: "year"
  }, $scope.gender = function (array, percentage) {
    return array[Math.round(percentage / 200 * (array.length - 1))];
  }, $scope.startSlider = function () {}, $scope.dragSlider = function (event, ui, type) {
    $scope.currentUser.gender[type] = Math.round(($("#" + type + "-indicator").offset().left - $("#" + type).offset().left) / ($("#" + type).width() - $("#" + type + "-indicator").width()) * 200), $scope.$apply();
  }, $scope.stopSlider = function () {}, $scope.usernameToggle = !0, $scope.passwordToggle = !0, $scope.toggleUsername = function () {
    $scope.usernameToggle = !$scope.usernameToggle, $scope.newUsername = $scope.currentUser.username;
  }, $scope.togglePassword = function () {
    $scope.newPassword = null, $scope.confirmPassword = null, $scope.passwordToggle = !$scope.passwordToggle;
  }, $scope.checkPassword = function (password) {
    if (password) {
      var user = $scope.currentUser._id;
      UserSvc.checkPassword(user, password).then(function (response) {
        $scope.togglePassword();
      }, function () {
        var originalBg = $(".password").css("backgroundColor");
        $(".password").animate({
          backgroundColor: "#FFB6C1"
        }, 200).animate({
          backgroundColor: originalBg
        }, 200);
      });
    }
  }, $scope.changePassword = function (oldPassword, newPassword, confirmPassword) {
    if (newPassword) if (newPassword == confirmPassword) {
      var user = $scope.currentUser._id;
      UserSvc.changePassword(user, oldPassword, newPassword).then(function (response) {
        $scope.$emit("popup", {
          message: "Password Changed",
          type: "alert-success"
        }), $scope.oldPassword = null, $scope.togglePassword();
      }, function () {
        $scope.$emit("popup", {
          message: "Password Change Failed",
          type: "alert-danger"
        });
      });
    } else {
      var originalBg = $(".password").css("backgroundColor");
      $(".password").animate({
        backgroundColor: "#FFB6C1"
      }, 200).animate({
        backgroundColor: originalBg
      }, 200);
    }
  }, $scope.changeUsername = function (username) {
    $scope.$emit("loading"), UserSvc.changeUsername($scope.currentUser._id, username).then(function (response) {
      $scope.$emit("update", response.data);
    }, function (response) {
      $scope.$emit("popup", {
        message: username + " already in use",
        type: "alert-danger"
      });
    });
  }, $scope.updateUser = function () {
    $scope.currentUser && ($scope.$emit("loading"), UserSvc.updateUser($scope.currentUser).then(function (response) {
      $scope.$emit("update", response.data);
    }));
  }, $scope.$watch("currentUser.flags.length", function (length) {
    $scope.updateUser();
  }), $scope.loadCountries = function ($query) {
    return [{
      name: "Andorra",
      flag: "flag-ad",
      tidbit: ""
    }, {
      name: "United Arab Emirates",
      flag: "flag-ae"
    }, {
      name: "Afghanistan",
      flag: "flag-af"
    }, {
      name: "Antigua and Barbuda",
      flag: "flag-ag"
    }, {
      name: "Anguilla",
      flag: "flag-ai"
    }, {
      name: "Albania",
      flag: "flag-al"
    }, {
      name: "Armenia",
      flag: "flag-am"
    }, {
      name: "Angola",
      flag: "flag-ao"
    }, {
      name: "Antarctica",
      flag: "flag-aq"
    }, {
      name: "Argentina",
      flag: "flag-ar"
    }, {
      name: "American Somoa",
      flag: "flag-as"
    }, {
      name: "Austria",
      flag: "flag-at"
    }, {
      name: "Australia",
      flag: "flag-au"
    }, {
      name: "Aruba",
      flag: "flag-aw"
    }, {
      name: "Åland Islands",
      flag: "flag-ax"
    }, {
      name: "Azerbaijan",
      flag: "flag-az"
    }, {
      name: "Bosnia and Herzegovina",
      flag: "flag-ba"
    }, {
      name: "Barbados",
      flag: "flag-bb"
    }, {
      name: "Bangladesh",
      flag: "flag-bd"
    }, {
      name: "Belgium",
      flag: "flag-be"
    }, {
      name: "Burkina Faso",
      flag: "flag-bf"
    }, {
      name: "Bulgaria",
      flag: "flag-bg"
    }, {
      name: "Bahrain",
      flag: "flag-bh"
    }, {
      name: "Burundi",
      flag: "flag-bi"
    }, {
      name: "Benin",
      flag: "flag-bj"
    }, {
      name: "Saint Barthélemy",
      flag: "flag-bl"
    }, {
      name: "Bermuda",
      flag: "flag-bm"
    }, {
      name: "Brunei ",
      flag: "flag-bn"
    }, {
      name: "Bolivia, Plurinational State of",
      flag: "flag-bo"
    }, {
      name: "Bonaire, Sint Eustatius and Saba",
      flag: "flag-bq"
    }, {
      name: "Brazil",
      flag: "flag-br"
    }, {
      name: "Bahamas",
      flag: "flag-bs"
    }, {
      name: "Bhutan",
      flag: "flag-bt"
    }, {
      name: "Bouvet Island",
      flag: "flag-bv"
    }, {
      name: "Botswana",
      flag: "flag-bw"
    }, {
      name: "Belarus",
      flag: "flag-by"
    }, {
      name: "Belize",
      flag: "flag-bz"
    }, {
      name: "Canada",
      flag: "flag-ca"
    }, {
      name: "Cocos (Keeling) Islands",
      flag: "flag-cc"
    }, {
      name: "Congo, the Democratic Republic of the",
      flag: "flag-cd"
    }, {
      name: "Central African Republic",
      flag: "flag-cf"
    }, {
      name: "Congo",
      flag: "flag-cg"
    }, {
      name: "Switzerland",
      flag: "flag-ch"
    }, {
      name: "Côte d'Ivoire",
      flag: "flag-ci"
    }, {
      name: "Cook Islands",
      flag: "flag-ck"
    }, {
      name: "Chile",
      flag: "flag-cl"
    }, {
      name: "Cameroon",
      flag: "flag-cm"
    }, {
      name: "China",
      flag: "flag-cn"
    }, {
      name: "Colombia",
      flag: "flag-co"
    }, {
      name: "Costa Rica",
      flag: "flag-cr"
    }, {
      name: "Cuba",
      flag: "flag-cu"
    }, {
      name: "Cabo Verde",
      flag: "flag-cv"
    }, {
      name: "Curaçao",
      flag: "flag-cw"
    }, {
      name: "Christmas Island",
      flag: "flag-cx"
    }, {
      name: "Cyprus",
      flag: "flag-cy"
    }, {
      name: "Czech Republic",
      flag: "flag-cz"
    }, {
      name: "Germany",
      flag: "flag-de"
    }, {
      name: "Djibouti",
      flag: "flag-dj"
    }, {
      name: "Denmark",
      flag: "flag-dk"
    }, {
      name: "Dominica",
      flag: "flag-dm"
    }, {
      name: "Dominican Republic",
      flag: "flag-do"
    }, {
      name: "Algeria",
      flag: "flag-dz"
    }, {
      name: "Ecuador",
      flag: "flag-ec"
    }, {
      name: "Estonia",
      flag: "flag-ee"
    }, {
      name: "Egypt",
      flag: "flag-eg"
    }, {
      name: "Western Sahara",
      flag: "flag-eh"
    }, {
      name: "Eritrea",
      flag: "flag-er"
    }, {
      name: "Spain",
      flag: "flag-es"
    }, {
      name: "Ethiopia",
      flag: "flag-et"
    }, {
      name: "Finland",
      flag: "flag-fi"
    }, {
      name: "Fiji",
      flag: "flag-fj"
    }, {
      name: "Falkland Islands (Malvinas)",
      flag: "flag-fk"
    }, {
      name: "Micronesia, Federated States of",
      flag: "flag-fm"
    }, {
      name: "Faroe Islands",
      flag: "flag-fo"
    }, {
      name: "France",
      flag: "flag-fr"
    }, {
      name: "Gabon",
      flag: "flag-ga"
    }, {
      name: "United Kingdom of Great Britain and Northern Ireland",
      flag: "flag-gb"
    }, {
      name: "Grenada",
      flag: "flag-gd"
    }, {
      name: "Georgia",
      flag: "flag-ge"
    }, {
      name: "French Guiana",
      flag: "flag-gf"
    }, {
      name: "Guernsey",
      flag: "flag-gg"
    }, {
      name: "Ghana",
      flag: "flag-gh"
    }, {
      name: "Gibraltar",
      flag: "flag-gi"
    }, {
      name: "Greenland",
      flag: "flag-gl"
    }, {
      name: "Gambia",
      flag: "flag-gm"
    }, {
      name: "Guinea",
      flag: "flag-gn"
    }, {
      name: "Guadeloupe",
      flag: "flag-gp"
    }, {
      name: "Equatorial Guinea",
      flag: "flag-gq"
    }, {
      name: "Greece",
      flag: "flag-gr"
    }, {
      name: "South Georgia and the South Sandwich Islands",
      flag: "flag-gs"
    }, {
      name: "Guatemala",
      flag: "flag-gt"
    }, {
      name: "Guam",
      flag: "flag-gu"
    }, {
      name: "Guinea-Bissau",
      flag: "flag-gw"
    }, {
      name: "Guyana",
      flag: "flag-gy"
    }, {
      name: "Hong Kong",
      flag: "flag-hk"
    }, {
      name: "Heard Island and McDonald Islands",
      flag: "flag-hm"
    }, {
      name: "Honduras",
      flag: "flag-hn"
    }, {
      name: "Croatia",
      flag: "flag-hr"
    }, {
      name: "Haiti",
      flag: "flag-ht"
    }, {
      name: "Hungary",
      flag: "flag-hu"
    }, {
      name: "Indonesia",
      flag: "flag-id"
    }, {
      name: "Ireland",
      flag: "flag-ie"
    }, {
      name: "Israel",
      flag: "flag-il"
    }, {
      name: "Isle of Man",
      flag: "flag-im"
    }, {
      name: "India",
      flag: "flag-in"
    }, {
      name: "British Indian Ocean Territory",
      flag: "flag-io"
    }, {
      name: "Iraq",
      flag: "flag-iq"
    }, {
      name: "Iran, Islamic Republic of",
      flag: "flag-ir"
    }, {
      name: "Iceland",
      flag: "flag-is"
    }, {
      name: "Italy",
      flag: "flag-it"
    }, {
      name: "Jersey",
      flag: "flag-je"
    }, {
      name: "Jamaica",
      flag: "flag-jm"
    }, {
      name: "Jordan",
      flag: "flag-jo"
    }, {
      name: "Japan",
      flag: "flag-jp"
    }, {
      name: "Kenya",
      flag: "flag-ke"
    }, {
      name: "Kyrgyzstan",
      flag: "flag-kg"
    }, {
      name: "Cambodia",
      flag: "flag-kh"
    }, {
      name: "Kiribati",
      flag: "flag-ki"
    }, {
      name: "Comoros",
      flag: "flag-km"
    }, {
      name: "Saint Kitts and Nevis",
      flag: "flag-kn"
    }, {
      name: "Korea, Democratic People's Republic of",
      flag: "flag-kp"
    }, {
      name: "Korea, Republic of",
      flag: "flag-kr"
    }, {
      name: "Kuwait",
      flag: "flag-kw"
    }, {
      name: "Cayman Islands",
      flag: "flag-ky"
    }, {
      name: "Kazakhstan",
      flag: "flag-kz"
    }, {
      name: "Lao People's Democratic Republic",
      flag: "flag-la"
    }, {
      name: "Lebanon",
      flag: "flag-lb"
    }, {
      name: "Saint Lucia",
      flag: "flag-lc"
    }, {
      name: "Liechtenstein",
      flag: "flag-li"
    }, {
      name: "Sri Lanka",
      flag: "flag-lk"
    }, {
      name: "Liberia",
      flag: "flag-lr"
    }, {
      name: "Lesotho",
      flag: "flag-ls"
    }, {
      name: "Lithuania",
      flag: "flag-lt"
    }, {
      name: "Luxembourg",
      flag: "flag-lu"
    }, {
      name: "Latvia",
      flag: "flag-lv"
    }, {
      name: "Libya",
      flag: "flag-ly"
    }, {
      name: "Morocco",
      flag: "flag-ma"
    }, {
      name: "Monaco",
      flag: "flag-mc"
    }, {
      name: "Moldova, Republic of",
      flag: "flag-md"
    }, {
      name: "Montenegro",
      flag: "flag-me"
    }, {
      name: "Saint Martin (French part)",
      flag: "flag-mf"
    }, {
      name: "Madagascar",
      flag: "flag-mg"
    }, {
      name: "Marshall Islands",
      flag: "flag-mh"
    }, {
      name: "Macedonia, the former Yugoslav Republic of",
      flag: "flag-mk"
    }, {
      name: "Mali",
      flag: "flag-ml"
    }, {
      name: "Myanmar",
      flag: "flag-mm"
    }, {
      name: "Mongolia",
      flag: "flag-mn"
    }, {
      name: "Macao",
      flag: "flag-mo"
    }, {
      name: "Northern Mariana Islands",
      flag: "flag-mp"
    }, {
      name: "Martinique",
      flag: "flag-mq"
    }, {
      name: "Mauritania",
      flag: "flag-mr"
    }, {
      name: "Montserrat",
      flag: "flag-ms"
    }, {
      name: "Malta",
      flag: "flag-mt"
    }, {
      name: "Mauritius",
      flag: "flag-mu"
    }, {
      name: "Maldives",
      flag: "flag-mv"
    }, {
      name: "Malawi",
      flag: "flag-mw"
    }, {
      name: "Mexico",
      flag: "flag-mx"
    }, {
      name: "Malaysia",
      flag: "flag-my"
    }, {
      name: "Mozambique",
      flag: "flag-mz"
    }, {
      name: "Namibia",
      flag: "flag-na"
    }, {
      name: "New Caledonia",
      flag: "flag-nc"
    }, {
      name: "Niger",
      flag: "flag-ne"
    }, {
      name: "Norfolk Island",
      flag: "flag-nf"
    }, {
      name: "Nigeria",
      flag: "flag-ng"
    }, {
      name: "Nicaragua",
      flag: "flag-ni"
    }, {
      name: "Netherlands",
      flag: "flag-nl"
    }, {
      name: "Norway",
      flag: "flag-no"
    }, {
      name: "Nepal",
      flag: "flag-np"
    }, {
      name: "Nauru",
      flag: "flag-nr"
    }, {
      name: "Niue",
      flag: "flag-nu"
    }, {
      name: "New Zealand",
      flag: "flag-nz"
    }, {
      name: "Oman",
      flag: "flag-om"
    }, {
      name: "Panama",
      flag: "flag-pa"
    }, {
      name: "Peru",
      flag: "flag-pe"
    }, {
      name: "French Polynesia",
      flag: "flag-pf"
    }, {
      name: "Papua New Guinea",
      flag: "flag-pg"
    }, {
      name: "Philippines",
      flag: "flag-ph"
    }, {
      name: "Pakistan",
      flag: "flag-pk"
    }, {
      name: "Poland",
      flag: "flag-pl"
    }, {
      name: "Saint Pierre and Miquelon",
      flag: "flag-pm"
    }, {
      name: "Pitcairn",
      flag: "flag-pn"
    }, {
      name: "Puerto Rico",
      flag: "flag-pr"
    }, {
      name: "Palestine, State of",
      flag: "flag-ps"
    }, {
      name: "Portugal",
      flag: "flag-pt"
    }, {
      name: "Palau",
      flag: "flag-pw"
    }, {
      name: "Paraguay",
      flag: "flag-py"
    }, {
      name: "Qatar",
      flag: "flag-qa"
    }, {
      name: "Réunion",
      flag: "flag-re"
    }, {
      name: "Romania",
      flag: "flag-ro"
    }, {
      name: "Serbia",
      flag: "flag-rs"
    }, {
      name: "Russian Federation",
      flag: "flag-ru"
    }, {
      name: "Rwanda",
      flag: "flag-rw"
    }, {
      name: "Saudi Arabia",
      flag: "flag-sa"
    }, {
      name: "Solomon Islands",
      flag: "flag-sb"
    }, {
      name: "Seychelles",
      flag: "flag-sc"
    }, {
      name: "Sudan",
      flag: "flag-sd"
    }, {
      name: "Sweden",
      flag: "flag-se"
    }, {
      name: "Singapore",
      flag: "flag-sg"
    }, {
      name: "Saint Helena, Ascension and Tristan da Cunha",
      flag: "flag-sh"
    }, {
      name: "Slovenia",
      flag: "flag-si"
    }, {
      name: "Svalbard and Jan Mayen",
      flag: "flag-sj"
    }, {
      name: "Slovakia",
      flag: "flag-sk"
    }, {
      name: "Sierra Leone",
      flag: "flag-sl"
    }, {
      name: "San Marino",
      flag: "flag-sm"
    }, {
      name: "Senegal",
      flag: "flag-sn"
    }, {
      name: "Somalia",
      flag: "flag-so"
    }, {
      name: "Suriname",
      flag: "flag-sr"
    }, {
      name: "South Sudan",
      flag: "flag-ss"
    }, {
      name: "Sao Tome and Principe",
      flag: "flag-st"
    }, {
      name: "El Salvador",
      flag: "flag-sv"
    }, {
      name: "Sint Maarten (Dutch part)",
      flag: "flag-sx"
    }, {
      name: "Syrian Arab Republic",
      flag: "flag-sy"
    }, {
      name: "Swaziland",
      flag: "flag-sz"
    }, {
      name: "Turks and Caicos Islands",
      flag: "flag-tc"
    }, {
      name: "Chad",
      flag: "flag-td"
    }, {
      name: "French Southern Territories",
      flag: "flag-tf"
    }, {
      name: "Togo",
      flag: "flag-tg"
    }, {
      name: "Thailand",
      flag: "flag-th"
    }, {
      name: "Tajikistan",
      flag: "flag-tj"
    }, {
      name: "Tokelau",
      flag: "flag-tk"
    }, {
      name: "Timor-Leste",
      flag: "flag-tl"
    }, {
      name: "Turkmenistan",
      flag: "flag-tm"
    }, {
      name: "Tunisia",
      flag: "flag-tn"
    }, {
      name: "Tonga",
      flag: "flag-to"
    }, {
      name: "Turkey",
      flag: "flag-tr"
    }, {
      name: "Trinidad and Tobago",
      flag: "flag-tt"
    }, {
      name: "Tuvalu",
      flag: "flag-tv"
    }, {
      name: "Taiwan, Province of China",
      flag: "flag-tw"
    }, {
      name: "Tanzania, United Republic of",
      flag: "flag-tz"
    }, {
      name: "Ukraine",
      flag: "flag-ua"
    }, {
      name: "Uganda",
      flag: "flag-ug"
    }, {
      name: "United States Minor Outlying Islands",
      flag: "flag-um"
    }, {
      name: "United States of America",
      flag: "flag-us"
    }, {
      name: "Uruguay",
      flag: "flag-uy"
    }, {
      name: "Uzbekistan",
      flag: "flag-uz"
    }, {
      name: "Holy See",
      flag: "flag-va"
    }, {
      name: "Saint Vincent and the Grenadines",
      flag: "flag-vc"
    }, {
      name: "Venezuela, Bolivarian Republic of",
      flag: "flag-ve"
    }, {
      name: "Virgin Islands, British",
      flag: "flag-vg"
    }, {
      name: "Virgin Islands, U.S.",
      flag: "flag-vi"
    }, {
      name: "Viet Nam",
      flag: "flag-vn"
    }, {
      name: "Vanuatu",
      flag: "flag-vu"
    }, {
      name: "Wallis and Futuna",
      flag: "flag-wf"
    }, {
      name: "Samoa",
      flag: "flag-ws"
    }, {
      name: "Yemen",
      flag: "flag-ye"
    }, {
      name: "Mayotte",
      flag: "flag-yt"
    }, {
      name: "South Africa",
      flag: "flag-za"
    }, {
      name: "Zambia",
      flag: "flag-zm"
    }, {
      name: "Zimbabwe",
      flag: "flag-zw"
    }].filter(function (country) {
      return -1 != country.name.toLowerCase().indexOf($query.toLowerCase());
    });
  };
}]), angular.module("app").controller("SkillsCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.selectedSkill = 0, $scope.skillsVisible = !1, $scope.labels = ["Download Sales", "In-Store Sales", "Mail-Order Sales"], $scope.data = [300, 500, 100], $.getJSON("/skills.json", function (data) {
    $scope.skills = data.filter(function (skill) {
      return skill.enabled;
    }), $scope.setSelectedSkill = function (skill) {
      $scope.selectedSkill = skill, $scope.selectedSkill.chartOptions = {
        cutoutPercentage: 80,
        circumference: 2 * Math.PI,
        maintainAspectRatio: !0,
        tooltips: {
          enabled: !1
        }
      }, $scope.selectedSkill.chartStyle = {
        "background-image": "url(/skills/" + $scope.selectedSkill.image + ")",
        "background-repeat": "no-repeat",
        "background-size": "60%",
        "background-position": "50% 50%"
      };
    }, $scope.setSelectedSkill($scope.skills[0]), $scope.$apply();
  });
}]), angular.module("app").controller("TenThingsCtrl", ["$scope", "BotSvc", function ($scope, BotSvc) {
  function flash(element) {
    const color = $(element).css("background-color");
    $(element).animate({
      backgroundColor: "#FA8072"
    }, 100, () => {
      $(element).animate({
        backgroundColor: color
      }, 100);
    });
  }

  $scope.search = {
    name: "",
    values: ""
  }, BotSvc.getCategories().then(response => {
    $scope.categories = response.data, $scope.categoryFilters = $scope.categories.map(category => category), $scope.categoryFilters.push("All"), $scope.categoryFilters.push("Blank"), $scope.categoryFilter = "All", $scope.updateFilter = "all";
  }), BotSvc.getLanguages().then(response => {
    $scope.languages = response.data;
  }), $scope.keyDown = e => {
    switch ((e = e || window.event).keyCode) {
      case 9:
        $("#new-blurb").is(":focus") && setTimeout(() => {
          $scope.addValue();
        }, 100);
        break;

      case 13:
        $("#new-blurb").is(":focus") ? $scope.addValue() : $("#new-value").is(":focus") && $("#new-blurb").focus();
    }
  }, $scope.searchName = "", $scope.newItem = {}, $scope.setCategoryFilter = category => $scope.categoryFilter = category, $scope.setUserFilter = user => $scope.userFilter = user, $scope.setUpdateFilter = type => $scope.updateFilter = type, $scope.filteredLists = () => $scope.lists ? $scope.lists.filter(({
    categories,
    isDynamic,
    creator
  }) => ("all" === $scope.updateFilter || !("static" === $scope.updateFilter && !0 === isDynamic || "dynamic" === $scope.updateFilter && !1 === isDynamic)) && ("All" === $scope.categoryFilter && "All" === $scope.userFilter || ("All" !== $scope.categoryFilter && "All" === $scope.userFilter ? categories.length > 0 ? categories.indexOf($scope.categoryFilter) >= 0 : "Blank" === $scope.categoryFilter : "All" === $scope.categoryFilter && "All" !== $scope.userFilter ? creator === $scope.userFilter : categories.length > 0 ? categories.indexOf($scope.categoryFilter) >= 0 && creator === $scope.userFilter : "Blank" === $scope.categoryFilter && creator === $scope.userFilter))) : [], $scope.$on("login", _ => {
    $scope.getLists();
  }), $scope.sort = (sortValue, sortLabel) => {
    $scope.sortLabel = sortLabel, $scope.sortValue === sortValue ? $scope.sortDirection = !$scope.sortDirection : ($scope.sortValue = sortValue, $scope.sortDirection = !0), $scope.sorter = ($scope.sortDirection ? "+" : "-") + $scope.sortValue;
  }, $scope.sortList = "value", $scope.sortValue = "date", $scope.sortDirection = !0, $scope.sort("date", "Creation Date"), $scope.getCategoryCount = category => $scope.lists ? $scope.lists.filter(list => ("All" === category || list.categories.indexOf(category) >= 0) && ("All" === $scope.userFilter || list.creator === $scope.userFilter) && ("all" === $scope.updateFilter || list.isDynamic === ("dynamic" === $scope.updateFilter))).length : 0, $scope.getUpdateCount = type => $scope.lists ? $scope.lists.filter(list => "all" === type || list.isDynamic && "dynamic" === type || !list.isDynamic && "static" === type).length : 0, $scope.getLists = () => {
    $scope.loading || ($scope.loading = !0, BotSvc.getLists($scope.currentUser).then(({
      data
    }) => {
      $scope.lists = data, $scope.userFilters = {}, $scope.userFilters.All = $scope.lists.length, $scope.userFilters = $scope.lists.sort((list1, list2) => list1.creator > list2.creator).reduce((users, {
        creator
      }) => (users[creator] || (users[creator] = 0), users[creator]++, users), $scope.userFilters), $scope.userCount = Object.keys($scope.userFilters).length, $scope.userFilters = sortObject($scope.userFilters, !1), $scope.userFilter = "All", $scope.loading = !1;
    }));
  }, $scope.selectList = list => {
    BotSvc.getList(list).then(({
      data
    }) => {
      $scope.selectedList = data;
    });
  }, $scope.selectCategory = category => {
    $scope.selectedList.category = category, $("#category-select").hide();
  }, $scope.getCategoryClass = category => $scope.selectedList && $scope.selectedList.categories.indexOf(category) >= 0 ? "btn-success" : "btn-default", $scope.toggleCategory = category => {
    const categoryIndex = $scope.selectedList.categories.indexOf(category);
    categoryIndex >= 0 ? $scope.selectedList.categories.splice(categoryIndex, 1) : $scope.selectedList.categories.push(category);
  }, $scope.selectLanguage = language => {
    $scope.selectedList.language = language.code;
    const nonEnglishIndex = $scope.selectedList.categories.indexOf("Non-English");
    "EN" !== language.code && nonEnglishIndex < 0 ? $scope.selectedList.categories.push("Non-English") : "EN" === language.code && nonEnglishIndex >= 0 && $scope.selectedList.categories.splice(nonEnglishIndex, 1);
  }, $scope.addList = () => {
    const currentLanguage = $scope.selectedList ? $scope.selectedList.language : "EN";
    $scope.selectedList = {
      name: "",
      creator: $scope.currentUser._id,
      date: new Date(),
      values: [],
      answers: 0,
      isDynamic: !0,
      category: "",
      categories: [],
      language: currentLanguage
    };
  }, $scope.addValue = () => {
    $scope.newItem.value && (_.some($scope.selectedList.values, value => value == $scope.newItem.value) ? alert($scope.newItem.value + " is already in the list") : ($scope.newItem.creator = $scope.currentUser._id, $scope.selectedList.values.unshift(JSON.parse(JSON.stringify($scope.newItem))), $scope.selectedList.answers++, $scope.newItem.value = "", $scope.newItem.blurb = "", $scope.selectedList.values.length >= 10 && $scope.selectedList.name && $scope.selectedList.categories.length > 0 && $scope.saveList($scope.selectedList))), $("#new-value").focus();
  }, $scope.reportList = list => {
    list.reported = !0, BotSvc.reportList($scope.currentUser, list);
  }, $scope.saveList = list => {
    $scope.saving || (list.values = list.values.filter(({
      value
    }) => value), list.values.length >= 10 && list.name && list.categories.length > 0 ? ($scope.saving = !0, BotSvc.saveList($scope.currentUser, list).then(({
      data
    }) => {
      if ($scope.selectedList._id) {
        for (let i = 0; i < $scope.lists.length; i++) if ($scope.lists[i]._id === data._id) {
          $scope.lists[i] = data;
          break;
        }

        $scope.selectList(list);
      } else $scope.lists.unshift(data), $scope.selectList(data);

      $scope.saving = !1;
    }, err => {
      console.error(err), $scope.saving = !1;
    })) : list.values.length < 10 ? alert("Lists must contain 10 or more values!") : list.name ? flash(".list-category") : flash("#list-name"));
  }, $scope.deleteList = list => {
    list._id ? confirm("Are you sure you want to delete this list?") && BotSvc.deleteList(list).then(response => {
      $scope.getLists(), $scope.selectedList = null;
    }) : ($scope.lists = $scope.lists.filter(({
      _id
    }) => _id), $scope.selectedList = null);
  }, $scope.listButtonClass = list => {
    const values = list.values,
          blurbs = list.blurbs;
    return values === blurbs && list.description ? "btn-default" : 0 !== blurbs || list.description ? 0 === blurbs && list.description ? "btn-info" : "btn-primary" : "btn-warning";
  }, $scope.getMoviePics = () => {
    BotSvc.getMoviePics($scope.selectedList).then(response => $scope.selectList($scope.selectedList));
  };
}]), angular.module("app").controller("TenThingsAdminCtrl", ["$scope", "BotSvc", "UserSvc", function ($scope, BotSvc, UserSvc) {
  $scope.$on("login", _ => {
    $scope.currentUser.admin && getUsers();
  }), $scope.getQueue = () => {
    $scope.loading = !0, BotSvc.getQueue().then(response => {
      $scope.queue = response.data.replace("/n", "<br/>"), $scope.loading = !1;
    });
  }, $scope.getQueue(), BotSvc.getPause().then(response => {
    $scope.paused = response.data, console.log($scope.paused);
  });

  const getUsers = () => {
    $scope.loading = !0, UserSvc.getUsers().then(response => {
      $scope.users = response.data.filter(user => !user.admin), $scope.loading = !1;
    });
  };

  $scope.toggleBan = user => {
    $scope.loading = !0, UserSvc.toggleBan(user._id).then(response => {
      getUsers();
    });
  }, $scope.togglePause = user => {
    BotSvc.togglePause().then(response => {
      $scope.paused = response.data, console.log($scope.paused);
    });
  };
}]), angular.module("app").controller("WorkoutCtrl", ["$scope", function ($scope) {
  $scope.timeRemaining = 0, $scope.timeExercising = 30, $scope.timeResting = 10, $scope.rest = !1;
  var exercising,
      sounds = {
    on: new Audio("on.wav"),
    off: new Audio("off.wav"),
    switch: new Audio("switch.wav")
  },
      exercises = [{
    name: "Jumping Jacks",
    split: !1
  }, {
    name: "Wall Sit",
    split: !1
  }, {
    name: "Push-Up",
    split: !1
  }, {
    name: "Crunch",
    split: !1
  }, {
    name: "Step-Up",
    split: !0
  }, {
    name: "Squat",
    split: !1
  }, {
    name: "Triceps Dip",
    split: !1
  }, {
    name: "Plank",
    split: !1
  }, {
    name: "High Knees",
    split: !1
  }, {
    name: "Lunge",
    split: !1
  }, {
    name: "Push-Up with Rotation",
    split: !1
  }, {
    name: "Side Plank",
    split: !0
  }];
  $scope.progress = function () {
    return exercises.length - Math.floor($scope.timeRemaining / ($scope.timeExercising + $scope.timeResting)) + "/" + exercises.length;
  }, $scope.workout = function () {
    var excerciseTime = $scope.timeExercising + $scope.timeResting;
    $scope.timeRemaining ? (clearInterval(exercising), $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.exercise = {
      name: "",
      split: !1
    }) : ($scope.timeRemaining = exercises.length * excerciseTime, exercising = setInterval(function () {
      if ($scope.timeRemaining--, 0 === $scope.timeRemaining) return $scope.exercise = {
        name: "Finished! Congrats!",
        split: !1
      }, $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.$apply(), clearInterval(exercising);
      var currentExercise = Math.floor($scope.timeRemaining / excerciseTime),
          timer = $scope.timeRemaining - currentExercise * excerciseTime;
      $scope.timer = timer > $scope.timeExercising ? timer - $scope.timeExercising : timer, timer > $scope.timeExercising ? $scope.rest = !0 : $scope.rest = !1, $scope.exercise = exercises[exercises.length - currentExercise - 1], timer === $scope.timeExercising ? sounds.on.play() : 0 === timer ? sounds.off.play() : $scope.exercise.split && timer === Math.floor($scope.timeExercising / 2) && sounds.switch.play(), $scope.$apply();
    }, 1e3));
  };
}]), angular.module("app").directive("head", ["$rootScope", "$state", "$compile", "$interpolate", function ($rootScope, $state, $compile, $interpolate) {
  var getStyle = function (templateStyleUrl) {
    var style = {
      href: templateStyleUrl,
      rel: "stylesheet"
    };
    return style.href.match(/\.less$/) && (style.rel = "stylesheet/less"), style;
  };

  return {
    restrict: "E",
    link: function (scope, elem) {
      scope.templateStyles = [];
      var html = '<link ng-attr-rel="{{style.rel}}" ng-repeat="style in templateStyles" ng-href="{{style.href}}">';
      html = (html = html.replace(/\{\{/g, $interpolate.startSymbol())).replace(/\}\}/g, $interpolate.endSymbol()), elem.append($compile(html)(scope)), $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
        scope.templateStyles = function (state) {
          for (var states = {}; "" !== state.name;) {
            var parent = $state.get("^", state);
            states[parent.name] || (states[parent.name] = {}), state.templateStyleUrl && (states[parent.name][""] || (states[parent.name][""] = getStyle(state.templateStyleUrl))), state.views && _.forEach(state.views, function (view, key) {
              if (view.templateStyleUrl) return (key = key.split("@"))[1] ? (states[key[1]] || (states[key[1]] = {}), void (states[key[1]][key[0]] || (states[key[1]][key[0]] = getStyle(view.templateStyleUrl)))) : void (states[parent.name][key[0]] = getStyle(view.templateStyleUrl));
            }), state = parent;
          }

          var flat = [];
          return _.forEach(states, function (views) {
            _.forEach(views, function (style) {
              _.includes(flat, style) || flat.push(style);
            });
          }), flat.reverse(), flat;
        }(toState);
      });
    }
  };
}]), angular.module("app").service("BotSvc", ["$http", function ($http) {
  var svc = this;
  svc.getQueue = function () {
    return $http.get("/bots/tenthings/queue");
  }, svc.getLists = function (user) {
    return $http.get("/api/bots/lists");
  }, svc.getCategories = () => $http.get("/api/bots/categories"), svc.getLanguages = () => $http.get("/api/bots/languages"), svc.getList = function (list) {
    return $http.get("/api/bots/lists/" + list._id);
  }, svc.saveList = function (user, list) {
    return $http.put("/api/bots/lists", {
      user,
      list
    });
  }, svc.reportList = function (user, list) {
    $http.get("/api/bots/lists/" + list._id + "/report/" + user._id);
  }, svc.deleteList = function (list) {
    return $http.delete("/api/bots/lists/" + list._id);
  }, svc.getMoviePics = function (list) {
    return $http.get(`/api/bots/lists/${list._id}/movies`);
  }, svc.getPause = function () {
    return $http.get("/api/bots/pause");
  }, svc.togglePause = function () {
    return $http.post("/api/bots/pause");
  };
}]), angular.module("app").service("CategoriesSvc", ["$http", function ($http) {
  var svc = this;
  svc.getCategories = function () {
    return $http.get("/api/categories");
  }, svc.getTasks = function (category) {
    return $http.get("/api/categories/" + category);
  }, svc.addCategory = function (category) {
    return $http.post("/api/categories/", category);
  }, svc.addTask = function (category, task) {
    return $http.post("/api/categories/" + category + "/tasks", task);
  }, svc.setPriorityList = function (list) {
    svc.choices = list, svc.priorityList = [];

    for (var i = 0; i < list.length; i++) for (var j = i + 1; j < list.length; j++) {
      var random = Math.round(Math.random());
      svc.priorityList.push({
        id: 0,
        firstChoice: list[0 === random ? i : j].name,
        secondChoice: list[0 === random ? j : i].name,
        choice: ""
      });
    }

    for (i in function (array) {
      var t,
          i,
          m = array.length;

      for (; m;) i = Math.floor(Math.random() * m--), t = array[m], array[m] = array[i], array[i] = t;
    }(svc.priorityList), svc.priorityList) svc.priorityList[i].id = i + 1;
  }, svc.getPriorityList = function (list) {
    return svc.priorityList;
  };
}]), angular.module("app").service("EmailSvc", ["$http", function ($http) {
  this.send = function (email) {
    return console.log(email), $http.post("/api/email", email);
  };
}]), angular.module("app").service("FileSvc", ["$http", function ($http) {
  this.getImages = function (folder) {
    return $http.get("/api/files/images/" + folder);
  }, this.getSounds = function (folder) {
    return $http.get("/api/files/sounds/" + folder);
  };
}]), angular.module("app").service("GameSvc", ["$http", function ($http) {
  this.getHighscore = function (game, user) {
    return $http.get("/api/games/" + game + "/" + user + "/highscore");
  }, this.setHighscore = function (game, user, score) {
    return $http.post("/api/games/" + game + "/" + user + "/highscore", {
      score
    });
  };
}]), angular.module("app").service("LanguageSvc", function () {
  var svc = this;
  svc.languages = [{
    code: "EN",
    name: "English",
    flag: "flag-icon-gb"
  }, {
    code: "NL",
    name: "Nederlands",
    flag: "flag-icon-nl"
  }, {
    code: "FR",
    name: "Français",
    flag: "flag-icon-fr"
  }], svc.text = [{
    code: "EN"
  }, {
    code: "NL"
  }, {
    code: "FR"
  }], svc.selectedLanguage = svc.languages[0], svc.setLanguage = function (language) {
    return svc.selectedLanguage = language, language;
  }, svc.getLanguage = function () {
    return svc.selectedLanguage;
  };
}), angular.module("app").service("PostsSvc", ["$http", function ($http) {
  this.fetch = function () {
    return $http.get("/api/posts");
  }, this.create = function (post) {
    return $http.post("/api/posts", post);
  }, this.getPost = function (post) {
    return $http.get("/api/posts/" + post._id);
  };
}]), angular.module("app").service("UserSvc", ["$http", function ($http) {
  var svc = this;
  svc.getUser = function () {
    return $http.get("/api/users");
  }, svc.getUsers = function () {
    return $http.get("/api/users/all");
  }, svc.toggleBan = function (id) {
    return $http.get("/api/users/ban/" + id);
  }, svc.setToken = function (token) {
    return $http.defaults.headers.common["X-Auth"] = token, svc.getUser();
  }, svc.authenticate = function (user) {
    return $http.post("/api/users/authenticate", {
      user
    }).then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.login = function (user) {
    return $http.get("/api/users/" + user + "/login").then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.updateUser = function (user) {
    return $http.post("/api/users/" + user._id, {
      user
    }).then(function () {
      return svc.getUser();
    });
  }, svc.checkPassword = function (user, password) {
    return $http.post("/api/users/" + user + "/verification", {
      password
    });
  }, svc.changePassword = function (user, oldPassword, newPassword) {
    return $http.post("/api/users/" + user + "/password", {
      oldPassword,
      newPassword
    });
  }, svc.changeUsername = function (user, newUsername) {
    return $http.post("/api/users/" + user + "/username", {
      newUsername
    }).then(function () {
      return svc.getUser();
    });
  }, svc.logout = function () {
    window.localStorage.clear(), $http.defaults.headers.common["X-Auth"] = "";
  }, svc.createUser = function (username, password) {
    return $http.post("/api/users", {
      username,
      password
    }).then(function () {
      return svc.login(username, password);
    });
  };
}]), angular.module("app").controller("QuizAnimalsCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getSounds("animals").then(function (response) {
    $scope.animals = _.shuffle(response.data.map(animal => ({
      sound: animal,
      name: animal.substring(0, animal.indexOf(".")).replace("_", " ").capitalize()
    })));

    for (let animal of $scope.animals) animal.answers = _.shuffle([animal.name, ...getRandomAnimals(animal.name)]);

    console.log($scope.animals);
  }), $scope.guess = (animal, guess) => {
    animal.guess = guess;
  };

  const getRandomAnimals = name => _.shuffle($scope.animals.filter(animal => name !== animal.name).map(animal => animal.name)).slice(0, 5);

  $scope.getScore = () => `${$scope.animals.filter(animal => animal.name === animal.guess).length}/${$scope.animals.length}`, $scope.isScoreVisible = () => $scope.animals.filter(animal => animal.guess).length === $scope.animals.length;
}]), angular.module("app").controller("QuizGoogleCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("google").then(function (response) {
    $scope.images = response.data;
  });
}]), angular.module("app").controller("QuizLogosCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("logos").then(function (response) {
    $scope.images = response.data;
  });
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3RvdHlwZXMuanMiLCJhcHAuanMiLCJtb2R1bGUuanMiLCJyb3V0ZXMuanMiLCJ3ZWJzb2NrZXRzLmpzIiwiY29udHJvbGxlcnMvYXBwLmN0cmwuanMiLCJjb250cm9sbGVycy9hc3Rlcm9pZHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2J1YmJsZXMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2NvbnRhY3QuY3RybC5qcyIsImNvbnRyb2xsZXJzL2V4cGVyaWVuY2UuY3RybC5qcyIsImNvbnRyb2xsZXJzL2hvYmJpZXMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2xlbW1pbmdzLmN0cmwuanMiLCJjb250cm9sbGVycy9saXN0cy5jdHJsLmpzIiwiY29udHJvbGxlcnMvbG9naW4uY3RybC5qcyIsImNvbnRyb2xsZXJzL3Bvc3RzLmN0cmwuanMiLCJjb250cm9sbGVycy9wcmlvcml0aXplLmN0cmwuanMiLCJjb250cm9sbGVycy9wcm9maWxlLmN0cmwuanMiLCJjb250cm9sbGVycy9za2lsbHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL3RlbnRoaW5ncy5jdHJsLmpzIiwiY29udHJvbGxlcnMvdGVudGhpbmdzYWRtaW4uY3RybC5qcyIsImNvbnRyb2xsZXJzL3dvcmtvdXQuY3RybC5qcyIsImRpcmVjdGl2ZXMvdWktcm91dGVyLXN0eWxlcy5kaXIuanMiLCJzZXJ2aWNlcy9ib3RzLnN2Yy5qcyIsInNlcnZpY2VzL2NhdGVnb3JpZXMuc3ZjLmpzIiwic2VydmljZXMvZW1haWwuc3ZjLmpzIiwic2VydmljZXMvZmlsZS5zdmMuanMiLCJzZXJ2aWNlcy9nYW1lLnN2Yy5qcyIsInNlcnZpY2VzL2xhbmd1YWdlLnN2Yy5qcyIsInNlcnZpY2VzL3Bvc3RzLnN2Yy5qcyIsInNlcnZpY2VzL3VzZXIuc3ZjLmpzIiwiY29udHJvbGxlcnMvcXVpenplcy9hbmltYWxzLmN0cmwuanMiLCJjb250cm9sbGVycy9xdWl6emVzL2dvb2dsZS5jdHJsLmpzIiwiY29udHJvbGxlcnMvcXVpenplcy9sb2dvcy5jdHJsLmpzIl0sIm5hbWVzIjpbImRlZmF1bHREaWFjcml0aWNzUmVtb3ZhbE1hcCIsImJhc2UiLCJsZXR0ZXJzIiwiU3RyaW5nIiwicHJvdG90eXBlIiwicmVtb3ZlRGlhY3JpdGljcyIsInJlZHVjZSIsInJlc3VsdCIsImxldHRlciIsInJlcGxhY2UiLCJ0aGlzIiwiU1BFQ0lBTF9DSEFSQUNURVJTIiwicmVtb3ZlU3BlY2lhbENoYXJhY3RlcnMiLCJSZWdFeHAiLCJyZW1vdmVBbGxCdXRMZXR0ZXJzIiwidG9Mb3dlckNhc2UiLCJjb25jZWFsIiwiZXh0cmEiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsInJlbW92ZUhUTUwiLCJOdW1iZXIiLCJtYWtlUmVhZGFibGUiLCJ0b1N0cmluZyIsInNvcnRPYmplY3QiLCJvYmoiLCJkaXJlY3Rpb24iLCJhcnIiLCJrZXkiLCJwdXNoIiwic29ydCIsImEiLCJiIiwib2JqU29ydGVkIiwiZm9yRWFjaCIsIml0ZW0iLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkdXJsU2VydmljZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJzdHJpY3RNb2RlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJodG1sNU1vZGUiLCJlbmFibGVkIiwicmVxdWlyZUJhc2UiLCJzZXJ2aWNlIiwiJHJvb3RTY29wZSIsIiR0aW1lb3V0IiwiY29ubmVjdGlvbiIsImNvbm5lY3QiLCJXZWJTb2NrZXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdCIsIm9ub3BlbiIsImNvbnNvbGUiLCJsb2ciLCJvbmNsb3NlIiwiZSIsIm9uZXJyb3IiLCJyZWFkeVN0YXRlIiwib25tZXNzYWdlIiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCIkYnJvYWRjYXN0IiwidG9waWMiLCJzZW5kIiwianNvbiIsInN0cmluZ2lmeSIsInJ1biIsIldlYlNvY2tldFN2YyIsIiRzY29wZSIsIiRsb2NhdGlvbiIsIkxhbmd1YWdlU3ZjIiwiVXNlclN2YyIsImxvZ2luIiwidXNlciIsImxvZ2dlZEluIiwibG9jYWxTdG9yYWdlIiwiX2lkIiwiY3VycmVudFVzZXIiLCIkIiwibG9hZCIsImZhZGVPdXQiLCJmYWRlSW4iLCJ0aGVtZUNvdW50ZXIiLCJ0b2RheSIsIkRhdGUiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJyYW5kb20iLCJNYXRoIiwiZmxvb3IiLCJmbGlwVGhlbWUiLCJzaG93IiwiaGlkZSIsInNldFRpbWVvdXQiLCJnZXRKU09OIiwic2tpbGxzIiwiZmlsdGVyIiwic2tpbGwiLCJob2JiaWVzIiwiam9icyIsImpvYiIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJnZXRUaW1lU3BhbiIsImxhbmd1YWdlcyIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJnZXRMYW5ndWFnZSIsInNlbGVjdExhbmd1YWdlIiwibGFuZ3VhZ2UiLCJzZXRMYW5ndWFnZSIsImhvdmVyZGl2IiwiZGl2aWQiLCJsZWZ0IiwiY2xpZW50WCIsInRvcCIsImNsaWVudFkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3NzIiwidG9nZ2xlIiwic29jaWFsTWVkaWEiLCJuYW1lIiwiaWNvbiIsInRoZW4iLCJyZXNwb25zZSIsIiRvbiIsIl8iLCJiaXJ0aERhdGUiLCJsb2FkaW5nIiwibG9nb3V0IiwiZmlyZWJhc2UiLCJhdXRoIiwic2lnbk91dCIsImNsZWFyIiwiY2F0Y2giLCJlcnJvciIsImZvcm1hdERhdGUiLCJkYXRlIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwiR2FtZVN2YyIsImFubm91bmNlIiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImZvbnQiLCJmaWxsU3R5bGUiLCJ0ZXh0QWxpZ24iLCJzaG90cyIsImFzdGVyb2lkcyIsInBvd2VydXBzIiwiZXhwbG9zaW9ucyIsIm1hcCIsInNwYWNlIiwicG93ZXJ1cFR5cGVzIiwiYW5ub3VuY2VtZW50IiwiY3ljbGUiLCJyb3dzIiwiY29sdW1ucyIsInNpemUiLCJpIiwiaW1nIiwiSW1hZ2UiLCJhY3RpdmF0ZSIsInNwYWNlc2hpcCIsIm1heFNwZWVkIiwiY29vbGRvd24iLCJjb29sZG93blRpbWUiLCJyYW5nZSIsInNoaWVsZCIsImV4cGxvZGUiLCJzcGF3bkFzdGVyb2lkcyIsInBvd2VydXAiLCJhcnJheSIsInNyYyIsImV4cGxvc2lvbkltYWdlIiwiZXZhbHVhdGVLZXlzIiwicGxheWluZyIsInNob290Iiwicm90YXRpb24iLCJzcGVlZCIsInNjb3JlIiwiJGFwcGx5IiwiU3BhY2VzaGlwIiwiYXV0b1NwYXduIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImlkIiwicm91bmQiLCJBc3Rlcm9pZCIsIndpZHRoIiwiaGVpZ2h0IiwiY2Fubm9uIiwieCIsInkiLCJwb3NpdGlvbiIsImFuZ2xlIiwiU2hvdCIsIm1vdmUiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiZmlsbCIsImFzdGVyb2lkIiwiaGl0IiwiZ2FtZU92ZXIiLCJjb3MiLCJzaW4iLCJsaWZlc3BhbiIsImdldEVudHJ5UG9zaXRpb24iLCJyb3RhdGlvblNwZWVkIiwiRXhwbG9zaW9uIiwic2hvdCIsInBvaW50cyIsInNwYXduUG93ZXJ1cCIsIm9iamVjdCIsIlBvd2VydXAiLCJkZWxheSIsInNhdmUiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJjb2x1bW4iLCJyb3ciLCJkcmF3SW1hZ2UiLCJyZXN0b3JlIiwiZ3JpZFgiLCJncmlkWSIsIm9iamVjdDEiLCJvYmplY3QyIiwiYW1vdW50IiwiaGlnaHNjb3JlIiwic2V0SGlnaHNjb3JlIiwicmVzaXplQ2FudmFzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImtleUNvZGUiLCJ3aGljaCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRyYXciLCJjbGVhclJlY3QiLCJncmFkaWVudCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwidGFsbHkiLCJmaWxsVGV4dCIsIm1lYXN1cmVUZXh0IiwiYmFja2dyb3VuZEltYWdlIiwiYnViYmxlcyIsImNvbG9ycyIsIkJ1YmJsZSIsInJhZGl1cyIsImV4cGFuZGluZyIsImNpcmN1bWZlcmVuY2UiLCJtYXhSYWRpdXMiLCJ2eCIsInZ5IiwiZmlsdGVyQnViYmxlcyIsImJ1YmJsZSIsIkVtYWlsU3ZjIiwib3B0aW9ucyIsInRleHQiLCJjb250YWN0IiwiZW1haWwiLCJwaG9uZSIsImFib3V0IiwibWVzc2FnZSIsInNlbmRpbmciLCJzZW50Iiwic3RhdHVzIiwiZXJyIiwiZ2V0U2tpbGwiLCJza2lsbENvZGUiLCJmaW5kIiwiY29kZSIsIiR3aW5kb3ciLCJob2JieVNlbGVjdG9yVmlzaWJsZSIsInNlbGVjdGVkSG9iYnkiLCJzZWxlY3RIb2JieSIsImhvYmJ5Iiwic2hvd0hvYmJ5IiwidmFsdWUiLCJpbmRleCIsImltYWdlcyIsImxlbW1pbmdzSW1hZ2UiLCJkZWNvckltYWdlIiwibGVtbWluZ3MiLCJzdGFydGVkIiwiYWN0aW9ucyIsIndhbGsiLCJzdGFydCIsImVuZCIsInJldmVyc2UiLCJodWgiLCJmYWxsIiwiZmx5Iiwic3RvcCIsImNsaW1iIiwiYnVpbGQiLCJwdW5jaCIsImRpZyIsIkxlbW1pbmciLCJpbml0IiwiYWN0IiwiYWN0aW9uIiwiYW5pbWF0aW9uIiwic2NhbGUiLCJoYXRjaCIsIm9wZW4iLCJyZWN0IiwiQ2F0ZWdvcmllc1N2YyIsInNob3dDYXRlZ29yeSIsImdldENhdGVnb3JpZXMiLCJjYXRlZ29yaWVzIiwidGFza3MiLCJqIiwiY2F0ZWdvcnkiLCJ0YXNrIiwic2VsZWN0Q2F0ZWdvcnkiLCJzZWxlY3RlZENhdGVnb3J5Iiwic2VsZWN0ZWRUYXNrcyIsInNlbGVjdGFibGVUYXNrcyIsImVudGVyZWRDYXRlZ29yeSIsIm5ld0NhdGVnb3J5IiwiZm91bmQiLCJhZGRDYXRlZ29yeSIsIm5ld1Rhc2siLCJzZWxlY3RUYXNrIiwiYWRkVGFzayIsImVudGVyZWRUYXNrIiwicmVtb3ZlVGFzayIsInVuc2VsZWN0VGFzayIsInRhc2tMaXN0Iiwic3BsaWNlIiwiaW5kZXhPZiIsInN0YXJ0UHJpb3JpdGl6aW5nIiwic2V0UHJpb3JpdHlMaXN0IiwicGF0aCIsImdldFF1ZXN0aW9ucyIsImNvdW50ZXIiLCJ1aSIsImZpcmViYXNldWkiLCJBdXRoVUkiLCJzdGFydFVJIiwiY2FsbGJhY2tzIiwic2lnbkluU3VjY2VzcyIsImNyZWRlbnRpYWwiLCJyZWRpcmVjdFVybCIsImdldElkVG9rZW4iLCJpZFRva2VuIiwiYXV0aGVudGljYXRlIiwiZGlzcGxheU5hbWUiLCJwaG90b1VSTCIsImVtYWlsVmVyaWZpZWQiLCIkZW1pdCIsIm1vZGFsIiwidHlwZSIsInNpZ25JbkZhaWx1cmUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNyZWQiLCJzaWduSW5XaXRoQ3JlZGVudGlhbCIsInVpU2hvd24iLCJzdHlsZSIsImRpc3BsYXkiLCJzaWduSW5TdWNjZXNzVXJsIiwic2lnbkluT3B0aW9ucyIsIkdvb2dsZUF1dGhQcm92aWRlciIsIlBST1ZJREVSX0lEIiwiRmFjZWJvb2tBdXRoUHJvdmlkZXIiLCJzaWduSW5GbG93IiwiZXZlbnQiLCJyZXNldCIsIiRmaWx0ZXIiLCJQb3N0c1N2YyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJwb3N0IiwiZmV0Y2giLCJwb3N0cyIsImdldFBvc3QiLCJ1bnNoaWZ0IiwicHJpb3JpdHlMaXN0IiwiZ2V0UHJpb3JpdHlMaXN0Iiwic2VsZWN0ZWRRdWVzdGlvbiIsImN1cnJlbnRRdWVzdGlvbiIsImRvbmUiLCJtYWtlQ2hvaWNlIiwiY2hvaWNlIiwiZmlyc3RDaG9pY2UiLCJzZWNvbmRDaG9pY2UiLCJnZXRCdXR0b25WYWx1ZSIsInNlbGVjdFF1ZXN0aW9uIiwicXVlc3Rpb24iLCJnZXRGaWx0ZXJlZFByaW9yaXR5TGlzdCIsImdldENob2ljZXNNYWRlIiwiY2hvaWNlc01hZGUiLCJnZXRCdXR0b25DbGFzcyIsInNob3dDaG9pY2VzIiwiY2hhcnRDbGljayIsImNoYXJ0IiwiZ2V0U2VnbWVudHNBdEV2ZW50Iiwic2hvd1Jlc3VsdHMiLCJyZXNwb25zaXZlIiwic2VnbWVudFNob3dTdHJva2UiLCJzZWdtZW50U3Ryb2tlQ29sb3IiLCJzZWdtZW50U3Ryb2tlV2lkdGgiLCJwZXJjZW50YWdlSW5uZXJDdXRvdXQiLCJhbmltYXRpb25TdGVwcyIsImFuaW1hdGlvbkVhc2luZyIsImFuaW1hdGVSb3RhdGUiLCJhbmltYXRlU2NhbGUiLCJsZWdlbmRUZW1wbGF0ZSIsImNob2ljZXMiLCJ2b3RlcyIsImxhYmVsIiwib2Zmc2V0IiwiZ2VuZGVyIiwic2V4IiwiaWRlbnRpdHkiLCJzZXhlcyIsImlkZW50aXRpZXMiLCJkYXRlT3B0aW9ucyIsIm1heERhdGUiLCJtaW5EYXRlIiwiaW5pdERhdGUiLCJkYXRlcGlja2VyTW9kZSIsInBlcmNlbnRhZ2UiLCJzdGFydFNsaWRlciIsImRyYWdTbGlkZXIiLCJzdG9wU2xpZGVyIiwidXNlcm5hbWVUb2dnbGUiLCJwYXNzd29yZFRvZ2dsZSIsInRvZ2dsZVVzZXJuYW1lIiwibmV3VXNlcm5hbWUiLCJ1c2VybmFtZSIsInRvZ2dsZVBhc3N3b3JkIiwibmV3UGFzc3dvcmQiLCJjb25maXJtUGFzc3dvcmQiLCJjaGVja1Bhc3N3b3JkIiwicGFzc3dvcmQiLCJvcmlnaW5hbEJnIiwiYW5pbWF0ZSIsImJhY2tncm91bmRDb2xvciIsImNoYW5nZVBhc3N3b3JkIiwib2xkUGFzc3dvcmQiLCJjaGFuZ2VVc2VybmFtZSIsInVwZGF0ZVVzZXIiLCIkd2F0Y2giLCJsb2FkQ291bnRyaWVzIiwiJHF1ZXJ5IiwiZmxhZyIsInRpZGJpdCIsImNvdW50cnkiLCJzZWxlY3RlZFNraWxsIiwic2tpbGxzVmlzaWJsZSIsImxhYmVscyIsInNldFNlbGVjdGVkU2tpbGwiLCJjaGFydE9wdGlvbnMiLCJjdXRvdXRQZXJjZW50YWdlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsInRvb2x0aXBzIiwiY2hhcnRTdHlsZSIsImJhY2tncm91bmQtaW1hZ2UiLCJpbWFnZSIsImJhY2tncm91bmQtcmVwZWF0IiwiYmFja2dyb3VuZC1zaXplIiwiYmFja2dyb3VuZC1wb3NpdGlvbiIsIkJvdFN2YyIsImZsYXNoIiwiZWxlbWVudCIsImNvbG9yIiwic2VhcmNoIiwidmFsdWVzIiwiY2F0ZWdvcnlGaWx0ZXJzIiwiY2F0ZWdvcnlGaWx0ZXIiLCJ1cGRhdGVGaWx0ZXIiLCJnZXRMYW5ndWFnZXMiLCJrZXlEb3duIiwiaXMiLCJhZGRWYWx1ZSIsImZvY3VzIiwic2VhcmNoTmFtZSIsIm5ld0l0ZW0iLCJzZXRDYXRlZ29yeUZpbHRlciIsInNldFVzZXJGaWx0ZXIiLCJ1c2VyRmlsdGVyIiwic2V0VXBkYXRlRmlsdGVyIiwiZmlsdGVyZWRMaXN0cyIsImxpc3RzIiwiaXNEeW5hbWljIiwiY3JlYXRvciIsImdldExpc3RzIiwic29ydFZhbHVlIiwic29ydExhYmVsIiwic29ydERpcmVjdGlvbiIsInNvcnRlciIsInNvcnRMaXN0IiwiZ2V0Q2F0ZWdvcnlDb3VudCIsImxpc3QiLCJnZXRVcGRhdGVDb3VudCIsInVzZXJGaWx0ZXJzIiwiQWxsIiwibGlzdDEiLCJsaXN0MiIsInVzZXJzIiwidXNlckNvdW50Iiwic2VsZWN0TGlzdCIsImdldExpc3QiLCJzZWxlY3RlZExpc3QiLCJnZXRDYXRlZ29yeUNsYXNzIiwidG9nZ2xlQ2F0ZWdvcnkiLCJjYXRlZ29yeUluZGV4Iiwibm9uRW5nbGlzaEluZGV4IiwiYWRkTGlzdCIsImN1cnJlbnRMYW5ndWFnZSIsImFuc3dlcnMiLCJzb21lIiwiYWxlcnQiLCJibHVyYiIsInNhdmVMaXN0IiwicmVwb3J0TGlzdCIsInJlcG9ydGVkIiwic2F2aW5nIiwiZGVsZXRlTGlzdCIsImNvbmZpcm0iLCJsaXN0QnV0dG9uQ2xhc3MiLCJibHVyYnMiLCJkZXNjcmlwdGlvbiIsImdldE1vdmllUGljcyIsImFkbWluIiwiZ2V0VXNlcnMiLCJnZXRRdWV1ZSIsInF1ZXVlIiwiZ2V0UGF1c2UiLCJwYXVzZWQiLCJ0b2dnbGVCYW4iLCJ0b2dnbGVQYXVzZSIsInRpbWVSZW1haW5pbmciLCJ0aW1lRXhlcmNpc2luZyIsInRpbWVSZXN0aW5nIiwicmVzdCIsImV4ZXJjaXNpbmciLCJzb3VuZHMiLCJvbiIsIkF1ZGlvIiwib2ZmIiwic3dpdGNoIiwiZXhlcmNpc2VzIiwic3BsaXQiLCJwcm9ncmVzcyIsIndvcmtvdXQiLCJleGNlcmNpc2VUaW1lIiwiY2xlYXJJbnRlcnZhbCIsInRpbWVyIiwiZXhlcmNpc2UiLCJzZXRJbnRlcnZhbCIsImN1cnJlbnRFeGVyY2lzZSIsInBsYXkiLCJkaXJlY3RpdmUiLCIkc3RhdGUiLCIkY29tcGlsZSIsIiRpbnRlcnBvbGF0ZSIsImdldFN0eWxlIiwidGVtcGxhdGVTdHlsZVVybCIsImhyZWYiLCJyZWwiLCJtYXRjaCIsInJlc3RyaWN0IiwibGluayIsInNjb3BlIiwiZWxlbSIsInRlbXBsYXRlU3R5bGVzIiwiaHRtbCIsInN0YXJ0U3ltYm9sIiwiZW5kU3ltYm9sIiwiYXBwZW5kIiwidG9TdGF0ZSIsInRvUGFyYW1zIiwiZnJvbVN0YXRlIiwiZnJvbVBhcmFtcyIsInN0YXRlcyIsInBhcmVudCIsImdldCIsInZpZXdzIiwidmlldyIsImZsYXQiLCJpbmNsdWRlcyIsImdldFN0eWxlcyIsIiRodHRwIiwic3ZjIiwicHV0IiwiZGVsZXRlIiwiZ2V0VGFza3MiLCJ0IiwibSIsInNodWZmbGUiLCJnZXRJbWFnZXMiLCJmb2xkZXIiLCJnZXRTb3VuZHMiLCJnZXRIaWdoc2NvcmUiLCJnYW1lIiwiZ2V0VXNlciIsInNldFRva2VuIiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJjcmVhdGVVc2VyIiwiRmlsZVN2YyIsImFuaW1hbHMiLCJhbmltYWwiLCJzb3VuZCIsInN1YnN0cmluZyIsImdldFJhbmRvbUFuaW1hbHMiLCJndWVzcyIsImdldFNjb3JlIiwiaXNTY29yZVZpc2libGUiXSwibWFwcGluZ3Mi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Q0FBQUEsRUFBQSxDQUFBQSxFQUFBRCxNQUFBQSxDQUFBaUQsS0FBQWhELEVBQUEsQ0FBQUEsQ0FBQTtBQUNBc0csTUFBQUEsUUFBQUEsQ0FBQUUsWUFBQUYsQ0FBQSxHQUFBQSxFQUFBLFNBQUE3SixJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLE1BQUEsTUFBQWdLLEtBQUEsR0FBQSxHQUFBaEssQ0FBQSxHQUFBLEdBQUEsR0FBQUEsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxJQUFBLE1BQUFnSyxLQUFBLEdBQUEsR0FBQWhLLENBQUEsR0FBQSxHQUFBLEdBQUFBLElBQUFBLENBQUFDLEtBQUFELENBQUEsSUFBQSxNQUFBZ0ssS0FBQSxHQUFBLEdBQUFoSyxDQUFBLEdBQUEsR0FBQTZKLEdBQ0FBLFFBQUFBLENBQUFFLFlBQUFGLENBQUEsTUFBQUEsRUFBQSxTQUFBN0osSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxJQUFBLE1BQUFnSyxLQUFBLEdBQUEsR0FBQWhLLENBQUEsR0FBQSxHQUFBLEdBQUFBLElBQUFBLENBQUFDLEtBQUFELENBQUEsTUFBQSxNQUFBZ0ssS0FBQSxHQUFBLEdBQUFoSyxDQUFBLEdBQUEsR0FBQSxHQUFBQSxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLElBQUEsTUFBQWdLLEtBQUEsR0FBQSxHQUFBaEssQ0FBQSxHQUFBLEdBQUE2SixDQURBQSxFQUVBQSxRQUFBQSxDQUFBRSxZQUFBRixDQUFBLEtBQUFBLEVBQUEsU0FBQTdKLElBQUFBLENBQUFDLEtBQUFELENBQUEsSUFBQSxNQUFBZ0ssS0FBQSxHQUFBLEdBQUFoSyxDQUFBLEdBQUEsR0FBQSxHQUFBQSxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLElBQUEsTUFBQWdLLEtBQUEsR0FBQSxHQUFBaEssQ0FBQSxHQUFBLEdBQUEsR0FBQUEsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxNQUFBLE1BQUFnSyxLQUFBLEdBQUEsR0FBQWhLLENBQUEsR0FBQSxHQUFBNkosQ0FGQUEsRUFHQUEsUUFBQUEsQ0FBQUUsWUFBQUYsQ0FBQSxNQUFBQSxFQUFBLFNBQUE3SixJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLElBQUEsTUFBQWdLLEtBQUEsR0FBQSxHQUFBaEssQ0FBQSxHQUFBLEdBQUEsR0FBQUEsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxNQUFBLE1BQUFnSyxLQUFBLEdBQUEsR0FBQWhLLENBQUEsR0FBQSxHQUFBLEdBQUFBLElBQUFBLENBQUFDLEtBQUFELENBQUEsSUFBQSxNQUFBZ0ssS0FBQSxHQUFBLEdBQUFoSyxDQUFBLEdBQUEsR0FBQTZKLENBSEFBLEVBSUFBLFFBQUFBLENBQUFFLFlBQUFGLENBQUEsS0FBQUEsRUFBQSxTQUFBN0osSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxNQUFBLE1BQUFnSyxLQUFBLEdBQUEsR0FBQWhLLENBQUEsR0FBQSxHQUFBLEdBQUFBLElBQUFBLENBQUFDLEtBQUFELENBQUEsSUFBQSxNQUFBZ0ssS0FBQSxHQUFBLEdBQUFoSyxDQUFBLEdBQUEsR0FBQSxHQUFBQSxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLElBQUEsTUFBQWdLLEtBQUEsR0FBQSxHQUFBaEssQ0FBQSxHQUFBLEdBQUE2SixDQUpBQSxFQUtBdEcsR0FBQUEsQ0FBQUcsU0FBQUgsR0FBQXNHLFFBTEFBLEVBTUF0RyxHQUFBQSxDQUFBRSxJQUFBRixHQUFBLGNBTkFzRyxFQU9BdEcsR0FBQUEsQ0FBQTBHLFFBQUExRyxDQUFBLFdBQUFBLEVBQUFELE1BQUFBLENBQUFpRCxLQUFBakQsR0FBQSxDQUFBQSxHQUFBQyxHQUFBQSxDQUFBMkcsV0FBQTNHLENBQUEsV0FBQUEsRUFBQWdELEtBQUFoRCxHQUFBLENBQUFBLEVBQUFELE1BQUFBLENBQUFrRCxNQUFBbEQsR0FBQSxDQUFBQyxDQVBBc0csRUFRQXRHLEdBQUFBLENBQUFFLElBQUFGLEdBQUEsY0FSQXNHLEVBU0F0RyxHQUFBQSxDQUFBMEcsUUFBQTFHLENBQUEsc0JBQUFBLEVBQUFELE1BQUFBLENBQUFpRCxLQUFBakQsR0FBQSxDQUFBQSxHQUFBQyxHQUFBQSxDQUFBMkcsV0FBQTNHLENBQUEsc0JBQUFBLEVBQUFnRCxLQUFBaEQsR0FBQSxDQUFBQSxFQUFBRCxNQUFBQSxDQUFBa0QsTUFBQWxELEdBQUEsQ0FBQUEsR0FBQSxFQUFBQyxDQVRBc0csRUFVQXRHLEdBQUFBLENBQUEwRyxRQUFBMUcsQ0FBQSw0Q0FBQUEsRUFBQUQsTUFBQUEsQ0FBQWlELEtBQUFqRCxHQUFBLENBQUFBLEdBQUFDLEdBQUFBLENBQUEyRyxXQUFBM0csQ0FBQSw0Q0FBQUEsRUFBQWdELEtBQUFoRCxHQUFBLENBQUFBLEVBQUFELE1BQUFBLENBQUFrRCxNQUFBbEQsR0FBQSxFQUFBQyxDQVZBc0c7QUFVQTtBQUFBLEtBRUFHLEtBQUFBLElBQUEzTyxTQUFBQSxHQUFBLENBQUFBLEdBQUEsQ0FBQSxDQUZBLElBR0EsR0FIQSxJQUlBMk8sS0FBQUEsR0FBQSxHQUFBQSxFQUNBM08sU0FBQUEsR0FBQUEsQ0FBQSxDQUxBLElBTUEyTyxLQUFBQSxHQUFBLENBQUFBLEtBQ0FBLEtBQUFBLEdBQUEsQ0FBQUEsRUFDQTNPLFNBQUFBLEdBQUFBLENBQUEsQ0FGQTJPLENBTkE7QUFVQU4sSUFBQUEscUJBQUFBLENBQUFDLElBQUFELENBQUFBO0FBQUFDLEdBcERBRCxDQWxhQW5FO0FBb2FBLE1BQUF5RSxLQUFBQSxHQUFBLENBQUE7QUFBQSxNQUNBM08sU0FBQUEsR0FBQUEsQ0FBQSxDQURBOztBQXFEQXVELEVBQUFBLE1BQUFBLENBQUFxRixLQUFBckYsR0FBQSxZQUFBO0FBQ0EsV0FBQTtBQUNBdUwsTUFBQUEsZUFBQUEsRUFBQSx5QkFBQWxHLEtBQUEsR0FBQTtBQURBLEtBQUE7QUFDQSxHQUZBckY7QUFFQSxDQXhrQkEsQ0FEQTdDLENKT0FBLEVLUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxhQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFVBQUE2QyxNQUFBLEVBQUFBO0FBRUEsTUFBQTBFLE1BQUFBLEdBQUExQixRQUFBQSxDQUFBQyxjQUFBRCxDQUFBLGNBQUFBLENBQUE7QUFBQSxNQUNBMkIsR0FBQUEsR0FBQUQsTUFBQUEsQ0FBQUUsVUFBQUYsQ0FBQSxJQUFBQSxDQURBO0FBQUEsTUFFQThHLE9BQUFBLEdBQUEsRUFGQTtBQUFBLE1BR0FDLE1BQUFBLEdBQUEsQ0FBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxDQUhBOztBQUtBLFdBQUFDLE1BQUEsR0FBQUE7QUFDQW5RLFNBQUF5TixRQUFBek4sR0FBQSxDQUFBQSxFQUNBQSxLQUFBb1EsTUFBQXBRLEdBQUEsQ0FEQUEsRUFFQUEsS0FBQXFRLFNBQUFyUSxHQUFBcVEsQ0FBQSxDQUZBclEsRUFHQUEsS0FBQXlMLEtBQUF6TCxHQUFBNkYsSUFBQUEsQ0FBQXFHLEtBQUFyRyxDQUFBLElBQUFBLElBQUFBLENBQUFELE1BQUFDLEVBQUFBLENBSEE3RixFQUlBQSxLQUFBc1EsYUFBQXRRLEdBQUE2RixJQUFBQSxDQUFBcUcsS0FBQXJHLENBQUEsS0FBQUEsSUFBQUEsQ0FBQUQsTUFBQUMsRUFBQUEsSUFBQSxDQUpBN0YsRUFLQUEsS0FBQXVRLFNBQUF2USxHQUFBNkYsSUFBQUEsQ0FBQXFHLEtBQUFyRyxDQUFBLE1BQUFBLElBQUFBLENBQUFELE1BQUFDLEVBQUFBLElBQUEsRUFMQTdGLEVBTUFBLEtBQUF1TSxDQUFBdk0sR0FBQTZGLElBQUFBLENBQUFxRyxLQUFBckcsQ0FBQUEsSUFBQUEsQ0FBQUQsTUFBQUMsS0FBQXNELE1BQUFBLENBQUFpRCxLQUFBdkcsQ0FOQTdGLEVBT0FBLEtBQUF3TSxDQUFBeE0sR0FBQTZGLElBQUFBLENBQUFxRyxLQUFBckcsQ0FBQUEsSUFBQUEsQ0FBQUQsTUFBQUMsS0FBQXNELE1BQUFBLENBQUFrRCxNQUFBeEcsQ0FQQTdGLEVBUUFBLEtBQUF3USxFQUFBeFEsR0FBQTZGLElBQUFBLENBQUFELE1BQUFDLE1BQUEsRUFBQUEsR0FBQSxDQUFBQSxHQUFBLENBQUEsQ0FSQTdGLEVBU0FBLEtBQUF5USxFQUFBelEsR0FBQTZGLElBQUFBLENBQUFELE1BQUFDLE1BQUEsRUFBQUEsR0FBQSxDQUFBQSxHQUFBLENBQUEsQ0FUQTdGO0FBeUNBdVA7O0FBQUFBLEVBQUFBLHFCQUFBQSxDQWZBLFNBQUFtQixhQUFBLEdBQUFBO0FBQ0FULElBQUFBLE9BQUFBLENBQUE1TyxJQUFBNE8sQ0FBQSxJQUFBRSxNQUFBLEVBQUFGLEdBQ0FBLE9BQUFBLEdBQUFBLE9BQUFBLENBQUE1SixNQUFBNEosQ0FBQSxVQUFBVSxNQUFBLEVBQUFBO0FBT0EsYUFOQUEsTUFBQUEsQ0FBQVAsTUFBQU8sS0FBQUEsTUFBQUEsQ0FBQUosU0FBQUksS0FDQUEsTUFBQUEsQ0FBQU4sU0FBQU0sR0FBQU4sQ0FBQSxDQURBTSxHQUdBQSxNQUFBQSxDQUFBcEUsQ0FBQW9FLElBQUFBLE1BQUFBLENBQUFILEVBQUFHLEdBQUFBLE1BQUFBLENBQUFsRixLQUhBa0YsRUFJQUEsTUFBQUEsQ0FBQW5FLENBQUFtRSxJQUFBQSxNQUFBQSxDQUFBRixFQUFBRSxHQUFBQSxNQUFBQSxDQUFBbEYsS0FKQWtGLEVBS0FBLE1BQUFBLENBQUFQLE1BQUFPLElBQUFBLE1BQUFBLENBQUFOLFNBQUFNLEdBQUEsQ0FBQUEsR0FBQSxDQUFBLENBTEFBLEVBTUFBLE1BQUFBLENBQUFQLE1BQUFPLEdBQUEsQ0FBQTtBQUFBLEtBUEFWLENBREFBLEVBZEE3RyxHQUFBQSxDQUFBcUcsU0FBQXJHLENBQUEsQ0FBQUEsRUFBQSxDQUFBQSxFQUFBRCxNQUFBQSxDQUFBaUQsS0FBQWhELEVBQUFELE1BQUFBLENBQUFrRCxNQUFBakQsQ0FjQTZHLEVBYkFBLE9BQUFBLENBQUF2TyxPQUFBdU8sQ0FBQSxVQUFBVSxNQUFBLEVBQUFBO0FBQ0E5SyxNQUFBQSxJQUFBQSxDQUFBcUcsS0FBQXJHLENBQUFxSyxNQUFBQSxDQUFBbEUsTUFBQWtFLEdBQUFTLE1BQUFBLENBQUFQLE1BQUFGLEdBQUFTLE1BQUFBLENBQUFKLFNBQUExSyxHQUNBdUQsR0FBQUEsQ0FBQXlELFNBQUF6RCxFQURBdkQsRUFFQXVELEdBQUFBLENBQUEwRCxHQUFBMUQsQ0FBQXVILE1BQUFBLENBQUFwRSxDQUFBbkQsRUFBQXVILE1BQUFBLENBQUFuRSxDQUFBcEQsRUFBQXVILE1BQUFBLENBQUFQLE1BQUFoSCxFQUFBLENBQUFBLEVBQUEsSUFBQXZELElBQUFBLENBQUFrSCxFQUFBM0QsQ0FGQXZELEVBR0F1RCxHQUFBQSxDQUFBRyxTQUFBSCxHQUFBOEcsTUFBQUEsQ0FBQXJLLElBQUFBLENBQUFxRyxLQUFBckcsQ0FBQXFLLE1BQUFBLENBQUFsRSxNQUFBa0UsR0FBQVMsTUFBQUEsQ0FBQVAsTUFBQUYsR0FBQVMsTUFBQUEsQ0FBQUosU0FBQTFLLENBQUFxSyxDQUhBckssRUFJQXVELEdBQUFBLENBQUErRCxJQUFBL0QsRUFKQXZELEVBS0F1RCxHQUFBQSxDQUFBNEQsV0FBQTVELEdBQUE4RyxNQUFBQSxDQUFBQSxNQUFBQSxDQUFBbEUsTUFBQWtFLEdBQUFySyxJQUFBQSxDQUFBcUcsS0FBQXJHLENBQUFxSyxNQUFBQSxDQUFBbEUsTUFBQWtFLEdBQUFTLE1BQUFBLENBQUFQLE1BQUFGLEdBQUFTLE1BQUFBLENBQUFKLFNBQUExSyxDQUFBcUssQ0FMQXJLLEVBTUF1RCxHQUFBQSxDQUFBNkQsU0FBQTdELEdBQUF1SCxNQUFBQSxDQUFBTCxhQUFBSyxHQUFBQSxNQUFBQSxDQUFBUCxNQUFBTyxHQUFBQSxNQUFBQSxDQUFBSixTQU5BMUssRUFPQXVELEdBQUFBLENBQUE4RCxNQUFBOUQsRUFQQXZEO0FBT0FxSCxLQVJBK0MsQ0FhQUEsRUFXQVYscUJBQUFBLENBQUFtQixhQUFBbkIsQ0FYQVU7QUFXQVMsR0FHQW5CLENBQUFBLEVBR0EsWUFBQTtBQWtCQSxhQUFBTixZQUFBLEdBQUFBO0FBQ0E5RixNQUFBQSxNQUFBQSxDQUFBaUQsS0FBQWpELEdBQUFqRyxNQUFBQSxDQUFBZ00sVUFBQS9GLEVBQ0FBLE1BQUFBLENBQUFrRCxNQUFBbEQsR0FBQWpHLE1BQUFBLENBQUFpTSxXQUFBak0sSUFBQWlHLE1BQUFBLENBQUFpRCxLQUFBakQsSUFBQSxHQUFBQSxHQUFBLEVBQUFBLEdBQUEsR0FBQWpHLENBREFpRztBQVRBakc7O0FBQUFBLElBQUFBLE1BQUFBLENBQUFrTSxnQkFBQWxNLENBQUEsUUFBQUEsRUFBQStMLFlBQUEvTCxFQUFBK0wsQ0FBQSxDQUFBL0wsR0FHQStMLFlBQUFBLEVBSEEvTDtBQVZBLEdBQUEsRUFIQXFNO0FBR0EsQ0FwREEsQ0FEQTNOLENMT0FBLEVNUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxhQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFVBQUEsRUFBQSxVQUFBNkMsTUFBQSxFQUFBbU0sUUFBQSxFQUFBQTtBQUVBbk0sRUFBQUEsTUFBQUEsQ0FBQW9NLE9BQUFwTSxHQUFBLENBQ0E7QUFDQXFELElBQUFBLElBQUFBLEVBQUEsTUFEQTtBQUVBZ0osSUFBQUEsSUFBQUEsRUFBQTtBQUZBLEdBREEsRUFLQTtBQUNBaEosSUFBQUEsSUFBQUEsRUFBQSxjQURBO0FBRUFnSixJQUFBQSxJQUFBQSxFQUFBO0FBRkEsR0FMQSxFQVNBO0FBQ0FoSixJQUFBQSxJQUFBQSxFQUFBLFFBREE7QUFFQWdKLElBQUFBLElBQUFBLEVBQUE7QUFGQSxHQVRBLEVBYUE7QUFDQWhKLElBQUFBLElBQUFBLEVBQUEsT0FEQTtBQUVBZ0osSUFBQUEsSUFBQUEsRUFBQTtBQUZBLEdBYkEsQ0FBQXJNLEVBb0JBQSxNQUFBQSxDQUFBc00sT0FBQXRNLEdBQUE7QUFDQXVNLElBQUFBLEtBQUFBLEVBQUEsRUFEQTtBQUVBbEosSUFBQUEsSUFBQUEsRUFBQSxFQUZBO0FBR0FtSixJQUFBQSxLQUFBQSxFQUFBLEVBSEE7QUFJQUMsSUFBQUEsS0FBQUEsRUFBQSxFQUpBO0FBS0FDLElBQUFBLE9BQUFBLEVBQUE7QUFMQSxHQXBCQTFNLEVBNEJBQSxNQUFBQSxDQUFBTCxJQUFBSyxHQUFBLFlBQUE7QUFDQUEsSUFBQUEsTUFBQUEsQ0FBQTJNLE9BQUEzTSxHQUFBMk0sQ0FBQSxDQUFBM00sRUFDQWxCLE9BQUFBLENBQUFDLEdBQUFELENBQUEsTUFBQUEsQ0FEQWtCLEVBRUFtTSxRQUFBQSxDQUFBeE0sSUFBQXdNLENBQUE7QUFDQUksTUFBQUEsS0FBQUEsRUFBQXZNLE1BQUFBLENBQUFzTSxPQUFBdE0sQ0FBQXVNLEtBREE7QUFFQWxKLE1BQUFBLElBQUFBLEVBQUFyRCxNQUFBQSxDQUFBc00sT0FBQXRNLENBQUFxRCxJQUZBO0FBR0FtSixNQUFBQSxLQUFBQSxFQUFBeE0sTUFBQUEsQ0FBQXNNLE9BQUF0TSxDQUFBd00sS0FIQTtBQUlBQyxNQUFBQSxLQUFBQSxFQUFBek0sTUFBQUEsQ0FBQXNNLE9BQUF0TSxDQUFBeU0sS0FKQTtBQUtBQyxNQUFBQSxPQUFBQSxFQUFBMU0sTUFBQUEsQ0FBQXNNLE9BQUF0TSxDQUFBME07QUFMQSxLQUFBUCxFQU9BNUksSUFQQTRJLENBT0EsVUFBQTNJLFFBQUEsRUFBQUE7QUFDQXhELE1BQUFBLE1BQUFBLENBQUE0TSxJQUFBNU0sR0FBQTRNLENBQUEsQ0FBQTVNLEVBQ0FsQixPQUFBQSxDQUFBQyxHQUFBRCxDQUFBLDZCQUFBQSxFQUFBMEUsUUFBQUEsQ0FBQXFKLE1BQUEvTixFQUFBMEUsUUFBQUEsQ0FBQTZJLElBQUF2TixDQURBa0IsRUFFQWxCLE9BQUFBLENBQUFDLEdBQUFELENBQUEwRSxRQUFBMUUsQ0FGQWtCO0FBRUF3RCxLQVZBMkksRUFXQSxVQUFBVyxHQUFBLEVBQUFBO0FBQ0E5TSxNQUFBQSxNQUFBQSxDQUFBMk0sT0FBQTNNLEdBQUEyTSxDQUFBLENBQUEzTSxFQUNBbEIsT0FBQUEsQ0FBQUMsR0FBQUQsQ0FBQSxnQkFBQUEsRUFBQWdPLEdBQUFoTyxDQURBa0I7QUFDQThNLEtBYkFYLENBRkFuTTtBQWVBOE0sR0E1Q0E5TTtBQTRDQThNLENBOUNBLENBREEzUCxDTk9BQSxFT1BBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsZ0JBREFBLEVBQ0EsQ0FBQSxRQUFBLEVBQUEsVUFBQTZDLE1BQUEsRUFBQUE7QUFFQUEsRUFBQUEsTUFBQUEsQ0FBQStNLFFBQUEvTSxHQUFBLFVBQUFnTixTQUFBLEVBQUFBO0FBQ0EsUUFBQWhOLE1BQUFBLENBQUEyQixNQUFBLEVBQ0EsT0FBQTNCLE1BQUFBLENBQUEyQixNQUFBM0IsQ0FBQWlOLElBQUFqTixDQUFBLFVBQUE2QixLQUFBLEVBQUFBO0FBQ0EsYUFBQUEsS0FBQUEsQ0FBQXFMLElBQUFyTCxLQUFBbUwsU0FBQTtBQUFBQSxLQURBaE4sQ0FBQTtBQUNBZ04sR0FIQWhOO0FBR0FnTixDQUxBLENBREE3UCxDUE9BQSxFUVBBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsYUFEQUEsRUFDQSxDQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQTZDLE1BQUEsRUFBQW1OLE9BQUEsRUFBQUE7QUFFQW5OLEVBQUFBLE1BQUFBLENBQUFvTixvQkFBQXBOLEdBQUFvTixDQUFBLENBQUFwTixFQUVBVSxDQUFBQSxDQUFBZ0IsT0FBQWhCLENBQUEsdURBQUFBLEVBQUEsVUFBQThDLFFBQUEsRUFBQUEsQ0FBQUEsQ0FBQTlDLENBRkFWLEVBTUFBLE1BQUFBLENBQUFxTixhQUFBck4sR0FBQUEsTUFBQUEsQ0FBQThCLE9BQUE5QixDQUFBLENBQUFBLENBTkFBLEVBUUFBLE1BQUFBLENBQUFzTixXQUFBdE4sR0FBQSxVQUFBdU4sS0FBQSxFQUFBQTtBQUNBdk4sSUFBQUEsTUFBQUEsQ0FBQXFOLGFBQUFyTixHQUFBdU4sS0FBQXZOLEVBQ0FBLE1BQUFBLENBQUFvTixvQkFBQXBOLEdBQUFvTixDQUFBLENBREFwTjtBQUNBLEdBVkFBLEVBYUFBLE1BQUFBLENBQUF3TixTQUFBeE4sR0FBQSxVQUFBeU4sS0FBQSxFQUFBQyxLQUFBLEVBQUFqSCxLQUFBLEVBQUFBO0FBQ0EsV0FBQSxDQUFBLENBQUFnSCxLQUFBQSxDQUFBRSxNQUFBLElBQ0FGLEtBQUFBLENBQUFFLE1BQUFGLENBQUFsRyxNQUFBa0csR0FBQSxDQURBO0FBQ0EsR0FmQXpOO0FBZUEsQ0FqQkEsQ0FEQTdDLENST0FBLEVTUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxjQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBNkMsTUFBQSxFQUFBd0UsT0FBQSxFQUFBQTtBQUVBLE1BR0FFLE1BQUFBLEdBQUExQixRQUFBQSxDQUFBQyxjQUFBRCxDQUFBLGVBQUFBLENBSEE7QUFBQSxNQUlBMkIsR0FBQUEsR0FBQUQsTUFBQUEsQ0FBQUUsVUFBQUYsQ0FBQSxJQUFBQSxDQUpBO0FBQUEsTUFLQWtKLGFBQUFBLEdBQUEsSUFBQTlILEtBQUEsRUFMQTtBQU1BOEgsRUFBQUEsYUFBQUEsQ0FBQWxILEdBQUFrSCxHQUFBLHVCQUFBQTtBQUNBLE1BQUFDLFVBQUFBLEdBQUEsSUFBQS9ILEtBQUEsRUFBQTtBQUNBK0gsRUFBQUEsVUFBQUEsQ0FBQW5ILEdBQUFtSCxHQUFBLG9CQUFBQTtBQUNBLE1BQUFDLFFBQUFBLEdBQUEsRUFBQTtBQUFBLE1BQ0FDLE9BQUFBLEdBQUFBLENBQUEsQ0FEQTtBQUFBLE1BR0FDLE9BQUFBLEdBQUE7QUFDQUMsSUFBQUEsSUFBQUEsRUFBQTtBQUNBQyxNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEVBQUEsQ0FGQTtBQUdBekksTUFBQUEsT0FBQUEsRUFBQSxDQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBMkksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBREE7QUFRQUMsSUFBQUEsR0FBQUEsRUFBQTtBQUNBSCxNQUFBQSxLQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEVBQUEsQ0FGQTtBQUdBekksTUFBQUEsT0FBQUEsRUFBQSxDQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBMkksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBUkE7QUFlQUUsSUFBQUEsSUFBQUEsRUFBQTtBQUNBSixNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FGQTtBQUdBekksTUFBQUEsT0FBQUEsRUFBQSxDQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBMkksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBZkE7QUFzQkFHLElBQUFBLEdBQUFBLEVBQUE7QUFDQUwsTUFBQUEsS0FBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxFQUFBLENBREE7QUFFQUMsTUFBQUEsR0FBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLENBRkE7QUFHQXpJLE1BQUFBLE9BQUFBLEVBQUEsQ0FIQTtBQUlBRCxNQUFBQSxJQUFBQSxFQUFBLENBSkE7QUFLQTJJLE1BQUFBLE9BQUFBLEVBQUFBLENBQUE7QUFMQSxLQXRCQTtBQTZCQUksSUFBQUEsSUFBQUEsRUFBQTtBQUNBTixNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FGQTtBQUdBekksTUFBQUEsT0FBQUEsRUFBQSxFQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBMkksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBN0JBO0FBb0NBSyxJQUFBQSxLQUFBQSxFQUFBO0FBQ0FQLE1BQUFBLEtBQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsR0FBQSxDQURBO0FBRUFDLE1BQUFBLEdBQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUZBO0FBR0F6SSxNQUFBQSxPQUFBQSxFQUFBLEVBSEE7QUFJQUQsTUFBQUEsSUFBQUEsRUFBQSxDQUpBO0FBS0EySSxNQUFBQSxPQUFBQSxFQUFBQSxDQUFBO0FBTEEsS0FwQ0E7QUEyQ0FNLElBQUFBLEtBQUFBLEVBQUE7QUFDQVIsTUFBQUEsS0FBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxHQUFBLENBREE7QUFFQUMsTUFBQUEsR0FBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLENBRkE7QUFHQXpJLE1BQUFBLE9BQUFBLEVBQUEsRUFIQTtBQUlBRCxNQUFBQSxJQUFBQSxFQUFBLENBSkE7QUFLQTJJLE1BQUFBLE9BQUFBLEVBQUFBLENBQUE7QUFMQSxLQTNDQTtBQWtEQU8sSUFBQUEsS0FBQUEsRUFBQTtBQUNBVCxNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FGQTtBQUdBekksTUFBQUEsT0FBQUEsRUFBQSxFQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBMkksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBbERBO0FBeURBUSxJQUFBQSxHQUFBQSxFQUFBO0FBQ0FWLE1BQUFBLEtBQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsR0FBQSxDQURBO0FBRUFDLE1BQUFBLEdBQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUZBO0FBR0F6SSxNQUFBQSxPQUFBQSxFQUFBLENBSEE7QUFJQUQsTUFBQUEsSUFBQUEsRUFBQSxDQUpBO0FBS0EySSxNQUFBQSxPQUFBQSxFQUFBQSxDQUFBO0FBTEE7QUF6REEsR0FIQTs7QUFxRUEsV0FBQVMsT0FBQSxDQUFBQyxJQUFBLEVBQUFBO0FBQ0F2VCxTQUFBeU0sUUFBQXpNLEdBQUEsQ0FBQTZGLElBQUFBLENBQUFDLEtBQUFELENBQUFBLElBQUFBLENBQUFELE1BQUFDLE1BQUFzRCxNQUFBQSxDQUFBaUQsS0FBQWpELEdBQUEsR0FBQXRELENBQUFBLElBQUEsR0FBQSxFQUFBQSxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBQSxJQUFBQSxDQUFBRCxNQUFBQyxNQUFBc0QsTUFBQUEsQ0FBQWtELE1BQUFsRCxHQUFBLEdBQUF0RCxDQUFBQSxJQUFBLEdBQUEsQ0FBQTdGLEVBQ0FBLEtBQUFrQixTQUFBbEIsR0FBQSxJQUFBNkYsSUFBQUEsQ0FBQUQsTUFBQUMsRUFBQSxHQUFBLENBQUEsR0FoRkEsQ0FnRkEsR0EvRUEsQ0E4RUE3RixFQUVBQSxLQUFBd1QsR0FBQXhULEdBQUEsVUFBQXlULE1BQUEsRUFBQUE7QUFDQXpULFdBQUF5VCxNQUFBelQsR0FBQXlTLE9BQUFBLENBQUFnQixNQUFBaEIsQ0FBQXpTLEVBQ0FBLEtBQUFpSyxLQUFBakssR0FBQSxDQURBQSxFQUVBQSxLQUFBb00sS0FBQXBNLEdBQUFvTSxDQUFBcE0sS0FBQXlULE1BQUF6VCxDQUFBNFMsR0FBQTVTLENBQUEsQ0FBQUEsSUFBQUEsS0FBQXlULE1BQUF6VCxDQUFBMlMsS0FBQTNTLENBQUEsQ0FBQUEsQ0FBQW9NLElBQUFwTSxLQUFBeVQsTUFBQXpULENBQUFtSyxPQUZBbkssRUFHQUEsS0FBQXFNLE1BQUFyTSxHQUFBcU0sQ0FBQXJNLEtBQUF5VCxNQUFBelQsQ0FBQTRTLEdBQUE1UyxDQUFBLENBQUFBLElBQUFBLEtBQUF5VCxNQUFBelQsQ0FBQTJTLEtBQUEzUyxDQUFBLENBQUFBLENBQUFBLEdBQUEsTUFBQUEsS0FBQXlULE1BQUF6VCxDQUFBa0ssSUFBQWxLLEdBQUEsQ0FBQSxDQUFBcU0sSUFBQXJNLEtBQUF5VCxNQUFBelQsQ0FBQWtLLElBSEFsSyxFQUlBQSxLQUFBMFQsU0FBQTFULEdBQUEwVCxDQUFBLENBSkExVDtBQUlBLEtBUEFBLEVBU0FBLEtBQUF3VCxHQUFBeFQsQ0FBQXVULElBQUF2VCxDQVRBQSxFQVVBQSxLQUFBNE0sSUFBQTVNLEdBQUEsWUFBQTtBQUNBb0osTUFBQUEsR0FBQUEsQ0FBQStFLElBQUEvRSxJQUNBQSxHQUFBQSxDQUFBZ0YsU0FBQWhGLENBQUFwSixLQUFBeU0sUUFBQXpNLENBQUEsQ0FBQUEsQ0FBQW9KLEVBQUFwSixLQUFBeU0sUUFBQXpNLENBQUEsQ0FBQUEsQ0FBQW9KLENBREFBLEVBRUFBLEdBQUFBLENBQUFnRixTQUFBaEYsQ0FBQXBKLEtBQUFvTSxLQUFBcE0sR0FBQSxDQUFBb0osRUFBQXBKLEtBQUFxTSxNQUFBck0sR0FBQSxDQUFBb0osQ0FGQUEsRUExRkEsTUE2RkFwSixLQUFBa0IsU0E3RkEsSUE4RkFrSSxHQUFBQSxDQUFBdUssS0FBQXZLLENBQUF1SyxDQUFBLENBQUF2SyxFQUFBLENBQUFBLENBSkFBO0FBTUEsVUFBQWtGLE1BQUFBLEdBQUF0TyxLQUFBaUssS0FBQWpLLEdBQUFBLEtBQUF5VCxNQUFBelQsQ0FBQW1LLE9BQUE7QUFBQSxVQUNBb0UsR0FBQUEsR0FBQTFJLElBQUFBLENBQUFDLEtBQUFELENBQUE3RixLQUFBaUssS0FBQWpLLEdBQUFBLEtBQUF5VCxNQUFBelQsQ0FBQW1LLE9BQUF0RSxDQURBO0FBRUF1RCxNQUFBQSxHQUFBQSxDQUFBb0YsU0FBQXBGLENBQUFpSixhQUFBakosRUFBQXBKLEtBQUFvTSxLQUFBcE0sR0FBQXNPLE1BQUF0TyxHQUFBQSxLQUFBeVQsTUFBQXpULENBQUEyUyxLQUFBM1MsQ0FBQSxDQUFBQSxDQUFBb0osRUFBQSxDQUFBcEosS0FBQXFNLE1BQUFyTSxHQUFBLEVBQUEsSUFBQXVPLEdBQUEsR0FBQXZPLEtBQUF5VCxNQUFBelQsQ0FBQTJTLEtBQUEzUyxDQUFBLENBQUFBLENBQUFvSixFQUFBcEosS0FBQW9NLEtBQUFoRCxFQUFBcEosS0FBQXFNLE1BQUFqRCxFQUFBLENBQUFBLEVBQUEsQ0FBQUEsRUFBQSxJQUFBcEosS0FBQW9NLEtBQUFoRCxFQUFBLElBQUFwSixLQUFBcU0sTUFBQWpELEdBQ0FBLEdBQUFBLENBQUFxRixPQUFBckYsRUFEQUEsRUFFQXBKLEtBQUF5VCxNQUFBelQsQ0FBQTZTLE9BQUE3UyxHQUNBQSxLQUFBMFQsU0FBQTFULElBQ0FBLEtBQUFpSyxLQUFBakssSUFDQUEsS0FBQWlLLEtBQUFqSyxJQUFBQSxLQUFBeVQsTUFBQXpULENBQUFtSyxPQUFBbkssR0FBQUEsS0FBQXlULE1BQUF6VCxDQUFBa0ssSUFBQWxLLEtBQ0FBLEtBQUEwVCxTQUFBMVQsR0FBQTBULENBQUExVCxLQUFBMFQsU0FBQTFULEVBQ0FBLEtBQUFpSyxLQUFBakssRUFGQUEsQ0FGQUEsS0FPQUEsS0FBQWlLLEtBQUFqSyxJQUNBQSxLQUFBaUssS0FBQWpLLEdBQUEsQ0FBQUEsS0FDQUEsS0FBQTBULFNBQUExVCxHQUFBMFQsQ0FBQTFULEtBQUEwVCxTQUFBMVQsRUFDQUEsS0FBQWlLLEtBQUFqSyxHQUFBLENBRkFBLENBUkFBLENBREFBLElBZUFBLEtBQUFpSyxLQUFBakssSUFDQUEsS0FBQWlLLEtBQUFqSyxJQUFBQSxLQUFBeVQsTUFBQXpULENBQUFtSyxPQUFBbkssR0FBQUEsS0FBQXlULE1BQUF6VCxDQUFBa0ssSUFBQWxLLEtBQ0FBLEtBQUFpSyxLQUFBakssR0FBQSxDQURBQSxDQWhCQUEsQ0FGQW9KO0FBbUJBLEtBdENBcEo7QUE0RkE7O0FBQUEsV0FBQWlQLFlBQUEsR0FBQUE7QUFDQTlGLElBQUFBLE1BQUFBLENBQUFpRCxLQUFBakQsR0FBQWpHLE1BQUFBLENBQUFnTSxVQUFBL0YsRUFDQUEsTUFBQUEsQ0FBQWtELE1BQUFsRCxHQUFBakcsTUFBQUEsQ0FBQWlNLFdBQUFqTSxJQUFBaUcsTUFBQUEsQ0FBQWlELEtBQUFqRCxJQUFBLEdBQUFBLEdBQUEsRUFBQUEsR0FBQSxHQUFBakcsQ0FEQWlHO0FBUkFqRzs7QUFBQUEsRUFBQUEsTUFBQUEsQ0FBQWtNLGdCQUFBbE0sQ0FBQSxRQUFBQSxFQUFBK0wsWUFBQS9MLEVBQUErTCxDQUFBLENBQUEvTCxHQUVBK0wsWUFBQUEsRUFGQS9MLEVBVEE0SSxNQUFBQSxDQUFBQyxJQUFBRCxDQUFBMkcsT0FBQTNHLEVBQUFwSyxPQUFBb0ssQ0FBQSxVQUFBMkgsTUFBQSxFQUFBQTtBQUNBbEIsSUFBQUEsUUFBQUEsQ0FBQTFNLElBQUFBLENBQUFxRyxLQUFBckcsQ0FBQSxNQUFBQSxJQUFBQSxDQUFBRCxNQUFBQyxFQUFBQSxDQUFBME0sQ0FBQUEsR0FBQSxJQUFBZSxPQUFBLENBQUFHLE1BQUEsQ0FBQWxCO0FBQUFrQixHQURBM0gsQ0FTQTVJO0FBY0EsTUFBQTBRLEtBQUFBLEdBQUEsSUF2REEsWUFBQTtBQUNBNVQsU0FBQXlNLFFBQUF6TSxHQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQUEsRUFDQUEsS0FBQXlULE1BQUF6VCxHQUFBO0FBQ0EyUyxNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEdBQUEsQ0FGQTtBQUdBekksTUFBQUEsT0FBQUEsRUFBQSxDQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUE7QUFKQSxLQURBbEssRUFPQUEsS0FBQW9NLEtBQUFwTSxHQUFBb00sQ0FBQXBNLEtBQUF5VCxNQUFBelQsQ0FBQTRTLEdBQUE1UyxDQUFBLENBQUFBLElBQUFBLEtBQUF5VCxNQUFBelQsQ0FBQTJTLEtBQUEzUyxDQUFBLENBQUFBLENBQUFvTSxJQUFBcE0sS0FBQXlULE1BQUF6VCxDQUFBbUssT0FQQW5LLEVBUUFBLEtBQUFxTSxNQUFBck0sR0FBQXFNLENBQUFyTSxLQUFBeVQsTUFBQXpULENBQUE0UyxHQUFBNVMsQ0FBQSxDQUFBQSxJQUFBQSxLQUFBeVQsTUFBQXpULENBQUEyUyxLQUFBM1MsQ0FBQSxDQUFBQSxDQUFBcU0sSUFBQXJNLEtBQUF5VCxNQUFBelQsQ0FBQWtLLElBUkFsSyxFQVNBQSxLQUFBaUssS0FBQWpLLEdBQUEsQ0FUQUEsRUFVQUEsS0FBQTZULElBQUE3VCxHQUFBLFlBQUE7QUFJQSxVQUFBc08sTUFBQSxFQUFBQyxHQUFBO0FBSEFuRixNQUFBQSxHQUFBQSxDQUFBK0UsSUFBQS9FLElBQ0FBLEdBQUFBLENBQUFnRixTQUFBaEYsQ0FBQXBKLEtBQUF5TSxRQUFBek0sQ0FBQSxDQUFBQSxDQUFBb0osRUFBQXBKLEtBQUF5TSxRQUFBek0sQ0FBQSxDQUFBQSxDQUFBb0osQ0FEQUEsRUFFQUEsR0FBQUEsQ0FBQWdGLFNBQUFoRixDQUFBcEosS0FBQW9NLEtBQUFwTSxHQUFBLENBQUFvSixFQUFBcEosS0FBQXFNLE1BQUFyTSxHQUFBLENBQUFvSixDQUZBQSxFQUlBb0osT0FBQUEsSUFDQWxFLE1BQUFBLEdBQUF0TyxLQUFBaUssS0FBQWpLLEdBQUFBLEtBQUF5VCxNQUFBelQsQ0FBQW1LLE9BQUFtRSxFQUNBQyxHQUFBQSxHQUFBMUksSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQTdGLEtBQUFpSyxLQUFBakssR0FBQUEsS0FBQXlULE1BQUF6VCxDQUFBbUssT0FBQXRFLENBREF5SSxFQUVBdE8sS0FBQWlLLEtBQUFqSyxHQUFBLENBQUFBLElBQ0FBLEtBQUFpSyxLQUFBakssRUFKQXdTLEtBT0FsRSxNQUFBQSxHQUFBLENBQUFBLEVBQ0FDLEdBQUFBLEdBQUEsQ0FSQWlFLENBSkFwSixFQWNBQSxHQUFBQSxDQUFBb0YsU0FBQXBGLENBQUFrSixVQUFBbEosRUFBQXBKLEtBQUFvTSxLQUFBcE0sR0FBQXNPLE1BQUF0TyxHQUFBQSxLQUFBeVQsTUFBQXpULENBQUEyUyxLQUFBM1MsQ0FBQSxDQUFBQSxDQUFBb0osRUFBQXBKLEtBQUFxTSxNQUFBck0sR0FBQXVPLEdBQUF2TyxHQUFBQSxLQUFBeVQsTUFBQXpULENBQUEyUyxLQUFBM1MsQ0FBQSxDQUFBQSxDQUFBQSxHQUFBLENBQUFvSixFQUFBcEosS0FBQW9NLEtBQUFoRCxFQUFBcEosS0FBQXFNLE1BQUFqRCxFQUFBLENBQUFBLEVBQUEsQ0FBQUEsRUFBQSxJQUFBcEosS0FBQW9NLEtBQUFoRCxFQUFBLElBQUFwSixLQUFBcU0sTUFBQWpELENBZEFBLEVBZUFBLEdBQUFBLENBQUFxRixPQUFBckYsRUFmQUE7QUFlQXFGLEtBMUJBek87QUEwQkF5TyxHQTRCQSxFQUFBO0FBNUJBQSxHQStCQSxTQUFBZSxJQUFBLEdBQUFBO0FBRUEsUUFEQXBHLEdBQUFBLENBQUFxRyxTQUFBckcsQ0FBQSxDQUFBQSxFQUFBLENBQUFBLEVBQUFELE1BQUFBLENBQUFpRCxLQUFBaEQsRUFBQUQsTUFBQUEsQ0FBQWtELE1BQUFqRCxHQUNBb0osT0FBQSxFQVNBLEtBQUEsSUFBQW5JLENBQUEsSUFBQWtJLFFBQUEsRUFDQUEsUUFBQUEsQ0FBQWxJLENBQUFrSSxDQUFBQSxDQUFBM0YsSUFBQTJGLEdBVkEsS0FDQW5KLEdBQUFBLENBQUF5RCxTQUFBekQsSUFDQUEsR0FBQUEsQ0FBQUUsSUFBQUYsR0FBQSxjQURBQSxFQUVBQSxHQUFBQSxDQUFBNkQsU0FBQTdELEdBQUEsSUFGQUEsRUFHQUEsR0FBQUEsQ0FBQTRELFdBQUE1RCxHQUFBLE1BSEFBLEVBSUFBLEdBQUFBLENBQUEwSyxJQUFBMUssQ0FBQSxFQUFBQSxFQUFBRCxNQUFBQSxDQUFBa0QsTUFBQWxELEdBQUEsRUFBQUMsRUFBQUEsR0FBQUEsQ0FBQTJHLFdBQUEzRyxDQUFBLE9BQUFBLEVBQUFnRCxLQUFBaEQsR0FBQSxFQUFBQSxFQUFBQSxHQUFBQSxDQUFBMkcsV0FBQTNHLENBQUEsT0FBQUEsRUFBQWlELE1BQUFqRCxHQUFBRCxNQUFBQSxDQUFBa0QsTUFBQWpELEdBQUEsRUFBQUEsQ0FKQUEsRUFLQUEsR0FBQUEsQ0FBQStELElBQUEvRCxFQUxBQSxFQU1BQSxHQUFBQSxDQUFBMEcsUUFBQTFHLENBQUEsT0FBQUEsRUFBQSxFQUFBQSxFQUFBRCxNQUFBQSxDQUFBa0QsTUFBQWxELEdBQUEsRUFBQUMsQ0FOQUE7QUFZQXdLLElBQUFBLEtBQUFBLENBQUFDLElBQUFELElBQ0FwQixPQUFBQSxHQUFBQSxDQUFBLENBREFvQixFQUVBMU4sVUFBQUEsQ0FBQSxZQUFBO0FBQ0FzSixNQUFBQSxJQUFBQTtBQUFBQSxLQURBdEosRUFFQSxHQUZBQSxDQUZBME47QUFqQkFwRSxHQUVBLEVBL0JBZjtBQTZCQWUsQ0FyTEEsQ0FEQTVOLENUT0FBLEVVUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxXQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFdBQUEsRUFBQSxlQUFBLEVBQUEsVUFBQTZDLE1BQUEsRUFBQUMsU0FBQSxFQUFBcVAsYUFBQSxFQUFBQTtBQUVBdFAsRUFBQUEsTUFBQUEsQ0FBQXVQLFlBQUF2UCxHQUFBdVAsQ0FBQSxDQUFBdlAsRUFFQUEsTUFBQUEsQ0FBQThPLElBQUE5TyxHQUFBLFlBQUE7QUFDQXNQLElBQUFBLGFBQUFBLENBQUFFLGFBQUFGLEdBQ0EvTCxJQURBK0wsQ0FDQSxVQUFBOUwsUUFBQSxFQUFBQTtBQUdBLFdBQUEsSUFBQW9DLENBQUEsSUFGQTVGLE1BQUFBLENBQUF5UCxVQUFBelAsR0FBQXdELFFBQUFBLENBQUFoRSxJQUFBUSxFQUNBQSxNQUFBQSxDQUFBMFAsS0FBQTFQLEdBQUEsRUFEQUEsRUFFQUEsTUFBQUEsQ0FBQXlQLFVBQUEsRUFDQSxLQUFBLElBQUFFLENBQUEsSUFBQTNQLE1BQUFBLENBQUF5UCxVQUFBelAsQ0FBQTRGLENBQUE1RixFQUFBMFAsS0FBQSxFQUNBMVAsTUFBQUEsQ0FBQTBQLEtBQUExUCxDQUFBcEQsSUFBQW9ELENBQUE7QUFDQTRQLFFBQUFBLFFBQUFBLEVBQUE1UCxNQUFBQSxDQUFBeVAsVUFBQXpQLENBQUE0RixDQUFBNUYsRUFBQXFELElBREE7QUFFQXdNLFFBQUFBLElBQUFBLEVBQUE3UCxNQUFBQSxDQUFBeVAsVUFBQXpQLENBQUE0RixDQUFBNUYsRUFBQTBQLEtBQUExUCxDQUFBMlAsQ0FBQTNQLEVBQUFxRDtBQUZBLE9BQUFyRDtBQUVBcUQsS0FSQWlNO0FBUUFqTSxHQVhBckQsRUFrQkFBLE1BQUFBLENBQUE4UCxjQUFBOVAsR0FBQSxVQUFBNFAsUUFBQSxFQUFBQTtBQUlBLFNBQUEsSUFBQWhLLENBQUEsSUFIQTVGLE1BQUFBLENBQUErUCxnQkFBQS9QLEdBQUE0UCxRQUFBNVAsRUFDQUEsTUFBQUEsQ0FBQWdRLGFBQUFoUSxHQUFBLEVBREFBLEVBRUFBLE1BQUFBLENBQUFpUSxlQUFBalEsR0FBQSxFQUZBQSxFQUdBQSxNQUFBQSxDQUFBK1AsZ0JBQUEvUCxDQUFBMFAsS0FBQSxFQUNBMVAsTUFBQUEsQ0FBQWlRLGVBQUFqUSxDQUFBcEQsSUFBQW9ELENBQUFBLE1BQUFBLENBQUErUCxnQkFBQS9QLENBQUEwUCxLQUFBMVAsQ0FBQTRGLENBQUE1RixDQUFBQTs7QUFFQUEsSUFBQUEsTUFBQUEsQ0FBQXVQLFlBQUF2UCxHQUFBdVAsQ0FBQSxDQUFBdlAsRUFDQUEsTUFBQUEsQ0FBQWtRLGVBQUFsUSxHQUFBLEVBREFBO0FBQ0EsR0ExQkFBLEVBNkJBQSxNQUFBQSxDQUFBbVEsV0FBQW5RLEdBQUEsVUFBQTRQLFFBQUEsRUFBQUE7QUFFQSxTQURBLElBQUFRLEtBQUFBLEdBQUFBLENBQUEsQ0FBQSxFQUNBeEssQ0FBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUFBLEdBQUE1RixNQUFBQSxDQUFBeVAsVUFBQXpQLENBQUF1SCxNQUFBLEVBQUEzQixDQUFBQSxFQUFBLEVBQ0E1RixNQUFBQSxDQUFBeVAsVUFBQXpQLENBQUE0RixDQUFBNUYsRUFBQXFELElBQUFyRCxLQUFBNFAsUUFBQTVQLEtBQ0FBLE1BQUFBLENBQUE4UCxjQUFBOVAsQ0FBQUEsTUFBQUEsQ0FBQXlQLFVBQUF6UCxDQUFBNEYsQ0FBQTVGLENBQUFBLEdBQ0FvUSxLQUFBQSxHQUFBQSxDQUFBLENBRkFwUTs7QUFLQW9RLElBQUFBLEtBQUFBLElBQ0FkLGFBQUFBLENBQUFlLFdBQUFmLENBQUE7QUFDQU0sTUFBQUE7QUFEQSxLQUFBTixFQUVBL0wsSUFGQStMLENBRUEsVUFBQU0sUUFBQSxFQUFBQTtBQUNBNVAsTUFBQUEsTUFBQUEsQ0FBQThPLElBQUE5TyxJQUNBQSxNQUFBQSxDQUFBOFAsY0FBQTlQLENBQUE0UCxRQUFBNVAsQ0FEQUE7QUFDQTRQLEtBSkFOLENBREFjLEVBUUFwUSxNQUFBQSxDQUFBa1EsZUFBQWxRLEdBQUEsRUFSQW9RO0FBUUEsR0E3Q0FwUSxFQWdEQUEsTUFBQUEsQ0FBQXNRLE9BQUF0USxHQUFBLFVBQUE2UCxJQUFBLEVBQUFBO0FBQ0EsUUFBQU8sS0FBQUEsR0FBQUEsQ0FBQSxDQUFBOztBQUNBLFNBQUEsSUFBQXhLLENBQUEsSUFBQTVGLE1BQUFBLENBQUErUCxnQkFBQS9QLENBQUEwUCxLQUFBLEVBQ0ExUCxNQUFBQSxDQUFBK1AsZ0JBQUEvUCxDQUFBMFAsS0FBQTFQLENBQUE0RixDQUFBNUYsRUFBQXFELElBQUFyRCxLQUFBNlAsSUFBQTdQLEtBQ0FvUSxLQUFBQSxHQUFBQSxDQUFBLENBQUFBLEVBQ0FwUSxNQUFBQSxDQUFBdVEsVUFBQXZRLENBQUFBLE1BQUFBLENBQUErUCxnQkFBQS9QLENBQUEwUCxLQUFBMVAsQ0FBQTRGLENBQUE1RixDQUFBQSxDQUZBQTs7QUFLQW9RLElBQUFBLEtBQUFBLElBQ0FkLGFBQUFBLENBQUFrQixPQUFBbEIsQ0FBQXRQLE1BQUFBLENBQUErUCxnQkFBQS9QLENBQUFxRCxJQUFBaU0sRUFBQTtBQUNBTyxNQUFBQTtBQURBLEtBQUFQLEVBRUEvTCxJQUZBK0wsQ0FFQSxZQUFBO0FBQ0F0UCxNQUFBQSxNQUFBQSxDQUFBK1AsZ0JBQUEvUCxDQUFBMFAsS0FBQTFQLENBQUFwRCxJQUFBb0QsQ0FBQTtBQUFBcUQsUUFBQUEsSUFBQUEsRUFBQXdNO0FBQUEsT0FBQTdQLEdBQ0FBLE1BQUFBLENBQUF3USxPQUFBeFEsQ0FBQUEsTUFBQUEsQ0FBQWdRLGFBQUFoUSxFQUFBQSxNQUFBQSxDQUFBK1AsZ0JBQUEvUCxDQUFBMFAsS0FBQTFQLENBQUFBLE1BQUFBLENBQUErUCxnQkFBQS9QLENBQUEwUCxLQUFBMVAsQ0FBQXVILE1BQUF2SCxHQUFBLENBQUFBLENBQUFBLENBREFBO0FBQ0EsS0FKQXNQLENBREFjLEVBUUFwUSxNQUFBQSxDQUFBeVEsV0FBQXpRLEdBQUEsRUFSQW9RO0FBUUEsR0FoRUFwUSxFQW1FQUEsTUFBQUEsQ0FBQXVRLFVBQUF2USxHQUFBLFVBQUE2UCxJQUFBLEVBQUFBO0FBQ0E3UCxJQUFBQSxNQUFBQSxDQUFBd1EsT0FBQXhRLENBQUFBLE1BQUFBLENBQUFnUSxhQUFBaFEsRUFBQTZQLElBQUE3UCxHQUNBQSxNQUFBQSxDQUFBMFEsVUFBQTFRLENBQUFBLE1BQUFBLENBQUFpUSxlQUFBalEsRUFBQTZQLElBQUE3UCxDQURBQSxFQUVBQSxNQUFBQSxDQUFBeVEsV0FBQXpRLEdBQUEsRUFGQUE7QUFFQSxHQXRFQUEsRUF5RUFBLE1BQUFBLENBQUEyUSxZQUFBM1EsR0FBQSxVQUFBNlAsSUFBQSxFQUFBQTtBQUNBN1AsSUFBQUEsTUFBQUEsQ0FBQXdRLE9BQUF4USxDQUFBQSxNQUFBQSxDQUFBaVEsZUFBQWpRLEVBQUE2UCxJQUFBN1AsR0FDQUEsTUFBQUEsQ0FBQTBRLFVBQUExUSxDQUFBQSxNQUFBQSxDQUFBZ1EsYUFBQWhRLEVBQUE2UCxJQUFBN1AsQ0FEQUE7QUFDQTZQLEdBM0VBN1AsRUE4RUFBLE1BQUFBLENBQUF3USxPQUFBeFEsR0FBQSxVQUFBNFEsUUFBQSxFQUFBZixJQUFBLEVBQUFBO0FBQ0FlLElBQUFBLFFBQUFBLENBQUFoVSxJQUFBZ1UsQ0FBQWYsSUFBQWU7QUFBQWYsR0EvRUE3UCxFQWtGQUEsTUFBQUEsQ0FBQTBRLFVBQUExUSxHQUFBLFVBQUE0USxRQUFBLEVBQUFmLElBQUEsRUFBQUE7QUFDQWUsSUFBQUEsUUFBQUEsQ0FBQUMsTUFBQUQsQ0FBQUEsUUFBQUEsQ0FBQUUsT0FBQUYsQ0FBQWYsSUFBQWUsQ0FBQUEsRUFBQSxDQUFBQTtBQUFBLEdBbkZBNVEsRUFzRkFBLE1BQUFBLENBQUErUSxpQkFBQS9RLEdBQUEsWUFBQTtBQUNBc1AsSUFBQUEsYUFBQUEsQ0FBQTBCLGVBQUExQixDQUFBdFAsTUFBQUEsQ0FBQWdRLGFBQUFWLEdBQ0FyUCxTQUFBQSxDQUFBZ1IsSUFBQWhSLENBQUEsYUFBQUEsQ0FEQXFQO0FBQ0EsR0F4RkF0UCxFQTJGQUEsTUFBQUEsQ0FBQWtSLFlBQUFsUixHQUFBLFlBQUE7QUFDQSxRQUFBLENBQUFBLE1BQUFBLENBQUFnUSxhQUFBLEVBQUEsT0FBQSxFQUFBOztBQUVBLFNBREEsSUFBQW1CLE9BQUFBLEdBQUEsQ0FBQSxFQUNBdkwsQ0FBQUEsR0FBQTVGLE1BQUFBLENBQUFnUSxhQUFBaFEsQ0FBQXVILE1BQUF2SCxHQUFBLENBQUEsRUFBQTRGLENBQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBQSxFQUFBLEVBQ0F1TCxPQUFBQSxJQUFBdkwsQ0FBQXVMOztBQUVBLFdBQUFBLE9BQUE7QUFBQUEsR0FqR0FuUjtBQWlHQW1SLENBbkdBLENBREFoVSxDVk9BQSxFV1BBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsV0FEQUEsRUFDQSxDQUFBLFFBQUEsRUFBQSxXQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUE2QyxNQUFBLEVBQUFDLFNBQUEsRUFBQUUsT0FBQSxFQUFBQTtBQUdBLE1BQUFpUixFQUFBQSxHQUFBLElBQUFDLFVBQUFBLENBQUF0TixJQUFBc04sQ0FBQUMsTUFBQSxDQUFBeE4sUUFBQUEsQ0FBQUMsSUFBQUQsRUFBQSxDQUFBOztBQU9BLFdBQUF5TixPQUFBLEdBQUFBO0FBQ0FILElBQUFBLEVBQUFBLENBQUFsRCxLQUFBa0QsQ0FBQSw0QkFBQUEsRUFBQTtBQUVBSSxNQUFBQSxTQUFBQSxFQUFBO0FBQ0FDLFFBQUFBLGFBQUFBLEVBQUEsVUFBQWhSLFdBQUEsRUFBQWlSLFVBQUEsRUFBQUMsV0FBQSxFQUFBQTtBQXdCQSxpQkF0QkE3TixRQUFBQSxDQUFBQyxJQUFBRCxHQUFBckQsV0FBQXFELENBQUE4TixVQUFBOU4sQ0FBQThOLENBQUEsQ0FBQTlOLEVBQUFQLElBQUFPLENBQUEsVUFBQStOLE9BQUEsRUFBQUE7QUFDQTFSLFlBQUFBLE9BQUFBLENBQUEyUixZQUFBM1IsQ0FBQTtBQUNBNFIsY0FBQUEsV0FBQUEsRUFBQXRSLFdBQUFBLENBQUFzUixXQURBO0FBRUF4RixjQUFBQSxLQUFBQSxFQUFBOUwsV0FBQUEsQ0FBQThMLEtBRkE7QUFHQXlGLGNBQUFBLFFBQUFBLEVBQUF2UixXQUFBQSxDQUFBdVIsUUFIQTtBQUlBQyxjQUFBQSxhQUFBQSxFQUFBeFIsV0FBQUEsQ0FBQXdSLGFBSkE7QUFLQUosY0FBQUE7QUFMQSxhQUFBMVIsRUFPQW9ELElBUEFwRCxDQU9BLFVBQUFxRCxRQUFBLEVBQUFBO0FBQ0F4RCxjQUFBQSxNQUFBQSxDQUFBa1MsS0FBQWxTLENBQUEsT0FBQUEsRUFBQXdELFFBQUFBLENBQUFoRSxJQUFBUSxHQUNBVSxDQUFBQSxDQUFBLGNBQUFBLENBQUFBLENBQUF5UixLQUFBelIsQ0FBQSxNQUFBQSxDQURBVjtBQUNBLGFBVEFHLEVBV0EsWUFBQTtBQUNBSCxjQUFBQSxNQUFBQSxDQUFBa1MsS0FBQWxTLENBQUEsT0FBQUEsRUFBQTtBQUNBME0sZ0JBQUFBLE9BQUFBLEVBQUEsY0FEQTtBQUVBMEYsZ0JBQUFBLElBQUFBLEVBQUE7QUFGQSxlQUFBcFM7QUFFQSxhQWRBRztBQWNBLFdBZkEyRCxFQW1CQUksS0FuQkFKLENBbUJBLFVBQUFLLEtBQUEsRUFBQUEsQ0FBQUEsQ0FuQkFMLEdBbUJBSyxDQUdBLENBQUE7QUFBQSxTQXpCQTtBQThCQWtPLFFBQUFBLGFBQUFBLEVBQUEsVUFBQWxPLEtBQUEsRUFBQUE7QUFHQSxjQUFBLGlEQUFBQSxLQUFBQSxDQUFBK0ksSUFBQSxFQUNBLE9BQUFvRixPQUFBQSxDQUFBQyxPQUFBRCxFQUFBO0FBR0EsY0FBQUUsSUFBQUEsR0FBQXJPLEtBQUFBLENBQUF1TixVQUFBO0FBS0EsaUJBQUE1TixRQUFBQSxDQUFBQyxJQUFBRCxHQUFBMk8sb0JBQUEzTyxDQUFBME8sSUFBQTFPLENBQUE7QUFBQTBPLFNBMUNBO0FBNENBRSxRQUFBQSxPQUFBQSxFQUFBLFlBQUE7QUFHQTFQLFVBQUFBLFFBQUFBLENBQUFDLGNBQUFELENBQUEsUUFBQUEsRUFBQTJQLEtBQUEzUCxDQUFBNFAsT0FBQTVQLEdBQUEsTUFBQUE7QUFBQTtBQS9DQSxPQUZBO0FBb0RBNlAsTUFBQUEsZ0JBQUFBLEVBQUEsT0FwREE7QUFxREFDLE1BQUFBLGFBQUFBLEVBQUEsQ0FFQWhQLFFBQUFBLENBQUFDLElBQUFELENBQUFpUCxrQkFBQWpQLENBQUFrUCxXQUZBLEVBR0FsUCxRQUFBQSxDQUFBQyxJQUFBRCxDQUFBbVAsb0JBQUFuUCxDQUFBa1AsV0FIQSxDQXJEQTtBQTREQUUsTUFBQUEsVUFBQUEsRUFBQTtBQTVEQSxLQUFBOUI7QUFOQXBSOztBQUFBQSxFQUFBQSxNQUFBQSxDQUFBeUQsR0FBQXpELENBQUEsUUFBQUEsRUFBQSxVQUFBbVQsS0FBQSxFQUFBQTtBQUNBL0IsSUFBQUEsRUFBQUEsQ0FBQWdDLEtBQUFoQyxJQUNBRyxPQUFBQSxFQURBSDtBQUNBRyxHQUZBdlIsR0F1RUF1UixPQUFBQSxFQXZFQXZSO0FBdUVBdVIsQ0E1RUEsQ0FEQXBVLENYT0FBLEVZUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxXQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQTZDLE1BQUEsRUFBQXFULE9BQUEsRUFBQUMsUUFBQSxFQUFBQTtBQUVBdFQsRUFBQUEsTUFBQUEsQ0FBQXVULE9BQUF2VCxHQUFBLFlBQUE7QUFDQUEsSUFBQUEsTUFBQUEsQ0FBQXdULFFBQUF4VCxJQUNBc1QsUUFBQUEsQ0FBQUcsTUFBQUgsQ0FBQTtBQUNBSSxNQUFBQSxJQUFBQSxFQUFBMVQsTUFBQUEsQ0FBQXdUO0FBREEsS0FBQUYsRUFFQS9QLElBRkErUCxDQUVBLFVBQUFLLElBQUEsRUFBQUE7QUFDQTNULE1BQUFBLE1BQUFBLENBQUF3VCxRQUFBeFQsR0FBQSxJQUFBQTtBQUFBLEtBSEFzVCxDQURBdFQ7QUFJQSxHQUxBQSxFQVVBc1QsUUFBQUEsQ0FBQU0sS0FBQU4sR0FDQS9QLElBREErUCxDQUNBLFVBQUE5UCxRQUFBLEVBQUFBO0FBQ0F4RCxJQUFBQSxNQUFBQSxDQUFBNlQsS0FBQTdULEdBQUF3RCxRQUFBQSxDQUFBaEUsSUFBQVE7QUFBQVIsR0FGQThULENBVkF0VCxFQWVBQSxNQUFBQSxDQUFBeUQsR0FBQXpELENBQUEsYUFBQUEsRUFBQSxVQUFBMEQsQ0FBQSxFQUFBaVEsSUFBQSxFQUFBQTtBQUNBM1QsSUFBQUEsTUFBQUEsQ0FBQWtILE1BQUFsSCxDQUFBLFlBQUE7QUFDQXNULE1BQUFBLFFBQUFBLENBQUFRLE9BQUFSLENBQUFLLElBQUFMLEVBQ0EvUCxJQURBK1AsQ0FDQSxVQUFBOVAsUUFBQSxFQUFBQTtBQUNBeEQsUUFBQUEsTUFBQUEsQ0FBQTZULEtBQUE3VCxDQUFBK1QsT0FBQS9ULENBQUF3RCxRQUFBQSxDQUFBaEUsSUFBQVE7QUFBQVIsT0FGQThUO0FBRUE5VCxLQUhBUTtBQUdBUixHQUpBUSxDQWZBQTtBQW1CQVIsQ0FyQkEsQ0FEQXJDLENaT0FBLEVhUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxnQkFEQUEsRUFDQSxDQUFBLFFBQUEsRUFBQSxXQUFBLEVBQUEsZUFBQSxFQUFBLFVBQUE2QyxNQUFBLEVBQUFDLFNBQUEsRUFBQXFQLGFBQUEsRUFBQUE7QUFFQXRQLEVBQUFBLE1BQUFBLENBQUFnVSxZQUFBaFUsR0FBQXNQLGFBQUFBLENBQUEyRSxlQUFBM0UsRUFBQXRQLEVBRUFBLE1BQUFBLENBQUFnVSxZQUFBaFUsSUFHQUEsTUFBQUEsQ0FBQWtVLGdCQUFBbFUsR0FBQSxDQUFBQSxFQUNBQSxNQUFBQSxDQUFBbVUsZUFBQW5VLEdBQUEsQ0FEQUEsRUFFQUEsTUFBQUEsQ0FBQW9VLElBQUFwVSxHQUFBb1UsQ0FBQSxDQUxBcFUsSUFDQUMsU0FBQUEsQ0FBQWdSLElBQUFoUixDQUFBLFFBQUFBLENBSEFELEVBVUFBLE1BQUFBLENBQUFxVSxVQUFBclUsR0FBQSxVQUFBc1UsTUFBQSxFQUFBQTtBQUNBLFNBQUEsSUFBQTFPLENBQUEsSUFBQTVGLE1BQUFBLENBQUFnVSxZQUFBLEVBQ0FoVSxNQUFBQSxDQUFBZ1UsWUFBQWhVLENBQUE0RixDQUFBNUYsRUFBQXdILEVBQUF4SCxLQUFBQSxNQUFBQSxDQUFBa1UsZ0JBQUFsVSxLQUNBQSxNQUFBQSxDQUFBZ1UsWUFBQWhVLENBQUE0RixDQUFBNUYsRUFBQXNVLE1BQUF0VSxHQUFBLE1BQUFzVSxNQUFBLEdBQUF0VSxNQUFBQSxDQUFBZ1UsWUFBQWhVLENBQUE0RixDQUFBNUYsRUFBQXVVLFdBQUEsR0FBQXZVLE1BQUFBLENBQUFnVSxZQUFBaFUsQ0FBQTRGLENBQUE1RixFQUFBd1UsWUFEQXhVOztBQUlBQSxJQUFBQSxNQUFBQSxDQUFBa1UsZ0JBQUFsVSxLQUFBQSxNQUFBQSxDQUFBbVUsZUFBQW5VLEtBQ0FBLE1BQUFBLENBQUFtVSxlQUFBblUsR0FBQUEsTUFBQUEsQ0FBQW1VLGVBQUFuVSxLQUFBQSxNQUFBQSxDQUFBZ1UsWUFBQWhVLENBQUF1SCxNQUFBdkgsR0FBQSxDQUFBQSxHQUFBQSxNQUFBQSxDQUFBbVUsZUFBQW5VLEdBQUEsQ0FEQUEsR0FHQUEsTUFBQUEsQ0FBQWtVLGdCQUFBbFUsR0FBQUEsTUFBQUEsQ0FBQW1VLGVBSEFuVTtBQUlBLFFBQUFvUSxLQUFBQSxHQUFBQSxDQUFBLENBQUE7O0FBQ0EsU0FBQXhLLENBQUEsSUFBQTVGLE1BQUFBLENBQUFnVSxZQUFBLEVBQ0EsSUFBQSxPQUFBaFUsTUFBQUEsQ0FBQWdVLFlBQUFoVSxDQUFBNEYsQ0FBQTVGLEVBQUFzVSxNQUFBLEVBQUE7QUFDQWxFLE1BQUFBLEtBQUFBLEdBQUFBLENBQUEsQ0FBQUE7QUFDQTtBQUdBQTs7QUFBQUEsSUFBQUEsS0FBQUEsS0FDQTFQLENBQUFBLENBQUEsb0JBQUFBLENBQUFBLENBQUFjLElBQUFkLENBQUEsR0FBQUEsR0FDQVYsTUFBQUEsQ0FBQW9VLElBQUFwVSxHQUFBb1UsQ0FBQSxDQUZBaEUsQ0FBQUE7QUFFQSxHQTdCQXBRLEVBaUNBQSxNQUFBQSxDQUFBeVUsY0FBQXpVLEdBQUEsVUFBQXNVLE1BQUEsRUFBQUE7QUFDQSxRQUFBLENBQUF0VSxNQUFBQSxDQUFBZ1UsWUFBQSxFQUNBLE9BQUEsRUFBQTs7QUFFQSxTQUFBLElBQUFwTyxDQUFBQSxHQUFBLENBQUEsRUFBQUEsQ0FBQUEsR0FBQTVGLE1BQUFBLENBQUFnVSxZQUFBaFUsQ0FBQXVILE1BQUEsRUFBQTNCLENBQUFBLEVBQUEsRUFDQSxJQUFBNUYsTUFBQUEsQ0FBQWdVLFlBQUFoVSxDQUFBNEYsQ0FBQTVGLEVBQUF3SCxFQUFBeEgsS0FBQUEsTUFBQUEsQ0FBQWtVLGdCQUFBLEVBQ0EsT0FBQSxNQUFBSSxNQUFBLEdBQUF0VSxNQUFBQSxDQUFBZ1UsWUFBQWhVLENBQUE0RixDQUFBNUYsRUFBQXVVLFdBQUEsR0FBQXZVLE1BQUFBLENBQUFnVSxZQUFBaFUsQ0FBQTRGLENBQUE1RixFQUFBd1UsWUFBQTtBQUFBQSxHQXZDQXhVLEVBNENBQSxNQUFBQSxDQUFBMFUsY0FBQTFVLEdBQUEsVUFBQTJVLFFBQUEsRUFBQUE7QUFDQTNVLElBQUFBLE1BQUFBLENBQUFrVSxnQkFBQWxVLEdBQUEyVSxRQUFBM1U7QUFBQTJVLEdBN0NBM1UsRUFnREFBLE1BQUFBLENBQUE0VSx1QkFBQTVVLEdBQUEsWUFBQTtBQUNBLFdBQUFBLE1BQUFBLENBQUFnVSxZQUFBaFUsR0FHQUEsTUFBQUEsQ0FBQWdVLFlBQUFoVSxDQUNBbkQsSUFEQW1ELENBQ0EsVUFBQWxELENBQUEsRUFBQUMsQ0FBQSxFQUFBQTtBQUFBLGFBQUFELENBQUFBLENBQUEwSyxFQUFBMUssR0FBQUMsQ0FBQUEsQ0FBQXlLLEVBQUE7QUFBQUEsS0FEQXhILEVBRUE0QixNQUZBNUIsQ0FFQSxVQUFBMlUsUUFBQSxFQUFBQTtBQUFBLGFBQUEsT0FBQUEsUUFBQUEsQ0FBQUwsTUFBQSxJQUFBSyxRQUFBQSxDQUFBbk4sRUFBQW1OLEtBQUEzVSxNQUFBQSxDQUFBbVUsZUFBQTtBQUFBQSxLQUZBblUsQ0FIQUEsR0FDQSxFQURBO0FBQ0EsR0FsREFBLEVBeURBQSxNQUFBQSxDQUFBNlUsY0FBQTdVLEdBQUEsWUFBQTtBQUNBLFFBQUEsQ0FBQUEsTUFBQUEsQ0FBQWdVLFlBQUEsRUFDQSxPQUFBLEVBQUE7QUFFQSxRQUFBYyxXQUFBQSxHQUFBLENBQUE7O0FBQ0EsU0FBQSxJQUFBbFAsQ0FBQSxJQUFBNUYsTUFBQUEsQ0FBQWdVLFlBQUEsRUFDQSxPQUFBaFUsTUFBQUEsQ0FBQWdVLFlBQUFoVSxDQUFBNEYsQ0FBQTVGLEVBQUFzVSxNQUFBLElBQ0FRLFdBQUFBLEVBREE7O0FBSUEsV0FBQUEsV0FBQTtBQUFBQSxHQW5FQTlVLEVBc0VBQSxNQUFBQSxDQUFBK1UsY0FBQS9VLEdBQUEsVUFBQXNVLE1BQUEsRUFBQUE7QUFDQSxRQUFBLENBQUF0VSxNQUFBQSxDQUFBZ1UsWUFBQSxFQUNBLE9BQUEsRUFBQTs7QUFFQSxTQUFBLElBQUFwTyxDQUFBLElBQUE1RixNQUFBQSxDQUFBZ1UsWUFBQSxFQUNBLElBQUFoVSxNQUFBQSxDQUFBZ1UsWUFBQWhVLENBQUE0RixDQUFBNUYsRUFBQXdILEVBQUF4SCxLQUFBQSxNQUFBQSxDQUFBa1UsZ0JBQUEsRUFDQSxPQUFBLE9BQUFsVSxNQUFBQSxDQUFBZ1UsWUFBQWhVLENBQUE0RixDQUFBNUYsRUFBQXNVLE1BQUEsR0FDQSxhQURBLEdBR0EsTUFBQUEsTUFBQSxHQUNBdFUsTUFBQUEsQ0FBQWdVLFlBQUFoVSxDQUFBNEYsQ0FBQTVGLEVBQUF1VSxXQUFBdlUsS0FBQUEsTUFBQUEsQ0FBQWdVLFlBQUFoVSxDQUFBNEYsQ0FBQTVGLEVBQUFzVSxNQUFBdFUsR0FBQSxhQUFBQSxHQUFBLFlBREEsR0FHQUEsTUFBQUEsQ0FBQWdVLFlBQUFoVSxDQUFBNEYsQ0FBQTVGLEVBQUF3VSxZQUFBeFUsS0FBQUEsTUFBQUEsQ0FBQWdVLFlBQUFoVSxDQUFBNEYsQ0FBQTVGLEVBQUFzVSxNQUFBdFUsR0FBQSxhQUFBQSxHQUFBLFlBTkE7QUFNQSxHQWxGQUEsRUF3RkFBLE1BQUFBLENBQUFnVixXQUFBaFYsR0FBQSxZQUFBO0FBQ0FVLElBQUFBLENBQUFBLENBQUEsb0JBQUFBLENBQUFBLENBQUFhLElBQUFiLENBQUEsR0FBQUEsR0FDQUEsQ0FBQUEsQ0FBQSxnQkFBQUEsQ0FBQUEsQ0FBQWMsSUFBQWQsRUFEQUE7QUFDQWMsR0ExRkF4QixFQTZGQUEsTUFBQUEsQ0FBQWlWLFVBQUFqVixHQUFBLFVBQUFtVCxLQUFBLEVBQUFBO0FBQ0FuVCxJQUFBQSxNQUFBQSxDQUFBa1YsS0FBQWxWLElBR0FsQixPQUFBQSxDQUFBQyxHQUFBRCxDQUFBa0IsTUFBQUEsQ0FBQWtWLEtBQUFsVixDQUFBbVYsa0JBQUFuVixDQUFBbVQsS0FBQW5ULENBQUFsQixDQUhBa0I7QUFHQW1ULEdBakdBblQsRUFxR0FBLE1BQUFBLENBQUFvVixXQUFBcFYsR0FBQSxZQUFBO0FBa0NBLFNBQUEsSUFBQTRGLENBQUEsSUFoQ0E1RixNQUFBQSxDQUFBUixJQUFBUSxHQUFBLEVBQUFBLEVBQ0FBLE1BQUFBLENBQUFvTSxPQUFBcE0sR0FBQTtBQUVBcVYsTUFBQUEsVUFBQUEsRUFBQUEsQ0FBQSxDQUZBO0FBS0FDLE1BQUFBLGlCQUFBQSxFQUFBQSxDQUFBLENBTEE7QUFRQUMsTUFBQUEsa0JBQUFBLEVBQUEsTUFSQTtBQVdBQyxNQUFBQSxrQkFBQUEsRUFBQSxDQVhBO0FBY0FDLE1BQUFBLHFCQUFBQSxFQUFBLENBZEE7QUFpQkFDLE1BQUFBLGNBQUFBLEVBQUEsR0FqQkE7QUFvQkFDLE1BQUFBLGVBQUFBLEVBQUEsZUFwQkE7QUF1QkFDLE1BQUFBLGFBQUFBLEVBQUFBLENBQUEsQ0F2QkE7QUEwQkFDLE1BQUFBLFlBQUFBLEVBQUFBLENBQUEsQ0ExQkE7QUE2QkFDLE1BQUFBLGNBQUFBLEVBQUE7QUE3QkEsS0FEQTlWLEVBZ0NBc1AsYUFBQUEsQ0FBQXlHLE9BQUEsRUFFQSxLQUFBLElBQUFwRyxDQUFBLElBREFMLGFBQUFBLENBQUF5RyxPQUFBekcsQ0FBQTFKLENBQUEwSixFQUFBMEcsS0FBQTFHLEdBQUEsQ0FBQUEsRUFDQXRQLE1BQUFBLENBQUFnVSxZQUFBLEVBQ0ExRSxhQUFBQSxDQUFBeUcsT0FBQXpHLENBQUExSixDQUFBMEosRUFBQWpNLElBQUFpTSxLQUFBdFAsTUFBQUEsQ0FBQWdVLFlBQUFoVSxDQUFBMlAsQ0FBQTNQLEVBQUFzVSxNQUFBaEYsSUFDQUEsYUFBQUEsQ0FBQXlHLE9BQUF6RyxDQUFBMUosQ0FBQTBKLEVBQUEwRyxLQUFBMUcsRUFEQUE7O0FBTUEsU0FBQTFKLENBQUEsSUFEQTBKLGFBQUFBLENBQUF5RyxPQUFBekcsQ0FBQXpTLElBQUF5UyxDQUFBLFVBQUF4UyxDQUFBLEVBQUFDLENBQUEsRUFBQUE7QUFBQSxhQUFBRCxDQUFBQSxDQUFBa1osS0FBQWxaLEdBQUFDLENBQUFBLENBQUFpWixLQUFBO0FBQUFBLEtBQUExRyxHQUNBQSxhQUFBQSxDQUFBeUcsT0FBQSxFQUNBL1YsTUFBQUEsQ0FBQVIsSUFBQVEsQ0FBQXBELElBQUFvRCxDQUFBO0FBQ0F5TixNQUFBQSxLQUFBQSxFQUFBNkIsYUFBQUEsQ0FBQXlHLE9BQUF6RyxDQUFBMUosQ0FBQTBKLEVBQUEwRyxLQURBO0FBRUFDLE1BQUFBLEtBQUFBLEVBQUEzRyxhQUFBQSxDQUFBeUcsT0FBQXpHLENBQUExSixDQUFBMEosRUFBQWpNO0FBRkEsS0FBQXJEOztBQUtBVSxJQUFBQSxDQUFBQSxDQUFBLG1CQUFBQSxDQUFBQSxDQUFBYyxJQUFBZCxJQUNBQSxDQUFBQSxDQUFBLG9CQUFBQSxDQUFBQSxDQUFBYyxJQUFBZCxFQURBQSxFQUVBQSxDQUFBQSxDQUFBLGtCQUFBQSxDQUFBQSxDQUFBYSxJQUFBYixDQUFBLEdBQUFBLENBRkFBO0FBRUEsR0F4SkFWO0FBd0pBLENBMUpBLENBREE3QyxDYk9BQSxFY1BBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsYUFEQUEsRUFDQSxDQUFBLFFBQUEsRUFBQSxXQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUE2QyxNQUFBLEVBQUFDLFNBQUEsRUFBQUUsT0FBQSxFQUFBQTtBQUVBSCxFQUFBQSxNQUFBQSxDQUFBUyxXQUFBVCxJQUdBVSxDQUFBQSxDQUFBLGdCQUFBQSxDQUFBQSxDQUFBd1YsTUFBQXhWLENBQUE7QUFBQWtDLElBQUFBLElBQUFBLEVBQUE1QyxNQUFBQSxDQUFBUyxXQUFBVCxDQUFBbVcsTUFBQW5XLENBQUFvVyxHQUFBcFcsR0FBQSxHQUFBQSxHQUFBVSxDQUFBQSxDQUFBLE1BQUFBLENBQUFBLENBQUFpSCxLQUFBakgsRUFBQVYsR0FBQVUsQ0FBQUEsQ0FBQSxNQUFBQSxDQUFBQSxDQUFBd1YsTUFBQXhWLEdBQUFrQztBQUFBLEdBQUFsQyxHQUNBQSxDQUFBQSxDQUFBLHFCQUFBQSxDQUFBQSxDQUFBd1YsTUFBQXhWLENBQUE7QUFBQWtDLElBQUFBLElBQUFBLEVBQUE1QyxNQUFBQSxDQUFBUyxXQUFBVCxDQUFBbVcsTUFBQW5XLENBQUFxVyxRQUFBclcsR0FBQSxHQUFBQSxHQUFBVSxDQUFBQSxDQUFBLFdBQUFBLENBQUFBLENBQUFpSCxLQUFBakgsRUFBQVYsR0FBQVUsQ0FBQUEsQ0FBQSxXQUFBQSxDQUFBQSxDQUFBd1YsTUFBQXhWLEdBQUFrQztBQUFBLEdBQUFsQyxDQUpBVixJQUNBQyxTQUFBQSxDQUFBZ1IsSUFBQWhSLENBQUEsR0FBQUEsQ0FEQUQsRUFPQUEsTUFBQUEsQ0FBQXNXLEtBQUF0VyxHQUFBLENBQ0EsTUFEQSxFQUVBLFVBRkEsRUFHQSxVQUhBLEVBSUEsWUFKQSxFQUtBLFFBTEEsQ0FQQUEsRUFjQUEsTUFBQUEsQ0FBQXVXLFVBQUF2VyxHQUFBLENBQ0EsS0FEQSxFQUVBLFVBRkEsRUFHQSxXQUhBLEVBSUEsU0FKQSxFQUtBLFlBTEEsRUFNQSxhQU5BLEVBT0EsYUFQQSxFQVFBLE9BUkEsRUFTQSxPQVRBLENBZEFBLEVBMEJBQSxNQUFBQSxDQUFBd1csV0FBQXhXLEdBQUE7QUFDQXlXLElBQUFBLE9BQUFBLEVBQUEsSUFBQXpWLElBQUEsRUFEQTtBQUVBMFYsSUFBQUEsT0FBQUEsRUFBQSxJQUFBMVYsSUFBQSxDQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxDQUZBO0FBR0EyVixJQUFBQSxRQUFBQSxFQUFBLElBQUEzVixJQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLENBSEE7QUFJQTRWLElBQUFBLGNBQUFBLEVBQUE7QUFKQSxHQTFCQTVXLEVBaUNBQSxNQUFBQSxDQUFBbVcsTUFBQW5XLEdBQUEsVUFBQXlHLEtBQUEsRUFBQW9RLFVBQUEsRUFBQUE7QUFDQSxXQUFBcFEsS0FBQUEsQ0FBQXJGLElBQUFBLENBQUFxRyxLQUFBckcsQ0FBQXlWLFVBQUFBLEdBQUEsR0FBQUEsSUFBQXBRLEtBQUFBLENBQUFjLE1BQUFkLEdBQUEsQ0FBQW9RLENBQUF6VixDQUFBcUYsQ0FBQTtBQUFBLEdBbENBekcsRUFxQ0FBLE1BQUFBLENBQUE4VyxXQUFBOVcsR0FBQSxZQUFBLENBQUEsQ0FyQ0FBLEVBd0NBQSxNQUFBQSxDQUFBK1csVUFBQS9XLEdBQUEsVUFBQW1ULEtBQUEsRUFBQS9CLEVBQUEsRUFBQWdCLElBQUEsRUFBQUE7QUFDQXBTLElBQUFBLE1BQUFBLENBQUFTLFdBQUFULENBQUFtVyxNQUFBblcsQ0FBQW9TLElBQUFwUyxJQUFBb0IsSUFBQUEsQ0FBQXFHLEtBQUFyRyxDQUFBcUcsQ0FBQS9HLENBQUFBLENBQUEsTUFBQTBSLElBQUEsR0FBQSxZQUFBMVIsQ0FBQUEsQ0FBQXdWLE1BQUF4VixHQUFBa0MsSUFBQWxDLEdBQUFBLENBQUFBLENBQUEsTUFBQTBSLElBQUExUixDQUFBQSxDQUFBd1YsTUFBQXhWLEdBQUFrQyxJQUFBNkUsS0FBQS9HLENBQUFBLENBQUEsTUFBQTBSLElBQUExUixDQUFBQSxDQUFBaUgsS0FBQWpILEtBQUFBLENBQUFBLENBQUEsTUFBQTBSLElBQUEsR0FBQSxZQUFBMVIsQ0FBQUEsQ0FBQWlILEtBQUFqSCxFQUFBK0csSUFBQSxHQUFBckcsQ0FBQXBCLEVBQ0FBLE1BQUFBLENBQUFrSCxNQUFBbEgsRUFEQUE7QUFDQWtILEdBMUNBbEgsRUE0Q0FBLE1BQUFBLENBQUFnWCxVQUFBaFgsR0FBQSxZQUFBLENBQUEsQ0E1Q0FBLEVBZ0RBQSxNQUFBQSxDQUFBaVgsY0FBQWpYLEdBQUFpWCxDQUFBLENBaERBalgsRUFpREFBLE1BQUFBLENBQUFrWCxjQUFBbFgsR0FBQWtYLENBQUEsQ0FqREFsWCxFQW1EQUEsTUFBQUEsQ0FBQW1YLGNBQUFuWCxHQUFBLFlBQUE7QUFDQUEsSUFBQUEsTUFBQUEsQ0FBQWlYLGNBQUFqWCxHQUFBaVgsQ0FBQWpYLE1BQUFBLENBQUFpWCxjQUFBalgsRUFDQUEsTUFBQUEsQ0FBQW9YLFdBQUFwWCxHQUFBQSxNQUFBQSxDQUFBUyxXQUFBVCxDQUFBcVgsUUFEQXJYO0FBQ0FxWCxHQXJEQXJYLEVBd0RBQSxNQUFBQSxDQUFBc1gsY0FBQXRYLEdBQUEsWUFBQTtBQUNBQSxJQUFBQSxNQUFBQSxDQUFBdVgsV0FBQXZYLEdBQUEsSUFBQUEsRUFDQUEsTUFBQUEsQ0FBQXdYLGVBQUF4WCxHQUFBLElBREFBLEVBRUFBLE1BQUFBLENBQUFrWCxjQUFBbFgsR0FBQWtYLENBQUFsWCxNQUFBQSxDQUFBa1gsY0FGQWxYO0FBRUFrWCxHQTNEQWxYLEVBOERBQSxNQUFBQSxDQUFBeVgsYUFBQXpYLEdBQUEsVUFBQTBYLFFBQUEsRUFBQUE7QUFDQSxRQUFBQSxRQUFBLEVBQUE7QUFDQSxVQUFBclgsSUFBQUEsR0FBQUwsTUFBQUEsQ0FBQVMsV0FBQVQsQ0FBQVEsR0FBQTtBQUNBTCxNQUFBQSxPQUFBQSxDQUFBc1gsYUFBQXRYLENBQUFFLElBQUFGLEVBQUF1WCxRQUFBdlgsRUFDQW9ELElBREFwRCxDQUNBLFVBQUFxRCxRQUFBLEVBQUFBO0FBQ0F4RCxRQUFBQSxNQUFBQSxDQUFBc1gsY0FBQXRYO0FBQUFzWCxPQUZBblgsRUFHQSxZQUFBO0FBQ0EsWUFBQXdYLFVBQUFBLEdBQUFqWCxDQUFBQSxDQUFBLFdBQUFBLENBQUFBLENBQUF3QyxHQUFBeEMsQ0FBQSxpQkFBQUEsQ0FBQTtBQUNBQSxRQUFBQSxDQUFBQSxDQUFBLFdBQUFBLENBQUFBLENBQUFrWCxPQUFBbFgsQ0FBQTtBQUFBbVgsVUFBQUEsZUFBQUEsRUFBQTtBQUFBLFNBQUFuWCxFQUFBLEdBQUFBLEVBQUFrWCxPQUFBbFgsQ0FBQTtBQUFBbVgsVUFBQUEsZUFBQUEsRUFBQUY7QUFBQSxTQUFBalgsRUFBQSxHQUFBQTtBQUFBLE9BTEFQO0FBS0E7QUFBQSxHQXRFQUgsRUEyRUFBLE1BQUFBLENBQUE4WCxjQUFBOVgsR0FBQSxVQUFBK1gsV0FBQSxFQUFBUixXQUFBLEVBQUFDLGVBQUEsRUFBQUE7QUFDQSxRQUFBRCxXQUFBLEVBQ0EsSUFBQUEsV0FBQUEsSUFBQUMsZUFBQSxFQUFBO0FBQ0EsVUFBQW5YLElBQUFBLEdBQUFMLE1BQUFBLENBQUFTLFdBQUFULENBQUFRLEdBQUE7QUFDQUwsTUFBQUEsT0FBQUEsQ0FBQTJYLGNBQUEzWCxDQUFBRSxJQUFBRixFQUFBNFgsV0FBQTVYLEVBQUFvWCxXQUFBcFgsRUFDQW9ELElBREFwRCxDQUNBLFVBQUFxRCxRQUFBLEVBQUFBO0FBQ0F4RCxRQUFBQSxNQUFBQSxDQUFBa1MsS0FBQWxTLENBQUEsT0FBQUEsRUFBQTtBQUNBME0sVUFBQUEsT0FBQUEsRUFBQSxrQkFEQTtBQUVBMEYsVUFBQUEsSUFBQUEsRUFBQTtBQUZBLFNBQUFwUyxHQUlBQSxNQUFBQSxDQUFBK1gsV0FBQS9YLEdBQUEsSUFKQUEsRUFLQUEsTUFBQUEsQ0FBQXNYLGNBQUF0WCxFQUxBQTtBQUtBc1gsT0FQQW5YLEVBUUEsWUFBQTtBQUNBSCxRQUFBQSxNQUFBQSxDQUFBa1MsS0FBQWxTLENBQUEsT0FBQUEsRUFBQTtBQUNBME0sVUFBQUEsT0FBQUEsRUFBQSx3QkFEQTtBQUVBMEYsVUFBQUEsSUFBQUEsRUFBQTtBQUZBLFNBQUFwUztBQUVBLE9BWEFHO0FBV0EsS0FiQSxNQWdCQTtBQUNBLFVBQUF3WCxVQUFBQSxHQUFBalgsQ0FBQUEsQ0FBQSxXQUFBQSxDQUFBQSxDQUFBd0MsR0FBQXhDLENBQUEsaUJBQUFBLENBQUE7QUFDQUEsTUFBQUEsQ0FBQUEsQ0FBQSxXQUFBQSxDQUFBQSxDQUFBa1gsT0FBQWxYLENBQUE7QUFBQW1YLFFBQUFBLGVBQUFBLEVBQUE7QUFBQSxPQUFBblgsRUFBQSxHQUFBQSxFQUFBa1gsT0FBQWxYLENBQUE7QUFBQW1YLFFBQUFBLGVBQUFBLEVBQUFGO0FBQUEsT0FBQWpYLEVBQUEsR0FBQUE7QUFBQTtBQUFBLEdBL0ZBVixFQW9HQUEsTUFBQUEsQ0FBQWdZLGNBQUFoWSxHQUFBLFVBQUFxWCxRQUFBLEVBQUFBO0FBQ0FyWCxJQUFBQSxNQUFBQSxDQUFBa1MsS0FBQWxTLENBQUEsU0FBQUEsR0FDQUcsT0FBQUEsQ0FBQTZYLGNBQUE3WCxDQUFBSCxNQUFBQSxDQUFBUyxXQUFBVCxDQUFBUSxHQUFBTCxFQUFBa1gsUUFBQWxYLEVBQ0FvRCxJQURBcEQsQ0FDQSxVQUFBcUQsUUFBQSxFQUFBQTtBQUNBeEQsTUFBQUEsTUFBQUEsQ0FBQWtTLEtBQUFsUyxDQUFBLFFBQUFBLEVBQUF3RCxRQUFBQSxDQUFBaEUsSUFBQVE7QUFBQVIsS0FGQVcsRUFHQSxVQUFBcUQsUUFBQSxFQUFBQTtBQUNBeEQsTUFBQUEsTUFBQUEsQ0FBQWtTLEtBQUFsUyxDQUFBLE9BQUFBLEVBQUE7QUFDQTBNLFFBQUFBLE9BQUFBLEVBQUEySyxRQUFBQSxHQUFBLGlCQURBO0FBRUFqRixRQUFBQSxJQUFBQSxFQUFBO0FBRkEsT0FBQXBTO0FBRUEsS0FOQUcsQ0FEQUg7QUFPQSxHQTVHQUEsRUFpSEFBLE1BQUFBLENBQUFpWSxVQUFBalksR0FBQSxZQUFBO0FBQ0FBLElBQUFBLE1BQUFBLENBQUFTLFdBQUFULEtBQ0FBLE1BQUFBLENBQUFrUyxLQUFBbFMsQ0FBQSxTQUFBQSxHQUNBRyxPQUFBQSxDQUFBOFgsVUFBQTlYLENBQUFILE1BQUFBLENBQUFTLFdBQUFOLEVBQ0FvRCxJQURBcEQsQ0FDQSxVQUFBcUQsUUFBQSxFQUFBQTtBQUNBeEQsTUFBQUEsTUFBQUEsQ0FBQWtTLEtBQUFsUyxDQUFBLFFBQUFBLEVBQUF3RCxRQUFBQSxDQUFBaEUsSUFBQVE7QUFBQVIsS0FGQVcsQ0FGQUg7QUFJQVIsR0F0SEFRLEVBNEhBQSxNQUFBQSxDQUFBa1ksTUFBQWxZLENBQUEsMEJBQUFBLEVBQUEsVUFBQXVILE1BQUEsRUFBQUE7QUFDQXZILElBQUFBLE1BQUFBLENBQUFpWSxVQUFBalk7QUFBQWlZLEdBREFqWSxDQTVIQUEsRUFnSUFBLE1BQUFBLENBQUFtWSxhQUFBblksR0FBQSxVQUFBb1ksTUFBQSxFQUFBQTtBQTRQQSxXQTNQQSxDQUNBO0FBQUEvVSxNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBQyxNQUFBQSxNQUFBQSxFQUFBO0FBQUEsS0FEQSxFQUVBO0FBQUFqVixNQUFBQSxJQUFBQSxFQUFBLHNCQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FGQSxFQUdBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLGFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQUhBLEVBSUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEscUJBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQUpBLEVBS0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsVUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBTEEsRUFNQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FOQSxFQU9BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQVBBLEVBUUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBUkEsRUFTQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxZQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FUQSxFQVVBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFdBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQVZBLEVBV0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsZ0JBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQVhBLEVBWUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBWkEsRUFhQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxXQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FiQSxFQWNBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWRBLEVBZUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsZUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBZkEsRUFnQkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsWUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBaEJBLEVBaUJBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLHdCQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FqQkEsRUFrQkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsVUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbEJBLEVBbUJBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQW5CQSxFQW9CQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FwQkEsRUFxQkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsY0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBckJBLEVBc0JBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXRCQSxFQXVCQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F2QkEsRUF3QkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBeEJBLEVBeUJBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXpCQSxFQTBCQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxrQkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBMUJBLEVBMkJBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTNCQSxFQTRCQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E1QkEsRUE2QkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsaUNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTdCQSxFQThCQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxrQ0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBOUJBLEVBK0JBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQS9CQSxFQWdDQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FoQ0EsRUFpQ0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBakNBLEVBa0NBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLGVBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWxDQSxFQW1DQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FuQ0EsRUFvQ0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBcENBLEVBcUNBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXJDQSxFQXNDQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxRQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F0Q0EsRUF1Q0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEseUJBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXZDQSxFQXdDQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSx1Q0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBeENBLEVBeUNBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLDBCQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F6Q0EsRUEwQ0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBMUNBLEVBMkNBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLGFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTNDQSxFQTRDQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxlQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E1Q0EsRUE2Q0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsY0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBN0NBLEVBOENBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTlDQSxFQStDQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0EvQ0EsRUFnREE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBaERBLEVBaURBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWpEQSxFQWtEQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxZQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FsREEsRUFtREE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsTUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbkRBLEVBb0RBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXBEQSxFQXFEQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FyREEsRUFzREE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsa0JBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXREQSxFQXVEQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxRQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F2REEsRUF3REE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsZ0JBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXhEQSxFQXlEQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F6REEsRUEwREE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsVUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBMURBLEVBMkRBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTNEQSxFQTREQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E1REEsRUE2REE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsb0JBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTdEQSxFQThEQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E5REEsRUErREE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBL0RBLEVBZ0VBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWhFQSxFQWlFQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxPQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FqRUEsRUFrRUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsZ0JBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWxFQSxFQW1FQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FuRUEsRUFvRUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBcEVBLEVBcUVBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXJFQSxFQXNFQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F0RUEsRUF1RUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsTUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdkVBLEVBd0VBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLDZCQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F4RUEsRUF5RUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsaUNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXpFQSxFQTBFQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxlQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0ExRUEsRUEyRUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBM0VBLEVBNEVBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTVFQSxFQTZFQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxzREFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBN0VBLEVBOEVBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTlFQSxFQStFQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0EvRUEsRUFnRkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsZUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBaEZBLEVBaUZBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWpGQSxFQWtGQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxPQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FsRkEsRUFtRkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsV0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbkZBLEVBb0ZBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFdBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXBGQSxFQXFGQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxRQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FyRkEsRUFzRkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdEZBLEVBdUZBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXZGQSxFQXdGQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxtQkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBeEZBLEVBeUZBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXpGQSxFQTBGQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSw4Q0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBMUZBLEVBMkZBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFdBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTNGQSxFQTRGQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxNQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E1RkEsRUE2RkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsZUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBN0ZBLEVBOEZBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTlGQSxFQStGQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxXQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0EvRkEsRUFnR0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsbUNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWhHQSxFQWlHQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FqR0EsRUFrR0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbEdBLEVBbUdBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQW5HQSxFQW9HQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FwR0EsRUFxR0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsV0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBckdBLEVBc0dBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXRHQSxFQXVHQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxRQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F2R0EsRUF3R0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsYUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBeEdBLEVBeUdBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXpHQSxFQTBHQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxnQ0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBMUdBLEVBMkdBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE1BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTNHQSxFQTRHQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSwyQkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBNUdBLEVBNkdBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTdHQSxFQThHQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxPQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E5R0EsRUErR0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBL0dBLEVBZ0hBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWhIQSxFQWlIQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxRQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FqSEEsRUFrSEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbEhBLEVBbUhBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQW5IQSxFQW9IQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxZQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FwSEEsRUFxSEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsVUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBckhBLEVBc0hBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXRIQSxFQXVIQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F2SEEsRUF3SEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsdUJBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXhIQSxFQXlIQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSx3Q0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBekhBLEVBMEhBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLG9CQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0ExSEEsRUEySEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBM0hBLEVBNEhBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLGdCQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E1SEEsRUE2SEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsWUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBN0hBLEVBOEhBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLGtDQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E5SEEsRUErSEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBL0hBLEVBZ0lBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLGFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWhJQSxFQWlJQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxlQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FqSUEsRUFrSUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsV0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbElBLEVBbUlBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQW5JQSxFQW9JQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FwSUEsRUFxSUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsV0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBcklBLEVBc0lBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXRJQSxFQXVJQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxRQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F2SUEsRUF3SUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBeElBLEVBeUlBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXpJQSxFQTBJQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxRQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0ExSUEsRUEySUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsc0JBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTNJQSxFQTRJQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxZQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E1SUEsRUE2SUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsNEJBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTdJQSxFQThJQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxZQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E5SUEsRUErSUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsa0JBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQS9JQSxFQWdKQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSw0Q0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBaEpBLEVBaUpBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE1BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWpKQSxFQWtKQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FsSkEsRUFtSkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsVUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbkpBLEVBb0pBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXBKQSxFQXFKQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSwwQkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBckpBLEVBc0pBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXRKQSxFQXVKQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxZQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F2SkEsRUF3SkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsWUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBeEpBLEVBeUpBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXpKQSxFQTBKQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxXQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0ExSkEsRUEySkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsVUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBM0pBLEVBNEpBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTVKQSxFQTZKQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxRQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E3SkEsRUE4SkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsVUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBOUpBLEVBK0pBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQS9KQSxFQWdLQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FoS0EsRUFpS0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsZUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBaktBLEVBa0tBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWxLQSxFQW1LQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxnQkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbktBLEVBb0tBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXBLQSxFQXFLQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxXQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FyS0EsRUFzS0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsYUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdEtBLEVBdUtBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXZLQSxFQXdLQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxPQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F4S0EsRUF5S0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBektBLEVBMEtBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE1BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTFLQSxFQTJLQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxhQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0EzS0EsRUE0S0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsTUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBNUtBLEVBNktBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTdLQSxFQThLQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxNQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E5S0EsRUErS0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsa0JBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQS9LQSxFQWdMQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxrQkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBaExBLEVBaUxBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLGFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWpMQSxFQWtMQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FsTEEsRUFtTEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbkxBLEVBb0xBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLDJCQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FwTEEsRUFxTEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsVUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBckxBLEVBc0xBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLGFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXRMQSxFQXVMQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxxQkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdkxBLEVBd0xBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXhMQSxFQXlMQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxPQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F6TEEsRUEwTEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsVUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBMUxBLEVBMkxBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTNMQSxFQTRMQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E1TEEsRUE2TEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBN0xBLEVBOExBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTlMQSxFQStMQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxvQkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBL0xBLEVBZ01BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWhNQSxFQWlNQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxjQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FqTUEsRUFrTUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsaUJBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWxNQSxFQW1NQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxZQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FuTUEsRUFvTUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBcE1BLEVBcU1BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXJNQSxFQXNNQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxXQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F0TUEsRUF1TUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsOENBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXZNQSxFQXdNQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F4TUEsRUF5TUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsd0JBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXpNQSxFQTBNQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0ExTUEsRUEyTUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsY0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBM01BLEVBNE1BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTVNQSxFQTZNQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E3TUEsRUE4TUE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBOU1BLEVBK01BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQS9NQSxFQWdOQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxhQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FoTkEsRUFpTkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsdUJBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWpOQSxFQWtOQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxhQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FsTkEsRUFtTkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsMkJBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQW5OQSxFQW9OQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxzQkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBcE5BLEVBcU5BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFdBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXJOQSxFQXNOQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSwwQkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdE5BLEVBdU5BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE1BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXZOQSxFQXdOQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSw2QkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBeE5BLEVBeU5BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLE1BQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXpOQSxFQTBOQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0ExTkEsRUEyTkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsWUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBM05BLEVBNE5BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTVOQSxFQTZOQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxhQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E3TkEsRUE4TkE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsY0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBOU5BLEVBK05BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQS9OQSxFQWdPQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxPQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FoT0EsRUFpT0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBak9BLEVBa09BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLHFCQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FsT0EsRUFtT0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbk9BLEVBb09BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLDJCQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FwT0EsRUFxT0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsOEJBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXJPQSxFQXNPQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F0T0EsRUF1T0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdk9BLEVBd09BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLHNDQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F4T0EsRUF5T0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsMEJBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXpPQSxFQTBPQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0ExT0EsRUEyT0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsWUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBM09BLEVBNE9BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTVPQSxFQTZPQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxrQ0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBN09BLEVBOE9BO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLG1DQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E5T0EsRUErT0E7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEseUJBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQS9PQSxFQWdQQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxzQkFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBaFBBLEVBaVBBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWpQQSxFQWtQQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FsUEEsRUFtUEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsbUJBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQW5QQSxFQW9QQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxPQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FwUEEsRUFxUEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBclBBLEVBc1BBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXRQQSxFQXVQQTtBQUFBaFYsTUFBQUEsSUFBQUEsRUFBQSxjQUFBO0FBQUFnVixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F2UEEsRUF3UEE7QUFBQWhWLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBZ1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBeFBBLEVBeVBBO0FBQUFoVixNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQWdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXpQQSxFQTJQQXpXLE1BM1BBLENBMlBBLFVBQUEyVyxPQUFBLEVBQUFBO0FBQ0EsYUFBQSxDQUFBLENBQUEsSUFBQUEsT0FBQUEsQ0FBQWxWLElBQUFrVixDQUFBM2MsV0FBQTJjLEdBQUF6SCxPQUFBeUgsQ0FBQUgsTUFBQUEsQ0FBQXhjLFdBQUF3YyxFQUFBRyxDQUFBO0FBQUEzYyxLQTVQQSxDQTJQQTtBQUNBQSxHQTdYQW9FO0FBNlhBcEUsQ0EvWEEsQ0FEQXVCLENkT0FBLEVlUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxZQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBNkMsTUFBQSxFQUFBbU4sT0FBQSxFQUFBQTtBQUVBbk4sRUFBQUEsTUFBQUEsQ0FBQXdZLGFBQUF4WSxHQUFBLENBQUFBLEVBQ0FBLE1BQUFBLENBQUF5WSxhQUFBelksR0FBQXlZLENBQUEsQ0FEQXpZLEVBR0FBLE1BQUFBLENBQUEwWSxNQUFBMVksR0FBQSxDQUFBLGdCQUFBLEVBQUEsZ0JBQUEsRUFBQSxrQkFBQSxDQUhBQSxFQUlBQSxNQUFBQSxDQUFBUixJQUFBUSxHQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLENBSkFBLEVBTUFVLENBQUFBLENBQUFnQixPQUFBaEIsQ0FBQSxjQUFBQSxFQUFBLFVBQUFsQixJQUFBLEVBQUFBO0FBQ0FRLElBQUFBLE1BQUFBLENBQUEyQixNQUFBM0IsR0FBQVIsSUFBQUEsQ0FBQW9DLE1BQUFwQyxDQUFBLFVBQUFxQyxLQUFBLEVBQUFBO0FBQ0EsYUFBQUEsS0FBQUEsQ0FBQTVELE9BQUE7QUFBQUEsS0FEQXVCLENBQUFRLEVBSUFBLE1BQUFBLENBQUEyWSxnQkFBQTNZLEdBQUEsVUFBQTZCLEtBQUEsRUFBQUE7QUFDQTdCLE1BQUFBLE1BQUFBLENBQUF3WSxhQUFBeFksR0FBQTZCLEtBQUE3QixFQUNBQSxNQUFBQSxDQUFBd1ksYUFBQXhZLENBQUE0WSxZQUFBNVksR0FBQTtBQUNBNlksUUFBQUEsZ0JBQUFBLEVBQUEsRUFEQTtBQUVBaE4sUUFBQUEsYUFBQUEsRUFBQSxJQUFBekssSUFBQUEsQ0FBQWtILEVBRkE7QUFHQXdRLFFBQUFBLG1CQUFBQSxFQUFBQSxDQUFBLENBSEE7QUFJQUMsUUFBQUEsUUFBQUEsRUFBQTtBQUNBOWEsVUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQURBO0FBSkEsT0FEQStCLEVBU0FBLE1BQUFBLENBQUF3WSxhQUFBeFksQ0FBQWdaLFVBQUFoWixHQUFBO0FBQ0FpWiw0QkFBQSxpQkFBQWpaLE1BQUFBLENBQUF3WSxhQUFBeFksQ0FBQWtaLEtBQUEsR0FBQSxHQURBO0FBRUFDLDZCQUFBLFdBRkE7QUFHQUMsMkJBQUEsS0FIQTtBQUlBQywrQkFBQTtBQUpBLE9BVEFyWjtBQWFBLEtBbEJBQSxFQXNCQUEsTUFBQUEsQ0FBQTJZLGdCQUFBM1ksQ0FBQUEsTUFBQUEsQ0FBQTJCLE1BQUEzQixDQUFBLENBQUFBLENBQUFBLENBdEJBQSxFQW9DQUEsTUFBQUEsQ0FBQWtILE1BQUFsSCxFQXBDQUE7QUFvQ0FrSCxHQXJDQXhHLENBTkFWO0FBMkNBa0gsQ0E3Q0EsQ0FEQS9KLENmT0FBLEVnQk5BQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBRUFZLFVBRkFaLENBRUEsZUFGQUEsRUFFQSxDQUFBLFFBQUEsRUFBQSxRQUFBLEVBQUEsVUFBQTZDLE1BQUEsRUFBQXNaLE1BQUEsRUFBQUE7QUF5UEEsV0FBQUMsS0FBQSxDQUFBQyxPQUFBLEVBQUFBO0FBQ0EsVUFBQUMsS0FBQUEsR0FBQS9ZLENBQUFBLENBQUE4WSxPQUFBOVksQ0FBQUEsQ0FBQXdDLEdBQUF4QyxDQUFBLGtCQUFBQSxDQUFBO0FBQ0FBLElBQUFBLENBQUFBLENBQUE4WSxPQUFBOVksQ0FBQUEsQ0FBQWtYLE9BQUFsWCxDQUFBO0FBQ0FtWCxNQUFBQSxlQUFBQSxFQUFBO0FBREEsS0FBQW5YLEVBRUEsR0FGQUEsRUFFQSxNQUFBO0FqQm0rRVFBLE1BQUFBLENBQUFBLENBQUU4WSxPQUFGOVksQ0FBQUEsQ0FBV2tYLE9BQVhsWCxDQUFtQjtBQUNqQm1YLFFBQUFBLGVBQUFBLEVBQWlCNEI7QUFEQSxPQUFuQi9ZLEVBRUcsR0FGSEE7QUFFRyxLaUJ2K0VYQTtBQTFQQVY7O0FBQUFBLEVBQUFBLE1BQUFBLENBQUEwWixNQUFBMVosR0FBQTtBQUNBcUQsSUFBQUEsSUFBQUEsRUFBQSxFQURBO0FBRUFzVyxJQUFBQSxNQUFBQSxFQUFBO0FBRkEsR0FBQTNaLEVBSUFzWixNQUFBQSxDQUFBOUosYUFBQThKLEdBQ0EvVixJQURBK1YsQ0FDQTlWLFFBQUFBLElBQUFBO0FqQm0rRVF4RCxJQUFBQSxNQUFBQSxDQUFPeVAsVUFBUHpQLEdBQW9Cd0QsUUFBQUEsQ0FBU2hFLElBQTdCUSxFQUNBQSxNQUFBQSxDQUFPNFosZUFBUDVaLEdBQXlCQSxNQUFBQSxDQUFPeVAsVUFBUHpQLENBQWtCb0YsR0FBbEJwRixDQUFzQjRQLFFBQUFBLElBQVlBLFFBQWxDNVAsQ0FEekJBLEVBRUFBLE1BQUFBLENBQU80WixlQUFQNVosQ0FBdUJwRCxJQUF2Qm9ELENBQTRCLEtBQTVCQSxDQUZBQSxFQUdBQSxNQUFBQSxDQUFPNFosZUFBUDVaLENBQXVCcEQsSUFBdkJvRCxDQUE0QixPQUE1QkEsQ0FIQUEsRUFJQUEsTUFBQUEsQ0FBTzZaLGNBQVA3WixHQUF3QixLQUp4QkEsRUFLQUEsTUFBQUEsQ0FBTzhaLFlBQVA5WixHQUFzQixLQUx0QkE7QUFLc0IsR2lCeitFOUJzWixDQUpBdFosRUFhQXNaLE1BQUFBLENBQUFTLFlBQUFULEdBQ0EvVixJQURBK1YsQ0FDQTlWLFFBQUFBLElBQUFBO0FqQm0rRVF4RCxJQUFBQSxNQUFBQSxDQUFPb0MsU0FBUHBDLEdBQW1Cd0QsUUFBQUEsQ0FBU2hFLElBQTVCUTtBQUE0QlIsR2lCcCtFcEM4WixDQWJBdFosRUFrQkFBLE1BQUFBLENBQUFnYSxPQUFBaGEsR0FBQWYsQ0FBQUEsSUFBQUE7QWpCbytFTSxZQUFBLENBREFBLENBQUFBLEdBQUlBLENBQUFBLElBQUtSLE1BQUFBLENBQU8wVSxLQUNoQixFQUFVdkksT0FBVjtBQUNFLFdBQUssQ0FBTDtBQUNNbEssUUFBQUEsQ0FBQUEsQ0FBRSxZQUFGQSxDQUFBQSxDQUFnQnVaLEVBQWhCdlosQ0FBbUIsUUFBbkJBLEtBQ0ZlLFVBQUFBLENBQVcsTUFBQTtBQUNUekIsVUFBQUEsTUFBQUEsQ0FBT2thLFFBQVBsYTtBQUFPa2EsU0FEVHpZLEVBRUcsR0FGSEEsQ0FERWY7QUFLSjs7QUFDRixXQUFLLEVBQUw7QUFDTUEsUUFBQUEsQ0FBQUEsQ0FBRSxZQUFGQSxDQUFBQSxDQUFnQnVaLEVBQWhCdlosQ0FBbUIsUUFBbkJBLElBQ0ZWLE1BQUFBLENBQU9rYSxRQUFQbGEsRUFERVUsR0FFT0EsQ0FBQUEsQ0FBRSxZQUFGQSxDQUFBQSxDQUFnQnVaLEVBQWhCdlosQ0FBbUIsUUFBbkJBLEtBQ1RBLENBQUFBLENBQUUsWUFBRkEsQ0FBQUEsQ0FBZ0J5WixLQUFoQnpaLEVBSEVBO0FBVFI7QUFZc0J5WixHaUJsZ0Y1Qm5hLEVBMENBQSxNQUFBQSxDQUFBb2EsVUFBQXBhLEdBQUEsRUExQ0FBLEVBMkNBQSxNQUFBQSxDQUFBcWEsT0FBQXJhLEdBQUEsRUEzQ0FBLEVBNkNBQSxNQUFBQSxDQUFBc2EsaUJBQUF0YSxHQUFBNFAsUUFBQUEsSUFBQTVQLE1BQUFBLENBQUE2WixjQUFBN1osR0FBQTRQLFFBN0NBNVAsRUE4Q0FBLE1BQUFBLENBQUF1YSxhQUFBdmEsR0FBQUssSUFBQUEsSUFBQUwsTUFBQUEsQ0FBQXdhLFVBQUF4YSxHQUFBSyxJQTlDQUwsRUErQ0FBLE1BQUFBLENBQUF5YSxlQUFBemEsR0FBQW9TLElBQUFBLElBQUFwUyxNQUFBQSxDQUFBOFosWUFBQTlaLEdBQUFvUyxJQS9DQXBTLEVBaURBQSxNQUFBQSxDQUFBMGEsYUFBQTFhLEdBQUEsTWpCbStFV0EsTUFBQUEsQ0FBTzJhLEtBQVAzYSxHQUNFQSxNQUFBQSxDQUFPMmEsS0FBUDNhLENBQWE0QixNQUFiNUIsQ0FBb0IsQ0FBQTtBQUN6QnlQLElBQUFBLFVBRHlCO0FBRXpCbUwsSUFBQUEsU0FGeUI7QUFHekJDLElBQUFBO0FBSHlCLEdBQUEsS0FHekJBLENBRTRCLFVBQXhCN2EsTUFBQUEsQ0FBTzhaLFlBQWlCLElBQWpCQSxFQUNvQixhQUF4QjlaLE1BQUFBLENBQU84WixZQUFpQixJQUFqQkEsQ0FBMkMsQ0FBM0NBLEtBQTZCYyxTQUFaLElBQTRELGNBQXhCNWEsTUFBQUEsQ0FBTzhaLFlBQWlCLElBQWpCQSxDQUE0QyxDQUE1Q0EsS0FBOEJjLFNBRDdGZCxDQUZYZSxNQUs4QixVQUExQjdhLE1BQUFBLENBQU82WixjQUFtQixJQUErQixVQUF0QjdaLE1BQUFBLENBQU93YSxVQUFoQixLQUVPLFVBQTFCeGEsTUFBQUEsQ0FBTzZaLGNBQW1CLElBQStCLFVBQXRCN1osTUFBQUEsQ0FBT3dhLFVBQWhCLEdBQy9CL0ssVUFBQUEsQ0FBV2xJLE1BQVhrSSxHQUFvQixDQUFwQkEsR0FDS0EsVUFBQUEsQ0FBV3FCLE9BQVhyQixDQUFtQnpQLE1BQUFBLENBQU82WixjQUExQnBLLEtBQTZDLENBRGxEQSxHQUcrQixZQUExQnpQLE1BQUFBLENBQU82WixjQUptQixHQU1BLFVBQTFCN1osTUFBQUEsQ0FBTzZaLGNBQW1CLElBQStCLFVBQXRCN1osTUFBQUEsQ0FBT3dhLFVBQWhCLEdBQzVCSyxPQUFBQSxLQUFZN2EsTUFBQUEsQ0FBT3dhLFVBRFMsR0FHL0IvSyxVQUFBQSxDQUFXbEksTUFBWGtJLEdBQW9CLENBQXBCQSxHQUNLQSxVQUFBQSxDQUFXcUIsT0FBWHJCLENBQW1CelAsTUFBQUEsQ0FBTzZaLGNBQTFCcEssS0FBNkMsQ0FBN0NBLElBQWtEb0wsT0FBQUEsS0FBWTdhLE1BQUFBLENBQU93YSxVQUQxRS9LLEdBRytCLFlBQTFCelAsTUFBQUEsQ0FBTzZaLGNBQW1CLElBQVdnQixPQUFBQSxLQUFZN2EsTUFBQUEsQ0FBT3dhLFVBZHJDLENBTDlCSyxDQUhLN2EsQ0FERkEsR0FBcUIsRWlCcGhGaENBLEVBK0VBQSxNQUFBQSxDQUFBeUQsR0FBQXpELENBQUEsT0FBQUEsRUFBQTBELENBQUFBLElBQUFBO0FqQm0rRU0xRCxJQUFBQSxNQUFBQSxDQUFPOGEsUUFBUDlhO0FBQU84YSxHaUJuK0ViOWEsQ0EvRUFBLEVBb0ZBQSxNQUFBQSxDQUFBbkQsSUFBQW1ELEdBQUEsQ0FBQSthLFNBQUEsRUFBQUMsU0FBQSxLQUFBQTtBakJtK0VNaGIsSUFBQUEsTUFBQUEsQ0FBT2diLFNBQVBoYixHQUFtQmdiLFNBQW5CaGIsRUFDSUEsTUFBQUEsQ0FBTythLFNBQVAvYSxLQUFxQithLFNBQXJCL2EsR0FDRkEsTUFBQUEsQ0FBT2liLGFBQVBqYixHQUFPaWIsQ0FBaUJqYixNQUFBQSxDQUFPaWIsYUFEN0JqYixJQUdGQSxNQUFBQSxDQUFPK2EsU0FBUC9hLEdBQW1CK2EsU0FBbkIvYSxFQUNBQSxNQUFBQSxDQUFPaWIsYUFBUGpiLEdBQU9pYixDQUFnQixDQUpyQmpiLENBREpBLEVBT0FBLE1BQUFBLENBQU9rYixNQUFQbGIsR0FBT2tiLENBQVVsYixNQUFBQSxDQUFPaWIsYUFBUGpiLEdBQXVCLEdBQXZCQSxHQUE2QixHQUF2Q2tiLElBQThDbGIsTUFBQUEsQ0FBTythLFNBUDVEL2E7QUFPNEQrYSxHaUI5akZsRS9hLEVBK0ZBQSxNQUFBQSxDQUFBbWIsUUFBQW5iLEdBQUEsT0EvRkFBLEVBZ0dBQSxNQUFBQSxDQUFBK2EsU0FBQS9hLEdBQUEsTUFoR0FBLEVBaUdBQSxNQUFBQSxDQUFBaWIsYUFBQWpiLEdBQUFpYixDQUFBLENBakdBamIsRUFrR0FBLE1BQUFBLENBQUFuRCxJQUFBbUQsQ0FBQSxNQUFBQSxFQUFBLGVBQUFBLENBbEdBQSxFQW9HQUEsTUFBQUEsQ0FBQW9iLGdCQUFBcGIsR0FBQTRQLFFBQUFBLElqQm0rRVc1UCxNQUFBQSxDQUFPMmEsS0FBUDNhLEdBQ0VBLE1BQUFBLENBQU8yYSxLQUFQM2EsQ0FBYTRCLE1BQWI1QixDQUFvQnFiLElBQUFBLElBQUFBLENBQXNCLFVBQWJ6TCxRQUFhLElBQVN5TCxJQUFBQSxDQUFLNUwsVUFBTDRMLENBQWdCdkssT0FBaEJ1SyxDQUF3QnpMLFFBQXhCeUwsS0FBcUMsQ0FBcEVBLE1BQWlHLFVBQXRCcmIsTUFBQUEsQ0FBT3dhLFVBQWUsSUFBU2EsSUFBQUEsQ0FBS1IsT0FBTFEsS0FBaUJyYixNQUFBQSxDQUFPd2EsVUFBbElhLE1BQTBLLFVBQXhCcmIsTUFBQUEsQ0FBTzhaLFlBQWlCLElBQVN1QixJQUFBQSxDQUFLVCxTQUFMUyxNQUE0QyxjQUF4QnJiLE1BQUFBLENBQU84WixZQUEzQnVCLENBQW5MQSxDQUFwQnJiLEVBQWdRdUgsTUFEbFF2SCxHQUFxQixDaUJ2a0ZoQ0EsRUF5R0FBLE1BQUFBLENBQUFzYixjQUFBdGIsR0FBQW9TLElBQUFBLElqQm0rRVdwUyxNQUFBQSxDQUFPMmEsS0FBUDNhLEdBQ0VBLE1BQUFBLENBQU8yYSxLQUFQM2EsQ0FBYTRCLE1BQWI1QixDQUFvQnFiLElBQUFBLElBQWlCLFVBQVRqSixJQUFTLElBQVVpSixJQUFBQSxDQUFLVCxTQUFMUyxJQUEyQixjQUFUakosSUFBNUIsSUFBNEJBLENBQXlCaUosSUFBQUEsQ0FBS1QsU0FBOUJ4SSxJQUFvRCxhQUFUQSxJQUE1R3BTLEVBQWdJdUgsTUFEbEl2SCxHQUFxQixDaUI1a0ZoQ0EsRUE4R0FBLE1BQUFBLENBQUE4YSxRQUFBOWEsR0FBQSxNQUFBO0FqQm0rRVdBLElBQUFBLE1BQUFBLENBQU80RCxPQUFQNUQsS0FDSEEsTUFBQUEsQ0FBTzRELE9BQVA1RCxHQUFPNEQsQ0FBVSxDQUFqQjVELEVBQ0FzWixNQUFBQSxDQUFPd0IsUUFBUHhCLENBQWdCdFosTUFBQUEsQ0FBT1MsV0FBdkI2WSxFQUNHL1YsSUFESCtWLENBQ1EsQ0FBQTtBQUNKOVosTUFBQUE7QUFESSxLQUFBLEtBQ0pBO0FBRUFRLE1BQUFBLE1BQUFBLENBQU8yYSxLQUFQM2EsR0FBZVIsSUFBZlEsRUFDQUEsTUFBQUEsQ0FBT3ViLFdBQVB2YixHQUFxQixFQURyQkEsRUFFQUEsTUFBQUEsQ0FBT3ViLFdBQVB2YixDQUFtQndiLEdBQW5CeGIsR0FBeUJBLE1BQUFBLENBQU8yYSxLQUFQM2EsQ0FBYXVILE1BRnRDdkgsRUFHQUEsTUFBQUEsQ0FBT3ViLFdBQVB2YixHQUFxQkEsTUFBQUEsQ0FBTzJhLEtBQVAzYSxDQUFhbkQsSUFBYm1ELENBQWtCLENBQUN5YixLQUFELEVBQVFDLEtBQVIsS0FBa0JELEtBQUFBLENBQU1aLE9BQU5ZLEdBQWdCQyxLQUFBQSxDQUFNYixPQUExRDdhLEVBQW1FN0UsTUFBbkU2RSxDQUEwRSxDQUFDMmIsS0FBRCxFQUFDQTtBQUM5RmQsUUFBQUE7QUFEOEZjLE9BQUQsTUFHeEZBLEtBQUFBLENBQU1kLE9BQU5jLENBQUFBLEtBQWdCQSxLQUFBQSxDQUFNZCxPQUFOYyxDQUFBQSxHQUFpQixDQUFqQ0EsR0FDTEEsS0FBQUEsQ0FBTWQsT0FBTmMsQ0FBQUEsRUFES0EsRUFFRUEsS0FMc0YsQ0FBMUUzYixFQU1sQkEsTUFBQUEsQ0FBT3ViLFdBTld2YixDQUhyQkEsRUFVQUEsTUFBQUEsQ0FBTzRiLFNBQVA1YixHQUFtQnFILE1BQUFBLENBQU9DLElBQVBELENBQVlySCxNQUFBQSxDQUFPdWIsV0FBbkJsVSxFQUFnQ0UsTUFWbkR2SCxFQVdBQSxNQUFBQSxDQUFPdWIsV0FBUHZiLEdBQXFCekQsVUFBQUEsQ0FBV3lELE1BQUFBLENBQU91YixXQUFsQmhmLEVBQWtCZ2YsQ0FBYSxDQUEvQmhmLENBWHJCeUQsRUFZQUEsTUFBQUEsQ0FBT3dhLFVBQVB4YSxHQUFvQixLQVpwQkEsRUFhQUEsTUFBQUEsQ0FBTzRELE9BQVA1RCxHQUFPNEQsQ0FBVSxDQWJqQjVEO0FBYWlCLEtBakJyQnNaLENBRkd0WjtBQW1Ca0IsR2lCcG1GN0JBLEVBdUlBQSxNQUFBQSxDQUFBNmIsVUFBQTdiLEdBQUFxYixJQUFBQSxJQUFBQTtBakJtK0VNL0IsSUFBQUEsTUFBQUEsQ0FBT3dDLE9BQVB4QyxDQUFlK0IsSUFBZi9CLEVBQ0cvVixJQURIK1YsQ0FDUSxDQUFBO0FBQ0o5WixNQUFBQTtBQURJLEtBQUEsS0FDSkE7QUFFQVEsTUFBQUEsTUFBQUEsQ0FBTytiLFlBQVAvYixHQUFzQlIsSUFBdEJRO0FBQXNCUixLQUoxQjhaO0FBSTBCOVosR2lCOW1GaENRLEVBZ0pBQSxNQUFBQSxDQUFBOFAsY0FBQTlQLEdBQUE0UCxRQUFBQSxJQUFBQTtBakJtK0VNNVAsSUFBQUEsTUFBQUEsQ0FBTytiLFlBQVAvYixDQUFvQjRQLFFBQXBCNVAsR0FBK0I0UCxRQUEvQjVQLEVBQ0FVLENBQUFBLENBQUUsa0JBQUZBLENBQUFBLENBQXNCYyxJQUF0QmQsRUFEQVY7QUFDc0J3QixHaUJwbkY1QnhCLEVBcUpBQSxNQUFBQSxDQUFBZ2MsZ0JBQUFoYyxHQUFBNFAsUUFBQUEsSWpCbStFYTVQLE1BQUFBLENBQU8rYixZQUFQL2IsSUFBdUJBLE1BQUFBLENBQU8rYixZQUFQL2IsQ0FBb0J5UCxVQUFwQnpQLENBQStCOFEsT0FBL0I5USxDQUF1QzRQLFFBQXZDNVAsS0FBb0QsQ0FBM0VBLEdBQStFLGFBQS9FQSxHQUErRixhaUJ4bkY1R0EsRUF5SkFBLE1BQUFBLENBQUFpYyxjQUFBamMsR0FBQTRQLFFBQUFBLElBQUFBO0FqQm0rRU0sVUFBTXNNLGFBQUFBLEdBQWdCbGMsTUFBQUEsQ0FBTytiLFlBQVAvYixDQUFvQnlQLFVBQXBCelAsQ0FBK0I4USxPQUEvQjlRLENBQXVDNFAsUUFBdkM1UCxDQUF0QjtBQUNJa2MsSUFBQUEsYUFBQUEsSUFBaUIsQ0FBakJBLEdBQ0ZsYyxNQUFBQSxDQUFPK2IsWUFBUC9iLENBQW9CeVAsVUFBcEJ6UCxDQUErQjZRLE1BQS9CN1EsQ0FBc0NrYyxhQUF0Q2xjLEVBQXFELENBQXJEQSxDQURFa2MsR0FHRmxjLE1BQUFBLENBQU8rYixZQUFQL2IsQ0FBb0J5UCxVQUFwQnpQLENBQStCcEQsSUFBL0JvRCxDQUFvQzRQLFFBQXBDNVAsQ0FIRWtjO0FBR2tDdE0sR2lCaG9GNUM1UCxFQWtLQUEsTUFBQUEsQ0FBQXVDLGNBQUF2QyxHQUFBd0MsUUFBQUEsSUFBQUE7QWpCbStFTXhDLElBQUFBLE1BQUFBLENBQU8rYixZQUFQL2IsQ0FBb0J3QyxRQUFwQnhDLEdBQStCd0MsUUFBQUEsQ0FBUzBLLElBQXhDbE47QUFDQSxVQUFNbWMsZUFBQUEsR0FBa0JuYyxNQUFBQSxDQUFPK2IsWUFBUC9iLENBQW9CeVAsVUFBcEJ6UCxDQUErQjhRLE9BQS9COVEsQ0FBdUMsYUFBdkNBLENBQXhCO0FBQ3NCLGFBQWxCd0MsUUFBQUEsQ0FBUzBLLElBQVMsSUFBUWlQLGVBQUFBLEdBQWtCLENBQTFCLEdBQ3BCbmMsTUFBQUEsQ0FBTytiLFlBQVAvYixDQUFvQnlQLFVBQXBCelAsQ0FBK0JwRCxJQUEvQm9ELENBQW9DLGFBQXBDQSxDQURvQixHQUVPLFNBQWxCd0MsUUFBQUEsQ0FBUzBLLElBQVMsSUFBUWlQLGVBQUFBLElBQW1CLENBQTNCLElBQzNCbmMsTUFBQUEsQ0FBTytiLFlBQVAvYixDQUFvQnlQLFVBQXBCelAsQ0FBK0I2USxNQUEvQjdRLENBQXNDbWMsZUFBdENuYyxFQUF1RCxDQUF2REEsQ0FIb0I7QUFHbUMsR2lCMW9GL0RBLEVBNEtBQSxNQUFBQSxDQUFBb2MsT0FBQXBjLEdBQUEsTUFBQTtBakJtK0VNLFVBQU1xYyxlQUFBQSxHQUFrQnJjLE1BQUFBLENBQU8rYixZQUFQL2IsR0FBc0JBLE1BQUFBLENBQU8rYixZQUFQL2IsQ0FBb0J3QyxRQUExQ3hDLEdBQXFELElBQTdFO0FBQ0FBLElBQUFBLE1BQUFBLENBQU8rYixZQUFQL2IsR0FBc0I7QUFDcEJxRCxNQUFBQSxJQUFBQSxFQUFNLEVBRGM7QUFFcEJ3WCxNQUFBQSxPQUFBQSxFQUFTN2EsTUFBQUEsQ0FBT1MsV0FBUFQsQ0FBbUJRLEdBRlI7QUFHcEI2RCxNQUFBQSxJQUFBQSxFQUFNLElBQUlyRCxJQUFKLEVBSGM7QUFJcEIyWSxNQUFBQSxNQUFBQSxFQUFRLEVBSlk7QUFLcEIyQyxNQUFBQSxPQUFBQSxFQUFTLENBTFc7QUFNcEIxQixNQUFBQSxTQUFBQSxFQUFBQSxDQUFXLENBTlM7QUFPcEJoTCxNQUFBQSxRQUFBQSxFQUFVLEVBUFU7QUFRcEJILE1BQUFBLFVBQUFBLEVBQVksRUFSUTtBQVNwQmpOLE1BQUFBLFFBQUFBLEVBQVU2WjtBQVRVLEtBQXRCcmM7QUFTWXFjLEdpQnpwRmxCcmMsRUEyTEFBLE1BQUFBLENBQUFrYSxRQUFBbGEsR0FBQSxNQUFBO0FqQm0rRVVBLElBQUFBLE1BQUFBLENBQU9xYSxPQUFQcmEsQ0FBZXlOLEtBQWZ6TixLQUNFMEQsQ0FBQUEsQ0FBRTZZLElBQUY3WSxDQUFPMUQsTUFBQUEsQ0FBTytiLFlBQVAvYixDQUFvQjJaLE1BQTNCalcsRUFBbUMrSixLQUFBQSxJQUFTQSxLQUFBQSxJQUFTek4sTUFBQUEsQ0FBT3FhLE9BQVByYSxDQUFleU4sS0FBcEUvSixJQUNGOFksS0FBQUEsQ0FBU3hjLE1BQUFBLENBQU9xYSxPQUFQcmEsQ0FBZXlOLEtBQWZ6TixHQUFILHlCQUFOd2MsQ0FERTlZLElBR0YxRCxNQUFBQSxDQUFPcWEsT0FBUHJhLENBQWU2YSxPQUFmN2EsR0FBeUJBLE1BQUFBLENBQU9TLFdBQVBULENBQW1CUSxHQUE1Q1IsRUFDQUEsTUFBQUEsQ0FBTytiLFlBQVAvYixDQUFvQjJaLE1BQXBCM1osQ0FBMkIrVCxPQUEzQi9ULENBQW1DVixJQUFBQSxDQUFLQyxLQUFMRCxDQUFXQSxJQUFBQSxDQUFLTyxTQUFMUCxDQUFlVSxNQUFBQSxDQUFPcWEsT0FBdEIvYSxDQUFYQSxDQUFuQ1UsQ0FEQUEsRUFFQUEsTUFBQUEsQ0FBTytiLFlBQVAvYixDQUFvQnNjLE9BQXBCdGMsRUFGQUEsRUFHQUEsTUFBQUEsQ0FBT3FhLE9BQVByYSxDQUFleU4sS0FBZnpOLEdBQXVCLEVBSHZCQSxFQUlBQSxNQUFBQSxDQUFPcWEsT0FBUHJhLENBQWV5YyxLQUFmemMsR0FBdUIsRUFKdkJBLEVBS0lBLE1BQUFBLENBQU8rYixZQUFQL2IsQ0FBb0IyWixNQUFwQjNaLENBQTJCdUgsTUFBM0J2SCxJQUFxQyxFQUFyQ0EsSUFBMkNBLE1BQUFBLENBQU8rYixZQUFQL2IsQ0FBb0JxRCxJQUEvRHJELElBQXVFQSxNQUFBQSxDQUFPK2IsWUFBUC9iLENBQW9CeVAsVUFBcEJ6UCxDQUErQnVILE1BQS9CdkgsR0FBd0MsQ0FBL0dBLElBQ0ZBLE1BQUFBLENBQU8wYyxRQUFQMWMsQ0FBZ0JBLE1BQUFBLENBQU8rYixZQUF2Qi9iLENBVEEwRCxDQURGMUQsR0FjSlUsQ0FBQUEsQ0FBRSxZQUFGQSxDQUFBQSxDQUFnQnlaLEtBQWhCelosRUFkSVY7QUFjWW1hLEdpQjVxRnRCbmEsRUE2TUFBLE1BQUFBLENBQUEyYyxVQUFBM2MsR0FBQXFiLElBQUFBLElBQUFBO0FqQm0rRU1BLElBQUFBLElBQUFBLENBQUt1QixRQUFMdkIsR0FBS3VCLENBQVcsQ0FBaEJ2QixFQUNBL0IsTUFBQUEsQ0FBT3FELFVBQVByRCxDQUFrQnRaLE1BQUFBLENBQU9TLFdBQXpCNlksRUFBc0MrQixJQUF0Qy9CLENBREErQjtBQUNzQ0EsR2lCanJGNUNyYixFQWtOQUEsTUFBQUEsQ0FBQTBjLFFBQUExYyxHQUFBcWIsSUFBQUEsSUFBQUE7QWpCbStFV3JiLElBQUFBLE1BQUFBLENBQU82YyxNQUFQN2MsS0FDSHFiLElBQUFBLENBQUsxQixNQUFMMEIsR0FBY0EsSUFBQUEsQ0FBSzFCLE1BQUwwQixDQUFZelosTUFBWnlaLENBQW1CLENBQUE7QUFDL0I1TixNQUFBQTtBQUQrQixLQUFBLEtBRTNCQSxLQUZRNE4sQ0FBZEEsRUFHSUEsSUFBQUEsQ0FBSzFCLE1BQUwwQixDQUFZOVQsTUFBWjhULElBQXNCLEVBQXRCQSxJQUE0QkEsSUFBQUEsQ0FBS2hZLElBQWpDZ1ksSUFBeUNBLElBQUFBLENBQUs1TCxVQUFMNEwsQ0FBZ0I5VCxNQUFoQjhULEdBQXlCLENBQWxFQSxJQUNGcmIsTUFBQUEsQ0FBTzZjLE1BQVA3YyxHQUFPNmMsQ0FBUyxDQUFoQjdjLEVBQ0FzWixNQUFBQSxDQUFPb0QsUUFBUHBELENBQWdCdFosTUFBQUEsQ0FBT1MsV0FBdkI2WSxFQUFvQytCLElBQXBDL0IsRUFDRy9WLElBREgrVixDQUNRLENBQUE7QUFDSjlaLE1BQUFBO0FBREksS0FBQSxLQUNKQTtBQUVBLFVBQUtRLE1BQUFBLENBQU8rYixZQUFQL2IsQ0FBb0JRLEdBQXpCLEVBR087QUFDTCxhQUFLLElBQUlvRixDQUFBQSxHQUFJLENBQWIsRUFBZ0JBLENBQUFBLEdBQUk1RixNQUFBQSxDQUFPMmEsS0FBUDNhLENBQWF1SCxNQUFqQyxFQUF5QzNCLENBQUFBLEVBQXpDLEVBQ0UsSUFBSTVGLE1BQUFBLENBQU8yYSxLQUFQM2EsQ0FBYTRGLENBQWI1RixFQUFnQlEsR0FBaEJSLEtBQXdCUixJQUFBQSxDQUFLZ0IsR0FBakMsRUFBc0M7QUFDcENSLFVBQUFBLE1BQUFBLENBQU8yYSxLQUFQM2EsQ0FBYTRGLENBQWI1RixJQUFrQlIsSUFBbEJRO0FBQ0E7QUFHSkE7O0FBQUFBLFFBQUFBLE1BQUFBLENBQU82YixVQUFQN2IsQ0FBa0JxYixJQUFsQnJiO0FBQWtCcWIsT0FWcEIsTUFDRXJiLE1BQUFBLENBQU8yYSxLQUFQM2EsQ0FBYStULE9BQWIvVCxDQUFxQlIsSUFBckJRLEdBQ0FBLE1BQUFBLENBQU82YixVQUFQN2IsQ0FBa0JSLElBQWxCUSxDQURBQTs7QUFXRkEsTUFBQUEsTUFBQUEsQ0FBTzZjLE1BQVA3YyxHQUFPNmMsQ0FBUyxDQUFoQjdjO0FBQWdCLEtBaEJwQnNaLEVBaUJLeE0sR0FBQUEsSUFBQUE7QUFDRGhPLE1BQUFBLE9BQUFBLENBQVFxRixLQUFSckYsQ0FBY2dPLEdBQWRoTyxHQUNBa0IsTUFBQUEsQ0FBTzZjLE1BQVA3YyxHQUFPNmMsQ0FBUyxDQURoQi9kO0FBQ2dCLEtBbkJwQndhLENBRkUrQixJQXVCT0EsSUFBQUEsQ0FBSzFCLE1BQUwwQixDQUFZOVQsTUFBWjhULEdBQXFCLEVBQXJCQSxHQUNUbUIsS0FBQUEsQ0FBTSx1Q0FBTkEsQ0FEU25CLEdBRUNBLElBQUFBLENBQUtoWSxJQUFMZ1ksR0FHVjlCLEtBQUFBLENBQU0sZ0JBQU5BLENBSFU4QixHQUNWOUIsS0FBQUEsQ0FBTSxZQUFOQSxDQTlCQ3ZaO0FBOEJLLEdpQm50RmhCQSxFQW1RQUEsTUFBQUEsQ0FBQThjLFVBQUE5YyxHQUFBcWIsSUFBQUEsSUFBQUE7QWpCbStFV0EsSUFBQUEsSUFBQUEsQ0FBSzdhLEdBQUw2YSxHQU1DMEIsT0FBQUEsQ0FBUSw0Q0FBUkEsQ0FBQUEsSUFDRnpELE1BQUFBLENBQU93RCxVQUFQeEQsQ0FBa0IrQixJQUFsQi9CLEVBQ0cvVixJQURIK1YsQ0FDUTlWLFFBQUFBLElBQUFBO0FBQ0p4RCxNQUFBQSxNQUFBQSxDQUFPOGEsUUFBUDlhLElBQ0FBLE1BQUFBLENBQU8rYixZQUFQL2IsR0FBc0IsSUFEdEJBO0FBQ3NCLEtBSDFCc1osQ0FQQytCLElBQ0hyYixNQUFBQSxDQUFPMmEsS0FBUDNhLEdBQWVBLE1BQUFBLENBQU8yYSxLQUFQM2EsQ0FBYTRCLE1BQWI1QixDQUFvQixDQUFBO0FBQ2pDUSxNQUFBQTtBQURpQyxLQUFBLEtBRTdCQSxHQUZTUixDQUFmQSxFQUdBQSxNQUFBQSxDQUFPK2IsWUFBUC9iLEdBQXNCLElBSm5CcWI7QUFJbUIsR2lCMXVGOUJyYixFQW9SQUEsTUFBQUEsQ0FBQWdkLGVBQUFoZCxHQUFBcWIsSUFBQUEsSUFBQUE7QWpCbStFTSxVQUFNMUIsTUFBQUEsR0FBUzBCLElBQUFBLENBQUsxQixNQUFwQjtBQUFBLFVBQ01zRCxNQUFBQSxHQUFTNUIsSUFBQUEsQ0FBSzRCLE1BRHBCO0FBRUEsV0FBSXRELE1BQUFBLEtBQVdzRCxNQUFYdEQsSUFBcUIwQixJQUFBQSxDQUFLNkIsV0FBMUJ2RCxHQUNLLGFBRExBLEdBRWtCLE1BQVhzRCxNQUFXLElBQU01QixJQUFBQSxDQUFLNkIsV0FBWCxHQUVBLE1BQVhELE1BQVcsSUFBSzVCLElBQUFBLENBQUs2QixXQUFWLEdBQ2IsVUFEYSxHQUdiLGFBTGEsR0FDYixhQUhUO0FBR1MsR2lCNXZGZmxkLEVBa1NBQSxNQUFBQSxDQUFBbWQsWUFBQW5kLEdBQUEsTUFBQTtBakJtK0VNc1osSUFBQUEsTUFBQUEsQ0FBTzZELFlBQVA3RCxDQUFvQnRaLE1BQUFBLENBQU8rYixZQUEzQnpDLEVBQXlDL1YsSUFBekMrVixDQUE4QzlWLFFBQUFBLElBQVl4RCxNQUFBQSxDQUFPNmIsVUFBUDdiLENBQWtCQSxNQUFBQSxDQUFPK2IsWUFBekIvYixDQUExRHNaO0FBQW1GeUMsR2lCcndGekYvYjtBakJxd0Z5RitiLENpQnR3RnpGLENBRkE1ZSxDaEJNQUEsRWlCTkFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFFQVksVUFGQVosQ0FFQSxvQkFGQUEsRUFFQSxDQUFBLFFBQUEsRUFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUE2QyxNQUFBLEVBQUFzWixNQUFBLEVBQUFuWixPQUFBLEVBQUFBO0FBRUFILEVBQUFBLE1BQUFBLENBQUF5RCxHQUFBekQsQ0FBQSxPQUFBQSxFQUFBMEQsQ0FBQUEsSUFBQUE7QWxCOHdGVTFELElBQUFBLE1BQUFBLENBQU9TLFdBQVBULENBQW1Cb2QsS0FBbkJwZCxJQUNGcWQsUUFBQUEsRUFERXJkO0FBQ0ZxZCxHa0Ivd0ZScmQsR0FNQUEsTUFBQUEsQ0FBQXNkLFFBQUF0ZCxHQUFBLE1BQUE7QWxCOHdGTUEsSUFBQUEsTUFBQUEsQ0FBTzRELE9BQVA1RCxHQUFPNEQsQ0FBVSxDQUFqQjVELEVBQ0FzWixNQUFBQSxDQUFPZ0UsUUFBUGhFLEdBQWtCL1YsSUFBbEIrVixDQUF1QjlWLFFBQUFBLElBQUFBO0FBQ3JCeEQsTUFBQUEsTUFBQUEsQ0FBT3VkLEtBQVB2ZCxHQUFld0QsUUFBQUEsQ0FBU2hFLElBQVRnRSxDQUFjbEksT0FBZGtJLENBQXNCLElBQXRCQSxFQUE0QixPQUE1QkEsQ0FBZnhELEVBQ0FBLE1BQUFBLENBQU80RCxPQUFQNUQsR0FBTzRELENBQVUsQ0FEakI1RDtBQUNpQixLQUZuQnNaLENBREF0WjtBQUdtQixHa0J2eEZ6QkEsRUFhQUEsTUFBQUEsQ0FBQXNkLFFBQUF0ZCxFQWJBQSxFQWVBc1osTUFBQUEsQ0FBQWtFLFFBQUFsRSxHQUFBL1YsSUFBQStWLENBQUE5VixRQUFBQSxJQUFBQTtBbEI4d0ZNeEQsSUFBQUEsTUFBQUEsQ0FBT3lkLE1BQVB6ZCxHQUFnQndELFFBQUFBLENBQVNoRSxJQUF6QlEsRUFDQWxCLE9BQUFBLENBQVFDLEdBQVJELENBQVlrQixNQUFBQSxDQUFPeWQsTUFBbkIzZSxDQURBa0I7QUFDbUJ5ZCxHa0Ivd0Z6Qm5FLENBZkF0Wjs7QUFvQkEsUUFBQXFkLFFBQUFBLEdBQUEsTUFBQTtBbEI4d0ZNcmQsSUFBQUEsTUFBQUEsQ0FBTzRELE9BQVA1RCxHQUFPNEQsQ0FBVSxDQUFqQjVELEVBQ0FHLE9BQUFBLENBQVFrZCxRQUFSbGQsR0FBbUJvRCxJQUFuQnBELENBQXdCcUQsUUFBQUEsSUFBQUE7QUFDdEJ4RCxNQUFBQSxNQUFBQSxDQUFPMmIsS0FBUDNiLEdBQWV3RCxRQUFBQSxDQUFTaEUsSUFBVGdFLENBQWM1QixNQUFkNEIsQ0FBcUJuRCxJQUFBQSxJQUFBQSxDQUFTQSxJQUFBQSxDQUFLK2MsS0FBbkM1WixDQUFmeEQsRUFDQUEsTUFBQUEsQ0FBTzRELE9BQVA1RCxHQUFPNEQsQ0FBVSxDQURqQjVEO0FBQ2lCLEtBRm5CRyxDQURBSDtBQUdtQixHa0JqeEZ6Qjs7QUFRQUEsRUFBQUEsTUFBQUEsQ0FBQTBkLFNBQUExZCxHQUFBSyxJQUFBQSxJQUFBQTtBbEI4d0ZNTCxJQUFBQSxNQUFBQSxDQUFPNEQsT0FBUDVELEdBQU80RCxDQUFVLENBQWpCNUQsRUFDQUcsT0FBQUEsQ0FBUXVkLFNBQVJ2ZCxDQUFrQkUsSUFBQUEsQ0FBS0csR0FBdkJMLEVBQ0dvRCxJQURIcEQsQ0FDUXFELFFBQUFBLElBQUFBO0FBQ0o2WixNQUFBQSxRQUFBQTtBQUFBQSxLQUZKbGQsQ0FEQUg7QUFHSXFkLEdrQmp4RlZyZCxFQVFBQSxNQUFBQSxDQUFBMmQsV0FBQTNkLEdBQUFLLElBQUFBLElBQUFBO0FsQjh3Rk1pWixJQUFBQSxNQUFBQSxDQUFPcUUsV0FBUHJFLEdBQ0cvVixJQURIK1YsQ0FDUTlWLFFBQUFBLElBQUFBO0FBQ0p4RCxNQUFBQSxNQUFBQSxDQUFPeWQsTUFBUHpkLEdBQWdCd0QsUUFBQUEsQ0FBU2hFLElBQXpCUSxFQUNBbEIsT0FBQUEsQ0FBUUMsR0FBUkQsQ0FBWWtCLE1BQUFBLENBQU95ZCxNQUFuQjNlLENBREFrQjtBQUNtQnlkLEtBSHZCbkU7QUFHdUJtRSxHa0J6eEY3QnpkO0FsQnl4RjZCeWQsQ2tCdnpGN0IsQ0FGQXRnQixDakJNQUEsRWtCUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxhQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFVBQUE2QyxNQUFBLEVBQUFBO0FBRUFBLEVBQUFBLE1BQUFBLENBQUE0ZCxhQUFBNWQsR0FBQSxDQUFBQSxFQUNBQSxNQUFBQSxDQUFBNmQsY0FBQTdkLEdBQUEsRUFEQUEsRUFFQUEsTUFBQUEsQ0FBQThkLFdBQUE5ZCxHQUFBLEVBRkFBLEVBR0FBLE1BQUFBLENBQUErZCxJQUFBL2QsR0FBQStkLENBQUEsQ0FIQS9kO0FBS0EsTUFzQkFnZSxVQXRCQTtBQUFBLE1BQUFDLE1BQUFBLEdBQUE7QUFDQUMsSUFBQUEsRUFBQUEsRUFBQSxJQUFBQyxLQUFBLENBQUEsUUFBQSxDQURBO0FBRUFDLElBQUFBLEdBQUFBLEVBQUEsSUFBQUQsS0FBQSxDQUFBLFNBQUEsQ0FGQTtBQUdBRSxJQUFBQSxNQUFBQSxFQUFBLElBQUFGLEtBQUEsQ0FBQSxZQUFBO0FBSEEsR0FBQTtBQUFBLE1BT0FHLFNBQUFBLEdBQUEsQ0FDQTtBQUFBamIsSUFBQUEsSUFBQUEsRUFBQSxlQUFBO0FBQUFrYixJQUFBQSxLQUFBQSxFQUFBQSxDQUFBO0FBQUEsR0FEQSxFQUVBO0FBQUFsYixJQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQWtiLElBQUFBLEtBQUFBLEVBQUFBLENBQUE7QUFBQSxHQUZBLEVBR0E7QUFBQWxiLElBQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBa2IsSUFBQUEsS0FBQUEsRUFBQUEsQ0FBQTtBQUFBLEdBSEEsRUFJQTtBQUFBbGIsSUFBQUEsSUFBQUEsRUFBQSxRQUFBO0FBQUFrYixJQUFBQSxLQUFBQSxFQUFBQSxDQUFBO0FBQUEsR0FKQSxFQUtBO0FBQUFsYixJQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQWtiLElBQUFBLEtBQUFBLEVBQUFBLENBQUE7QUFBQSxHQUxBLEVBTUE7QUFBQWxiLElBQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBa2IsSUFBQUEsS0FBQUEsRUFBQUEsQ0FBQTtBQUFBLEdBTkEsRUFPQTtBQUFBbGIsSUFBQUEsSUFBQUEsRUFBQSxhQUFBO0FBQUFrYixJQUFBQSxLQUFBQSxFQUFBQSxDQUFBO0FBQUEsR0FQQSxFQVFBO0FBQUFsYixJQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQWtiLElBQUFBLEtBQUFBLEVBQUFBLENBQUE7QUFBQSxHQVJBLEVBU0E7QUFBQWxiLElBQUFBLElBQUFBLEVBQUEsWUFBQTtBQUFBa2IsSUFBQUEsS0FBQUEsRUFBQUEsQ0FBQTtBQUFBLEdBVEEsRUFVQTtBQUFBbGIsSUFBQUEsSUFBQUEsRUFBQSxPQUFBO0FBQUFrYixJQUFBQSxLQUFBQSxFQUFBQSxDQUFBO0FBQUEsR0FWQSxFQVdBO0FBQUFsYixJQUFBQSxJQUFBQSxFQUFBLHVCQUFBO0FBQUFrYixJQUFBQSxLQUFBQSxFQUFBQSxDQUFBO0FBQUEsR0FYQSxFQVlBO0FBQUFsYixJQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQWtiLElBQUFBLEtBQUFBLEVBQUFBLENBQUE7QUFBQSxHQVpBLENBUEE7QUF3QkF2ZSxFQUFBQSxNQUFBQSxDQUFBd2UsUUFBQXhlLEdBQUEsWUFBQTtBQUNBLFdBQUFzZSxTQUFBQSxDQUFBL1csTUFBQStXLEdBQUFsZCxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBcEIsTUFBQUEsQ0FBQTRkLGFBQUE1ZCxJQUFBQSxNQUFBQSxDQUFBNmQsY0FBQTdkLEdBQUFBLE1BQUFBLENBQUE4ZCxXQUFBOWQsQ0FBQW9CLENBQUFrZCxHQUFBLEdBQUFBLEdBQUFBLFNBQUFBLENBQUEvVyxNQUFBO0FBQUFBLEdBREF2SCxFQUlBQSxNQUFBQSxDQUFBeWUsT0FBQXplLEdBQUEsWUFBQTtBQUNBLFFBQUEwZSxhQUFBQSxHQUFBMWUsTUFBQUEsQ0FBQTZkLGNBQUE3ZCxHQUFBQSxNQUFBQSxDQUFBOGQsV0FBQTtBQUNBOWQsSUFBQUEsTUFBQUEsQ0FBQTRkLGFBQUE1ZCxJQStCQTJlLGFBQUFBLENBQUFYLFVBQUFXLENBQUFBLEVBQ0EzZSxNQUFBQSxDQUFBNGUsS0FBQTVlLEdBQUEsRUFEQTJlLEVBRUEzZSxNQUFBQSxDQUFBNGQsYUFBQTVkLEdBQUEsQ0FGQTJlLEVBR0EzZSxNQUFBQSxDQUFBK2QsSUFBQS9kLEdBQUErZCxDQUFBLENBSEFZLEVBSUEzZSxNQUFBQSxDQUFBNmUsUUFBQTdlLEdBQUE7QUFBQXFELE1BQUFBLElBQUFBLEVBQUEsRUFBQTtBQUFBa2IsTUFBQUEsS0FBQUEsRUFBQUEsQ0FBQTtBQUFBLEtBbkNBdmUsS0FDQUEsTUFBQUEsQ0FBQTRkLGFBQUE1ZCxHQUFBc2UsU0FBQUEsQ0FBQS9XLE1BQUErVyxHQUFBSSxhQUFBMWUsRUFDQWdlLFVBQUFBLEdBQUFjLFdBQUFBLENBQUEsWUFBQTtBQUVBLFVBREE5ZSxNQUFBQSxDQUFBNGQsYUFBQTVkLElBQ0EsTUFBQUEsTUFBQUEsQ0FBQTRkLGFBQUEsRUFNQSxPQUxBNWQsTUFBQUEsQ0FBQTZlLFFBQUE3ZSxHQUFBO0FBQUFxRCxRQUFBQSxJQUFBQSxFQUFBLHFCQUFBO0FBQUFrYixRQUFBQSxLQUFBQSxFQUFBQSxDQUFBO0FBQUEsT0FBQXZlLEVBQ0FBLE1BQUFBLENBQUE0ZSxLQUFBNWUsR0FBQSxFQURBQSxFQUVBQSxNQUFBQSxDQUFBNGQsYUFBQTVkLEdBQUEsQ0FGQUEsRUFHQUEsTUFBQUEsQ0FBQStkLElBQUEvZCxHQUFBK2QsQ0FBQSxDQUhBL2QsRUFJQUEsTUFBQUEsQ0FBQWtILE1BQUFsSCxFQUpBQSxFQUtBMmUsYUFBQUEsQ0FBQVgsVUFBQVcsQ0FBQTtBQUVBLFVBQUFJLGVBQUFBLEdBQUEzZCxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBcEIsTUFBQUEsQ0FBQTRkLGFBQUE1ZCxHQUFBMGUsYUFBQXRkLENBQUE7QUFBQSxVQUNBd2QsS0FBQUEsR0FBQTVlLE1BQUFBLENBQUE0ZCxhQUFBNWQsR0FBQStlLGVBQUFBLEdBQUFMLGFBREE7QUFFQTFlLE1BQUFBLE1BQUFBLENBQUE0ZSxLQUFBNWUsR0FBQTRlLEtBQUFBLEdBQUE1ZSxNQUFBQSxDQUFBNmQsY0FBQWUsR0FBQUEsS0FBQUEsR0FBQTVlLE1BQUFBLENBQUE2ZCxjQUFBZSxHQUFBQSxLQUFBNWUsRUFDQTRlLEtBQUFBLEdBQUE1ZSxNQUFBQSxDQUFBNmQsY0FBQWUsR0FDQTVlLE1BQUFBLENBQUErZCxJQUFBL2QsR0FBQStkLENBQUEsQ0FEQWEsR0FHQTVlLE1BQUFBLENBQUErZCxJQUFBL2QsR0FBQStkLENBQUEsQ0FKQS9kLEVBTUFBLE1BQUFBLENBQUE2ZSxRQUFBN2UsR0FBQXNlLFNBQUFBLENBQUFBLFNBQUFBLENBQUEvVyxNQUFBK1csR0FBQVMsZUFBQVQsR0FBQSxDQUFBQSxDQU5BdGUsRUFPQTRlLEtBQUFBLEtBQUE1ZSxNQUFBQSxDQUFBNmQsY0FBQWUsR0FDQVgsTUFBQUEsQ0FBQUMsRUFBQUQsQ0FBQWUsSUFBQWYsRUFEQVcsR0FFQSxNQUFBQSxLQUFBLEdBQ0FYLE1BQUFBLENBQUFHLEdBQUFILENBQUFlLElBQUFmLEVBREEsR0FFQWplLE1BQUFBLENBQUE2ZSxRQUFBN2UsQ0FBQXVlLEtBQUF2ZSxJQUFBNGUsS0FBQUEsS0FBQXhkLElBQUFBLENBQUFDLEtBQUFELENBQUFwQixNQUFBQSxDQUFBNmQsY0FBQTdkLEdBQUEsQ0FBQW9CLENBQUFwQixJQUNBaWUsTUFBQUEsQ0FBQUksTUFBQUosQ0FBQWUsSUFBQWYsRUFaQWplLEVBY0FBLE1BQUFBLENBQUFrSCxNQUFBbEgsRUFkQUE7QUFjQWtILEtBMUJBNFgsRUEyQkEsR0EzQkFBLENBRkE5ZTtBQTZCQSxHQW5DQUE7QUFtQ0EsQ0FsRUEsQ0FEQTdDLENsQk9BQSxFbUJQQUEsT0FBQUEsQ0FBQUMsTUFBQUQsQ0FBQSxLQUFBQSxFQUNBOGhCLFNBREE5aEIsQ0FDQSxNQURBQSxFQUNBLENBQ0EsWUFEQSxFQUVBLFFBRkEsRUFHQSxVQUhBLEVBSUEsY0FKQSxFQUtBLFVBQUFpQixVQUFBLEVBQUE4Z0IsTUFBQSxFQUFBQyxRQUFBLEVBQUFDLFlBQUEsRUFBQUE7QUFFQSxNQUFBQyxRQUFBQSxHQUFBLFVBQUFDLGdCQUFBLEVBQUFBO0FBRUEsUUFBQTNNLEtBQUFBLEdBQUE7QUFDQTRNLE1BQUFBLElBQUFBLEVBQUFELGdCQURBO0FBRUFFLE1BQUFBLEdBQUFBLEVBQUE7QUFGQSxLQUFBO0FBU0EsV0FKQTdNLEtBQUFBLENBQUE0TSxJQUFBNU0sQ0FBQThNLEtBQUE5TSxDQUFBLFNBQUFBLE1BQ0FBLEtBQUFBLENBQUE2TSxHQUFBN00sR0FBQSxpQkFEQUEsR0FJQUEsS0FBQTtBQUFBQSxHQVhBOztBQTBGQSxTQUFBO0FBQ0ErTSxJQUFBQSxRQUFBQSxFQUFBLEdBREE7QUFFQUMsSUFBQUEsSUFBQUEsRUFBQSxVQUFBQyxLQUFBLEVBQUFDLElBQUEsRUFBQUE7QUFFQUQsTUFBQUEsS0FBQUEsQ0FBQUUsY0FBQUYsR0FBQSxFQUFBQTtBQUVBLFVBQUFHLElBQUFBLEdBQUEsaUdBQUE7QUFHQUEsTUFBQUEsSUFBQUEsR0FBQUEsQ0FEQUEsSUFBQUEsR0FBQUEsSUFBQUEsQ0FBQXprQixPQUFBeWtCLENBQUEsT0FBQUEsRUFBQVgsWUFBQUEsQ0FBQVksV0FBQVosRUFBQVcsQ0FDQUEsRUFBQXprQixPQUFBeWtCLENBQUEsT0FBQUEsRUFBQVgsWUFBQUEsQ0FBQWEsU0FBQWIsRUFBQVcsQ0FBQUEsRUFFQUYsSUFBQUEsQ0FBQUssTUFBQUwsQ0FBQVYsUUFBQUEsQ0FBQVksSUFBQVosQ0FBQUEsQ0FBQVMsS0FBQVQsQ0FBQVUsQ0FGQUUsRUFJQTNoQixVQUFBQSxDQUFBcUYsR0FBQXJGLENBQUEsbUJBQUFBLEVBQUEsVUFBQStVLEtBQUEsRUFBQWdOLE9BQUEsRUFBQUMsUUFBQSxFQUFBQyxTQUFBLEVBQUFDLFVBQUEsRUFBQUE7QUFFQVYsUUFBQUEsS0FBQUEsQ0FBQUUsY0FBQUYsR0ExRkEsVUFBQWhpQixLQUFBLEVBQUFBO0FBS0EsZUFIQSxJQUFBMmlCLE1BQUFBLEdBQUEsRUFHQSxFQUFBLE9BQUEzaUIsS0FBQUEsQ0FBQXlGLElBQUEsR0FBQTtBQUNBLGdCQUFBbWQsTUFBQUEsR0FBQXRCLE1BQUFBLENBQUF1QixHQUFBdkIsQ0FBQSxHQUFBQSxFQUFBdGhCLEtBQUFzaEIsQ0FBQTtBQUdBcUIsWUFBQUEsTUFBQUEsQ0FBQUMsTUFBQUEsQ0FBQW5kLElBQUFrZCxDQUFBQSxLQUNBQSxNQUFBQSxDQUFBQyxNQUFBQSxDQUFBbmQsSUFBQWtkLENBQUFBLEdBQUEsRUFEQUEsR0FLQTNpQixLQUFBQSxDQUFBMGhCLGdCQUFBMWhCLEtBQ0EyaUIsTUFBQUEsQ0FBQUMsTUFBQUEsQ0FBQW5kLElBQUFrZCxDQUFBQSxDQUFBLEVBQUFBLE1BQ0FBLE1BQUFBLENBQUFDLE1BQUFBLENBQUFuZCxJQUFBa2QsQ0FBQUEsQ0FBQSxFQUFBQSxJQUFBbEIsUUFBQUEsQ0FBQXpoQixLQUFBQSxDQUFBMGhCLGdCQUFBRCxDQURBa0IsQ0FEQTNpQixDQUxBMmlCLEVBWUEzaUIsS0FBQUEsQ0FBQThpQixLQUFBOWlCLElBQ0E4RixDQUFBQSxDQUFBekcsT0FBQXlHLENBQUE5RixLQUFBQSxDQUFBOGlCLEtBQUFoZCxFQUFBLFVBQUFpZCxJQUFBLEVBQUFoa0IsR0FBQSxFQUFBQTtBQUdBLGtCQUFBZ2tCLElBQUFBLENBQUFyQixnQkFBQSxFQUtBLE9BQUEsQ0FBQTNpQixHQUFBQSxHQUFBQSxHQUFBQSxDQUFBNGhCLEtBQUE1aEIsQ0FBQSxHQUFBQSxDQUFBLEVBQUEsQ0FBQSxLQUVBNGpCLE1BQUFBLENBQUE1akIsR0FBQUEsQ0FBQSxDQUFBQSxDQUFBNGpCLENBQUFBLEtBQ0FBLE1BQUFBLENBQUE1akIsR0FBQUEsQ0FBQSxDQUFBQSxDQUFBNGpCLENBQUFBLEdBQUEsRUFEQUEsR0FDQSxNQUlBQSxNQUFBQSxDQUFBNWpCLEdBQUFBLENBQUEsQ0FBQUEsQ0FBQTRqQixDQUFBQSxDQUFBNWpCLEdBQUFBLENBQUEsQ0FBQUEsQ0FBQTRqQixNQUNBQSxNQUFBQSxDQUFBNWpCLEdBQUFBLENBQUEsQ0FBQUEsQ0FBQTRqQixDQUFBQSxDQUFBNWpCLEdBQUFBLENBQUEsQ0FBQUEsQ0FBQTRqQixJQUFBbEIsUUFBQUEsQ0FBQXNCLElBQUFBLENBQUFyQixnQkFBQUQsQ0FEQWtCLENBSkEsQ0FIQSxJQVFBakIsTUFPQWlCLE1BQUFBLENBQUFDLE1BQUFBLENBQUFuZCxJQUFBa2QsQ0FBQUEsQ0FBQTVqQixHQUFBQSxDQUFBLENBQUFBLENBQUE0akIsSUFBQWxCLFFBQUFBLENBQUFzQixJQUFBQSxDQUFBckIsZ0JBQUFELENBUEFDLENBUkE7QUFlQUEsYUF2QkE1YixDQWJBNmMsRUEwQ0EzaUIsS0FBQUEsR0FBQTRpQixNQTFDQUQ7QUE4Q0E7O0FBQUEsY0FBQUssSUFBQUEsR0FBQSxFQUFBO0FBZ0JBLGlCQWZBbGQsQ0FBQUEsQ0FBQXpHLE9BQUF5RyxDQUFBNmMsTUFBQTdjLEVBQUEsVUFBQWdkLEtBQUEsRUFBQUE7QUFFQWhkLFlBQUFBLENBQUFBLENBQUF6RyxPQUFBeUcsQ0FBQWdkLEtBQUFoZCxFQUFBLFVBQUFpUCxLQUFBLEVBQUFBO0FBRUFqUCxjQUFBQSxDQUFBQSxDQUFBbWQsUUFBQW5kLENBQUFrZCxJQUFBbGQsRUFBQWlQLEtBQUFqUCxLQUNBa2QsSUFBQUEsQ0FBQWhrQixJQUFBZ2tCLENBQUFqTyxLQUFBaU8sQ0FEQWxkO0FBQ0FpUCxhQUhBalA7QUFHQWlQLFdBTEFqUCxHQWFBa2QsSUFBQUEsQ0FBQXhTLE9BQUF3UyxFQWJBbGQsRUFlQWtkLElBQUE7QUFtQkFFLFNBMUZBLENBMEZBWCxPQTFGQSxDQTBGQVA7QUFBQU8sT0FGQS9oQixDQUpBMmhCO0FBTUFJO0FBZkEsR0FBQTtBQWVBQSxDQWhIQSxDQURBaGpCLENuQk9BQSxFb0JQQUEsT0FBQUEsQ0FBQUMsTUFBQUQsQ0FBQSxLQUFBQSxFQUNBZ0IsT0FEQWhCLENBQ0EsUUFEQUEsRUFDQSxDQUFBLE9BQUEsRUFBQSxVQUFBNGpCLEtBQUEsRUFBQUE7QUFFQSxNQUFBQyxHQUFBQSxHQUFBemxCLElBQUE7QUFFQXlsQixFQUFBQSxHQUFBQSxDQUFBMUQsUUFBQTBELEdBQUEsWUFBQTtBQUNBLFdBQUFELEtBQUFBLENBQUFOLEdBQUFNLENBQUEsdUJBQUFBLENBQUE7QUFBQSxHQURBQyxFQUlBQSxHQUFBQSxDQUFBbEcsUUFBQWtHLEdBQUEsVUFBQTNnQixJQUFBLEVBQUFBO0FBQ0EsV0FBQTBnQixLQUFBQSxDQUFBTixHQUFBTSxDQUFBLGlCQUFBQSxDQUFBO0FBQUEsR0FMQUMsRUFRQUEsR0FBQUEsQ0FBQXhSLGFBQUF3UixHQUFBLE1yQnlnR2FELEtBQUFBLENBQU1OLEdBQU5NLENBQVUsc0JBQVZBLENxQmpoR2JDLEVBWUFBLEdBQUFBLENBQUFqSCxZQUFBaUgsR0FBQSxNckJ5Z0dhRCxLQUFBQSxDQUFNTixHQUFOTSxDQUFVLHFCQUFWQSxDcUJyaEdiQyxFQWdCQUEsR0FBQUEsQ0FBQWxGLE9BQUFrRixHQUFBLFVBQUEzRixJQUFBLEVBQUFBO0FBQ0EsV0FBQTBGLEtBQUFBLENBQUFOLEdBQUFNLENBQUEscUJBQUExRixJQUFBQSxDQUFBN2EsR0FBQXVnQixDQUFBO0FBQUF2Z0IsR0FqQkF3Z0IsRUFvQkFBLEdBQUFBLENBQUF0RSxRQUFBc0UsR0FBQSxVQUFBM2dCLElBQUEsRUFBQWdiLElBQUEsRUFBQUE7QUFDQSxXQUFBMEYsS0FBQUEsQ0FBQUUsR0FBQUYsQ0FBQSxpQkFBQUEsRUFBQTtBQUNBMWdCLE1BQUFBLElBREE7QUFFQWdiLE1BQUFBO0FBRkEsS0FBQTBGLENBQUE7QUFFQTFGLEdBdkJBMkYsRUEyQkFBLEdBQUFBLENBQUFyRSxVQUFBcUUsR0FBQSxVQUFBM2dCLElBQUEsRUFBQWdiLElBQUEsRUFBQUE7QUFDQTBGLElBQUFBLEtBQUFBLENBQUFOLEdBQUFNLENBQUEscUJBQUExRixJQUFBQSxDQUFBN2EsR0FBQSxHQUFBLFVBQUEsR0FBQUgsSUFBQUEsQ0FBQUcsR0FBQXVnQjtBQUFBdmdCLEdBNUJBd2dCLEVBK0JBQSxHQUFBQSxDQUFBbEUsVUFBQWtFLEdBQUEsVUFBQTNGLElBQUEsRUFBQUE7QUFDQSxXQUFBMEYsS0FBQUEsQ0FBQUcsTUFBQUgsQ0FBQSxxQkFBQTFGLElBQUFBLENBQUE3YSxHQUFBdWdCLENBQUE7QUFBQXZnQixHQWhDQXdnQixFQW1DQUEsR0FBQUEsQ0FBQTdELFlBQUE2RCxHQUFBLFVBQUEzRixJQUFBLEVBQUFBO0FBQ0EsV0FBQTBGLEtBQUFBLENBQUFOLEdBQUFNLENBQUEsbUJBQUExRixJQUFBQSxDQUFBN2EsR0FBQUEsU0FBQXVnQixDQUFBO0FBQUF2Z0IsR0FwQ0F3Z0IsRUF1Q0FBLEdBQUFBLENBQUF4RCxRQUFBd0QsR0FBQSxZQUFBO0FBQ0EsV0FBQUQsS0FBQUEsQ0FBQU4sR0FBQU0sQ0FBQSxpQkFBQUEsQ0FBQTtBQUFBLEdBeENBQyxFQTJDQUEsR0FBQUEsQ0FBQXJELFdBQUFxRCxHQUFBLFlBQUE7QUFDQSxXQUFBRCxLQUFBQSxDQUFBcE4sSUFBQW9OLENBQUEsaUJBQUFBLENBQUE7QUFBQSxHQTVDQUM7QUE0Q0EsQ0FoREEsQ0FEQTdqQixDcEJPQUEsRXFCUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQWdCLE9BREFoQixDQUNBLGVBREFBLEVBQ0EsQ0FBQSxPQUFBLEVBQUEsVUFBQTRqQixLQUFBLEVBQUFBO0FBRUEsTUFBQUMsR0FBQUEsR0FBQXpsQixJQUFBO0FBRUF5bEIsRUFBQUEsR0FBQUEsQ0FBQXhSLGFBQUF3UixHQUFBLFlBQUE7QUFDQSxXQUFBRCxLQUFBQSxDQUFBTixHQUFBTSxDQUFBLGlCQUFBQSxDQUFBO0FBQUEsR0FEQUMsRUFJQUEsR0FBQUEsQ0FBQUcsUUFBQUgsR0FBQSxVQUFBcFIsUUFBQSxFQUFBQTtBQUNBLFdBQUFtUixLQUFBQSxDQUFBTixHQUFBTSxDQUFBLHFCQUFBblIsUUFBQW1SLENBQUE7QUFBQW5SLEdBTEFvUixFQVFBQSxHQUFBQSxDQUFBM1EsV0FBQTJRLEdBQUEsVUFBQXBSLFFBQUEsRUFBQUE7QUFDQSxXQUFBbVIsS0FBQUEsQ0FBQXBOLElBQUFvTixDQUFBLGtCQUFBQSxFQUFBblIsUUFBQW1SLENBQUE7QUFBQW5SLEdBVEFvUixFQVlBQSxHQUFBQSxDQUFBeFEsT0FBQXdRLEdBQUEsVUFBQXBSLFFBQUEsRUFBQUMsSUFBQSxFQUFBQTtBQUNBLFdBQUFrUixLQUFBQSxDQUFBcE4sSUFBQW9OLENBQUEscUJBQUFuUixRQUFBLEdBQUEsUUFBQW1SLEVBQUFsUixJQUFBa1IsQ0FBQTtBQUFBbFIsR0FiQW1SLEVBZ0JBQSxHQUFBQSxDQUFBaFEsZUFBQWdRLEdBQUEsVUFBQTNGLElBQUEsRUFBQUE7QUFDQTJGLElBQUFBLEdBQUFBLENBQUFqTCxPQUFBaUwsR0FBQTNGLElBQUEyRixFQUNBQSxHQUFBQSxDQUFBaE4sWUFBQWdOLEdBQUEsRUFEQUE7O0FBR0EsU0FBQSxJQUFBcGIsQ0FBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUFBLEdBQUF5VixJQUFBQSxDQUFBOVQsTUFBQSxFQUFBM0IsQ0FBQUEsRUFBQSxFQUNBLEtBQUEsSUFBQStKLENBQUFBLEdBQUEvSixDQUFBQSxHQUFBLENBQUEsRUFBQStKLENBQUFBLEdBQUEwTCxJQUFBQSxDQUFBOVQsTUFBQSxFQUFBb0ksQ0FBQUEsRUFBQSxFQUFBO0FBQ0EsVUFBQXhPLE1BQUFBLEdBQUFDLElBQUFBLENBQUFxRyxLQUFBckcsQ0FBQUEsSUFBQUEsQ0FBQUQsTUFBQUMsRUFBQUEsQ0FBQTtBQUNBNGYsTUFBQUEsR0FBQUEsQ0FBQWhOLFlBQUFnTixDQUFBcGtCLElBQUFva0IsQ0FBQTtBQUNBeFosUUFBQUEsRUFBQUEsRUFBQSxDQURBO0FBRUErTSxRQUFBQSxXQUFBQSxFQUFBOEcsSUFBQUEsQ0FBQSxNQUFBbGEsTUFBQSxHQUFBeUUsQ0FBQSxHQUFBK0osQ0FBQTBMLENBQUFBLENBQUFoWSxJQUZBO0FBR0FtUixRQUFBQSxZQUFBQSxFQUFBNkcsSUFBQUEsQ0FBQSxNQUFBbGEsTUFBQSxHQUFBd08sQ0FBQSxHQUFBL0osQ0FBQXlWLENBQUFBLENBQUFoWSxJQUhBO0FBSUFpUixRQUFBQSxNQUFBQSxFQUFBO0FBSkEsT0FBQTBNO0FBU0E7O0FBQUEsU0FBQXBiLENBQUEsSUFTQSxVQUFBYSxLQUFBLEVBQUFBO0FBQ0EsVUFBQTJhLENBQUE7QUFBQSxVQUFBeGIsQ0FBQTtBQUFBLFVBQUF5YixDQUFBQSxHQUFBNWEsS0FBQUEsQ0FBQWMsTUFBQTs7QUFFQSxhQUFBOFosQ0FBQSxHQUVBemIsQ0FBQUEsR0FBQXhFLElBQUFBLENBQUFDLEtBQUFELENBQUFBLElBQUFBLENBQUFELE1BQUFDLEtBQUFpZ0IsQ0FBQUEsRUFBQWpnQixDQUFBd0UsRUFHQXdiLENBQUFBLEdBQUEzYSxLQUFBQSxDQUFBNGEsQ0FBQTVhLENBSEFiLEVBSUFhLEtBQUFBLENBQUE0YSxDQUFBNWEsQ0FBQUEsR0FBQUEsS0FBQUEsQ0FBQWIsQ0FBQWEsQ0FKQWIsRUFLQWEsS0FBQUEsQ0FBQWIsQ0FBQWEsQ0FBQUEsR0FBQTJhLENBTEF4YjtBQWZBMGIsS0FVQSxDQVZBTixHQUFBQSxDQUFBaE4sWUFVQSxHQVRBZ04sR0FBQUEsQ0FBQWhOLFlBQUEsRUFDQWdOLEdBQUFBLENBQUFoTixZQUFBZ04sQ0FBQXBiLENBQUFvYixFQUFBeFosRUFBQXdaLEdBQUFwYixDQUFBQSxHQUFBLENBQUFvYjtBQUFBLEdBakNBQSxFQXFDQUEsR0FBQUEsQ0FBQS9NLGVBQUErTSxHQUFBLFVBQUEzRixJQUFBLEVBQUFBO0FBQ0EsV0FBQTJGLEdBQUFBLENBQUFoTixZQUFBO0FBQUFBLEdBdENBZ047QUFzQ0FoTixDQTFDQSxDQURBN1csQ3JCT0FBLEVzQlBBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FnQixPQURBaEIsQ0FDQSxVQURBQSxFQUNBLENBQUEsT0FBQSxFQUFBLFVBQUE0akIsS0FBQSxFQUFBQTtBQUVBeGxCLE9BRUFvRSxJQUZBcEUsR0FFQSxVQUFBZ1IsS0FBQSxFQUFBQTtBQUVBLFdBREF6TixPQUFBQSxDQUFBQyxHQUFBRCxDQUFBeU4sS0FBQXpOLEdBQ0FpaUIsS0FBQUEsQ0FBQXBOLElBQUFvTixDQUFBLFlBQUFBLEVBQUF4VSxLQUFBd1UsQ0FBQTtBQUFBeFUsR0FKQWhSO0FBSUFnUixDQU5BLENBREFwUCxDdEJPQUEsRXVCUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQWdCLE9BREFoQixDQUNBLFNBREFBLEVBQ0EsQ0FBQSxPQUFBLEVBQUEsVUFBQTRqQixLQUFBLEVBQUFBO0FBRUF4bEIsT0FFQWdtQixTQUZBaG1CLEdBRUEsVUFBQWltQixNQUFBLEVBQUFBO0FBQ0EsV0FBQVQsS0FBQUEsQ0FBQU4sR0FBQU0sQ0FBQSx1QkFBQVMsTUFBQVQsQ0FBQTtBQUFBUyxHQUhBam1CLEVBQUFBLEtBTUFrbUIsU0FOQWxtQixHQU1BLFVBQUFpbUIsTUFBQSxFQUFBQTtBQUNBLFdBQUFULEtBQUFBLENBQUFOLEdBQUFNLENBQUEsdUJBQUFTLE1BQUFULENBQUE7QUFBQVMsR0FQQWptQjtBQU9BaW1CLENBVEEsQ0FEQXJrQixDdkJPQUEsRXdCUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQWdCLE9BREFoQixDQUNBLFNBREFBLEVBQ0EsQ0FBQSxPQUFBLEVBQUEsVUFBQTRqQixLQUFBLEVBQUFBO0FBRUF4bEIsT0FFQW1tQixZQUZBbm1CLEdBRUEsVUFBQW9tQixJQUFBLEVBQUF0aEIsSUFBQSxFQUFBQTtBQUNBLFdBQUEwZ0IsS0FBQUEsQ0FBQU4sR0FBQU0sQ0FBQSxnQkFBQVksSUFBQSxHQUFBLEdBQUEsR0FBQXRoQixJQUFBLEdBQUEsWUFBQTBnQixDQUFBO0FBQUEsR0FIQXhsQixFQUFBQSxLQU1BZ1AsWUFOQWhQLEdBTUEsVUFBQW9tQixJQUFBLEVBQUF0aEIsSUFBQSxFQUFBNEcsS0FBQSxFQUFBQTtBQUNBLFdBQUE4WixLQUFBQSxDQUFBcE4sSUFBQW9OLENBQUEsZ0JBQUFZLElBQUEsR0FBQSxHQUFBLEdBQUF0aEIsSUFBQSxHQUFBLFlBQUEwZ0IsRUFBQTtBQUNBOVosTUFBQUE7QUFEQSxLQUFBOFosQ0FBQTtBQUNBOVosR0FSQTFMO0FBUUEwTCxDQVZBLENBREE5SixDeEJPQUEsRXlCUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQWdCLE9BREFoQixDQUNBLGFBREFBLEVBQ0EsWUFBQTtBQUVBLE1BQUE2akIsR0FBQUEsR0FBQXpsQixJQUFBO0FBRUF5bEIsRUFBQUEsR0FBQUEsQ0FBQTVlLFNBQUE0ZSxHQUFBLENBQ0E7QUFDQTlULElBQUFBLElBQUFBLEVBQUEsSUFEQTtBQUVBN0osSUFBQUEsSUFBQUEsRUFBQSxTQUZBO0FBR0FnVixJQUFBQSxJQUFBQSxFQUFBO0FBSEEsR0FEQSxFQU1BO0FBQ0FuTCxJQUFBQSxJQUFBQSxFQUFBLElBREE7QUFFQTdKLElBQUFBLElBQUFBLEVBQUEsWUFGQTtBQUdBZ1YsSUFBQUEsSUFBQUEsRUFBQTtBQUhBLEdBTkEsRUFXQTtBQUNBbkwsSUFBQUEsSUFBQUEsRUFBQSxJQURBO0FBRUE3SixJQUFBQSxJQUFBQSxFQUFBLFVBRkE7QUFHQWdWLElBQUFBLElBQUFBLEVBQUE7QUFIQSxHQVhBLENBQUEySSxFQWtCQUEsR0FBQUEsQ0FBQTNVLElBQUEyVSxHQUFBLENBQ0E7QUFDQTlULElBQUFBLElBQUFBLEVBQUE7QUFEQSxHQURBLEVBSUE7QUFDQUEsSUFBQUEsSUFBQUEsRUFBQTtBQURBLEdBSkEsRUFPQTtBQUNBQSxJQUFBQSxJQUFBQSxFQUFBO0FBREEsR0FQQSxDQWxCQThULEVBOEJBQSxHQUFBQSxDQUFBM2UsZ0JBQUEyZSxHQUFBQSxHQUFBQSxDQUFBNWUsU0FBQTRlLENBQUEsQ0FBQUEsQ0E5QkFBLEVBZ0NBQSxHQUFBQSxDQUFBdmUsV0FBQXVlLEdBQUEsVUFBQXhlLFFBQUEsRUFBQUE7QUFFQSxXQURBd2UsR0FBQUEsQ0FBQTNlLGdCQUFBMmUsR0FBQXhlLFFBQUF3ZSxFQUNBeGUsUUFBQTtBQUFBQSxHQWxDQXdlLEVBcUNBQSxHQUFBQSxDQUFBMWUsV0FBQTBlLEdBQUEsWUFBQTtBQUNBLFdBQUFBLEdBQUFBLENBQUEzZSxnQkFBQTtBQUFBQSxHQXRDQTJlO0FBc0NBM2UsQ0EzQ0FsRixDekJPQUEsRTBCUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQWdCLE9BREFoQixDQUNBLFVBREFBLEVBQ0EsQ0FBQSxPQUFBLEVBQUEsVUFBQTRqQixLQUFBLEVBQUFBO0FBRUF4bEIsT0FFQXFZLEtBRkFyWSxHQUVBLFlBQUE7QUFDQSxXQUFBd2xCLEtBQUFBLENBQUFOLEdBQUFNLENBQUEsWUFBQUEsQ0FBQTtBQUFBLEdBSEF4bEIsRUFBQUEsS0FNQWtZLE1BTkFsWSxHQU1BLFVBQUFvWSxJQUFBLEVBQUFBO0FBQ0EsV0FBQW9OLEtBQUFBLENBQUFwTixJQUFBb04sQ0FBQSxZQUFBQSxFQUFBcE4sSUFBQW9OLENBQUE7QUFBQXBOLEdBUEFwWSxFQUFBQSxLQVVBdVksT0FWQXZZLEdBVUEsVUFBQW9ZLElBQUEsRUFBQUE7QUFDQSxXQUFBb04sS0FBQUEsQ0FBQU4sR0FBQU0sQ0FBQSxnQkFBQXBOLElBQUFBLENBQUFuVCxHQUFBdWdCLENBQUE7QUFBQXZnQixHQVhBakY7QUFXQWlGLENBYkEsQ0FEQXJELEMxQk9BQSxFMkJQQUEsT0FBQUEsQ0FBQUMsTUFBQUQsQ0FBQSxLQUFBQSxFQUNBZ0IsT0FEQWhCLENBQ0EsU0FEQUEsRUFDQSxDQUFBLE9BQUEsRUFBQSxVQUFBNGpCLEtBQUEsRUFBQUE7QUFFQSxNQUFBQyxHQUFBQSxHQUFBemxCLElBQUE7QUFFQXlsQixFQUFBQSxHQUFBQSxDQUFBWSxPQUFBWixHQUFBLFlBQUE7QUFDQSxXQUFBRCxLQUFBQSxDQUFBTixHQUFBTSxDQUFBLFlBQUFBLENBQUE7QUFBQSxHQURBQyxFQUlBQSxHQUFBQSxDQUFBM0QsUUFBQTJELEdBQUEsWUFBQTtBQUNBLFdBQUFELEtBQUFBLENBQUFOLEdBQUFNLENBQUEsZ0JBQUFBLENBQUE7QUFBQSxHQUxBQyxFQVFBQSxHQUFBQSxDQUFBdEQsU0FBQXNELEdBQUEsVUFBQXhaLEVBQUEsRUFBQUE7QUFDQSxXQUFBdVosS0FBQUEsQ0FBQU4sR0FBQU0sQ0FBQSxvQkFBQXZaLEVBQUF1WixDQUFBO0FBQUF2WixHQVRBd1osRUFZQUEsR0FBQUEsQ0FBQWEsUUFBQWIsR0FBQSxVQUFBYyxLQUFBLEVBQUFBO0FBRUEsV0FEQWYsS0FBQUEsQ0FBQWdCLFFBQUFoQixDQUFBaUIsT0FBQWpCLENBQUFrQixNQUFBbEIsQ0FBQSxRQUFBQSxJQUFBZSxLQUFBZixFQUNBQyxHQUFBQSxDQUFBWSxPQUFBWixFQUFBO0FBQUFZLEdBZEFaLEVBaUJBQSxHQUFBQSxDQUFBbFAsWUFBQWtQLEdBQUEsVUFBQTNnQixJQUFBLEVBQUFBO0FBQ0EsV0FBQTBnQixLQUFBQSxDQUFBcE4sSUFBQW9OLENBQUEseUJBQUFBLEVBQUE7QUFDQTFnQixNQUFBQTtBQURBLEtBQUEwZ0IsRUFFQXhkLElBRkF3ZCxDQUVBLFVBQUF2ZCxRQUFBLEVBQUFBO0FBRUEsYUFEQS9FLE1BQUFBLENBQUE4QixZQUFBOUIsQ0FBQXFqQixLQUFBcmpCLEdBQUErRSxRQUFBQSxDQUFBaEUsSUFBQWYsRUFDQXVpQixHQUFBQSxDQUFBYSxRQUFBYixDQUFBeGQsUUFBQUEsQ0FBQWhFLElBQUF3aEIsQ0FBQTtBQUFBeGhCLEtBSkF1aEIsQ0FBQTtBQUlBdmhCLEdBdEJBd2hCLEVBMEJBQSxHQUFBQSxDQUFBNWdCLEtBQUE0Z0IsR0FBQSxVQUFBM2dCLElBQUEsRUFBQUE7QUFDQSxXQUFBMGdCLEtBQUFBLENBQUFOLEdBQUFNLENBQUEsZ0JBQUExZ0IsSUFBQSxHQUFBLFFBQUEwZ0IsRUFDQXhkLElBREF3ZCxDQUNBLFVBQUF2ZCxRQUFBLEVBQUFBO0FBRUEsYUFEQS9FLE1BQUFBLENBQUE4QixZQUFBOUIsQ0FBQXFqQixLQUFBcmpCLEdBQUErRSxRQUFBQSxDQUFBaEUsSUFBQWYsRUFDQXVpQixHQUFBQSxDQUFBYSxRQUFBYixDQUFBeGQsUUFBQUEsQ0FBQWhFLElBQUF3aEIsQ0FBQTtBQUFBeGhCLEtBSEF1aEIsQ0FBQTtBQUdBdmhCLEdBOUJBd2hCLEVBa0NBQSxHQUFBQSxDQUFBL0ksVUFBQStJLEdBQUEsVUFBQTNnQixJQUFBLEVBQUFBO0FBQ0EsV0FBQTBnQixLQUFBQSxDQUFBcE4sSUFBQW9OLENBQUEsZ0JBQUExZ0IsSUFBQUEsQ0FBQUcsR0FBQXVnQixFQUFBO0FBQ0ExZ0IsTUFBQUE7QUFEQSxLQUFBMGdCLEVBRUF4ZCxJQUZBd2QsQ0FFQSxZQUFBO0FBQ0EsYUFBQUMsR0FBQUEsQ0FBQVksT0FBQVosRUFBQTtBQUFBWSxLQUhBYixDQUFBO0FBR0FhLEdBdENBWixFQTBDQUEsR0FBQUEsQ0FBQXZKLGFBQUF1SixHQUFBLFVBQUEzZ0IsSUFBQSxFQUFBcVgsUUFBQSxFQUFBQTtBQUNBLFdBQUFxSixLQUFBQSxDQUFBcE4sSUFBQW9OLENBQUEsZ0JBQUExZ0IsSUFBQSxHQUFBLGVBQUEwZ0IsRUFBQTtBQUNBckosTUFBQUE7QUFEQSxLQUFBcUosQ0FBQTtBQUNBckosR0E1Q0FzSixFQWdEQUEsR0FBQUEsQ0FBQWxKLGNBQUFrSixHQUFBLFVBQUEzZ0IsSUFBQSxFQUFBMFgsV0FBQSxFQUFBUixXQUFBLEVBQUFBO0FBQ0EsV0FBQXdKLEtBQUFBLENBQUFwTixJQUFBb04sQ0FBQSxnQkFBQTFnQixJQUFBLEdBQUEsV0FBQTBnQixFQUFBO0FBQ0FoSixNQUFBQSxXQURBO0FBRUFSLE1BQUFBO0FBRkEsS0FBQXdKLENBQUE7QUFFQXhKLEdBbkRBeUosRUF1REFBLEdBQUFBLENBQUFoSixjQUFBZ0osR0FBQSxVQUFBM2dCLElBQUEsRUFBQStXLFdBQUEsRUFBQUE7QUFDQSxXQUFBMkosS0FBQUEsQ0FBQXBOLElBQUFvTixDQUFBLGdCQUFBMWdCLElBQUEsR0FBQSxXQUFBMGdCLEVBQUE7QUFDQTNKLE1BQUFBO0FBREEsS0FBQTJKLEVBRUF4ZCxJQUZBd2QsQ0FFQSxZQUFBO0FBQ0EsYUFBQUMsR0FBQUEsQ0FBQVksT0FBQVosRUFBQTtBQUFBWSxLQUhBYixDQUFBO0FBR0FhLEdBM0RBWixFQStEQUEsR0FBQUEsQ0FBQW5kLE1BQUFtZCxHQUFBLFlBQUE7QUFDQXZpQixJQUFBQSxNQUFBQSxDQUFBOEIsWUFBQTlCLENBQUF3RixLQUFBeEYsSUFDQXNpQixLQUFBQSxDQUFBZ0IsUUFBQWhCLENBQUFpQixPQUFBakIsQ0FBQWtCLE1BQUFsQixDQUFBLFFBQUFBLElBQUEsRUFEQXRpQjtBQUNBLEdBakVBdWlCLEVBb0VBQSxHQUFBQSxDQUFBa0IsVUFBQWxCLEdBQUEsVUFBQTNKLFFBQUEsRUFBQUssUUFBQSxFQUFBQTtBQUNBLFdBQUFxSixLQUFBQSxDQUFBcE4sSUFBQW9OLENBQUEsWUFBQUEsRUFBQTtBQUNBMUosTUFBQUEsUUFEQTtBQUVBSyxNQUFBQTtBQUZBLEtBQUFxSixFQUdBeGQsSUFIQXdkLENBR0EsWUFBQTtBQUNBLGFBQUFDLEdBQUFBLENBQUE1Z0IsS0FBQTRnQixDQUFBM0osUUFBQTJKLEVBQUF0SixRQUFBc0osQ0FBQTtBQUFBdEosS0FKQXFKLENBQUE7QUFJQXJKLEdBekVBc0o7QUF5RUF0SixDQTdFQSxDQURBdmEsQzNCT0FBLEU0QlBBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsaUJBREFBLEVBQ0EsQ0FBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUE2QyxNQUFBLEVBQUFtaUIsT0FBQSxFQUFBQTtBQUVBQSxFQUFBQSxPQUFBQSxDQUFBVixTQUFBVSxDQUFBLFNBQUFBLEVBQ0E1ZSxJQURBNGUsQ0FDQSxVQUFBM2UsUUFBQSxFQUFBQTtBQUNBeEQsSUFBQUEsTUFBQUEsQ0FBQW9pQixPQUFBcGlCLEdBQUEwRCxDQUFBQSxDQUFBNGQsT0FBQTVkLENBQUFGLFFBQUFBLENBQUFoRSxJQUFBZ0UsQ0FBQTRCLEdBQUE1QixDQUFBNmUsTUFBQUEsS0FBQTtBN0I4ekdVQyxNQUFBQSxLQUFBQSxFQUFPRCxNNkI5ekdqQjtBN0IrekdVaGYsTUFBQUEsSUFBQUEsRUFBTWdmLE1BQUFBLENBQU9FLFNBQVBGLENBQWlCLENBQWpCQSxFQUFvQkEsTUFBQUEsQ0FBT3ZSLE9BQVB1UixDQUFlLEdBQWZBLENBQXBCQSxFQUF5Qy9tQixPQUF6QyttQixDQUFpRCxHQUFqREEsRUFBc0QsR0FBdERBLEVBQTJEdG1CLFVBQTNEc21CO0E2Qi96R2hCLEtBQUFBLENBQUE3ZSxDQUFBRSxDQUFBMUQ7O0FBSUEsU0FBQSxJQUFBcWlCLE1BQUEsSUFBQXJpQixNQUFBQSxDQUFBb2lCLE9BQUEsRTdCOHpHVUMsTUFBQUEsQ0FBTy9GLE9BQVArRixHQUFpQjNlLENBQUFBLENBQUU0ZCxPQUFGNWQsQ0FBVSxDQUFDMmUsTUFBQUEsQ0FBT2hmLElBQVIsRUFBUUEsR0FBU21mLGdCQUFBQSxDQUFpQkgsTUFBQUEsQ0FBT2hmLElBQXhCbWYsQ0FBakIsQ0FBVjllLENBQWpCMmU7O0E2QjN6R1Z2akIsSUFBQUEsT0FBQUEsQ0FBQUMsR0FBQUQsQ0FBQWtCLE1BQUFBLENBQUFvaUIsT0FBQXRqQjtBQUFBc2pCLEdBVEFELEdBWUFuaUIsTUFBQUEsQ0FBQXlpQixLQUFBemlCLEdBQUEsQ0FBQXFpQixNQUFBLEVBQUFJLEtBQUEsS0FBQUE7QTdCOHpHTUosSUFBQUEsTUFBQUEsQ0FBT0ksS0FBUEosR0FBZUksS0FBZko7QUFBZUksRzZCMTBHckJOOztBQWdCQSxRQUFBSyxnQkFBQUEsR0FBQW5mLElBQUFBLElBQUFLLENBQUFBLENBQUE0ZCxPQUFBNWQsQ0FBQTFELE1BQUFBLENBQUFvaUIsT0FBQXBpQixDQUFBNEIsTUFBQTVCLENBQUFxaUIsTUFBQUEsSUFBQWhmLElBQUFBLEtBQUFnZixNQUFBQSxDQUFBaGYsSUFBQXJELEVBQUFvRixHQUFBcEYsQ0FBQXFpQixNQUFBQSxJQUFBQSxNQUFBQSxDQUFBaGYsSUFBQXJELENBQUEwRCxFQUFBeEgsS0FBQXdILENBQUEsQ0FBQUEsRUFBQSxDQUFBQSxDQUFBOztBQUVBMUQsRUFBQUEsTUFBQUEsQ0FBQTBpQixRQUFBMWlCLEdBQUEsTUFBQSxHQUFBQSxNQUFBQSxDQUFBb2lCLE9BQUFwaUIsQ0FBQTRCLE1BQUE1QixDQUFBcWlCLE1BQUFBLElBQUFBLE1BQUFBLENBQUFoZixJQUFBZ2YsS0FBQUEsTUFBQUEsQ0FBQUksS0FBQXppQixFQUFBdUgsTUFBQUEsSUFBQXZILE1BQUFBLENBQUFvaUIsT0FBQXBpQixDQUFBdUgsTUFBQUEsRUFBQXZILEVBRUFBLE1BQUFBLENBQUEyaUIsY0FBQTNpQixHQUFBLE1BQUFBLE1BQUFBLENBQUFvaUIsT0FBQXBpQixDQUFBNEIsTUFBQTVCLENBQUFxaUIsTUFBQUEsSUFBQUEsTUFBQUEsQ0FBQUksS0FBQXppQixFQUFBdUgsTUFBQXZILEtBQUFBLE1BQUFBLENBQUFvaUIsT0FBQXBpQixDQUFBdUgsTUFGQXZIO0FBRUF1SCxDQXRCQSxDQURBcEssQzVCT0FBLEU2QlBBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsZ0JBREFBLEVBQ0EsQ0FBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUE2QyxNQUFBLEVBQUFtaUIsT0FBQSxFQUFBQTtBQUNBQSxFQUFBQSxPQUFBQSxDQUFBWixTQUFBWSxDQUFBLFFBQUFBLEVBQ0E1ZSxJQURBNGUsQ0FDQSxVQUFBM2UsUUFBQSxFQUFBQTtBQUNBeEQsSUFBQUEsTUFBQUEsQ0FBQTJOLE1BQUEzTixHQUFBd0QsUUFBQUEsQ0FBQWhFLElBQUFRO0FBQUFSLEdBRkEyaUI7QUFFQTNpQixDQUhBLENBREFyQyxDN0JPQUEsRThCUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxlQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBNkMsTUFBQSxFQUFBbWlCLE9BQUEsRUFBQUE7QUFDQUEsRUFBQUEsT0FBQUEsQ0FBQVosU0FBQVksQ0FBQSxPQUFBQSxFQUNBNWUsSUFEQTRlLENBQ0EsVUFBQTNlLFFBQUEsRUFBQUE7QUFDQXhELElBQUFBLE1BQUFBLENBQUEyTixNQUFBM04sR0FBQXdELFFBQUFBLENBQUFoRSxJQUFBUTtBQUFBUixHQUZBMmlCO0FBRUEzaUIsQ0FIQSxDQURBckMsQzlCT0FBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxNYXAgPSBbe1xyXG4gICAgJ2Jhc2UnOiAnQScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA0MVxcdTI0QjZcXHVGRjIxXFx1MDBDMFxcdTAwQzFcXHUwMEMyXFx1MUVBNlxcdTFFQTRcXHUxRUFBXFx1MUVBOFxcdTAwQzNcXHUwMTAwXFx1MDEwMlxcdTFFQjBcXHUxRUFFXFx1MUVCNFxcdTFFQjJcXHUwMjI2XFx1MDFFMFxcdTAwQzRcXHUwMURFXFx1MUVBMlxcdTAwQzVcXHUwMUZBXFx1MDFDRFxcdTAyMDBcXHUwMjAyXFx1MUVBMFxcdTFFQUNcXHUxRUI2XFx1MUUwMFxcdTAxMDRcXHUwMjNBXFx1MkM2Rl0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnQUEnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdUE3MzJdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0FFJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMEM2XFx1MDFGQ1xcdTAxRTJdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0FPJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHVBNzM0XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdBVScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1QTczNl0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnQVYnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdUE3MzhcXHVBNzNBXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdBWScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1QTczQ10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnQicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA0MlxcdTI0QjdcXHVGRjIyXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MDI0M1xcdTAxODJcXHUwMTgxXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdDJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDQzXFx1MjRCOFxcdUZGMjNcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDBDN1xcdTFFMDhcXHUwMTg3XFx1MDIzQlxcdUE3M0VdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0QnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNDRcXHUyNEI5XFx1RkYyNFxcdTFFMEFcXHUwMTBFXFx1MUUwQ1xcdTFFMTBcXHUxRTEyXFx1MUUwRVxcdTAxMTBcXHUwMThCXFx1MDE4QVxcdTAxODlcXHVBNzc5XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdEWicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDFGMVxcdTAxQzRdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0R6JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMUYyXFx1MDFDNV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnRScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA0NVxcdTI0QkFcXHVGRjI1XFx1MDBDOFxcdTAwQzlcXHUwMENBXFx1MUVDMFxcdTFFQkVcXHUxRUM0XFx1MUVDMlxcdTFFQkNcXHUwMTEyXFx1MUUxNFxcdTFFMTZcXHUwMTE0XFx1MDExNlxcdTAwQ0JcXHUxRUJBXFx1MDExQVxcdTAyMDRcXHUwMjA2XFx1MUVCOFxcdTFFQzZcXHUwMjI4XFx1MUUxQ1xcdTAxMThcXHUxRTE4XFx1MUUxQVxcdTAxOTBcXHUwMThFXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdGJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDQ2XFx1MjRCQlxcdUZGMjZcXHUxRTFFXFx1MDE5MVxcdUE3N0JdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0cnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNDdcXHUyNEJDXFx1RkYyN1xcdTAxRjRcXHUwMTFDXFx1MUUyMFxcdTAxMUVcXHUwMTIwXFx1MDFFNlxcdTAxMjJcXHUwMUU0XFx1MDE5M1xcdUE3QTBcXHVBNzdEXFx1QTc3RV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnSCcsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA0OFxcdTI0QkRcXHVGRjI4XFx1MDEyNFxcdTFFMjJcXHUxRTI2XFx1MDIxRVxcdTFFMjRcXHUxRTI4XFx1MUUyQVxcdTAxMjZcXHUyQzY3XFx1MkM3NVxcdUE3OERdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0knLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNDlcXHUyNEJFXFx1RkYyOVxcdTAwQ0NcXHUwMENEXFx1MDBDRVxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMzBcXHUwMENGXFx1MUUyRVxcdTFFQzhcXHUwMUNGXFx1MDIwOFxcdTAyMEFcXHUxRUNBXFx1MDEyRVxcdTFFMkNcXHUwMTk3XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdKJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDRBXFx1MjRCRlxcdUZGMkFcXHUwMTM0XFx1MDI0OF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnSycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA0QlxcdTI0QzBcXHVGRjJCXFx1MUUzMFxcdTAxRThcXHUxRTMyXFx1MDEzNlxcdTFFMzRcXHUwMTk4XFx1MkM2OVxcdUE3NDBcXHVBNzQyXFx1QTc0NFxcdUE3QTJdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0wnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNENcXHUyNEMxXFx1RkYyQ1xcdTAxM0ZcXHUwMTM5XFx1MDEzRFxcdTFFMzZcXHUxRTM4XFx1MDEzQlxcdTFFM0NcXHUxRTNBXFx1MDE0MVxcdTAyM0RcXHUyQzYyXFx1MkM2MFxcdUE3NDhcXHVBNzQ2XFx1QTc4MF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnTEonLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAxQzddL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0xqJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMUM4XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdNJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDREXFx1MjRDMlxcdUZGMkRcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUyQzZFXFx1MDE5Q10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnTicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA0RVxcdTI0QzNcXHVGRjJFXFx1MDFGOFxcdTAxNDNcXHUwMEQxXFx1MUU0NFxcdTAxNDdcXHUxRTQ2XFx1MDE0NVxcdTFFNEFcXHUxRTQ4XFx1MDIyMFxcdTAxOURcXHVBNzkwXFx1QTdBNF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnTkonLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAxQ0FdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ05qJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMUNCXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdPJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDRGXFx1MjRDNFxcdUZGMkZcXHUwMEQyXFx1MDBEM1xcdTAwRDRcXHUxRUQyXFx1MUVEMFxcdTFFRDZcXHUxRUQ0XFx1MDBENVxcdTFFNENcXHUwMjJDXFx1MUU0RVxcdTAxNENcXHUxRTUwXFx1MUU1MlxcdTAxNEVcXHUwMjJFXFx1MDIzMFxcdTAwRDZcXHUwMjJBXFx1MUVDRVxcdTAxNTBcXHUwMUQxXFx1MDIwQ1xcdTAyMEVcXHUwMUEwXFx1MUVEQ1xcdTFFREFcXHUxRUUwXFx1MUVERVxcdTFFRTJcXHUxRUNDXFx1MUVEOFxcdTAxRUFcXHUwMUVDXFx1MDBEOFxcdTAxRkVcXHUwMTg2XFx1MDE5RlxcdUE3NEFcXHVBNzRDXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdPSScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDFBMl0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnT08nLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdUE3NEVdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ09VJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMjIyXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdQJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDUwXFx1MjRDNVxcdUZGMzBcXHUxRTU0XFx1MUU1NlxcdTAxQTRcXHUyQzYzXFx1QTc1MFxcdUE3NTJcXHVBNzU0XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdRJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDUxXFx1MjRDNlxcdUZGMzFcXHVBNzU2XFx1QTc1OFxcdTAyNEFdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ1InLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNTJcXHUyNEM3XFx1RkYzMlxcdTAxNTRcXHUxRTU4XFx1MDE1OFxcdTAyMTBcXHUwMjEyXFx1MUU1QVxcdTFFNUNcXHUwMTU2XFx1MUU1RVxcdTAyNENcXHUyQzY0XFx1QTc1QVxcdUE3QTZcXHVBNzgyXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdTJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDUzXFx1MjRDOFxcdUZGMzNcXHUxRTlFXFx1MDE1QVxcdTFFNjRcXHUwMTVDXFx1MUU2MFxcdTAxNjBcXHUxRTY2XFx1MUU2MlxcdTFFNjhcXHUwMjE4XFx1MDE1RVxcdTJDN0VcXHVBN0E4XFx1QTc4NF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnVCcsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA1NFxcdTI0QzlcXHVGRjM0XFx1MUU2QVxcdTAxNjRcXHUxRTZDXFx1MDIxQVxcdTAxNjJcXHUxRTcwXFx1MUU2RVxcdTAxNjZcXHUwMUFDXFx1MDFBRVxcdTAyM0VcXHVBNzg2XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdUWicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1QTcyOF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnVScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA1NVxcdTI0Q0FcXHVGRjM1XFx1MDBEOVxcdTAwREFcXHUwMERCXFx1MDE2OFxcdTFFNzhcXHUwMTZBXFx1MUU3QVxcdTAxNkNcXHUwMERDXFx1MDFEQlxcdTAxRDdcXHUwMUQ1XFx1MDFEOVxcdTFFRTZcXHUwMTZFXFx1MDE3MFxcdTAxRDNcXHUwMjE0XFx1MDIxNlxcdTAxQUZcXHUxRUVBXFx1MUVFOFxcdTFFRUVcXHUxRUVDXFx1MUVGMFxcdTFFRTRcXHUxRTcyXFx1MDE3MlxcdTFFNzZcXHUxRTc0XFx1MDI0NF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnVicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA1NlxcdTI0Q0JcXHVGRjM2XFx1MUU3Q1xcdTFFN0VcXHUwMUIyXFx1QTc1RVxcdTAyNDVdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ1ZZJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHVBNzYwXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdXJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDU3XFx1MjRDQ1xcdUZGMzdcXHUxRTgwXFx1MUU4MlxcdTAxNzRcXHUxRTg2XFx1MUU4NFxcdTFFODhcXHUyQzcyXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdYJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDU4XFx1MjRDRFxcdUZGMzhcXHUxRThBXFx1MUU4Q10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnWScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA1OVxcdTI0Q0VcXHVGRjM5XFx1MUVGMlxcdTAwRERcXHUwMTc2XFx1MUVGOFxcdTAyMzJcXHUxRThFXFx1MDE3OFxcdTFFRjZcXHUxRUY0XFx1MDFCM1xcdTAyNEVcXHUxRUZFXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdaJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDVBXFx1MjRDRlxcdUZGM0FcXHUwMTc5XFx1MUU5MFxcdTAxN0JcXHUwMTdEXFx1MUU5MlxcdTFFOTRcXHUwMUI1XFx1MDIyNFxcdTJDN0ZcXHUyQzZCXFx1QTc2Ml0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnYScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA2MVxcdTI0RDBcXHVGRjQxXFx1MUU5QVxcdTAwRTBcXHUwMEUxXFx1MDBFMlxcdTFFQTdcXHUxRUE1XFx1MUVBQlxcdTFFQTlcXHUwMEUzXFx1MDEwMVxcdTAxMDNcXHUxRUIxXFx1MUVBRlxcdTFFQjVcXHUxRUIzXFx1MDIyN1xcdTAxRTFcXHUwMEU0XFx1MDFERlxcdTFFQTNcXHUwMEU1XFx1MDFGQlxcdTAxQ0VcXHUwMjAxXFx1MDIwM1xcdTFFQTFcXHUxRUFEXFx1MUVCN1xcdTFFMDFcXHUwMTA1XFx1MkM2NVxcdTAyNTBdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2FhJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHVBNzMzXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdhZScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDBFNlxcdTAxRkRcXHUwMUUzXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdhbycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1QTczNV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnYXUnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdUE3MzddL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2F2JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHVBNzM5XFx1QTczQl0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnYXknLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdUE3M0RdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2InLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNjJcXHUyNEQxXFx1RkY0MlxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTAxODBcXHUwMTgzXFx1MDI1M10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnYycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA2M1xcdTI0RDJcXHVGRjQzXFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAwRTdcXHUxRTA5XFx1MDE4OFxcdTAyM0NcXHVBNzNGXFx1MjE4NF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnZCcsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA2NFxcdTI0RDNcXHVGRjQ0XFx1MUUwQlxcdTAxMEZcXHUxRTBEXFx1MUUxMVxcdTFFMTNcXHUxRTBGXFx1MDExMVxcdTAxOENcXHUwMjU2XFx1MDI1N1xcdUE3N0FdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2R6JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMUYzXFx1MDFDNl0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnZScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA2NVxcdTI0RDRcXHVGRjQ1XFx1MDBFOFxcdTAwRTlcXHUwMEVBXFx1MUVDMVxcdTFFQkZcXHUxRUM1XFx1MUVDM1xcdTFFQkRcXHUwMTEzXFx1MUUxNVxcdTFFMTdcXHUwMTE1XFx1MDExN1xcdTAwRUJcXHUxRUJCXFx1MDExQlxcdTAyMDVcXHUwMjA3XFx1MUVCOVxcdTFFQzdcXHUwMjI5XFx1MUUxRFxcdTAxMTlcXHUxRTE5XFx1MUUxQlxcdTAyNDdcXHUwMjVCXFx1MDFERF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnZicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA2NlxcdTI0RDVcXHVGRjQ2XFx1MUUxRlxcdTAxOTJcXHVBNzdDXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdnJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDY3XFx1MjRENlxcdUZGNDdcXHUwMUY1XFx1MDExRFxcdTFFMjFcXHUwMTFGXFx1MDEyMVxcdTAxRTdcXHUwMTIzXFx1MDFFNVxcdTAyNjBcXHVBN0ExXFx1MUQ3OVxcdUE3N0ZdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2gnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNjhcXHUyNEQ3XFx1RkY0OFxcdTAxMjVcXHUxRTIzXFx1MUUyN1xcdTAyMUZcXHUxRTI1XFx1MUUyOVxcdTFFMkJcXHUxRTk2XFx1MDEyN1xcdTJDNjhcXHUyQzc2XFx1MDI2NV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnaHYnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAxOTVdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2knLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNjlcXHUyNEQ4XFx1RkY0OVxcdTAwRUNcXHUwMEVEXFx1MDBFRVxcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAwRUZcXHUxRTJGXFx1MUVDOVxcdTAxRDBcXHUwMjA5XFx1MDIwQlxcdTFFQ0JcXHUwMTJGXFx1MUUyRFxcdTAyNjhcXHUwMTMxXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdqJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDZBXFx1MjREOVxcdUZGNEFcXHUwMTM1XFx1MDFGMFxcdTAyNDldL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2snLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNkJcXHUyNERBXFx1RkY0QlxcdTFFMzFcXHUwMUU5XFx1MUUzM1xcdTAxMzdcXHUxRTM1XFx1MDE5OVxcdTJDNkFcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBN0EzXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdsJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDZDXFx1MjREQlxcdUZGNENcXHUwMTQwXFx1MDEzQVxcdTAxM0VcXHUxRTM3XFx1MUUzOVxcdTAxM0NcXHUxRTNEXFx1MUUzQlxcdTAxN0ZcXHUwMTQyXFx1MDE5QVxcdTAyNkJcXHUyQzYxXFx1QTc0OVxcdUE3ODFcXHVBNzQ3XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdsaicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDFDOV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnbScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA2RFxcdTI0RENcXHVGRjREXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MDI3MVxcdTAyNkZdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ24nLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNkVcXHUyNEREXFx1RkY0RVxcdTAxRjlcXHUwMTQ0XFx1MDBGMVxcdTFFNDVcXHUwMTQ4XFx1MUU0N1xcdTAxNDZcXHUxRTRCXFx1MUU0OVxcdTAxOUVcXHUwMjcyXFx1MDE0OVxcdUE3OTFcXHVBN0E1XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICduaicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDFDQ10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnbycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA2RlxcdTI0REVcXHVGRjRGXFx1MDBGMlxcdTAwRjNcXHUwMEY0XFx1MUVEM1xcdTFFRDFcXHUxRUQ3XFx1MUVENVxcdTAwRjVcXHUxRTREXFx1MDIyRFxcdTFFNEZcXHUwMTREXFx1MUU1MVxcdTFFNTNcXHUwMTRGXFx1MDIyRlxcdTAyMzFcXHUwMEY2XFx1MDIyQlxcdTFFQ0ZcXHUwMTUxXFx1MDFEMlxcdTAyMERcXHUwMjBGXFx1MDFBMVxcdTFFRERcXHUxRURCXFx1MUVFMVxcdTFFREZcXHUxRUUzXFx1MUVDRFxcdTFFRDlcXHUwMUVCXFx1MDFFRFxcdTAwRjhcXHUwMUZGXFx1MDI1NFxcdUE3NEJcXHVBNzREXFx1MDI3NV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnb2knLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAxQTNdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ291JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMjIzXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdvbycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1QTc0Rl0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAncCcsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA3MFxcdTI0REZcXHVGRjUwXFx1MUU1NVxcdTFFNTdcXHUwMUE1XFx1MUQ3RFxcdUE3NTFcXHVBNzUzXFx1QTc1NV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAncScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA3MVxcdTI0RTBcXHVGRjUxXFx1MDI0QlxcdUE3NTdcXHVBNzU5XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdyJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDcyXFx1MjRFMVxcdUZGNTJcXHUwMTU1XFx1MUU1OVxcdTAxNTlcXHUwMjExXFx1MDIxM1xcdTFFNUJcXHUxRTVEXFx1MDE1N1xcdTFFNUZcXHUwMjREXFx1MDI3RFxcdUE3NUJcXHVBN0E3XFx1QTc4M10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAncycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA3M1xcdTI0RTJcXHVGRjUzXFx1MDBERlxcdTAxNUJcXHUxRTY1XFx1MDE1RFxcdTFFNjFcXHUwMTYxXFx1MUU2N1xcdTFFNjNcXHUxRTY5XFx1MDIxOVxcdTAxNUZcXHUwMjNGXFx1QTdBOVxcdUE3ODVcXHUxRTlCXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICd0JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDc0XFx1MjRFM1xcdUZGNTRcXHUxRTZCXFx1MUU5N1xcdTAxNjVcXHUxRTZEXFx1MDIxQlxcdTAxNjNcXHUxRTcxXFx1MUU2RlxcdTAxNjdcXHUwMUFEXFx1MDI4OFxcdTJDNjZcXHVBNzg3XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICd0eicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1QTcyOV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAndScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA3NVxcdTI0RTRcXHVGRjU1XFx1MDBGOVxcdTAwRkFcXHUwMEZCXFx1MDE2OVxcdTFFNzlcXHUwMTZCXFx1MUU3QlxcdTAxNkRcXHUwMEZDXFx1MDFEQ1xcdTAxRDhcXHUwMUQ2XFx1MDFEQVxcdTFFRTdcXHUwMTZGXFx1MDE3MVxcdTAxRDRcXHUwMjE1XFx1MDIxN1xcdTAxQjBcXHUxRUVCXFx1MUVFOVxcdTFFRUZcXHUxRUVEXFx1MUVGMVxcdTFFRTVcXHUxRTczXFx1MDE3M1xcdTFFNzdcXHUxRTc1XFx1MDI4OV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAndicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA3NlxcdTI0RTVcXHVGRjU2XFx1MUU3RFxcdTFFN0ZcXHUwMjhCXFx1QTc1RlxcdTAyOENdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ3Z5JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHVBNzYxXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICd3JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDc3XFx1MjRFNlxcdUZGNTdcXHUxRTgxXFx1MUU4M1xcdTAxNzVcXHUxRTg3XFx1MUU4NVxcdTFFOThcXHUxRTg5XFx1MkM3M10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAneCcsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA3OFxcdTI0RTdcXHVGRjU4XFx1MUU4QlxcdTFFOERdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ3knLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNzlcXHUyNEU4XFx1RkY1OVxcdTFFRjNcXHUwMEZEXFx1MDE3N1xcdTFFRjlcXHUwMjMzXFx1MUU4RlxcdTAwRkZcXHUxRUY3XFx1MUU5OVxcdTFFRjVcXHUwMUI0XFx1MDI0RlxcdTFFRkZdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ3onLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwN0FcXHUyNEU5XFx1RkY1QVxcdTAxN0FcXHUxRTkxXFx1MDE3Q1xcdTAxN0VcXHUxRTkzXFx1MUU5NVxcdTAxQjZcXHUwMjI1XFx1MDI0MFxcdTJDNkNcXHVBNzYzXS9nXHJcbiAgfVxyXG5dO1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVEaWFjcml0aWNzID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGRlZmF1bHREaWFjcml0aWNzUmVtb3ZhbE1hcC5yZWR1Y2UoKHJlc3VsdCwgbGV0dGVyKSA9PiB7XHJcbiAgICByZXR1cm4gcmVzdWx0LnJlcGxhY2UobGV0dGVyLmxldHRlcnMsIGxldHRlci5iYXNlKTtcclxuICB9LCB0aGlzKTtcclxufTtcclxuXHJcbmNvbnN0IFNQRUNJQUxfQ0hBUkFDVEVSUyA9IFwiXFxcXFxcXFwvICE/QCMkJV4mKigpXys6Lnt9LDtcXFxcLSdgYOKAmeKAmFxcXCJcIjtcclxuU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVTcGVjaWFsQ2hhcmFjdGVycyA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnJlcGxhY2UobmV3IFJlZ0V4cChgWyR7U1BFQ0lBTF9DSEFSQUNURVJTfV1gLCAnZ2knKSwgJycpO1xyXG59O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVBbGxCdXRMZXR0ZXJzID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMudG9Mb3dlckNhc2UoKS5yZW1vdmVEaWFjcml0aWNzKCkucmVtb3ZlU3BlY2lhbENoYXJhY3RlcnMoKTtcclxufTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUuY29uY2VhbCA9IGZ1bmN0aW9uKGV4dHJhKSB7XHJcbiAgcmV0dXJuIHRoaXMucmVwbGFjZShuZXcgUmVnRXhwKGBbXiR7U1BFQ0lBTF9DSEFSQUNURVJTfSR7ZXh0cmF9XWAsICdnaScpLCAnKicpO1xyXG59O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5jYXBpdGFsaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnNsaWNlKDEpO1xyXG59O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVIVE1MID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMucmVwbGFjZSgnPicsICdcXHUyMjdCJykucmVwbGFjZSgnPCcsICdcXHUyMjdBJyk7XHJcbn07XHJcblxyXG5OdW1iZXIucHJvdG90eXBlLm1ha2VSZWFkYWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIsXCIpO1xyXG59O1xyXG5cclxuY29uc3Qgc29ydE9iamVjdCA9IChvYmosIGRpcmVjdGlvbikgPT4ge1xyXG4gIGxldCBhcnIgPSBbXTtcclxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcclxuICAgIGFyci5wdXNoKFtrZXksIG9ialtrZXldXSk7XHJcbiAgfVxyXG4gIGFyci5zb3J0KChhLCBiKSA9PiBkaXJlY3Rpb24gPyBhWzFdIC0gYlsxXSA6IGJbMV0gLSBhWzFdKTtcclxuICBsZXQgb2JqU29ydGVkID0ge307XHJcbiAgYXJyLmZvckVhY2goaXRlbSA9PiBvYmpTb3J0ZWRbaXRlbVswXV0gPSBpdGVtWzFdKTtcclxuICAvL2Fyci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgYS52YWx1ZS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi52YWx1ZS50b0xvd2VyQ2FzZSgpKTsgfSk7IC8vdXNlIHRoaXMgdG8gc29ydCBhcyBzdHJpbmdzXHJcbiAgcmV0dXJuIG9ialNvcnRlZDsgLy8gcmV0dXJucyBhcnJheVxyXG59OyIsInZhciBkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxNYXA9W3tiYXNlOlwiQVwiLGxldHRlcnM6L1tcXHUwMDQxXFx1MjRCNlxcdUZGMjFcXHUwMEMwXFx1MDBDMVxcdTAwQzJcXHUxRUE2XFx1MUVBNFxcdTFFQUFcXHUxRUE4XFx1MDBDM1xcdTAxMDBcXHUwMTAyXFx1MUVCMFxcdTFFQUVcXHUxRUI0XFx1MUVCMlxcdTAyMjZcXHUwMUUwXFx1MDBDNFxcdTAxREVcXHUxRUEyXFx1MDBDNVxcdTAxRkFcXHUwMUNEXFx1MDIwMFxcdTAyMDJcXHUxRUEwXFx1MUVBQ1xcdTFFQjZcXHUxRTAwXFx1MDEwNFxcdTAyM0FcXHUyQzZGXS9nfSx7YmFzZTpcIkFBXCIsbGV0dGVyczovW1xcdUE3MzJdL2d9LHtiYXNlOlwiQUVcIixsZXR0ZXJzOi9bXFx1MDBDNlxcdTAxRkNcXHUwMUUyXS9nfSx7YmFzZTpcIkFPXCIsbGV0dGVyczovW1xcdUE3MzRdL2d9LHtiYXNlOlwiQVVcIixsZXR0ZXJzOi9bXFx1QTczNl0vZ30se2Jhc2U6XCJBVlwiLGxldHRlcnM6L1tcXHVBNzM4XFx1QTczQV0vZ30se2Jhc2U6XCJBWVwiLGxldHRlcnM6L1tcXHVBNzNDXS9nfSx7YmFzZTpcIkJcIixsZXR0ZXJzOi9bXFx1MDA0MlxcdTI0QjdcXHVGRjIyXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MDI0M1xcdTAxODJcXHUwMTgxXS9nfSx7YmFzZTpcIkNcIixsZXR0ZXJzOi9bXFx1MDA0M1xcdTI0QjhcXHVGRjIzXFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAwQzdcXHUxRTA4XFx1MDE4N1xcdTAyM0JcXHVBNzNFXS9nfSx7YmFzZTpcIkRcIixsZXR0ZXJzOi9bXFx1MDA0NFxcdTI0QjlcXHVGRjI0XFx1MUUwQVxcdTAxMEVcXHUxRTBDXFx1MUUxMFxcdTFFMTJcXHUxRTBFXFx1MDExMFxcdTAxOEJcXHUwMThBXFx1MDE4OVxcdUE3NzldL2d9LHtiYXNlOlwiRFpcIixsZXR0ZXJzOi9bXFx1MDFGMVxcdTAxQzRdL2d9LHtiYXNlOlwiRHpcIixsZXR0ZXJzOi9bXFx1MDFGMlxcdTAxQzVdL2d9LHtiYXNlOlwiRVwiLGxldHRlcnM6L1tcXHUwMDQ1XFx1MjRCQVxcdUZGMjVcXHUwMEM4XFx1MDBDOVxcdTAwQ0FcXHUxRUMwXFx1MUVCRVxcdTFFQzRcXHUxRUMyXFx1MUVCQ1xcdTAxMTJcXHUxRTE0XFx1MUUxNlxcdTAxMTRcXHUwMTE2XFx1MDBDQlxcdTFFQkFcXHUwMTFBXFx1MDIwNFxcdTAyMDZcXHUxRUI4XFx1MUVDNlxcdTAyMjhcXHUxRTFDXFx1MDExOFxcdTFFMThcXHUxRTFBXFx1MDE5MFxcdTAxOEVdL2d9LHtiYXNlOlwiRlwiLGxldHRlcnM6L1tcXHUwMDQ2XFx1MjRCQlxcdUZGMjZcXHUxRTFFXFx1MDE5MVxcdUE3N0JdL2d9LHtiYXNlOlwiR1wiLGxldHRlcnM6L1tcXHUwMDQ3XFx1MjRCQ1xcdUZGMjdcXHUwMUY0XFx1MDExQ1xcdTFFMjBcXHUwMTFFXFx1MDEyMFxcdTAxRTZcXHUwMTIyXFx1MDFFNFxcdTAxOTNcXHVBN0EwXFx1QTc3RFxcdUE3N0VdL2d9LHtiYXNlOlwiSFwiLGxldHRlcnM6L1tcXHUwMDQ4XFx1MjRCRFxcdUZGMjhcXHUwMTI0XFx1MUUyMlxcdTFFMjZcXHUwMjFFXFx1MUUyNFxcdTFFMjhcXHUxRTJBXFx1MDEyNlxcdTJDNjdcXHUyQzc1XFx1QTc4RF0vZ30se2Jhc2U6XCJJXCIsbGV0dGVyczovW1xcdTAwNDlcXHUyNEJFXFx1RkYyOVxcdTAwQ0NcXHUwMENEXFx1MDBDRVxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMzBcXHUwMENGXFx1MUUyRVxcdTFFQzhcXHUwMUNGXFx1MDIwOFxcdTAyMEFcXHUxRUNBXFx1MDEyRVxcdTFFMkNcXHUwMTk3XS9nfSx7YmFzZTpcIkpcIixsZXR0ZXJzOi9bXFx1MDA0QVxcdTI0QkZcXHVGRjJBXFx1MDEzNFxcdTAyNDhdL2d9LHtiYXNlOlwiS1wiLGxldHRlcnM6L1tcXHUwMDRCXFx1MjRDMFxcdUZGMkJcXHUxRTMwXFx1MDFFOFxcdTFFMzJcXHUwMTM2XFx1MUUzNFxcdTAxOThcXHUyQzY5XFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTdBMl0vZ30se2Jhc2U6XCJMXCIsbGV0dGVyczovW1xcdTAwNENcXHUyNEMxXFx1RkYyQ1xcdTAxM0ZcXHUwMTM5XFx1MDEzRFxcdTFFMzZcXHUxRTM4XFx1MDEzQlxcdTFFM0NcXHUxRTNBXFx1MDE0MVxcdTAyM0RcXHUyQzYyXFx1MkM2MFxcdUE3NDhcXHVBNzQ2XFx1QTc4MF0vZ30se2Jhc2U6XCJMSlwiLGxldHRlcnM6L1tcXHUwMUM3XS9nfSx7YmFzZTpcIkxqXCIsbGV0dGVyczovW1xcdTAxQzhdL2d9LHtiYXNlOlwiTVwiLGxldHRlcnM6L1tcXHUwMDREXFx1MjRDMlxcdUZGMkRcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUyQzZFXFx1MDE5Q10vZ30se2Jhc2U6XCJOXCIsbGV0dGVyczovW1xcdTAwNEVcXHUyNEMzXFx1RkYyRVxcdTAxRjhcXHUwMTQzXFx1MDBEMVxcdTFFNDRcXHUwMTQ3XFx1MUU0NlxcdTAxNDVcXHUxRTRBXFx1MUU0OFxcdTAyMjBcXHUwMTlEXFx1QTc5MFxcdUE3QTRdL2d9LHtiYXNlOlwiTkpcIixsZXR0ZXJzOi9bXFx1MDFDQV0vZ30se2Jhc2U6XCJOalwiLGxldHRlcnM6L1tcXHUwMUNCXS9nfSx7YmFzZTpcIk9cIixsZXR0ZXJzOi9bXFx1MDA0RlxcdTI0QzRcXHVGRjJGXFx1MDBEMlxcdTAwRDNcXHUwMEQ0XFx1MUVEMlxcdTFFRDBcXHUxRUQ2XFx1MUVENFxcdTAwRDVcXHUxRTRDXFx1MDIyQ1xcdTFFNEVcXHUwMTRDXFx1MUU1MFxcdTFFNTJcXHUwMTRFXFx1MDIyRVxcdTAyMzBcXHUwMEQ2XFx1MDIyQVxcdTFFQ0VcXHUwMTUwXFx1MDFEMVxcdTAyMENcXHUwMjBFXFx1MDFBMFxcdTFFRENcXHUxRURBXFx1MUVFMFxcdTFFREVcXHUxRUUyXFx1MUVDQ1xcdTFFRDhcXHUwMUVBXFx1MDFFQ1xcdTAwRDhcXHUwMUZFXFx1MDE4NlxcdTAxOUZcXHVBNzRBXFx1QTc0Q10vZ30se2Jhc2U6XCJPSVwiLGxldHRlcnM6L1tcXHUwMUEyXS9nfSx7YmFzZTpcIk9PXCIsbGV0dGVyczovW1xcdUE3NEVdL2d9LHtiYXNlOlwiT1VcIixsZXR0ZXJzOi9bXFx1MDIyMl0vZ30se2Jhc2U6XCJQXCIsbGV0dGVyczovW1xcdTAwNTBcXHUyNEM1XFx1RkYzMFxcdTFFNTRcXHUxRTU2XFx1MDFBNFxcdTJDNjNcXHVBNzUwXFx1QTc1MlxcdUE3NTRdL2d9LHtiYXNlOlwiUVwiLGxldHRlcnM6L1tcXHUwMDUxXFx1MjRDNlxcdUZGMzFcXHVBNzU2XFx1QTc1OFxcdTAyNEFdL2d9LHtiYXNlOlwiUlwiLGxldHRlcnM6L1tcXHUwMDUyXFx1MjRDN1xcdUZGMzJcXHUwMTU0XFx1MUU1OFxcdTAxNThcXHUwMjEwXFx1MDIxMlxcdTFFNUFcXHUxRTVDXFx1MDE1NlxcdTFFNUVcXHUwMjRDXFx1MkM2NFxcdUE3NUFcXHVBN0E2XFx1QTc4Ml0vZ30se2Jhc2U6XCJTXCIsbGV0dGVyczovW1xcdTAwNTNcXHUyNEM4XFx1RkYzM1xcdTFFOUVcXHUwMTVBXFx1MUU2NFxcdTAxNUNcXHUxRTYwXFx1MDE2MFxcdTFFNjZcXHUxRTYyXFx1MUU2OFxcdTAyMThcXHUwMTVFXFx1MkM3RVxcdUE3QThcXHVBNzg0XS9nfSx7YmFzZTpcIlRcIixsZXR0ZXJzOi9bXFx1MDA1NFxcdTI0QzlcXHVGRjM0XFx1MUU2QVxcdTAxNjRcXHUxRTZDXFx1MDIxQVxcdTAxNjJcXHUxRTcwXFx1MUU2RVxcdTAxNjZcXHUwMUFDXFx1MDFBRVxcdTAyM0VcXHVBNzg2XS9nfSx7YmFzZTpcIlRaXCIsbGV0dGVyczovW1xcdUE3MjhdL2d9LHtiYXNlOlwiVVwiLGxldHRlcnM6L1tcXHUwMDU1XFx1MjRDQVxcdUZGMzVcXHUwMEQ5XFx1MDBEQVxcdTAwREJcXHUwMTY4XFx1MUU3OFxcdTAxNkFcXHUxRTdBXFx1MDE2Q1xcdTAwRENcXHUwMURCXFx1MDFEN1xcdTAxRDVcXHUwMUQ5XFx1MUVFNlxcdTAxNkVcXHUwMTcwXFx1MDFEM1xcdTAyMTRcXHUwMjE2XFx1MDFBRlxcdTFFRUFcXHUxRUU4XFx1MUVFRVxcdTFFRUNcXHUxRUYwXFx1MUVFNFxcdTFFNzJcXHUwMTcyXFx1MUU3NlxcdTFFNzRcXHUwMjQ0XS9nfSx7YmFzZTpcIlZcIixsZXR0ZXJzOi9bXFx1MDA1NlxcdTI0Q0JcXHVGRjM2XFx1MUU3Q1xcdTFFN0VcXHUwMUIyXFx1QTc1RVxcdTAyNDVdL2d9LHtiYXNlOlwiVllcIixsZXR0ZXJzOi9bXFx1QTc2MF0vZ30se2Jhc2U6XCJXXCIsbGV0dGVyczovW1xcdTAwNTdcXHUyNENDXFx1RkYzN1xcdTFFODBcXHUxRTgyXFx1MDE3NFxcdTFFODZcXHUxRTg0XFx1MUU4OFxcdTJDNzJdL2d9LHtiYXNlOlwiWFwiLGxldHRlcnM6L1tcXHUwMDU4XFx1MjRDRFxcdUZGMzhcXHUxRThBXFx1MUU4Q10vZ30se2Jhc2U6XCJZXCIsbGV0dGVyczovW1xcdTAwNTlcXHUyNENFXFx1RkYzOVxcdTFFRjJcXHUwMEREXFx1MDE3NlxcdTFFRjhcXHUwMjMyXFx1MUU4RVxcdTAxNzhcXHUxRUY2XFx1MUVGNFxcdTAxQjNcXHUwMjRFXFx1MUVGRV0vZ30se2Jhc2U6XCJaXCIsbGV0dGVyczovW1xcdTAwNUFcXHUyNENGXFx1RkYzQVxcdTAxNzlcXHUxRTkwXFx1MDE3QlxcdTAxN0RcXHUxRTkyXFx1MUU5NFxcdTAxQjVcXHUwMjI0XFx1MkM3RlxcdTJDNkJcXHVBNzYyXS9nfSx7YmFzZTpcImFcIixsZXR0ZXJzOi9bXFx1MDA2MVxcdTI0RDBcXHVGRjQxXFx1MUU5QVxcdTAwRTBcXHUwMEUxXFx1MDBFMlxcdTFFQTdcXHUxRUE1XFx1MUVBQlxcdTFFQTlcXHUwMEUzXFx1MDEwMVxcdTAxMDNcXHUxRUIxXFx1MUVBRlxcdTFFQjVcXHUxRUIzXFx1MDIyN1xcdTAxRTFcXHUwMEU0XFx1MDFERlxcdTFFQTNcXHUwMEU1XFx1MDFGQlxcdTAxQ0VcXHUwMjAxXFx1MDIwM1xcdTFFQTFcXHUxRUFEXFx1MUVCN1xcdTFFMDFcXHUwMTA1XFx1MkM2NVxcdTAyNTBdL2d9LHtiYXNlOlwiYWFcIixsZXR0ZXJzOi9bXFx1QTczM10vZ30se2Jhc2U6XCJhZVwiLGxldHRlcnM6L1tcXHUwMEU2XFx1MDFGRFxcdTAxRTNdL2d9LHtiYXNlOlwiYW9cIixsZXR0ZXJzOi9bXFx1QTczNV0vZ30se2Jhc2U6XCJhdVwiLGxldHRlcnM6L1tcXHVBNzM3XS9nfSx7YmFzZTpcImF2XCIsbGV0dGVyczovW1xcdUE3MzlcXHVBNzNCXS9nfSx7YmFzZTpcImF5XCIsbGV0dGVyczovW1xcdUE3M0RdL2d9LHtiYXNlOlwiYlwiLGxldHRlcnM6L1tcXHUwMDYyXFx1MjREMVxcdUZGNDJcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUwMTgwXFx1MDE4M1xcdTAyNTNdL2d9LHtiYXNlOlwiY1wiLGxldHRlcnM6L1tcXHUwMDYzXFx1MjREMlxcdUZGNDNcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDBFN1xcdTFFMDlcXHUwMTg4XFx1MDIzQ1xcdUE3M0ZcXHUyMTg0XS9nfSx7YmFzZTpcImRcIixsZXR0ZXJzOi9bXFx1MDA2NFxcdTI0RDNcXHVGRjQ0XFx1MUUwQlxcdTAxMEZcXHUxRTBEXFx1MUUxMVxcdTFFMTNcXHUxRTBGXFx1MDExMVxcdTAxOENcXHUwMjU2XFx1MDI1N1xcdUE3N0FdL2d9LHtiYXNlOlwiZHpcIixsZXR0ZXJzOi9bXFx1MDFGM1xcdTAxQzZdL2d9LHtiYXNlOlwiZVwiLGxldHRlcnM6L1tcXHUwMDY1XFx1MjRENFxcdUZGNDVcXHUwMEU4XFx1MDBFOVxcdTAwRUFcXHUxRUMxXFx1MUVCRlxcdTFFQzVcXHUxRUMzXFx1MUVCRFxcdTAxMTNcXHUxRTE1XFx1MUUxN1xcdTAxMTVcXHUwMTE3XFx1MDBFQlxcdTFFQkJcXHUwMTFCXFx1MDIwNVxcdTAyMDdcXHUxRUI5XFx1MUVDN1xcdTAyMjlcXHUxRTFEXFx1MDExOVxcdTFFMTlcXHUxRTFCXFx1MDI0N1xcdTAyNUJcXHUwMUREXS9nfSx7YmFzZTpcImZcIixsZXR0ZXJzOi9bXFx1MDA2NlxcdTI0RDVcXHVGRjQ2XFx1MUUxRlxcdTAxOTJcXHVBNzdDXS9nfSx7YmFzZTpcImdcIixsZXR0ZXJzOi9bXFx1MDA2N1xcdTI0RDZcXHVGRjQ3XFx1MDFGNVxcdTAxMURcXHUxRTIxXFx1MDExRlxcdTAxMjFcXHUwMUU3XFx1MDEyM1xcdTAxRTVcXHUwMjYwXFx1QTdBMVxcdTFENzlcXHVBNzdGXS9nfSx7YmFzZTpcImhcIixsZXR0ZXJzOi9bXFx1MDA2OFxcdTI0RDdcXHVGRjQ4XFx1MDEyNVxcdTFFMjNcXHUxRTI3XFx1MDIxRlxcdTFFMjVcXHUxRTI5XFx1MUUyQlxcdTFFOTZcXHUwMTI3XFx1MkM2OFxcdTJDNzZcXHUwMjY1XS9nfSx7YmFzZTpcImh2XCIsbGV0dGVyczovW1xcdTAxOTVdL2d9LHtiYXNlOlwiaVwiLGxldHRlcnM6L1tcXHUwMDY5XFx1MjREOFxcdUZGNDlcXHUwMEVDXFx1MDBFRFxcdTAwRUVcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMEVGXFx1MUUyRlxcdTFFQzlcXHUwMUQwXFx1MDIwOVxcdTAyMEJcXHUxRUNCXFx1MDEyRlxcdTFFMkRcXHUwMjY4XFx1MDEzMV0vZ30se2Jhc2U6XCJqXCIsbGV0dGVyczovW1xcdTAwNkFcXHUyNEQ5XFx1RkY0QVxcdTAxMzVcXHUwMUYwXFx1MDI0OV0vZ30se2Jhc2U6XCJrXCIsbGV0dGVyczovW1xcdTAwNkJcXHUyNERBXFx1RkY0QlxcdTFFMzFcXHUwMUU5XFx1MUUzM1xcdTAxMzdcXHUxRTM1XFx1MDE5OVxcdTJDNkFcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBN0EzXS9nfSx7YmFzZTpcImxcIixsZXR0ZXJzOi9bXFx1MDA2Q1xcdTI0REJcXHVGRjRDXFx1MDE0MFxcdTAxM0FcXHUwMTNFXFx1MUUzN1xcdTFFMzlcXHUwMTNDXFx1MUUzRFxcdTFFM0JcXHUwMTdGXFx1MDE0MlxcdTAxOUFcXHUwMjZCXFx1MkM2MVxcdUE3NDlcXHVBNzgxXFx1QTc0N10vZ30se2Jhc2U6XCJsalwiLGxldHRlcnM6L1tcXHUwMUM5XS9nfSx7YmFzZTpcIm1cIixsZXR0ZXJzOi9bXFx1MDA2RFxcdTI0RENcXHVGRjREXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MDI3MVxcdTAyNkZdL2d9LHtiYXNlOlwiblwiLGxldHRlcnM6L1tcXHUwMDZFXFx1MjRERFxcdUZGNEVcXHUwMUY5XFx1MDE0NFxcdTAwRjFcXHUxRTQ1XFx1MDE0OFxcdTFFNDdcXHUwMTQ2XFx1MUU0QlxcdTFFNDlcXHUwMTlFXFx1MDI3MlxcdTAxNDlcXHVBNzkxXFx1QTdBNV0vZ30se2Jhc2U6XCJualwiLGxldHRlcnM6L1tcXHUwMUNDXS9nfSx7YmFzZTpcIm9cIixsZXR0ZXJzOi9bXFx1MDA2RlxcdTI0REVcXHVGRjRGXFx1MDBGMlxcdTAwRjNcXHUwMEY0XFx1MUVEM1xcdTFFRDFcXHUxRUQ3XFx1MUVENVxcdTAwRjVcXHUxRTREXFx1MDIyRFxcdTFFNEZcXHUwMTREXFx1MUU1MVxcdTFFNTNcXHUwMTRGXFx1MDIyRlxcdTAyMzFcXHUwMEY2XFx1MDIyQlxcdTFFQ0ZcXHUwMTUxXFx1MDFEMlxcdTAyMERcXHUwMjBGXFx1MDFBMVxcdTFFRERcXHUxRURCXFx1MUVFMVxcdTFFREZcXHUxRUUzXFx1MUVDRFxcdTFFRDlcXHUwMUVCXFx1MDFFRFxcdTAwRjhcXHUwMUZGXFx1MDI1NFxcdUE3NEJcXHVBNzREXFx1MDI3NV0vZ30se2Jhc2U6XCJvaVwiLGxldHRlcnM6L1tcXHUwMUEzXS9nfSx7YmFzZTpcIm91XCIsbGV0dGVyczovW1xcdTAyMjNdL2d9LHtiYXNlOlwib29cIixsZXR0ZXJzOi9bXFx1QTc0Rl0vZ30se2Jhc2U6XCJwXCIsbGV0dGVyczovW1xcdTAwNzBcXHUyNERGXFx1RkY1MFxcdTFFNTVcXHUxRTU3XFx1MDFBNVxcdTFEN0RcXHVBNzUxXFx1QTc1M1xcdUE3NTVdL2d9LHtiYXNlOlwicVwiLGxldHRlcnM6L1tcXHUwMDcxXFx1MjRFMFxcdUZGNTFcXHUwMjRCXFx1QTc1N1xcdUE3NTldL2d9LHtiYXNlOlwiclwiLGxldHRlcnM6L1tcXHUwMDcyXFx1MjRFMVxcdUZGNTJcXHUwMTU1XFx1MUU1OVxcdTAxNTlcXHUwMjExXFx1MDIxM1xcdTFFNUJcXHUxRTVEXFx1MDE1N1xcdTFFNUZcXHUwMjREXFx1MDI3RFxcdUE3NUJcXHVBN0E3XFx1QTc4M10vZ30se2Jhc2U6XCJzXCIsbGV0dGVyczovW1xcdTAwNzNcXHUyNEUyXFx1RkY1M1xcdTAwREZcXHUwMTVCXFx1MUU2NVxcdTAxNURcXHUxRTYxXFx1MDE2MVxcdTFFNjdcXHUxRTYzXFx1MUU2OVxcdTAyMTlcXHUwMTVGXFx1MDIzRlxcdUE3QTlcXHVBNzg1XFx1MUU5Ql0vZ30se2Jhc2U6XCJ0XCIsbGV0dGVyczovW1xcdTAwNzRcXHUyNEUzXFx1RkY1NFxcdTFFNkJcXHUxRTk3XFx1MDE2NVxcdTFFNkRcXHUwMjFCXFx1MDE2M1xcdTFFNzFcXHUxRTZGXFx1MDE2N1xcdTAxQURcXHUwMjg4XFx1MkM2NlxcdUE3ODddL2d9LHtiYXNlOlwidHpcIixsZXR0ZXJzOi9bXFx1QTcyOV0vZ30se2Jhc2U6XCJ1XCIsbGV0dGVyczovW1xcdTAwNzVcXHUyNEU0XFx1RkY1NVxcdTAwRjlcXHUwMEZBXFx1MDBGQlxcdTAxNjlcXHUxRTc5XFx1MDE2QlxcdTFFN0JcXHUwMTZEXFx1MDBGQ1xcdTAxRENcXHUwMUQ4XFx1MDFENlxcdTAxREFcXHUxRUU3XFx1MDE2RlxcdTAxNzFcXHUwMUQ0XFx1MDIxNVxcdTAyMTdcXHUwMUIwXFx1MUVFQlxcdTFFRTlcXHUxRUVGXFx1MUVFRFxcdTFFRjFcXHUxRUU1XFx1MUU3M1xcdTAxNzNcXHUxRTc3XFx1MUU3NVxcdTAyODldL2d9LHtiYXNlOlwidlwiLGxldHRlcnM6L1tcXHUwMDc2XFx1MjRFNVxcdUZGNTZcXHUxRTdEXFx1MUU3RlxcdTAyOEJcXHVBNzVGXFx1MDI4Q10vZ30se2Jhc2U6XCJ2eVwiLGxldHRlcnM6L1tcXHVBNzYxXS9nfSx7YmFzZTpcIndcIixsZXR0ZXJzOi9bXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzNdL2d9LHtiYXNlOlwieFwiLGxldHRlcnM6L1tcXHUwMDc4XFx1MjRFN1xcdUZGNThcXHUxRThCXFx1MUU4RF0vZ30se2Jhc2U6XCJ5XCIsbGV0dGVyczovW1xcdTAwNzlcXHUyNEU4XFx1RkY1OVxcdTFFRjNcXHUwMEZEXFx1MDE3N1xcdTFFRjlcXHUwMjMzXFx1MUU4RlxcdTAwRkZcXHUxRUY3XFx1MUU5OVxcdTFFRjVcXHUwMUI0XFx1MDI0RlxcdTFFRkZdL2d9LHtiYXNlOlwielwiLGxldHRlcnM6L1tcXHUwMDdBXFx1MjRFOVxcdUZGNUFcXHUwMTdBXFx1MUU5MVxcdTAxN0NcXHUwMTdFXFx1MUU5M1xcdTFFOTVcXHUwMUI2XFx1MDIyNVxcdTAyNDBcXHUyQzZDXFx1QTc2M10vZ31dO1N0cmluZy5wcm90b3R5cGUucmVtb3ZlRGlhY3JpdGljcz1mdW5jdGlvbigpe3JldHVybiBkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxNYXAucmVkdWNlKChyZXN1bHQsbGV0dGVyKT0+cmVzdWx0LnJlcGxhY2UobGV0dGVyLmxldHRlcnMsbGV0dGVyLmJhc2UpLHRoaXMpfTtjb25zdCBTUEVDSUFMX0NIQVJBQ1RFUlM9XCJcXFxcXFxcXC8gIT9AIyQlXiYqKClfKzoue30sO1xcXFwtJ2Bg4oCZ4oCYXFxcIlwiO1N0cmluZy5wcm90b3R5cGUucmVtb3ZlU3BlY2lhbENoYXJhY3RlcnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXBsYWNlKG5ldyBSZWdFeHAoYFske1NQRUNJQUxfQ0hBUkFDVEVSU31dYCxcImdpXCIpLFwiXCIpfSxTdHJpbmcucHJvdG90eXBlLnJlbW92ZUFsbEJ1dExldHRlcnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b0xvd2VyQ2FzZSgpLnJlbW92ZURpYWNyaXRpY3MoKS5yZW1vdmVTcGVjaWFsQ2hhcmFjdGVycygpfSxTdHJpbmcucHJvdG90eXBlLmNvbmNlYWw9ZnVuY3Rpb24oZXh0cmEpe3JldHVybiB0aGlzLnJlcGxhY2UobmV3IFJlZ0V4cChgW14ke1NQRUNJQUxfQ0hBUkFDVEVSU30ke2V4dHJhfV1gLFwiZ2lcIiksXCIqXCIpfSxTdHJpbmcucHJvdG90eXBlLmNhcGl0YWxpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0aGlzLnNsaWNlKDEpfSxTdHJpbmcucHJvdG90eXBlLnJlbW92ZUhUTUw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXBsYWNlKFwiPlwiLFwi4om7XCIpLnJlcGxhY2UoXCI8XCIsXCLiibpcIil9LE51bWJlci5wcm90b3R5cGUubWFrZVJlYWRhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLFwiLFwiKX07Y29uc3Qgc29ydE9iamVjdD0ob2JqLGRpcmVjdGlvbik9PntsZXQgYXJyPVtdO2Zvcihjb25zdCBrZXkgaW4gb2JqKWFyci5wdXNoKFtrZXksb2JqW2tleV1dKTthcnIuc29ydCgoYSxiKT0+ZGlyZWN0aW9uP2FbMV0tYlsxXTpiWzFdLWFbMV0pO2xldCBvYmpTb3J0ZWQ9e307cmV0dXJuIGFyci5mb3JFYWNoKGl0ZW09Pm9ialNvcnRlZFtpdGVtWzBdXT1pdGVtWzFdKSxvYmpTb3J0ZWR9O2FuZ3VsYXIubW9kdWxlKFwiYXBwXCIsW1widWkucm91dGVyXCIsXCJ1aS5ib290c3RyYXBcIixcIm5nQW5pbWF0ZVwiLFwibmdTYW5pdGl6ZVwiLFwibmdEcmFnRHJvcFwiLFwibmdUYWdzSW5wdXRcIixcInZjUmVjYXB0Y2hhXCIsXCJjaGFydC5qc1wiLFwidGMuY2hhcnRqc1wiXSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29uZmlnKFtcIiRzdGF0ZVByb3ZpZGVyXCIsXCIkdXJsUm91dGVyUHJvdmlkZXJcIixcIiR1cmxTZXJ2aWNlUHJvdmlkZXJcIixcIiRsb2NhdGlvblByb3ZpZGVyXCIsZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsJHVybFJvdXRlclByb3ZpZGVyLCR1cmxTZXJ2aWNlUHJvdmlkZXIsJGxvY2F0aW9uUHJvdmlkZXIpeyR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoXCIvaG9tZVwiKSwkdXJsU2VydmljZVByb3ZpZGVyLmNvbmZpZy5zdHJpY3RNb2RlKCExKSwkc3RhdGVQcm92aWRlci5zdGF0ZShcImhvbWVcIix7dXJsOlwiL2hvbWVcIix0ZW1wbGF0ZVVybDpcIi9ob21lLmh0bWxcIn0pLnN0YXRlKFwicG9saWN5XCIse3VybDpcIi9wb2xpY3lcIix0ZW1wbGF0ZVVybDpcIi9wb2xpY3kuaHRtbFwifSkuc3RhdGUoXCJwcmludFwiLHt1cmw6XCIvcHJpbnRcIix0ZW1wbGF0ZVVybDpcIi9wcmludC5odG1sXCJ9KS5zdGF0ZShcImV4cGVyaWVuY2VcIix7dXJsOlwiL2V4cGVyaWVuY2VcIixjb250cm9sbGVyOlwiRXhwZXJpZW5jZUN0cmxcIix0ZW1wbGF0ZVVybDpcIi9leHBlcmllbmNlLmh0bWxcIn0pLnN0YXRlKFwic2tpbGxzXCIse3VybDpcIi9za2lsbHNcIixjb250cm9sbGVyOlwiU2tpbGxzQ3RybFwiLHRlbXBsYXRlVXJsOlwiL3NraWxscy5odG1sXCJ9KS5zdGF0ZShcImhvYmJpZXNcIix7dXJsOlwiL2hvYmJpZXNcIixjb250cm9sbGVyOlwiSG9iYmllc0N0cmxcIix0ZW1wbGF0ZVVybDpcIi9ob2JiaWVzLmh0bWxcIn0pLnN0YXRlKFwiY29udGFjdFwiLHt1cmw6XCIvY29udGFjdFwiLGNvbnRyb2xsZXI6XCJDb250YWN0Q3RybFwiLHRlbXBsYXRlVXJsOlwiL2NvbnRhY3QuaHRtbFwifSkuc3RhdGUoXCJ3b3Jrb3V0XCIse3VybDpcIi93b3Jrb3V0XCIsY29udHJvbGxlcjpcIldvcmtvdXRDdHJsXCIsdGVtcGxhdGVVcmw6XCIvd29ya291dC5odG1sXCJ9KS5zdGF0ZShcInBvc3RzXCIse3VybDpcIi9wb3N0c1wiLGNvbnRyb2xsZXI6XCJQb3N0c0N0cmxcIix0ZW1wbGF0ZVVybDpcIi9wb3N0cy5odG1sXCJ9KS5zdGF0ZShcInByb2ZpbGVcIix7dXJsOlwiL3Byb2ZpbGVcIixjb250cm9sbGVyOlwiUHJvZmlsZUN0cmxcIix0ZW1wbGF0ZVVybDpcIi9wcm9maWxlLmh0bWxcIn0pLnN0YXRlKFwibGlzdHNcIix7dXJsOlwiL2xpc3RzXCIsY29udHJvbGxlcjpcIkxpc3RzQ3RybFwiLHRlbXBsYXRlVXJsOlwibGlzdHMuaHRtbFwifSkuc3RhdGUoXCJwcmlvcml0aXplXCIse3VybDpcIi9wcmlvcml0aXplXCIsY29udHJvbGxlcjpcIlByaW9yaXRpemVDdHJsXCIsdGVtcGxhdGVVcmw6XCJwcmlvcml0aXplLmh0bWxcIn0pLnN0YXRlKFwiYnViYmxlc1wiLHt1cmw6XCIvYnViYmxlc1wiLGNvbnRyb2xsZXI6XCJCdWJibGVzQ3RybFwiLHRlbXBsYXRlVXJsOlwiYnViYmxlcy5odG1sXCJ9KS5zdGF0ZShcImFzdGVyb2lkc1wiLHt1cmw6XCIvYXN0ZXJvaWRzXCIsY29udHJvbGxlcjpcIkFzdGVyb2lkc0N0cmxcIix0ZW1wbGF0ZVVybDpcImFzdGVyb2lkcy5odG1sXCJ9KS5zdGF0ZShcImxlbW1pbmdzXCIse3VybDpcIi9sZW1taW5nc1wiLGNvbnRyb2xsZXI6XCJMZW1taW5nc0N0cmxcIix0ZW1wbGF0ZVVybDpcImxlbW1pbmdzLmh0bWxcIn0pLnN0YXRlKFwiYm90c1wiLHt1cmw6XCIvYm90c1wiLGNvbnRyb2xsZXI6XCJUZW5UaGluZ3NDdHJsXCIsdGVtcGxhdGVVcmw6XCJ0ZW50aGluZ3MuaHRtbFwifSkuc3RhdGUoXCJ0ZW50aGluZ3NcIix7dXJsOlwiL3RlbnRoaW5nc1wiLGNvbnRyb2xsZXI6XCJUZW5UaGluZ3NDdHJsXCIsdGVtcGxhdGVVcmw6XCJ0ZW50aGluZ3MuaHRtbFwifSkuc3RhdGUoXCJ0ZW50aGluZ3MtYWRtaW5cIix7dXJsOlwiL3RlbnRoaW5ncy1hZG1pblwiLGNvbnRyb2xsZXI6XCJUZW5UaGluZ3NBZG1pbkN0cmxcIix0ZW1wbGF0ZVVybDpcInRlbnRoaW5ncy1hZG1pbi5odG1sXCJ9KS5zdGF0ZShcInF1aXotZ29vZ2xlXCIse3VybDpcIi9nb29nbGVcIixjb250cm9sbGVyOlwiUXVpekdvb2dsZUN0cmxcIix0ZW1wbGF0ZVVybDpcInF1aXp6ZXMvZ29vZ2xlLmh0bWxcIn0pLnN0YXRlKFwicXVpei1sb2dvc1wiLHt1cmw6XCIvbG9nb3NcIixjb250cm9sbGVyOlwiUXVpekxvZ29zQ3RybFwiLHRlbXBsYXRlVXJsOlwicXVpenplcy9sb2dvcy5odG1sXCJ9KS5zdGF0ZShcInF1aXotYW5pbWFsc1wiLHt1cmw6XCIvYW5pbWFsc1wiLGNvbnRyb2xsZXI6XCJRdWl6QW5pbWFsc0N0cmxcIix0ZW1wbGF0ZVVybDpcInF1aXp6ZXMvYW5pbWFscy5odG1sXCJ9KSwkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUoe2VuYWJsZWQ6ITAscmVxdWlyZUJhc2U6ITF9KX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiV2ViU29ja2V0U3ZjXCIsW1wiJHJvb3RTY29wZVwiLFwiJHRpbWVvdXRcIixmdW5jdGlvbigkcm9vdFNjb3BlLCR0aW1lb3V0KXt2YXIgY29ubmVjdGlvbixjb25uZWN0PWZ1bmN0aW9uKCl7KGNvbm5lY3Rpb249bmV3IFdlYlNvY2tldChcImh0dHBzOlwiPT09d2luZG93LmxvY2F0aW9uLnByb3RvY29sP1wid3NzOi8vXCIrd2luZG93LmxvY2F0aW9uLmhvc3Q6XCJ3czovL1wiK3dpbmRvdy5sb2NhdGlvbi5ob3N0KSkub25vcGVuPWZ1bmN0aW9uKCl7Y29uc29sZS5sb2coXCJXZWJzb2NrZXQgY29ubmVjdGVkXCIpfSxjb25uZWN0aW9uLm9uY2xvc2U9ZnVuY3Rpb24oZSl7Y29uc29sZS5sb2coXCJXZWJzb2NrZXQgY2xvc2VkLiBSZWNvbm5lY3RpbmcuLi5cIiksJHRpbWVvdXQoY29ubmVjdCwxZTMpfSxjb25uZWN0aW9uLm9uZXJyb3I9ZnVuY3Rpb24oZSl7Y29uc29sZS5sb2coXCJFcnJvcjogXCIrZStcIiAtIFN0YXRlOiBcIitjb25uZWN0aW9uLnJlYWR5U3RhdGUpfSxjb25uZWN0aW9uLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgcGF5bG9hZD1KU09OLnBhcnNlKGUuZGF0YSk7JHJvb3RTY29wZS4kYnJvYWRjYXN0KFwid3M6XCIrcGF5bG9hZC50b3BpYyxwYXlsb2FkLmRhdGEpfX07dGhpcy5zZW5kPWZ1bmN0aW9uKHRvcGljLGRhdGEpe3ZhciBqc29uPUpTT04uc3RyaW5naWZ5KHt0b3BpYyxkYXRhfSk7Y29ubmVjdGlvbi5zZW5kKGpzb24pfSx0aGlzLmNvbm5lY3Q9Y29ubmVjdH1dKS5ydW4oW1wiV2ViU29ja2V0U3ZjXCIsZnVuY3Rpb24oV2ViU29ja2V0U3ZjKXtXZWJTb2NrZXRTdmMuY29ubmVjdCgpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJBcHBDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIkxhbmd1YWdlU3ZjXCIsXCJVc2VyU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRsb2NhdGlvbixMYW5ndWFnZVN2YyxVc2VyU3ZjKXtmdW5jdGlvbiBsb2dpbih1c2VyKXskc2NvcGUubG9nZ2VkSW58fCh3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXI9dXNlci5faWQsJHNjb3BlLmxvZ2dlZEluPSEwLCRzY29wZS5jdXJyZW50VXNlcj11c2VyLCRzY29wZS4kYnJvYWRjYXN0KFwibG9naW5cIikpfWNvbnNvbGUubG9nKFwiJWNZb3Ugc25lYWt5IGJ1Z2dlciFcIixcImZvbnQ6IDJlbSBzYW5zLXNlcmlmOyBjb2xvcjogRG9kZ2VyQmx1ZTsgdGV4dC1zaGFkb3c6IDJweCAwIDAgIzQ0NCwgLTJweCAwIDAgIzQ0NCwgMCAycHggMCAjNDQ0LCAwIC0ycHggMCAjNDQ0LCAxcHggMXB4ICM0NDQsIC0xcHggLTFweCAwICM0NDQsIDFweCAtMXB4IDAgIzQ0NCwgLTFweCAxcHggMCAjNDQ0O1wiKSxjb25zb2xlLmxvZyhcIkknbSBnbGFkIHlvdSdyZSBjdXJpb3VzIHdoZXRoZXIgc29tZXRoaW5nIGlzIHBvcHBpbmcgdXAgaW4gaGVyZS4gSSdtIGEgYml0IG9mIGEgc3RpY2tsZXIgd2hlbiBpdCBjb21lcyB0byBtZXNzYWdlcyBpbiB0aGUgY29uc29sZSBzbyBJIHRyeSB0byBtYWtlIHN1cmUgb25seSB0aGluZ3MgSSB3YW50IGFyZSB2aXNpYmxlLiBUaGF0IGJlaW5nIHNhaWQsIGlmIHRoZXJlIGlzIGEgYmlnIGVycm9yIGhlcmUsIEkgd291bGQgcmVhbGx5IGFwcHJlY2lhdGUgeW91IHRlbGxpbmcgbWUgc28gSSBjYW4gZ2V0IHJpZCBvZiBpdCFcIiksY29uc29sZS5sb2coXCJUaGUgY29kZSBmb3IgbXkgcmVzdW1lIGlzIGhvc3RlZCBvbiBHaXRodWIgaWYgeW91IHJlYWxseSB3YW50IHRvIGdvIGludG8gYWxsIHRoaXMhID0+IGh0dHBzOi8vZ2l0aHViLmNvbS9GbGFuZGVyc0J1cmdlci9yZXN1bWVcIiksJCh3aW5kb3cpLmxvYWQoKGZ1bmN0aW9uKCl7JChcIi5sb2FkaW5nXCIpLmZhZGVPdXQoXCJzbG93XCIpLCQoXCIuY29udGVudFwiKS5mYWRlSW4oXCJzbG93XCIpfSkpLCRzY29wZS50aGVtZUNvdW50ZXI9Niwkc2NvcGUudG9kYXk9bmV3IERhdGUsJHNjb3BlLnllYXI9JHNjb3BlLnRvZGF5LmdldEZ1bGxZZWFyKCksJHNjb3BlLnJhbmRvbT1NYXRoLmZsb29yKDFlNipNYXRoLnJhbmRvbSgpKSwkc2NvcGUuZmxpcFRoZW1lPWZ1bmN0aW9uKCl7JChcIi5sb2FkaW5nXCIpLnNob3coKSwkKFwiLmNvbnRlbnRcIikuaGlkZSgpLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7JChcIi5sb2FkaW5nXCIpLmZhZGVPdXQoXCJzbG93XCIpLCQoXCIuY29udGVudFwiKS5mYWRlSW4oXCJzbG93XCIpfSksODAwKSwkc2NvcGUudGhlbWVDb3VudGVyPSRzY29wZS50aGVtZUNvdW50ZXI8Nj8kc2NvcGUudGhlbWVDb3VudGVyKzE6JHNjb3BlLnRoZW1lQ291bnRlcj0xfSwkLmdldEpTT04oXCIvc2tpbGxzLmpzb25cIiwoZnVuY3Rpb24oZGF0YSl7JHNjb3BlLnNraWxscz1kYXRhLmZpbHRlcigoZnVuY3Rpb24oc2tpbGwpe3JldHVybiBza2lsbC5lbmFibGVkfSkpfSkpLCQuZ2V0SlNPTihcIi9ob2JiaWVzLmpzb25cIiwoZnVuY3Rpb24oZGF0YSl7JHNjb3BlLmhvYmJpZXM9ZGF0YX0pKSwkLmdldEpTT04oXCIvZXhwZXJpZW5jZS5qc29uXCIsKGZ1bmN0aW9uKGRhdGEpeyRzY29wZS5qb2JzPWRhdGEsJHNjb3BlLmpvYnMuZm9yRWFjaCgoZnVuY3Rpb24oam9iKXtqb2Iuc3RhcnREYXRlPW5ldyBEYXRlKGpvYi5zdGFydERhdGUpLGpvYi5lbmREYXRlJiYoam9iLmVuZERhdGU9bmV3IERhdGUoam9iLmVuZERhdGUpKX0pKX0pKSwkc2NvcGUuZ2V0VGltZVNwYW49ZnVuY3Rpb24oam9iKXtyZXR1cm4gam9iLnN0YXJ0RGF0ZS5nZXRGdWxsWWVhcigpKyhqb2IuZW5kRGF0ZT9cIiAtIFwiK2pvYi5lbmREYXRlLmdldEZ1bGxZZWFyKCk6XCIgLSBUb2RheVwiKX0sJHNjb3BlLmxhbmd1YWdlcz1MYW5ndWFnZVN2Yy5sYW5ndWFnZXMsJHNjb3BlLnNlbGVjdGVkTGFuZ3VhZ2U9TGFuZ3VhZ2VTdmMuZ2V0TGFuZ3VhZ2UoKSwkc2NvcGUuc2VsZWN0TGFuZ3VhZ2U9ZnVuY3Rpb24obGFuZ3VhZ2UpeyRzY29wZS5zZWxlY3RlZExhbmd1YWdlPUxhbmd1YWdlU3ZjLnNldExhbmd1YWdlKGxhbmd1YWdlKX0sJHNjb3BlLmhvdmVyZGl2PWZ1bmN0aW9uKGUsZGl2aWQpe3ZhciBsZWZ0PWUuY2xpZW50WCtcInB4XCIsdG9wPWUuY2xpZW50WSsyMCtcInB4XCI7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2aWQpO3JldHVybiAkKFwiI1wiK2RpdmlkKS5jc3MoXCJsZWZ0XCIsbGVmdCksJChcIiNcIitkaXZpZCkuY3NzKFwidG9wXCIsdG9wKSwkKFwiI1wiK2RpdmlkKS50b2dnbGUoKSwhMX0sJHNjb3BlLnNvY2lhbE1lZGlhPVt7bmFtZTpcImxpbmtlZGluXCIsdXJsOlwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2xhdXJlbnQtZGViYWNrZXItMTYzM2E5MTZcIixpY29uOlwiZmEtbGlua2VkaW5cIn0se25hbWU6XCJnaXRodWJcIix1cmw6XCJodHRwczovL2dpdGh1Yi5jb20vRmxhbmRlcnNCdXJnZXJcIixpY29uOlwiZmEtZ2l0aHViXCJ9LHtuYW1lOlwianNmaWRkbGVcIix1cmw6XCJodHRwczovL2pzZmlkZGxlLm5ldC91c2VyL0JlbGdvQ2FuYWRpYW4vZmlkZGxlcy9cIixpY29uOlwiZmEtanNmaWRkbGVcIn0se25hbWU6XCJzdGFja292ZXJmbG93XCIsdXJsOlwiaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzEwODM5MjMvYmVsZ29jYW5hZGlhblwiLGljb246XCJmYS1zdGFjay1vdmVyZmxvd1wifV0sd2luZG93LmxvY2FsU3RvcmFnZS51c2VyJiZVc2VyU3ZjLmxvZ2luKHdpbmRvdy5sb2NhbFN0b3JhZ2UudXNlcikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2Upe2xvZ2luKHJlc3BvbnNlLmRhdGEpfSkpLCRzY29wZS4kb24oXCJsb2dpblwiLChmdW5jdGlvbihfLHVzZXIpe2xvZ2luKHVzZXIpfSkpLCRzY29wZS4kb24oXCJ1cGRhdGVcIiwoZnVuY3Rpb24oXyx1c2VyKXskc2NvcGUuY3VycmVudFVzZXI9dXNlciwkc2NvcGUuY3VycmVudFVzZXIuYmlydGhEYXRlPW5ldyBEYXRlKCRzY29wZS5jdXJyZW50VXNlci5iaXJ0aERhdGUpLCRzY29wZS5sb2FkaW5nPSExLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7JChcIiNsb2FkaW5nLWljb25cIikuZmFkZU91dChcInNsb3dcIil9KSwxZTMpfSkpLCRzY29wZS4kb24oXCJsb2FkaW5nXCIsKGZ1bmN0aW9uKF8sdXNlcil7JHNjb3BlLmxvYWRpbmc9ITAsJChcIiNsb2FkaW5nLWljb25cIikuc2hvdygpfSkpLCRzY29wZS4kb24oXCJsb2FkZWRcIiwoZnVuY3Rpb24oXyx1c2VyKXskc2NvcGUubG9hZGluZz0hMSxzZXRUaW1lb3V0KChmdW5jdGlvbigpeyQoXCIjbG9hZGluZy1pY29uXCIpLmZhZGVPdXQoXCJzbG93XCIpfSksMWUzKX0pKSwkc2NvcGUubG9nb3V0PWZ1bmN0aW9uKCl7ZmlyZWJhc2UuYXV0aCgpLnNpZ25PdXQoKS50aGVuKChmdW5jdGlvbigpeyRzY29wZS5sb2dnZWRJbj0hMSx3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCksJHNjb3BlLiRicm9hZGNhc3QoXCJsb2dvdXRcIil9KSkuY2F0Y2goKGZ1bmN0aW9uKGVycm9yKXt9KSl9LCRzY29wZS5mb3JtYXREYXRlPWZ1bmN0aW9uKGRhdGUpe3JldHVybihkYXRlPW5ldyBEYXRlKGRhdGUpKS5nZXREYXRlKCkrXCItXCIrW1wiSmFuXCIsXCJGZWJcIixcIk1hclwiLFwiQXByXCIsXCJNYXlcIixcIkp1blwiLFwiSnVsXCIsXCJBdWdcIixcIlNlcFwiLFwiT2N0XCIsXCJOb3ZcIixcIkRlY1wiXVtkYXRlLmdldE1vbnRoKCldK1wiLVwiK2RhdGUuZ2V0RnVsbFllYXIoKX0sU3RyaW5nLnByb3RvdHlwZS5jYXBpdGFsaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdGhpcy5zbGljZSgxKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkFzdGVyb2lkc0N0cmxcIixbXCIkc2NvcGVcIixcIkdhbWVTdmNcIixmdW5jdGlvbigkc2NvcGUsR2FtZVN2Yyl7JHNjb3BlLmFubm91bmNlPSExO3ZhciBjYW52YXM9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhc3Rlcm9pZHMtcGFnZVwiKSxjdHg9Y2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtjdHguZm9udD1cIjMwcHggQ29taWMgU2FucyBNU1wiLGN0eC5maWxsU3R5bGU9XCJyZWRcIixjdHgudGV4dEFsaWduPVwiY2VudGVyXCI7dmFyIHNob3RzPXt9LGFzdGVyb2lkcz17fSxwb3dlcnVwcz17fSxleHBsb3Npb25zPXt9LG1hcD17fSxzcGFjZT1NYXRoLmZsb29yKDEwKk1hdGgucmFuZG9tKCkpLHBvd2VydXBUeXBlcz1be25hbWU6XCJzcGVlZFwiLGFubm91bmNlbWVudDpcIk1heCBTcGVlZCDih6dcIixjeWNsZTp7cm93czoxLGNvbHVtbnM6NCxzaXplOlsxNCwzNV0saTowLGRpcmVjdGlvbjohMH0saW1nOm5ldyBJbWFnZSxhY3RpdmF0ZTpmdW5jdGlvbihzcGFjZXNoaXApe3NwYWNlc2hpcC5tYXhTcGVlZCs9MTAwfX0se25hbWU6XCJjb29sZG93blwiLGFubm91bmNlbWVudDpcIkNvb2xkb3duIOKHqVwiLGN5Y2xlOntyb3dzOjEsY29sdW1uczozLHNpemU6WzE3LDE3XSxpOjAsZGlyZWN0aW9uOiEwfSxpbWc6bmV3IEltYWdlLGFjdGl2YXRlOmZ1bmN0aW9uKHNwYWNlc2hpcCl7c3BhY2VzaGlwLmNvb2xkb3duPjAmJihzcGFjZXNoaXAuY29vbGRvd25UaW1lLT0xKX19LHtuYW1lOlwicmFuZ2VcIixhbm5vdW5jZW1lbnQ6XCJGaXJpbmcgUmFuZ2Ug4oenXCIsY3ljbGU6e3Jvd3M6NCxjb2x1bW5zOjEsc2l6ZTpbMzAsOF0saTowLGRpcmVjdGlvbjohMH0saW1nOm5ldyBJbWFnZSxhY3RpdmF0ZTpmdW5jdGlvbihzcGFjZXNoaXApe3NwYWNlc2hpcC5yYW5nZSs9NX19LHtuYW1lOlwic2hpZWxkXCIsYW5ub3VuY2VtZW50OlwiU2hpZWxkXCIsY3ljbGU6e3Jvd3M6NSxjb2x1bW5zOjEsc2l6ZTpbMTksMTldLGk6MCxkaXJlY3Rpb246ITB9LGltZzpuZXcgSW1hZ2UsYWN0aXZhdGU6ZnVuY3Rpb24oc3BhY2VzaGlwKXtzcGFjZXNoaXAuc2hpZWxkPSEwfX0se25hbWU6XCJudWtlXCIsYW5ub3VuY2VtZW50OlwiTnVrZVwiLGN5Y2xlOntyb3dzOjEsY29sdW1uczo4LHNpemU6WzE1LDE1XSxpOjAsZGlyZWN0aW9uOiEwfSxpbWc6bmV3IEltYWdlLGFjdGl2YXRlOmZ1bmN0aW9uKHNwYWNlc2hpcCl7Zm9yKHZhciBpIGluIGFzdGVyb2lkcylhc3Rlcm9pZHNbaV0uZXhwbG9kZSgpO3NwYXduQXN0ZXJvaWRzKDUpfX1dO3Bvd2VydXBUeXBlcy5mb3JFYWNoKChmdW5jdGlvbihwb3dlcnVwLGksYXJyYXkpe2FycmF5W2ldLmltZy5zcmM9XCJhc3Rlcm9pZHMvXCIrcG93ZXJ1cC5uYW1lK1wiLnBuZ1wifSkpO3ZhciBzcGFjZXNoaXAsZXhwbG9zaW9uSW1hZ2U9bmV3IEltYWdlO2Z1bmN0aW9uIGV2YWx1YXRlS2V5cygpeyRzY29wZS5wbGF5aW5nPyhtYXBbMzJdJiYwPT09c3BhY2VzaGlwLmNvb2xkb3duJiZzcGFjZXNoaXAuc2hvb3QoKSxtYXBbMzddJiYoMD09PXNwYWNlc2hpcC5yb3RhdGlvbj9zcGFjZXNoaXAucm90YXRpb249MzYwOnNwYWNlc2hpcC5yb3RhdGlvbi09MyksbWFwWzM5XSYmKDM2MD09PXNwYWNlc2hpcC5yb3RhdGlvbj9zcGFjZXNoaXAucm90YXRpb249MDpzcGFjZXNoaXAucm90YXRpb24rPTMpLG1hcFszOF0/c3BhY2VzaGlwLnNwZWVkPD1zcGFjZXNoaXAubWF4U3BlZWQmJihzcGFjZXNoaXAuc3BlZWQrPTUpOnNwYWNlc2hpcC5zcGVlZD4wJiZzcGFjZXNoaXAuc3BlZWQtLSxtYXBbNDBdJiZzcGFjZXNoaXAuc3BlZWQ+MCYmKHNwYWNlc2hpcC5zcGVlZC09MikpOm1hcFszMl0mJigkc2NvcGUucGxheWluZz0hMCwkc2NvcGUuc2NvcmU9MCxzcGFjZT1NYXRoLmZsb29yKDEwKk1hdGgucmFuZG9tKCkpLCRzY29wZS4kYXBwbHkoKSxzcGFjZXNoaXA9bmV3IFNwYWNlc2hpcCwkc2NvcGUuc2NvcmU9MCxzcGF3bkFzdGVyb2lkcyg1KSxmdW5jdGlvbiBhdXRvU3Bhd24oKXtpZihPYmplY3Qua2V5cyhhc3Rlcm9pZHMpLmxlbmd0aDwyMDApe3ZhciBpZD1NYXRoLnJvdW5kKDFlOCpNYXRoLnJhbmRvbSgpKTthc3Rlcm9pZHNbaWRdPW5ldyBBc3Rlcm9pZChpZCl9JHNjb3BlLnBsYXlpbmcmJnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7YXV0b1NwYXduKCl9KSwkc2NvcGUuc2NvcmU8MWUzPzFlMzokc2NvcGUuc2NvcmU8MmUzPzkwMDokc2NvcGUuc2NvcmU8M2UzPzgwMDokc2NvcGUuc2NvcmU8NGUzPzcwMDokc2NvcGUuc2NvcmU8NWUzPzYwMDokc2NvcGUuc2NvcmU8NmUzPzUwMDokc2NvcGUuc2NvcmU8N2UzPzQwMDokc2NvcGUuc2NvcmU8OGUzPzMwMDoyMDApfSgpKX1mdW5jdGlvbiBTcGFjZXNoaXAoKXt0aGlzLndpZHRoPTUwLHRoaXMuaGVpZ2h0PTUwLHRoaXMuc2hpZWxkPSExLHRoaXMucmFuZ2U9ODAsdGhpcy5jYW5ub249e3g6dGhpcy53aWR0aC8yLTQuNSx5OnRoaXMuaGVpZ2h0LzItLjA3ODEyNSp0aGlzLmhlaWdodH0sdGhpcy5jb29sZG93bj0wLHRoaXMuY29vbGRvd25UaW1lPTIwLHRoaXMucG9zaXRpb249W2NhbnZhcy53aWR0aC8yLXRoaXMud2lkdGgvMixjYW52YXMuaGVpZ2h0LzItdGhpcy5oZWlnaHQvMl0sdGhpcy5pbWc9bmV3IEltYWdlLHRoaXMuaW1nLnNyYz1cImFzdGVyb2lkcy9zcGFjZXNoaXAucG5nXCIsdGhpcy5zcGVlZD0wLHRoaXMubWF4U3BlZWQ9MWUzLHRoaXMuYW5nbGU9MCx0aGlzLnJvdGF0aW9uPTAsdGhpcy5zaG9vdD1mdW5jdGlvbigpe3RoaXMuY29vbGRvd249dGhpcy5jb29sZG93blRpbWU7dmFyIGlkPU1hdGgucm91bmQoMWU4Kk1hdGgucmFuZG9tKCkpO3Nob3RzW2lkXT1uZXcgU2hvdChpZCx0aGlzKX0sdGhpcy5tb3ZlPWZ1bmN0aW9uKCl7Zm9yKHZhciBpIGluIHRoaXMuc2hpZWxkJiYoY3R4LmJlZ2luUGF0aCgpLGN0eC5hcmModGhpcy5wb3NpdGlvblswXSt0aGlzLndpZHRoLzIsdGhpcy5wb3NpdGlvblsxXSt0aGlzLmhlaWdodC8yLDMwLDAsMipNYXRoLlBJKSxjdHguZmlsbFN0eWxlPVwicmdiKDM1LCAyMzcsIDg2LCAwLjUpXCIsY3R4LnN0cm9rZVN0eWxlPVwicmdiKDY2LCAxNjgsIDM2LCAwLjgpXCIsY3R4LmxpbmVXaWR0aD01LGN0eC5zdHJva2UoKSxjdHguZmlsbCgpKSxhc3Rlcm9pZHMpe3ZhciBhc3Rlcm9pZD1hc3Rlcm9pZHNbaV07aWYoaGl0KGFzdGVyb2lkLHRoaXMpKXtpZighdGhpcy5zaGllbGQpcmV0dXJuIGdhbWVPdmVyKCk7dGhpcy5zaGllbGQ9ITEsYXN0ZXJvaWQuZXhwbG9kZSgpfX10aGlzLmFuZ2xlPXRoaXMucm90YXRpb24sdGhpcy5jb29sZG93bj4wJiZ0aGlzLmNvb2xkb3duLS0sbW92ZSh0aGlzKX19ZnVuY3Rpb24gU2hvdChpZCxzcGFjZXNoaXApe3RoaXMuaWQ9aWQsdGhpcy5wb3NpdGlvbj1bc3BhY2VzaGlwLnBvc2l0aW9uWzBdK3NwYWNlc2hpcC5jYW5ub24ueCtzcGFjZXNoaXAuY2Fubm9uLngqTWF0aC5jb3MoKHNwYWNlc2hpcC5yb3RhdGlvbi05MCkqTWF0aC5QSS8xODApLHNwYWNlc2hpcC5wb3NpdGlvblsxXStzcGFjZXNoaXAuY2Fubm9uLnkrc3BhY2VzaGlwLmNhbm5vbi55Kk1hdGguc2luKChzcGFjZXNoaXAucm90YXRpb24tOTApKk1hdGguUEkvMTgwKV0sdGhpcy53aWR0aD05LHRoaXMuaGVpZ2h0PTE1LHRoaXMuYW5nbGU9c3BhY2VzaGlwLmFuZ2xlLHRoaXMucm90YXRpb249c3BhY2VzaGlwLnJvdGF0aW9uLHRoaXMuc3BlZWQ9c3BhY2VzaGlwLnNwZWVkKzUwMCx0aGlzLmxpZmVzcGFuPXNwYWNlc2hpcC5yYW5nZSx0aGlzLmltZz1uZXcgSW1hZ2UsdGhpcy5pbWcuc3JjPVwiYXN0ZXJvaWRzL3Nob3QucG5nXCIsdGhpcy5tb3ZlPWZ1bmN0aW9uKCl7dGhpcy5saWZlc3Bhbi0tLG1vdmUodGhpcyl9fWZ1bmN0aW9uIEFzdGVyb2lkKGlkKXt0aGlzLmlkPWlkLHRoaXMud2lkdGg9NTAqTWF0aC5yYW5kb20oKSsyMCx0aGlzLmhlaWdodD10aGlzLndpZHRoLHRoaXMucG9zaXRpb249Z2V0RW50cnlQb3NpdGlvbih0aGlzLndpZHRoLHRoaXMuaGVpZ2h0KSx0aGlzLmFuZ2xlPTM2MCpNYXRoLnJhbmRvbSgpLHRoaXMucm90YXRpb249MzYwKk1hdGgucmFuZG9tKCksdGhpcy5yb3RhdGlvblNwZWVkPTYqTWF0aC5yYW5kb20oKS0zLHRoaXMuc3BlZWQ9MzAwKk1hdGgucmFuZG9tKCkrMix0aGlzLmltZz1uZXcgSW1hZ2UsdGhpcy5pbWcuc3JjPVwiYXN0ZXJvaWRzL2FzdGVyb2lkXCIrKE1hdGgucm91bmQoNipNYXRoLnJhbmRvbSgpKSsxKStcIi5wbmdcIix0aGlzLmV4cGxvZGU9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwbG9zaW9uc1t0aGlzLmlkXT1uZXcgRXhwbG9zaW9uKHRoaXMpLGRlbGV0ZSBhc3Rlcm9pZHNbdGhpcy5pZF19LHRoaXMubW92ZT1mdW5jdGlvbigpe2Zvcih2YXIgaSBpbiB0aGlzLnJvdGF0aW9uKz10aGlzLnJvdGF0aW9uU3BlZWQsdGhpcy5yb3RhdGlvbj4zNjA/dGhpcy5yb3RhdGlvbj10aGlzLnJvdGF0aW9uLTM2MDp0aGlzLnJvdGF0aW9uPDAmJih0aGlzLnJvdGF0aW9uPTM2MCt0aGlzLnJvdGF0aW9uKSxzaG90cyl7dmFyIHNob3Q9c2hvdHNbaV07aWYoaGl0KHNob3QsdGhpcykpe3RoaXMuZXhwbG9kZSgpO3ZhciBwb2ludHM9TWF0aC5mbG9vcigoc2hvdC5zcGVlZC01MDApLzEwKzcwLXRoaXMud2lkdGgpO01hdGguZmxvb3IoKHBvaW50cyskc2NvcGUuc2NvcmUpLzEwMCk+TWF0aC5mbG9vcigkc2NvcGUuc2NvcmUvMTAwKSYmc3Bhd25Qb3dlcnVwKCksJHNjb3BlLnNjb3JlKz1wb2ludHMsJHNjb3BlLiRhcHBseSgpLGRlbGV0ZSBzaG90c1tpXX19bW92ZSh0aGlzKX19ZnVuY3Rpb24gRXhwbG9zaW9uKG9iamVjdCl7dGhpcy5wb3NpdGlvbj1bb2JqZWN0LnBvc2l0aW9uWzBdLG9iamVjdC5wb3NpdGlvblsxXV0sdGhpcy53aWR0aD1vYmplY3Qud2lkdGgsdGhpcy5oZWlnaHQ9b2JqZWN0LmhlaWdodCx0aGlzLnNwZWVkPTAsdGhpcy5hbmdsZT0zNjAqTWF0aC5yYW5kb20oKSx0aGlzLmN5Y2xlPXtyb3dzOjYsY29sdW1uczo4LHNpemU6WzI1NiwyNTZdLGk6MCxkaXJlY3Rpb246ITB9LHRoaXMubGlmZXNwYW49NDcsdGhpcy5pbWc9ZXhwbG9zaW9uSW1hZ2UsdGhpcy5tb3ZlPWZ1bmN0aW9uKCl7dGhpcy5saWZlc3Bhbi0tLG1vdmUodGhpcyksdGhpcy5jeWNsZS5kaXJlY3Rpb24/dGhpcy5jeWNsZS5pKys6dGhpcy5jeWNsZS5pLS19fWZ1bmN0aW9uIFBvd2VydXAoaWQpe3RoaXMuaWQ9aWQsdGhpcy5wb3dlcnVwPXBvd2VydXBUeXBlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqcG93ZXJ1cFR5cGVzLmxlbmd0aCldLHRoaXMuY3ljbGU9dGhpcy5wb3dlcnVwLmN5Y2xlLHRoaXMubGlmZXNwYW49MWUzLHRoaXMuY3ljbGUuc2l6ZVsxXT50aGlzLmN5Y2xlLnNpemVbMF0/KHRoaXMuaGVpZ2h0PTQwLHRoaXMud2lkdGg9TWF0aC5yb3VuZCh0aGlzLmhlaWdodC90aGlzLmN5Y2xlLnNpemVbMV0qdGhpcy5jeWNsZS5zaXplWzBdKSk6KHRoaXMud2lkdGg9NDAsdGhpcy5oZWlnaHQ9TWF0aC5yb3VuZCh0aGlzLndpZHRoL3RoaXMuY3ljbGUuc2l6ZVswXSp0aGlzLmN5Y2xlLnNpemVbMV0pKSx0aGlzLnBvc2l0aW9uPWdldEVudHJ5UG9zaXRpb24odGhpcy53aWR0aCx0aGlzLmhlaWdodCksdGhpcy5pbWc9dGhpcy5wb3dlcnVwLmltZyx0aGlzLmFuZ2xlPTM2MCpNYXRoLnJhbmRvbSgpLHRoaXMuc3BlZWQ9MTUwKk1hdGgucmFuZG9tKCkrNTA7dmFyIGRlbGF5PTU7dGhpcy5tb3ZlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGlmZXNwYW48PTA/ZGVsZXRlIHBvd2VydXBzW3RoaXMuaWRdOmhpdChzcGFjZXNoaXAsdGhpcyk/KCRzY29wZS5hbm5vdW5jZT0hMCwkc2NvcGUuYW5ub3VuY2VtZW50PXRoaXMucG93ZXJ1cC5hbm5vdW5jZW1lbnQsJHNjb3BlLiRhcHBseSgpLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7JHNjb3BlLmFubm91bmNlPSExLCRzY29wZS4kYXBwbHkoKX0pLDFlMyksdGhpcy5wb3dlcnVwLmFjdGl2YXRlKHNwYWNlc2hpcCksZGVsZXRlIHBvd2VydXBzW3RoaXMuaWRdKToodGhpcy5saWZlc3Bhbi0tLG1vdmUodGhpcyksdm9pZChkZWxheTw9MD8odGhpcy5jeWNsZS5kaXJlY3Rpb24/dGhpcy5jeWNsZS5pKys6dGhpcy5jeWNsZS5pLS0sZGVsYXk9NSk6ZGVsYXktLSkpfX1mdW5jdGlvbiBtb3ZlKG9iamVjdCl7aWYob2JqZWN0LnBvc2l0aW9uWzBdKz1vYmplY3Quc3BlZWQvMTAwKk1hdGguY29zKChvYmplY3QuYW5nbGUtOTApKk1hdGguUEkvMTgwKSxvYmplY3QucG9zaXRpb25bMV0rPW9iamVjdC5zcGVlZC8xMDAqTWF0aC5zaW4oKG9iamVjdC5hbmdsZS05MCkqTWF0aC5QSS8xODApLG9iamVjdC5wb3NpdGlvblswXT5jYW52YXMud2lkdGg/b2JqZWN0LnBvc2l0aW9uWzBdPS1vYmplY3Qud2lkdGg6b2JqZWN0LnBvc2l0aW9uWzBdPC1vYmplY3Qud2lkdGgmJihvYmplY3QucG9zaXRpb25bMF09Y2FudmFzLndpZHRoKSxvYmplY3QucG9zaXRpb25bMV0+Y2FudmFzLmhlaWdodD9vYmplY3QucG9zaXRpb25bMV09LW9iamVjdC5oZWlnaHQ6b2JqZWN0LnBvc2l0aW9uWzFdPC1vYmplY3QuaGVpZ2h0JiYob2JqZWN0LnBvc2l0aW9uWzFdPWNhbnZhcy5oZWlnaHQpLGN0eC5zYXZlKCksY3R4LnRyYW5zbGF0ZShvYmplY3QucG9zaXRpb25bMF0sb2JqZWN0LnBvc2l0aW9uWzFdKSxjdHgudHJhbnNsYXRlKG9iamVjdC53aWR0aC8yLG9iamVjdC5oZWlnaHQvMiksY3R4LnJvdGF0ZShvYmplY3Qucm90YXRpb24qTWF0aC5QSS8xODApLG9iamVjdC5jeWNsZSl7dmFyIGNvbHVtbj1vYmplY3QuY3ljbGUuaSVvYmplY3QuY3ljbGUuY29sdW1ucyxyb3c9TWF0aC5mbG9vcihvYmplY3QuY3ljbGUuaS9vYmplY3QuY3ljbGUuY29sdW1ucyk7Y3R4LmRyYXdJbWFnZShvYmplY3QuaW1nLG9iamVjdC5jeWNsZS5zaXplWzBdKmNvbHVtbixvYmplY3QuY3ljbGUuc2l6ZVsxXSpyb3csb2JqZWN0LmN5Y2xlLnNpemVbMF0sb2JqZWN0LmN5Y2xlLnNpemVbMV0sLW9iamVjdC53aWR0aC8yLC1vYmplY3QuaGVpZ2h0LzIsb2JqZWN0LndpZHRoLG9iamVjdC5oZWlnaHQpLG9iamVjdC5jeWNsZS5pPD0wPyhvYmplY3QuY3ljbGUuaT0wLG9iamVjdC5jeWNsZS5kaXJlY3Rpb249ITApOm9iamVjdC5jeWNsZS5pPj1vYmplY3QuY3ljbGUuY29sdW1ucypvYmplY3QuY3ljbGUucm93cyYmKG9iamVjdC5jeWNsZS5pPW9iamVjdC5jeWNsZS5jb2x1bW5zKm9iamVjdC5jeWNsZS5yb3dzLTEsb2JqZWN0LmN5Y2xlLmRpcmVjdGlvbj0hMSl9ZWxzZSBjdHguZHJhd0ltYWdlKG9iamVjdC5pbWcsLW9iamVjdC53aWR0aC8yLC1vYmplY3QuaGVpZ2h0LzIsb2JqZWN0LndpZHRoLG9iamVjdC5oZWlnaHQpO2N0eC5yZXN0b3JlKCl9ZnVuY3Rpb24gZ2V0RW50cnlQb3NpdGlvbih3aWR0aCxoZWlnaHQpe3ZhciB4LGdyaWRYPTIqTWF0aC5yYW5kb20oKSxncmlkWT0yKk1hdGgucmFuZG9tKCkseT0wO3JldHVybiBncmlkWD49MT8oeD1NYXRoLnJhbmRvbSgpKmNhbnZhcy53aWR0aCx5PXk+PTE/MC1oZWlnaHQ6Y2FudmFzLmhlaWdodCk6KHk9TWF0aC5yYW5kb20oKSpjYW52YXMuaGVpZ2h0LHg9Z3JpZFk+PTE/MC13aWR0aDpjYW52YXMud2lkdGgpLFt4LHldfWZ1bmN0aW9uIGhpdChvYmplY3QxLG9iamVjdDIpe3JldHVybiBvYmplY3QxLnBvc2l0aW9uWzBdPG9iamVjdDIucG9zaXRpb25bMF0rb2JqZWN0Mi53aWR0aCYmb2JqZWN0Mi5wb3NpdGlvblswXTxvYmplY3QxLnBvc2l0aW9uWzBdK29iamVjdDEud2lkdGgmJm9iamVjdDEucG9zaXRpb25bMV08b2JqZWN0Mi5wb3NpdGlvblsxXStvYmplY3QyLmhlaWdodCYmb2JqZWN0Mi5wb3NpdGlvblsxXTxvYmplY3QxLnBvc2l0aW9uWzFdK29iamVjdDEuaGVpZ2h0fWZ1bmN0aW9uIHNwYXduQXN0ZXJvaWRzKGFtb3VudCl7dmFyIGk9MDtkb3t2YXIgaWQ9TWF0aC5yb3VuZCgxZTgqTWF0aC5yYW5kb20oKSk7YXN0ZXJvaWRzW2lkXT1uZXcgQXN0ZXJvaWQoaWQpfXdoaWxlKGkrKzw9YW1vdW50KX1mdW5jdGlvbiBzcGF3blBvd2VydXAoKXtpZihPYmplY3Qua2V5cyhwb3dlcnVwcykubGVuZ3RoPDMpe3ZhciBpZD1NYXRoLnJvdW5kKDFlOCpNYXRoLnJhbmRvbSgpKTtwb3dlcnVwc1tpZF09bmV3IFBvd2VydXAoaWQpfX1mdW5jdGlvbiBnYW1lT3Zlcigpe2Zvcih2YXIgaSBpbiAkc2NvcGUucGxheWluZz0hMSxhc3Rlcm9pZHMpYXN0ZXJvaWRzW2ldLmV4cGxvZGUoKTtzaG90cz17fSwkc2NvcGUubG9nZ2VkSW4/JHNjb3BlLmN1cnJlbnRVc2VyLmhpZ2hzY29yZS5hc3Rlcm9pZHM8JHNjb3BlLnNjb3JlJiYoJHNjb3BlLmN1cnJlbnRVc2VyLmhpZ2hzY29yZS5hc3Rlcm9pZHM9JHNjb3BlLnNjb3JlLEdhbWVTdmMuc2V0SGlnaHNjb3JlKFwiYXN0ZXJvaWRzXCIsJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCwkc2NvcGUuc2NvcmUpKTokc2NvcGUuaGlnaHNjb3JlPCRzY29wZS5zY29yZSYmKCRzY29wZS5oaWdoc2NvcmU9JHNjb3BlLnNjb3JlKX1mdW5jdGlvbiByZXNpemVDYW52YXMoKXtjb25zb2xlLmxvZyh3aW5kb3cuaW5uZXJXaWR0aCksY2FudmFzLndpZHRoPXdpbmRvdy5pbm5lcldpZHRoLGNhbnZhcy5oZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0LShjYW52YXMud2lkdGg8PTc2OD81MDoxMDUpfWV4cGxvc2lvbkltYWdlLnNyYz1cImFzdGVyb2lkcy9leHBsb3Npb24ucG5nXCIsd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsKGZ1bmN0aW9uKGUpe21hcFtlLmtleUNvZGV8fGUud2hpY2hdPSEwfSksITApLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwoZnVuY3Rpb24oZSl7bWFwW2Uua2V5Q29kZXx8ZS53aGljaF09ITF9KSwhMCksJHNjb3BlLmhpZ2hzY29yZT0wLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIscmVzaXplQ2FudmFzLCExKSxyZXNpemVDYW52YXMoKSxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uIGRyYXcoKXtmb3IodmFyIGkgaW4gY3R4LmNsZWFyUmVjdCgwLDAsY2FudmFzLndpZHRoLGNhbnZhcy5oZWlnaHQpLHNob3RzKXNob3RzW2ldLmxpZmVzcGFuPD0wP2RlbGV0ZSBzaG90c1tpXTpzaG90c1tpXS5tb3ZlKCk7Zm9yKGkgaW4gYXN0ZXJvaWRzKWFzdGVyb2lkc1tpXS5tb3ZlKCk7Zm9yKGkgaW4gcG93ZXJ1cHMpcG93ZXJ1cHNbaV0ubW92ZSgpO2ZvcihpIGluIGV4cGxvc2lvbnMpZXhwbG9zaW9uc1tpXS5saWZlc3Bhbjw9MD9kZWxldGUgZXhwbG9zaW9uc1tpXTpleHBsb3Npb25zW2ldLm1vdmUoKTtpZihldmFsdWF0ZUtleXMoKSwkc2NvcGUucGxheWluZylzcGFjZXNoaXAubW92ZSgpO2Vsc2V7dmFyIGdyYWRpZW50PWN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLDAsY2FudmFzLndpZHRoLDApO2dyYWRpZW50LmFkZENvbG9yU3RvcChcIjBcIixcInJnYihcIitNYXRoLmZsb29yKDI1Ni0yNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiKVwiKSxncmFkaWVudC5hZGRDb2xvclN0b3AoXCIwLjI1XCIsXCJyZ2IoXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIilcIiksZ3JhZGllbnQuYWRkQ29sb3JTdG9wKFwiMC41XCIsXCJyZ2IoXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDI1Ni0yNTYqdGFsbHkvMTAwKStcIilcIiksZ3JhZGllbnQuYWRkQ29sb3JTdG9wKFwiMC43NVwiLFwicmdiKFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDI1Ni0yNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIpXCIpLGdyYWRpZW50LmFkZENvbG9yU3RvcChcIjEuMFwiLFwicmdiKFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIpXCIpLGN0eC5maWxsU3R5bGU9Z3JhZGllbnQsY3R4LmZvbnQ9XCI2MHB4IE1vbm90b25cIixjdHguZmlsbFRleHQoXCJBc3Rlcm9pZHNcIixjYW52YXMud2lkdGgvMi1jdHgubWVhc3VyZVRleHQoXCJBc3Rlcm9pZHNcIikud2lkdGgvMixjYW52YXMuaGVpZ2h0LzIpLGN0eC5mb250PVwiMjBweCBBbGRyaWNoXCIsY3R4LmZpbGxUZXh0KFwiUHJlc3Mgc3BhY2UgdG8gc3RhcnRcIixjYW52YXMud2lkdGgvMi1jdHgubWVhc3VyZVRleHQoXCJQcmVzcyBzcGFjZSB0byBzdGFydFwiKS53aWR0aC8yLGNhbnZhcy5oZWlnaHQvMisyMCksY3R4LmZpbGxUZXh0KFwiRGVzaWduZWQgYW5kIGRldmVsb3BlZCBieSBMYXVyZW50IERlYmFja2VyXCIsY2FudmFzLndpZHRoLzItY3R4Lm1lYXN1cmVUZXh0KFwiRGVzaWduZWQgYW5kIGRldmVsb3BlZCBieSBMYXVyZW50IERlYmFja2VyXCIpLndpZHRoLzIsY2FudmFzLmhlaWdodC0zMCl9KHRhbGx5Kz1kaXJlY3Rpb24/MTotMSk+MTAwPyh0YWxseT0xMDAsZGlyZWN0aW9uPSExKTp0YWxseTwwJiYodGFsbHk9MCxkaXJlY3Rpb249ITApO3JlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KX0pKTt2YXIgdGFsbHk9MCxkaXJlY3Rpb249ITA7JHNjb3BlLnNwYWNlPWZ1bmN0aW9uKCl7cmV0dXJue2JhY2tncm91bmRJbWFnZTondXJsKFwiYXN0ZXJvaWRzL3NwYWNlJytzcGFjZSsnLmpwZ1wiKSd9fX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQnViYmxlc0N0cmxcIixbXCIkc2NvcGVcIixmdW5jdGlvbigkc2NvcGUpe3ZhciBjYW52YXM9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidWJibGVzLXBhZ2VcIiksY3R4PWNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiksYnViYmxlcz1bXSxjb2xvcnM9W1wiI2ZmYzMwMFwiLFwiI2ZmNTczM1wiLFwiI2M3MDAzOVwiLFwiIzkwMGMzZVwiLFwiIzU3MTg0NVwiXTtmdW5jdGlvbiBCdWJibGUoKXt0aGlzLmxpZmVzcGFuPTAsdGhpcy5yYWRpdXM9MSx0aGlzLmV4cGFuZGluZz0hMCx0aGlzLnNwZWVkPU1hdGgucm91bmQoMypNYXRoLnJhbmRvbSgpKSx0aGlzLmNpcmN1bWZlcmVuY2U9TWF0aC5yb3VuZCg1MCpNYXRoLnJhbmRvbSgpKSs1LHRoaXMubWF4UmFkaXVzPU1hdGgucm91bmQoMjAwKk1hdGgucmFuZG9tKCkpKzIwLHRoaXMueD1NYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkqY2FudmFzLndpZHRoKSx0aGlzLnk9TWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKmNhbnZhcy5oZWlnaHQpLHRoaXMudng9TWF0aC5yYW5kb20oKT49LjU/MTotMSx0aGlzLnZ5PU1hdGgucmFuZG9tKCk+PS41PzE6LTF9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKChmdW5jdGlvbiBmaWx0ZXJCdWJibGVzKCl7YnViYmxlcy5wdXNoKG5ldyBCdWJibGUpLGJ1YmJsZXM9YnViYmxlcy5maWx0ZXIoKGZ1bmN0aW9uKGJ1YmJsZSl7cmV0dXJuIGJ1YmJsZS5yYWRpdXM9PT1idWJibGUubWF4UmFkaXVzJiYoYnViYmxlLmV4cGFuZGluZz0hMSksYnViYmxlLngrPWJ1YmJsZS52eCpidWJibGUuc3BlZWQsYnViYmxlLnkrPWJ1YmJsZS52eSpidWJibGUuc3BlZWQsYnViYmxlLnJhZGl1cys9YnViYmxlLmV4cGFuZGluZz8xOi0xLGJ1YmJsZS5yYWRpdXM+MH0pKSxjdHguY2xlYXJSZWN0KDAsMCxjYW52YXMud2lkdGgsY2FudmFzLmhlaWdodCksYnViYmxlcy5mb3JFYWNoKChmdW5jdGlvbihidWJibGUpe01hdGgucm91bmQoY29sb3JzLmxlbmd0aCpidWJibGUucmFkaXVzL2J1YmJsZS5tYXhSYWRpdXMpLGN0eC5iZWdpblBhdGgoKSxjdHguYXJjKGJ1YmJsZS54LGJ1YmJsZS55LGJ1YmJsZS5yYWRpdXMsMCwyKk1hdGguUEkpLGN0eC5maWxsU3R5bGU9Y29sb3JzW01hdGgucm91bmQoY29sb3JzLmxlbmd0aCpidWJibGUucmFkaXVzL2J1YmJsZS5tYXhSYWRpdXMpXSxjdHguZmlsbCgpLGN0eC5zdHJva2VTdHlsZT1jb2xvcnNbY29sb3JzLmxlbmd0aC1NYXRoLnJvdW5kKGNvbG9ycy5sZW5ndGgqYnViYmxlLnJhZGl1cy9idWJibGUubWF4UmFkaXVzKV0sY3R4LmxpbmVXaWR0aD1idWJibGUuY2lyY3VtZmVyZW5jZSpidWJibGUucmFkaXVzL2J1YmJsZS5tYXhSYWRpdXMsY3R4LnN0cm9rZSgpfSkpLHJlcXVlc3RBbmltYXRpb25GcmFtZShmaWx0ZXJCdWJibGVzKX0pKSxmdW5jdGlvbigpe2Z1bmN0aW9uIHJlc2l6ZUNhbnZhcygpe2NhbnZhcy53aWR0aD13aW5kb3cuaW5uZXJXaWR0aCxjYW52YXMuaGVpZ2h0PXdpbmRvdy5pbm5lckhlaWdodC0oY2FudmFzLndpZHRoPD03Njg/NTU6MTExKX13aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHJlc2l6ZUNhbnZhcywhMSkscmVzaXplQ2FudmFzKCl9KCl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkNvbnRhY3RDdHJsXCIsW1wiJHNjb3BlXCIsXCJFbWFpbFN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxFbWFpbFN2Yyl7JHNjb3BlLm9wdGlvbnM9W3tuYW1lOlwiU3BhbVwiLHRleHQ6XCJJIGFtIGEgc3BhbSBib3QgYW5kIGF1dG9tYXRpY2FsbHkgY2hlY2sgdGhlIGZpcnN0IG9wdGlvbiBJIGZpbmQhXCJ9LHtuYW1lOlwiT3Bwb3J0dW5pdGl5XCIsdGV4dDpcIllvdSBzZWVtIHRvIGhhdmUgdGhlIHNraWxscyBJIHNlZWssIEknZCBsaWtlIHRvIHRhbGsgYWJvdXQgc29tZSBvcHBvcnR1bml0aWVzLlwifSx7bmFtZTpcIlJlc3VtZVwiLHRleHQ6XCJJIGRpZyB0aGUgcmVzdW1lLCBob3cgZGlkIHlvdSBtYWtlIGl0P1wifSx7bmFtZTpcIk90aGVyXCIsdGV4dDpcIlN1bXRpbiBlbHNlIVwifV0sJHNjb3BlLmNvbnRhY3Q9e2VtYWlsOlwiXCIsbmFtZTpcIlwiLHBob25lOlwiXCIsYWJvdXQ6XCJcIixtZXNzYWdlOlwiXCJ9LCRzY29wZS5zZW5kPWZ1bmN0aW9uKCl7JHNjb3BlLnNlbmRpbmc9ITAsY29uc29sZS5sb2coXCJoZXJlXCIpLEVtYWlsU3ZjLnNlbmQoe2VtYWlsOiRzY29wZS5jb250YWN0LmVtYWlsLG5hbWU6JHNjb3BlLmNvbnRhY3QubmFtZSxwaG9uZTokc2NvcGUuY29udGFjdC5waG9uZSxhYm91dDokc2NvcGUuY29udGFjdC5hYm91dCxtZXNzYWdlOiRzY29wZS5jb250YWN0Lm1lc3NhZ2V9KS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLnNlbnQ9ITAsY29uc29sZS5sb2coXCJTVUNDRVNTLiBzdGF0dXM9JWQsIHRleHQ9JXNcIixyZXNwb25zZS5zdGF0dXMscmVzcG9uc2UudGV4dCksY29uc29sZS5sb2cocmVzcG9uc2UpfSksKGZ1bmN0aW9uKGVycil7JHNjb3BlLnNlbmRpbmc9ITEsY29uc29sZS5sb2coXCJGQUlMRUQuIGVycm9yPVwiLGVycil9KSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJFeHBlcmllbmNlQ3RybFwiLFtcIiRzY29wZVwiLGZ1bmN0aW9uKCRzY29wZSl7JHNjb3BlLmdldFNraWxsPWZ1bmN0aW9uKHNraWxsQ29kZSl7aWYoJHNjb3BlLnNraWxscylyZXR1cm4gJHNjb3BlLnNraWxscy5maW5kKChmdW5jdGlvbihza2lsbCl7cmV0dXJuIHNraWxsLmNvZGU9PT1za2lsbENvZGV9KSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJIb2JiaWVzQ3RybFwiLFtcIiRzY29wZVwiLFwiJHdpbmRvd1wiLGZ1bmN0aW9uKCRzY29wZSwkd2luZG93KXskc2NvcGUuaG9iYnlTZWxlY3RvclZpc2libGU9ITEsJC5nZXRKU09OKFwiaHR0cHM6Ly93d3cucmVkZGl0LmNvbS91c2VyL2JlbGdvY2FuYWRpYW4vYWJvdXQvLmpzb25cIiwoZnVuY3Rpb24ocmVzcG9uc2Upe30pKSwkc2NvcGUuc2VsZWN0ZWRIb2JieT0kc2NvcGUuaG9iYmllc1swXSwkc2NvcGUuc2VsZWN0SG9iYnk9ZnVuY3Rpb24oaG9iYnkpeyRzY29wZS5zZWxlY3RlZEhvYmJ5PWhvYmJ5LCRzY29wZS5ob2JieVNlbGVjdG9yVmlzaWJsZT0hMX0sJHNjb3BlLnNob3dIb2JieT1mdW5jdGlvbih2YWx1ZSxpbmRleCxhcnJheSl7cmV0dXJuISF2YWx1ZS5pbWFnZXMmJnZhbHVlLmltYWdlcy5sZW5ndGg+MH19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkxlbW1pbmdzQ3RybFwiLFtcIiRzY29wZVwiLFwiR2FtZVN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxHYW1lU3ZjKXt2YXIgY2FudmFzPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVtbWluZ3MtcGFnZVwiKSxjdHg9Y2FudmFzLmdldENvbnRleHQoXCIyZFwiKSxsZW1taW5nc0ltYWdlPW5ldyBJbWFnZTtsZW1taW5nc0ltYWdlLnNyYz1cImxlbW1pbmdzL2xlbW1pbmdzLnBuZ1wiO3ZhciBkZWNvckltYWdlPW5ldyBJbWFnZTtkZWNvckltYWdlLnNyYz1cImxlbW1pbmdzL2RlY29yLnBuZ1wiO3ZhciBsZW1taW5ncz17fSxzdGFydGVkPSExLGFjdGlvbnM9e3dhbGs6e3N0YXJ0OlswLDBdLGVuZDpbMzIwLDIwXSxjb2x1bW5zOjgscm93czoxLHJldmVyc2U6ITF9LGh1aDp7c3RhcnQ6WzMyMCwwXSxlbmQ6WzY0MCwyMF0sY29sdW1uczo4LHJvd3M6MSxyZXZlcnNlOiEwfSxmYWxsOntzdGFydDpbMCw4MF0sZW5kOlsxNjAsMTAwXSxjb2x1bW5zOjQscm93czoxLHJldmVyc2U6ITF9LGZseTp7c3RhcnQ6WzE2MCw4MF0sZW5kOls0ODAsMTEwXSxjb2x1bW5zOjgscm93czoxLHJldmVyc2U6ITF9LHN0b3A6e3N0YXJ0OlswLDEyMF0sZW5kOls2NDAsMTQwXSxjb2x1bW5zOjE2LHJvd3M6MSxyZXZlcnNlOiExfSxjbGltYjp7c3RhcnQ6WzAsMTYwXSxlbmQ6WzY0MCwxODVdLGNvbHVtbnM6MTYscm93czoxLHJldmVyc2U6ITF9LGJ1aWxkOntzdGFydDpbMCwyMDBdLGVuZDpbNjQwLDIyNV0sY29sdW1uczoxNixyb3dzOjEscmV2ZXJzZTohMX0scHVuY2g6e3N0YXJ0OlswLDI0MF0sZW5kOls2NDAsMzAwXSxjb2x1bW5zOjE2LHJvd3M6MixyZXZlcnNlOiExfSxkaWc6e3N0YXJ0OlswLDMyMF0sZW5kOlszMjAsMzQ1XSxjb2x1bW5zOjgscm93czoxLHJldmVyc2U6ITF9fTtmdW5jdGlvbiBMZW1taW5nKGluaXQpe3RoaXMucG9zaXRpb249W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooY2FudmFzLndpZHRoLTIwMCkpKzEwMCxNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGNhbnZhcy5oZWlnaHQtMjAwKSkrMTAwXSx0aGlzLmRpcmVjdGlvbj0yKk1hdGgucmFuZG9tKCk+MT8wOjEsdGhpcy5hY3Q9ZnVuY3Rpb24oYWN0aW9uKXt0aGlzLmFjdGlvbj1hY3Rpb25zW2FjdGlvbl0sdGhpcy5jeWNsZT0wLHRoaXMud2lkdGg9KHRoaXMuYWN0aW9uLmVuZFswXS10aGlzLmFjdGlvbi5zdGFydFswXSkvdGhpcy5hY3Rpb24uY29sdW1ucyx0aGlzLmhlaWdodD0odGhpcy5hY3Rpb24uZW5kWzFdLXRoaXMuYWN0aW9uLnN0YXJ0WzFdLTIwKih0aGlzLmFjdGlvbi5yb3dzLTEpKS90aGlzLmFjdGlvbi5yb3dzLHRoaXMuYW5pbWF0aW9uPSEwfSx0aGlzLmFjdChpbml0KSx0aGlzLm1vdmU9ZnVuY3Rpb24oKXtjdHguc2F2ZSgpLGN0eC50cmFuc2xhdGUodGhpcy5wb3NpdGlvblswXSx0aGlzLnBvc2l0aW9uWzFdKSxjdHgudHJhbnNsYXRlKHRoaXMud2lkdGgvMix0aGlzLmhlaWdodC8yKSwwPT09dGhpcy5kaXJlY3Rpb24mJmN0eC5zY2FsZSgtMSwxKTt2YXIgY29sdW1uPXRoaXMuY3ljbGUldGhpcy5hY3Rpb24uY29sdW1ucyxyb3c9TWF0aC5mbG9vcih0aGlzLmN5Y2xlL3RoaXMuYWN0aW9uLmNvbHVtbnMpO2N0eC5kcmF3SW1hZ2UobGVtbWluZ3NJbWFnZSx0aGlzLndpZHRoKmNvbHVtbit0aGlzLmFjdGlvbi5zdGFydFswXSwodGhpcy5oZWlnaHQrMjApKnJvdyt0aGlzLmFjdGlvbi5zdGFydFsxXSx0aGlzLndpZHRoLHRoaXMuaGVpZ2h0LDAsMCwyKnRoaXMud2lkdGgsMip0aGlzLmhlaWdodCksY3R4LnJlc3RvcmUoKSx0aGlzLmFjdGlvbi5yZXZlcnNlP3RoaXMuYW5pbWF0aW9uPyh0aGlzLmN5Y2xlKyssdGhpcy5jeWNsZT49dGhpcy5hY3Rpb24uY29sdW1ucyp0aGlzLmFjdGlvbi5yb3dzJiYodGhpcy5hbmltYXRpb249IXRoaXMuYW5pbWF0aW9uLHRoaXMuY3ljbGUtLSkpOih0aGlzLmN5Y2xlLS0sdGhpcy5jeWNsZTwwJiYodGhpcy5hbmltYXRpb249IXRoaXMuYW5pbWF0aW9uLHRoaXMuY3ljbGU9MCkpOih0aGlzLmN5Y2xlKyssdGhpcy5jeWNsZT49dGhpcy5hY3Rpb24uY29sdW1ucyp0aGlzLmFjdGlvbi5yb3dzJiYodGhpcy5jeWNsZT0wKSl9fWZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpe2NhbnZhcy53aWR0aD13aW5kb3cuaW5uZXJXaWR0aCxjYW52YXMuaGVpZ2h0PXdpbmRvdy5pbm5lckhlaWdodC0oY2FudmFzLndpZHRoPD03Njg/NTA6MTA1KX13aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHJlc2l6ZUNhbnZhcywhMSkscmVzaXplQ2FudmFzKCksT2JqZWN0LmtleXMoYWN0aW9ucykuZm9yRWFjaCgoZnVuY3Rpb24oYWN0aW9uKXtsZW1taW5nc1tNYXRoLnJvdW5kKDFlOCpNYXRoLnJhbmRvbSgpKV09bmV3IExlbW1pbmcoYWN0aW9uKX0pKTtsZXQgaGF0Y2g9bmV3IGZ1bmN0aW9uKCl7dGhpcy5wb3NpdGlvbj1bMjAsMjBdLHRoaXMuYWN0aW9uPXtzdGFydDpbMCwwXSxlbmQ6WzgyLDUwMF0sY29sdW1uczoxLHJvd3M6MTB9LHRoaXMud2lkdGg9KHRoaXMuYWN0aW9uLmVuZFswXS10aGlzLmFjdGlvbi5zdGFydFswXSkvdGhpcy5hY3Rpb24uY29sdW1ucyx0aGlzLmhlaWdodD0odGhpcy5hY3Rpb24uZW5kWzFdLXRoaXMuYWN0aW9uLnN0YXJ0WzFdKS90aGlzLmFjdGlvbi5yb3dzLHRoaXMuY3ljbGU9MCx0aGlzLm9wZW49ZnVuY3Rpb24oKXt2YXIgY29sdW1uLHJvdztjdHguc2F2ZSgpLGN0eC50cmFuc2xhdGUodGhpcy5wb3NpdGlvblswXSx0aGlzLnBvc2l0aW9uWzFdKSxjdHgudHJhbnNsYXRlKHRoaXMud2lkdGgvMix0aGlzLmhlaWdodC8yKSxzdGFydGVkPyhjb2x1bW49dGhpcy5jeWNsZSV0aGlzLmFjdGlvbi5jb2x1bW5zLHJvdz1NYXRoLmZsb29yKHRoaXMuY3ljbGUvdGhpcy5hY3Rpb24uY29sdW1ucyksdGhpcy5jeWNsZTw5JiZ0aGlzLmN5Y2xlKyspOihjb2x1bW49MCxyb3c9MCksY3R4LmRyYXdJbWFnZShkZWNvckltYWdlLHRoaXMud2lkdGgqY29sdW1uK3RoaXMuYWN0aW9uLnN0YXJ0WzBdLHRoaXMuaGVpZ2h0KnJvdyt0aGlzLmFjdGlvbi5zdGFydFsxXS0xLHRoaXMud2lkdGgsdGhpcy5oZWlnaHQsMCwwLDIqdGhpcy53aWR0aCwyKnRoaXMuaGVpZ2h0KSxjdHgucmVzdG9yZSgpfX07IWZ1bmN0aW9uIGRyYXcoKXtpZihjdHguY2xlYXJSZWN0KDAsMCxjYW52YXMud2lkdGgsY2FudmFzLmhlaWdodCksc3RhcnRlZClmb3IodmFyIGkgaW4gbGVtbWluZ3MpbGVtbWluZ3NbaV0ubW92ZSgpO2Vsc2UgY3R4LmJlZ2luUGF0aCgpLGN0eC5mb250PVwiNDBweCBNb25vdG9uXCIsY3R4LmxpbmVXaWR0aD1cIjEwXCIsY3R4LnN0cm9rZVN0eWxlPVwiYmx1ZVwiLGN0eC5yZWN0KDE1LGNhbnZhcy5oZWlnaHQtNDUsY3R4Lm1lYXN1cmVUZXh0KFwiU3RhcnRcIikud2lkdGgrMjAsY3R4Lm1lYXN1cmVUZXh0KFwiU3RhcnRcIikuaGVpZ2h0K2NhbnZhcy5oZWlnaHQtNDUpLGN0eC5maWxsKCksY3R4LmZpbGxUZXh0KFwiU3RhcnRcIiwyMCxjYW52YXMuaGVpZ2h0LTUwKTtoYXRjaC5vcGVuKCksc3RhcnRlZD0hMCxzZXRUaW1lb3V0KChmdW5jdGlvbigpe2RyYXcoKX0pLDE1MCl9KCl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkxpc3RzQ3RybFwiLFtcIiRzY29wZVwiLFwiJGxvY2F0aW9uXCIsXCJDYXRlZ29yaWVzU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRsb2NhdGlvbixDYXRlZ29yaWVzU3ZjKXskc2NvcGUuc2hvd0NhdGVnb3J5PSEwLCRzY29wZS5pbml0PWZ1bmN0aW9uKCl7Q2F0ZWdvcmllc1N2Yy5nZXRDYXRlZ29yaWVzKCkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2Upe2Zvcih2YXIgaSBpbiAkc2NvcGUuY2F0ZWdvcmllcz1yZXNwb25zZS5kYXRhLCRzY29wZS50YXNrcz1bXSwkc2NvcGUuY2F0ZWdvcmllcylmb3IodmFyIGogaW4gJHNjb3BlLmNhdGVnb3JpZXNbaV0udGFza3MpJHNjb3BlLnRhc2tzLnB1c2goe2NhdGVnb3J5OiRzY29wZS5jYXRlZ29yaWVzW2ldLm5hbWUsdGFzazokc2NvcGUuY2F0ZWdvcmllc1tpXS50YXNrc1tqXS5uYW1lfSl9KSl9LCRzY29wZS5zZWxlY3RDYXRlZ29yeT1mdW5jdGlvbihjYXRlZ29yeSl7Zm9yKHZhciBpIGluICRzY29wZS5zZWxlY3RlZENhdGVnb3J5PWNhdGVnb3J5LCRzY29wZS5zZWxlY3RlZFRhc2tzPVtdLCRzY29wZS5zZWxlY3RhYmxlVGFza3M9W10sJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MpJHNjb3BlLnNlbGVjdGFibGVUYXNrcy5wdXNoKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldKTskc2NvcGUuc2hvd0NhdGVnb3J5PSExLCRzY29wZS5lbnRlcmVkQ2F0ZWdvcnk9XCJcIn0sJHNjb3BlLm5ld0NhdGVnb3J5PWZ1bmN0aW9uKGNhdGVnb3J5KXtmb3IodmFyIGZvdW5kPSExLGk9MDtpPCRzY29wZS5jYXRlZ29yaWVzLmxlbmd0aDtpKyspJHNjb3BlLmNhdGVnb3JpZXNbaV0ubmFtZT09PWNhdGVnb3J5JiYoJHNjb3BlLnNlbGVjdENhdGVnb3J5KCRzY29wZS5jYXRlZ29yaWVzW2ldKSxmb3VuZD0hMCk7Zm91bmR8fENhdGVnb3JpZXNTdmMuYWRkQ2F0ZWdvcnkoe2NhdGVnb3J5fSkudGhlbigoZnVuY3Rpb24oY2F0ZWdvcnkpeyRzY29wZS5pbml0KCksJHNjb3BlLnNlbGVjdENhdGVnb3J5KGNhdGVnb3J5KX0pKSwkc2NvcGUuZW50ZXJlZENhdGVnb3J5PVwiXCJ9LCRzY29wZS5uZXdUYXNrPWZ1bmN0aW9uKHRhc2spe3ZhciBmb3VuZD0hMTtmb3IodmFyIGkgaW4gJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MpJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0ubmFtZT09PXRhc2smJihmb3VuZD0hMCwkc2NvcGUuc2VsZWN0VGFzaygkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXSkpO2ZvdW5kfHxDYXRlZ29yaWVzU3ZjLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkubmFtZSx7dGFza30pLnRoZW4oKGZ1bmN0aW9uKCl7JHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MucHVzaCh7bmFtZTp0YXNrfSksJHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MubGVuZ3RoLTFdKX0pKSwkc2NvcGUuZW50ZXJlZFRhc2s9XCJcIn0sJHNjb3BlLnNlbGVjdFRhc2s9ZnVuY3Rpb24odGFzayl7JHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsdGFzayksJHNjb3BlLnJlbW92ZVRhc2soJHNjb3BlLnNlbGVjdGFibGVUYXNrcyx0YXNrKSwkc2NvcGUuZW50ZXJlZFRhc2s9XCJcIn0sJHNjb3BlLnVuc2VsZWN0VGFzaz1mdW5jdGlvbih0YXNrKXskc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLHRhc2spLCRzY29wZS5yZW1vdmVUYXNrKCRzY29wZS5zZWxlY3RlZFRhc2tzLHRhc2spfSwkc2NvcGUuYWRkVGFzaz1mdW5jdGlvbih0YXNrTGlzdCx0YXNrKXt0YXNrTGlzdC5wdXNoKHRhc2spfSwkc2NvcGUucmVtb3ZlVGFzaz1mdW5jdGlvbih0YXNrTGlzdCx0YXNrKXt0YXNrTGlzdC5zcGxpY2UodGFza0xpc3QuaW5kZXhPZih0YXNrKSwxKX0sJHNjb3BlLnN0YXJ0UHJpb3JpdGl6aW5nPWZ1bmN0aW9uKCl7Q2F0ZWdvcmllc1N2Yy5zZXRQcmlvcml0eUxpc3QoJHNjb3BlLnNlbGVjdGVkVGFza3MpLCRsb2NhdGlvbi5wYXRoKFwiL3ByaW9yaXRpemVcIil9LCRzY29wZS5nZXRRdWVzdGlvbnM9ZnVuY3Rpb24oKXtpZighJHNjb3BlLnNlbGVjdGVkVGFza3MpcmV0dXJuXCJcIjtmb3IodmFyIGNvdW50ZXI9MCxpPSRzY29wZS5zZWxlY3RlZFRhc2tzLmxlbmd0aC0xO2k+MDtpLS0pY291bnRlcis9aTtyZXR1cm4gY291bnRlcn19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkxvZ2luQ3RybFwiLFtcIiRzY29wZVwiLFwiJGxvY2F0aW9uXCIsXCJVc2VyU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRsb2NhdGlvbixVc2VyU3ZjKXt2YXIgdWk9bmV3IGZpcmViYXNldWkuYXV0aC5BdXRoVUkoZmlyZWJhc2UuYXV0aCgpKTtmdW5jdGlvbiBzdGFydFVJKCl7dWkuc3RhcnQoXCIjZmlyZWJhc2V1aS1hdXRoLWNvbnRhaW5lclwiLHtjYWxsYmFja3M6e3NpZ25JblN1Y2Nlc3M6ZnVuY3Rpb24oY3VycmVudFVzZXIsY3JlZGVudGlhbCxyZWRpcmVjdFVybCl7cmV0dXJuIGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlci5nZXRJZFRva2VuKCEwKS50aGVuKChmdW5jdGlvbihpZFRva2VuKXtVc2VyU3ZjLmF1dGhlbnRpY2F0ZSh7ZGlzcGxheU5hbWU6Y3VycmVudFVzZXIuZGlzcGxheU5hbWUsZW1haWw6Y3VycmVudFVzZXIuZW1haWwscGhvdG9VUkw6Y3VycmVudFVzZXIucGhvdG9VUkwsZW1haWxWZXJpZmllZDpjdXJyZW50VXNlci5lbWFpbFZlcmlmaWVkLGlkVG9rZW59KS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwibG9naW5cIixyZXNwb25zZS5kYXRhKSwkKFwiI21vZGFsLWxvZ2luXCIpLm1vZGFsKFwiaGlkZVwiKX0pLChmdW5jdGlvbigpeyRzY29wZS4kZW1pdChcInBvcHVwXCIse21lc3NhZ2U6XCJMb2dpbiBGYWlsZWRcIix0eXBlOlwiYWxlcnQtZGFuZ2VyXCJ9KX0pKX0pKS5jYXRjaCgoZnVuY3Rpb24oZXJyb3Ipe30pKSwhMX0sc2lnbkluRmFpbHVyZTpmdW5jdGlvbihlcnJvcil7aWYoXCJmaXJlYmFzZXVpL2Fub255bW91cy11cGdyYWRlLW1lcmdlLWNvbmZsaWN0XCIhPWVycm9yLmNvZGUpcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO3ZhciBjcmVkPWVycm9yLmNyZWRlbnRpYWw7cmV0dXJuIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoQ3JlZGVudGlhbChjcmVkKX0sdWlTaG93bjpmdW5jdGlvbigpe2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9hZGVyXCIpLnN0eWxlLmRpc3BsYXk9XCJub25lXCJ9fSxzaWduSW5TdWNjZXNzVXJsOlwiL2hvbWVcIixzaWduSW5PcHRpb25zOltmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRCxmaXJlYmFzZS5hdXRoLkZhY2Vib29rQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEXSxzaWduSW5GbG93OlwicG9wdXBcIn0pfSRzY29wZS4kb24oXCJsb2dvdXRcIiwoZnVuY3Rpb24oZXZlbnQpe3VpLnJlc2V0KCksc3RhcnRVSSgpfSkpLHN0YXJ0VUkoKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiUG9zdHNDdHJsXCIsW1wiJHNjb3BlXCIsXCIkZmlsdGVyXCIsXCJQb3N0c1N2Y1wiLGZ1bmN0aW9uKCRzY29wZSwkZmlsdGVyLFBvc3RzU3ZjKXskc2NvcGUuYWRkUG9zdD1mdW5jdGlvbigpeyRzY29wZS5wb3N0Qm9keSYmUG9zdHNTdmMuY3JlYXRlKHtib2R5OiRzY29wZS5wb3N0Qm9keX0pLnRoZW4oKGZ1bmN0aW9uKHBvc3QpeyRzY29wZS5wb3N0Qm9keT1udWxsfSkpfSxQb3N0c1N2Yy5mZXRjaCgpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUucG9zdHM9cmVzcG9uc2UuZGF0YX0pKSwkc2NvcGUuJG9uKFwid3M6bmV3X3Bvc3RcIiwoZnVuY3Rpb24oXyxwb3N0KXskc2NvcGUuJGFwcGx5KChmdW5jdGlvbigpe1Bvc3RzU3ZjLmdldFBvc3QocG9zdCkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5wb3N0cy51bnNoaWZ0KHJlc3BvbnNlLmRhdGEpfSkpfSkpfSkpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJQcmlvcml0aXplQ3RybFwiLFtcIiRzY29wZVwiLFwiJGxvY2F0aW9uXCIsXCJDYXRlZ29yaWVzU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRsb2NhdGlvbixDYXRlZ29yaWVzU3ZjKXskc2NvcGUucHJpb3JpdHlMaXN0PUNhdGVnb3JpZXNTdmMuZ2V0UHJpb3JpdHlMaXN0KCksJHNjb3BlLnByaW9yaXR5TGlzdD8oJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb249MSwkc2NvcGUuY3VycmVudFF1ZXN0aW9uPTEsJHNjb3BlLmRvbmU9ITEpOiRsb2NhdGlvbi5wYXRoKFwiL2xpc3RzXCIpLCRzY29wZS5tYWtlQ2hvaWNlPWZ1bmN0aW9uKGNob2ljZSl7Zm9yKHZhciBpIGluICRzY29wZS5wcmlvcml0eUxpc3QpJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZD09PSRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uJiYoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2U9MT09PWNob2ljZT8kc2NvcGUucHJpb3JpdHlMaXN0W2ldLmZpcnN0Q2hvaWNlOiRzY29wZS5wcmlvcml0eUxpc3RbaV0uc2Vjb25kQ2hvaWNlKTskc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbj09PSRzY29wZS5jdXJyZW50UXVlc3Rpb24mJigkc2NvcGUuY3VycmVudFF1ZXN0aW9uPSRzY29wZS5jdXJyZW50UXVlc3Rpb249PT0kc2NvcGUucHJpb3JpdHlMaXN0Lmxlbmd0aD8xOiRzY29wZS5jdXJyZW50UXVlc3Rpb24rMSksJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb249JHNjb3BlLmN1cnJlbnRRdWVzdGlvbjt2YXIgZm91bmQ9ITE7Zm9yKGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdClpZihcIlwiPT09JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2Upe2ZvdW5kPSEwO2JyZWFrfWZvdW5kfHwoJChcIiNwcmlvcml0aXplQ2hvaWNlc1wiKS5oaWRlKDMwMCksJHNjb3BlLmRvbmU9ITApfSwkc2NvcGUuZ2V0QnV0dG9uVmFsdWU9ZnVuY3Rpb24oY2hvaWNlKXtpZighJHNjb3BlLnByaW9yaXR5TGlzdClyZXR1cm5cIlwiO2Zvcih2YXIgaT0wO2k8JHNjb3BlLnByaW9yaXR5TGlzdC5sZW5ndGg7aSsrKWlmKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQ9PT0kc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbilyZXR1cm4gMT09PWNob2ljZT8kc2NvcGUucHJpb3JpdHlMaXN0W2ldLmZpcnN0Q2hvaWNlOiRzY29wZS5wcmlvcml0eUxpc3RbaV0uc2Vjb25kQ2hvaWNlfSwkc2NvcGUuc2VsZWN0UXVlc3Rpb249ZnVuY3Rpb24ocXVlc3Rpb24peyRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uPXF1ZXN0aW9ufSwkc2NvcGUuZ2V0RmlsdGVyZWRQcmlvcml0eUxpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gJHNjb3BlLnByaW9yaXR5TGlzdD8kc2NvcGUucHJpb3JpdHlMaXN0LnNvcnQoKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuaWQtYi5pZH0pKS5maWx0ZXIoKGZ1bmN0aW9uKHF1ZXN0aW9uKXtyZXR1cm5cIlwiIT09cXVlc3Rpb24uY2hvaWNlfHxxdWVzdGlvbi5pZD09PSRzY29wZS5jdXJyZW50UXVlc3Rpb259KSk6W119LCRzY29wZS5nZXRDaG9pY2VzTWFkZT1mdW5jdGlvbigpe2lmKCEkc2NvcGUucHJpb3JpdHlMaXN0KXJldHVyblwiXCI7dmFyIGNob2ljZXNNYWRlPTA7Zm9yKHZhciBpIGluICRzY29wZS5wcmlvcml0eUxpc3QpXCJcIiE9PSRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlJiZjaG9pY2VzTWFkZSsrO3JldHVybiBjaG9pY2VzTWFkZX0sJHNjb3BlLmdldEJ1dHRvbkNsYXNzPWZ1bmN0aW9uKGNob2ljZSl7aWYoISRzY29wZS5wcmlvcml0eUxpc3QpcmV0dXJuXCJcIjtmb3IodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdClpZigkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkPT09JHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24pcmV0dXJuXCJcIj09PSRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlP1wiYnRuLXByaW1hcnlcIjoxPT09Y2hvaWNlPyRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2U9PT0kc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZT9cImJ0bi1zdWNjZXNzXCI6XCJidG4tZGFuZ2VyXCI6JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2U9PT0kc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZT9cImJ0bi1zdWNjZXNzXCI6XCJidG4tZGFuZ2VyXCJ9LCRzY29wZS5zaG93Q2hvaWNlcz1mdW5jdGlvbigpeyQoXCIjcHJpb3JpdGl6ZUNob2ljZXNcIikuc2hvdygxZTMpLCQoXCIjcmV2aWV3Q2hvaWNlc1wiKS5oaWRlKCl9LCRzY29wZS5jaGFydENsaWNrPWZ1bmN0aW9uKGV2ZW50KXskc2NvcGUuY2hhcnQmJmNvbnNvbGUubG9nKCRzY29wZS5jaGFydC5nZXRTZWdtZW50c0F0RXZlbnQoZXZlbnQpKX0sJHNjb3BlLnNob3dSZXN1bHRzPWZ1bmN0aW9uKCl7Zm9yKHZhciBpIGluICRzY29wZS5kYXRhPVtdLCRzY29wZS5vcHRpb25zPXtyZXNwb25zaXZlOiEwLHNlZ21lbnRTaG93U3Ryb2tlOiEwLHNlZ21lbnRTdHJva2VDb2xvcjpcIiNmZmZcIixzZWdtZW50U3Ryb2tlV2lkdGg6MixwZXJjZW50YWdlSW5uZXJDdXRvdXQ6MCxhbmltYXRpb25TdGVwczoxMDAsYW5pbWF0aW9uRWFzaW5nOlwiZWFzZU91dEJvdW5jZVwiLGFuaW1hdGVSb3RhdGU6ITAsYW5pbWF0ZVNjYWxlOiExLGxlZ2VuZFRlbXBsYXRlOic8aDMgY2xhc3M9XCJ0Yy1jaGFydC1qcy1sZWdlbmRcIiBzdHlsZT1cInBhZGRpbmc6NXB4XCI+PCUgZm9yICh2YXIgaT0wOyBpPHNlZ21lbnRzLmxlbmd0aDsgaSsrKXslPjxkaXYgY2xhc3M9XCJsYWJlbFwiIHN0eWxlPVwiZmxvYXQ6bGVmdDttYXJnaW46NXB4O2JhY2tncm91bmQtY29sb3I6PCU9c2VnbWVudHNbaV0uZmlsbENvbG9yJT5cIj48JWlmKHNlZ21lbnRzW2ldLmxhYmVsKXslPjwlPXNlZ21lbnRzW2ldLmxhYmVsJT48JX0lPjwvZGl2PjwlfSU+PC9oMz4nfSxDYXRlZ29yaWVzU3ZjLmNob2ljZXMpZm9yKHZhciBqIGluIENhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS52b3Rlcz0wLCRzY29wZS5wcmlvcml0eUxpc3QpQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLm5hbWU9PT0kc2NvcGUucHJpb3JpdHlMaXN0W2pdLmNob2ljZSYmQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzKys7Zm9yKGkgaW4gQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzLnNvcnQoKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEudm90ZXM8Yi52b3Rlc30pKSxDYXRlZ29yaWVzU3ZjLmNob2ljZXMpJHNjb3BlLmRhdGEucHVzaCh7dmFsdWU6Q2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzLGxhYmVsOkNhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS5uYW1lfSk7JChcIiNwcmlvcml0aXplUmVzdWx0XCIpLmhpZGUoKSwkKFwiI3ByaW9yaXRpemVDaG9pY2VzXCIpLmhpZGUoKSwkKFwiI3ByaW9yaXR5UmVzdWx0c1wiKS5zaG93KDFlMyl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJQcm9maWxlQ3RybFwiLFtcIiRzY29wZVwiLFwiJGxvY2F0aW9uXCIsXCJVc2VyU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRsb2NhdGlvbixVc2VyU3ZjKXskc2NvcGUuY3VycmVudFVzZXI/KCQoXCIjc2V4LWluZGljYXRvclwiKS5vZmZzZXQoe2xlZnQ6JHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlci5zZXgvMjAwKiQoXCIjc2V4XCIpLndpZHRoKCkrJChcIiNzZXhcIikub2Zmc2V0KCkubGVmdH0pLCQoXCIjaWRlbnRpdHktaW5kaWNhdG9yXCIpLm9mZnNldCh7bGVmdDokc2NvcGUuY3VycmVudFVzZXIuZ2VuZGVyLmlkZW50aXR5LzIwMCokKFwiI2lkZW50aXR5XCIpLndpZHRoKCkrJChcIiNpZGVudGl0eVwiKS5vZmZzZXQoKS5sZWZ0fSkpOiRsb2NhdGlvbi5wYXRoKFwiL1wiKSwkc2NvcGUuc2V4ZXM9W1wiTWFsZVwiLFwiRnRNIE1hbGVcIixcIkludGVyc2V4XCIsXCJNdEYgRmVtYWxlXCIsXCJGZW1hbGVcIl0sJHNjb3BlLmlkZW50aXRpZXM9W1wiTWFuXCIsXCJCaWdlbmRlclwiLFwiUGFuZ2VuZGVyXCIsXCJBZ2VuZGVyXCIsXCJQb2x5Z2VuZGVyXCIsXCJHZW5kZXJmbHVpZFwiLFwiR2VuZGVycXVlZXJcIixcIlF1ZWVyXCIsXCJXb21hblwiXSwkc2NvcGUuZGF0ZU9wdGlvbnM9e21heERhdGU6bmV3IERhdGUsbWluRGF0ZTpuZXcgRGF0ZSgxOTAwLDEsMSksaW5pdERhdGU6bmV3IERhdGUoMmUzLDEsMSksZGF0ZXBpY2tlck1vZGU6XCJ5ZWFyXCJ9LCRzY29wZS5nZW5kZXI9ZnVuY3Rpb24oYXJyYXkscGVyY2VudGFnZSl7cmV0dXJuIGFycmF5W01hdGgucm91bmQocGVyY2VudGFnZS8yMDAqKGFycmF5Lmxlbmd0aC0xKSldfSwkc2NvcGUuc3RhcnRTbGlkZXI9ZnVuY3Rpb24oKXt9LCRzY29wZS5kcmFnU2xpZGVyPWZ1bmN0aW9uKGV2ZW50LHVpLHR5cGUpeyRzY29wZS5jdXJyZW50VXNlci5nZW5kZXJbdHlwZV09TWF0aC5yb3VuZCgoJChcIiNcIit0eXBlK1wiLWluZGljYXRvclwiKS5vZmZzZXQoKS5sZWZ0LSQoXCIjXCIrdHlwZSkub2Zmc2V0KCkubGVmdCkvKCQoXCIjXCIrdHlwZSkud2lkdGgoKS0kKFwiI1wiK3R5cGUrXCItaW5kaWNhdG9yXCIpLndpZHRoKCkpKjIwMCksJHNjb3BlLiRhcHBseSgpfSwkc2NvcGUuc3RvcFNsaWRlcj1mdW5jdGlvbigpe30sJHNjb3BlLnVzZXJuYW1lVG9nZ2xlPSEwLCRzY29wZS5wYXNzd29yZFRvZ2dsZT0hMCwkc2NvcGUudG9nZ2xlVXNlcm5hbWU9ZnVuY3Rpb24oKXskc2NvcGUudXNlcm5hbWVUb2dnbGU9ISRzY29wZS51c2VybmFtZVRvZ2dsZSwkc2NvcGUubmV3VXNlcm5hbWU9JHNjb3BlLmN1cnJlbnRVc2VyLnVzZXJuYW1lfSwkc2NvcGUudG9nZ2xlUGFzc3dvcmQ9ZnVuY3Rpb24oKXskc2NvcGUubmV3UGFzc3dvcmQ9bnVsbCwkc2NvcGUuY29uZmlybVBhc3N3b3JkPW51bGwsJHNjb3BlLnBhc3N3b3JkVG9nZ2xlPSEkc2NvcGUucGFzc3dvcmRUb2dnbGV9LCRzY29wZS5jaGVja1Bhc3N3b3JkPWZ1bmN0aW9uKHBhc3N3b3JkKXtpZihwYXNzd29yZCl7dmFyIHVzZXI9JHNjb3BlLmN1cnJlbnRVc2VyLl9pZDtVc2VyU3ZjLmNoZWNrUGFzc3dvcmQodXNlcixwYXNzd29yZCkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS50b2dnbGVQYXNzd29yZCgpfSksKGZ1bmN0aW9uKCl7dmFyIG9yaWdpbmFsQmc9JChcIi5wYXNzd29yZFwiKS5jc3MoXCJiYWNrZ3JvdW5kQ29sb3JcIik7JChcIi5wYXNzd29yZFwiKS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6XCIjRkZCNkMxXCJ9LDIwMCkuYW5pbWF0ZSh7YmFja2dyb3VuZENvbG9yOm9yaWdpbmFsQmd9LDIwMCl9KSl9fSwkc2NvcGUuY2hhbmdlUGFzc3dvcmQ9ZnVuY3Rpb24ob2xkUGFzc3dvcmQsbmV3UGFzc3dvcmQsY29uZmlybVBhc3N3b3JkKXtpZihuZXdQYXNzd29yZClpZihuZXdQYXNzd29yZD09Y29uZmlybVBhc3N3b3JkKXt2YXIgdXNlcj0kc2NvcGUuY3VycmVudFVzZXIuX2lkO1VzZXJTdmMuY2hhbmdlUGFzc3dvcmQodXNlcixvbGRQYXNzd29yZCxuZXdQYXNzd29yZCkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS4kZW1pdChcInBvcHVwXCIse21lc3NhZ2U6XCJQYXNzd29yZCBDaGFuZ2VkXCIsdHlwZTpcImFsZXJ0LXN1Y2Nlc3NcIn0pLCRzY29wZS5vbGRQYXNzd29yZD1udWxsLCRzY29wZS50b2dnbGVQYXNzd29yZCgpfSksKGZ1bmN0aW9uKCl7JHNjb3BlLiRlbWl0KFwicG9wdXBcIix7bWVzc2FnZTpcIlBhc3N3b3JkIENoYW5nZSBGYWlsZWRcIix0eXBlOlwiYWxlcnQtZGFuZ2VyXCJ9KX0pKX1lbHNle3ZhciBvcmlnaW5hbEJnPSQoXCIucGFzc3dvcmRcIikuY3NzKFwiYmFja2dyb3VuZENvbG9yXCIpOyQoXCIucGFzc3dvcmRcIikuYW5pbWF0ZSh7YmFja2dyb3VuZENvbG9yOlwiI0ZGQjZDMVwifSwyMDApLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjpvcmlnaW5hbEJnfSwyMDApfX0sJHNjb3BlLmNoYW5nZVVzZXJuYW1lPWZ1bmN0aW9uKHVzZXJuYW1lKXskc2NvcGUuJGVtaXQoXCJsb2FkaW5nXCIpLFVzZXJTdmMuY2hhbmdlVXNlcm5hbWUoJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCx1c2VybmFtZSkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS4kZW1pdChcInVwZGF0ZVwiLHJlc3BvbnNlLmRhdGEpfSksKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuJGVtaXQoXCJwb3B1cFwiLHttZXNzYWdlOnVzZXJuYW1lK1wiIGFscmVhZHkgaW4gdXNlXCIsdHlwZTpcImFsZXJ0LWRhbmdlclwifSl9KSl9LCRzY29wZS51cGRhdGVVc2VyPWZ1bmN0aW9uKCl7JHNjb3BlLmN1cnJlbnRVc2VyJiYoJHNjb3BlLiRlbWl0KFwibG9hZGluZ1wiKSxVc2VyU3ZjLnVwZGF0ZVVzZXIoJHNjb3BlLmN1cnJlbnRVc2VyKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwidXBkYXRlXCIscmVzcG9uc2UuZGF0YSl9KSkpfSwkc2NvcGUuJHdhdGNoKFwiY3VycmVudFVzZXIuZmxhZ3MubGVuZ3RoXCIsKGZ1bmN0aW9uKGxlbmd0aCl7JHNjb3BlLnVwZGF0ZVVzZXIoKX0pKSwkc2NvcGUubG9hZENvdW50cmllcz1mdW5jdGlvbigkcXVlcnkpe3JldHVyblt7bmFtZTpcIkFuZG9ycmFcIixmbGFnOlwiZmxhZy1hZFwiLHRpZGJpdDpcIlwifSx7bmFtZTpcIlVuaXRlZCBBcmFiIEVtaXJhdGVzXCIsZmxhZzpcImZsYWctYWVcIn0se25hbWU6XCJBZmdoYW5pc3RhblwiLGZsYWc6XCJmbGFnLWFmXCJ9LHtuYW1lOlwiQW50aWd1YSBhbmQgQmFyYnVkYVwiLGZsYWc6XCJmbGFnLWFnXCJ9LHtuYW1lOlwiQW5ndWlsbGFcIixmbGFnOlwiZmxhZy1haVwifSx7bmFtZTpcIkFsYmFuaWFcIixmbGFnOlwiZmxhZy1hbFwifSx7bmFtZTpcIkFybWVuaWFcIixmbGFnOlwiZmxhZy1hbVwifSx7bmFtZTpcIkFuZ29sYVwiLGZsYWc6XCJmbGFnLWFvXCJ9LHtuYW1lOlwiQW50YXJjdGljYVwiLGZsYWc6XCJmbGFnLWFxXCJ9LHtuYW1lOlwiQXJnZW50aW5hXCIsZmxhZzpcImZsYWctYXJcIn0se25hbWU6XCJBbWVyaWNhbiBTb21vYVwiLGZsYWc6XCJmbGFnLWFzXCJ9LHtuYW1lOlwiQXVzdHJpYVwiLGZsYWc6XCJmbGFnLWF0XCJ9LHtuYW1lOlwiQXVzdHJhbGlhXCIsZmxhZzpcImZsYWctYXVcIn0se25hbWU6XCJBcnViYVwiLGZsYWc6XCJmbGFnLWF3XCJ9LHtuYW1lOlwiw4VsYW5kIElzbGFuZHNcIixmbGFnOlwiZmxhZy1heFwifSx7bmFtZTpcIkF6ZXJiYWlqYW5cIixmbGFnOlwiZmxhZy1helwifSx7bmFtZTpcIkJvc25pYSBhbmQgSGVyemVnb3ZpbmFcIixmbGFnOlwiZmxhZy1iYVwifSx7bmFtZTpcIkJhcmJhZG9zXCIsZmxhZzpcImZsYWctYmJcIn0se25hbWU6XCJCYW5nbGFkZXNoXCIsZmxhZzpcImZsYWctYmRcIn0se25hbWU6XCJCZWxnaXVtXCIsZmxhZzpcImZsYWctYmVcIn0se25hbWU6XCJCdXJraW5hIEZhc29cIixmbGFnOlwiZmxhZy1iZlwifSx7bmFtZTpcIkJ1bGdhcmlhXCIsZmxhZzpcImZsYWctYmdcIn0se25hbWU6XCJCYWhyYWluXCIsZmxhZzpcImZsYWctYmhcIn0se25hbWU6XCJCdXJ1bmRpXCIsZmxhZzpcImZsYWctYmlcIn0se25hbWU6XCJCZW5pblwiLGZsYWc6XCJmbGFnLWJqXCJ9LHtuYW1lOlwiU2FpbnQgQmFydGjDqWxlbXlcIixmbGFnOlwiZmxhZy1ibFwifSx7bmFtZTpcIkJlcm11ZGFcIixmbGFnOlwiZmxhZy1ibVwifSx7bmFtZTpcIkJydW5laSBcIixmbGFnOlwiZmxhZy1iblwifSx7bmFtZTpcIkJvbGl2aWEsIFBsdXJpbmF0aW9uYWwgU3RhdGUgb2ZcIixmbGFnOlwiZmxhZy1ib1wifSx7bmFtZTpcIkJvbmFpcmUsIFNpbnQgRXVzdGF0aXVzIGFuZCBTYWJhXCIsZmxhZzpcImZsYWctYnFcIn0se25hbWU6XCJCcmF6aWxcIixmbGFnOlwiZmxhZy1iclwifSx7bmFtZTpcIkJhaGFtYXNcIixmbGFnOlwiZmxhZy1ic1wifSx7bmFtZTpcIkJodXRhblwiLGZsYWc6XCJmbGFnLWJ0XCJ9LHtuYW1lOlwiQm91dmV0IElzbGFuZFwiLGZsYWc6XCJmbGFnLWJ2XCJ9LHtuYW1lOlwiQm90c3dhbmFcIixmbGFnOlwiZmxhZy1id1wifSx7bmFtZTpcIkJlbGFydXNcIixmbGFnOlwiZmxhZy1ieVwifSx7bmFtZTpcIkJlbGl6ZVwiLGZsYWc6XCJmbGFnLWJ6XCJ9LHtuYW1lOlwiQ2FuYWRhXCIsZmxhZzpcImZsYWctY2FcIn0se25hbWU6XCJDb2NvcyAoS2VlbGluZykgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWNjXCJ9LHtuYW1lOlwiQ29uZ28sIHRoZSBEZW1vY3JhdGljIFJlcHVibGljIG9mIHRoZVwiLGZsYWc6XCJmbGFnLWNkXCJ9LHtuYW1lOlwiQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljXCIsZmxhZzpcImZsYWctY2ZcIn0se25hbWU6XCJDb25nb1wiLGZsYWc6XCJmbGFnLWNnXCJ9LHtuYW1lOlwiU3dpdHplcmxhbmRcIixmbGFnOlwiZmxhZy1jaFwifSx7bmFtZTpcIkPDtHRlIGQnSXZvaXJlXCIsZmxhZzpcImZsYWctY2lcIn0se25hbWU6XCJDb29rIElzbGFuZHNcIixmbGFnOlwiZmxhZy1ja1wifSx7bmFtZTpcIkNoaWxlXCIsZmxhZzpcImZsYWctY2xcIn0se25hbWU6XCJDYW1lcm9vblwiLGZsYWc6XCJmbGFnLWNtXCJ9LHtuYW1lOlwiQ2hpbmFcIixmbGFnOlwiZmxhZy1jblwifSx7bmFtZTpcIkNvbG9tYmlhXCIsZmxhZzpcImZsYWctY29cIn0se25hbWU6XCJDb3N0YSBSaWNhXCIsZmxhZzpcImZsYWctY3JcIn0se25hbWU6XCJDdWJhXCIsZmxhZzpcImZsYWctY3VcIn0se25hbWU6XCJDYWJvIFZlcmRlXCIsZmxhZzpcImZsYWctY3ZcIn0se25hbWU6XCJDdXJhw6dhb1wiLGZsYWc6XCJmbGFnLWN3XCJ9LHtuYW1lOlwiQ2hyaXN0bWFzIElzbGFuZFwiLGZsYWc6XCJmbGFnLWN4XCJ9LHtuYW1lOlwiQ3lwcnVzXCIsZmxhZzpcImZsYWctY3lcIn0se25hbWU6XCJDemVjaCBSZXB1YmxpY1wiLGZsYWc6XCJmbGFnLWN6XCJ9LHtuYW1lOlwiR2VybWFueVwiLGZsYWc6XCJmbGFnLWRlXCJ9LHtuYW1lOlwiRGppYm91dGlcIixmbGFnOlwiZmxhZy1kalwifSx7bmFtZTpcIkRlbm1hcmtcIixmbGFnOlwiZmxhZy1ka1wifSx7bmFtZTpcIkRvbWluaWNhXCIsZmxhZzpcImZsYWctZG1cIn0se25hbWU6XCJEb21pbmljYW4gUmVwdWJsaWNcIixmbGFnOlwiZmxhZy1kb1wifSx7bmFtZTpcIkFsZ2VyaWFcIixmbGFnOlwiZmxhZy1kelwifSx7bmFtZTpcIkVjdWFkb3JcIixmbGFnOlwiZmxhZy1lY1wifSx7bmFtZTpcIkVzdG9uaWFcIixmbGFnOlwiZmxhZy1lZVwifSx7bmFtZTpcIkVneXB0XCIsZmxhZzpcImZsYWctZWdcIn0se25hbWU6XCJXZXN0ZXJuIFNhaGFyYVwiLGZsYWc6XCJmbGFnLWVoXCJ9LHtuYW1lOlwiRXJpdHJlYVwiLGZsYWc6XCJmbGFnLWVyXCJ9LHtuYW1lOlwiU3BhaW5cIixmbGFnOlwiZmxhZy1lc1wifSx7bmFtZTpcIkV0aGlvcGlhXCIsZmxhZzpcImZsYWctZXRcIn0se25hbWU6XCJGaW5sYW5kXCIsZmxhZzpcImZsYWctZmlcIn0se25hbWU6XCJGaWppXCIsZmxhZzpcImZsYWctZmpcIn0se25hbWU6XCJGYWxrbGFuZCBJc2xhbmRzIChNYWx2aW5hcylcIixmbGFnOlwiZmxhZy1ma1wifSx7bmFtZTpcIk1pY3JvbmVzaWEsIEZlZGVyYXRlZCBTdGF0ZXMgb2ZcIixmbGFnOlwiZmxhZy1mbVwifSx7bmFtZTpcIkZhcm9lIElzbGFuZHNcIixmbGFnOlwiZmxhZy1mb1wifSx7bmFtZTpcIkZyYW5jZVwiLGZsYWc6XCJmbGFnLWZyXCJ9LHtuYW1lOlwiR2Fib25cIixmbGFnOlwiZmxhZy1nYVwifSx7bmFtZTpcIlVuaXRlZCBLaW5nZG9tIG9mIEdyZWF0IEJyaXRhaW4gYW5kIE5vcnRoZXJuIElyZWxhbmRcIixmbGFnOlwiZmxhZy1nYlwifSx7bmFtZTpcIkdyZW5hZGFcIixmbGFnOlwiZmxhZy1nZFwifSx7bmFtZTpcIkdlb3JnaWFcIixmbGFnOlwiZmxhZy1nZVwifSx7bmFtZTpcIkZyZW5jaCBHdWlhbmFcIixmbGFnOlwiZmxhZy1nZlwifSx7bmFtZTpcIkd1ZXJuc2V5XCIsZmxhZzpcImZsYWctZ2dcIn0se25hbWU6XCJHaGFuYVwiLGZsYWc6XCJmbGFnLWdoXCJ9LHtuYW1lOlwiR2licmFsdGFyXCIsZmxhZzpcImZsYWctZ2lcIn0se25hbWU6XCJHcmVlbmxhbmRcIixmbGFnOlwiZmxhZy1nbFwifSx7bmFtZTpcIkdhbWJpYVwiLGZsYWc6XCJmbGFnLWdtXCJ9LHtuYW1lOlwiR3VpbmVhXCIsZmxhZzpcImZsYWctZ25cIn0se25hbWU6XCJHdWFkZWxvdXBlXCIsZmxhZzpcImZsYWctZ3BcIn0se25hbWU6XCJFcXVhdG9yaWFsIEd1aW5lYVwiLGZsYWc6XCJmbGFnLWdxXCJ9LHtuYW1lOlwiR3JlZWNlXCIsZmxhZzpcImZsYWctZ3JcIn0se25hbWU6XCJTb3V0aCBHZW9yZ2lhIGFuZCB0aGUgU291dGggU2FuZHdpY2ggSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWdzXCJ9LHtuYW1lOlwiR3VhdGVtYWxhXCIsZmxhZzpcImZsYWctZ3RcIn0se25hbWU6XCJHdWFtXCIsZmxhZzpcImZsYWctZ3VcIn0se25hbWU6XCJHdWluZWEtQmlzc2F1XCIsZmxhZzpcImZsYWctZ3dcIn0se25hbWU6XCJHdXlhbmFcIixmbGFnOlwiZmxhZy1neVwifSx7bmFtZTpcIkhvbmcgS29uZ1wiLGZsYWc6XCJmbGFnLWhrXCJ9LHtuYW1lOlwiSGVhcmQgSXNsYW5kIGFuZCBNY0RvbmFsZCBJc2xhbmRzXCIsZmxhZzpcImZsYWctaG1cIn0se25hbWU6XCJIb25kdXJhc1wiLGZsYWc6XCJmbGFnLWhuXCJ9LHtuYW1lOlwiQ3JvYXRpYVwiLGZsYWc6XCJmbGFnLWhyXCJ9LHtuYW1lOlwiSGFpdGlcIixmbGFnOlwiZmxhZy1odFwifSx7bmFtZTpcIkh1bmdhcnlcIixmbGFnOlwiZmxhZy1odVwifSx7bmFtZTpcIkluZG9uZXNpYVwiLGZsYWc6XCJmbGFnLWlkXCJ9LHtuYW1lOlwiSXJlbGFuZFwiLGZsYWc6XCJmbGFnLWllXCJ9LHtuYW1lOlwiSXNyYWVsXCIsZmxhZzpcImZsYWctaWxcIn0se25hbWU6XCJJc2xlIG9mIE1hblwiLGZsYWc6XCJmbGFnLWltXCJ9LHtuYW1lOlwiSW5kaWFcIixmbGFnOlwiZmxhZy1pblwifSx7bmFtZTpcIkJyaXRpc2ggSW5kaWFuIE9jZWFuIFRlcnJpdG9yeVwiLGZsYWc6XCJmbGFnLWlvXCJ9LHtuYW1lOlwiSXJhcVwiLGZsYWc6XCJmbGFnLWlxXCJ9LHtuYW1lOlwiSXJhbiwgSXNsYW1pYyBSZXB1YmxpYyBvZlwiLGZsYWc6XCJmbGFnLWlyXCJ9LHtuYW1lOlwiSWNlbGFuZFwiLGZsYWc6XCJmbGFnLWlzXCJ9LHtuYW1lOlwiSXRhbHlcIixmbGFnOlwiZmxhZy1pdFwifSx7bmFtZTpcIkplcnNleVwiLGZsYWc6XCJmbGFnLWplXCJ9LHtuYW1lOlwiSmFtYWljYVwiLGZsYWc6XCJmbGFnLWptXCJ9LHtuYW1lOlwiSm9yZGFuXCIsZmxhZzpcImZsYWctam9cIn0se25hbWU6XCJKYXBhblwiLGZsYWc6XCJmbGFnLWpwXCJ9LHtuYW1lOlwiS2VueWFcIixmbGFnOlwiZmxhZy1rZVwifSx7bmFtZTpcIkt5cmd5enN0YW5cIixmbGFnOlwiZmxhZy1rZ1wifSx7bmFtZTpcIkNhbWJvZGlhXCIsZmxhZzpcImZsYWcta2hcIn0se25hbWU6XCJLaXJpYmF0aVwiLGZsYWc6XCJmbGFnLWtpXCJ9LHtuYW1lOlwiQ29tb3Jvc1wiLGZsYWc6XCJmbGFnLWttXCJ9LHtuYW1lOlwiU2FpbnQgS2l0dHMgYW5kIE5ldmlzXCIsZmxhZzpcImZsYWcta25cIn0se25hbWU6XCJLb3JlYSwgRGVtb2NyYXRpYyBQZW9wbGUncyBSZXB1YmxpYyBvZlwiLGZsYWc6XCJmbGFnLWtwXCJ9LHtuYW1lOlwiS29yZWEsIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWcta3JcIn0se25hbWU6XCJLdXdhaXRcIixmbGFnOlwiZmxhZy1rd1wifSx7bmFtZTpcIkNheW1hbiBJc2xhbmRzXCIsZmxhZzpcImZsYWcta3lcIn0se25hbWU6XCJLYXpha2hzdGFuXCIsZmxhZzpcImZsYWcta3pcIn0se25hbWU6XCJMYW8gUGVvcGxlJ3MgRGVtb2NyYXRpYyBSZXB1YmxpY1wiLGZsYWc6XCJmbGFnLWxhXCJ9LHtuYW1lOlwiTGViYW5vblwiLGZsYWc6XCJmbGFnLWxiXCJ9LHtuYW1lOlwiU2FpbnQgTHVjaWFcIixmbGFnOlwiZmxhZy1sY1wifSx7bmFtZTpcIkxpZWNodGVuc3RlaW5cIixmbGFnOlwiZmxhZy1saVwifSx7bmFtZTpcIlNyaSBMYW5rYVwiLGZsYWc6XCJmbGFnLWxrXCJ9LHtuYW1lOlwiTGliZXJpYVwiLGZsYWc6XCJmbGFnLWxyXCJ9LHtuYW1lOlwiTGVzb3Rob1wiLGZsYWc6XCJmbGFnLWxzXCJ9LHtuYW1lOlwiTGl0aHVhbmlhXCIsZmxhZzpcImZsYWctbHRcIn0se25hbWU6XCJMdXhlbWJvdXJnXCIsZmxhZzpcImZsYWctbHVcIn0se25hbWU6XCJMYXR2aWFcIixmbGFnOlwiZmxhZy1sdlwifSx7bmFtZTpcIkxpYnlhXCIsZmxhZzpcImZsYWctbHlcIn0se25hbWU6XCJNb3JvY2NvXCIsZmxhZzpcImZsYWctbWFcIn0se25hbWU6XCJNb25hY29cIixmbGFnOlwiZmxhZy1tY1wifSx7bmFtZTpcIk1vbGRvdmEsIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWctbWRcIn0se25hbWU6XCJNb250ZW5lZ3JvXCIsZmxhZzpcImZsYWctbWVcIn0se25hbWU6XCJTYWludCBNYXJ0aW4gKEZyZW5jaCBwYXJ0KVwiLGZsYWc6XCJmbGFnLW1mXCJ9LHtuYW1lOlwiTWFkYWdhc2NhclwiLGZsYWc6XCJmbGFnLW1nXCJ9LHtuYW1lOlwiTWFyc2hhbGwgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLW1oXCJ9LHtuYW1lOlwiTWFjZWRvbmlhLCB0aGUgZm9ybWVyIFl1Z29zbGF2IFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWctbWtcIn0se25hbWU6XCJNYWxpXCIsZmxhZzpcImZsYWctbWxcIn0se25hbWU6XCJNeWFubWFyXCIsZmxhZzpcImZsYWctbW1cIn0se25hbWU6XCJNb25nb2xpYVwiLGZsYWc6XCJmbGFnLW1uXCJ9LHtuYW1lOlwiTWFjYW9cIixmbGFnOlwiZmxhZy1tb1wifSx7bmFtZTpcIk5vcnRoZXJuIE1hcmlhbmEgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLW1wXCJ9LHtuYW1lOlwiTWFydGluaXF1ZVwiLGZsYWc6XCJmbGFnLW1xXCJ9LHtuYW1lOlwiTWF1cml0YW5pYVwiLGZsYWc6XCJmbGFnLW1yXCJ9LHtuYW1lOlwiTW9udHNlcnJhdFwiLGZsYWc6XCJmbGFnLW1zXCJ9LHtuYW1lOlwiTWFsdGFcIixmbGFnOlwiZmxhZy1tdFwifSx7bmFtZTpcIk1hdXJpdGl1c1wiLGZsYWc6XCJmbGFnLW11XCJ9LHtuYW1lOlwiTWFsZGl2ZXNcIixmbGFnOlwiZmxhZy1tdlwifSx7bmFtZTpcIk1hbGF3aVwiLGZsYWc6XCJmbGFnLW13XCJ9LHtuYW1lOlwiTWV4aWNvXCIsZmxhZzpcImZsYWctbXhcIn0se25hbWU6XCJNYWxheXNpYVwiLGZsYWc6XCJmbGFnLW15XCJ9LHtuYW1lOlwiTW96YW1iaXF1ZVwiLGZsYWc6XCJmbGFnLW16XCJ9LHtuYW1lOlwiTmFtaWJpYVwiLGZsYWc6XCJmbGFnLW5hXCJ9LHtuYW1lOlwiTmV3IENhbGVkb25pYVwiLGZsYWc6XCJmbGFnLW5jXCJ9LHtuYW1lOlwiTmlnZXJcIixmbGFnOlwiZmxhZy1uZVwifSx7bmFtZTpcIk5vcmZvbGsgSXNsYW5kXCIsZmxhZzpcImZsYWctbmZcIn0se25hbWU6XCJOaWdlcmlhXCIsZmxhZzpcImZsYWctbmdcIn0se25hbWU6XCJOaWNhcmFndWFcIixmbGFnOlwiZmxhZy1uaVwifSx7bmFtZTpcIk5ldGhlcmxhbmRzXCIsZmxhZzpcImZsYWctbmxcIn0se25hbWU6XCJOb3J3YXlcIixmbGFnOlwiZmxhZy1ub1wifSx7bmFtZTpcIk5lcGFsXCIsZmxhZzpcImZsYWctbnBcIn0se25hbWU6XCJOYXVydVwiLGZsYWc6XCJmbGFnLW5yXCJ9LHtuYW1lOlwiTml1ZVwiLGZsYWc6XCJmbGFnLW51XCJ9LHtuYW1lOlwiTmV3IFplYWxhbmRcIixmbGFnOlwiZmxhZy1uelwifSx7bmFtZTpcIk9tYW5cIixmbGFnOlwiZmxhZy1vbVwifSx7bmFtZTpcIlBhbmFtYVwiLGZsYWc6XCJmbGFnLXBhXCJ9LHtuYW1lOlwiUGVydVwiLGZsYWc6XCJmbGFnLXBlXCJ9LHtuYW1lOlwiRnJlbmNoIFBvbHluZXNpYVwiLGZsYWc6XCJmbGFnLXBmXCJ9LHtuYW1lOlwiUGFwdWEgTmV3IEd1aW5lYVwiLGZsYWc6XCJmbGFnLXBnXCJ9LHtuYW1lOlwiUGhpbGlwcGluZXNcIixmbGFnOlwiZmxhZy1waFwifSx7bmFtZTpcIlBha2lzdGFuXCIsZmxhZzpcImZsYWctcGtcIn0se25hbWU6XCJQb2xhbmRcIixmbGFnOlwiZmxhZy1wbFwifSx7bmFtZTpcIlNhaW50IFBpZXJyZSBhbmQgTWlxdWVsb25cIixmbGFnOlwiZmxhZy1wbVwifSx7bmFtZTpcIlBpdGNhaXJuXCIsZmxhZzpcImZsYWctcG5cIn0se25hbWU6XCJQdWVydG8gUmljb1wiLGZsYWc6XCJmbGFnLXByXCJ9LHtuYW1lOlwiUGFsZXN0aW5lLCBTdGF0ZSBvZlwiLGZsYWc6XCJmbGFnLXBzXCJ9LHtuYW1lOlwiUG9ydHVnYWxcIixmbGFnOlwiZmxhZy1wdFwifSx7bmFtZTpcIlBhbGF1XCIsZmxhZzpcImZsYWctcHdcIn0se25hbWU6XCJQYXJhZ3VheVwiLGZsYWc6XCJmbGFnLXB5XCJ9LHtuYW1lOlwiUWF0YXJcIixmbGFnOlwiZmxhZy1xYVwifSx7bmFtZTpcIlLDqXVuaW9uXCIsZmxhZzpcImZsYWctcmVcIn0se25hbWU6XCJSb21hbmlhXCIsZmxhZzpcImZsYWctcm9cIn0se25hbWU6XCJTZXJiaWFcIixmbGFnOlwiZmxhZy1yc1wifSx7bmFtZTpcIlJ1c3NpYW4gRmVkZXJhdGlvblwiLGZsYWc6XCJmbGFnLXJ1XCJ9LHtuYW1lOlwiUndhbmRhXCIsZmxhZzpcImZsYWctcndcIn0se25hbWU6XCJTYXVkaSBBcmFiaWFcIixmbGFnOlwiZmxhZy1zYVwifSx7bmFtZTpcIlNvbG9tb24gSXNsYW5kc1wiLGZsYWc6XCJmbGFnLXNiXCJ9LHtuYW1lOlwiU2V5Y2hlbGxlc1wiLGZsYWc6XCJmbGFnLXNjXCJ9LHtuYW1lOlwiU3VkYW5cIixmbGFnOlwiZmxhZy1zZFwifSx7bmFtZTpcIlN3ZWRlblwiLGZsYWc6XCJmbGFnLXNlXCJ9LHtuYW1lOlwiU2luZ2Fwb3JlXCIsZmxhZzpcImZsYWctc2dcIn0se25hbWU6XCJTYWludCBIZWxlbmEsIEFzY2Vuc2lvbiBhbmQgVHJpc3RhbiBkYSBDdW5oYVwiLGZsYWc6XCJmbGFnLXNoXCJ9LHtuYW1lOlwiU2xvdmVuaWFcIixmbGFnOlwiZmxhZy1zaVwifSx7bmFtZTpcIlN2YWxiYXJkIGFuZCBKYW4gTWF5ZW5cIixmbGFnOlwiZmxhZy1zalwifSx7bmFtZTpcIlNsb3Zha2lhXCIsZmxhZzpcImZsYWctc2tcIn0se25hbWU6XCJTaWVycmEgTGVvbmVcIixmbGFnOlwiZmxhZy1zbFwifSx7bmFtZTpcIlNhbiBNYXJpbm9cIixmbGFnOlwiZmxhZy1zbVwifSx7bmFtZTpcIlNlbmVnYWxcIixmbGFnOlwiZmxhZy1zblwifSx7bmFtZTpcIlNvbWFsaWFcIixmbGFnOlwiZmxhZy1zb1wifSx7bmFtZTpcIlN1cmluYW1lXCIsZmxhZzpcImZsYWctc3JcIn0se25hbWU6XCJTb3V0aCBTdWRhblwiLGZsYWc6XCJmbGFnLXNzXCJ9LHtuYW1lOlwiU2FvIFRvbWUgYW5kIFByaW5jaXBlXCIsZmxhZzpcImZsYWctc3RcIn0se25hbWU6XCJFbCBTYWx2YWRvclwiLGZsYWc6XCJmbGFnLXN2XCJ9LHtuYW1lOlwiU2ludCBNYWFydGVuIChEdXRjaCBwYXJ0KVwiLGZsYWc6XCJmbGFnLXN4XCJ9LHtuYW1lOlwiU3lyaWFuIEFyYWIgUmVwdWJsaWNcIixmbGFnOlwiZmxhZy1zeVwifSx7bmFtZTpcIlN3YXppbGFuZFwiLGZsYWc6XCJmbGFnLXN6XCJ9LHtuYW1lOlwiVHVya3MgYW5kIENhaWNvcyBJc2xhbmRzXCIsZmxhZzpcImZsYWctdGNcIn0se25hbWU6XCJDaGFkXCIsZmxhZzpcImZsYWctdGRcIn0se25hbWU6XCJGcmVuY2ggU291dGhlcm4gVGVycml0b3JpZXNcIixmbGFnOlwiZmxhZy10ZlwifSx7bmFtZTpcIlRvZ29cIixmbGFnOlwiZmxhZy10Z1wifSx7bmFtZTpcIlRoYWlsYW5kXCIsZmxhZzpcImZsYWctdGhcIn0se25hbWU6XCJUYWppa2lzdGFuXCIsZmxhZzpcImZsYWctdGpcIn0se25hbWU6XCJUb2tlbGF1XCIsZmxhZzpcImZsYWctdGtcIn0se25hbWU6XCJUaW1vci1MZXN0ZVwiLGZsYWc6XCJmbGFnLXRsXCJ9LHtuYW1lOlwiVHVya21lbmlzdGFuXCIsZmxhZzpcImZsYWctdG1cIn0se25hbWU6XCJUdW5pc2lhXCIsZmxhZzpcImZsYWctdG5cIn0se25hbWU6XCJUb25nYVwiLGZsYWc6XCJmbGFnLXRvXCJ9LHtuYW1lOlwiVHVya2V5XCIsZmxhZzpcImZsYWctdHJcIn0se25hbWU6XCJUcmluaWRhZCBhbmQgVG9iYWdvXCIsZmxhZzpcImZsYWctdHRcIn0se25hbWU6XCJUdXZhbHVcIixmbGFnOlwiZmxhZy10dlwifSx7bmFtZTpcIlRhaXdhbiwgUHJvdmluY2Ugb2YgQ2hpbmFcIixmbGFnOlwiZmxhZy10d1wifSx7bmFtZTpcIlRhbnphbmlhLCBVbml0ZWQgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy10elwifSx7bmFtZTpcIlVrcmFpbmVcIixmbGFnOlwiZmxhZy11YVwifSx7bmFtZTpcIlVnYW5kYVwiLGZsYWc6XCJmbGFnLXVnXCJ9LHtuYW1lOlwiVW5pdGVkIFN0YXRlcyBNaW5vciBPdXRseWluZyBJc2xhbmRzXCIsZmxhZzpcImZsYWctdW1cIn0se25hbWU6XCJVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2FcIixmbGFnOlwiZmxhZy11c1wifSx7bmFtZTpcIlVydWd1YXlcIixmbGFnOlwiZmxhZy11eVwifSx7bmFtZTpcIlV6YmVraXN0YW5cIixmbGFnOlwiZmxhZy11elwifSx7bmFtZTpcIkhvbHkgU2VlXCIsZmxhZzpcImZsYWctdmFcIn0se25hbWU6XCJTYWludCBWaW5jZW50IGFuZCB0aGUgR3JlbmFkaW5lc1wiLGZsYWc6XCJmbGFnLXZjXCJ9LHtuYW1lOlwiVmVuZXp1ZWxhLCBCb2xpdmFyaWFuIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWctdmVcIn0se25hbWU6XCJWaXJnaW4gSXNsYW5kcywgQnJpdGlzaFwiLGZsYWc6XCJmbGFnLXZnXCJ9LHtuYW1lOlwiVmlyZ2luIElzbGFuZHMsIFUuUy5cIixmbGFnOlwiZmxhZy12aVwifSx7bmFtZTpcIlZpZXQgTmFtXCIsZmxhZzpcImZsYWctdm5cIn0se25hbWU6XCJWYW51YXR1XCIsZmxhZzpcImZsYWctdnVcIn0se25hbWU6XCJXYWxsaXMgYW5kIEZ1dHVuYVwiLGZsYWc6XCJmbGFnLXdmXCJ9LHtuYW1lOlwiU2Ftb2FcIixmbGFnOlwiZmxhZy13c1wifSx7bmFtZTpcIlllbWVuXCIsZmxhZzpcImZsYWcteWVcIn0se25hbWU6XCJNYXlvdHRlXCIsZmxhZzpcImZsYWcteXRcIn0se25hbWU6XCJTb3V0aCBBZnJpY2FcIixmbGFnOlwiZmxhZy16YVwifSx7bmFtZTpcIlphbWJpYVwiLGZsYWc6XCJmbGFnLXptXCJ9LHtuYW1lOlwiWmltYmFid2VcIixmbGFnOlwiZmxhZy16d1wifV0uZmlsdGVyKChmdW5jdGlvbihjb3VudHJ5KXtyZXR1cm4tMSE9Y291bnRyeS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigkcXVlcnkudG9Mb3dlckNhc2UoKSl9KSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJTa2lsbHNDdHJsXCIsW1wiJHNjb3BlXCIsXCIkd2luZG93XCIsZnVuY3Rpb24oJHNjb3BlLCR3aW5kb3cpeyRzY29wZS5zZWxlY3RlZFNraWxsPTAsJHNjb3BlLnNraWxsc1Zpc2libGU9ITEsJHNjb3BlLmxhYmVscz1bXCJEb3dubG9hZCBTYWxlc1wiLFwiSW4tU3RvcmUgU2FsZXNcIixcIk1haWwtT3JkZXIgU2FsZXNcIl0sJHNjb3BlLmRhdGE9WzMwMCw1MDAsMTAwXSwkLmdldEpTT04oXCIvc2tpbGxzLmpzb25cIiwoZnVuY3Rpb24oZGF0YSl7JHNjb3BlLnNraWxscz1kYXRhLmZpbHRlcigoZnVuY3Rpb24oc2tpbGwpe3JldHVybiBza2lsbC5lbmFibGVkfSkpLCRzY29wZS5zZXRTZWxlY3RlZFNraWxsPWZ1bmN0aW9uKHNraWxsKXskc2NvcGUuc2VsZWN0ZWRTa2lsbD1za2lsbCwkc2NvcGUuc2VsZWN0ZWRTa2lsbC5jaGFydE9wdGlvbnM9e2N1dG91dFBlcmNlbnRhZ2U6ODAsY2lyY3VtZmVyZW5jZToyKk1hdGguUEksbWFpbnRhaW5Bc3BlY3RSYXRpbzohMCx0b29sdGlwczp7ZW5hYmxlZDohMX19LCRzY29wZS5zZWxlY3RlZFNraWxsLmNoYXJ0U3R5bGU9e1wiYmFja2dyb3VuZC1pbWFnZVwiOlwidXJsKC9za2lsbHMvXCIrJHNjb3BlLnNlbGVjdGVkU2tpbGwuaW1hZ2UrXCIpXCIsXCJiYWNrZ3JvdW5kLXJlcGVhdFwiOlwibm8tcmVwZWF0XCIsXCJiYWNrZ3JvdW5kLXNpemVcIjpcIjYwJVwiLFwiYmFja2dyb3VuZC1wb3NpdGlvblwiOlwiNTAlIDUwJVwifX0sJHNjb3BlLnNldFNlbGVjdGVkU2tpbGwoJHNjb3BlLnNraWxsc1swXSksJHNjb3BlLiRhcHBseSgpfSkpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJUZW5UaGluZ3NDdHJsXCIsW1wiJHNjb3BlXCIsXCJCb3RTdmNcIixmdW5jdGlvbigkc2NvcGUsQm90U3ZjKXtmdW5jdGlvbiBmbGFzaChlbGVtZW50KXtjb25zdCBjb2xvcj0kKGVsZW1lbnQpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIik7JChlbGVtZW50KS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6XCIjRkE4MDcyXCJ9LDEwMCwoKT0+eyQoZWxlbWVudCkuYW5pbWF0ZSh7YmFja2dyb3VuZENvbG9yOmNvbG9yfSwxMDApfSl9JHNjb3BlLnNlYXJjaD17bmFtZTpcIlwiLHZhbHVlczpcIlwifSxCb3RTdmMuZ2V0Q2F0ZWdvcmllcygpLnRoZW4ocmVzcG9uc2U9Pnskc2NvcGUuY2F0ZWdvcmllcz1yZXNwb25zZS5kYXRhLCRzY29wZS5jYXRlZ29yeUZpbHRlcnM9JHNjb3BlLmNhdGVnb3JpZXMubWFwKGNhdGVnb3J5PT5jYXRlZ29yeSksJHNjb3BlLmNhdGVnb3J5RmlsdGVycy5wdXNoKFwiQWxsXCIpLCRzY29wZS5jYXRlZ29yeUZpbHRlcnMucHVzaChcIkJsYW5rXCIpLCRzY29wZS5jYXRlZ29yeUZpbHRlcj1cIkFsbFwiLCRzY29wZS51cGRhdGVGaWx0ZXI9XCJhbGxcIn0pLEJvdFN2Yy5nZXRMYW5ndWFnZXMoKS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLmxhbmd1YWdlcz1yZXNwb25zZS5kYXRhfSksJHNjb3BlLmtleURvd249ZT0+e3N3aXRjaCgoZT1lfHx3aW5kb3cuZXZlbnQpLmtleUNvZGUpe2Nhc2UgOTokKFwiI25ldy1ibHVyYlwiKS5pcyhcIjpmb2N1c1wiKSYmc2V0VGltZW91dCgoKT0+eyRzY29wZS5hZGRWYWx1ZSgpfSwxMDApO2JyZWFrO2Nhc2UgMTM6JChcIiNuZXctYmx1cmJcIikuaXMoXCI6Zm9jdXNcIik/JHNjb3BlLmFkZFZhbHVlKCk6JChcIiNuZXctdmFsdWVcIikuaXMoXCI6Zm9jdXNcIikmJiQoXCIjbmV3LWJsdXJiXCIpLmZvY3VzKCl9fSwkc2NvcGUuc2VhcmNoTmFtZT1cIlwiLCRzY29wZS5uZXdJdGVtPXt9LCRzY29wZS5zZXRDYXRlZ29yeUZpbHRlcj1jYXRlZ29yeT0+JHNjb3BlLmNhdGVnb3J5RmlsdGVyPWNhdGVnb3J5LCRzY29wZS5zZXRVc2VyRmlsdGVyPXVzZXI9PiRzY29wZS51c2VyRmlsdGVyPXVzZXIsJHNjb3BlLnNldFVwZGF0ZUZpbHRlcj10eXBlPT4kc2NvcGUudXBkYXRlRmlsdGVyPXR5cGUsJHNjb3BlLmZpbHRlcmVkTGlzdHM9KCk9PiRzY29wZS5saXN0cz8kc2NvcGUubGlzdHMuZmlsdGVyKCh7Y2F0ZWdvcmllcyxpc0R5bmFtaWMsY3JlYXRvcn0pPT4oXCJhbGxcIj09PSRzY29wZS51cGRhdGVGaWx0ZXJ8fCEoXCJzdGF0aWNcIj09PSRzY29wZS51cGRhdGVGaWx0ZXImJiEwPT09aXNEeW5hbWljfHxcImR5bmFtaWNcIj09PSRzY29wZS51cGRhdGVGaWx0ZXImJiExPT09aXNEeW5hbWljKSkmJihcIkFsbFwiPT09JHNjb3BlLmNhdGVnb3J5RmlsdGVyJiZcIkFsbFwiPT09JHNjb3BlLnVzZXJGaWx0ZXJ8fChcIkFsbFwiIT09JHNjb3BlLmNhdGVnb3J5RmlsdGVyJiZcIkFsbFwiPT09JHNjb3BlLnVzZXJGaWx0ZXI/Y2F0ZWdvcmllcy5sZW5ndGg+MD9jYXRlZ29yaWVzLmluZGV4T2YoJHNjb3BlLmNhdGVnb3J5RmlsdGVyKT49MDpcIkJsYW5rXCI9PT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXI6XCJBbGxcIj09PSRzY29wZS5jYXRlZ29yeUZpbHRlciYmXCJBbGxcIiE9PSRzY29wZS51c2VyRmlsdGVyP2NyZWF0b3I9PT0kc2NvcGUudXNlckZpbHRlcjpjYXRlZ29yaWVzLmxlbmd0aD4wP2NhdGVnb3JpZXMuaW5kZXhPZigkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIpPj0wJiZjcmVhdG9yPT09JHNjb3BlLnVzZXJGaWx0ZXI6XCJCbGFua1wiPT09JHNjb3BlLmNhdGVnb3J5RmlsdGVyJiZjcmVhdG9yPT09JHNjb3BlLnVzZXJGaWx0ZXIpKSk6W10sJHNjb3BlLiRvbihcImxvZ2luXCIsXz0+eyRzY29wZS5nZXRMaXN0cygpfSksJHNjb3BlLnNvcnQ9KHNvcnRWYWx1ZSxzb3J0TGFiZWwpPT57JHNjb3BlLnNvcnRMYWJlbD1zb3J0TGFiZWwsJHNjb3BlLnNvcnRWYWx1ZT09PXNvcnRWYWx1ZT8kc2NvcGUuc29ydERpcmVjdGlvbj0hJHNjb3BlLnNvcnREaXJlY3Rpb246KCRzY29wZS5zb3J0VmFsdWU9c29ydFZhbHVlLCRzY29wZS5zb3J0RGlyZWN0aW9uPSEwKSwkc2NvcGUuc29ydGVyPSgkc2NvcGUuc29ydERpcmVjdGlvbj9cIitcIjpcIi1cIikrJHNjb3BlLnNvcnRWYWx1ZX0sJHNjb3BlLnNvcnRMaXN0PVwidmFsdWVcIiwkc2NvcGUuc29ydFZhbHVlPVwiZGF0ZVwiLCRzY29wZS5zb3J0RGlyZWN0aW9uPSEwLCRzY29wZS5zb3J0KFwiZGF0ZVwiLFwiQ3JlYXRpb24gRGF0ZVwiKSwkc2NvcGUuZ2V0Q2F0ZWdvcnlDb3VudD1jYXRlZ29yeT0+JHNjb3BlLmxpc3RzPyRzY29wZS5saXN0cy5maWx0ZXIobGlzdD0+KFwiQWxsXCI9PT1jYXRlZ29yeXx8bGlzdC5jYXRlZ29yaWVzLmluZGV4T2YoY2F0ZWdvcnkpPj0wKSYmKFwiQWxsXCI9PT0kc2NvcGUudXNlckZpbHRlcnx8bGlzdC5jcmVhdG9yPT09JHNjb3BlLnVzZXJGaWx0ZXIpJiYoXCJhbGxcIj09PSRzY29wZS51cGRhdGVGaWx0ZXJ8fGxpc3QuaXNEeW5hbWljPT09KFwiZHluYW1pY1wiPT09JHNjb3BlLnVwZGF0ZUZpbHRlcikpKS5sZW5ndGg6MCwkc2NvcGUuZ2V0VXBkYXRlQ291bnQ9dHlwZT0+JHNjb3BlLmxpc3RzPyRzY29wZS5saXN0cy5maWx0ZXIobGlzdD0+XCJhbGxcIj09PXR5cGV8fGxpc3QuaXNEeW5hbWljJiZcImR5bmFtaWNcIj09PXR5cGV8fCFsaXN0LmlzRHluYW1pYyYmXCJzdGF0aWNcIj09PXR5cGUpLmxlbmd0aDowLCRzY29wZS5nZXRMaXN0cz0oKT0+eyRzY29wZS5sb2FkaW5nfHwoJHNjb3BlLmxvYWRpbmc9ITAsQm90U3ZjLmdldExpc3RzKCRzY29wZS5jdXJyZW50VXNlcikudGhlbigoe2RhdGF9KT0+eyRzY29wZS5saXN0cz1kYXRhLCRzY29wZS51c2VyRmlsdGVycz17fSwkc2NvcGUudXNlckZpbHRlcnMuQWxsPSRzY29wZS5saXN0cy5sZW5ndGgsJHNjb3BlLnVzZXJGaWx0ZXJzPSRzY29wZS5saXN0cy5zb3J0KChsaXN0MSxsaXN0Mik9Pmxpc3QxLmNyZWF0b3I+bGlzdDIuY3JlYXRvcikucmVkdWNlKCh1c2Vycyx7Y3JlYXRvcn0pPT4odXNlcnNbY3JlYXRvcl18fCh1c2Vyc1tjcmVhdG9yXT0wKSx1c2Vyc1tjcmVhdG9yXSsrLHVzZXJzKSwkc2NvcGUudXNlckZpbHRlcnMpLCRzY29wZS51c2VyQ291bnQ9T2JqZWN0LmtleXMoJHNjb3BlLnVzZXJGaWx0ZXJzKS5sZW5ndGgsJHNjb3BlLnVzZXJGaWx0ZXJzPXNvcnRPYmplY3QoJHNjb3BlLnVzZXJGaWx0ZXJzLCExKSwkc2NvcGUudXNlckZpbHRlcj1cIkFsbFwiLCRzY29wZS5sb2FkaW5nPSExfSkpfSwkc2NvcGUuc2VsZWN0TGlzdD1saXN0PT57Qm90U3ZjLmdldExpc3QobGlzdCkudGhlbigoe2RhdGF9KT0+eyRzY29wZS5zZWxlY3RlZExpc3Q9ZGF0YX0pfSwkc2NvcGUuc2VsZWN0Q2F0ZWdvcnk9Y2F0ZWdvcnk9Pnskc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3J5PWNhdGVnb3J5LCQoXCIjY2F0ZWdvcnktc2VsZWN0XCIpLmhpZGUoKX0sJHNjb3BlLmdldENhdGVnb3J5Q2xhc3M9Y2F0ZWdvcnk9PiRzY29wZS5zZWxlY3RlZExpc3QmJiRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5pbmRleE9mKGNhdGVnb3J5KT49MD9cImJ0bi1zdWNjZXNzXCI6XCJidG4tZGVmYXVsdFwiLCRzY29wZS50b2dnbGVDYXRlZ29yeT1jYXRlZ29yeT0+e2NvbnN0IGNhdGVnb3J5SW5kZXg9JHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLmluZGV4T2YoY2F0ZWdvcnkpO2NhdGVnb3J5SW5kZXg+PTA/JHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLnNwbGljZShjYXRlZ29yeUluZGV4LDEpOiRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5wdXNoKGNhdGVnb3J5KX0sJHNjb3BlLnNlbGVjdExhbmd1YWdlPWxhbmd1YWdlPT57JHNjb3BlLnNlbGVjdGVkTGlzdC5sYW5ndWFnZT1sYW5ndWFnZS5jb2RlO2NvbnN0IG5vbkVuZ2xpc2hJbmRleD0kc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihcIk5vbi1FbmdsaXNoXCIpO1wiRU5cIiE9PWxhbmd1YWdlLmNvZGUmJm5vbkVuZ2xpc2hJbmRleDwwPyRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5wdXNoKFwiTm9uLUVuZ2xpc2hcIik6XCJFTlwiPT09bGFuZ3VhZ2UuY29kZSYmbm9uRW5nbGlzaEluZGV4Pj0wJiYkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuc3BsaWNlKG5vbkVuZ2xpc2hJbmRleCwxKX0sJHNjb3BlLmFkZExpc3Q9KCk9Pntjb25zdCBjdXJyZW50TGFuZ3VhZ2U9JHNjb3BlLnNlbGVjdGVkTGlzdD8kc2NvcGUuc2VsZWN0ZWRMaXN0Lmxhbmd1YWdlOlwiRU5cIjskc2NvcGUuc2VsZWN0ZWRMaXN0PXtuYW1lOlwiXCIsY3JlYXRvcjokc2NvcGUuY3VycmVudFVzZXIuX2lkLGRhdGU6bmV3IERhdGUsdmFsdWVzOltdLGFuc3dlcnM6MCxpc0R5bmFtaWM6ITAsY2F0ZWdvcnk6XCJcIixjYXRlZ29yaWVzOltdLGxhbmd1YWdlOmN1cnJlbnRMYW5ndWFnZX19LCRzY29wZS5hZGRWYWx1ZT0oKT0+eyRzY29wZS5uZXdJdGVtLnZhbHVlJiYoXy5zb21lKCRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLHZhbHVlPT52YWx1ZT09JHNjb3BlLm5ld0l0ZW0udmFsdWUpP2FsZXJ0KCRzY29wZS5uZXdJdGVtLnZhbHVlK1wiIGlzIGFscmVhZHkgaW4gdGhlIGxpc3RcIik6KCRzY29wZS5uZXdJdGVtLmNyZWF0b3I9JHNjb3BlLmN1cnJlbnRVc2VyLl9pZCwkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcy51bnNoaWZ0KEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoJHNjb3BlLm5ld0l0ZW0pKSksJHNjb3BlLnNlbGVjdGVkTGlzdC5hbnN3ZXJzKyssJHNjb3BlLm5ld0l0ZW0udmFsdWU9XCJcIiwkc2NvcGUubmV3SXRlbS5ibHVyYj1cIlwiLCRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLmxlbmd0aD49MTAmJiRzY29wZS5zZWxlY3RlZExpc3QubmFtZSYmJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLmxlbmd0aD4wJiYkc2NvcGUuc2F2ZUxpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCkpKSwkKFwiI25ldy12YWx1ZVwiKS5mb2N1cygpfSwkc2NvcGUucmVwb3J0TGlzdD1saXN0PT57bGlzdC5yZXBvcnRlZD0hMCxCb3RTdmMucmVwb3J0TGlzdCgkc2NvcGUuY3VycmVudFVzZXIsbGlzdCl9LCRzY29wZS5zYXZlTGlzdD1saXN0PT57JHNjb3BlLnNhdmluZ3x8KGxpc3QudmFsdWVzPWxpc3QudmFsdWVzLmZpbHRlcigoe3ZhbHVlfSk9PnZhbHVlKSxsaXN0LnZhbHVlcy5sZW5ndGg+PTEwJiZsaXN0Lm5hbWUmJmxpc3QuY2F0ZWdvcmllcy5sZW5ndGg+MD8oJHNjb3BlLnNhdmluZz0hMCxCb3RTdmMuc2F2ZUxpc3QoJHNjb3BlLmN1cnJlbnRVc2VyLGxpc3QpLnRoZW4oKHtkYXRhfSk9PntpZigkc2NvcGUuc2VsZWN0ZWRMaXN0Ll9pZCl7Zm9yKGxldCBpPTA7aTwkc2NvcGUubGlzdHMubGVuZ3RoO2krKylpZigkc2NvcGUubGlzdHNbaV0uX2lkPT09ZGF0YS5faWQpeyRzY29wZS5saXN0c1tpXT1kYXRhO2JyZWFrfSRzY29wZS5zZWxlY3RMaXN0KGxpc3QpfWVsc2UgJHNjb3BlLmxpc3RzLnVuc2hpZnQoZGF0YSksJHNjb3BlLnNlbGVjdExpc3QoZGF0YSk7JHNjb3BlLnNhdmluZz0hMX0sZXJyPT57Y29uc29sZS5lcnJvcihlcnIpLCRzY29wZS5zYXZpbmc9ITF9KSk6bGlzdC52YWx1ZXMubGVuZ3RoPDEwP2FsZXJ0KFwiTGlzdHMgbXVzdCBjb250YWluIDEwIG9yIG1vcmUgdmFsdWVzIVwiKTpsaXN0Lm5hbWU/Zmxhc2goXCIubGlzdC1jYXRlZ29yeVwiKTpmbGFzaChcIiNsaXN0LW5hbWVcIikpfSwkc2NvcGUuZGVsZXRlTGlzdD1saXN0PT57bGlzdC5faWQ/Y29uZmlybShcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBsaXN0P1wiKSYmQm90U3ZjLmRlbGV0ZUxpc3QobGlzdCkudGhlbihyZXNwb25zZT0+eyRzY29wZS5nZXRMaXN0cygpLCRzY29wZS5zZWxlY3RlZExpc3Q9bnVsbH0pOigkc2NvcGUubGlzdHM9JHNjb3BlLmxpc3RzLmZpbHRlcigoe19pZH0pPT5faWQpLCRzY29wZS5zZWxlY3RlZExpc3Q9bnVsbCl9LCRzY29wZS5saXN0QnV0dG9uQ2xhc3M9bGlzdD0+e2NvbnN0IHZhbHVlcz1saXN0LnZhbHVlcyxibHVyYnM9bGlzdC5ibHVyYnM7cmV0dXJuIHZhbHVlcz09PWJsdXJicyYmbGlzdC5kZXNjcmlwdGlvbj9cImJ0bi1kZWZhdWx0XCI6MCE9PWJsdXJic3x8bGlzdC5kZXNjcmlwdGlvbj8wPT09Ymx1cmJzJiZsaXN0LmRlc2NyaXB0aW9uP1wiYnRuLWluZm9cIjpcImJ0bi1wcmltYXJ5XCI6XCJidG4td2FybmluZ1wifSwkc2NvcGUuZ2V0TW92aWVQaWNzPSgpPT57Qm90U3ZjLmdldE1vdmllUGljcygkc2NvcGUuc2VsZWN0ZWRMaXN0KS50aGVuKHJlc3BvbnNlPT4kc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJUZW5UaGluZ3NBZG1pbkN0cmxcIixbXCIkc2NvcGVcIixcIkJvdFN2Y1wiLFwiVXNlclN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxCb3RTdmMsVXNlclN2Yyl7JHNjb3BlLiRvbihcImxvZ2luXCIsXz0+eyRzY29wZS5jdXJyZW50VXNlci5hZG1pbiYmZ2V0VXNlcnMoKX0pLCRzY29wZS5nZXRRdWV1ZT0oKT0+eyRzY29wZS5sb2FkaW5nPSEwLEJvdFN2Yy5nZXRRdWV1ZSgpLnRoZW4ocmVzcG9uc2U9Pnskc2NvcGUucXVldWU9cmVzcG9uc2UuZGF0YS5yZXBsYWNlKFwiL25cIixcIjxici8+XCIpLCRzY29wZS5sb2FkaW5nPSExfSl9LCRzY29wZS5nZXRRdWV1ZSgpLEJvdFN2Yy5nZXRQYXVzZSgpLnRoZW4ocmVzcG9uc2U9Pnskc2NvcGUucGF1c2VkPXJlc3BvbnNlLmRhdGEsY29uc29sZS5sb2coJHNjb3BlLnBhdXNlZCl9KTtjb25zdCBnZXRVc2Vycz0oKT0+eyRzY29wZS5sb2FkaW5nPSEwLFVzZXJTdmMuZ2V0VXNlcnMoKS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLnVzZXJzPXJlc3BvbnNlLmRhdGEuZmlsdGVyKHVzZXI9PiF1c2VyLmFkbWluKSwkc2NvcGUubG9hZGluZz0hMX0pfTskc2NvcGUudG9nZ2xlQmFuPXVzZXI9Pnskc2NvcGUubG9hZGluZz0hMCxVc2VyU3ZjLnRvZ2dsZUJhbih1c2VyLl9pZCkudGhlbihyZXNwb25zZT0+e2dldFVzZXJzKCl9KX0sJHNjb3BlLnRvZ2dsZVBhdXNlPXVzZXI9PntCb3RTdmMudG9nZ2xlUGF1c2UoKS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLnBhdXNlZD1yZXNwb25zZS5kYXRhLGNvbnNvbGUubG9nKCRzY29wZS5wYXVzZWQpfSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJXb3Jrb3V0Q3RybFwiLFtcIiRzY29wZVwiLGZ1bmN0aW9uKCRzY29wZSl7JHNjb3BlLnRpbWVSZW1haW5pbmc9MCwkc2NvcGUudGltZUV4ZXJjaXNpbmc9MzAsJHNjb3BlLnRpbWVSZXN0aW5nPTEwLCRzY29wZS5yZXN0PSExO3ZhciBleGVyY2lzaW5nLHNvdW5kcz17b246bmV3IEF1ZGlvKFwib24ud2F2XCIpLG9mZjpuZXcgQXVkaW8oXCJvZmYud2F2XCIpLHN3aXRjaDpuZXcgQXVkaW8oXCJzd2l0Y2gud2F2XCIpfSxleGVyY2lzZXM9W3tuYW1lOlwiSnVtcGluZyBKYWNrc1wiLHNwbGl0OiExfSx7bmFtZTpcIldhbGwgU2l0XCIsc3BsaXQ6ITF9LHtuYW1lOlwiUHVzaC1VcFwiLHNwbGl0OiExfSx7bmFtZTpcIkNydW5jaFwiLHNwbGl0OiExfSx7bmFtZTpcIlN0ZXAtVXBcIixzcGxpdDohMH0se25hbWU6XCJTcXVhdFwiLHNwbGl0OiExfSx7bmFtZTpcIlRyaWNlcHMgRGlwXCIsc3BsaXQ6ITF9LHtuYW1lOlwiUGxhbmtcIixzcGxpdDohMX0se25hbWU6XCJIaWdoIEtuZWVzXCIsc3BsaXQ6ITF9LHtuYW1lOlwiTHVuZ2VcIixzcGxpdDohMX0se25hbWU6XCJQdXNoLVVwIHdpdGggUm90YXRpb25cIixzcGxpdDohMX0se25hbWU6XCJTaWRlIFBsYW5rXCIsc3BsaXQ6ITB9XTskc2NvcGUucHJvZ3Jlc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZXhlcmNpc2VzLmxlbmd0aC1NYXRoLmZsb29yKCRzY29wZS50aW1lUmVtYWluaW5nLygkc2NvcGUudGltZUV4ZXJjaXNpbmcrJHNjb3BlLnRpbWVSZXN0aW5nKSkrXCIvXCIrZXhlcmNpc2VzLmxlbmd0aH0sJHNjb3BlLndvcmtvdXQ9ZnVuY3Rpb24oKXt2YXIgZXhjZXJjaXNlVGltZT0kc2NvcGUudGltZUV4ZXJjaXNpbmcrJHNjb3BlLnRpbWVSZXN0aW5nOyRzY29wZS50aW1lUmVtYWluaW5nPyhjbGVhckludGVydmFsKGV4ZXJjaXNpbmcpLCRzY29wZS50aW1lcj1cIlwiLCRzY29wZS50aW1lUmVtYWluaW5nPTAsJHNjb3BlLnJlc3Q9ITEsJHNjb3BlLmV4ZXJjaXNlPXtuYW1lOlwiXCIsc3BsaXQ6ITF9KTooJHNjb3BlLnRpbWVSZW1haW5pbmc9ZXhlcmNpc2VzLmxlbmd0aCpleGNlcmNpc2VUaW1lLGV4ZXJjaXNpbmc9c2V0SW50ZXJ2YWwoKGZ1bmN0aW9uKCl7aWYoJHNjb3BlLnRpbWVSZW1haW5pbmctLSwwPT09JHNjb3BlLnRpbWVSZW1haW5pbmcpcmV0dXJuICRzY29wZS5leGVyY2lzZT17bmFtZTpcIkZpbmlzaGVkISBDb25ncmF0cyFcIixzcGxpdDohMX0sJHNjb3BlLnRpbWVyPVwiXCIsJHNjb3BlLnRpbWVSZW1haW5pbmc9MCwkc2NvcGUucmVzdD0hMSwkc2NvcGUuJGFwcGx5KCksY2xlYXJJbnRlcnZhbChleGVyY2lzaW5nKTt2YXIgY3VycmVudEV4ZXJjaXNlPU1hdGguZmxvb3IoJHNjb3BlLnRpbWVSZW1haW5pbmcvZXhjZXJjaXNlVGltZSksdGltZXI9JHNjb3BlLnRpbWVSZW1haW5pbmctY3VycmVudEV4ZXJjaXNlKmV4Y2VyY2lzZVRpbWU7JHNjb3BlLnRpbWVyPXRpbWVyPiRzY29wZS50aW1lRXhlcmNpc2luZz90aW1lci0kc2NvcGUudGltZUV4ZXJjaXNpbmc6dGltZXIsdGltZXI+JHNjb3BlLnRpbWVFeGVyY2lzaW5nPyRzY29wZS5yZXN0PSEwOiRzY29wZS5yZXN0PSExLCRzY29wZS5leGVyY2lzZT1leGVyY2lzZXNbZXhlcmNpc2VzLmxlbmd0aC1jdXJyZW50RXhlcmNpc2UtMV0sdGltZXI9PT0kc2NvcGUudGltZUV4ZXJjaXNpbmc/c291bmRzLm9uLnBsYXkoKTowPT09dGltZXI/c291bmRzLm9mZi5wbGF5KCk6JHNjb3BlLmV4ZXJjaXNlLnNwbGl0JiZ0aW1lcj09PU1hdGguZmxvb3IoJHNjb3BlLnRpbWVFeGVyY2lzaW5nLzIpJiZzb3VuZHMuc3dpdGNoLnBsYXkoKSwkc2NvcGUuJGFwcGx5KCl9KSwxZTMpKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZGlyZWN0aXZlKFwiaGVhZFwiLFtcIiRyb290U2NvcGVcIixcIiRzdGF0ZVwiLFwiJGNvbXBpbGVcIixcIiRpbnRlcnBvbGF0ZVwiLGZ1bmN0aW9uKCRyb290U2NvcGUsJHN0YXRlLCRjb21waWxlLCRpbnRlcnBvbGF0ZSl7dmFyIGdldFN0eWxlPWZ1bmN0aW9uKHRlbXBsYXRlU3R5bGVVcmwpe3ZhciBzdHlsZT17aHJlZjp0ZW1wbGF0ZVN0eWxlVXJsLHJlbDpcInN0eWxlc2hlZXRcIn07cmV0dXJuIHN0eWxlLmhyZWYubWF0Y2goL1xcLmxlc3MkLykmJihzdHlsZS5yZWw9XCJzdHlsZXNoZWV0L2xlc3NcIiksc3R5bGV9O3JldHVybntyZXN0cmljdDpcIkVcIixsaW5rOmZ1bmN0aW9uKHNjb3BlLGVsZW0pe3Njb3BlLnRlbXBsYXRlU3R5bGVzPVtdO3ZhciBodG1sPSc8bGluayBuZy1hdHRyLXJlbD1cInt7c3R5bGUucmVsfX1cIiBuZy1yZXBlYXQ9XCJzdHlsZSBpbiB0ZW1wbGF0ZVN0eWxlc1wiIG5nLWhyZWY9XCJ7e3N0eWxlLmhyZWZ9fVwiPic7aHRtbD0oaHRtbD1odG1sLnJlcGxhY2UoL1xce1xcey9nLCRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpKSkucmVwbGFjZSgvXFx9XFx9L2csJGludGVycG9sYXRlLmVuZFN5bWJvbCgpKSxlbGVtLmFwcGVuZCgkY29tcGlsZShodG1sKShzY29wZSkpLCRyb290U2NvcGUuJG9uKFwiJHN0YXRlQ2hhbmdlU3RhcnRcIiwoZnVuY3Rpb24oZXZlbnQsdG9TdGF0ZSx0b1BhcmFtcyxmcm9tU3RhdGUsZnJvbVBhcmFtcyl7c2NvcGUudGVtcGxhdGVTdHlsZXM9ZnVuY3Rpb24oc3RhdGUpe2Zvcih2YXIgc3RhdGVzPXt9O1wiXCIhPT1zdGF0ZS5uYW1lOyl7dmFyIHBhcmVudD0kc3RhdGUuZ2V0KFwiXlwiLHN0YXRlKTtzdGF0ZXNbcGFyZW50Lm5hbWVdfHwoc3RhdGVzW3BhcmVudC5uYW1lXT17fSksc3RhdGUudGVtcGxhdGVTdHlsZVVybCYmKHN0YXRlc1twYXJlbnQubmFtZV1bXCJcIl18fChzdGF0ZXNbcGFyZW50Lm5hbWVdW1wiXCJdPWdldFN0eWxlKHN0YXRlLnRlbXBsYXRlU3R5bGVVcmwpKSksc3RhdGUudmlld3MmJl8uZm9yRWFjaChzdGF0ZS52aWV3cywoZnVuY3Rpb24odmlldyxrZXkpe2lmKHZpZXcudGVtcGxhdGVTdHlsZVVybClyZXR1cm4oa2V5PWtleS5zcGxpdChcIkBcIikpWzFdPyhzdGF0ZXNba2V5WzFdXXx8KHN0YXRlc1trZXlbMV1dPXt9KSx2b2lkKHN0YXRlc1trZXlbMV1dW2tleVswXV18fChzdGF0ZXNba2V5WzFdXVtrZXlbMF1dPWdldFN0eWxlKHZpZXcudGVtcGxhdGVTdHlsZVVybCkpKSk6dm9pZChzdGF0ZXNbcGFyZW50Lm5hbWVdW2tleVswXV09Z2V0U3R5bGUodmlldy50ZW1wbGF0ZVN0eWxlVXJsKSl9KSksc3RhdGU9cGFyZW50fXZhciBmbGF0PVtdO3JldHVybiBfLmZvckVhY2goc3RhdGVzLChmdW5jdGlvbih2aWV3cyl7Xy5mb3JFYWNoKHZpZXdzLChmdW5jdGlvbihzdHlsZSl7Xy5pbmNsdWRlcyhmbGF0LHN0eWxlKXx8ZmxhdC5wdXNoKHN0eWxlKX0pKX0pKSxmbGF0LnJldmVyc2UoKSxmbGF0fSh0b1N0YXRlKX0pKX19fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJCb3RTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt2YXIgc3ZjPXRoaXM7c3ZjLmdldFF1ZXVlPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9ib3RzL3RlbnRoaW5ncy9xdWV1ZVwiKX0sc3ZjLmdldExpc3RzPWZ1bmN0aW9uKHVzZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2JvdHMvbGlzdHNcIil9LHN2Yy5nZXRDYXRlZ29yaWVzPSgpPT4kaHR0cC5nZXQoXCIvYXBpL2JvdHMvY2F0ZWdvcmllc1wiKSxzdmMuZ2V0TGFuZ3VhZ2VzPSgpPT4kaHR0cC5nZXQoXCIvYXBpL2JvdHMvbGFuZ3VhZ2VzXCIpLHN2Yy5nZXRMaXN0PWZ1bmN0aW9uKGxpc3Qpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2JvdHMvbGlzdHMvXCIrbGlzdC5faWQpfSxzdmMuc2F2ZUxpc3Q9ZnVuY3Rpb24odXNlcixsaXN0KXtyZXR1cm4gJGh0dHAucHV0KFwiL2FwaS9ib3RzL2xpc3RzXCIse3VzZXIsbGlzdH0pfSxzdmMucmVwb3J0TGlzdD1mdW5jdGlvbih1c2VyLGxpc3QpeyRodHRwLmdldChcIi9hcGkvYm90cy9saXN0cy9cIitsaXN0Ll9pZCtcIi9yZXBvcnQvXCIrdXNlci5faWQpfSxzdmMuZGVsZXRlTGlzdD1mdW5jdGlvbihsaXN0KXtyZXR1cm4gJGh0dHAuZGVsZXRlKFwiL2FwaS9ib3RzL2xpc3RzL1wiK2xpc3QuX2lkKX0sc3ZjLmdldE1vdmllUGljcz1mdW5jdGlvbihsaXN0KXtyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL2JvdHMvbGlzdHMvJHtsaXN0Ll9pZH0vbW92aWVzYCl9LHN2Yy5nZXRQYXVzZT1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2JvdHMvcGF1c2VcIil9LHN2Yy50b2dnbGVQYXVzZT1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS9ib3RzL3BhdXNlXCIpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiQ2F0ZWdvcmllc1N2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3ZhciBzdmM9dGhpcztzdmMuZ2V0Q2F0ZWdvcmllcz1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2NhdGVnb3JpZXNcIil9LHN2Yy5nZXRUYXNrcz1mdW5jdGlvbihjYXRlZ29yeSl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvY2F0ZWdvcmllcy9cIitjYXRlZ29yeSl9LHN2Yy5hZGRDYXRlZ29yeT1mdW5jdGlvbihjYXRlZ29yeSl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL2NhdGVnb3JpZXMvXCIsY2F0ZWdvcnkpfSxzdmMuYWRkVGFzaz1mdW5jdGlvbihjYXRlZ29yeSx0YXNrKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvY2F0ZWdvcmllcy9cIitjYXRlZ29yeStcIi90YXNrc1wiLHRhc2spfSxzdmMuc2V0UHJpb3JpdHlMaXN0PWZ1bmN0aW9uKGxpc3Qpe3N2Yy5jaG9pY2VzPWxpc3Qsc3ZjLnByaW9yaXR5TGlzdD1bXTtmb3IodmFyIGk9MDtpPGxpc3QubGVuZ3RoO2krKylmb3IodmFyIGo9aSsxO2o8bGlzdC5sZW5ndGg7aisrKXt2YXIgcmFuZG9tPU1hdGgucm91bmQoTWF0aC5yYW5kb20oKSk7c3ZjLnByaW9yaXR5TGlzdC5wdXNoKHtpZDowLGZpcnN0Q2hvaWNlOmxpc3RbMD09PXJhbmRvbT9pOmpdLm5hbWUsc2Vjb25kQ2hvaWNlOmxpc3RbMD09PXJhbmRvbT9qOmldLm5hbWUsY2hvaWNlOlwiXCJ9KX1mb3IoaSBpbiBmdW5jdGlvbihhcnJheSl7dmFyIHQsaSxtPWFycmF5Lmxlbmd0aDtmb3IoO207KWk9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKm0tLSksdD1hcnJheVttXSxhcnJheVttXT1hcnJheVtpXSxhcnJheVtpXT10fShzdmMucHJpb3JpdHlMaXN0KSxzdmMucHJpb3JpdHlMaXN0KXN2Yy5wcmlvcml0eUxpc3RbaV0uaWQ9aSsxfSxzdmMuZ2V0UHJpb3JpdHlMaXN0PWZ1bmN0aW9uKGxpc3Qpe3JldHVybiBzdmMucHJpb3JpdHlMaXN0fX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiRW1haWxTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLnNlbmQ9ZnVuY3Rpb24oZW1haWwpe3JldHVybiBjb25zb2xlLmxvZyhlbWFpbCksJGh0dHAucG9zdChcIi9hcGkvZW1haWxcIixlbWFpbCl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJGaWxlU3ZjXCIsW1wiJGh0dHBcIixmdW5jdGlvbigkaHR0cCl7dGhpcy5nZXRJbWFnZXM9ZnVuY3Rpb24oZm9sZGVyKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9maWxlcy9pbWFnZXMvXCIrZm9sZGVyKX0sdGhpcy5nZXRTb3VuZHM9ZnVuY3Rpb24oZm9sZGVyKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9maWxlcy9zb3VuZHMvXCIrZm9sZGVyKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIkdhbWVTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLmdldEhpZ2hzY29yZT1mdW5jdGlvbihnYW1lLHVzZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2dhbWVzL1wiK2dhbWUrXCIvXCIrdXNlcitcIi9oaWdoc2NvcmVcIil9LHRoaXMuc2V0SGlnaHNjb3JlPWZ1bmN0aW9uKGdhbWUsdXNlcixzY29yZSl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL2dhbWVzL1wiK2dhbWUrXCIvXCIrdXNlcitcIi9oaWdoc2NvcmVcIix7c2NvcmV9KX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIkxhbmd1YWdlU3ZjXCIsKGZ1bmN0aW9uKCl7dmFyIHN2Yz10aGlzO3N2Yy5sYW5ndWFnZXM9W3tjb2RlOlwiRU5cIixuYW1lOlwiRW5nbGlzaFwiLGZsYWc6XCJmbGFnLWljb24tZ2JcIn0se2NvZGU6XCJOTFwiLG5hbWU6XCJOZWRlcmxhbmRzXCIsZmxhZzpcImZsYWctaWNvbi1ubFwifSx7Y29kZTpcIkZSXCIsbmFtZTpcIkZyYW7Dp2Fpc1wiLGZsYWc6XCJmbGFnLWljb24tZnJcIn1dLHN2Yy50ZXh0PVt7Y29kZTpcIkVOXCJ9LHtjb2RlOlwiTkxcIn0se2NvZGU6XCJGUlwifV0sc3ZjLnNlbGVjdGVkTGFuZ3VhZ2U9c3ZjLmxhbmd1YWdlc1swXSxzdmMuc2V0TGFuZ3VhZ2U9ZnVuY3Rpb24obGFuZ3VhZ2Upe3JldHVybiBzdmMuc2VsZWN0ZWRMYW5ndWFnZT1sYW5ndWFnZSxsYW5ndWFnZX0sc3ZjLmdldExhbmd1YWdlPWZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5zZWxlY3RlZExhbmd1YWdlfX0pKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiUG9zdHNTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLmZldGNoPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvcG9zdHNcIil9LHRoaXMuY3JlYXRlPWZ1bmN0aW9uKHBvc3Qpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS9wb3N0c1wiLHBvc3QpfSx0aGlzLmdldFBvc3Q9ZnVuY3Rpb24ocG9zdCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvcG9zdHMvXCIrcG9zdC5faWQpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiVXNlclN2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3ZhciBzdmM9dGhpcztzdmMuZ2V0VXNlcj1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3VzZXJzXCIpfSxzdmMuZ2V0VXNlcnM9ZnVuY3Rpb24oKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS91c2Vycy9hbGxcIil9LHN2Yy50b2dnbGVCYW49ZnVuY3Rpb24oaWQpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3VzZXJzL2Jhbi9cIitpZCl9LHN2Yy5zZXRUb2tlbj1mdW5jdGlvbih0b2tlbil7cmV0dXJuICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uW1wiWC1BdXRoXCJdPXRva2VuLHN2Yy5nZXRVc2VyKCl9LHN2Yy5hdXRoZW50aWNhdGU9ZnVuY3Rpb24odXNlcil7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL3VzZXJzL2F1dGhlbnRpY2F0ZVwiLHt1c2VyfSkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2Upe3JldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuPXJlc3BvbnNlLmRhdGEsc3ZjLnNldFRva2VuKHJlc3BvbnNlLmRhdGEpfSkpfSxzdmMubG9naW49ZnVuY3Rpb24odXNlcil7cmV0dXJuICRodHRwLmdldChcIi9hcGkvdXNlcnMvXCIrdXNlcitcIi9sb2dpblwiKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7cmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW49cmVzcG9uc2UuZGF0YSxzdmMuc2V0VG9rZW4ocmVzcG9uc2UuZGF0YSl9KSl9LHN2Yy51cGRhdGVVc2VyPWZ1bmN0aW9uKHVzZXIpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9cIit1c2VyLl9pZCx7dXNlcn0pLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5nZXRVc2VyKCl9KSl9LHN2Yy5jaGVja1Bhc3N3b3JkPWZ1bmN0aW9uKHVzZXIscGFzc3dvcmQpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9cIit1c2VyK1wiL3ZlcmlmaWNhdGlvblwiLHtwYXNzd29yZH0pfSxzdmMuY2hhbmdlUGFzc3dvcmQ9ZnVuY3Rpb24odXNlcixvbGRQYXNzd29yZCxuZXdQYXNzd29yZCl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL3VzZXJzL1wiK3VzZXIrXCIvcGFzc3dvcmRcIix7b2xkUGFzc3dvcmQsbmV3UGFzc3dvcmR9KX0sc3ZjLmNoYW5nZVVzZXJuYW1lPWZ1bmN0aW9uKHVzZXIsbmV3VXNlcm5hbWUpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9cIit1c2VyK1wiL3VzZXJuYW1lXCIse25ld1VzZXJuYW1lfSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gc3ZjLmdldFVzZXIoKX0pKX0sc3ZjLmxvZ291dD1mdW5jdGlvbigpe3dpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKSwkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIlgtQXV0aFwiXT1cIlwifSxzdmMuY3JlYXRlVXNlcj1mdW5jdGlvbih1c2VybmFtZSxwYXNzd29yZCl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL3VzZXJzXCIse3VzZXJuYW1lLHBhc3N3b3JkfSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gc3ZjLmxvZ2luKHVzZXJuYW1lLHBhc3N3b3JkKX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlF1aXpBbmltYWxzQ3RybFwiLFtcIiRzY29wZVwiLFwiRmlsZVN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxGaWxlU3ZjKXtGaWxlU3ZjLmdldFNvdW5kcyhcImFuaW1hbHNcIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5hbmltYWxzPV8uc2h1ZmZsZShyZXNwb25zZS5kYXRhLm1hcChhbmltYWw9Pih7c291bmQ6YW5pbWFsLG5hbWU6YW5pbWFsLnN1YnN0cmluZygwLGFuaW1hbC5pbmRleE9mKFwiLlwiKSkucmVwbGFjZShcIl9cIixcIiBcIikuY2FwaXRhbGl6ZSgpfSkpKTtmb3IobGV0IGFuaW1hbCBvZiAkc2NvcGUuYW5pbWFscylhbmltYWwuYW5zd2Vycz1fLnNodWZmbGUoW2FuaW1hbC5uYW1lLC4uLmdldFJhbmRvbUFuaW1hbHMoYW5pbWFsLm5hbWUpXSk7Y29uc29sZS5sb2coJHNjb3BlLmFuaW1hbHMpfSkpLCRzY29wZS5ndWVzcz0oYW5pbWFsLGd1ZXNzKT0+e2FuaW1hbC5ndWVzcz1ndWVzc307Y29uc3QgZ2V0UmFuZG9tQW5pbWFscz1uYW1lPT5fLnNodWZmbGUoJHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbD0+bmFtZSE9PWFuaW1hbC5uYW1lKS5tYXAoYW5pbWFsPT5hbmltYWwubmFtZSkpLnNsaWNlKDAsNSk7JHNjb3BlLmdldFNjb3JlPSgpPT5gJHskc2NvcGUuYW5pbWFscy5maWx0ZXIoYW5pbWFsPT5hbmltYWwubmFtZT09PWFuaW1hbC5ndWVzcykubGVuZ3RofS8keyRzY29wZS5hbmltYWxzLmxlbmd0aH1gLCRzY29wZS5pc1Njb3JlVmlzaWJsZT0oKT0+JHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbD0+YW5pbWFsLmd1ZXNzKS5sZW5ndGg9PT0kc2NvcGUuYW5pbWFscy5sZW5ndGh9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlF1aXpHb29nbGVDdHJsXCIsW1wiJHNjb3BlXCIsXCJGaWxlU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEZpbGVTdmMpe0ZpbGVTdmMuZ2V0SW1hZ2VzKFwiZ29vZ2xlXCIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuaW1hZ2VzPXJlc3BvbnNlLmRhdGF9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlF1aXpMb2dvc0N0cmxcIixbXCIkc2NvcGVcIixcIkZpbGVTdmNcIixmdW5jdGlvbigkc2NvcGUsRmlsZVN2Yyl7RmlsZVN2Yy5nZXRJbWFnZXMoXCJsb2dvc1wiKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLmltYWdlcz1yZXNwb25zZS5kYXRhfSkpfV0pOyIsIi8qXHJcbiQgPSBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcclxudmFyIGJvb3RzdHJhcCA9IHJlcXVpcmUoJ2Jvb3RzdHJhcCcpO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIGFuZ3VsYXJTYW5pdGl6ZSA9IHJlcXVpcmUoJ2FuZ3VsYXItc2FuaXRpemUnKTtcclxudmFyIGFuZ3VsYXJBbmltYXRlID0gcmVxdWlyZSgnYW5ndWxhci1hbmltYXRlJyk7XHJcbiovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgJ3VpLnJvdXRlcicsXHJcbiAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgJ25nQW5pbWF0ZScsXHJcbiAgJ25nU2FuaXRpemUnLFxyXG4gICduZ0RyYWdEcm9wJyxcclxuICAnbmdUYWdzSW5wdXQnLFxyXG4gICd2Y1JlY2FwdGNoYScsXHJcbiAgJ2NoYXJ0LmpzJyxcclxuICAndGMuY2hhcnRqcydcclxuXSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gIC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJHVybFNlcnZpY2VQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcclxuXHJcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvaG9tZScpO1xyXG4gICAgJHVybFNlcnZpY2VQcm92aWRlci5jb25maWcuc3RyaWN0TW9kZShmYWxzZSk7XHJcblxyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgLnN0YXRlKCdob21lJywge1xyXG4gICAgICAgIHVybDogJy9ob21lJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJy9ob21lLmh0bWwnXHJcbiAgICAgIH0pXHJcbiAgICAgIC5zdGF0ZSgncG9saWN5Jywge1xyXG4gICAgICAgIHVybDogJy9wb2xpY3knLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL3BvbGljeS5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ3ByaW50Jywge1xyXG4gICAgICAgIHVybDogJy9wcmludCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvcHJpbnQuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdleHBlcmllbmNlJywge1xyXG4gICAgICAgIHVybDogJy9leHBlcmllbmNlJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnRXhwZXJpZW5jZUN0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL2V4cGVyaWVuY2UuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdza2lsbHMnLCB7XHJcbiAgICAgICAgdXJsOiAnL3NraWxscycsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ1NraWxsc0N0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL3NraWxscy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ2hvYmJpZXMnLCB7XHJcbiAgICAgICAgdXJsOiAnL2hvYmJpZXMnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdIb2JiaWVzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvaG9iYmllcy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ2NvbnRhY3QnLCB7XHJcbiAgICAgICAgdXJsOiAnL2NvbnRhY3QnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdDb250YWN0Q3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvY29udGFjdC5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ3dvcmtvdXQnLCB7XHJcbiAgICAgICAgdXJsOiAnL3dvcmtvdXQnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdXb3Jrb3V0Q3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvd29ya291dC5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ3Bvc3RzJywge1xyXG4gICAgICAgIHVybDogJy9wb3N0cycsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvcG9zdHMuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdwcm9maWxlJywge1xyXG4gICAgICAgIHVybDogJy9wcm9maWxlJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnUHJvZmlsZUN0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL3Byb2ZpbGUuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdsaXN0cycsIHtcclxuICAgICAgICB1cmw6ICcvbGlzdHMnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdMaXN0c0N0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnbGlzdHMuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdwcmlvcml0aXplJywge1xyXG4gICAgICAgIHVybDogJy9wcmlvcml0aXplJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnUHJpb3JpdGl6ZUN0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAncHJpb3JpdGl6ZS5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ2J1YmJsZXMnLCB7XHJcbiAgICAgICAgdXJsOiAnL2J1YmJsZXMnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdCdWJibGVzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdidWJibGVzLmh0bWwnXHJcbiAgICAgIH0pXHJcbiAgICAgIC5zdGF0ZSgnYXN0ZXJvaWRzJywge1xyXG4gICAgICAgIHVybDogJy9hc3Rlcm9pZHMnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdBc3Rlcm9pZHNDdHJsJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FzdGVyb2lkcy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ2xlbW1pbmdzJywge1xyXG4gICAgICAgIHVybDogJy9sZW1taW5ncycsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ0xlbW1pbmdzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdsZW1taW5ncy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ2JvdHMnLCB7XHJcbiAgICAgICAgdXJsOiAnL2JvdHMnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdUZW5UaGluZ3NDdHJsJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbnRoaW5ncy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ3RlbnRoaW5ncycsIHtcclxuICAgICAgICB1cmw6ICcvdGVudGhpbmdzJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnVGVuVGhpbmdzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW50aGluZ3MuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCd0ZW50aGluZ3MtYWRtaW4nLCB7XHJcbiAgICAgICAgdXJsOiAnL3RlbnRoaW5ncy1hZG1pbicsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ1RlblRoaW5nc0FkbWluQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW50aGluZ3MtYWRtaW4uaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdxdWl6LWdvb2dsZScsIHtcclxuICAgICAgICB1cmw6ICcvZ29vZ2xlJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnUXVpekdvb2dsZUN0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAncXVpenplcy9nb29nbGUuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdxdWl6LWxvZ29zJywge1xyXG4gICAgICAgIHVybDogJy9sb2dvcycsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ1F1aXpMb2dvc0N0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAncXVpenplcy9sb2dvcy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ3F1aXotYW5pbWFscycsIHtcclxuICAgICAgICB1cmw6ICcvYW5pbWFscycsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ1F1aXpBbmltYWxzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdxdWl6emVzL2FuaW1hbHMuaHRtbCdcclxuICAgICAgfSk7XHJcblxyXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcclxuICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgcmVxdWlyZUJhc2U6IGZhbHNlXHJcbiAgICB9KTtcclxuXHJcbiAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdXZWJTb2NrZXRTdmMnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHRpbWVvdXQpIHtcclxuICBmdW5jdGlvbiB3ZWJzb2NrZXRIb3N0KCkge1xyXG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcclxuICAgICAgcmV0dXJuIFwid3NzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBcIndzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBjb25uZWN0aW9uO1xyXG4gIHZhciBjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQod2Vic29ja2V0SG9zdCgpKTtcclxuXHJcbiAgICBjb25uZWN0aW9uLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1dlYnNvY2tldCBjb25uZWN0ZWQnKTtcclxuICAgIH07XHJcblxyXG4gICAgY29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1dlYnNvY2tldCBjbG9zZWQuIFJlY29ubmVjdGluZy4uLicpO1xyXG4gICAgICAkdGltZW91dChjb25uZWN0LCAxMDAwKTtcclxuICAgIH07XHJcblxyXG4gICAgY29ubmVjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiArIGUgKyBcIiAtIFN0YXRlOiBcIiArIGNvbm5lY3Rpb24ucmVhZHlTdGF0ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgdmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGUuZGF0YSk7XHJcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnd3M6JyArIHBheWxvYWQudG9waWMsIHBheWxvYWQuZGF0YSk7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHRoaXMuc2VuZCA9IGZ1bmN0aW9uICh0b3BpYywgZGF0YSkge1xyXG4gICAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeSh7dG9waWM6IHRvcGljLCBkYXRhOiBkYXRhfSk7XHJcbiAgICBjb25uZWN0aW9uLnNlbmQoanNvbik7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5jb25uZWN0ID0gY29ubmVjdDtcclxuXHJcbn0pLnJ1bihmdW5jdGlvbiAoV2ViU29ja2V0U3ZjKSB7XHJcbiAgV2ViU29ja2V0U3ZjLmNvbm5lY3QoKTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gIC5jb250cm9sbGVyKCdBcHBDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sIExhbmd1YWdlU3ZjLCBVc2VyU3ZjKSB7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCIlY1lvdSBzbmVha3kgYnVnZ2VyIVwiLCBcImZvbnQ6IDJlbSBzYW5zLXNlcmlmOyBjb2xvcjogRG9kZ2VyQmx1ZTsgdGV4dC1zaGFkb3c6IDJweCAwIDAgIzQ0NCwgLTJweCAwIDAgIzQ0NCwgMCAycHggMCAjNDQ0LCAwIC0ycHggMCAjNDQ0LCAxcHggMXB4ICM0NDQsIC0xcHggLTFweCAwICM0NDQsIDFweCAtMXB4IDAgIzQ0NCwgLTFweCAxcHggMCAjNDQ0O1wiKTtcclxuICAgIGNvbnNvbGUubG9nKFwiSSdtIGdsYWQgeW91J3JlIGN1cmlvdXMgd2hldGhlciBzb21ldGhpbmcgaXMgcG9wcGluZyB1cCBpbiBoZXJlLiBJJ20gYSBiaXQgb2YgYSBzdGlja2xlciB3aGVuIGl0IGNvbWVzIHRvIG1lc3NhZ2VzIGluIHRoZSBjb25zb2xlIHNvIEkgdHJ5IHRvIG1ha2Ugc3VyZSBvbmx5IHRoaW5ncyBJIHdhbnQgYXJlIHZpc2libGUuIFRoYXQgYmVpbmcgc2FpZCwgaWYgdGhlcmUgaXMgYSBiaWcgZXJyb3IgaGVyZSwgSSB3b3VsZCByZWFsbHkgYXBwcmVjaWF0ZSB5b3UgdGVsbGluZyBtZSBzbyBJIGNhbiBnZXQgcmlkIG9mIGl0IVwiKTtcclxuICAgIGNvbnNvbGUubG9nKFwiVGhlIGNvZGUgZm9yIG15IHJlc3VtZSBpcyBob3N0ZWQgb24gR2l0aHViIGlmIHlvdSByZWFsbHkgd2FudCB0byBnbyBpbnRvIGFsbCB0aGlzISA9PiBodHRwczovL2dpdGh1Yi5jb20vRmxhbmRlcnNCdXJnZXIvcmVzdW1lXCIpO1xyXG5cclxuICAgIC8qXHJcbiAgICAkKGRvY3VtZW50KS5iaW5kKFwia2V5dXAga2V5ZG93blwiLCBmdW5jdGlvbihlKXtcclxuICAgICAgaWYoZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PSA4MCl7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgKi9cclxuXHJcbiAgICAkKHdpbmRvdykubG9hZChmdW5jdGlvbigpIHtcclxuICAgICAgJChcIi5sb2FkaW5nXCIpLmZhZGVPdXQoXCJzbG93XCIpO1xyXG4gICAgICAkKFwiLmNvbnRlbnRcIikuZmFkZUluKFwic2xvd1wiKTtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS50aGVtZUNvdW50ZXIgPSA2O1xyXG4gICAgJHNjb3BlLnRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgICRzY29wZS55ZWFyID0gJHNjb3BlLnRvZGF5LmdldEZ1bGxZZWFyKCk7XHJcbiAgICAkc2NvcGUucmFuZG9tID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApKTtcclxuXHJcbiAgICAkc2NvcGUuZmxpcFRoZW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICQoXCIubG9hZGluZ1wiKS5zaG93KCk7XHJcbiAgICAgICQoXCIuY29udGVudFwiKS5oaWRlKCk7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJChcIi5sb2FkaW5nXCIpLmZhZGVPdXQoXCJzbG93XCIpO1xyXG4gICAgICAgICQoXCIuY29udGVudFwiKS5mYWRlSW4oXCJzbG93XCIpO1xyXG4gICAgICB9LCA4MDApO1xyXG4gICAgICAkc2NvcGUudGhlbWVDb3VudGVyID0gJHNjb3BlLnRoZW1lQ291bnRlciA8IDYgPyAkc2NvcGUudGhlbWVDb3VudGVyICsgMSA6ICRzY29wZS50aGVtZUNvdW50ZXIgPSAxO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgJC5nZXRKU09OKCcvc2tpbGxzLmpzb24nLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICRzY29wZS5za2lsbHMgPSBkYXRhLmZpbHRlcihmdW5jdGlvbihza2lsbCkge1xyXG4gICAgICAgIHJldHVybiBza2lsbC5lbmFibGVkO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAkLmdldEpTT04oJy9ob2JiaWVzLmpzb24nLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICRzY29wZS5ob2JiaWVzID0gZGF0YTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAkLmdldEpTT04oJy9leHBlcmllbmNlLmpzb24nLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICRzY29wZS5qb2JzID0gZGF0YTtcclxuICAgICAgJHNjb3BlLmpvYnMuZm9yRWFjaChmdW5jdGlvbihqb2IpIHtcclxuICAgICAgICBqb2Iuc3RhcnREYXRlID0gbmV3IERhdGUoam9iLnN0YXJ0RGF0ZSk7XHJcbiAgICAgICAgaWYgKGpvYi5lbmREYXRlKSBqb2IuZW5kRGF0ZSA9IG5ldyBEYXRlKGpvYi5lbmREYXRlKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0VGltZVNwYW4gPSBmdW5jdGlvbihqb2IpIHtcclxuICAgICAgcmV0dXJuIGpvYi5zdGFydERhdGUuZ2V0RnVsbFllYXIoKSArIChqb2IuZW5kRGF0ZSA/ICgnIC0gJyArIGpvYi5lbmREYXRlLmdldEZ1bGxZZWFyKCkpIDogJyAtIFRvZGF5Jyk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5sYW5ndWFnZXMgPSBMYW5ndWFnZVN2Yy5sYW5ndWFnZXM7XHJcblxyXG4gICAgJHNjb3BlLnNlbGVjdGVkTGFuZ3VhZ2UgPSBMYW5ndWFnZVN2Yy5nZXRMYW5ndWFnZSgpO1xyXG5cclxuICAgICRzY29wZS5zZWxlY3RMYW5ndWFnZSA9IGZ1bmN0aW9uKGxhbmd1YWdlKSB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZExhbmd1YWdlID0gTGFuZ3VhZ2VTdmMuc2V0TGFuZ3VhZ2UobGFuZ3VhZ2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuaG92ZXJkaXYgPSBmdW5jdGlvbihlLCBkaXZpZCkge1xyXG4gICAgICB2YXIgbGVmdCA9IGUuY2xpZW50WCArIFwicHhcIjtcclxuICAgICAgdmFyIHRvcCA9IChlLmNsaWVudFkgKyAyMCkgKyBcInB4XCI7XHJcblxyXG4gICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2aWQpO1xyXG5cclxuICAgICAgJChcIiNcIiArIGRpdmlkKS5jc3MoJ2xlZnQnLCBsZWZ0KTtcclxuICAgICAgJChcIiNcIiArIGRpdmlkKS5jc3MoJ3RvcCcsIHRvcCk7XHJcblxyXG4gICAgICAkKFwiI1wiICsgZGl2aWQpLnRvZ2dsZSgpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zb2NpYWxNZWRpYSA9IFtcclxuICAgICAgLypcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZmFjZWJvb2tcIixcclxuICAgICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vZmxhbmRlcnNidXJnZXJcIixcclxuICAgICAgICAgICAgXCJpY29uXCI6IFwiZmEtZmFjZWJvb2stZlwiXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJ0d2l0dGVyXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9CZWxnb0NhbmFkaWFuXCIsXHJcbiAgICAgICAgICAgIFwiaWNvblwiOiBcImZhLXR3aXR0ZXJcIlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ29vZHJlYWRzXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cuZ29vZHJlYWRzLmNvbS91c2VyL3Nob3cvMTcwNzAwMTAtbGF1cmVudFwiLFxyXG4gICAgICAgICAgICBcImljb25cIjogXCJmYS1ib29rXCJcclxuICAgICAgICAgIH0sKi9cclxuICAgICAge1xyXG4gICAgICAgIFwibmFtZVwiOiBcImxpbmtlZGluXCIsXHJcbiAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vbGF1cmVudC1kZWJhY2tlci0xNjMzYTkxNlwiLFxyXG4gICAgICAgIFwiaWNvblwiOiBcImZhLWxpbmtlZGluXCJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwibmFtZVwiOiBcImdpdGh1YlwiLFxyXG4gICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL0ZsYW5kZXJzQnVyZ2VyXCIsXHJcbiAgICAgICAgXCJpY29uXCI6IFwiZmEtZ2l0aHViXCJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwibmFtZVwiOiBcImpzZmlkZGxlXCIsXHJcbiAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2pzZmlkZGxlLm5ldC91c2VyL0JlbGdvQ2FuYWRpYW4vZmlkZGxlcy9cIixcclxuICAgICAgICBcImljb25cIjogXCJmYS1qc2ZpZGRsZVwiXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBcIm5hbWVcIjogXCJzdGFja292ZXJmbG93XCIsXHJcbiAgICAgICAgXCJ1cmxcIjogXCJodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTA4MzkyMy9iZWxnb2NhbmFkaWFuXCIsXHJcbiAgICAgICAgXCJpY29uXCI6IFwiZmEtc3RhY2stb3ZlcmZsb3dcIlxyXG5cclxuICAgICAgfVxyXG4gICAgXTtcclxuXHJcbiAgICBpZiAod2luZG93LmxvY2FsU3RvcmFnZS51c2VyKSB7XHJcbiAgICAgIFVzZXJTdmMubG9naW4od2luZG93LmxvY2FsU3RvcmFnZS51c2VyKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICBsb2dpbihyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUuJG9uKCdsb2dpbicsIGZ1bmN0aW9uKF8sIHVzZXIpIHtcclxuICAgICAgbG9naW4odXNlcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBsb2dpbih1c2VyKSB7XHJcbiAgICAgIGlmICghJHNjb3BlLmxvZ2dlZEluKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS51c2VyID0gdXNlci5faWQ7XHJcbiAgICAgICAgJHNjb3BlLmxvZ2dlZEluID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdsb2dpbicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLiRvbigndXBkYXRlJywgZnVuY3Rpb24oXywgdXNlcikge1xyXG4gICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gICAgICAkc2NvcGUuY3VycmVudFVzZXIuYmlydGhEYXRlID0gbmV3IERhdGUoJHNjb3BlLmN1cnJlbnRVc2VyLmJpcnRoRGF0ZSk7XHJcbiAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJChcIiNsb2FkaW5nLWljb25cIikuZmFkZU91dChcInNsb3dcIik7XHJcbiAgICAgIH0sIDEwMDApO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgICRzY29wZS4kb24oJ2xvYWRpbmcnLCBmdW5jdGlvbihfLCB1c2VyKSB7XHJcbiAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgJChcIiNsb2FkaW5nLWljb25cIikuc2hvdygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLiRvbignbG9hZGVkJywgZnVuY3Rpb24oXywgdXNlcikge1xyXG4gICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoXCIjbG9hZGluZy1pY29uXCIpLmZhZGVPdXQoXCJzbG93XCIpO1xyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25PdXQoKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIFNpZ24tb3V0IHN1Y2Nlc3NmdWwuXHJcbiAgICAgICAgJHNjb3BlLmxvZ2dlZEluID0gZmFsc2U7XHJcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdsb2dvdXQnKTtcclxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAvLyBBbiBlcnJvciBoYXBwZW5lZC5cclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5mb3JtYXREYXRlID0gZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgICB2YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddO1xyXG4gICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICAgIHJldHVybiBkYXRlLmdldERhdGUoKSArIFwiLVwiICsgbW9udGhzW2RhdGUuZ2V0TW9udGgoKV0gKyBcIi1cIiArIGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgIH07XHJcblxyXG4gICAgU3RyaW5nLnByb3RvdHlwZS5jYXBpdGFsaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5zbGljZSgxKTtcclxuICAgIH07XHJcblxyXG4gIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignQXN0ZXJvaWRzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEdhbWVTdmMpIHtcclxuXHJcbiAgJHNjb3BlLmFubm91bmNlID0gZmFsc2U7XHJcbiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhc3Rlcm9pZHMtcGFnZScpO1xyXG4gIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICBjdHguZm9udCA9IFwiMzBweCBDb21pYyBTYW5zIE1TXCI7XHJcbiAgY3R4LmZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgY3R4LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgdmFyIHNob3RzID0ge307XHJcbiAgdmFyIGFzdGVyb2lkcyA9IHt9O1xyXG4gIHZhciBwb3dlcnVwcyA9IHt9O1xyXG4gIHZhciBleHBsb3Npb25zID0ge307XHJcbiAgdmFyIG1hcCA9IHt9O1xyXG4gIHZhciBzcGFjZXBpY3MgPSAxMDtcclxuICB2YXIgc3BhY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzcGFjZXBpY3MpO1xyXG4gIHZhciBwb3dlcnVwVHlwZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdzcGVlZCcsXHJcbiAgICAgIGFubm91bmNlbWVudDogJ01heCBTcGVlZCDih6cnLFxyXG4gICAgICBjeWNsZToge1xyXG4gICAgICAgIHJvd3M6IDEsXHJcbiAgICAgICAgY29sdW1uczogNCxcclxuICAgICAgICBzaXplOiBbMTQsIDM1XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgc3BhY2VzaGlwLm1heFNwZWVkICs9IDEwMDtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogJ2Nvb2xkb3duJyxcclxuICAgICAgYW5ub3VuY2VtZW50OiAnQ29vbGRvd24g4oepJyxcclxuICAgICAgY3ljbGU6IHtcclxuICAgICAgICByb3dzOiAxLFxyXG4gICAgICAgIGNvbHVtbnM6IDMsXHJcbiAgICAgICAgc2l6ZTogWzE3LCAxN10sXHJcbiAgICAgICAgaTogMCxcclxuICAgICAgICBkaXJlY3Rpb246IHRydWVcclxuICAgICAgfSxcclxuICAgICAgaW1nOiBuZXcgSW1hZ2UoKSxcclxuICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKHNwYWNlc2hpcCkge1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuY29vbGRvd24gPiAwKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAuY29vbGRvd25UaW1lIC09IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAncmFuZ2UnLFxyXG4gICAgICBhbm5vdW5jZW1lbnQ6ICdGaXJpbmcgUmFuZ2Ug4oenJyxcclxuICAgICAgY3ljbGU6IHtcclxuICAgICAgICByb3dzOiA0LFxyXG4gICAgICAgIGNvbHVtbnM6IDEsXHJcbiAgICAgICAgc2l6ZTogWzMwLCA4XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgc3BhY2VzaGlwLnJhbmdlICs9IDU7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdzaGllbGQnLFxyXG4gICAgICBhbm5vdW5jZW1lbnQ6ICdTaGllbGQnLFxyXG4gICAgICBjeWNsZToge1xyXG4gICAgICAgIHJvd3M6IDUsXHJcbiAgICAgICAgY29sdW1uczogMSxcclxuICAgICAgICBzaXplOiBbMTksIDE5XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgc3BhY2VzaGlwLnNoaWVsZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdudWtlJyxcclxuICAgICAgYW5ub3VuY2VtZW50OiAnTnVrZScsXHJcbiAgICAgIGN5Y2xlOiB7XHJcbiAgICAgICAgcm93czogMSxcclxuICAgICAgICBjb2x1bW5zOiA4LFxyXG4gICAgICAgIHNpemU6IFsxNSwgMTVdLFxyXG4gICAgICAgIGk6IDAsXHJcbiAgICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZzogbmV3IEltYWdlKCksXHJcbiAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbihzcGFjZXNoaXApIHtcclxuICAgICAgICBmb3IgKHZhciBpIGluIGFzdGVyb2lkcykge1xyXG4gICAgICAgICAgYXN0ZXJvaWRzW2ldLmV4cGxvZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3Bhd25Bc3Rlcm9pZHMoNSk7XHJcbiAgICAgIH1cclxuICAgIH0sLypcclxuICAgICdzaWRlX2Nhbm5vbnMnLFxyXG4gICAgJ2xhc2VyJyxcclxuICAgICdzaGllbGQnLFxyXG4gICAgJ2xpZmUnLFxyXG4gICAgJ21pc3NpbGVzJyxcclxuICAgICdudWtlJ1xyXG4gICAgKi9cclxuICBdO1xyXG4gIHBvd2VydXBUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHBvd2VydXAsIGksIGFycmF5KSB7XHJcbiAgICBhcnJheVtpXS5pbWcuc3JjID0gJ2FzdGVyb2lkcy8nICsgcG93ZXJ1cC5uYW1lICsgJy5wbmcnO1xyXG4gIH0pO1xyXG5cclxuICB2YXIgZXhwbG9zaW9uSW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICBleHBsb3Npb25JbWFnZS5zcmMgPSAnYXN0ZXJvaWRzL2V4cGxvc2lvbi5wbmcnO1xyXG5cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgbWFwW2Uua2V5Q29kZSB8fCBlLndoaWNoXSA9IHRydWU7XHJcbiAgfSx0cnVlKTtcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgIG1hcFtlLmtleUNvZGUgfHwgZS53aGljaF0gPSBmYWxzZTtcclxuICB9LHRydWUpO1xyXG5cclxuICAkc2NvcGUuaGlnaHNjb3JlID0gMDtcclxuXHJcbiAgZnVuY3Rpb24gZXZhbHVhdGVLZXlzKCkge1xyXG4gICAgaWYgKCRzY29wZS5wbGF5aW5nKSB7XHJcbiAgICAgIGlmIChtYXBbMzJdKSB7XHJcbiAgICAgICAgLy9TcGFjZVxyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuY29vbGRvd24gPT09IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5zaG9vdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobWFwWzM3XSkge1xyXG4gICAgICAgIC8vTGVmdCBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAucm90YXRpb24gPT09IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5yb3RhdGlvbiA9IDM2MDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnJvdGF0aW9uIC09IDM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXBbMzldKSB7XHJcbiAgICAgICAgLy9SaWdodCBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAucm90YXRpb24gPT09IDM2MCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnJvdGF0aW9uID0gMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnJvdGF0aW9uICs9IDM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXBbMzhdKSB7XHJcbiAgICAgICAgLy9VcCBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuc3BlZWQgPD0gc3BhY2VzaGlwLm1heFNwZWVkKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAuc3BlZWQgKz0gNTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5zcGVlZCA+IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5zcGVlZC0tO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobWFwWzQwXSkge1xyXG4gICAgICAgIC8vRG93biBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuc3BlZWQgPiAwKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAuc3BlZWQgLT0gMjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChtYXBbMzJdKSB7XHJcbiAgICAgICAgc3RhcnQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gU3BhY2VzaGlwKCkge1xyXG4gICAgdGhpcy53aWR0aCA9IDUwO1xyXG4gICAgdGhpcy5oZWlnaHQgPSA1MDtcclxuICAgIHRoaXMuc2hpZWxkID0gZmFsc2U7XHJcbiAgICB0aGlzLnJhbmdlID0gODA7XHJcbiAgICB0aGlzLmNhbm5vbiA9IHtcclxuICAgICAgeDogdGhpcy53aWR0aCAvIDIgLSA0LjUsXHJcbiAgICAgIHk6IHRoaXMuaGVpZ2h0IC8gMiAtIHRoaXMuaGVpZ2h0ICogMC4wNzgxMjVcclxuICAgIH07XHJcbiAgICB0aGlzLmNvb2xkb3duID0gMDtcclxuICAgIHRoaXMuY29vbGRvd25UaW1lID0gMjA7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gW1xyXG4gICAgICBjYW52YXMud2lkdGggLyAyIC0gdGhpcy53aWR0aCAvIDIsXHJcbiAgICAgIGNhbnZhcy5oZWlnaHQgLyAyIC0gdGhpcy5oZWlnaHQgLyAyXHJcbiAgICBdO1xyXG4gICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHRoaXMuaW1nLnNyYyA9ICdhc3Rlcm9pZHMvc3BhY2VzaGlwLnBuZyc7XHJcbiAgICB0aGlzLnNwZWVkID0gMDtcclxuICAgIHRoaXMubWF4U3BlZWQgPSAxMDAwO1xyXG4gICAgdGhpcy5hbmdsZSA9IDA7XHJcbiAgICB0aGlzLnJvdGF0aW9uID0gMDtcclxuXHJcbiAgICB0aGlzLnNob290ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuY29vbGRvd24gPSB0aGlzLmNvb2xkb3duVGltZTtcclxuICAgICAgdmFyIGlkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcclxuICAgICAgc2hvdHNbaWRdID0gbmV3IFNob3QoaWQsIHRoaXMpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMuc2hpZWxkKSB7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5hcmModGhpcy5wb3NpdGlvblswXSArIHRoaXMud2lkdGggLyAyLCB0aGlzLnBvc2l0aW9uWzFdICsgdGhpcy5oZWlnaHQgLyAyLCAzMCwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcInJnYigzNSwgMjM3LCA4NiwgMC41KVwiO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwicmdiKDY2LCAxNjgsIDM2LCAwLjgpXCI7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDU7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgIH1cclxuICAgICAgZm9yICh2YXIgaSBpbiBhc3Rlcm9pZHMpIHtcclxuICAgICAgICB2YXIgYXN0ZXJvaWQgPSBhc3Rlcm9pZHNbaV07XHJcbiAgICAgICAgaWYgKGhpdChhc3Rlcm9pZCwgdGhpcykpIHtcclxuICAgICAgICAgIGlmICh0aGlzLnNoaWVsZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNoaWVsZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhc3Rlcm9pZC5leHBsb2RlKCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2FtZU92ZXIoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5hbmdsZSA9IHRoaXMucm90YXRpb247XHJcbiAgICAgIGlmICh0aGlzLmNvb2xkb3duID4gMCkge1xyXG4gICAgICAgIHRoaXMuY29vbGRvd24tLTtcclxuICAgICAgfVxyXG4gICAgICBtb3ZlKHRoaXMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIFNob3QoaWQsIHNwYWNlc2hpcCkge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFtcclxuICAgICAgc3BhY2VzaGlwLnBvc2l0aW9uWzBdICsgc3BhY2VzaGlwLmNhbm5vbi54ICsgc3BhY2VzaGlwLmNhbm5vbi54ICogTWF0aC5jb3MoKHNwYWNlc2hpcC5yb3RhdGlvbiAtIDkwKSAqIE1hdGguUEkgLyAxODApLFxyXG4gICAgICBzcGFjZXNoaXAucG9zaXRpb25bMV0gKyBzcGFjZXNoaXAuY2Fubm9uLnkgKyBzcGFjZXNoaXAuY2Fubm9uLnkgKiBNYXRoLnNpbigoc3BhY2VzaGlwLnJvdGF0aW9uIC0gOTApICogTWF0aC5QSSAvIDE4MClcclxuICAgIF07XHJcbiAgICB0aGlzLndpZHRoID0gOTtcclxuICAgIHRoaXMuaGVpZ2h0ID0gMTU7XHJcbiAgICB0aGlzLmFuZ2xlID0gc3BhY2VzaGlwLmFuZ2xlO1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IHNwYWNlc2hpcC5yb3RhdGlvbjtcclxuICAgIHRoaXMuc3BlZWQgPSBzcGFjZXNoaXAuc3BlZWQgKyA1MDA7XHJcbiAgICB0aGlzLmxpZmVzcGFuID0gc3BhY2VzaGlwLnJhbmdlO1xyXG4gICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHRoaXMuaW1nLnNyYyA9ICdhc3Rlcm9pZHMvc2hvdC5wbmcnO1xyXG5cclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLmxpZmVzcGFuLS07XHJcbiAgICAgIG1vdmUodGhpcyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gQXN0ZXJvaWQoaWQpIHtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMud2lkdGggPSBNYXRoLnJhbmRvbSgpICogNTAgKyAyMDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy53aWR0aDtcclxuICAgIHRoaXMucG9zaXRpb24gPSBnZXRFbnRyeVBvc2l0aW9uKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIHRoaXMuYW5nbGUgPSBNYXRoLnJhbmRvbSgpICogMzYwO1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IE1hdGgucmFuZG9tKCkgKiAzNjA7XHJcbiAgICB0aGlzLnJvdGF0aW9uU3BlZWQgPSBNYXRoLnJhbmRvbSgpICogNiAtIDM7XHJcbiAgICB0aGlzLnNwZWVkID0gTWF0aC5yYW5kb20oKSAqIDMwMCArIDI7XHJcbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgdGhpcy5pbWcuc3JjID0gJ2FzdGVyb2lkcy9hc3Rlcm9pZCcgKyAoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNikgKyAxKSArICcucG5nJztcclxuXHJcbiAgICB0aGlzLmV4cGxvZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgZXhwbG9zaW9uc1t0aGlzLmlkXSA9IG5ldyBFeHBsb3Npb24odGhpcyk7XHJcbiAgICAgIHJldHVybiBkZWxldGUgYXN0ZXJvaWRzW3RoaXMuaWRdO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5yb3RhdGlvbiArPSB0aGlzLnJvdGF0aW9uU3BlZWQ7XHJcbiAgICAgIGlmICh0aGlzLnJvdGF0aW9uID4gMzYwKSB7XHJcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IHRoaXMucm90YXRpb24gLSAzNjA7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5yb3RhdGlvbiA8IDApIHtcclxuICAgICAgICB0aGlzLnJvdGF0aW9uID0gMzYwICsgdGhpcy5yb3RhdGlvbjtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKHZhciBpIGluIHNob3RzKSB7XHJcbiAgICAgICAgdmFyIHNob3QgPSBzaG90c1tpXTtcclxuICAgICAgICBpZiAoaGl0KHNob3QsIHRoaXMpKSB7XHJcbiAgICAgICAgICB0aGlzLmV4cGxvZGUoKTtcclxuICAgICAgICAgIHZhciBwb2ludHMgPSBNYXRoLmZsb29yKChzaG90LnNwZWVkIC0gNTAwKSAvIDEwICsgNzAgLSB0aGlzLndpZHRoKTtcclxuICAgICAgICAgIGlmIChNYXRoLmZsb29yKChwb2ludHMgKyAkc2NvcGUuc2NvcmUpIC8gMTAwKSA+IE1hdGguZmxvb3IoJHNjb3BlLnNjb3JlIC8gMTAwKSkge1xyXG4gICAgICAgICAgICBzcGF3blBvd2VydXAoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICRzY29wZS5zY29yZSArPSBwb2ludHM7XHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICBkZWxldGUgc2hvdHNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIG1vdmUodGhpcyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gRXhwbG9zaW9uKG9iamVjdCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFtvYmplY3QucG9zaXRpb25bMF0sIG9iamVjdC5wb3NpdGlvblsxXV07XHJcbiAgICB0aGlzLndpZHRoID0gb2JqZWN0LndpZHRoO1xyXG4gICAgdGhpcy5oZWlnaHQgPSBvYmplY3QuaGVpZ2h0O1xyXG4gICAgdGhpcy5zcGVlZCA9IDA7XHJcbiAgICB0aGlzLmFuZ2xlID0gTWF0aC5yYW5kb20oKSAqIDM2MDtcclxuICAgIHRoaXMuY3ljbGUgPSB7XHJcbiAgICAgIHJvd3M6IDYsXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHNpemU6IFsyNTYsIDI1Nl0sXHJcbiAgICAgIGk6IDAsXHJcbiAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgfTtcclxuICAgIHRoaXMubGlmZXNwYW4gPSA0NztcclxuICAgIHRoaXMuaW1nID0gZXhwbG9zaW9uSW1hZ2U7XHJcblxyXG4gICAgdGhpcy5tb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMubGlmZXNwYW4tLTtcclxuICAgICAgbW92ZSh0aGlzKTtcclxuICAgICAgaWYgKHRoaXMuY3ljbGUuZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5jeWNsZS5pKys7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5jeWNsZS5pLS07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBQb3dlcnVwKGlkKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnBvd2VydXAgPSBwb3dlcnVwVHlwZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG93ZXJ1cFR5cGVzLmxlbmd0aCldO1xyXG4gICAgdGhpcy5jeWNsZSA9IHRoaXMucG93ZXJ1cC5jeWNsZTtcclxuICAgIHRoaXMubGlmZXNwYW4gPSAxMDAwO1xyXG4gICAgaWYgKHRoaXMuY3ljbGUuc2l6ZVsxXSA+IHRoaXMuY3ljbGUuc2l6ZVswXSkge1xyXG4gICAgICB0aGlzLmhlaWdodCA9IDQwO1xyXG4gICAgICB0aGlzLndpZHRoID0gTWF0aC5yb3VuZCh0aGlzLmhlaWdodCAvIHRoaXMuY3ljbGUuc2l6ZVsxXSAqIHRoaXMuY3ljbGUuc2l6ZVswXSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLndpZHRoID0gNDA7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5yb3VuZCh0aGlzLndpZHRoIC8gdGhpcy5jeWNsZS5zaXplWzBdICogdGhpcy5jeWNsZS5zaXplWzFdKTtcclxuICAgIH1cclxuICAgIHRoaXMucG9zaXRpb24gPSBnZXRFbnRyeVBvc2l0aW9uKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIHRoaXMuaW1nID0gdGhpcy5wb3dlcnVwLmltZztcclxuICAgIHRoaXMuYW5nbGUgPSBNYXRoLnJhbmRvbSgpICogMzYwO1xyXG4gICAgdGhpcy5zcGVlZCA9IE1hdGgucmFuZG9tKCkgKiAxNTAgKyA1MDtcclxuICAgIHZhciBkZWxheSA9IDU7XHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMubGlmZXNwYW4gPD0gMCkge1xyXG4gICAgICAgIHJldHVybiBkZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF07XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGhpdChzcGFjZXNoaXAsIHRoaXMpKSB7XHJcbiAgICAgICAgJHNjb3BlLmFubm91bmNlID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuYW5ub3VuY2VtZW50ID0gdGhpcy5wb3dlcnVwLmFubm91bmNlbWVudDtcclxuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICRzY29wZS5hbm5vdW5jZSA9IGZhbHNlO1xyXG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIHRoaXMucG93ZXJ1cC5hY3RpdmF0ZShzcGFjZXNoaXApO1xyXG4gICAgICAgIHJldHVybiBkZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF07XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5saWZlc3Bhbi0tO1xyXG4gICAgICBtb3ZlKHRoaXMpO1xyXG4gICAgICBpZiAoZGVsYXkgPD0gMCkge1xyXG4gICAgICAgIGlmICh0aGlzLmN5Y2xlLmRpcmVjdGlvbikge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZS5pKys7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuY3ljbGUuaS0tO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxheSA9IDU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGVsYXktLTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1vdmUob2JqZWN0KSB7XHJcbiAgICAgb2JqZWN0LnBvc2l0aW9uWzBdICs9IG9iamVjdC5zcGVlZCAvIDEwMCAqIE1hdGguY29zKChvYmplY3QuYW5nbGUgLSA5MCkgKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICBvYmplY3QucG9zaXRpb25bMV0gKz0gb2JqZWN0LnNwZWVkIC8gMTAwICogTWF0aC5zaW4oKG9iamVjdC5hbmdsZSAtIDkwKSAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgIGlmIChvYmplY3QucG9zaXRpb25bMF0gPiBjYW52YXMud2lkdGgpIHtcclxuICAgICAgIG9iamVjdC5wb3NpdGlvblswXSA9IC1vYmplY3Qud2lkdGg7XHJcbiAgICAgfSBlbHNlIGlmIChvYmplY3QucG9zaXRpb25bMF0gPCAtb2JqZWN0LndpZHRoKSB7XHJcbiAgICAgICBvYmplY3QucG9zaXRpb25bMF0gPSBjYW52YXMud2lkdGg7XHJcbiAgICAgfVxyXG4gICAgIGlmIChvYmplY3QucG9zaXRpb25bMV0gPiBjYW52YXMuaGVpZ2h0KSB7XHJcbiAgICAgICBvYmplY3QucG9zaXRpb25bMV0gPSAtb2JqZWN0LmhlaWdodDtcclxuICAgICB9IGVsc2UgaWYgKG9iamVjdC5wb3NpdGlvblsxXSA8IC1vYmplY3QuaGVpZ2h0KSB7XHJcbiAgICAgICBvYmplY3QucG9zaXRpb25bMV0gPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgIH1cclxuICAgICBjdHguc2F2ZSgpO1xyXG4gICAgIGN0eC50cmFuc2xhdGUob2JqZWN0LnBvc2l0aW9uWzBdLCBvYmplY3QucG9zaXRpb25bMV0pO1xyXG4gICAgIGN0eC50cmFuc2xhdGUob2JqZWN0LndpZHRoIC8gMiwgb2JqZWN0LmhlaWdodCAvIDIpO1xyXG4gICAgIGN0eC5yb3RhdGUob2JqZWN0LnJvdGF0aW9uICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgaWYgKG9iamVjdC5jeWNsZSkge1xyXG4gICAgICAgdmFyIGNvbHVtbiA9IG9iamVjdC5jeWNsZS5pICUgb2JqZWN0LmN5Y2xlLmNvbHVtbnM7XHJcbiAgICAgICB2YXIgcm93ID0gTWF0aC5mbG9vcihvYmplY3QuY3ljbGUuaSAvIG9iamVjdC5jeWNsZS5jb2x1bW5zKTtcclxuICAgICAgIGN0eC5kcmF3SW1hZ2Uob2JqZWN0LmltZywgb2JqZWN0LmN5Y2xlLnNpemVbMF0gKiBjb2x1bW4sIG9iamVjdC5jeWNsZS5zaXplWzFdICogcm93LCBvYmplY3QuY3ljbGUuc2l6ZVswXSwgb2JqZWN0LmN5Y2xlLnNpemVbMV0sIC1vYmplY3Qud2lkdGggLyAyLCAtb2JqZWN0LmhlaWdodCAvIDIsIG9iamVjdC53aWR0aCwgb2JqZWN0LmhlaWdodCk7XHJcblxyXG4gICAgICAgaWYgKG9iamVjdC5jeWNsZS5pIDw9IDApIHtcclxuICAgICAgICAgb2JqZWN0LmN5Y2xlLmkgPSAwO1xyXG4gICAgICAgICBvYmplY3QuY3ljbGUuZGlyZWN0aW9uID0gdHJ1ZTtcclxuICAgICAgIH0gZWxzZSBpZiAob2JqZWN0LmN5Y2xlLmkgPj0gb2JqZWN0LmN5Y2xlLmNvbHVtbnMgKiBvYmplY3QuY3ljbGUucm93cykge1xyXG4gICAgICAgICBvYmplY3QuY3ljbGUuaSA9IG9iamVjdC5jeWNsZS5jb2x1bW5zICogb2JqZWN0LmN5Y2xlLnJvd3MgLSAxO1xyXG4gICAgICAgICBvYmplY3QuY3ljbGUuZGlyZWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICB9XHJcbiAgICAgfSBlbHNlIHtcclxuICAgICAgIGN0eC5kcmF3SW1hZ2Uob2JqZWN0LmltZywgLW9iamVjdC53aWR0aCAvIDIsIC1vYmplY3QuaGVpZ2h0IC8gMiwgb2JqZWN0LndpZHRoLCBvYmplY3QuaGVpZ2h0KTtcclxuICAgICB9XHJcbiAgICAgY3R4LnJlc3RvcmUoKTtcclxuICB9XHJcblxyXG4gIHZhciBzcGFjZXNoaXA7XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXJ0KCkge1xyXG4gICAgJHNjb3BlLnBsYXlpbmcgPSB0cnVlO1xyXG4gICAgJHNjb3BlLnNjb3JlID0gMDtcclxuICAgIHNwYWNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc3BhY2VwaWNzKTtcclxuICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgIHNwYWNlc2hpcCA9IG5ldyBTcGFjZXNoaXAoKTtcclxuICAgICRzY29wZS5zY29yZSA9IDA7XHJcbiAgICBzcGF3bkFzdGVyb2lkcyg1KTtcclxuICAgIGF1dG9TcGF3bigpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0RW50cnlQb3NpdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICB2YXIgZ3JpZFggPSBNYXRoLnJhbmRvbSgpICogMjtcclxuICAgIHZhciBncmlkWSA9IE1hdGgucmFuZG9tKCkgKiAyO1xyXG4gICAgdmFyIHgsIHkgPSAwO1xyXG4gICAgaWYgKGdyaWRYID49IDEpIHtcclxuICAgICAgeCA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMud2lkdGg7XHJcbiAgICAgIGlmICh5ID49IDEpIHtcclxuICAgICAgICB5ID0gMCAtIGhlaWdodDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB5ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgeSA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICBpZiAoZ3JpZFkgPj0gMSkge1xyXG4gICAgICAgIHggPSAwIC0gd2lkdGg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeCA9IGNhbnZhcy53aWR0aDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFt4LCB5XTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGhpdChvYmplY3QxLCBvYmplY3QyKSB7XHJcbiAgICByZXR1cm4gKG9iamVjdDEucG9zaXRpb25bMF0gPCBvYmplY3QyLnBvc2l0aW9uWzBdICsgb2JqZWN0Mi53aWR0aCkgJiZcclxuICAgICAgICAgICAob2JqZWN0Mi5wb3NpdGlvblswXSA8IG9iamVjdDEucG9zaXRpb25bMF0gKyBvYmplY3QxLndpZHRoKSAmJlxyXG4gICAgICAgICAgIChvYmplY3QxLnBvc2l0aW9uWzFdIDwgb2JqZWN0Mi5wb3NpdGlvblsxXSArIG9iamVjdDIuaGVpZ2h0KSAmJlxyXG4gICAgICAgICAgIChvYmplY3QyLnBvc2l0aW9uWzFdIDwgb2JqZWN0MS5wb3NpdGlvblsxXSArIG9iamVjdDEuaGVpZ2h0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGF1dG9TcGF3bigpIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhhc3Rlcm9pZHMpLmxlbmd0aCA8IDIwMCkge1xyXG4gICAgICB2YXIgaWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDApO1xyXG4gICAgICBhc3Rlcm9pZHNbaWRdID0gbmV3IEFzdGVyb2lkKGlkKTtcclxuICAgIH1cclxuICAgIGlmICgkc2NvcGUucGxheWluZykge1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGF1dG9TcGF3bigpO1xyXG4gICAgICB9LCBzcGF3bkludGVydmFsKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3Bhd25JbnRlcnZhbCgpIHtcclxuICAgIGlmICgkc2NvcGUuc2NvcmUgPCAxMDAwKSB7XHJcbiAgICAgIHJldHVybiAxMDAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCAyMDAwKSB7XHJcbiAgICAgIHJldHVybiA5MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDMwMDApIHtcclxuICAgICAgcmV0dXJuIDgwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgNDAwMCkge1xyXG4gICAgICByZXR1cm4gNzAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCA1MDAwKSB7XHJcbiAgICAgIHJldHVybiA2MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDYwMDApIHtcclxuICAgICAgcmV0dXJuIDUwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgNzAwMCkge1xyXG4gICAgICByZXR1cm4gNDAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCA4MDAwKSB7XHJcbiAgICAgIHJldHVybiAzMDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gMjAwO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3Bhd25Bc3Rlcm9pZHMoYW1vdW50KSB7XHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICBkbyB7XHJcbiAgICAgIHZhciBpZCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XHJcbiAgICAgIGFzdGVyb2lkc1tpZF0gPSBuZXcgQXN0ZXJvaWQoaWQpO1xyXG4gICAgfSB3aGlsZSAoaSsrIDw9IGFtb3VudCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzcGF3blBvd2VydXAoKSB7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMocG93ZXJ1cHMpLmxlbmd0aCA8IDMpIHtcclxuICAgICAgdmFyIGlkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcclxuICAgICAgcG93ZXJ1cHNbaWRdID0gbmV3IFBvd2VydXAoaWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2FtZU92ZXIoKSB7XHJcbiAgICAkc2NvcGUucGxheWluZyA9IGZhbHNlO1xyXG4gICAgZm9yICh2YXIgaSBpbiBhc3Rlcm9pZHMpIHtcclxuICAgICAgYXN0ZXJvaWRzW2ldLmV4cGxvZGUoKTtcclxuICAgIH1cclxuICAgIHNob3RzID0ge307XHJcbiAgICBpZiAoJHNjb3BlLmxvZ2dlZEluKSB7XHJcbiAgICAgIGlmICgkc2NvcGUuY3VycmVudFVzZXIuaGlnaHNjb3JlLmFzdGVyb2lkcyA8ICRzY29wZS5zY29yZSkge1xyXG4gICAgICAgICRzY29wZS5jdXJyZW50VXNlci5oaWdoc2NvcmUuYXN0ZXJvaWRzID0gJHNjb3BlLnNjb3JlO1xyXG4gICAgICAgIEdhbWVTdmMuc2V0SGlnaHNjb3JlKCdhc3Rlcm9pZHMnLCAkc2NvcGUuY3VycmVudFVzZXIuX2lkLCAkc2NvcGUuc2NvcmUpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoJHNjb3BlLmhpZ2hzY29yZSA8ICRzY29wZS5zY29yZSkge1xyXG4gICAgICAgICRzY29wZS5oaWdoc2NvcmUgPSAkc2NvcGUuc2NvcmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG5cdC8vIFN0YXJ0IGxpc3RlbmluZyB0byByZXNpemUgZXZlbnRzIGFuZFxyXG5cdC8vIGRyYXcgY2FudmFzLlxyXG5cclxuXHRmdW5jdGlvbiBpbml0aWFsaXplKCkge1xyXG5cdFx0Ly8gUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXIgdG9cclxuXHRcdC8vIGNhbGwgdGhlIHJlc2l6ZUNhbnZhcygpIGZ1bmN0aW9uIGVhY2ggdGltZVxyXG5cdFx0Ly8gdGhlIHdpbmRvdyBpcyByZXNpemVkLlxyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUNhbnZhcywgZmFsc2UpO1xyXG5cclxuXHJcblx0XHQvLyBEcmF3IGNhbnZhcyBib3JkZXIgZm9yIHRoZSBmaXJzdCB0aW1lLlxyXG5cdFx0cmVzaXplQ2FudmFzKCk7XHJcblx0fVxyXG5cdC8vIFJ1bnMgZWFjaCB0aW1lIHRoZSBET00gd2luZG93IHJlc2l6ZSBldmVudCBmaXJlcy5cclxuXHQvLyBSZXNldHMgdGhlIGNhbnZhcyBkaW1lbnNpb25zIHRvIG1hdGNoIHdpbmRvdyxcclxuXHQvLyB0aGVuIGRyYXdzIHRoZSBuZXcgYm9yZGVycyBhY2NvcmRpbmdseS5cclxuXHRmdW5jdGlvbiByZXNpemVDYW52YXMoKSB7XHJcbiAgICBjb25zb2xlLmxvZyh3aW5kb3cuaW5uZXJXaWR0aCk7XHJcblx0XHRjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHRcdGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAoY2FudmFzLndpZHRoIDw9IDc2OCA/IDUwIDogMTA1KTtcclxuXHR9XHJcblxyXG5cdGluaXRpYWxpemUoKTtcclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XHJcblxyXG4gIHZhciB0YWxseSA9IDA7XHJcbiAgdmFyIGRpcmVjdGlvbiA9IHRydWU7XHJcblxyXG4gIGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICBmb3IgKHZhciBpIGluIHNob3RzKSB7XHJcbiAgICAgIGlmIChzaG90c1tpXS5saWZlc3BhbiA8PSAwKSB7XHJcbiAgICAgICAgZGVsZXRlIHNob3RzW2ldO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNob3RzW2ldLm1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChpIGluIGFzdGVyb2lkcykge1xyXG4gICAgICBhc3Rlcm9pZHNbaV0ubW92ZSgpO1xyXG4gICAgfVxyXG4gICAgZm9yIChpIGluIHBvd2VydXBzKSB7XHJcbiAgICAgIHBvd2VydXBzW2ldLm1vdmUoKTtcclxuICAgIH1cclxuICAgIGZvciAoaSBpbiBleHBsb3Npb25zKSB7XHJcbiAgICAgIGlmIChleHBsb3Npb25zW2ldLmxpZmVzcGFuIDw9IDApIHtcclxuICAgICAgICBkZWxldGUgZXhwbG9zaW9uc1tpXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBleHBsb3Npb25zW2ldLm1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXZhbHVhdGVLZXlzKCk7XHJcbiAgICBpZiAoJHNjb3BlLnBsYXlpbmcpIHtcclxuICAgICAgc3BhY2VzaGlwLm1vdmUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBncmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCBjYW52YXMud2lkdGgsIDApO1xyXG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoJzAnLCAncmdiKCcgKyBNYXRoLmZsb29yKDI1NiAtIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcpJyk7XHJcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMC4yNScsICdyZ2IoJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCcwLjUnLCAncmdiKCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDI1NiAtIDI1NiAqIHRhbGx5IC8gMTAwKSArICcpJyk7XHJcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMC43NScsICdyZ2IoJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCcxLjAnLCAncmdiKCcgKyBNYXRoLmZsb29yKDI1NiAtIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcpJyk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBncmFkaWVudDtcclxuICAgICAgY3R4LmZvbnQ9JzYwcHggTW9ub3Rvbic7XHJcbiAgICAgIGN0eC5maWxsVGV4dCgnQXN0ZXJvaWRzJywgY2FudmFzLndpZHRoIC8gMiAtIGN0eC5tZWFzdXJlVGV4dCgnQXN0ZXJvaWRzJykud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgIGN0eC5mb250PScyMHB4IEFsZHJpY2gnO1xyXG4gICAgICBjdHguZmlsbFRleHQoJ1ByZXNzIHNwYWNlIHRvIHN0YXJ0JywgY2FudmFzLndpZHRoIC8gMiAtIGN0eC5tZWFzdXJlVGV4dCgnUHJlc3Mgc3BhY2UgdG8gc3RhcnQnKS53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyICsgMjApO1xyXG4gICAgICBjdHguZmlsbFRleHQoJ0Rlc2lnbmVkIGFuZCBkZXZlbG9wZWQgYnkgTGF1cmVudCBEZWJhY2tlcicsIGNhbnZhcy53aWR0aCAvIDIgLSBjdHgubWVhc3VyZVRleHQoJ0Rlc2lnbmVkIGFuZCBkZXZlbG9wZWQgYnkgTGF1cmVudCBEZWJhY2tlcicpLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAtIDMwKTtcclxuICAgIH1cclxuICAgIHRhbGx5ICs9IGRpcmVjdGlvbiA/IDEgOiAtMTtcclxuICAgIGlmICh0YWxseSA+IDEwMCkge1xyXG4gICAgICB0YWxseSA9IDEwMDtcclxuICAgICAgZGlyZWN0aW9uID0gZmFsc2U7XHJcbiAgICB9IGVsc2UgaWYgKHRhbGx5IDwgMCkge1xyXG4gICAgICB0YWxseSA9IDA7XHJcbiAgICAgIGRpcmVjdGlvbiA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XHJcbiAgfVxyXG5cclxuICAkc2NvcGUuc3BhY2UgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGJhY2tncm91bmRJbWFnZTogJ3VybChcImFzdGVyb2lkcy9zcGFjZScgKyBzcGFjZSArICcuanBnXCIpJ1xyXG4gICAgfTtcclxuICB9O1xyXG5cclxuXHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdCdWJibGVzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuXHJcbiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWJibGVzLXBhZ2UnKTtcclxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgdmFyIGJ1YmJsZXMgPSBbXTtcclxuICB2YXIgY29sb3JzID0gWycjZmZjMzAwJywnI2ZmNTczMycsJyNjNzAwMzknLCcjOTAwYzNlJywnIzU3MTg0NSddO1xyXG5cclxuICBmdW5jdGlvbiBCdWJibGUoKSB7XHJcbiAgICB0aGlzLmxpZmVzcGFuID0gMDtcclxuICAgIHRoaXMucmFkaXVzID0gMTtcclxuICAgIHRoaXMuZXhwYW5kaW5nID0gdHJ1ZTtcclxuICAgIHRoaXMuc3BlZWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAzKTtcclxuICAgIHRoaXMuY2lyY3VtZmVyZW5jZSA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDUwKSArIDU7XHJcbiAgICB0aGlzLm1heFJhZGl1cyA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDIwMCkgKyAyMDtcclxuICAgIHRoaXMueCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aCk7XHJcbiAgICB0aGlzLnkgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0KTtcclxuICAgIHRoaXMudnggPSAoTWF0aC5yYW5kb20oKSA+PSAwLjUgPyAxIDogLTEpO1xyXG4gICAgdGhpcy52eSA9IChNYXRoLnJhbmRvbSgpID49IDAuNSA/IDEgOiAtMSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkcmF3KCkge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgYnViYmxlcy5mb3JFYWNoKGZ1bmN0aW9uKGJ1YmJsZSkge1xyXG4gICAgICB2YXIgY29sb3IgPSBjb2xvcnNbTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoICogYnViYmxlLnJhZGl1cyAvIGJ1YmJsZS5tYXhSYWRpdXMpXTtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguYXJjKGJ1YmJsZS54LCBidWJibGUueSwgYnViYmxlLnJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gY29sb3JzW01hdGgucm91bmQoY29sb3JzLmxlbmd0aCAqIGJ1YmJsZS5yYWRpdXMgLyBidWJibGUubWF4UmFkaXVzKV07XHJcbiAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yc1tjb2xvcnMubGVuZ3RoIC0gTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoICogYnViYmxlLnJhZGl1cyAvIGJ1YmJsZS5tYXhSYWRpdXMpXTtcclxuICAgICAgY3R4LmxpbmVXaWR0aCA9IGJ1YmJsZS5jaXJjdW1mZXJlbmNlICogYnViYmxlLnJhZGl1cyAvIGJ1YmJsZS5tYXhSYWRpdXM7XHJcbiAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZmlsdGVyQnViYmxlcygpIHtcclxuICAgIGJ1YmJsZXMucHVzaChuZXcgQnViYmxlKCkpO1xyXG4gICAgYnViYmxlcyA9IGJ1YmJsZXMuZmlsdGVyKGZ1bmN0aW9uIChidWJibGUpIHtcclxuICAgICAgaWYgKGJ1YmJsZS5yYWRpdXMgPT09IGJ1YmJsZS5tYXhSYWRpdXMpIHtcclxuICAgICAgICBidWJibGUuZXhwYW5kaW5nID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgYnViYmxlLnggKz0gYnViYmxlLnZ4ICogYnViYmxlLnNwZWVkO1xyXG4gICAgICBidWJibGUueSArPSBidWJibGUudnkgKiBidWJibGUuc3BlZWQ7XHJcbiAgICAgIGJ1YmJsZS5yYWRpdXMgKz0gKGJ1YmJsZS5leHBhbmRpbmcgPyAxIDogLTEpO1xyXG4gICAgICByZXR1cm4gYnViYmxlLnJhZGl1cyA+IDA7XHJcbiAgICB9KTtcclxuICAgIGRyYXcoKTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmaWx0ZXJCdWJibGVzKTtcclxuICB9XHJcblxyXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShmaWx0ZXJCdWJibGVzKTtcclxuXHJcblxyXG5cdChmdW5jdGlvbigpIHtcclxuXHJcblx0XHQvLyBTdGFydCBsaXN0ZW5pbmcgdG8gcmVzaXplIGV2ZW50cyBhbmRcclxuXHRcdC8vIGRyYXcgY2FudmFzLlxyXG5cdFx0aW5pdGlhbGl6ZSgpO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcblx0XHRcdC8vIFJlZ2lzdGVyIGFuIGV2ZW50IGxpc3RlbmVyIHRvXHJcblx0XHRcdC8vIGNhbGwgdGhlIHJlc2l6ZUNhbnZhcygpIGZ1bmN0aW9uIGVhY2ggdGltZVxyXG5cdFx0XHQvLyB0aGUgd2luZG93IGlzIHJlc2l6ZWQuXHJcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVDYW52YXMsIGZhbHNlKTtcclxuXHJcblx0XHRcdC8vIERyYXcgY2FudmFzIGJvcmRlciBmb3IgdGhlIGZpcnN0IHRpbWUuXHJcblx0XHRcdHJlc2l6ZUNhbnZhcygpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gUnVucyBlYWNoIHRpbWUgdGhlIERPTSB3aW5kb3cgcmVzaXplIGV2ZW50IGZpcmVzLlxyXG5cdFx0Ly8gUmVzZXRzIHRoZSBjYW52YXMgZGltZW5zaW9ucyB0byBtYXRjaCB3aW5kb3csXHJcblx0XHQvLyB0aGVuIGRyYXdzIHRoZSBuZXcgYm9yZGVycyBhY2NvcmRpbmdseS5cclxuXHRcdGZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpIHtcclxuXHRcdFx0Y2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAoY2FudmFzLndpZHRoIDw9IDc2OCA/IDU1IDogMTExKTtcclxuXHRcdH1cclxuXHJcblx0fSkoKTtcclxuXHJcblxyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignQ29udGFjdEN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBFbWFpbFN2Yykge1xyXG5cclxuICAkc2NvcGUub3B0aW9ucyA9IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJTcGFtXCIsXHJcbiAgICAgIHRleHQ6IFwiSSBhbSBhIHNwYW0gYm90IGFuZCBhdXRvbWF0aWNhbGx5IGNoZWNrIHRoZSBmaXJzdCBvcHRpb24gSSBmaW5kIVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIk9wcG9ydHVuaXRpeVwiLFxyXG4gICAgICB0ZXh0OiBcIllvdSBzZWVtIHRvIGhhdmUgdGhlIHNraWxscyBJIHNlZWssIEknZCBsaWtlIHRvIHRhbGsgYWJvdXQgc29tZSBvcHBvcnR1bml0aWVzLlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIlJlc3VtZVwiLFxyXG4gICAgICB0ZXh0OiBcIkkgZGlnIHRoZSByZXN1bWUsIGhvdyBkaWQgeW91IG1ha2UgaXQ/XCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiT3RoZXJcIixcclxuICAgICAgdGV4dDogXCJTdW10aW4gZWxzZSFcIlxyXG4gICAgfVxyXG5cclxuICBdO1xyXG5cclxuICAkc2NvcGUuY29udGFjdCA9IHtcclxuICAgIGVtYWlsOiBcIlwiLFxyXG4gICAgbmFtZTogXCJcIixcclxuICAgIHBob25lOiBcIlwiLFxyXG4gICAgYWJvdXQ6IFwiXCIsXHJcbiAgICBtZXNzYWdlOiBcIlwiXHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbmQgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5zZW5kaW5nID0gdHJ1ZTtcclxuICAgIGNvbnNvbGUubG9nKCdoZXJlJyk7XHJcbiAgICBFbWFpbFN2Yy5zZW5kKHtcclxuICAgICAgXCJlbWFpbFwiOiAkc2NvcGUuY29udGFjdC5lbWFpbCxcclxuICAgICAgXCJuYW1lXCI6ICRzY29wZS5jb250YWN0Lm5hbWUsXHJcbiAgICAgIFwicGhvbmVcIjogICRzY29wZS5jb250YWN0LnBob25lLFxyXG4gICAgICBcImFib3V0XCI6ICRzY29wZS5jb250YWN0LmFib3V0LFxyXG4gICAgICBcIm1lc3NhZ2VcIjogJHNjb3BlLmNvbnRhY3QubWVzc2FnZVxyXG4gICAgfSlcclxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICRzY29wZS5zZW50ID0gdHJ1ZTtcclxuICAgICAgY29uc29sZS5sb2coXCJTVUNDRVNTLiBzdGF0dXM9JWQsIHRleHQ9JXNcIiwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS50ZXh0KTtcclxuICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICRzY29wZS5zZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRkFJTEVELiBlcnJvcj1cIiwgZXJyKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdFeHBlcmllbmNlQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuXHJcbiAgJHNjb3BlLmdldFNraWxsID0gZnVuY3Rpb24oc2tpbGxDb2RlKSB7XHJcbiAgICBpZiAoISRzY29wZS5za2lsbHMpIHJldHVybjtcclxuICAgIHJldHVybiAkc2NvcGUuc2tpbGxzLmZpbmQoZnVuY3Rpb24oc2tpbGwpIHtcclxuICAgICAgcmV0dXJuIHNraWxsLmNvZGUgPT09IHNraWxsQ29kZTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdIb2JiaWVzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICR3aW5kb3cpIHtcclxuXHJcbiAgJHNjb3BlLmhvYmJ5U2VsZWN0b3JWaXNpYmxlID0gZmFsc2U7XHJcblxyXG4gICQuZ2V0SlNPTignaHR0cHM6Ly93d3cucmVkZGl0LmNvbS91c2VyL2JlbGdvY2FuYWRpYW4vYWJvdXQvLmpzb24nLCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgIC8vY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS5zZWxlY3RlZEhvYmJ5ID0gJHNjb3BlLmhvYmJpZXNbMF07XHJcblxyXG4gICRzY29wZS5zZWxlY3RIb2JieSA9IGZ1bmN0aW9uIChob2JieSkge1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkSG9iYnkgPSBob2JieTtcclxuICAgICRzY29wZS5ob2JieVNlbGVjdG9yVmlzaWJsZSA9IGZhbHNlO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zaG93SG9iYnkgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xyXG4gICAgaWYgKCF2YWx1ZS5pbWFnZXMpIHJldHVybiBmYWxzZTtcclxuICAgIHJldHVybiB2YWx1ZS5pbWFnZXMubGVuZ3RoID4gMDtcclxuICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdMZW1taW5nc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBHYW1lU3ZjKSB7XHJcblxyXG4gIHZhciBMRUZUID0gMDtcclxuICB2YXIgUklHSFQgPSAxO1xyXG5cclxuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xlbW1pbmdzLXBhZ2UnKTtcclxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgdmFyIGxlbW1pbmdzSW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICBsZW1taW5nc0ltYWdlLnNyYyA9ICdsZW1taW5ncy9sZW1taW5ncy5wbmcnO1xyXG4gIHZhciBkZWNvckltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgZGVjb3JJbWFnZS5zcmMgPSAnbGVtbWluZ3MvZGVjb3IucG5nJztcclxuICB2YXIgbGVtbWluZ3MgPSB7fTtcclxuICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xyXG5cclxuICB2YXIgYWN0aW9ucyA9IHtcclxuICAgIHdhbGs6IHtcclxuICAgICAgc3RhcnQ6IFswLCAwXSxcclxuICAgICAgZW5kOiBbMzIwLCAyMF0sXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgaHVoOiB7XHJcbiAgICAgIHN0YXJ0OiBbMzIwLCAwXSxcclxuICAgICAgZW5kOiBbNjQwLCAyMF0sXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IHRydWVcclxuICAgIH0sXHJcbiAgICBmYWxsOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgODBdLFxyXG4gICAgICBlbmQ6IFsxNjAsIDEwMF0sXHJcbiAgICAgIGNvbHVtbnM6IDQsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZmx5OiB7XHJcbiAgICAgIHN0YXJ0OiBbMTYwLCA4MF0sXHJcbiAgICAgIGVuZDogWzQ4MCwgMTEwXSxcclxuICAgICAgY29sdW1uczogOCxcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBzdG9wOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMTIwXSxcclxuICAgICAgZW5kOiBbNjQwLCAxNDBdLFxyXG4gICAgICBjb2x1bW5zOiAxNixcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBjbGltYjoge1xyXG4gICAgICBzdGFydDogWzAsIDE2MF0sXHJcbiAgICAgIGVuZDogWzY0MCwgMTg1XSxcclxuICAgICAgY29sdW1uczogMTYsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgYnVpbGQ6IHtcclxuICAgICAgc3RhcnQ6IFswLCAyMDBdLFxyXG4gICAgICBlbmQ6IFs2NDAsIDIyNV0sXHJcbiAgICAgIGNvbHVtbnM6IDE2LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHB1bmNoOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMjQwXSxcclxuICAgICAgZW5kOiBbNjQwLCAzMDBdLFxyXG4gICAgICBjb2x1bW5zOiAxNixcclxuICAgICAgcm93czogMixcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBkaWc6IHtcclxuICAgICAgc3RhcnQ6IFswLCAzMjBdLFxyXG4gICAgICBlbmQ6IFszMjAsIDM0NV0sXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIExlbW1pbmcoaW5pdCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoY2FudmFzLndpZHRoIC0gMjAwKSkgKyAxMDAsIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChjYW52YXMuaGVpZ2h0IC0gMjAwKSkgKyAxMDBdO1xyXG4gICAgdGhpcy5kaXJlY3Rpb24gPSBNYXRoLnJhbmRvbSgpICogMiA+IDEgPyBMRUZUIDogUklHSFQ7XHJcbiAgICB0aGlzLmFjdCA9IGZ1bmN0aW9uKGFjdGlvbikge1xyXG4gICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbnNbYWN0aW9uXTtcclxuICAgICAgdGhpcy5jeWNsZSA9IDA7XHJcbiAgICAgIHRoaXMud2lkdGggPSAodGhpcy5hY3Rpb24uZW5kWzBdIC0gdGhpcy5hY3Rpb24uc3RhcnRbMF0pIC8gdGhpcy5hY3Rpb24uY29sdW1ucztcclxuICAgICAgdGhpcy5oZWlnaHQgPSAodGhpcy5hY3Rpb24uZW5kWzFdIC0gdGhpcy5hY3Rpb24uc3RhcnRbMV0gLSAoMjAgKiAodGhpcy5hY3Rpb24ucm93cyAtIDEpKSkgLyB0aGlzLmFjdGlvbi5yb3dzO1xyXG4gICAgICB0aGlzLmFuaW1hdGlvbiA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5hY3QoaW5pdCk7XHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uWzBdLCB0aGlzLnBvc2l0aW9uWzFdKTtcclxuICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSBMRUZUKSB7XHJcbiAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgY29sdW1uID0gdGhpcy5jeWNsZSAlIHRoaXMuYWN0aW9uLmNvbHVtbnM7XHJcbiAgICAgIHZhciByb3cgPSBNYXRoLmZsb29yKHRoaXMuY3ljbGUgLyB0aGlzLmFjdGlvbi5jb2x1bW5zKTtcclxuICAgICAgY3R4LmRyYXdJbWFnZShsZW1taW5nc0ltYWdlLCAodGhpcy53aWR0aCAqIGNvbHVtbikgKyB0aGlzLmFjdGlvbi5zdGFydFswXSwgKCh0aGlzLmhlaWdodCArIDIwKSAqIHJvdykgKyB0aGlzLmFjdGlvbi5zdGFydFsxXSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIDAsIHRoaXMud2lkdGggKiAyLCB0aGlzLmhlaWdodCAqIDIpO1xyXG4gICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICBpZiAodGhpcy5hY3Rpb24ucmV2ZXJzZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZSsrO1xyXG4gICAgICAgICAgaWYgKHRoaXMuY3ljbGUgPj0gdGhpcy5hY3Rpb24uY29sdW1ucyAqIHRoaXMuYWN0aW9uLnJvd3MpIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSAhdGhpcy5hbmltYXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuY3ljbGUtLTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZS0tO1xyXG4gICAgICAgICAgaWYgKHRoaXMuY3ljbGUgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gIXRoaXMuYW5pbWF0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLmN5Y2xlID0gMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5jeWNsZSsrO1xyXG4gICAgICAgIGlmICh0aGlzLmN5Y2xlID49IHRoaXMuYWN0aW9uLmNvbHVtbnMgKiB0aGlzLmFjdGlvbi5yb3dzKSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBIYXRjaCgpIHtcclxuICAgIHRoaXMucG9zaXRpb24gPSBbMjAsIDIwXTtcclxuICAgIHRoaXMuYWN0aW9uID0ge1xyXG4gICAgICBzdGFydDogWzAsIDBdLFxyXG4gICAgICBlbmQ6IFs4MiwgNTAwXSxcclxuICAgICAgY29sdW1uczogMSxcclxuICAgICAgcm93czogMTBcclxuICAgIH1cclxuICAgIHRoaXMud2lkdGggPSAodGhpcy5hY3Rpb24uZW5kWzBdIC0gdGhpcy5hY3Rpb24uc3RhcnRbMF0pIC8gdGhpcy5hY3Rpb24uY29sdW1ucztcclxuICAgIHRoaXMuaGVpZ2h0ID0gKHRoaXMuYWN0aW9uLmVuZFsxXSAtIHRoaXMuYWN0aW9uLnN0YXJ0WzFdKSAvIHRoaXMuYWN0aW9uLnJvd3M7XHJcbiAgICB0aGlzLmN5Y2xlID0gMDtcclxuICAgIHRoaXMub3BlbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMucG9zaXRpb25bMF0sIHRoaXMucG9zaXRpb25bMV0pO1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMud2lkdGggLyAyLCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICB2YXIgY29sdW1uLCByb3c7XHJcbiAgICAgIGlmIChzdGFydGVkKSB7XHJcbiAgICAgICAgY29sdW1uID0gdGhpcy5jeWNsZSAlIHRoaXMuYWN0aW9uLmNvbHVtbnM7XHJcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcih0aGlzLmN5Y2xlIC8gdGhpcy5hY3Rpb24uY29sdW1ucyk7XHJcbiAgICAgICAgaWYgKHRoaXMuY3ljbGUgPCA5KSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlKys7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbHVtbiA9IDA7XHJcbiAgICAgICAgcm93ID0gMDtcclxuICAgICAgfVxyXG4gICAgICBjdHguZHJhd0ltYWdlKGRlY29ySW1hZ2UsICh0aGlzLndpZHRoICogY29sdW1uKSArIHRoaXMuYWN0aW9uLnN0YXJ0WzBdLCAodGhpcy5oZWlnaHQgKiByb3cpICsgdGhpcy5hY3Rpb24uc3RhcnRbMV0gLSAxLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgMCwgMCwgdGhpcy53aWR0aCAqIDIsIHRoaXMuaGVpZ2h0ICogMik7XHJcbiAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzcGF3bkxlbW1pbmcoKSB7XHJcbiAgICBPYmplY3Qua2V5cyhhY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGFjdGlvbikge1xyXG4gICAgICBsZW1taW5nc1tNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDApXSA9IG5ldyBMZW1taW5nKGFjdGlvbik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG5cdGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcblx0XHQvLyBSZWdpc3RlciBhbiBldmVudCBsaXN0ZW5lciB0b1xyXG5cdFx0Ly8gY2FsbCB0aGUgcmVzaXplQ2FudmFzKCkgZnVuY3Rpb24gZWFjaCB0aW1lXHJcblx0XHQvLyB0aGUgd2luZG93IGlzIHJlc2l6ZWQuXHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplQ2FudmFzLCBmYWxzZSk7XHJcblx0XHQvLyBEcmF3IGNhbnZhcyBib3JkZXIgZm9yIHRoZSBmaXJzdCB0aW1lLlxyXG5cdFx0cmVzaXplQ2FudmFzKCk7XHJcblx0fVxyXG5cdC8vIFJ1bnMgZWFjaCB0aW1lIHRoZSBET00gd2luZG93IHJlc2l6ZSBldmVudCBmaXJlcy5cclxuXHQvLyBSZXNldHMgdGhlIGNhbnZhcyBkaW1lbnNpb25zIHRvIG1hdGNoIHdpbmRvdyxcclxuXHQvLyB0aGVuIGRyYXdzIHRoZSBuZXcgYm9yZGVycyBhY2NvcmRpbmdseS5cclxuXHRmdW5jdGlvbiByZXNpemVDYW52YXMoKSB7XHJcblx0XHRjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHRcdGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAoY2FudmFzLndpZHRoIDw9IDc2OCA/IDUwIDogMTA1KTtcclxuXHR9XHJcblxyXG5cdGluaXRpYWxpemUoKTtcclxuICBzcGF3bkxlbW1pbmcoKTtcclxuICBsZXQgaGF0Y2ggPSBuZXcgSGF0Y2goKVxyXG4gIGRyYXcoKTtcclxuXHJcbiAgZnVuY3Rpb24gZHJhdygpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIGlmICghc3RhcnRlZCkge1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5mb250PSc0MHB4IE1vbm90b24nO1xyXG4gICAgICBjdHgubGluZVdpZHRoID0gJzEwJztcclxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ2JsdWUnO1xyXG4gICAgICBjdHgucmVjdCgxNSwgY2FudmFzLmhlaWdodCAtIDQ1LCBjdHgubWVhc3VyZVRleHQoJ1N0YXJ0Jykud2lkdGggKyAyMCwgY3R4Lm1lYXN1cmVUZXh0KCdTdGFydCcpLmhlaWdodCArIGNhbnZhcy5oZWlnaHQgLSA0NSk7XHJcbiAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgIGN0eC5maWxsVGV4dCgnU3RhcnQnLCAyMCwgY2FudmFzLmhlaWdodCAtIDUwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gbGVtbWluZ3MpIHtcclxuICAgICAgICBsZW1taW5nc1tpXS5tb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGhhdGNoLm9wZW4oKTtcclxuICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgZHJhdygpO1xyXG4gICAgfSwgMTUwKTtcclxuICB9XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0xpc3RzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgQ2F0ZWdvcmllc1N2Yykge1xyXG5cclxuICAkc2NvcGUuc2hvd0NhdGVnb3J5ID0gdHJ1ZTtcclxuXHJcbiAgJHNjb3BlLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBDYXRlZ29yaWVzU3ZjLmdldENhdGVnb3JpZXMoKVxyXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgJHNjb3BlLnRhc2tzID0gW107XHJcbiAgICAgIGZvciAodmFyIGkgaW4gJHNjb3BlLmNhdGVnb3JpZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBqIGluICRzY29wZS5jYXRlZ29yaWVzW2ldLnRhc2tzKSB7XHJcbiAgICAgICAgICAkc2NvcGUudGFza3MucHVzaCh7XHJcbiAgICAgICAgICAgIFwiY2F0ZWdvcnlcIjogJHNjb3BlLmNhdGVnb3JpZXNbaV0ubmFtZSxcclxuICAgICAgICAgICAgXCJ0YXNrXCI6ICRzY29wZS5jYXRlZ29yaWVzW2ldLnRhc2tzW2pdLm5hbWVcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdENhdGVnb3J5ID0gZnVuY3Rpb24oY2F0ZWdvcnkpIHtcclxuICAgICRzY29wZS5zZWxlY3RlZENhdGVnb3J5ID0gY2F0ZWdvcnk7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRUYXNrcyA9IFtdO1xyXG4gICAgJHNjb3BlLnNlbGVjdGFibGVUYXNrcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSBpbiAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcykge1xyXG4gICAgICAkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLnB1c2goJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0pO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLnNob3dDYXRlZ29yeSA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmVudGVyZWRDYXRlZ29yeSA9ICcnO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5uZXdDYXRlZ29yeSA9IGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5jYXRlZ29yaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICgkc2NvcGUuY2F0ZWdvcmllc1tpXS5uYW1lID09PSBjYXRlZ29yeSkge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RDYXRlZ29yeSgkc2NvcGUuY2F0ZWdvcmllc1tpXSk7XHJcbiAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWZvdW5kKSB7XHJcbiAgICAgIENhdGVnb3JpZXNTdmMuYWRkQ2F0ZWdvcnkoe1xyXG4gICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeVxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgICAgICRzY29wZS5pbml0KCk7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdENhdGVnb3J5KGNhdGVnb3J5KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuZW50ZXJlZENhdGVnb3J5ID0gJyc7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLm5ld1Rhc2sgPSBmdW5jdGlvbiAodGFzaykge1xyXG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzKSB7XHJcbiAgICAgIGlmICgkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXS5uYW1lID09PSB0YXNrKSB7XHJcbiAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RUYXNrKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFmb3VuZCkge1xyXG4gICAgICBDYXRlZ29yaWVzU3ZjLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkubmFtZSwge1xyXG4gICAgICAgIHRhc2s6IHRhc2tcclxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MucHVzaCh7IG5hbWU6IHRhc2sgfSk7XHJcbiAgICAgICAgJHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsICRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzWyRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzLmxlbmd0aCAtIDFdKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuZW50ZXJlZFRhc2sgPSAnJztcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VsZWN0VGFzayA9IGZ1bmN0aW9uICh0YXNrKSB7XHJcbiAgICAkc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcywgdGFzayk7XHJcbiAgICAkc2NvcGUucmVtb3ZlVGFzaygkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLCB0YXNrKTtcclxuICAgICRzY29wZS5lbnRlcmVkVGFzayA9ICcnO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS51bnNlbGVjdFRhc2sgPSBmdW5jdGlvbiAodGFzaykge1xyXG4gICAgJHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGFibGVUYXNrcywgdGFzayk7XHJcbiAgICAkc2NvcGUucmVtb3ZlVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcywgdGFzayk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmFkZFRhc2sgPSBmdW5jdGlvbih0YXNrTGlzdCwgdGFzaykge1xyXG4gICAgdGFza0xpc3QucHVzaCh0YXNrKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUucmVtb3ZlVGFzayA9IGZ1bmN0aW9uKHRhc2tMaXN0LCB0YXNrKSB7XHJcbiAgICB0YXNrTGlzdC5zcGxpY2UodGFza0xpc3QuaW5kZXhPZih0YXNrKSwgMSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnN0YXJ0UHJpb3JpdGl6aW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICBDYXRlZ29yaWVzU3ZjLnNldFByaW9yaXR5TGlzdCgkc2NvcGUuc2VsZWN0ZWRUYXNrcyk7XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL3ByaW9yaXRpemUnKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0UXVlc3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoISRzY29wZS5zZWxlY3RlZFRhc2tzKSByZXR1cm4gJyc7XHJcbiAgICB2YXIgY291bnRlciA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gJHNjb3BlLnNlbGVjdGVkVGFza3MubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xyXG4gICAgICBjb3VudGVyICs9IGk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY291bnRlcjtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBVc2VyU3ZjKSB7XHJcblxyXG4gIC8vIEluaXRpYWxpemUgdGhlIEZpcmViYXNlVUkgV2lkZ2V0IHVzaW5nIEZpcmViYXNlLlxyXG4gIHZhciB1aSA9IG5ldyBmaXJlYmFzZXVpLmF1dGguQXV0aFVJKGZpcmViYXNlLmF1dGgoKSk7XHJcblxyXG4gICRzY29wZS4kb24oJ2xvZ291dCcsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICB1aS5yZXNldCgpO1xyXG4gICAgc3RhcnRVSSgpO1xyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBzdGFydFVJKCkge1xyXG4gICAgdWkuc3RhcnQoJyNmaXJlYmFzZXVpLWF1dGgtY29udGFpbmVyJywge1xyXG5cclxuICAgICAgY2FsbGJhY2tzOiB7XHJcbiAgICAgICAgc2lnbkluU3VjY2VzczogZnVuY3Rpb24oY3VycmVudFVzZXIsIGNyZWRlbnRpYWwsIHJlZGlyZWN0VXJsKSB7XHJcbiAgICAgICAgICAvLyBObyByZWRpcmVjdC5cclxuICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlci5nZXRJZFRva2VuKHRydWUpLnRoZW4oZnVuY3Rpb24oaWRUb2tlbikge1xyXG4gICAgICAgICAgICBVc2VyU3ZjLmF1dGhlbnRpY2F0ZSh7XHJcbiAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IGN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgIGVtYWlsOiBjdXJyZW50VXNlci5lbWFpbCxcclxuICAgICAgICAgICAgICBwaG90b1VSTDogY3VycmVudFVzZXIucGhvdG9VUkwsXHJcbiAgICAgICAgICAgICAgZW1haWxWZXJpZmllZDogY3VycmVudFVzZXIuZW1haWxWZXJpZmllZCxcclxuICAgICAgICAgICAgICBpZFRva2VuOiBpZFRva2VuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAkKCcjbW9kYWwtbG9naW4nKS5tb2RhbCgnaGlkZScpO1xyXG4gICAgICAgICAgICAgIC8vJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICRzY29wZS4kZW1pdCgncG9wdXAnLCB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTG9naW4gRmFpbGVkJyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdhbGVydC1kYW5nZXInXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyAuLi5cclxuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBlcnJvclxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gc2lnbkluRmFpbHVyZSBjYWxsYmFjayBtdXN0IGJlIHByb3ZpZGVkIHRvIGhhbmRsZSBtZXJnZSBjb25mbGljdHMgd2hpY2hcclxuICAgICAgICAvLyBvY2N1ciB3aGVuIGFuIGV4aXN0aW5nIGNyZWRlbnRpYWwgaXMgbGlua2VkIHRvIGFuIGFub255bW91cyB1c2VyLlxyXG4gICAgICAgIHNpZ25JbkZhaWx1cmU6IGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgICAvLyBGb3IgbWVyZ2UgY29uZmxpY3RzLCB0aGUgZXJyb3IuY29kZSB3aWxsIGJlXHJcbiAgICAgICAgICAvLyAnZmlyZWJhc2V1aS9hbm9ueW1vdXMtdXBncmFkZS1tZXJnZS1jb25mbGljdCcuXHJcbiAgICAgICAgICBpZiAoZXJyb3IuY29kZSAhPSAnZmlyZWJhc2V1aS9hbm9ueW1vdXMtdXBncmFkZS1tZXJnZS1jb25mbGljdCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gVGhlIGNyZWRlbnRpYWwgdGhlIHVzZXIgdHJpZWQgdG8gc2lnbiBpbiB3aXRoLlxyXG4gICAgICAgICAgdmFyIGNyZWQgPSBlcnJvci5jcmVkZW50aWFsO1xyXG4gICAgICAgICAgLy8gQ29weSBkYXRhIGZyb20gYW5vbnltb3VzIHVzZXIgdG8gcGVybWFuZW50IHVzZXIgYW5kIGRlbGV0ZSBhbm9ueW1vdXNcclxuICAgICAgICAgIC8vIHVzZXIuXHJcbiAgICAgICAgICAvLyAuLi5cclxuICAgICAgICAgIC8vIEZpbmlzaCBzaWduLWluIGFmdGVyIGRhdGEgaXMgY29waWVkLlxyXG4gICAgICAgICAgcmV0dXJuIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoQ3JlZGVudGlhbChjcmVkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVpU2hvd246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgLy8gVGhlIHdpZGdldCBpcyByZW5kZXJlZC5cclxuICAgICAgICAgIC8vIEhpZGUgdGhlIGxvYWRlci5cclxuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkZXInKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgc2lnbkluU3VjY2Vzc1VybDogJy9ob21lJyxcclxuICAgICAgc2lnbkluT3B0aW9uczogW1xyXG4gICAgICAgIC8vZmlyZWJhc2UuYXV0aC5FbWFpbEF1dGhQcm92aWRlci5QUk9WSURFUl9JRCxcclxuICAgICAgICBmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRCxcclxuICAgICAgICBmaXJlYmFzZS5hdXRoLkZhY2Vib29rQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICBdLFxyXG5cclxuICAgICAgLy8gV2lsbCB1c2UgcG9wdXAgZm9yIElEUCBQcm92aWRlcnMgc2lnbi1pbiBmbG93IGluc3RlYWQgb2YgdGhlIGRlZmF1bHQsIHJlZGlyZWN0LlxyXG4gICAgICBzaWduSW5GbG93OiAncG9wdXAnLFxyXG4gICAgICAvLyBPdGhlciBjb25maWcgb3B0aW9ucy4uLlxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGFydFVJKCk7XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkZmlsdGVyLCBQb3N0c1N2Yykge1xyXG5cclxuICAkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICgkc2NvcGUucG9zdEJvZHkpIHtcclxuICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcclxuICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHlcclxuICAgICAgfSkudGhlbihmdW5jdGlvbiAocG9zdCkge1xyXG4gICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGw7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIFBvc3RzU3ZjLmZldGNoKClcclxuICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICRzY29wZS5wb3N0cyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS4kb24oJ3dzOm5ld19wb3N0JywgZnVuY3Rpb24gKF8sIHBvc3QpIHtcclxuICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICBQb3N0c1N2Yy5nZXRQb3N0KHBvc3QpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUHJpb3JpdGl6ZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIENhdGVnb3JpZXNTdmMpIHtcclxuXHJcbiAgJHNjb3BlLnByaW9yaXR5TGlzdCA9IENhdGVnb3JpZXNTdmMuZ2V0UHJpb3JpdHlMaXN0KCk7XHJcblxyXG4gIGlmICghJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgJGxvY2F0aW9uLnBhdGgoJy9saXN0cycpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbiA9IDE7XHJcbiAgICAkc2NvcGUuY3VycmVudFF1ZXN0aW9uID0gMTtcclxuICAgICRzY29wZS5kb25lID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAkc2NvcGUubWFrZUNob2ljZSA9IGZ1bmN0aW9uKGNob2ljZSkge1xyXG4gICAgZm9yICh2YXIgaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIGlmICgkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkID09PSAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbikge1xyXG4gICAgICAgICRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlID0gY2hvaWNlID09PSAxID8gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZSA6ICRzY29wZS5wcmlvcml0eUxpc3RbaV0uc2Vjb25kQ2hvaWNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24gPT09ICRzY29wZS5jdXJyZW50UXVlc3Rpb24pIHtcclxuICAgICAgJHNjb3BlLmN1cnJlbnRRdWVzdGlvbiA9ICRzY29wZS5jdXJyZW50UXVlc3Rpb24gPT09ICRzY29wZS5wcmlvcml0eUxpc3QubGVuZ3RoID8gMSA6ICRzY29wZS5jdXJyZW50UXVlc3Rpb24gKyAxO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24gPSAkc2NvcGUuY3VycmVudFF1ZXN0aW9uO1xyXG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICBmb3IgKGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgPT09ICcnKSB7XHJcbiAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWZvdW5kKSB7XHJcbiAgICAgICQoJyNwcmlvcml0aXplQ2hvaWNlcycpLmhpZGUoMzAwKTtcclxuICAgICAgJHNjb3BlLmRvbmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZXRCdXR0b25WYWx1ZSA9IGZ1bmN0aW9uKGNob2ljZSkge1xyXG4gICAgaWYgKCEkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLnByaW9yaXR5TGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZCA9PT0gJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gY2hvaWNlID09PSAxID8gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZSA6ICRzY29wZS5wcmlvcml0eUxpc3RbaV0uc2Vjb25kQ2hvaWNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdFF1ZXN0aW9uID0gZnVuY3Rpb24ocXVlc3Rpb24pIHtcclxuICAgICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uID0gcXVlc3Rpb247XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmdldEZpbHRlcmVkUHJpb3JpdHlMaXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoISRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICRzY29wZS5wcmlvcml0eUxpc3RcclxuICAgICAgLnNvcnQoZnVuY3Rpb24oYSwgYil7IHJldHVybiBhLmlkLWIuaWQ7IH0pXHJcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24ocXVlc3Rpb24pIHsgcmV0dXJuIHF1ZXN0aW9uLmNob2ljZSAhPT0gJycgfHwgcXVlc3Rpb24uaWQgPT09ICRzY29wZS5jdXJyZW50UXVlc3Rpb247IH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZXRDaG9pY2VzTWFkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCEkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHZhciBjaG9pY2VzTWFkZSA9IDA7XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlICE9PSAnJykge1xyXG4gICAgICAgIGNob2ljZXNNYWRlKys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjaG9pY2VzTWFkZTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0QnV0dG9uQ2xhc3MgPSBmdW5jdGlvbihjaG9pY2UpIHtcclxuICAgIGlmICghJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQgPT09ICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uKSB7XHJcbiAgICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlID09PSAnJykge1xyXG4gICAgICAgICAgcmV0dXJuICdidG4tcHJpbWFyeSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaG9pY2UgPT09IDEpIHtcclxuICAgICAgICAgIHJldHVybiAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmZpcnN0Q2hvaWNlID09PSAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSA/ICdidG4tc3VjY2VzcycgOiAnYnRuLWRhbmdlcic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLnNlY29uZENob2ljZSA9PT0gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgPyAnYnRuLXN1Y2Nlc3MnIDogJ2J0bi1kYW5nZXInO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5zaG93Q2hvaWNlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJCgnI3ByaW9yaXRpemVDaG9pY2VzJykuc2hvdygxMDAwKTtcclxuICAgICQoJyNyZXZpZXdDaG9pY2VzJykuaGlkZSgpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5jaGFydENsaWNrID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gICAgaWYgKCAkc2NvcGUuY2hhcnQgKSB7XHJcbiAgICAgIC8vIERpZmZlcmVudCBtZXRob2RzIGRlcGVuZGluZyBvbiBjaGFydCB0eXBlXHJcbiAgICAgIC8vY29uc29sZS5sb2coICRzY29wZS5jaGFydC5nZXRQb2ludHNBdEV2ZW50KCBldmVudCApICk7IC8vIGZvciBQb2ludHNcclxuICAgICAgY29uc29sZS5sb2coICRzY29wZS5jaGFydC5nZXRTZWdtZW50c0F0RXZlbnQoIGV2ZW50ICkgKTsgLy8gZm9yIFNlZ21lbnRzXHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNob3dSZXN1bHRzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgJHNjb3BlLmRhdGEgPSBbXTtcclxuICAgICRzY29wZS5vcHRpb25zID0ge1xyXG4gICAgICAvLyBTZXRzIHRoZSBjaGFydCB0byBiZSByZXNwb25zaXZlXHJcbiAgICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcblxyXG4gICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIHNob3VsZCBzaG93IGEgc3Ryb2tlIG9uIGVhY2ggc2VnbWVudFxyXG4gICAgICBzZWdtZW50U2hvd1N0cm9rZSA6IHRydWUsXHJcblxyXG4gICAgICAvL1N0cmluZyAtIFRoZSBjb2xvdXIgb2YgZWFjaCBzZWdtZW50IHN0cm9rZVxyXG4gICAgICBzZWdtZW50U3Ryb2tlQ29sb3IgOiAnI2ZmZicsXHJcblxyXG4gICAgICAvL051bWJlciAtIFRoZSB3aWR0aCBvZiBlYWNoIHNlZ21lbnQgc3Ryb2tlXHJcbiAgICAgIHNlZ21lbnRTdHJva2VXaWR0aCA6IDIsXHJcblxyXG4gICAgICAvL051bWJlciAtIFRoZSBwZXJjZW50YWdlIG9mIHRoZSBjaGFydCB0aGF0IHdlIGN1dCBvdXQgb2YgdGhlIG1pZGRsZVxyXG4gICAgICBwZXJjZW50YWdlSW5uZXJDdXRvdXQgOiAwLCAvLyBUaGlzIGlzIDAgZm9yIFBpZSBjaGFydHNcclxuXHJcbiAgICAgIC8vTnVtYmVyIC0gQW1vdW50IG9mIGFuaW1hdGlvbiBzdGVwc1xyXG4gICAgICBhbmltYXRpb25TdGVwcyA6IDEwMCxcclxuXHJcbiAgICAgIC8vU3RyaW5nIC0gQW5pbWF0aW9uIGVhc2luZyBlZmZlY3RcclxuICAgICAgYW5pbWF0aW9uRWFzaW5nIDogJ2Vhc2VPdXRCb3VuY2UnLFxyXG5cclxuICAgICAgLy9Cb29sZWFuIC0gV2hldGhlciB3ZSBhbmltYXRlIHRoZSByb3RhdGlvbiBvZiB0aGUgRG91Z2hudXRcclxuICAgICAgYW5pbWF0ZVJvdGF0ZSA6IHRydWUsXHJcblxyXG4gICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgc2NhbGluZyB0aGUgRG91Z2hudXQgZnJvbSB0aGUgY2VudHJlXHJcbiAgICAgIGFuaW1hdGVTY2FsZSA6IGZhbHNlLFxyXG5cclxuICAgICAgLy9TdHJpbmcgLSBBIGxlZ2VuZCB0ZW1wbGF0ZVxyXG4gICAgICBsZWdlbmRUZW1wbGF0ZSA6ICc8aDMgY2xhc3M9XCJ0Yy1jaGFydC1qcy1sZWdlbmRcIiBzdHlsZT1cInBhZGRpbmc6NXB4XCI+PCUgZm9yICh2YXIgaT0wOyBpPHNlZ21lbnRzLmxlbmd0aDsgaSsrKXslPjxkaXYgY2xhc3M9XCJsYWJlbFwiIHN0eWxlPVwiZmxvYXQ6bGVmdDttYXJnaW46NXB4O2JhY2tncm91bmQtY29sb3I6PCU9c2VnbWVudHNbaV0uZmlsbENvbG9yJT5cIj48JWlmKHNlZ21lbnRzW2ldLmxhYmVsKXslPjwlPXNlZ21lbnRzW2ldLmxhYmVsJT48JX0lPjwvZGl2PjwlfSU+PC9oMz4nXHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgaSBpbiBDYXRlZ29yaWVzU3ZjLmNob2ljZXMpIHtcclxuICAgICAgQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzID0gMDtcclxuICAgICAgZm9yICh2YXIgaiBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgICAgaWYgKENhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS5uYW1lID09PSAkc2NvcGUucHJpb3JpdHlMaXN0W2pdLmNob2ljZSkge1xyXG4gICAgICAgICAgQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzKys7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBDYXRlZ29yaWVzU3ZjLmNob2ljZXMuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBhLnZvdGVzIDwgYi52b3RlczsgfSk7XHJcbiAgICBmb3IgKGkgaW4gQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzKSB7XHJcbiAgICAgICRzY29wZS5kYXRhLnB1c2goe1xyXG4gICAgICAgIHZhbHVlOiBDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMsXHJcbiAgICAgICAgbGFiZWw6IENhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS5uYW1lXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgJCgnI3ByaW9yaXRpemVSZXN1bHQnKS5oaWRlKCk7XHJcbiAgICAkKCcjcHJpb3JpdGl6ZUNob2ljZXMnKS5oaWRlKCk7XHJcbiAgICAkKCcjcHJpb3JpdHlSZXN1bHRzJykuc2hvdygxMDAwKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUHJvZmlsZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJTdmMpIHtcclxuXHJcbiAgaWYgKCEkc2NvcGUuY3VycmVudFVzZXIpIHtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgICQoJyNzZXgtaW5kaWNhdG9yJykub2Zmc2V0KHsgbGVmdDogKCRzY29wZS5jdXJyZW50VXNlci5nZW5kZXIuc2V4IC8gMjAwICogJCgnI3NleCcpLndpZHRoKCkpICsgJCgnI3NleCcpLm9mZnNldCgpLmxlZnQgfSk7XHJcbiAgICAkKCcjaWRlbnRpdHktaW5kaWNhdG9yJykub2Zmc2V0KHsgbGVmdDogKCRzY29wZS5jdXJyZW50VXNlci5nZW5kZXIuaWRlbnRpdHkgLyAyMDAgKiAkKCcjaWRlbnRpdHknKS53aWR0aCgpKSArICQoJyNpZGVudGl0eScpLm9mZnNldCgpLmxlZnQgfSk7XHJcbiAgfVxyXG5cclxuICAkc2NvcGUuc2V4ZXMgPSBbXHJcbiAgICAnTWFsZScsXHJcbiAgICAnRnRNIE1hbGUnLFxyXG4gICAgJ0ludGVyc2V4JyxcclxuICAgICdNdEYgRmVtYWxlJyxcclxuICAgICdGZW1hbGUnXHJcbiAgXTtcclxuICAkc2NvcGUuaWRlbnRpdGllcyA9IFtcclxuICAgICdNYW4nLFxyXG4gICAgJ0JpZ2VuZGVyJyxcclxuICAgICdQYW5nZW5kZXInLFxyXG4gICAgJ0FnZW5kZXInLFxyXG4gICAgJ1BvbHlnZW5kZXInLFxyXG4gICAgJ0dlbmRlcmZsdWlkJyxcclxuICAgICdHZW5kZXJxdWVlcicsXHJcbiAgICAnUXVlZXInLFxyXG4gICAgJ1dvbWFuJ1xyXG4gIF07XHJcblxyXG4gICRzY29wZS5kYXRlT3B0aW9ucyA9IHtcclxuICAgIG1heERhdGU6IG5ldyBEYXRlKCksXHJcbiAgICBtaW5EYXRlOiBuZXcgRGF0ZSgxOTAwLCAxLCAxKSxcclxuICAgIGluaXREYXRlOiBuZXcgRGF0ZSgyMDAwLCAxLCAxKSxcclxuICAgIGRhdGVwaWNrZXJNb2RlOiAneWVhcidcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2VuZGVyID0gZnVuY3Rpb24oYXJyYXksIHBlcmNlbnRhZ2UpIHtcclxuICAgIHJldHVybiBhcnJheVtNYXRoLnJvdW5kKHBlcmNlbnRhZ2UgLyAyMDAgKiAoYXJyYXkubGVuZ3RoIC0gMSkpXTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc3RhcnRTbGlkZXIgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgfTtcclxuICAkc2NvcGUuZHJhZ1NsaWRlciA9IGZ1bmN0aW9uKGV2ZW50LCB1aSwgdHlwZSkge1xyXG4gICAgJHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlclt0eXBlXSA9IE1hdGgucm91bmQoKCQoJyMnICsgdHlwZSArICctaW5kaWNhdG9yJykub2Zmc2V0KCkubGVmdCAtICQoJyMnICsgdHlwZSkub2Zmc2V0KCkubGVmdCkgLyAoJCgnIycgKyB0eXBlKS53aWR0aCgpIC0gJCgnIycgKyB0eXBlICsgJy1pbmRpY2F0b3InKS53aWR0aCgpKSAqIDIwMCk7XHJcbiAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgfTtcclxuICAkc2NvcGUuc3RvcFNsaWRlciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICB9O1xyXG5cclxuICAkc2NvcGUudXNlcm5hbWVUb2dnbGUgPSB0cnVlO1xyXG4gICRzY29wZS5wYXNzd29yZFRvZ2dsZSA9IHRydWU7XHJcblxyXG4gICRzY29wZS50b2dnbGVVc2VybmFtZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLnVzZXJuYW1lVG9nZ2xlID0gISRzY29wZS51c2VybmFtZVRvZ2dsZTtcclxuICAgICRzY29wZS5uZXdVc2VybmFtZSA9ICRzY29wZS5jdXJyZW50VXNlci51c2VybmFtZTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUudG9nZ2xlUGFzc3dvcmQgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5uZXdQYXNzd29yZCA9IG51bGw7XHJcbiAgICAkc2NvcGUuY29uZmlybVBhc3N3b3JkID0gbnVsbDtcclxuICAgICRzY29wZS5wYXNzd29yZFRvZ2dsZSA9ICEkc2NvcGUucGFzc3dvcmRUb2dnbGU7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmNoZWNrUGFzc3dvcmQgPSBmdW5jdGlvbiAocGFzc3dvcmQpIHtcclxuICAgIGlmIChwYXNzd29yZCkge1xyXG4gICAgICB2YXIgdXNlciA9ICRzY29wZS5jdXJyZW50VXNlci5faWQ7XHJcbiAgICAgIFVzZXJTdmMuY2hlY2tQYXNzd29yZCh1c2VyLCBwYXNzd29yZClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgJHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb3JpZ2luYWxCZyA9ICQoXCIucGFzc3dvcmRcIikuY3NzKFwiYmFja2dyb3VuZENvbG9yXCIpO1xyXG4gICAgICAgICQoXCIucGFzc3dvcmRcIikuYW5pbWF0ZSh7IGJhY2tncm91bmRDb2xvcjogXCIjRkZCNkMxXCIgfSwgMjAwKS5hbmltYXRlKHsgYmFja2dyb3VuZENvbG9yOiBvcmlnaW5hbEJnIH0sIDIwMCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5jaGFuZ2VQYXNzd29yZCA9IGZ1bmN0aW9uIChvbGRQYXNzd29yZCwgbmV3UGFzc3dvcmQsIGNvbmZpcm1QYXNzd29yZCkge1xyXG4gICAgaWYgKG5ld1Bhc3N3b3JkKSB7XHJcbiAgICAgIGlmIChuZXdQYXNzd29yZCA9PSBjb25maXJtUGFzc3dvcmQpIHtcclxuICAgICAgICB2YXIgdXNlciA9ICRzY29wZS5jdXJyZW50VXNlci5faWQ7XHJcbiAgICAgICAgVXNlclN2Yy5jaGFuZ2VQYXNzd29yZCh1c2VyLCBvbGRQYXNzd29yZCwgbmV3UGFzc3dvcmQpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3BvcHVwJywge1xyXG4gICAgICAgICAgICBtZXNzYWdlOiAnUGFzc3dvcmQgQ2hhbmdlZCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdhbGVydC1zdWNjZXNzJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICAkc2NvcGUub2xkUGFzc3dvcmQgPSBudWxsO1xyXG4gICAgICAgICAgJHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCk7XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdwb3B1cCcsIHtcclxuICAgICAgICAgICAgbWVzc2FnZTogJ1Bhc3N3b3JkIENoYW5nZSBGYWlsZWQnLFxyXG4gICAgICAgICAgICB0eXBlOiAnYWxlcnQtZGFuZ2VyJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsQmcgPSAkKFwiLnBhc3N3b3JkXCIpLmNzcyhcImJhY2tncm91bmRDb2xvclwiKTtcclxuICAgICAgICAkKFwiLnBhc3N3b3JkXCIpLmFuaW1hdGUoeyBiYWNrZ3JvdW5kQ29sb3I6IFwiI0ZGQjZDMVwiIH0sIDIwMCkuYW5pbWF0ZSh7IGJhY2tncm91bmRDb2xvcjogb3JpZ2luYWxCZyB9LCAyMDApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmNoYW5nZVVzZXJuYW1lID0gZnVuY3Rpb24gKHVzZXJuYW1lKSB7XHJcbiAgICAkc2NvcGUuJGVtaXQoJ2xvYWRpbmcnKTtcclxuICAgIFVzZXJTdmMuY2hhbmdlVXNlcm5hbWUoJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCwgdXNlcm5hbWUpXHJcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgJHNjb3BlLiRlbWl0KCd1cGRhdGUnLCByZXNwb25zZS5kYXRhKTtcclxuICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICRzY29wZS4kZW1pdCgncG9wdXAnLCB7XHJcbiAgICAgICAgbWVzc2FnZTogdXNlcm5hbWUgKyAnIGFscmVhZHkgaW4gdXNlJyxcclxuICAgICAgICB0eXBlOiAnYWxlcnQtZGFuZ2VyJ1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS51cGRhdGVVc2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCRzY29wZS5jdXJyZW50VXNlcikgeyAgXHJcbiAgICAgICRzY29wZS4kZW1pdCgnbG9hZGluZycpO1xyXG4gICAgICBVc2VyU3ZjLnVwZGF0ZVVzZXIoJHNjb3BlLmN1cnJlbnRVc2VyKVxyXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUuJGVtaXQoJ3VwZGF0ZScsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuXHJcbiAgJHNjb3BlLiR3YXRjaCgnY3VycmVudFVzZXIuZmxhZ3MubGVuZ3RoJywgZnVuY3Rpb24obGVuZ3RoKSB7XHJcbiAgICAkc2NvcGUudXBkYXRlVXNlcigpO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUubG9hZENvdW50cmllcyA9IGZ1bmN0aW9uKCRxdWVyeSkge1xyXG4gICAgdmFyIGNvdW50cmllcyA9IFtcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbmRvcnJhXCIsIFwiZmxhZ1wiOiBcImZsYWctYWRcIiwgXCJ0aWRiaXRcIjogXCJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVuaXRlZCBBcmFiIEVtaXJhdGVzXCIsIFwiZmxhZ1wiOiBcImZsYWctYWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFmZ2hhbmlzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctYWZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFudGlndWEgYW5kIEJhcmJ1ZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQW5ndWlsbGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1haVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQWxiYW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLWFsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBcm1lbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYW1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFuZ29sYVwiLCBcImZsYWdcIjogXCJmbGFnLWFvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbnRhcmN0aWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctYXFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFyZ2VudGluYVwiLCBcImZsYWdcIjogXCJmbGFnLWFyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbWVyaWNhbiBTb21vYVwiLCBcImZsYWdcIjogXCJmbGFnLWFzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBdXN0cmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYXRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkF1c3RyYWxpYVwiLCBcImZsYWdcIjogXCJmbGFnLWF1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBcnViYVwiLCBcImZsYWdcIjogXCJmbGFnLWF3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCLDhWxhbmQgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWF4XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBemVyYmFpamFuXCIsIFwiZmxhZ1wiOiBcImZsYWctYXpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJvc25pYSBhbmQgSGVyemVnb3ZpbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1iYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmFyYmFkb3NcIiwgXCJmbGFnXCI6IFwiZmxhZy1iYlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmFuZ2xhZGVzaFwiLCBcImZsYWdcIjogXCJmbGFnLWJkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZWxnaXVtXCIsIFwiZmxhZ1wiOiBcImZsYWctYmVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJ1cmtpbmEgRmFzb1wiLCBcImZsYWdcIjogXCJmbGFnLWJmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCdWxnYXJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWJnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCYWhyYWluXCIsIFwiZmxhZ1wiOiBcImZsYWctYmhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJ1cnVuZGlcIiwgXCJmbGFnXCI6IFwiZmxhZy1iaVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmVuaW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1ialwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgQmFydGjDqWxlbXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1ibFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmVybXVkYVwiLCBcImZsYWdcIjogXCJmbGFnLWJtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCcnVuZWkgXCIsIFwiZmxhZ1wiOiBcImZsYWctYm5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJvbGl2aWEsIFBsdXJpbmF0aW9uYWwgU3RhdGUgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1ib1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm9uYWlyZSwgU2ludCBFdXN0YXRpdXMgYW5kIFNhYmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1icVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQnJhemlsXCIsIFwiZmxhZ1wiOiBcImZsYWctYnJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJhaGFtYXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1ic1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmh1dGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctYnRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJvdXZldCBJc2xhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1idlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm90c3dhbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1id1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmVsYXJ1c1wiLCBcImZsYWdcIjogXCJmbGFnLWJ5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZWxpemVcIiwgXCJmbGFnXCI6IFwiZmxhZy1ielwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2FuYWRhXCIsIFwiZmxhZ1wiOiBcImZsYWctY2FcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvY29zIChLZWVsaW5nKSBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctY2NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvbmdvLCB0aGUgRGVtb2NyYXRpYyBSZXB1YmxpYyBvZiB0aGVcIiwgXCJmbGFnXCI6IFwiZmxhZy1jZFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctY2ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvbmdvXCIsIFwiZmxhZ1wiOiBcImZsYWctY2dcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN3aXR6ZXJsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctY2hcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkPDtHRlIGQnSXZvaXJlXCIsIFwiZmxhZ1wiOiBcImZsYWctY2lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvb2sgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWNrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaGlsZVwiLCBcImZsYWdcIjogXCJmbGFnLWNsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYW1lcm9vblwiLCBcImZsYWdcIjogXCJmbGFnLWNtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaGluYVwiLCBcImZsYWdcIjogXCJmbGFnLWNuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb2xvbWJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWNvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb3N0YSBSaWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctY3JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkN1YmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1jdVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2FibyBWZXJkZVwiLCBcImZsYWdcIjogXCJmbGFnLWN2XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDdXJhw6dhb1wiLCBcImZsYWdcIjogXCJmbGFnLWN3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaHJpc3RtYXMgSXNsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctY3hcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkN5cHJ1c1wiLCBcImZsYWdcIjogXCJmbGFnLWN5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDemVjaCBSZXB1YmxpY1wiLCBcImZsYWdcIjogXCJmbGFnLWN6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHZXJtYW55XCIsIFwiZmxhZ1wiOiBcImZsYWctZGVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkRqaWJvdXRpXCIsIFwiZmxhZ1wiOiBcImZsYWctZGpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkRlbm1hcmtcIiwgXCJmbGFnXCI6IFwiZmxhZy1ka1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRG9taW5pY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1kbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRG9taW5pY2FuIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctZG9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFsZ2VyaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1kelwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRWN1YWRvclwiLCBcImZsYWdcIjogXCJmbGFnLWVjXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFc3RvbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctZWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVneXB0XCIsIFwiZmxhZ1wiOiBcImZsYWctZWdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIldlc3Rlcm4gU2FoYXJhXCIsIFwiZmxhZ1wiOiBcImZsYWctZWhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVyaXRyZWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1lclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3BhaW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1lc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRXRoaW9waWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1ldFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRmlubGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWZpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGaWppXCIsIFwiZmxhZ1wiOiBcImZsYWctZmpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZhbGtsYW5kIElzbGFuZHMgKE1hbHZpbmFzKVwiLCBcImZsYWdcIjogXCJmbGFnLWZrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNaWNyb25lc2lhLCBGZWRlcmF0ZWQgU3RhdGVzIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctZm1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZhcm9lIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1mb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRnJhbmNlXCIsIFwiZmxhZ1wiOiBcImZsYWctZnJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdhYm9uXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2FcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVuaXRlZCBLaW5nZG9tIG9mIEdyZWF0IEJyaXRhaW4gYW5kIE5vcnRoZXJuIElyZWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1nYlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3JlbmFkYVwiLCBcImZsYWdcIjogXCJmbGFnLWdkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHZW9yZ2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZyZW5jaCBHdWlhbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1nZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3Vlcm5zZXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1nZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR2hhbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1naFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR2licmFsdGFyXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdyZWVubGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWdsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHYW1iaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1nbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3VpbmVhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ25cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1YWRlbG91cGVcIiwgXCJmbGFnXCI6IFwiZmxhZy1ncFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRXF1YXRvcmlhbCBHdWluZWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1ncVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3JlZWNlXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNvdXRoIEdlb3JnaWEgYW5kIHRoZSBTb3V0aCBTYW5kd2ljaCBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1YXRlbWFsYVwiLCBcImZsYWdcIjogXCJmbGFnLWd0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdWFtXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1aW5lYS1CaXNzYXVcIiwgXCJmbGFnXCI6IFwiZmxhZy1nd1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3V5YW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkhvbmcgS29uZ1wiLCBcImZsYWdcIjogXCJmbGFnLWhrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIZWFyZCBJc2xhbmQgYW5kIE1jRG9uYWxkIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1obVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSG9uZHVyYXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1oblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ3JvYXRpYVwiLCBcImZsYWdcIjogXCJmbGFnLWhyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIYWl0aVwiLCBcImZsYWdcIjogXCJmbGFnLWh0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIdW5nYXJ5XCIsIFwiZmxhZ1wiOiBcImZsYWctaHVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkluZG9uZXNpYVwiLCBcImZsYWdcIjogXCJmbGFnLWlkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJcmVsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctaWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIklzcmFlbFwiLCBcImZsYWdcIjogXCJmbGFnLWlsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJc2xlIG9mIE1hblwiLCBcImZsYWdcIjogXCJmbGFnLWltXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJbmRpYVwiLCBcImZsYWdcIjogXCJmbGFnLWluXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCcml0aXNoIEluZGlhbiBPY2VhbiBUZXJyaXRvcnlcIiwgXCJmbGFnXCI6IFwiZmxhZy1pb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSXJhcVwiLCBcImZsYWdcIjogXCJmbGFnLWlxXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJcmFuLCBJc2xhbWljIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctaXJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkljZWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1pc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSXRhbHlcIiwgXCJmbGFnXCI6IFwiZmxhZy1pdFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSmVyc2V5XCIsIFwiZmxhZ1wiOiBcImZsYWctamVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkphbWFpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1qbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSm9yZGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctam9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkphcGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctanBcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIktlbnlhXCIsIFwiZmxhZ1wiOiBcImZsYWcta2VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkt5cmd5enN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1rZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2FtYm9kaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1raFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS2lyaWJhdGlcIiwgXCJmbGFnXCI6IFwiZmxhZy1raVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29tb3Jvc1wiLCBcImZsYWdcIjogXCJmbGFnLWttXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBLaXR0cyBhbmQgTmV2aXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1rblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS29yZWEsIERlbW9jcmF0aWMgUGVvcGxlJ3MgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1rcFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS29yZWEsIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWcta3JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkt1d2FpdFwiLCBcImZsYWdcIjogXCJmbGFnLWt3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYXltYW4gSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWt5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLYXpha2hzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWcta3pcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxhbyBQZW9wbGUncyBEZW1vY3JhdGljIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctbGFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxlYmFub25cIiwgXCJmbGFnXCI6IFwiZmxhZy1sYlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgTHVjaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1sY1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGllY2h0ZW5zdGVpblwiLCBcImZsYWdcIjogXCJmbGFnLWxpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTcmkgTGFua2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1sa1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGliZXJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWxyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMZXNvdGhvXCIsIFwiZmxhZ1wiOiBcImZsYWctbHNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxpdGh1YW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLWx0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMdXhlbWJvdXJnXCIsIFwiZmxhZ1wiOiBcImZsYWctbHVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxhdHZpYVwiLCBcImZsYWdcIjogXCJmbGFnLWx2XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMaWJ5YVwiLCBcImZsYWdcIjogXCJmbGFnLWx5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb3JvY2NvXCIsIFwiZmxhZ1wiOiBcImZsYWctbWFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vbmFjb1wiLCBcImZsYWdcIjogXCJmbGFnLW1jXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb2xkb3ZhLCBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLW1kXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb250ZW5lZ3JvXCIsIFwiZmxhZ1wiOiBcImZsYWctbWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IE1hcnRpbiAoRnJlbmNoIHBhcnQpXCIsIFwiZmxhZ1wiOiBcImZsYWctbWZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hZGFnYXNjYXJcIiwgXCJmbGFnXCI6IFwiZmxhZy1tZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFyc2hhbGwgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLW1oXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWNlZG9uaWEsIHRoZSBmb3JtZXIgWXVnb3NsYXYgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1ta1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFsaVwiLCBcImZsYWdcIjogXCJmbGFnLW1sXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNeWFubWFyXCIsIFwiZmxhZ1wiOiBcImZsYWctbW1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vbmdvbGlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbW5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hY2FvXCIsIFwiZmxhZ1wiOiBcImZsYWctbW9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5vcnRoZXJuIE1hcmlhbmEgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLW1wXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYXJ0aW5pcXVlXCIsIFwiZmxhZ1wiOiBcImZsYWctbXFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hdXJpdGFuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1tclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTW9udHNlcnJhdFwiLCBcImZsYWdcIjogXCJmbGFnLW1zXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWx0YVwiLCBcImZsYWdcIjogXCJmbGFnLW10XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYXVyaXRpdXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1tdVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFsZGl2ZXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1tdlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFsYXdpXCIsIFwiZmxhZ1wiOiBcImZsYWctbXdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1leGljb1wiLCBcImZsYWdcIjogXCJmbGFnLW14XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWxheXNpYVwiLCBcImZsYWdcIjogXCJmbGFnLW15XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb3phbWJpcXVlXCIsIFwiZmxhZ1wiOiBcImZsYWctbXpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5hbWliaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1uYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmV3IENhbGVkb25pYVwiLCBcImZsYWdcIjogXCJmbGFnLW5jXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOaWdlclwiLCBcImZsYWdcIjogXCJmbGFnLW5lXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOb3Jmb2xrIElzbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLW5mXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOaWdlcmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbmdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5pY2FyYWd1YVwiLCBcImZsYWdcIjogXCJmbGFnLW5pXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOZXRoZXJsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLW5sXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOb3J3YXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1ub1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmVwYWxcIiwgXCJmbGFnXCI6IFwiZmxhZy1ucFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmF1cnVcIiwgXCJmbGFnXCI6IFwiZmxhZy1uclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTml1ZVwiLCBcImZsYWdcIjogXCJmbGFnLW51XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOZXcgWmVhbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLW56XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJPbWFuXCIsIFwiZmxhZ1wiOiBcImZsYWctb21cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhbmFtYVwiLCBcImZsYWdcIjogXCJmbGFnLXBhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQZXJ1XCIsIFwiZmxhZ1wiOiBcImZsYWctcGVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZyZW5jaCBQb2x5bmVzaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1wZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGFwdWEgTmV3IEd1aW5lYVwiLCBcImZsYWdcIjogXCJmbGFnLXBnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQaGlsaXBwaW5lc1wiLCBcImZsYWdcIjogXCJmbGFnLXBoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQYWtpc3RhblwiLCBcImZsYWdcIjogXCJmbGFnLXBrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQb2xhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1wbFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvblwiLCBcImZsYWdcIjogXCJmbGFnLXBtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQaXRjYWlyblwiLCBcImZsYWdcIjogXCJmbGFnLXBuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQdWVydG8gUmljb1wiLCBcImZsYWdcIjogXCJmbGFnLXByXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQYWxlc3RpbmUsIFN0YXRlIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctcHNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBvcnR1Z2FsXCIsIFwiZmxhZ1wiOiBcImZsYWctcHRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhbGF1XCIsIFwiZmxhZ1wiOiBcImZsYWctcHdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhcmFndWF5XCIsIFwiZmxhZ1wiOiBcImZsYWctcHlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlFhdGFyXCIsIFwiZmxhZ1wiOiBcImZsYWctcWFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlLDqXVuaW9uXCIsIFwiZmxhZ1wiOiBcImZsYWctcmVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlJvbWFuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1yb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2VyYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctcnNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlJ1c3NpYW4gRmVkZXJhdGlvblwiLCBcImZsYWdcIjogXCJmbGFnLXJ1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJSd2FuZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1yd1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2F1ZGkgQXJhYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctc2FcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNvbG9tb24gSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLXNiXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTZXljaGVsbGVzXCIsIFwiZmxhZ1wiOiBcImZsYWctc2NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN1ZGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctc2RcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN3ZWRlblwiLCBcImZsYWdcIjogXCJmbGFnLXNlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTaW5nYXBvcmVcIiwgXCJmbGFnXCI6IFwiZmxhZy1zZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgSGVsZW5hLCBBc2NlbnNpb24gYW5kIFRyaXN0YW4gZGEgQ3VuaGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1zaFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2xvdmVuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1zaVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3ZhbGJhcmQgYW5kIEphbiBNYXllblwiLCBcImZsYWdcIjogXCJmbGFnLXNqXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTbG92YWtpYVwiLCBcImZsYWdcIjogXCJmbGFnLXNrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTaWVycmEgTGVvbmVcIiwgXCJmbGFnXCI6IFwiZmxhZy1zbFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FuIE1hcmlub1wiLCBcImZsYWdcIjogXCJmbGFnLXNtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTZW5lZ2FsXCIsIFwiZmxhZ1wiOiBcImZsYWctc25cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNvbWFsaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1zb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3VyaW5hbWVcIiwgXCJmbGFnXCI6IFwiZmxhZy1zclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU291dGggU3VkYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1zc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FvIFRvbWUgYW5kIFByaW5jaXBlXCIsIFwiZmxhZ1wiOiBcImZsYWctc3RcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVsIFNhbHZhZG9yXCIsIFwiZmxhZ1wiOiBcImZsYWctc3ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNpbnQgTWFhcnRlbiAoRHV0Y2ggcGFydClcIiwgXCJmbGFnXCI6IFwiZmxhZy1zeFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3lyaWFuIEFyYWIgUmVwdWJsaWNcIiwgXCJmbGFnXCI6IFwiZmxhZy1zeVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3dhemlsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctc3pcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlR1cmtzIGFuZCBDYWljb3MgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLXRjXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaGFkXCIsIFwiZmxhZ1wiOiBcImZsYWctdGRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZyZW5jaCBTb3V0aGVybiBUZXJyaXRvcmllc1wiLCBcImZsYWdcIjogXCJmbGFnLXRmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUb2dvXCIsIFwiZmxhZ1wiOiBcImZsYWctdGdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRoYWlsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctdGhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRhamlraXN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy10alwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVG9rZWxhdVwiLCBcImZsYWdcIjogXCJmbGFnLXRrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUaW1vci1MZXN0ZVwiLCBcImZsYWdcIjogXCJmbGFnLXRsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdXJrbWVuaXN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy10bVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVHVuaXNpYVwiLCBcImZsYWdcIjogXCJmbGFnLXRuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUb25nYVwiLCBcImZsYWdcIjogXCJmbGFnLXRvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdXJrZXlcIiwgXCJmbGFnXCI6IFwiZmxhZy10clwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVHJpbmlkYWQgYW5kIFRvYmFnb1wiLCBcImZsYWdcIjogXCJmbGFnLXR0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdXZhbHVcIiwgXCJmbGFnXCI6IFwiZmxhZy10dlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVGFpd2FuLCBQcm92aW5jZSBvZiBDaGluYVwiLCBcImZsYWdcIjogXCJmbGFnLXR3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUYW56YW5pYSwgVW5pdGVkIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctdHpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVrcmFpbmVcIiwgXCJmbGFnXCI6IFwiZmxhZy11YVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVWdhbmRhXCIsIFwiZmxhZ1wiOiBcImZsYWctdWdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVuaXRlZCBTdGF0ZXMgTWlub3IgT3V0bHlpbmcgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLXVtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy11c1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVXJ1Z3VheVwiLCBcImZsYWdcIjogXCJmbGFnLXV5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVemJla2lzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctdXpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkhvbHkgU2VlXCIsIFwiZmxhZ1wiOiBcImZsYWctdmFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IFZpbmNlbnQgYW5kIHRoZSBHcmVuYWRpbmVzXCIsIFwiZmxhZ1wiOiBcImZsYWctdmNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlZlbmV6dWVsYSwgQm9saXZhcmlhbiBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLXZlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWaXJnaW4gSXNsYW5kcywgQnJpdGlzaFwiLCBcImZsYWdcIjogXCJmbGFnLXZnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWaXJnaW4gSXNsYW5kcywgVS5TLlwiLCBcImZsYWdcIjogXCJmbGFnLXZpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWaWV0IE5hbVwiLCBcImZsYWdcIjogXCJmbGFnLXZuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWYW51YXR1XCIsIFwiZmxhZ1wiOiBcImZsYWctdnVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIldhbGxpcyBhbmQgRnV0dW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctd2ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhbW9hXCIsIFwiZmxhZ1wiOiBcImZsYWctd3NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlllbWVuXCIsIFwiZmxhZ1wiOiBcImZsYWcteWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1heW90dGVcIiwgXCJmbGFnXCI6IFwiZmxhZy15dFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU291dGggQWZyaWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctemFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlphbWJpYVwiLCBcImZsYWdcIjogXCJmbGFnLXptXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJaaW1iYWJ3ZVwiLCBcImZsYWdcIjogXCJmbGFnLXp3XCIgfSxcclxuICAgIF07XHJcbiAgICByZXR1cm4gY291bnRyaWVzLmZpbHRlcihmdW5jdGlvbihjb3VudHJ5KSB7XHJcbiAgICAgIHJldHVybiBjb3VudHJ5Lm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCRxdWVyeS50b0xvd2VyQ2FzZSgpKSAhPSAtMTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignU2tpbGxzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICR3aW5kb3cpIHtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdGVkU2tpbGwgPSAwO1xyXG4gICRzY29wZS5za2lsbHNWaXNpYmxlID0gZmFsc2U7XHJcblxyXG4gICRzY29wZS5sYWJlbHMgPSBbXCJEb3dubG9hZCBTYWxlc1wiLCBcIkluLVN0b3JlIFNhbGVzXCIsIFwiTWFpbC1PcmRlciBTYWxlc1wiXTtcclxuICAkc2NvcGUuZGF0YSA9IFszMDAsIDUwMCwgMTAwXTtcclxuXHJcbiAgJC5nZXRKU09OKCcvc2tpbGxzLmpzb24nLCBmdW5jdGlvbiggZGF0YSApIHtcclxuICAgICRzY29wZS5za2lsbHMgPSBkYXRhLmZpbHRlcihmdW5jdGlvbihza2lsbCkge1xyXG4gICAgICByZXR1cm4gc2tpbGwuZW5hYmxlZDtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5zZXRTZWxlY3RlZFNraWxsID0gZnVuY3Rpb24gKHNraWxsKSB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZFNraWxsID0gc2tpbGw7XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZFNraWxsLmNoYXJ0T3B0aW9ucyA9IHtcclxuICAgICAgICBjdXRvdXRQZXJjZW50YWdlIDogODAsXHJcbiAgICAgICAgY2lyY3VtZmVyZW5jZTogMiAqIE1hdGguUEksXHJcbiAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogdHJ1ZSxcclxuICAgICAgICB0b29sdGlwczoge1xyXG4gICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZFNraWxsLmNoYXJ0U3R5bGUgPSB7XHJcbiAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKC9za2lsbHMvJyArICRzY29wZS5zZWxlY3RlZFNraWxsLmltYWdlICsgJyknLFxyXG4gICAgICAgICdiYWNrZ3JvdW5kLXJlcGVhdCc6ICduby1yZXBlYXQnLFxyXG4gICAgICAgICdiYWNrZ3JvdW5kLXNpemUnOiAnNjAlJyxcclxuICAgICAgICAnYmFja2dyb3VuZC1wb3NpdGlvbic6ICc1MCUgNTAlJ1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuc2V0U2VsZWN0ZWRTa2lsbCgkc2NvcGUuc2tpbGxzWzBdKTtcclxuXHJcbiAgICAvKlxyXG4gICAgaGFsZiBjaXJjbGUgc2tpbGwgd2hlZWwgdGhhdCBkaWRuJ3QgdHVybiBvdXQgZ3JlYXRcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRpc3BsYXk6ICRzY29wZS5za2lsbHNWaXNpYmxlID8gJ2Jsb2NrJyA6ICdub25lJyxcclxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgIGxlZnQ6ICRzY29wZS53aGVlbFdpZHRoIC8gMiAqIE1hdGguY29zKGkgKiAoTWF0aC5QSSAvICgkc2NvcGUuc2tpbGxzLmxlbmd0aCAtIDEpKSkgKyAkc2NvcGUud2hlZWxXaWR0aCAvIDIgLSAkc2NvcGUud2hlZWxXaWR0aCAqIDAuMDI1LFxyXG4gICAgICB0b3A6IE1hdGguc2luKGkgKiAoTWF0aC5QSSAvICgkc2NvcGUuc2tpbGxzLmxlbmd0aCAtIDEpKSkgKiAkKCcuc2VsZWN0ZWQtc2tpbGwnKS5oZWlnaHQoKSAqIDIuNSxcclxuICAgICAgd2lkdGg6ICRzY29wZS53aGVlbFdpZHRoICogMC4wNSxcclxuICAgICAgaGVpZ2h0OiAkc2NvcGUud2hlZWxXaWR0aCAqIDAuMDVcclxuICAgIH07XHJcbiAgICAqL1xyXG5cclxuICAgICRzY29wZS4kYXBwbHkoKTtcclxuICB9KTtcclxuXHJcbn0pO1xyXG4iLCIvKmpzbGludCBlc3ZlcnNpb246IDYqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAvL0FuZ3VsYXJKcyBjYW4ndCBoYXZlIGFuIGFycm93IGZ1bmN0aW9uIGhlcmVcclxuICAuY29udHJvbGxlcignVGVuVGhpbmdzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgQm90U3ZjKSB7XHJcbiAgICAkc2NvcGUuc2VhcmNoID0ge1xyXG4gICAgICBuYW1lOiAnJyxcclxuICAgICAgdmFsdWVzOiAnJ1xyXG4gICAgfTtcclxuICAgIEJvdFN2Yy5nZXRDYXRlZ29yaWVzKClcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzID0gJHNjb3BlLmNhdGVnb3JpZXMubWFwKGNhdGVnb3J5ID0+IGNhdGVnb3J5KTtcclxuICAgICAgICAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzLnB1c2goJ0FsbCcpO1xyXG4gICAgICAgICRzY29wZS5jYXRlZ29yeUZpbHRlcnMucHVzaCgnQmxhbmsnKTtcclxuICAgICAgICAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIgPSAnQWxsJztcclxuICAgICAgICAkc2NvcGUudXBkYXRlRmlsdGVyID0gJ2FsbCc7XHJcbiAgICAgIH0pO1xyXG4gICAgQm90U3ZjLmdldExhbmd1YWdlcygpXHJcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAkc2NvcGUubGFuZ3VhZ2VzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLmtleURvd24gPSBlID0+IHtcclxuICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xyXG4gICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgIGlmICgkKFwiI25ldy1ibHVyYlwiKS5pcyhcIjpmb2N1c1wiKSkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAkc2NvcGUuYWRkVmFsdWUoKTtcclxuICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTM6XHJcbiAgICAgICAgICBpZiAoJChcIiNuZXctYmx1cmJcIikuaXMoXCI6Zm9jdXNcIikpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmFkZFZhbHVlKCk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKCQoXCIjbmV3LXZhbHVlXCIpLmlzKFwiOmZvY3VzXCIpKSB7XHJcbiAgICAgICAgICAgICQoJyNuZXctYmx1cmInKS5mb2N1cygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuXHJcbiAgICAgIH1cclxuICAgICAgLy8gdXNlIGUua2V5Q29kZVxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgJHNjb3BlLnNlYXJjaE5hbWUgPSAnJztcclxuICAgICRzY29wZS5uZXdJdGVtID0ge307XHJcblxyXG4gICAgJHNjb3BlLnNldENhdGVnb3J5RmlsdGVyID0gY2F0ZWdvcnkgPT4gJHNjb3BlLmNhdGVnb3J5RmlsdGVyID0gY2F0ZWdvcnk7XHJcbiAgICAkc2NvcGUuc2V0VXNlckZpbHRlciA9IHVzZXIgPT4gJHNjb3BlLnVzZXJGaWx0ZXIgPSB1c2VyO1xyXG4gICAgJHNjb3BlLnNldFVwZGF0ZUZpbHRlciA9IHR5cGUgPT4gJHNjb3BlLnVwZGF0ZUZpbHRlciA9IHR5cGU7XHJcblxyXG4gICAgJHNjb3BlLmZpbHRlcmVkTGlzdHMgPSAoKSA9PiB7XHJcbiAgICAgIGlmICghJHNjb3BlLmxpc3RzKSByZXR1cm4gW107XHJcbiAgICAgIHJldHVybiAkc2NvcGUubGlzdHMuZmlsdGVyKCh7XHJcbiAgICAgICAgY2F0ZWdvcmllcyxcclxuICAgICAgICBpc0R5bmFtaWMsXHJcbiAgICAgICAgY3JlYXRvclxyXG4gICAgICB9KSA9PiB7XHJcbiAgICAgICAgaWYgKCRzY29wZS51cGRhdGVGaWx0ZXIgIT09ICdhbGwnKSB7XHJcbiAgICAgICAgICBpZiAoKCRzY29wZS51cGRhdGVGaWx0ZXIgPT09ICdzdGF0aWMnICYmIGlzRHluYW1pYyA9PT0gdHJ1ZSkgfHwgKCRzY29wZS51cGRhdGVGaWx0ZXIgPT09ICdkeW5hbWljJyAmJiBpc0R5bmFtaWMgPT09IGZhbHNlKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJHNjb3BlLmNhdGVnb3J5RmlsdGVyID09PSAnQWxsJyAmJiAkc2NvcGUudXNlckZpbHRlciA9PT0gJ0FsbCcpIHtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNhdGVnb3J5RmlsdGVyICE9PSAnQWxsJyAmJiAkc2NvcGUudXNlckZpbHRlciA9PT0gJ0FsbCcpIHtcclxuICAgICAgICAgIGlmIChjYXRlZ29yaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhdGVnb3JpZXMuaW5kZXhPZigkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIpID49IDA7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLmNhdGVnb3J5RmlsdGVyID09PSAnQmxhbmsnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNhdGVnb3J5RmlsdGVyID09PSAnQWxsJyAmJiAkc2NvcGUudXNlckZpbHRlciAhPT0gJ0FsbCcpIHtcclxuICAgICAgICAgIHJldHVybiBjcmVhdG9yID09PSAkc2NvcGUudXNlckZpbHRlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKGNhdGVnb3JpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2F0ZWdvcmllcy5pbmRleE9mKCRzY29wZS5jYXRlZ29yeUZpbHRlcikgPj0gMCAmJiBjcmVhdG9yID09PSAkc2NvcGUudXNlckZpbHRlcjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIgPT09ICdCbGFuaycgJiYgY3JlYXRvciA9PT0gJHNjb3BlLnVzZXJGaWx0ZXI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLiRvbignbG9naW4nLCBfID0+IHtcclxuICAgICAgJHNjb3BlLmdldExpc3RzKCk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgJHNjb3BlLnNvcnQgPSAoc29ydFZhbHVlLCBzb3J0TGFiZWwpID0+IHtcclxuICAgICAgJHNjb3BlLnNvcnRMYWJlbCA9IHNvcnRMYWJlbDtcclxuICAgICAgaWYgKCRzY29wZS5zb3J0VmFsdWUgPT09IHNvcnRWYWx1ZSkge1xyXG4gICAgICAgICRzY29wZS5zb3J0RGlyZWN0aW9uID0gISRzY29wZS5zb3J0RGlyZWN0aW9uO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICRzY29wZS5zb3J0VmFsdWUgPSBzb3J0VmFsdWU7XHJcbiAgICAgICAgJHNjb3BlLnNvcnREaXJlY3Rpb24gPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgICRzY29wZS5zb3J0ZXIgPSAoJHNjb3BlLnNvcnREaXJlY3Rpb24gPyAnKycgOiAnLScpICsgJHNjb3BlLnNvcnRWYWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnNvcnRMaXN0ID0gJ3ZhbHVlJztcclxuICAgICRzY29wZS5zb3J0VmFsdWUgPSAnZGF0ZSc7XHJcbiAgICAkc2NvcGUuc29ydERpcmVjdGlvbiA9IHRydWU7XHJcbiAgICAkc2NvcGUuc29ydCgnZGF0ZScsICdDcmVhdGlvbiBEYXRlJyk7XHJcblxyXG4gICAgJHNjb3BlLmdldENhdGVnb3J5Q291bnQgPSBjYXRlZ29yeSA9PiB7XHJcbiAgICAgIGlmICghJHNjb3BlLmxpc3RzKSByZXR1cm4gMDtcclxuICAgICAgcmV0dXJuICRzY29wZS5saXN0cy5maWx0ZXIobGlzdCA9PiAoY2F0ZWdvcnkgPT09ICdBbGwnIHx8IGxpc3QuY2F0ZWdvcmllcy5pbmRleE9mKGNhdGVnb3J5KSA+PSAwKSAmJiAoJHNjb3BlLnVzZXJGaWx0ZXIgPT09ICdBbGwnIHx8IGxpc3QuY3JlYXRvciA9PT0gJHNjb3BlLnVzZXJGaWx0ZXIpICYmICgkc2NvcGUudXBkYXRlRmlsdGVyID09PSAnYWxsJyB8fCBsaXN0LmlzRHluYW1pYyA9PT0gKCRzY29wZS51cGRhdGVGaWx0ZXIgPT09ICdkeW5hbWljJykpKS5sZW5ndGg7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRVcGRhdGVDb3VudCA9IHR5cGUgPT4ge1xyXG4gICAgICBpZiAoISRzY29wZS5saXN0cykgcmV0dXJuIDA7XHJcbiAgICAgIHJldHVybiAkc2NvcGUubGlzdHMuZmlsdGVyKGxpc3QgPT4gdHlwZSA9PT0gJ2FsbCcgfHwgKGxpc3QuaXNEeW5hbWljICYmIHR5cGUgPT09ICdkeW5hbWljJykgfHwgKCFsaXN0LmlzRHluYW1pYyAmJiB0eXBlID09PSAnc3RhdGljJykpLmxlbmd0aDtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLmdldExpc3RzID0gKCkgPT4ge1xyXG4gICAgICBpZiAoISRzY29wZS5sb2FkaW5nKSB7XHJcbiAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgIEJvdFN2Yy5nZXRMaXN0cygkc2NvcGUuY3VycmVudFVzZXIpXHJcbiAgICAgICAgICAudGhlbigoe1xyXG4gICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICB9KSA9PiB7XHJcbiAgICAgICAgICAgICRzY29wZS5saXN0cyA9IGRhdGE7XHJcbiAgICAgICAgICAgICRzY29wZS51c2VyRmlsdGVycyA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUudXNlckZpbHRlcnMuQWxsID0gJHNjb3BlLmxpc3RzLmxlbmd0aDtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJGaWx0ZXJzID0gJHNjb3BlLmxpc3RzLnNvcnQoKGxpc3QxLCBsaXN0MikgPT4gbGlzdDEuY3JlYXRvciA+IGxpc3QyLmNyZWF0b3IpLnJlZHVjZSgodXNlcnMsIHtcclxuICAgICAgICAgICAgICBjcmVhdG9yXHJcbiAgICAgICAgICAgIH0pID0+IHtcclxuICAgICAgICAgICAgICBpZiAoIXVzZXJzW2NyZWF0b3JdKSB1c2Vyc1tjcmVhdG9yXSA9IDA7XHJcbiAgICAgICAgICAgICAgdXNlcnNbY3JlYXRvcl0rKztcclxuICAgICAgICAgICAgICByZXR1cm4gdXNlcnM7XHJcbiAgICAgICAgICAgIH0sICRzY29wZS51c2VyRmlsdGVycyk7XHJcbiAgICAgICAgICAgICRzY29wZS51c2VyQ291bnQgPSBPYmplY3Qua2V5cygkc2NvcGUudXNlckZpbHRlcnMpLmxlbmd0aDtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJGaWx0ZXJzID0gc29ydE9iamVjdCgkc2NvcGUudXNlckZpbHRlcnMsIGZhbHNlKTtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJGaWx0ZXIgPSAnQWxsJztcclxuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zZWxlY3RMaXN0ID0gbGlzdCA9PiB7XHJcbiAgICAgIEJvdFN2Yy5nZXRMaXN0KGxpc3QpXHJcbiAgICAgICAgLnRoZW4oKHtcclxuICAgICAgICAgIGRhdGFcclxuICAgICAgICB9KSA9PiB7XHJcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0ID0gZGF0YTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnNlbGVjdENhdGVnb3J5ID0gY2F0ZWdvcnkgPT4ge1xyXG4gICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3J5ID0gY2F0ZWdvcnk7XHJcbiAgICAgICQoJyNjYXRlZ29yeS1zZWxlY3QnKS5oaWRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRDYXRlZ29yeUNsYXNzID0gY2F0ZWdvcnkgPT4ge1xyXG4gICAgICByZXR1cm4gJHNjb3BlLnNlbGVjdGVkTGlzdCAmJiAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSkgPj0gMCA/ICdidG4tc3VjY2VzcycgOiAnYnRuLWRlZmF1bHQnO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUudG9nZ2xlQ2F0ZWdvcnkgPSBjYXRlZ29yeSA9PiB7XHJcbiAgICAgIGNvbnN0IGNhdGVnb3J5SW5kZXggPSAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSk7XHJcbiAgICAgIGlmIChjYXRlZ29yeUluZGV4ID49IDApIHtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuc3BsaWNlKGNhdGVnb3J5SW5kZXgsIDEpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5wdXNoKGNhdGVnb3J5KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuc2VsZWN0TGFuZ3VhZ2UgPSBsYW5ndWFnZSA9PiB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZExpc3QubGFuZ3VhZ2UgPSBsYW5ndWFnZS5jb2RlO1xyXG4gICAgICBjb25zdCBub25FbmdsaXNoSW5kZXggPSAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuaW5kZXhPZignTm9uLUVuZ2xpc2gnKTtcclxuICAgICAgaWYgKGxhbmd1YWdlLmNvZGUgIT09ICdFTicgJiYgbm9uRW5nbGlzaEluZGV4IDwgMCkge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5wdXNoKCdOb24tRW5nbGlzaCcpO1xyXG4gICAgICB9IGVsc2UgaWYgKGxhbmd1YWdlLmNvZGUgPT09ICdFTicgJiYgbm9uRW5nbGlzaEluZGV4ID49IDApIHtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuc3BsaWNlKG5vbkVuZ2xpc2hJbmRleCwgMSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLmFkZExpc3QgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRMYW5ndWFnZSA9ICRzY29wZS5zZWxlY3RlZExpc3QgPyAkc2NvcGUuc2VsZWN0ZWRMaXN0Lmxhbmd1YWdlIDogJ0VOJztcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdCA9IHtcclxuICAgICAgICBuYW1lOiAnJyxcclxuICAgICAgICBjcmVhdG9yOiAkc2NvcGUuY3VycmVudFVzZXIuX2lkLFxyXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgdmFsdWVzOiBbXSxcclxuICAgICAgICBhbnN3ZXJzOiAwLFxyXG4gICAgICAgIGlzRHluYW1pYzogdHJ1ZSxcclxuICAgICAgICBjYXRlZ29yeTogJycsXHJcbiAgICAgICAgY2F0ZWdvcmllczogW10sXHJcbiAgICAgICAgbGFuZ3VhZ2U6IGN1cnJlbnRMYW5ndWFnZVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuYWRkVmFsdWUgPSAoKSA9PiB7XHJcbiAgICAgIGlmICgkc2NvcGUubmV3SXRlbS52YWx1ZSkge1xyXG4gICAgICAgIGlmIChfLnNvbWUoJHNjb3BlLnNlbGVjdGVkTGlzdC52YWx1ZXMsIHZhbHVlID0+IHZhbHVlID09ICRzY29wZS5uZXdJdGVtLnZhbHVlKSkge1xyXG4gICAgICAgICAgYWxlcnQoYCR7JHNjb3BlLm5ld0l0ZW0udmFsdWV9IGlzIGFscmVhZHkgaW4gdGhlIGxpc3RgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJHNjb3BlLm5ld0l0ZW0uY3JlYXRvciA9ICRzY29wZS5jdXJyZW50VXNlci5faWQ7XHJcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcy51bnNoaWZ0KEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoJHNjb3BlLm5ld0l0ZW0pKSk7XHJcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LmFuc3dlcnMrKztcclxuICAgICAgICAgICRzY29wZS5uZXdJdGVtLnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAkc2NvcGUubmV3SXRlbS5ibHVyYiA9ICcnO1xyXG4gICAgICAgICAgaWYgKCRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLmxlbmd0aCA+PSAxMCAmJiAkc2NvcGUuc2VsZWN0ZWRMaXN0Lm5hbWUgJiYgJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAkKCcjbmV3LXZhbHVlJykuZm9jdXMoKTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnJlcG9ydExpc3QgPSBsaXN0ID0+IHtcclxuICAgICAgbGlzdC5yZXBvcnRlZCA9IHRydWU7XHJcbiAgICAgIEJvdFN2Yy5yZXBvcnRMaXN0KCRzY29wZS5jdXJyZW50VXNlciwgbGlzdCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zYXZlTGlzdCA9IGxpc3QgPT4ge1xyXG4gICAgICBpZiAoISRzY29wZS5zYXZpbmcpIHtcclxuICAgICAgICBsaXN0LnZhbHVlcyA9IGxpc3QudmFsdWVzLmZpbHRlcigoe1xyXG4gICAgICAgICAgdmFsdWVcclxuICAgICAgICB9KSA9PiB2YWx1ZSk7XHJcbiAgICAgICAgaWYgKGxpc3QudmFsdWVzLmxlbmd0aCA+PSAxMCAmJiBsaXN0Lm5hbWUgJiYgbGlzdC5jYXRlZ29yaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICRzY29wZS5zYXZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgQm90U3ZjLnNhdmVMaXN0KCRzY29wZS5jdXJyZW50VXNlciwgbGlzdClcclxuICAgICAgICAgICAgLnRoZW4oKHtcclxuICAgICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgIH0pID0+IHtcclxuICAgICAgICAgICAgICBpZiAoISRzY29wZS5zZWxlY3RlZExpc3QuX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdHMudW5zaGlmdChkYXRhKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RMaXN0KGRhdGEpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8ICRzY29wZS5saXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxpc3RzW2ldLl9pZCA9PT0gZGF0YS5faWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdHNbaV0gPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0TGlzdChsaXN0KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgJHNjb3BlLnNhdmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAkc2NvcGUuc2F2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobGlzdC52YWx1ZXMubGVuZ3RoIDwgMTApIHtcclxuICAgICAgICAgIGFsZXJ0KCdMaXN0cyBtdXN0IGNvbnRhaW4gMTAgb3IgbW9yZSB2YWx1ZXMhJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICghbGlzdC5uYW1lKSB7XHJcbiAgICAgICAgICBmbGFzaCgnI2xpc3QtbmFtZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBmbGFzaCgnLmxpc3QtY2F0ZWdvcnknKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZmxhc2goZWxlbWVudCkge1xyXG4gICAgICBjb25zdCBjb2xvciA9ICQoZWxlbWVudCkuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiKTtcclxuICAgICAgJChlbGVtZW50KS5hbmltYXRlKHtcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI0ZBODA3MlwiXHJcbiAgICAgIH0sIDEwMCwgKCkgPT4ge1xyXG4gICAgICAgICQoZWxlbWVudCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yXHJcbiAgICAgICAgfSwgMTAwKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLmRlbGV0ZUxpc3QgPSBsaXN0ID0+IHtcclxuICAgICAgaWYgKCFsaXN0Ll9pZCkge1xyXG4gICAgICAgICRzY29wZS5saXN0cyA9ICRzY29wZS5saXN0cy5maWx0ZXIoKHtcclxuICAgICAgICAgIF9pZFxyXG4gICAgICAgIH0pID0+IF9pZCk7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdCA9IG51bGw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBsaXN0PycpKSB7XHJcbiAgICAgICAgICBCb3RTdmMuZGVsZXRlTGlzdChsaXN0KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLmdldExpc3RzKCk7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdCA9IG51bGw7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUubGlzdEJ1dHRvbkNsYXNzID0gbGlzdCA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbHVlcyA9IGxpc3QudmFsdWVzO1xyXG4gICAgICBjb25zdCBibHVyYnMgPSBsaXN0LmJsdXJicztcclxuICAgICAgaWYgKHZhbHVlcyA9PT0gYmx1cmJzICYmIGxpc3QuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICByZXR1cm4gJ2J0bi1kZWZhdWx0JztcclxuICAgICAgfSBlbHNlIGlmIChibHVyYnMgPT09IDAgJiYgIWxpc3QuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICByZXR1cm4gJ2J0bi13YXJuaW5nJztcclxuICAgICAgfSBlbHNlIGlmIChibHVyYnMgPT09IDAgJiYgbGlzdC5kZXNjcmlwdGlvbikge1xyXG4gICAgICAgIHJldHVybiAnYnRuLWluZm8nO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnYnRuLXByaW1hcnknO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRNb3ZpZVBpY3MgPSAoKSA9PiB7XHJcbiAgICAgIEJvdFN2Yy5nZXRNb3ZpZVBpY3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbihyZXNwb25zZSA9PiAkc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KSk7XHJcbiAgICB9O1xyXG5cclxuICB9KTsiLCIvKmpzbGludCBlc3ZlcnNpb246IDYqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAvL0FuZ3VsYXJKcyBjYW4ndCBoYXZlIGFuIGFycm93IGZ1bmN0aW9uIGhlcmVcclxuICAuY29udHJvbGxlcignVGVuVGhpbmdzQWRtaW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBCb3RTdmMsIFVzZXJTdmMpIHtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCdsb2dpbicsIF8gPT4ge1xyXG4gICAgICBpZiAoJHNjb3BlLmN1cnJlbnRVc2VyLmFkbWluKSB7XHJcbiAgICAgICAgZ2V0VXNlcnMoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLmdldFF1ZXVlID0gKCkgPT4ge1xyXG4gICAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XHJcbiAgICAgIEJvdFN2Yy5nZXRRdWV1ZSgpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICRzY29wZS5xdWV1ZSA9IHJlc3BvbnNlLmRhdGEucmVwbGFjZSgnL24nLCAnPGJyLz4nKTtcclxuICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgICAkc2NvcGUuZ2V0UXVldWUoKTtcclxuXHJcbiAgICBCb3RTdmMuZ2V0UGF1c2UoKS50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgJHNjb3BlLnBhdXNlZCA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5wYXVzZWQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZ2V0VXNlcnMgPSAoKSA9PiB7XHJcbiAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgVXNlclN2Yy5nZXRVc2VycygpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICRzY29wZS51c2VycyA9IHJlc3BvbnNlLmRhdGEuZmlsdGVyKHVzZXIgPT4gIXVzZXIuYWRtaW4pO1xyXG4gICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUudG9nZ2xlQmFuID0gdXNlciA9PiB7XHJcbiAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgVXNlclN2Yy50b2dnbGVCYW4odXNlci5faWQpXHJcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgZ2V0VXNlcnMoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnRvZ2dsZVBhdXNlID0gdXNlciA9PiB7XHJcbiAgICAgIEJvdFN2Yy50b2dnbGVQYXVzZSgpXHJcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgJHNjb3BlLnBhdXNlZCA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUucGF1c2VkKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdXb3Jrb3V0Q3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuXHJcbiAgJHNjb3BlLnRpbWVSZW1haW5pbmcgPSAwO1xyXG4gICRzY29wZS50aW1lRXhlcmNpc2luZyA9IDMwO1xyXG4gICRzY29wZS50aW1lUmVzdGluZyA9IDEwO1xyXG4gICRzY29wZS5yZXN0ID0gZmFsc2U7XHJcblxyXG4gIHZhciBzb3VuZHMgPSB7XHJcbiAgICBvbjogbmV3IEF1ZGlvKCdvbi53YXYnKSxcclxuICAgIG9mZjogbmV3IEF1ZGlvKCdvZmYud2F2JyksXHJcbiAgICBzd2l0Y2g6IG5ldyBBdWRpbygnc3dpdGNoLndhdicpLFxyXG4gIH07XHJcblxyXG5cclxuICB2YXIgZXhlcmNpc2VzID0gW1xyXG4gICAge25hbWU6ICdKdW1waW5nIEphY2tzJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnV2FsbCBTaXQnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdQdXNoLVVwJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnQ3J1bmNoJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnU3RlcC1VcCcsIHNwbGl0OiB0cnVlfSxcclxuICAgIHtuYW1lOiAnU3F1YXQnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdUcmljZXBzIERpcCcsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1BsYW5rJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnSGlnaCBLbmVlcycsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ0x1bmdlJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnUHVzaC1VcCB3aXRoIFJvdGF0aW9uJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnU2lkZSBQbGFuaycsIHNwbGl0OiB0cnVlfVxyXG4gIF07XHJcblxyXG4gIHZhciBleGVyY2lzaW5nO1xyXG5cclxuICAkc2NvcGUucHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiAoZXhlcmNpc2VzLmxlbmd0aCAtIE1hdGguZmxvb3IoJHNjb3BlLnRpbWVSZW1haW5pbmcgLyAoJHNjb3BlLnRpbWVFeGVyY2lzaW5nICsgJHNjb3BlLnRpbWVSZXN0aW5nKSkpICsgJy8nICsgZXhlcmNpc2VzLmxlbmd0aDtcclxuICB9O1xyXG5cclxuICAkc2NvcGUud29ya291dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGV4Y2VyY2lzZVRpbWUgPSAkc2NvcGUudGltZUV4ZXJjaXNpbmcgKyAkc2NvcGUudGltZVJlc3Rpbmc7XHJcbiAgICBpZiAoISRzY29wZS50aW1lUmVtYWluaW5nKSB7XHJcbiAgICAgICRzY29wZS50aW1lUmVtYWluaW5nID0gZXhlcmNpc2VzLmxlbmd0aCAqIGV4Y2VyY2lzZVRpbWU7XHJcbiAgICAgIGV4ZXJjaXNpbmcgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUudGltZVJlbWFpbmluZy0tO1xyXG4gICAgICAgIGlmICgkc2NvcGUudGltZVJlbWFpbmluZyA9PT0gMCkge1xyXG4gICAgICAgICAgJHNjb3BlLmV4ZXJjaXNlID0ge25hbWU6ICdGaW5pc2hlZCEgQ29uZ3JhdHMhJywgc3BsaXQ6IGZhbHNlfTtcclxuICAgICAgICAgICRzY29wZS50aW1lciA9ICcnO1xyXG4gICAgICAgICAgJHNjb3BlLnRpbWVSZW1haW5pbmcgPSAwO1xyXG4gICAgICAgICAgJHNjb3BlLnJlc3QgPSBmYWxzZTtcclxuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgIHJldHVybiBjbGVhckludGVydmFsKGV4ZXJjaXNpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY3VycmVudEV4ZXJjaXNlID0gTWF0aC5mbG9vcigkc2NvcGUudGltZVJlbWFpbmluZyAvIGV4Y2VyY2lzZVRpbWUpO1xyXG4gICAgICAgIHZhciB0aW1lciA9ICRzY29wZS50aW1lUmVtYWluaW5nIC0gY3VycmVudEV4ZXJjaXNlICogZXhjZXJjaXNlVGltZTtcclxuICAgICAgICAkc2NvcGUudGltZXIgPSB0aW1lciA+ICRzY29wZS50aW1lRXhlcmNpc2luZyA/IHRpbWVyIC0gJHNjb3BlLnRpbWVFeGVyY2lzaW5nIDogdGltZXI7XHJcbiAgICAgICAgaWYgKHRpbWVyID4gJHNjb3BlLnRpbWVFeGVyY2lzaW5nKSB7XHJcbiAgICAgICAgICAkc2NvcGUucmVzdCA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICRzY29wZS5yZXN0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS5leGVyY2lzZSA9IGV4ZXJjaXNlc1tleGVyY2lzZXMubGVuZ3RoIC0gY3VycmVudEV4ZXJjaXNlIC0gMV07XHJcbiAgICAgICAgaWYgKHRpbWVyID09PSAkc2NvcGUudGltZUV4ZXJjaXNpbmcpIHtcclxuICAgICAgICAgIHNvdW5kcy5vbi5wbGF5KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aW1lciA9PT0gMCkge1xyXG4gICAgICAgICAgc291bmRzLm9mZi5wbGF5KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuZXhlcmNpc2Uuc3BsaXQgJiYgdGltZXIgPT09IE1hdGguZmxvb3IoJHNjb3BlLnRpbWVFeGVyY2lzaW5nIC8gMikpIHtcclxuICAgICAgICAgIHNvdW5kcy5zd2l0Y2gucGxheSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgIH0sIDEwMDApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2xlYXJJbnRlcnZhbChleGVyY2lzaW5nKTtcclxuICAgICAgJHNjb3BlLnRpbWVyID0gJyc7XHJcbiAgICAgICRzY29wZS50aW1lUmVtYWluaW5nID0gMDtcclxuICAgICAgJHNjb3BlLnJlc3QgPSBmYWxzZTtcclxuICAgICAgJHNjb3BlLmV4ZXJjaXNlID0ge25hbWU6ICcnLCBzcGxpdDogZmFsc2V9O1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcblx0LmRpcmVjdGl2ZSgnaGVhZCcsIFtcclxuXHRcdCckcm9vdFNjb3BlJyxcclxuXHRcdCckc3RhdGUnLFxyXG5cdFx0JyRjb21waWxlJyxcclxuXHRcdCckaW50ZXJwb2xhdGUnLFxyXG5cdFx0ZnVuY3Rpb24gKCRyb290U2NvcGUsICRzdGF0ZSwgJGNvbXBpbGUsICRpbnRlcnBvbGF0ZSkge1xyXG5cclxuXHRcdFx0dmFyIGdldFN0eWxlID0gZnVuY3Rpb24gZ2V0U3R5bGUodGVtcGxhdGVTdHlsZVVybCkge1xyXG5cclxuXHRcdFx0XHR2YXIgc3R5bGUgPSB7XHJcblx0XHRcdFx0XHRocmVmOiB0ZW1wbGF0ZVN0eWxlVXJsLFxyXG5cdFx0XHRcdFx0cmVsOiAnc3R5bGVzaGVldCdcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRpZiAoc3R5bGUuaHJlZi5tYXRjaCgvXFwubGVzcyQvKSkge1xyXG5cdFx0XHRcdFx0c3R5bGUucmVsID0gJ3N0eWxlc2hlZXQvbGVzcyc7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gc3R5bGU7XHJcblxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0dmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIGdldFN0eWxlcyhzdGF0ZSkge1xyXG5cclxuXHRcdFx0XHR2YXIgc3RhdGVzID0ge307XHJcblxyXG5cdFx0XHRcdC8vQ2hlY2sgc3RhdGUgZm9yIHN0eWxlc1xyXG5cdFx0XHRcdHdoaWxlIChzdGF0ZS5uYW1lICE9PSAnJykge1xyXG5cdFx0XHRcdFx0dmFyIHBhcmVudCA9ICRzdGF0ZS5nZXQoJ14nLCBzdGF0ZSk7XHJcblxyXG5cdFx0XHRcdFx0Ly9Jbml0aWF0ZSBvdXIgdmlldyBsaXN0XHJcblx0XHRcdFx0XHRpZiAoIXN0YXRlc1twYXJlbnQubmFtZV0pIHtcclxuXHRcdFx0XHRcdFx0c3RhdGVzW3BhcmVudC5uYW1lXSA9IHt9O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vQ2hlY2sgdGhlIHRlbXBsYXRlU3R5bGVcclxuXHRcdFx0XHRcdGlmIChzdGF0ZS50ZW1wbGF0ZVN0eWxlVXJsKSB7XHJcblx0XHRcdFx0XHRcdGlmICghc3RhdGVzW3BhcmVudC5uYW1lXVsnJ10pIHtcclxuXHRcdFx0XHRcdFx0XHRzdGF0ZXNbcGFyZW50Lm5hbWVdWycnXSA9IGdldFN0eWxlKHN0YXRlLnRlbXBsYXRlU3R5bGVVcmwpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly9DaGVjayB2aWV3c1xyXG5cdFx0XHRcdFx0aWYgKHN0YXRlLnZpZXdzKSB7XHJcblx0XHRcdFx0XHRcdF8uZm9yRWFjaChzdGF0ZS52aWV3cywgZnVuY3Rpb24gKHZpZXcsIGtleSkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvL0NoZWNrIGlmIHdlIGhhdmUgYSBzdHlsZVxyXG5cdFx0XHRcdFx0XHRcdGlmICghdmlldy50ZW1wbGF0ZVN0eWxlVXJsKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHQvL0NoZWNrIGlmIHdlIGFyZSB0YXJnZXRpbmcgc29tZSBwYXJlbnRcclxuXHRcdFx0XHRcdFx0XHRpZiAoKGtleSA9IGtleS5zcGxpdCgnQCcpKVsxXSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly9DaGVjayBpZiB3ZSBoYXZlIHN0eWxlcyBmb3IgdGhhdCBwYXJlbnRcclxuXHRcdFx0XHRcdFx0XHRcdGlmICghc3RhdGVzW2tleVsxXV0pIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGVzW2tleVsxXV0gPSB7fTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvL1BsYWNlIHRoZSBzdHlsZSBvbiBzb21lIHBhcmVudCdzIHZpZXdcclxuXHRcdFx0XHRcdFx0XHRcdGlmICghc3RhdGVzW2tleVsxXV1ba2V5WzBdXSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZXNba2V5WzFdXVtrZXlbMF1dID0gZ2V0U3R5bGUodmlldy50ZW1wbGF0ZVN0eWxlVXJsKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHQvL1BsYWNlIHRoZSBzdHlsZSBvbiBvdXIgcGFyZW50J3Mgdmlld1xyXG5cdFx0XHRcdFx0XHRcdHN0YXRlc1twYXJlbnQubmFtZV1ba2V5WzBdXSA9IGdldFN0eWxlKHZpZXcudGVtcGxhdGVTdHlsZVVybCk7XHJcblxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvL0NvbnRpbnVlIHdpdGggdGhlIHBhcmVudFxyXG5cdFx0XHRcdFx0c3RhdGUgPSBwYXJlbnQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvL0ZsYXR0ZW4gdGhlIGxpc3RcclxuXHRcdFx0XHR2YXIgZmxhdCA9IFtdO1xyXG5cdFx0XHRcdF8uZm9yRWFjaChzdGF0ZXMsIGZ1bmN0aW9uICh2aWV3cykge1xyXG5cclxuXHRcdFx0XHRcdF8uZm9yRWFjaCh2aWV3cywgZnVuY3Rpb24gKHN0eWxlKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIV8uaW5jbHVkZXMoZmxhdCwgc3R5bGUpKSB7XHJcblx0XHRcdFx0XHRcdFx0ZmxhdC5wdXNoKHN0eWxlKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly9SZXZlcnNlIGl0IHNvIHdlIGhhdmUgYSBwcm9wZXIgaGllcmFyY2h5XHJcblx0XHRcdFx0ZmxhdC5yZXZlcnNlKCk7XHJcblxyXG5cdFx0XHRcdHJldHVybiBmbGF0O1xyXG5cclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0cmVzdHJpY3Q6ICdFJyxcclxuXHRcdFx0XHRsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW0pIHtcclxuXHJcblx0XHRcdFx0XHRzY29wZS50ZW1wbGF0ZVN0eWxlcyA9IFtdO1xyXG5cclxuXHRcdFx0XHRcdHZhciBodG1sID0gJzxsaW5rIG5nLWF0dHItcmVsPVwie3tzdHlsZS5yZWx9fVwiIG5nLXJlcGVhdD1cInN0eWxlIGluIHRlbXBsYXRlU3R5bGVzXCIgbmctaHJlZj1cInt7c3R5bGUuaHJlZn19XCI+JztcclxuXHJcblx0XHRcdFx0XHRodG1sID0gaHRtbC5yZXBsYWNlKC9cXHtcXHsvZywgJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCkpO1xyXG5cdFx0XHRcdFx0aHRtbCA9IGh0bWwucmVwbGFjZSgvXFx9XFx9L2csICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2woKSk7XHJcblxyXG5cdFx0XHRcdFx0ZWxlbS5hcHBlbmQoJGNvbXBpbGUoaHRtbCkoc2NvcGUpKTtcclxuXHJcblx0XHRcdFx0XHQkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpIHtcclxuXHJcblx0XHRcdFx0XHRcdHNjb3BlLnRlbXBsYXRlU3R5bGVzID0gZ2V0U3R5bGVzKHRvU3RhdGUpO1xyXG5cclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0fVxyXG5cdF0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAuc2VydmljZSgnQm90U3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgICBzdmMuZ2V0UXVldWUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChgL2JvdHMvdGVudGhpbmdzL3F1ZXVlYCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5nZXRMaXN0cyA9IGZ1bmN0aW9uKHVzZXIpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChgL2FwaS9ib3RzL2xpc3RzYCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5nZXRDYXRlZ29yaWVzID0gKCkgPT4ge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL2JvdHMvY2F0ZWdvcmllc2ApO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuZ2V0TGFuZ3VhZ2VzID0gKCkgPT4ge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL2JvdHMvbGFuZ3VhZ2VzYCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5nZXRMaXN0ID0gZnVuY3Rpb24obGlzdCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2JvdHMvbGlzdHMvJyArIGxpc3QuX2lkKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLnNhdmVMaXN0ID0gZnVuY3Rpb24odXNlciwgbGlzdCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL2JvdHMvbGlzdHMnLCB7XHJcbiAgICAgICAgdXNlcjogdXNlcixcclxuICAgICAgICBsaXN0OiBsaXN0XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMucmVwb3J0TGlzdCA9IGZ1bmN0aW9uKHVzZXIsIGxpc3QpIHtcclxuICAgICAgJGh0dHAuZ2V0KCcvYXBpL2JvdHMvbGlzdHMvJyArIGxpc3QuX2lkICsgJy9yZXBvcnQvJyArIHVzZXIuX2lkKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmRlbGV0ZUxpc3QgPSBmdW5jdGlvbihsaXN0KSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoJy9hcGkvYm90cy9saXN0cy8nICsgbGlzdC5faWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuZ2V0TW92aWVQaWNzID0gZnVuY3Rpb24obGlzdCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL2JvdHMvbGlzdHMvJHtsaXN0Ll9pZH0vbW92aWVzYCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5nZXRQYXVzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL2JvdHMvcGF1c2VgKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLnRvZ2dsZVBhdXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KGAvYXBpL2JvdHMvcGF1c2VgKTtcclxuICAgIH07XHJcblxyXG4gIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnQ2F0ZWdvcmllc1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZ2V0Q2F0ZWdvcmllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2F0ZWdvcmllcycpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRUYXNrcyA9IGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jYXRlZ29yaWVzLycgKyBjYXRlZ29yeSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmFkZENhdGVnb3J5ID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jYXRlZ29yaWVzLycsIGNhdGVnb3J5KTtcclxuICB9O1xyXG5cclxuICBzdmMuYWRkVGFzayA9IGZ1bmN0aW9uIChjYXRlZ29yeSwgdGFzaykge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY2F0ZWdvcmllcy8nICsgY2F0ZWdvcnkgKyAnL3Rhc2tzJywgdGFzayk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLnNldFByaW9yaXR5TGlzdCA9IGZ1bmN0aW9uKGxpc3QpIHtcclxuICAgIHN2Yy5jaG9pY2VzID0gbGlzdDtcclxuICAgIHN2Yy5wcmlvcml0eUxpc3QgPSBbXTtcclxuICAgIC8vTWFrZSBhIG5ldyBjaG9pY2UgbGlzdFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IGxpc3QubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICB2YXIgcmFuZG9tID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKTtcclxuICAgICAgICBzdmMucHJpb3JpdHlMaXN0LnB1c2goe1xyXG4gICAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgICBmaXJzdENob2ljZTogbGlzdFtyYW5kb20gPT09IDAgPyBpIDogal0ubmFtZSxcclxuICAgICAgICAgIHNlY29uZENob2ljZTogbGlzdFtyYW5kb20gPT09IDAgPyBqIDogaV0ubmFtZSxcclxuICAgICAgICAgIGNob2ljZTogJydcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2h1ZmZsZShzdmMucHJpb3JpdHlMaXN0KTtcclxuICAgIGZvciAoaSBpbiBzdmMucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHN2Yy5wcmlvcml0eUxpc3RbaV0uaWQgPSBpICsgMTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzdmMuZ2V0UHJpb3JpdHlMaXN0ID0gZnVuY3Rpb24obGlzdCkge1xyXG4gICAgcmV0dXJuIHN2Yy5wcmlvcml0eUxpc3Q7XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xyXG4gICAgdmFyIG0gPSBhcnJheS5sZW5ndGgsIHQsIGk7XHJcbiAgICAvLyBXaGlsZSB0aGVyZSByZW1haW4gZWxlbWVudHMgdG8gc2h1ZmZsZeKAplxyXG4gICAgd2hpbGUgKG0pIHtcclxuICAgICAgLy8gUGljayBhIHJlbWFpbmluZyBlbGVtZW504oCmXHJcbiAgICAgIGkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtLS0pO1xyXG4gICAgICAvLyBBbmQgc3dhcCBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQuXHJcbiAgICAgIC8vYXJyYXlbbV0uZmlyc3RDaG9pY2U7XHJcbiAgICAgIHQgPSBhcnJheVttXTtcclxuICAgICAgYXJyYXlbbV0gPSBhcnJheVtpXTtcclxuICAgICAgYXJyYXlbaV0gPSB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH1cclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLnNlcnZpY2UoJ0VtYWlsU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gIHN2Yy5zZW5kID0gZnVuY3Rpb24gKGVtYWlsKSB7XHJcbiAgICBjb25zb2xlLmxvZyhlbWFpbCk7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9lbWFpbCcsIGVtYWlsKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gIC5zZXJ2aWNlKCdGaWxlU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgICBzdmMuZ2V0SW1hZ2VzID0gZnVuY3Rpb24oZm9sZGVyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvZmlsZXMvaW1hZ2VzLycgKyBmb2xkZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuZ2V0U291bmRzID0gZnVuY3Rpb24oZm9sZGVyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvZmlsZXMvc291bmRzLycgKyBmb2xkZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdHYW1lU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgICBzdmMuZ2V0SGlnaHNjb3JlID0gZnVuY3Rpb24gKGdhbWUsIHVzZXIpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9nYW1lcy8nICsgZ2FtZSArICcvJyArIHVzZXIgKyAnL2hpZ2hzY29yZScpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuc2V0SGlnaHNjb3JlID0gZnVuY3Rpb24gKGdhbWUsIHVzZXIsIHNjb3JlKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2dhbWVzLycgKyBnYW1lICsgJy8nICsgdXNlciArICcvaGlnaHNjb3JlJywge1xyXG4gICAgICAgIHNjb3JlOiBzY29yZVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdMYW5ndWFnZVN2YycsIGZ1bmN0aW9uKCkge1xyXG5cclxuICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgc3ZjLmxhbmd1YWdlcyA9IFtcclxuICAgIHtcclxuICAgICAgXCJjb2RlXCI6IFwiRU5cIixcclxuICAgICAgXCJuYW1lXCI6IFwiRW5nbGlzaFwiLFxyXG4gICAgICBcImZsYWdcIjogXCJmbGFnLWljb24tZ2JcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJjb2RlXCI6IFwiTkxcIixcclxuICAgICAgXCJuYW1lXCI6IFwiTmVkZXJsYW5kc1wiLFxyXG4gICAgICBcImZsYWdcIjogXCJmbGFnLWljb24tbmxcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJjb2RlXCI6IFwiRlJcIixcclxuICAgICAgXCJuYW1lXCI6IFwiRnJhbsOnYWlzXCIsXHJcbiAgICAgIFwiZmxhZ1wiOiBcImZsYWctaWNvbi1mclwiXHJcbiAgICB9XHJcbiAgXTtcclxuXHJcbiAgc3ZjLnRleHQgPSBbXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIkVOXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIk5MXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIkZSXCJcclxuICAgIH1cclxuICBdO1xyXG5cclxuICBzdmMuc2VsZWN0ZWRMYW5ndWFnZSA9IHN2Yy5sYW5ndWFnZXNbMF07XHJcblxyXG4gIHN2Yy5zZXRMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5ndWFnZSkge1xyXG4gICAgc3ZjLnNlbGVjdGVkTGFuZ3VhZ2UgPSBsYW5ndWFnZTtcclxuICAgIHJldHVybiBsYW5ndWFnZTtcclxuICB9O1xyXG5cclxuICBzdmMuZ2V0TGFuZ3VhZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gc3ZjLnNlbGVjdGVkTGFuZ3VhZ2U7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLnNlcnZpY2UoJ1Bvc3RzU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gIHN2Yy5mZXRjaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKTtcclxuICB9O1xyXG5cclxuICBzdmMuY3JlYXRlID0gZnVuY3Rpb24gKHBvc3QpIHtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldFBvc3QgPSBmdW5jdGlvbiAocG9zdCkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cy8nICsgcG9zdC5faWQpO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbigkaHR0cCkge1xyXG5cclxuICAgIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICAgIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmdldFVzZXJzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvYWxsJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy50b2dnbGVCYW4gPSBmdW5jdGlvbihpZCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3VzZXJzL2Jhbi8ke2lkfWApO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuc2V0VG9rZW4gPSBmdW5jdGlvbih0b2tlbikge1xyXG4gICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB0b2tlbjtcclxuICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5hdXRoZW50aWNhdGUgPSBmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzL2F1dGhlbnRpY2F0ZScsIHtcclxuICAgICAgICB1c2VyOiB1c2VyXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICByZXR1cm4gc3ZjLnNldFRva2VuKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmxvZ2luID0gZnVuY3Rpb24odXNlcikge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzLycgKyB1c2VyICsgJy9sb2dpbicpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW4gPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgcmV0dXJuIHN2Yy5zZXRUb2tlbihyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLnVwZGF0ZVVzZXIgPSBmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzLycgKyB1c2VyLl9pZCwge1xyXG4gICAgICAgIHVzZXI6IHVzZXJcclxuICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gc3ZjLmdldFVzZXIoKTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5jaGVja1Bhc3N3b3JkID0gZnVuY3Rpb24odXNlciwgcGFzc3dvcmQpIHtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvJyArIHVzZXIgKyAnL3ZlcmlmaWNhdGlvbicsIHtcclxuICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5jaGFuZ2VQYXNzd29yZCA9IGZ1bmN0aW9uKHVzZXIsIG9sZFBhc3N3b3JkLCBuZXdQYXNzd29yZCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy8nICsgdXNlciArICcvcGFzc3dvcmQnLCB7XHJcbiAgICAgICAgb2xkUGFzc3dvcmQ6IG9sZFBhc3N3b3JkLFxyXG4gICAgICAgIG5ld1Bhc3N3b3JkOiBuZXdQYXNzd29yZFxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmNoYW5nZVVzZXJuYW1lID0gZnVuY3Rpb24odXNlciwgbmV3VXNlcm5hbWUpIHtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvJyArIHVzZXIgKyAnL3VzZXJuYW1lJywge1xyXG4gICAgICAgIG5ld1VzZXJuYW1lOiBuZXdVc2VybmFtZVxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmxvZ291dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcbiAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9ICcnO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuY3JlYXRlVXNlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2VycycsIHtcclxuICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXHJcbiAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gIC5jb250cm9sbGVyKCdRdWl6QW5pbWFsc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsIEZpbGVTdmMpIHtcclxuXHJcbiAgICBGaWxlU3ZjLmdldFNvdW5kcygnYW5pbWFscycpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgJHNjb3BlLmFuaW1hbHMgPSBfLnNodWZmbGUocmVzcG9uc2UuZGF0YS5tYXAoYW5pbWFsID0+ICh7XHJcbiAgICAgICAgICBzb3VuZDogYW5pbWFsLFxyXG4gICAgICAgICAgbmFtZTogYW5pbWFsLnN1YnN0cmluZygwLCBhbmltYWwuaW5kZXhPZignLicpKS5yZXBsYWNlKCdfJywgJyAnKS5jYXBpdGFsaXplKClcclxuICAgICAgICB9KSkpO1xyXG4gICAgICAgIGZvciAobGV0IGFuaW1hbCBvZiAkc2NvcGUuYW5pbWFscykge1xyXG4gICAgICAgICAgYW5pbWFsLmFuc3dlcnMgPSBfLnNodWZmbGUoW2FuaW1hbC5uYW1lLCAuLi5nZXRSYW5kb21BbmltYWxzKGFuaW1hbC5uYW1lKV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuYW5pbWFscyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5ndWVzcyA9IChhbmltYWwsIGd1ZXNzKSA9PiB7XHJcbiAgICAgIGFuaW1hbC5ndWVzcyA9IGd1ZXNzO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBnZXRSYW5kb21BbmltYWxzID0gbmFtZSA9PiBfLnNodWZmbGUoJHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbCA9PiBuYW1lICE9PSBhbmltYWwubmFtZSkubWFwKGFuaW1hbCA9PiBhbmltYWwubmFtZSkpLnNsaWNlKDAsIDUpO1xyXG5cclxuICAgICRzY29wZS5nZXRTY29yZSA9ICgpID0+IGAkeyRzY29wZS5hbmltYWxzLmZpbHRlcihhbmltYWwgPT4gYW5pbWFsLm5hbWUgPT09IGFuaW1hbC5ndWVzcykubGVuZ3RofS8keyRzY29wZS5hbmltYWxzLmxlbmd0aH1gO1xyXG5cclxuICAgICRzY29wZS5pc1Njb3JlVmlzaWJsZSA9ICgpID0+ICRzY29wZS5hbmltYWxzLmZpbHRlcihhbmltYWwgPT4gYW5pbWFsLmd1ZXNzKS5sZW5ndGggPT09ICRzY29wZS5hbmltYWxzLmxlbmd0aDtcclxuICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1F1aXpHb29nbGVDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgRmlsZVN2Yykge1xyXG4gIEZpbGVTdmMuZ2V0SW1hZ2VzKCdnb29nbGUnKVxyXG4gIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAkc2NvcGUuaW1hZ2VzID0gcmVzcG9uc2UuZGF0YTtcclxuICB9KTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUXVpekxvZ29zQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEZpbGVTdmMpIHtcclxuICBGaWxlU3ZjLmdldEltYWdlcygnbG9nb3MnKVxyXG4gIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAkc2NvcGUuaW1hZ2VzID0gcmVzcG9uc2UuZGF0YTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==
