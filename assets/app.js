angular.module("app",["ui.router","ui.bootstrap","ngAnimate","ngSanitize","ngDragDrop","ngTagsInput","vcRecaptcha","chart.js","tc.chartjs"]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,a,n){a.otherwise("/home"),e.state("home",{url:"/home",templateUrl:"/home.html"}).state("policy",{url:"/policy",templateUrl:"/policy.html"}).state("print",{url:"/print",templateUrl:"/print.html"}).state("experience",{url:"/experience",controller:"ExperienceCtrl",templateUrl:"/experience.html"}).state("skills",{url:"/skills",controller:"SkillsCtrl",templateUrl:"/skills.html"}).state("hobbies",{url:"/hobbies",controller:"HobbiesCtrl",templateUrl:"/hobbies.html"}).state("contact",{url:"/contact",controller:"ContactCtrl",templateUrl:"/contact.html"}).state("workout",{url:"/workout",controller:"WorkoutCtrl",templateUrl:"/workout.html"}).state("posts",{url:"/posts",controller:"PostsCtrl",templateUrl:"/posts.html"}).state("profile",{url:"/profile",controller:"ProfileCtrl",templateUrl:"/profile.html"}).state("lists",{url:"/lists",controller:"ListsCtrl",templateUrl:"lists.html"}).state("prioritize",{url:"/prioritize",controller:"PrioritizeCtrl",templateUrl:"prioritize.html"}).state("explosions",{url:"/explosions",controller:"ExplosionsCtrl",templateUrl:"explosions.html"}).state("asteroids",{url:"/asteroids",controller:"AsteroidsCtrl",templateUrl:"asteroids.html"}),n.html5Mode({enabled:!0,requireBase:!1})}]),angular.module("app").service("WebSocketSvc",["$rootScope","$timeout",function(n,a){var t,l=function(){(t=new WebSocket("https:"===window.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host)).onopen=function(){console.log("Websocket connected")},t.onclose=function(e){console.log("Websocket closed. Reconnecting..."),a(l,1e3)},t.onerror=function(e){console.log("Error: "+e+" - State: "+t.readyState)},t.onmessage=function(e){var a=JSON.parse(e.data);n.$broadcast("ws:"+a.topic,a.data)}};this.send=function(e,a){var n=JSON.stringify({topic:e,data:a});t.send(n)},this.connect=l}]).run(["WebSocketSvc",function(e){e.connect()}]),angular.module("app").directive("head",["$rootScope","$state","$compile","$interpolate",function(n,o,t,l){var r=function(e){var a={href:e,rel:"stylesheet"};return a.href.match(/\.less$/)&&(a.rel="stylesheet/less"),a};return{restrict:"E",link:function(i,e){i.templateStyles=[];var a='<link ng-attr-rel="{{style.rel}}" ng-repeat="style in templateStyles" ng-href="{{style.href}}">';a=(a=a.replace(/\{\{/g,l.startSymbol())).replace(/\}\}/g,l.endSymbol()),e.append(t(a)(i)),n.$on("$stateChangeStart",function(e,a,n,t,l){i.templateStyles=function(e){for(var n={};""!==e.name;){var t=o.get("^",e);n[t.name]||(n[t.name]={}),e.templateStyleUrl&&(n[t.name][""]||(n[t.name][""]=r(e.templateStyleUrl))),e.views&&_.forEach(e.views,function(e,a){if(e.templateStyleUrl)return(a=a.split("@"))[1]?(n[a[1]]||(n[a[1]]={}),void(n[a[1]][a[0]]||(n[a[1]][a[0]]=r(e.templateStyleUrl)))):void(n[t.name][a[0]]=r(e.templateStyleUrl))}),e=t}var a=[];return _.forEach(n,function(e){_.forEach(e,function(e){_.includes(a,e)||a.push(e)})}),a.reverse(),a}(a)})}}}]),angular.module("app").controller("AppCtrl",["$scope","$location","LanguageSvc","UserSvc",function(n,e,a,t){console.log("%cYou sneaky bugger!","font: 2em sans-serif; color: DodgerBlue; text-shadow: 2px 0 0 #444, -2px 0 0 #444, 0 2px 0 #444, 0 -2px 0 #444, 1px 1px #444, -1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444;"),console.log("I'm glad you're curious whether something is popping up in here. I'm a bit of a stickler when it comes to messages in the console so I try to make sure only things I want are visible. That being said, if there is a big error here, I would really appreciate you telling me so I can get rid of it!"),console.log("The code for my resume is hosted on Github if you really want to go into all this! => https://github.com/FlandersBurger/resume"),$(window).load(function(){$(".loading").fadeOut("slow"),$(".content").fadeIn("slow")}),n.themeCounter=6,n.today=new Date,n.year=n.today.getFullYear(),n.random=Math.floor(1e6*Math.random()),n.flipTheme=function(){$(".loading").show(),$(".content").hide(),setTimeout(function(){$(".loading").fadeOut("slow"),$(".content").fadeIn("slow")},800),n.themeCounter=n.themeCounter<6?n.themeCounter+1:n.themeCounter=1},$.getJSON("/skills.json",function(e){n.skills=e.filter(function(e){return e.enabled})}),$.getJSON("/hobbies.json",function(e){n.hobbies=e}),$.getJSON("/experience.json",function(e){n.jobs=e,n.jobs.forEach(function(e){e.startDate=new Date(e.startDate),e.endDate&&(e.endDate=new Date(e.endDate))})}),n.getTimeSpan=function(e){return e.startDate.getFullYear()+(e.endDate?" - "+e.endDate.getFullYear():" - Today")},n.languages=a.languages,n.selectedLanguage=a.getLanguage(),n.selectLanguage=function(e){n.selectedLanguage=a.setLanguage(e)},n.hoverdiv=function(e,a){var n=e.clientX+"px",t=e.clientY+20+"px";document.getElementById(a);return $("#"+a).css("left",n),$("#"+a).css("top",t),$("#"+a).toggle(),!1},n.socialMedia=[{name:"linkedin",url:"https://www.linkedin.com/in/laurent-debacker-1633a916",icon:"fa-linkedin"},{name:"github",url:"https://github.com/FlandersBurger",icon:"fa-github"},{name:"jsfiddle",url:"https://jsfiddle.net/user/BelgoCanadian/fiddles/",icon:"fa-jsfiddle"},{name:"stackoverflow",url:"http://stackoverflow.com/users/1083923/belgocanadian",icon:"fa-stack-overflow"}],window.localStorage.user&&t.login(window.localStorage.user).then(function(e){n.loggedIn=!0,n.currentUser=e.data}),n.$on("login",function(e,a){window.localStorage.user=a._id,n.loggedIn=!0,n.currentUser=a}),n.$on("update",function(e,a){n.currentUser=a,n.currentUser.birthDate=new Date(n.currentUser.birthDate),n.loading=!1,setTimeout(function(){$("#loading-icon").fadeOut("slow")},1e3)}),n.$on("loading",function(e,a){n.loading=!0,$("#loading-icon").show()}),n.$on("loaded",function(e,a){n.loading=!1,setTimeout(function(){$("#loading-icon").fadeOut("slow")},1e3)}),n.logout=function(){firebase.auth().signOut().then(function(){n.loggedIn=!1,window.localStorage.clear(),n.$broadcast("logout")}).catch(function(e){})}}]),angular.module("app").controller("AsteroidsCtrl",["$scope",function(e){var a=document.getElementById("asteroids-page"),n=a.getContext("2d");function t(){this.x=a.width/2-25,this.y=a.height/2-25,this.img=new Image,this.img.src="spaceship.png",this.speed=0,this.rotationSpeed=1,this.rotation=0,this.shoot=function(){}}var l=new t;function i(){a.width=window.innerWidth,a.height=window.innerHeight-(a.width<=768?55:111),requestAnimationFrame(o)}function o(){n.clearRect(0,0,a.width,a.height),l.x+=l.speed*Math.cos((l.rotation-90)*Math.PI/180),l.y+=l.speed*Math.sin((l.rotation-90)*Math.PI/180),l.x>a.width?l.x=-50:l.x<-50&&(l.x=a.width),l.y>a.height?l.y=-50:l.y<-50&&(l.y=a.height),n.save(),n.translate(l.x,l.y),n.translate(25,25),n.rotate(l.rotation*Math.PI/180),n.drawImage(l.img,-25,-25,50,50),n.restore(),requestAnimationFrame(o)}e.start=function(){l=new t},$(document).on("keydown",function(e){32===e.keyCode?l.shoot():37===e.keyCode?(0===l.rotation?l.rotation=360:l.rotation-=l.rotationSpeed,l.rotationSpeed<3&&l.rotationSpeed++):38===e.keyCode?l.speed<=5&&l.speed++:39===e.keyCode?(360===l.rotation?l.rotation=0:l.rotation+=l.rotationSpeed,l.rotationSpeed<3&&l.rotationSpeed++):40===e.keyCode&&0<=l.speed&&l.speed--}),$(document).on("keyup",function(e){l.rotationSpeed=1}),window.addEventListener("resize",i,!1),i(),e.start()}]),angular.module("app").controller("ContactCtrl",["$scope","EmailSvc",function(a,e){a.options=[{name:"Spam",text:"I am a spam bot and automatically check the first option I find!"},{name:"Opportunitiy",text:"You seem to have the skills I seek, I'd like to talk about some opportunities."},{name:"Resume",text:"I dig the resume, how did you make it?"},{name:"Other",text:"Sumtin else!"}],a.contact={email:"",name:"",phone:"",about:"",message:""},a.send=function(){a.sending=!0,console.log("here"),e.send({email:a.contact.email,name:a.contact.name,phone:a.contact.phone,about:a.contact.about,message:a.contact.message}).then(function(e){a.sent=!0,console.log("SUCCESS. status=%d, text=%s",e.status,e.text),console.log(e)},function(e){a.sending=!1,console.log("FAILED. error=",e)})}}]),angular.module("app").controller("ExperienceCtrl",["$scope",function(e){e.getSkill=function(a){if(e.skills)return e.skills.find(function(e){return e.code===a})}}]),angular.module("app").controller("BubblesCtrl",["$scope",function(e){var a=document.getElementById("bubbles-page"),n=a.getContext("2d"),t=[],l=["#ffc300","#ff5733","#c70039","#900c3e","#571845"];function i(){this.lifespan=0,this.radius=1,this.expanding=!0,this.speed=Math.round(3*Math.random()),this.circumference=Math.round(50*Math.random())+5,this.maxRadius=Math.round(200*Math.random())+20,this.x=Math.round(Math.random()*a.width),this.y=Math.round(Math.random()*a.height),this.vx=.5<=Math.random()?1:-1,this.vy=.5<=Math.random()?1:-1}requestAnimationFrame(function e(){t.push(new i),t=t.filter(function(e){return e.radius===e.maxRadius&&(e.expanding=!1),e.x+=e.vx*e.speed,e.y+=e.vy*e.speed,e.radius+=e.expanding?1:-1,0<e.radius}),n.clearRect(0,0,a.width,a.height),t.forEach(function(e){l[Math.round(l.length*e.radius/e.maxRadius)],n.beginPath(),n.arc(e.x,e.y,e.radius,0,2*Math.PI),n.fillStyle=l[Math.round(l.length*e.radius/e.maxRadius)],n.fill(),n.strokeStyle=l[l.length-Math.round(l.length*e.radius/e.maxRadius)],n.lineWidth=e.circumference*e.radius/e.maxRadius,n.stroke()}),requestAnimationFrame(e)}),function(){function e(){a.width=window.innerWidth,a.height=window.innerHeight-(a.width<=768?55:111)}window.addEventListener("resize",e,!1),e()}()}]),angular.module("app").controller("HobbiesCtrl",["$scope","$window",function(a,e){a.hobbySelectorVisible=!1,$.getJSON("https://www.reddit.com/user/belgocanadian/about/.json",function(e){}),a.selectedHobby=a.hobbies[0],a.selectHobby=function(e){a.selectedHobby=e,a.hobbySelectorVisible=!1},a.showHobby=function(e,a,n){return!!e.images&&0<e.images.length}}]),angular.module("app").controller("ListsCtrl",["$scope","$location","CategoriesSvc",function(t,e,l){t.showCategory=!0,t.init=function(){l.getCategories().then(function(e){for(var a in t.categories=e.data,t.tasks=[],t.categories)for(var n in t.categories[a].tasks)t.tasks.push({category:t.categories[a].name,task:t.categories[a].tasks[n].name})})},t.selectCategory=function(e){for(var a in t.selectedCategory=e,t.selectedTasks=[],t.selectableTasks=[],t.selectedCategory.tasks)t.selectableTasks.push(t.selectedCategory.tasks[a]);t.showCategory=!1,t.enteredCategory=""},t.newCategory=function(e){for(var a=!1,n=0;n<t.categories.length;n++)t.categories[n].name===e&&(t.selectCategory(t.categories[n]),a=!0);a||l.addCategory({category:e}).then(function(e){t.init(),t.selectCategory(e)}),t.enteredCategory=""},t.newTask=function(e){var a=!1;for(var n in t.selectedCategory.tasks)t.selectedCategory.tasks[n].name===e&&(a=!0,t.selectTask(t.selectedCategory.tasks[n]));a||l.addTask(t.selectedCategory.name,{task:e}).then(function(){t.selectedCategory.tasks.push({name:e}),t.addTask(t.selectedTasks,t.selectedCategory.tasks[t.selectedCategory.tasks.length-1])}),t.enteredTask=""},t.selectTask=function(e){t.addTask(t.selectedTasks,e),t.removeTask(t.selectableTasks,e),t.enteredTask=""},t.unselectTask=function(e){t.addTask(t.selectableTasks,e),t.removeTask(t.selectedTasks,e)},t.addTask=function(e,a){e.push(a)},t.removeTask=function(e,a){e.splice(e.indexOf(a),1)},t.startPrioritizing=function(){l.setPriorityList(t.selectedTasks),e.path("/prioritize")},t.getQuestions=function(){if(!t.selectedTasks)return"";for(var e=0,a=t.selectedTasks.length-1;0<a;a--)e+=a;return e}}]),angular.module("app").controller("LoginCtrl",["$scope","$location","UserSvc",function(t,l,i){var a=new firebaseui.auth.AuthUI(firebase.auth());function n(){a.start("#firebaseui-auth-container",{callbacks:{signInSuccess:function(a,e,n){return firebase.auth().currentUser.getIdToken(!0).then(function(e){i.authenticate({displayName:a.displayName,email:a.email,photoURL:a.photoURL,emailVerified:a.emailVerified,idToken:e}).then(function(e){t.$emit("login",e.data),$("#modal-login").modal("hide"),l.path("/")},function(){t.$emit("popup",{message:"Login Failed",type:"alert-danger"})})}).catch(function(e){}),!1},signInFailure:function(e){if("firebaseui/anonymous-upgrade-merge-conflict"!=e.code)return Promise.resolve();var a=e.credential;return firebase.auth().signInWithCredential(a)},uiShown:function(){document.getElementById("loader").style.display="none"}},signInSuccessUrl:"/home",signInOptions:[firebase.auth.GoogleAuthProvider.PROVIDER_ID,firebase.auth.FacebookAuthProvider.PROVIDER_ID],signInFlow:"popup"})}t.$on("logout",function(e){a.reset(),n()}),n()}]),angular.module("app").controller("PostsCtrl",["$scope","$filter","PostsSvc",function(n,e,t){n.addPost=function(){n.postBody&&t.create({body:n.postBody}).then(function(e){n.postBody=null})},t.fetch().then(function(e){n.posts=e.data}),n.$on("ws:new_post",function(e,a){n.$apply(function(){t.getPost(a).then(function(e){n.posts.unshift(e.data)})})})}]),angular.module("app").controller("PrioritizeCtrl",["$scope","$location","CategoriesSvc",function(t,e,n){t.priorityList=n.getPriorityList(),t.priorityList?(t.selectedQuestion=1,t.currentQuestion=1,t.done=!1):e.path("/lists"),t.makeChoice=function(e){for(var a in t.priorityList)t.priorityList[a].id===t.selectedQuestion&&(t.priorityList[a].choice=1===e?t.priorityList[a].firstChoice:t.priorityList[a].secondChoice);t.selectedQuestion===t.currentQuestion&&(t.currentQuestion=t.currentQuestion===t.priorityList.length?1:t.currentQuestion+1),t.selectedQuestion=t.currentQuestion;var n=!1;for(a in t.priorityList)if(""===t.priorityList[a].choice){n=!0;break}n||($("#prioritizeChoices").hide(300),t.done=!0)},t.getButtonValue=function(e){if(!t.priorityList)return"";for(var a=0;a<t.priorityList.length;a++)if(t.priorityList[a].id===t.selectedQuestion)return 1===e?t.priorityList[a].firstChoice:t.priorityList[a].secondChoice},t.selectQuestion=function(e){t.selectedQuestion=e},t.getFilteredPriorityList=function(){return t.priorityList?t.priorityList.sort(function(e,a){return e.id-a.id}).filter(function(e){return""!==e.choice||e.id===t.currentQuestion}):[]},t.getChoicesMade=function(){if(!t.priorityList)return"";var e=0;for(var a in t.priorityList)""!==t.priorityList[a].choice&&e++;return e},t.getButtonClass=function(e){if(!t.priorityList)return"";for(var a in t.priorityList)if(t.priorityList[a].id===t.selectedQuestion)return""===t.priorityList[a].choice?"btn-primary":1===e?t.priorityList[a].firstChoice===t.priorityList[a].choice?"btn-success":"btn-danger":t.priorityList[a].secondChoice===t.priorityList[a].choice?"btn-success":"btn-danger"},t.showChoices=function(){$("#prioritizeChoices").show(1e3),$("#reviewChoices").hide()},t.chartClick=function(e){t.chart&&console.log(t.chart.getSegmentsAtEvent(e))},t.showResults=function(){for(var e in t.data=[],t.options={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:0,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<h3 class="tc-chart-js-legend" style="padding:5px"><% for (var i=0; i<segments.length; i++){%><div class="label" style="float:left;margin:5px;background-color:<%=segments[i].fillColor%>"><%if(segments[i].label){%><%=segments[i].label%><%}%></div><%}%></h3>'},n.choices)for(var a in n.choices[e].votes=0,t.priorityList)n.choices[e].name===t.priorityList[a].choice&&n.choices[e].votes++;for(e in n.choices.sort(function(e,a){return e.votes<a.votes}),n.choices)t.data.push({value:n.choices[e].votes,label:n.choices[e].name});$("#prioritizeResult").hide(),$("#prioritizeChoices").hide(),$("#priorityResults").show(1e3)}}]),angular.module("app").controller("ProfileCtrl",["$scope","$location","UserSvc",function(i,e,o){i.currentUser?($("#sex-indicator").offset({left:i.currentUser.gender.sex/200*$("#sex").width()+$("#sex").offset().left}),$("#identity-indicator").offset({left:i.currentUser.gender.identity/200*$("#identity").width()+$("#identity").offset().left})):e.path("/"),i.sexes=["Male","FtM Male","Intersex","MtF Female","Female"],i.identities=["Man","Bigender","Pangender","Agender","Polygender","Genderfluid","Genderqueer","Queer","Woman"],i.dateOptions={maxDate:new Date,minDate:new Date(1900,1,1),initDate:new Date(2e3,1,1),datepickerMode:"year"},i.gender=function(e,a){return e[Math.round(a/200*(e.length-1))]},i.startSlider=function(){},i.dragSlider=function(e,a,n){i.currentUser.gender[n]=Math.round(($("#"+n+"-indicator").offset().left-$("#"+n).offset().left)/($("#"+n).width()-$("#"+n+"-indicator").width())*200),i.$apply()},i.stopSlider=function(){},i.usernameToggle=!0,i.passwordToggle=!0,i.toggleUsername=function(){i.usernameToggle=!i.usernameToggle,i.newUsername=i.currentUser.username},i.togglePassword=function(){i.newPassword=null,i.confirmPassword=null,i.passwordToggle=!i.passwordToggle},i.checkPassword=function(e){if(e){var a=i.currentUser._id;o.checkPassword(a,e).then(function(e){i.togglePassword()},function(){var e=$(".password").css("backgroundColor");$(".password").animate({backgroundColor:"#FFB6C1"},200).animate({backgroundColor:e},200)})}},i.changePassword=function(e,a,n){if(a)if(a==n){var t=i.currentUser._id;o.changePassword(t,e,a).then(function(e){i.$emit("popup",{message:"Password Changed",type:"alert-success"}),i.oldPassword=null,i.togglePassword()},function(){i.$emit("popup",{message:"Password Change Failed",type:"alert-danger"})})}else{var l=$(".password").css("backgroundColor");$(".password").animate({backgroundColor:"#FFB6C1"},200).animate({backgroundColor:l},200)}},i.changeUsername=function(a){i.$emit("loading"),o.changeUsername(i.currentUser._id,a).then(function(e){i.$emit("update",e.data)},function(e){i.$emit("popup",{message:a+" already in use",type:"alert-danger"})})},i.updateUser=function(){i.currentUser&&(i.$emit("loading"),o.updateUser(i.currentUser).then(function(e){i.$emit("update",e.data)}))},i.$watch("currentUser.flags.length",function(e){i.updateUser()}),i.loadCountries=function(a){return[{name:"Andorra",flag:"flag-ad",tidbit:""},{name:"United Arab Emirates",flag:"flag-ae"},{name:"Afghanistan",flag:"flag-af"},{name:"Antigua and Barbuda",flag:"flag-ag"},{name:"Anguilla",flag:"flag-ai"},{name:"Albania",flag:"flag-al"},{name:"Armenia",flag:"flag-am"},{name:"Angola",flag:"flag-ao"},{name:"Antarctica",flag:"flag-aq"},{name:"Argentina",flag:"flag-ar"},{name:"American Somoa",flag:"flag-as"},{name:"Austria",flag:"flag-at"},{name:"Australia",flag:"flag-au"},{name:"Aruba",flag:"flag-aw"},{name:"Åland Islands",flag:"flag-ax"},{name:"Azerbaijan",flag:"flag-az"},{name:"Bosnia and Herzegovina",flag:"flag-ba"},{name:"Barbados",flag:"flag-bb"},{name:"Bangladesh",flag:"flag-bd"},{name:"Belgium",flag:"flag-be"},{name:"Burkina Faso",flag:"flag-bf"},{name:"Bulgaria",flag:"flag-bg"},{name:"Bahrain",flag:"flag-bh"},{name:"Burundi",flag:"flag-bi"},{name:"Benin",flag:"flag-bj"},{name:"Saint Barthélemy",flag:"flag-bl"},{name:"Bermuda",flag:"flag-bm"},{name:"Brunei ",flag:"flag-bn"},{name:"Bolivia, Plurinational State of",flag:"flag-bo"},{name:"Bonaire, Sint Eustatius and Saba",flag:"flag-bq"},{name:"Brazil",flag:"flag-br"},{name:"Bahamas",flag:"flag-bs"},{name:"Bhutan",flag:"flag-bt"},{name:"Bouvet Island",flag:"flag-bv"},{name:"Botswana",flag:"flag-bw"},{name:"Belarus",flag:"flag-by"},{name:"Belize",flag:"flag-bz"},{name:"Canada",flag:"flag-ca"},{name:"Cocos (Keeling) Islands",flag:"flag-cc"},{name:"Congo, the Democratic Republic of the",flag:"flag-cd"},{name:"Central African Republic",flag:"flag-cf"},{name:"Congo",flag:"flag-cg"},{name:"Switzerland",flag:"flag-ch"},{name:"Côte d'Ivoire",flag:"flag-ci"},{name:"Cook Islands",flag:"flag-ck"},{name:"Chile",flag:"flag-cl"},{name:"Cameroon",flag:"flag-cm"},{name:"China",flag:"flag-cn"},{name:"Colombia",flag:"flag-co"},{name:"Costa Rica",flag:"flag-cr"},{name:"Cuba",flag:"flag-cu"},{name:"Cabo Verde",flag:"flag-cv"},{name:"Curaçao",flag:"flag-cw"},{name:"Christmas Island",flag:"flag-cx"},{name:"Cyprus",flag:"flag-cy"},{name:"Czech Republic",flag:"flag-cz"},{name:"Germany",flag:"flag-de"},{name:"Djibouti",flag:"flag-dj"},{name:"Denmark",flag:"flag-dk"},{name:"Dominica",flag:"flag-dm"},{name:"Dominican Republic",flag:"flag-do"},{name:"Algeria",flag:"flag-dz"},{name:"Ecuador",flag:"flag-ec"},{name:"Estonia",flag:"flag-ee"},{name:"Egypt",flag:"flag-eg"},{name:"Western Sahara",flag:"flag-eh"},{name:"Eritrea",flag:"flag-er"},{name:"Spain",flag:"flag-es"},{name:"Ethiopia",flag:"flag-et"},{name:"Finland",flag:"flag-fi"},{name:"Fiji",flag:"flag-fj"},{name:"Falkland Islands (Malvinas)",flag:"flag-fk"},{name:"Micronesia, Federated States of",flag:"flag-fm"},{name:"Faroe Islands",flag:"flag-fo"},{name:"France",flag:"flag-fr"},{name:"Gabon",flag:"flag-ga"},{name:"United Kingdom of Great Britain and Northern Ireland",flag:"flag-gb"},{name:"Grenada",flag:"flag-gd"},{name:"Georgia",flag:"flag-ge"},{name:"French Guiana",flag:"flag-gf"},{name:"Guernsey",flag:"flag-gg"},{name:"Ghana",flag:"flag-gh"},{name:"Gibraltar",flag:"flag-gi"},{name:"Greenland",flag:"flag-gl"},{name:"Gambia",flag:"flag-gm"},{name:"Guinea",flag:"flag-gn"},{name:"Guadeloupe",flag:"flag-gp"},{name:"Equatorial Guinea",flag:"flag-gq"},{name:"Greece",flag:"flag-gr"},{name:"South Georgia and the South Sandwich Islands",flag:"flag-gs"},{name:"Guatemala",flag:"flag-gt"},{name:"Guam",flag:"flag-gu"},{name:"Guinea-Bissau",flag:"flag-gw"},{name:"Guyana",flag:"flag-gy"},{name:"Hong Kong",flag:"flag-hk"},{name:"Heard Island and McDonald Islands",flag:"flag-hm"},{name:"Honduras",flag:"flag-hn"},{name:"Croatia",flag:"flag-hr"},{name:"Haiti",flag:"flag-ht"},{name:"Hungary",flag:"flag-hu"},{name:"Indonesia",flag:"flag-id"},{name:"Ireland",flag:"flag-ie"},{name:"Israel",flag:"flag-il"},{name:"Isle of Man",flag:"flag-im"},{name:"India",flag:"flag-in"},{name:"British Indian Ocean Territory",flag:"flag-io"},{name:"Iraq",flag:"flag-iq"},{name:"Iran, Islamic Republic of",flag:"flag-ir"},{name:"Iceland",flag:"flag-is"},{name:"Italy",flag:"flag-it"},{name:"Jersey",flag:"flag-je"},{name:"Jamaica",flag:"flag-jm"},{name:"Jordan",flag:"flag-jo"},{name:"Japan",flag:"flag-jp"},{name:"Kenya",flag:"flag-ke"},{name:"Kyrgyzstan",flag:"flag-kg"},{name:"Cambodia",flag:"flag-kh"},{name:"Kiribati",flag:"flag-ki"},{name:"Comoros",flag:"flag-km"},{name:"Saint Kitts and Nevis",flag:"flag-kn"},{name:"Korea, Democratic People's Republic of",flag:"flag-kp"},{name:"Korea, Republic of",flag:"flag-kr"},{name:"Kuwait",flag:"flag-kw"},{name:"Cayman Islands",flag:"flag-ky"},{name:"Kazakhstan",flag:"flag-kz"},{name:"Lao People's Democratic Republic",flag:"flag-la"},{name:"Lebanon",flag:"flag-lb"},{name:"Saint Lucia",flag:"flag-lc"},{name:"Liechtenstein",flag:"flag-li"},{name:"Sri Lanka",flag:"flag-lk"},{name:"Liberia",flag:"flag-lr"},{name:"Lesotho",flag:"flag-ls"},{name:"Lithuania",flag:"flag-lt"},{name:"Luxembourg",flag:"flag-lu"},{name:"Latvia",flag:"flag-lv"},{name:"Libya",flag:"flag-ly"},{name:"Morocco",flag:"flag-ma"},{name:"Monaco",flag:"flag-mc"},{name:"Moldova, Republic of",flag:"flag-md"},{name:"Montenegro",flag:"flag-me"},{name:"Saint Martin (French part)",flag:"flag-mf"},{name:"Madagascar",flag:"flag-mg"},{name:"Marshall Islands",flag:"flag-mh"},{name:"Macedonia, the former Yugoslav Republic of",flag:"flag-mk"},{name:"Mali",flag:"flag-ml"},{name:"Myanmar",flag:"flag-mm"},{name:"Mongolia",flag:"flag-mn"},{name:"Macao",flag:"flag-mo"},{name:"Northern Mariana Islands",flag:"flag-mp"},{name:"Martinique",flag:"flag-mq"},{name:"Mauritania",flag:"flag-mr"},{name:"Montserrat",flag:"flag-ms"},{name:"Malta",flag:"flag-mt"},{name:"Mauritius",flag:"flag-mu"},{name:"Maldives",flag:"flag-mv"},{name:"Malawi",flag:"flag-mw"},{name:"Mexico",flag:"flag-mx"},{name:"Malaysia",flag:"flag-my"},{name:"Mozambique",flag:"flag-mz"},{name:"Namibia",flag:"flag-na"},{name:"New Caledonia",flag:"flag-nc"},{name:"Niger",flag:"flag-ne"},{name:"Norfolk Island",flag:"flag-nf"},{name:"Nigeria",flag:"flag-ng"},{name:"Nicaragua",flag:"flag-ni"},{name:"Netherlands",flag:"flag-nl"},{name:"Norway",flag:"flag-no"},{name:"Nepal",flag:"flag-np"},{name:"Nauru",flag:"flag-nr"},{name:"Niue",flag:"flag-nu"},{name:"New Zealand",flag:"flag-nz"},{name:"Oman",flag:"flag-om"},{name:"Panama",flag:"flag-pa"},{name:"Peru",flag:"flag-pe"},{name:"French Polynesia",flag:"flag-pf"},{name:"Papua New Guinea",flag:"flag-pg"},{name:"Philippines",flag:"flag-ph"},{name:"Pakistan",flag:"flag-pk"},{name:"Poland",flag:"flag-pl"},{name:"Saint Pierre and Miquelon",flag:"flag-pm"},{name:"Pitcairn",flag:"flag-pn"},{name:"Puerto Rico",flag:"flag-pr"},{name:"Palestine, State of",flag:"flag-ps"},{name:"Portugal",flag:"flag-pt"},{name:"Palau",flag:"flag-pw"},{name:"Paraguay",flag:"flag-py"},{name:"Qatar",flag:"flag-qa"},{name:"Réunion",flag:"flag-re"},{name:"Romania",flag:"flag-ro"},{name:"Serbia",flag:"flag-rs"},{name:"Russian Federation",flag:"flag-ru"},{name:"Rwanda",flag:"flag-rw"},{name:"Saudi Arabia",flag:"flag-sa"},{name:"Solomon Islands",flag:"flag-sb"},{name:"Seychelles",flag:"flag-sc"},{name:"Sudan",flag:"flag-sd"},{name:"Sweden",flag:"flag-se"},{name:"Singapore",flag:"flag-sg"},{name:"Saint Helena, Ascension and Tristan da Cunha",flag:"flag-sh"},{name:"Slovenia",flag:"flag-si"},{name:"Svalbard and Jan Mayen",flag:"flag-sj"},{name:"Slovakia",flag:"flag-sk"},{name:"Sierra Leone",flag:"flag-sl"},{name:"San Marino",flag:"flag-sm"},{name:"Senegal",flag:"flag-sn"},{name:"Somalia",flag:"flag-so"},{name:"Suriname",flag:"flag-sr"},{name:"South Sudan",flag:"flag-ss"},{name:"Sao Tome and Principe",flag:"flag-st"},{name:"El Salvador",flag:"flag-sv"},{name:"Sint Maarten (Dutch part)",flag:"flag-sx"},{name:"Syrian Arab Republic",flag:"flag-sy"},{name:"Swaziland",flag:"flag-sz"},{name:"Turks and Caicos Islands",flag:"flag-tc"},{name:"Chad",flag:"flag-td"},{name:"French Southern Territories",flag:"flag-tf"},{name:"Togo",flag:"flag-tg"},{name:"Thailand",flag:"flag-th"},{name:"Tajikistan",flag:"flag-tj"},{name:"Tokelau",flag:"flag-tk"},{name:"Timor-Leste",flag:"flag-tl"},{name:"Turkmenistan",flag:"flag-tm"},{name:"Tunisia",flag:"flag-tn"},{name:"Tonga",flag:"flag-to"},{name:"Turkey",flag:"flag-tr"},{name:"Trinidad and Tobago",flag:"flag-tt"},{name:"Tuvalu",flag:"flag-tv"},{name:"Taiwan, Province of China",flag:"flag-tw"},{name:"Tanzania, United Republic of",flag:"flag-tz"},{name:"Ukraine",flag:"flag-ua"},{name:"Uganda",flag:"flag-ug"},{name:"United States Minor Outlying Islands",flag:"flag-um"},{name:"United States of America",flag:"flag-us"},{name:"Uruguay",flag:"flag-uy"},{name:"Uzbekistan",flag:"flag-uz"},{name:"Holy See",flag:"flag-va"},{name:"Saint Vincent and the Grenadines",flag:"flag-vc"},{name:"Venezuela, Bolivarian Republic of",flag:"flag-ve"},{name:"Virgin Islands, British",flag:"flag-vg"},{name:"Virgin Islands, U.S.",flag:"flag-vi"},{name:"Viet Nam",flag:"flag-vn"},{name:"Vanuatu",flag:"flag-vu"},{name:"Wallis and Futuna",flag:"flag-wf"},{name:"Samoa",flag:"flag-ws"},{name:"Yemen",flag:"flag-ye"},{name:"Mayotte",flag:"flag-yt"},{name:"South Africa",flag:"flag-za"},{name:"Zambia",flag:"flag-zm"},{name:"Zimbabwe",flag:"flag-zw"}].filter(function(e){return-1!=e.name.toLowerCase().indexOf(a.toLowerCase())})}}]),angular.module("app").controller("SkillsCtrl",["$scope","$window",function(a,e){a.selectedSkill=0,a.skillsVisible=!1,a.labels=["Download Sales","In-Store Sales","Mail-Order Sales"],a.data=[300,500,100],$.getJSON("/skills.json",function(e){a.skills=e.filter(function(e){return e.enabled}),a.setSelectedSkill=function(e){a.selectedSkill=e,a.selectedSkill.chartOptions={cutoutPercentage:80,circumference:2*Math.PI,maintainAspectRatio:!0,tooltips:{enabled:!1}},a.selectedSkill.chartStyle={"background-image":"url(/skills/"+a.selectedSkill.image+")","background-repeat":"no-repeat","background-size":"60%","background-position":"50% 50%"}},a.setSelectedSkill(a.skills[0]),a.$apply()})}]),angular.module("app").controller("WorkoutCtrl",["$scope",function(n){n.timeRemaining=0;var t,l=[{name:"Jumping Jacks",split:n.rest=!1},{name:"Wall Sit",split:!1},{name:"Push-Up",split:!1},{name:"Crunch",split:!1},{name:"Step-Up",split:!0},{name:"Squat",split:!1},{name:"Triceps Dip",split:!1},{name:"Plank",split:!1},{name:"High Knees",split:!1},{name:"Lunge",split:!1},{name:"Push-Up with Rotation",split:!1},{name:"Side Plank",split:!0}];n.workout=function(){n.timeRemaining?(clearInterval(t),n.timer="",n.timeRemaining=0,n.rest=!1,n.exercise={name:"",split:!1}):(n.timeRemaining=45*l.length,t=setInterval(function(){if(n.timeRemaining--,0===n.timeRemaining)return n.exercise={name:"Finished! Congrats!",split:!1},n.timer="",n.timeRemaining=0,n.rest=!1,n.$apply(),clearInterval(t);var e=Math.floor(n.timeRemaining/45),a=n.timeRemaining-45*e;n.timer=30<a?a-30:a,n.rest=30<a,n.exercise=l[l.length-e-1],n.$apply()},1e3))}}]),angular.module("app").service("CategoriesSvc",["$http",function(n){var l=this;l.getCategories=function(){return n.get("/api/categories")},l.getTasks=function(e){return n.get("/api/categories/"+e)},l.addCategory=function(e){return n.post("/api/categories/",e)},l.addTask=function(e,a){return n.post("/api/categories/"+e+"/tasks",a)},l.setPriorityList=function(e){l.choices=e,l.priorityList=[];for(var a=0;a<e.length;a++)for(var n=a+1;n<e.length;n++){var t=Math.round(Math.random());l.priorityList.push({id:0,firstChoice:e[0===t?a:n].name,secondChoice:e[0===t?n:a].name,choice:""})}!function(e){var a,n,t=e.length;for(;t;)n=Math.floor(Math.random()*t--),e[t].firstChoice,a=e[t],e[t]=e[n],e[n]=a}(l.priorityList);for(a=0;a<l.priorityList.length;a++)l.priorityList[a].id=a+1},l.getPriorityList=function(e){return l.priorityList}}]),angular.module("app").service("EmailSvc",["$http",function(a){this.send=function(e){return console.log(e),a.post("/api/email",e)}}]),angular.module("app").service("LanguageSvc",function(){var a=this;a.languages=[{code:"EN",name:"English",flag:"flag-icon-gb"},{code:"NL",name:"Nederlands",flag:"flag-icon-nl"},{code:"FR",name:"Français",flag:"flag-icon-fr"}],a.text=[{code:"EN"},{code:"NL"},{code:"FR"}],a.selectedLanguage=a.languages[0],a.setLanguage=function(e){return a.selectedLanguage=e},a.getLanguage=function(){return a.selectedLanguage}}),angular.module("app").service("PostsSvc",["$http",function(a){this.fetch=function(){return a.get("/api/posts")},this.create=function(e){return a.post("/api/posts",e)},this.getPost=function(e){return a.get("/api/posts/"+e._id)}}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users")},n.setToken=function(e){return t.defaults.headers.common["X-Auth"]=e,n.getUser()},n.authenticate=function(e){return t.post("/api/users/authenticate",{user:e}).then(function(e){return window.localStorage.token=e.data,n.setToken(e.data)})},n.login=function(e){return t.get("/api/users/"+e+"/login").then(function(e){return window.localStorage.token=e.data,n.setToken(e.data)})},n.updateUser=function(e){return t.post("/api/users/"+e._id,{user:e}).then(function(){return n.getUser()})},n.checkPassword=function(e,a){return t.post("/api/users/"+e+"/verification",{password:a})},n.changePassword=function(e,a,n){return t.post("/api/users/"+e+"/password",{oldPassword:a,newPassword:n})},n.changeUsername=function(e,a){return t.post("/api/users/"+e+"/username",{newUsername:a}).then(function(){return n.getUser()})},n.logout=function(){window.localStorage.clear(),t.defaults.headers.common["X-Auth"]=""},n.createUser=function(e,a){return t.post("/api/users",{username:e,password:a}).then(function(){return n.login(e,a)})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
