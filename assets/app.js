angular.module("app",["ui.router","ui.bootstrap","ngAnimate","ngSanitize","ngDragDrop","ngTagsInput","vcRecaptcha","chart.js"]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(a,e,n){e.otherwise("/home"),a.state("home",{url:"/home",templateUrl:"/home.html"}).state("policy",{url:"/policy",templateUrl:"/policy.html"}).state("print",{url:"/print",templateUrl:"/print.html"}).state("experience",{url:"/experience",controller:"ExperienceCtrl",templateUrl:"/experience.html"}).state("skills",{url:"/skills",controller:"SkillsCtrl",templateUrl:"/skills.html"}).state("hobbies",{url:"/hobbies",controller:"HobbiesCtrl",templateUrl:"/hobbies.html"}).state("contact",{url:"/contact",controller:"ContactCtrl",templateUrl:"/contact.html"}).state("workout",{url:"/workout",controller:"WorkoutCtrl",templateUrl:"/workout.html"}).state("top-priority",{url:"/top-priority",controller:"TopPriorityCtrl",templateUrl:"/top-priority.html"}).state("posts",{url:"/posts",controller:"PostsCtrl",templateUrl:"/posts.html"}).state("profile",{url:"/profile",controller:"ProfileCtrl",templateUrl:"/profile.html"}),n.html5Mode({enabled:!0,requireBase:!1})}]),angular.module("app").service("WebSocketSvc",["$rootScope","$timeout",function(n,e){var t,l=function(){(t=new WebSocket("https:"===window.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host)).onopen=function(){console.log("Websocket connected")},t.onclose=function(a){console.log("Websocket closed. Reconnecting..."),e(l,1e3)},t.onerror=function(a){console.log("Error: "+a+" - State: "+t.readyState)},t.onmessage=function(a){var e=JSON.parse(a.data);n.$broadcast("ws:"+e.topic,e.data)}};this.send=function(a,e){var n=JSON.stringify({topic:a,data:e});t.send(n)},this.connect=l}]).run(["WebSocketSvc",function(a){a.connect()}]),angular.module("app").controller("AppCtrl",["$scope","$location","LanguageSvc","UserSvc",function(n,a,e,t){console.log("%cYou sneaky bugger!","font: 2em sans-serif; color: DodgerBlue; text-shadow: 2px 0 0 #444, -2px 0 0 #444, 0 2px 0 #444, 0 -2px 0 #444, 1px 1px #444, -1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444;"),console.log("I'm glad you're curious whether something is popping up in here. I'm a bit of a stickler when it comes to messages in the console so I try to make sure only things I want are visible. That being said, if there is a big error here, I would really appreciate you telling me so I can get rid of it!"),console.log("The code for my resume is hosted on Github if you really want to go into all this! => https://github.com/FlandersBurger/resume"),$(window).load(function(){$(".loading").fadeOut("slow"),$(".content").fadeIn("slow")}),n.themeCounter=6,n.today=new Date,n.year=n.today.getFullYear(),n.random=Math.floor(1e6*Math.random()),n.flipTheme=function(){$(".loading").show(),$(".content").hide(),setTimeout(function(){$(".loading").fadeOut("slow"),$(".content").fadeIn("slow")},800),n.themeCounter=n.themeCounter<6?n.themeCounter+1:n.themeCounter=1},$.getJSON("/skills.json",function(a){n.skills=a.filter(function(a){return a.enabled})}),$.getJSON("/hobbies.json",function(a){n.hobbies=a}),$.getJSON("/experience.json",function(a){n.jobs=a,n.jobs.forEach(function(a){a.startDate=new Date(a.startDate),a.endDate&&(a.endDate=new Date(a.endDate))})}),n.getTimeSpan=function(a){return a.startDate.getFullYear()+(a.endDate?" - "+a.endDate.getFullYear():" - Today")},n.languages=e.languages,n.selectedLanguage=e.getLanguage(),n.selectLanguage=function(a){n.selectedLanguage=e.setLanguage(a)},n.hoverdiv=function(a,e){var n=a.clientX+"px",t=a.clientY+20+"px";document.getElementById(e);return $("#"+e).css("left",n),$("#"+e).css("top",t),$("#"+e).toggle(),!1},n.socialMedia=[{name:"linkedin",url:"https://www.linkedin.com/in/laurent-debacker-1633a916",icon:"fa-linkedin"},{name:"github",url:"https://github.com/FlandersBurger",icon:"fa-github"},{name:"jsfiddle",url:"https://jsfiddle.net/user/BelgoCanadian/fiddles/",icon:"fa-jsfiddle"},{name:"stackoverflow",url:"http://stackoverflow.com/users/1083923/belgocanadian",icon:"fa-stack-overflow"}],window.localStorage.user&&t.login(window.localStorage.user).then(function(a){n.loggedIn=!0,n.currentUser=a.data}),n.$on("login",function(a,e){window.localStorage.user=e._id,n.loggedIn=!0,n.currentUser=e}),n.$on("update",function(a,e){n.currentUser=e,n.currentUser.birthDate=new Date(n.currentUser.birthDate),n.loading=!1,setTimeout(function(){$("#loading-icon").fadeOut("slow")},1e3)}),n.$on("loading",function(a,e){n.loading=!0,$("#loading-icon").show()}),n.$on("loaded",function(a,e){n.loading=!1,setTimeout(function(){$("#loading-icon").fadeOut("slow")},1e3)}),n.logout=function(){firebase.auth().signOut().then(function(){n.loggedIn=!1,window.localStorage.clear(),n.$broadcast("logout")}).catch(function(a){})}}]),angular.module("app").controller("ContactCtrl",["$scope","EmailSvc",function(e,a){e.options=[{name:"Spam",text:"I am a spam bot and automatically check the first option I find!"},{name:"Opportunitiy",text:"You seem to have the skills I seek, I'd like to talk about some opportunities."},{name:"Resume",text:"I dig the resume, how did you make it?"},{name:"Other",text:"Sumtin else!"}],e.contact={email:"",name:"",phone:"",about:"",message:""},e.send=function(){e.sending=!0,console.log("here"),a.send({email:e.contact.email,name:e.contact.name,phone:e.contact.phone,about:e.contact.about,message:e.contact.message}).then(function(a){e.sent=!0,console.log("SUCCESS. status=%d, text=%s",a.status,a.text),console.log(a)},function(a){e.sending=!1,console.log("FAILED. error=",a)})}}]),angular.module("app").controller("ExperienceCtrl",["$scope",function(a){a.getSkill=function(e){if(a.skills)return a.skills.find(function(a){return a.code===e})}}]),angular.module("app").controller("HobbiesCtrl",["$scope","$window",function(e,a){e.hobbySelectorVisible=!1,$.getJSON("https://www.reddit.com/user/belgocanadian/about/.json",function(a){}),e.selectedHobby=e.hobbies[0],e.selectHobby=function(a){e.selectedHobby=a,e.hobbySelectorVisible=!1},e.showHobby=function(a,e,n){return!!a.images&&0<a.images.length}}]),angular.module("app").controller("ListsCtrl",["$scope","$location","CategoriesSvc",function(t,a,l){t.showCategory=!0,t.init=function(){l.getCategories().success(function(a){t.categories=a,t.tasks=[];for(var e=0;e<t.categories.length;e++)for(var n=0;n<t.categories[e].tasks.length;n++)t.tasks.push({category:t.categories[e].name,task:t.categories[e].tasks[n].name})})},t.selectCategory=function(a){t.selectedCategory=a,t.selectedTasks=[],t.selectableTasks=[];for(var e=0;e<t.selectedCategory.tasks.length;e++)t.selectableTasks.push(t.selectedCategory.tasks[e]);t.showCategory=!1,t.enteredCategory=null},t.newCategory=function(a){for(var e=!1,n=0;n<t.categories.length;n++)t.categories[n].name===a&&(t.selectCategory(t.categories[n]),e=!0);e||l.addCategory({category:a}).success(function(a){t.init(),t.selectCategory(a)}),t.enteredCategory=null},t.newTask=function(a){for(var e=!1,n=0;n<t.selectedCategory.tasks.length;n++)t.selectedCategory.tasks[n].name===a&&(e=!0,t.selectTask(t.selectedCategory.tasks[n]));e||l.addTask(t.selectedCategory.name,{task:a}).success(function(){t.selectedCategory.tasks.push({name:a}),t.addTask(t.selectedTasks,t.selectedCategory.tasks[t.selectedCategory.tasks.length-1])}),t.enteredTask=null},t.selectTask=function(a){t.addTask(t.selectedTasks,a),t.removeTask(t.selectableTasks,a),t.enteredTask=null},t.unselectTask=function(a){t.addTask(t.selectableTasks,a),t.removeTask(t.selectedTasks,a)},t.addTask=function(a,e){a.push(e)},t.removeTask=function(a,e){a.splice(a.indexOf(e),1)},t.startPrioritizing=function(){l.setPriorityList(t.selectedTasks),a.path("/prioritize")},t.getQuestions=function(){if(!t.selectedTasks)return"";for(var a=0,e=t.selectedTasks.length-1;0<e;e--)a+=e;return a}}]),angular.module("app").controller("LoginCtrl",["$scope","$location","UserSvc",function(t,l,o){var e=new firebaseui.auth.AuthUI(firebase.auth());function n(){e.start("#firebaseui-auth-container",{callbacks:{signInSuccess:function(e,a,n){return firebase.auth().currentUser.getIdToken(!0).then(function(a){o.authenticate({displayName:e.displayName,email:e.email,photoURL:e.photoURL,emailVerified:e.emailVerified,idToken:a}).then(function(a){t.$emit("login",a.data),$("#modal-login").modal("hide"),l.path("/")},function(){t.$emit("popup",{message:"Login Failed",type:"alert-danger"})})}).catch(function(a){}),!1},signInFailure:function(a){if("firebaseui/anonymous-upgrade-merge-conflict"!=a.code)return Promise.resolve();var e=a.credential;return firebase.auth().signInWithCredential(e)},uiShown:function(){document.getElementById("loader").style.display="none"}},signInSuccessUrl:"/home",signInOptions:[firebase.auth.GoogleAuthProvider.PROVIDER_ID,firebase.auth.FacebookAuthProvider.PROVIDER_ID],signInFlow:"popup"})}t.$on("logout",function(a){e.reset(),n()}),n()}]),angular.module("app").controller("PostsCtrl",["$scope","$filter","PostsSvc",function(n,a,t){n.addPost=function(){n.postBody&&t.create({body:n.postBody}).success(function(a){n.postBody=null})},t.fetch().success(function(a){n.posts=a,n.filteredPosts=a}),n.$on("ws:new_post",function(a,e){n.$apply(function(){t.getPost(e).then(function(a){n.posts.unshift(a.data)})})})}]),angular.module("app").controller("ProfileCtrl",["$scope","$location","UserSvc",function(o,a,i){o.currentUser?($("#sex-indicator").offset({left:o.currentUser.gender.sex/200*$("#sex").width()+$("#sex").offset().left}),$("#identity-indicator").offset({left:o.currentUser.gender.identity/200*$("#identity").width()+$("#identity").offset().left})):a.path("/"),o.sexes=["Male","FtM Male","Intersex","MtF Female","Female"],o.identities=["Man","Bigender","Pangender","Agender","Polygender","Genderfluid","Genderqueer","Queer","Woman"],o.dateOptions={maxDate:new Date,minDate:new Date(1900,1,1),initDate:new Date(2e3,1,1),datepickerMode:"year"},o.gender=function(a,e){return a[Math.round(e/200*(a.length-1))]},o.startSlider=function(){},o.dragSlider=function(a,e,n){o.currentUser.gender[n]=Math.round(($("#"+n+"-indicator").offset().left-$("#"+n).offset().left)/($("#"+n).width()-$("#"+n+"-indicator").width())*200),o.$apply()},o.stopSlider=function(){},o.usernameToggle=!0,o.passwordToggle=!0,o.toggleUsername=function(){o.usernameToggle=!o.usernameToggle,o.newUsername=o.currentUser.username},o.togglePassword=function(){o.newPassword=null,o.confirmPassword=null,o.passwordToggle=!o.passwordToggle},o.checkPassword=function(a){if(a){var e=o.currentUser._id;i.checkPassword(e,a).then(function(a){o.togglePassword()},function(){var a=$(".password").css("backgroundColor");$(".password").animate({backgroundColor:"#FFB6C1"},200).animate({backgroundColor:a},200)})}},o.changePassword=function(a,e,n){if(e)if(e==n){var t=o.currentUser._id;i.changePassword(t,a,e).then(function(a){o.$emit("popup",{message:"Password Changed",type:"alert-success"}),o.oldPassword=null,o.togglePassword()},function(){o.$emit("popup",{message:"Password Change Failed",type:"alert-danger"})})}else{var l=$(".password").css("backgroundColor");$(".password").animate({backgroundColor:"#FFB6C1"},200).animate({backgroundColor:l},200)}},o.changeUsername=function(e){o.$emit("loading"),i.changeUsername(o.currentUser._id,e).then(function(a){o.$emit("update",a.data)},function(a){o.$emit("popup",{message:e+" already in use",type:"alert-danger"})})},o.updateUser=function(){o.currentUser&&(o.$emit("loading"),i.updateUser(o.currentUser).then(function(a){o.$emit("update",a.data)}))},o.$watch("currentUser.flags.length",function(a){o.updateUser()}),o.loadCountries=function(e){return[{name:"Andorra",flag:"flag-ad",tidbit:""},{name:"United Arab Emirates",flag:"flag-ae"},{name:"Afghanistan",flag:"flag-af"},{name:"Antigua and Barbuda",flag:"flag-ag"},{name:"Anguilla",flag:"flag-ai"},{name:"Albania",flag:"flag-al"},{name:"Armenia",flag:"flag-am"},{name:"Angola",flag:"flag-ao"},{name:"Antarctica",flag:"flag-aq"},{name:"Argentina",flag:"flag-ar"},{name:"American Somoa",flag:"flag-as"},{name:"Austria",flag:"flag-at"},{name:"Australia",flag:"flag-au"},{name:"Aruba",flag:"flag-aw"},{name:"Åland Islands",flag:"flag-ax"},{name:"Azerbaijan",flag:"flag-az"},{name:"Bosnia and Herzegovina",flag:"flag-ba"},{name:"Barbados",flag:"flag-bb"},{name:"Bangladesh",flag:"flag-bd"},{name:"Belgium",flag:"flag-be"},{name:"Burkina Faso",flag:"flag-bf"},{name:"Bulgaria",flag:"flag-bg"},{name:"Bahrain",flag:"flag-bh"},{name:"Burundi",flag:"flag-bi"},{name:"Benin",flag:"flag-bj"},{name:"Saint Barthélemy",flag:"flag-bl"},{name:"Bermuda",flag:"flag-bm"},{name:"Brunei ",flag:"flag-bn"},{name:"Bolivia, Plurinational State of",flag:"flag-bo"},{name:"Bonaire, Sint Eustatius and Saba",flag:"flag-bq"},{name:"Brazil",flag:"flag-br"},{name:"Bahamas",flag:"flag-bs"},{name:"Bhutan",flag:"flag-bt"},{name:"Bouvet Island",flag:"flag-bv"},{name:"Botswana",flag:"flag-bw"},{name:"Belarus",flag:"flag-by"},{name:"Belize",flag:"flag-bz"},{name:"Canada",flag:"flag-ca"},{name:"Cocos (Keeling) Islands",flag:"flag-cc"},{name:"Congo, the Democratic Republic of the",flag:"flag-cd"},{name:"Central African Republic",flag:"flag-cf"},{name:"Congo",flag:"flag-cg"},{name:"Switzerland",flag:"flag-ch"},{name:"Côte d'Ivoire",flag:"flag-ci"},{name:"Cook Islands",flag:"flag-ck"},{name:"Chile",flag:"flag-cl"},{name:"Cameroon",flag:"flag-cm"},{name:"China",flag:"flag-cn"},{name:"Colombia",flag:"flag-co"},{name:"Costa Rica",flag:"flag-cr"},{name:"Cuba",flag:"flag-cu"},{name:"Cabo Verde",flag:"flag-cv"},{name:"Curaçao",flag:"flag-cw"},{name:"Christmas Island",flag:"flag-cx"},{name:"Cyprus",flag:"flag-cy"},{name:"Czech Republic",flag:"flag-cz"},{name:"Germany",flag:"flag-de"},{name:"Djibouti",flag:"flag-dj"},{name:"Denmark",flag:"flag-dk"},{name:"Dominica",flag:"flag-dm"},{name:"Dominican Republic",flag:"flag-do"},{name:"Algeria",flag:"flag-dz"},{name:"Ecuador",flag:"flag-ec"},{name:"Estonia",flag:"flag-ee"},{name:"Egypt",flag:"flag-eg"},{name:"Western Sahara",flag:"flag-eh"},{name:"Eritrea",flag:"flag-er"},{name:"Spain",flag:"flag-es"},{name:"Ethiopia",flag:"flag-et"},{name:"Finland",flag:"flag-fi"},{name:"Fiji",flag:"flag-fj"},{name:"Falkland Islands (Malvinas)",flag:"flag-fk"},{name:"Micronesia, Federated States of",flag:"flag-fm"},{name:"Faroe Islands",flag:"flag-fo"},{name:"France",flag:"flag-fr"},{name:"Gabon",flag:"flag-ga"},{name:"United Kingdom of Great Britain and Northern Ireland",flag:"flag-gb"},{name:"Grenada",flag:"flag-gd"},{name:"Georgia",flag:"flag-ge"},{name:"French Guiana",flag:"flag-gf"},{name:"Guernsey",flag:"flag-gg"},{name:"Ghana",flag:"flag-gh"},{name:"Gibraltar",flag:"flag-gi"},{name:"Greenland",flag:"flag-gl"},{name:"Gambia",flag:"flag-gm"},{name:"Guinea",flag:"flag-gn"},{name:"Guadeloupe",flag:"flag-gp"},{name:"Equatorial Guinea",flag:"flag-gq"},{name:"Greece",flag:"flag-gr"},{name:"South Georgia and the South Sandwich Islands",flag:"flag-gs"},{name:"Guatemala",flag:"flag-gt"},{name:"Guam",flag:"flag-gu"},{name:"Guinea-Bissau",flag:"flag-gw"},{name:"Guyana",flag:"flag-gy"},{name:"Hong Kong",flag:"flag-hk"},{name:"Heard Island and McDonald Islands",flag:"flag-hm"},{name:"Honduras",flag:"flag-hn"},{name:"Croatia",flag:"flag-hr"},{name:"Haiti",flag:"flag-ht"},{name:"Hungary",flag:"flag-hu"},{name:"Indonesia",flag:"flag-id"},{name:"Ireland",flag:"flag-ie"},{name:"Israel",flag:"flag-il"},{name:"Isle of Man",flag:"flag-im"},{name:"India",flag:"flag-in"},{name:"British Indian Ocean Territory",flag:"flag-io"},{name:"Iraq",flag:"flag-iq"},{name:"Iran, Islamic Republic of",flag:"flag-ir"},{name:"Iceland",flag:"flag-is"},{name:"Italy",flag:"flag-it"},{name:"Jersey",flag:"flag-je"},{name:"Jamaica",flag:"flag-jm"},{name:"Jordan",flag:"flag-jo"},{name:"Japan",flag:"flag-jp"},{name:"Kenya",flag:"flag-ke"},{name:"Kyrgyzstan",flag:"flag-kg"},{name:"Cambodia",flag:"flag-kh"},{name:"Kiribati",flag:"flag-ki"},{name:"Comoros",flag:"flag-km"},{name:"Saint Kitts and Nevis",flag:"flag-kn"},{name:"Korea, Democratic People's Republic of",flag:"flag-kp"},{name:"Korea, Republic of",flag:"flag-kr"},{name:"Kuwait",flag:"flag-kw"},{name:"Cayman Islands",flag:"flag-ky"},{name:"Kazakhstan",flag:"flag-kz"},{name:"Lao People's Democratic Republic",flag:"flag-la"},{name:"Lebanon",flag:"flag-lb"},{name:"Saint Lucia",flag:"flag-lc"},{name:"Liechtenstein",flag:"flag-li"},{name:"Sri Lanka",flag:"flag-lk"},{name:"Liberia",flag:"flag-lr"},{name:"Lesotho",flag:"flag-ls"},{name:"Lithuania",flag:"flag-lt"},{name:"Luxembourg",flag:"flag-lu"},{name:"Latvia",flag:"flag-lv"},{name:"Libya",flag:"flag-ly"},{name:"Morocco",flag:"flag-ma"},{name:"Monaco",flag:"flag-mc"},{name:"Moldova, Republic of",flag:"flag-md"},{name:"Montenegro",flag:"flag-me"},{name:"Saint Martin (French part)",flag:"flag-mf"},{name:"Madagascar",flag:"flag-mg"},{name:"Marshall Islands",flag:"flag-mh"},{name:"Macedonia, the former Yugoslav Republic of",flag:"flag-mk"},{name:"Mali",flag:"flag-ml"},{name:"Myanmar",flag:"flag-mm"},{name:"Mongolia",flag:"flag-mn"},{name:"Macao",flag:"flag-mo"},{name:"Northern Mariana Islands",flag:"flag-mp"},{name:"Martinique",flag:"flag-mq"},{name:"Mauritania",flag:"flag-mr"},{name:"Montserrat",flag:"flag-ms"},{name:"Malta",flag:"flag-mt"},{name:"Mauritius",flag:"flag-mu"},{name:"Maldives",flag:"flag-mv"},{name:"Malawi",flag:"flag-mw"},{name:"Mexico",flag:"flag-mx"},{name:"Malaysia",flag:"flag-my"},{name:"Mozambique",flag:"flag-mz"},{name:"Namibia",flag:"flag-na"},{name:"New Caledonia",flag:"flag-nc"},{name:"Niger",flag:"flag-ne"},{name:"Norfolk Island",flag:"flag-nf"},{name:"Nigeria",flag:"flag-ng"},{name:"Nicaragua",flag:"flag-ni"},{name:"Netherlands",flag:"flag-nl"},{name:"Norway",flag:"flag-no"},{name:"Nepal",flag:"flag-np"},{name:"Nauru",flag:"flag-nr"},{name:"Niue",flag:"flag-nu"},{name:"New Zealand",flag:"flag-nz"},{name:"Oman",flag:"flag-om"},{name:"Panama",flag:"flag-pa"},{name:"Peru",flag:"flag-pe"},{name:"French Polynesia",flag:"flag-pf"},{name:"Papua New Guinea",flag:"flag-pg"},{name:"Philippines",flag:"flag-ph"},{name:"Pakistan",flag:"flag-pk"},{name:"Poland",flag:"flag-pl"},{name:"Saint Pierre and Miquelon",flag:"flag-pm"},{name:"Pitcairn",flag:"flag-pn"},{name:"Puerto Rico",flag:"flag-pr"},{name:"Palestine, State of",flag:"flag-ps"},{name:"Portugal",flag:"flag-pt"},{name:"Palau",flag:"flag-pw"},{name:"Paraguay",flag:"flag-py"},{name:"Qatar",flag:"flag-qa"},{name:"Réunion",flag:"flag-re"},{name:"Romania",flag:"flag-ro"},{name:"Serbia",flag:"flag-rs"},{name:"Russian Federation",flag:"flag-ru"},{name:"Rwanda",flag:"flag-rw"},{name:"Saudi Arabia",flag:"flag-sa"},{name:"Solomon Islands",flag:"flag-sb"},{name:"Seychelles",flag:"flag-sc"},{name:"Sudan",flag:"flag-sd"},{name:"Sweden",flag:"flag-se"},{name:"Singapore",flag:"flag-sg"},{name:"Saint Helena, Ascension and Tristan da Cunha",flag:"flag-sh"},{name:"Slovenia",flag:"flag-si"},{name:"Svalbard and Jan Mayen",flag:"flag-sj"},{name:"Slovakia",flag:"flag-sk"},{name:"Sierra Leone",flag:"flag-sl"},{name:"San Marino",flag:"flag-sm"},{name:"Senegal",flag:"flag-sn"},{name:"Somalia",flag:"flag-so"},{name:"Suriname",flag:"flag-sr"},{name:"South Sudan",flag:"flag-ss"},{name:"Sao Tome and Principe",flag:"flag-st"},{name:"El Salvador",flag:"flag-sv"},{name:"Sint Maarten (Dutch part)",flag:"flag-sx"},{name:"Syrian Arab Republic",flag:"flag-sy"},{name:"Swaziland",flag:"flag-sz"},{name:"Turks and Caicos Islands",flag:"flag-tc"},{name:"Chad",flag:"flag-td"},{name:"French Southern Territories",flag:"flag-tf"},{name:"Togo",flag:"flag-tg"},{name:"Thailand",flag:"flag-th"},{name:"Tajikistan",flag:"flag-tj"},{name:"Tokelau",flag:"flag-tk"},{name:"Timor-Leste",flag:"flag-tl"},{name:"Turkmenistan",flag:"flag-tm"},{name:"Tunisia",flag:"flag-tn"},{name:"Tonga",flag:"flag-to"},{name:"Turkey",flag:"flag-tr"},{name:"Trinidad and Tobago",flag:"flag-tt"},{name:"Tuvalu",flag:"flag-tv"},{name:"Taiwan, Province of China",flag:"flag-tw"},{name:"Tanzania, United Republic of",flag:"flag-tz"},{name:"Ukraine",flag:"flag-ua"},{name:"Uganda",flag:"flag-ug"},{name:"United States Minor Outlying Islands",flag:"flag-um"},{name:"United States of America",flag:"flag-us"},{name:"Uruguay",flag:"flag-uy"},{name:"Uzbekistan",flag:"flag-uz"},{name:"Holy See",flag:"flag-va"},{name:"Saint Vincent and the Grenadines",flag:"flag-vc"},{name:"Venezuela, Bolivarian Republic of",flag:"flag-ve"},{name:"Virgin Islands, British",flag:"flag-vg"},{name:"Virgin Islands, U.S.",flag:"flag-vi"},{name:"Viet Nam",flag:"flag-vn"},{name:"Vanuatu",flag:"flag-vu"},{name:"Wallis and Futuna",flag:"flag-wf"},{name:"Samoa",flag:"flag-ws"},{name:"Yemen",flag:"flag-ye"},{name:"Mayotte",flag:"flag-yt"},{name:"South Africa",flag:"flag-za"},{name:"Zambia",flag:"flag-zm"},{name:"Zimbabwe",flag:"flag-zw"}].filter(function(a){return-1!=a.name.toLowerCase().indexOf(e.toLowerCase())})}}]),angular.module("app").controller("SkillsCtrl",["$scope","$window",function(e,a){e.selectedSkill=0,e.skillsVisible=!1,e.labels=["Download Sales","In-Store Sales","Mail-Order Sales"],e.data=[300,500,100],$.getJSON("/skills.json",function(a){e.skills=a.filter(function(a){return a.enabled}),e.setSelectedSkill=function(a){e.selectedSkill=a,e.selectedSkill.chartOptions={cutoutPercentage:80,circumference:2*Math.PI,maintainAspectRatio:!0,tooltips:{enabled:!1}},e.selectedSkill.chartStyle={"background-image":"url(/skills/"+e.selectedSkill.image+")","background-repeat":"no-repeat","background-size":"60%","background-position":"50% 50%"}},e.setSelectedSkill(e.skills[0]),e.$apply()})}]),angular.module("app").controller("TopPriorityCtrl",["$scope",function(l){var o,t,u,m=[],i=[],d=800,p=400,h=8,k=4;function n(a){this.score=0,this.name=a,this.choose=function(){this.score++}}function e(a){for(var e in this.tasks=[],a)this.tasks[e]=new n(a[e].item);this.choose=function(a){for(var e in this.tasks)this.tasks[e].name==a&&this.tasks[e].choose()}}function a(a,e){this.avatar=[a,e],this.name="",this.tasks=[],this.setTasks=function(a){for(var e=0;e<a.length;e++)this.tasks[e]=new n(a[e].name)},this.choose=function(a){for(var e in this.tasks)this.tasks[e].name==a&&this.tasks[e].choose()},this.score=function(a){for(var e in this.tasks)if(this.tasks[e].name==a)return this.tasks[e].score}}function r(){for(var a,e,n=!0;n;){n=!1,a=Math.floor(Math.random()*h),e=Math.floor(Math.random()*k);for(var t=0;t<m.length;t++)m[t].avatar[0]==a&&m[t].avatar[1]==e&&(n=!0)}s("#Avatar",a,e)}function s(a,e,n){$(a).css("background-position-x",d/h*-e),$(a).css("background-position-y",p/k*-n),i[0]=e,i[1]=n}l.defaultLists={blank:{caption:"Blank List",message:"What needs to be prioritized?",list:["","",""]},chores:{caption:"Chores",message:"What chores need to be done?",list:["Laundry","Dishes","Sweeping","Groceries","Tidy"]},restaurants:{caption:"Restaurants",message:"What do you want to eat?",list:["Chinese","Japanese","American","Indian","Greek","Italian","Korean","Thai","Vietnamese","Mexican"]},pokemon:{caption:"Pokemon",message:"Which do you gotta catch?",list:["Pikachu","Squirtle","Charmander","Bulbasaur","Pidgeotto","Snorlax"]},genres:{caption:"Movie Genres",message:"What shall we watch tonight?",list:["Comedy","Drama","Thriller","Action","Horror","Animated","Adventure","Documentary","Musical","Science Fiction"]}},l.list=[],l.choose_type=function(a){$("#TypeSection").hide(),l.list=l.defaultLists[a].list.map(function(a){return{item:a}}),$("#InputTitle").text(l.defaultLists[a].message),$("#InputSection").show()},l.removeListItem=function(a){l.list.splice(a,1)},l.addListItem=function(){l.list.push({item:""})},l.choose_avatar=function(){m[m.length]=new a(i[0],i[1]),m[m.length-1].setTasks(u.tasks),l.prioritize()},l.start=function(){l.list=l.list.filter(function(a){return a.item});var a=function(a){var e,n={};for(e in a){if(n[a[e].item])return a[e].item;n[a[e].item]=!0}return!0}(l.list);return l.list.length<2?(alert("Oi, there're 2 textboxes for a reason!"),l.choose_type("blank"),!1):!0!==a?(alert("Seems like you prefer "+a+"."),!1):($("#InputSection").hide(),m=[],u=new e(l.list),r(),$(".Top").slideDown("slow"),void $("#AvatarSection").fadeIn())},l.prioritize=function(){var a,e,n,t;for(t=0,n=u.tasks.length,o=[],$("#AvatarSection").hide(),a=0;a<n-1;a++)for(e=a+1;e<n;e++)o[t]=[],o[t][0]=u.tasks[a].name,o[t][1]=u.tasks[e].name,o[t][2]=0,t++;!function(a){var e,n,t=a.length;for(;0!==t;)n=Math.floor(Math.random()*t),e=a[t-=1],a[t]=a[n],a[n]=e}(o),l.new_choice(),$("#PrioritizeSection").fadeIn()},l.next_player=function(){$("#ResultSection").hide(),$("#btnMultiplayer").val("Final results"),r(),$("#AvatarSection").fadeIn()},l.multiplayer=function(){1===m.length?l.restart():l.final_results()},l.restart=function(){for($("#ResultSection").hide(),$("#FinalSection").hide(),$(".Top").slideUp(),$(".ListItem").val("");2<$(".ListItem").length;)$(".ListItem").last().parent().remove();$("#FinalResultList th").remove(),$("#FinalResultList tr").remove(),$("#btnMultiplayer").val("Restart"),$("#TypeSection").fadeIn(),$(".ListItem").first().focus()},l.new_choice=function(){var a,e;for(a=0;a<o.length;a++)if(0===o[a][2]){var n=Math.round(Math.random());return document.getElementById("choice1").value=o[a][n],document.getElementById("choice2").value=o[a][1-n],t=a,e=Math.round(100*a/o.length),$(".progress-bar").css("width",e+"%").attr("aria-valuenow",e),document.getElementById("ChoicesLeft").innerHTML=e+"%",!1}},l.choose=function(a){var e;u.choose(o[t][a]),m[m.length-1].choose(o[t][a]);var n=o[t][2]=1;for(e=0;e<o.length;e++)0===o[e][2]&&(n=0);1==n?function(){var a,e;for($(".progress-bar").css("width","100%").attr("aria-valuenow",100),document.getElementById("ChoicesLeft").innerHTML="100%",document.getElementById("ResultList").innerHTML="",$("#PrioritizeSection").hide(),e=m.length-1,m[e].tasks.sort(function(a,e){return e[0]-a[0]}),a=0;a<m[e].tasks.length;a++){var n=document.createElement("LI"),t=document.createTextNode(m[e].tasks[a].name+": "+m[e].tasks[a].score+" vote"+(1==m[e].tasks[a].score?"":"s"));n.appendChild(t),document.getElementById("ResultList").appendChild(n)}$("#ResultSection").fadeIn()}():l.new_choice()},l.final_results=function(){var a,e;$("#ResultSection").hide(),$(".Top").slideUp(),u.tasks.sort(function(a,e){return e[0]-a[0]});var n=document.createElement("THEAD"),t=document.createElement("TR");for(t.appendChild(document.createElement("TH")),a=0;a<m.length;a++){var l="th"+a,o=document.createElement("TH");o.setAttribute("id",l),o.style.backgroundImage="url('http://i.imgur.com/IcP5F1m.png')",o.style.width=50,o.style.height=65,o.style.backgroundPosition=-m[a].avatar[0]*(d/h)+"px "+-m[a].avatar[1]*(p/k)+"px",t.appendChild(o)}var i=document.createElement("TD");i.appendChild(document.createTextNode("Total")),i.style.height=65,t.appendChild(i),n.appendChild(t),document.getElementById("FinalResultList").appendChild(n);var r=document.createElement("TBODY");for(a=0;a<u.tasks.length;a++){var s=document.createElement("TR"),g=document.createElement("TD");for(g.appendChild(document.createTextNode(u.tasks[a].name)),s.appendChild(g),e=0;e<m.length;e++){var f=document.createElement("TD");f.appendChild(document.createTextNode(m[e].score(u.tasks[a].name))),s.appendChild(f)}var c=document.createElement("TD");c.appendChild(document.createTextNode(u.tasks[a].score)),s.appendChild(c),r.appendChild(s)}document.getElementById("FinalResultList").appendChild(r),$("#FinalSection").fadeIn()},$(document).ready(function(){$(".ListItem").first().focus(),$("#Avatars").click(function(a){$(this).offset();var e=document.getElementById("Avatars"),n=e.clientWidth,t=e.clientHeight,l=(a.pageX-$(this).offset().left)/n*d;l=Math.floor(l/(d/h));var o=(a.pageY-$(this).offset().top)/t*p;!function(a,e){for(var n=0;n<m.length;n++)if(m[n].avatar[0]==a&&m[n].avatar[1]==e)return alert("Copycat!"),r();s("#Avatar",a,e)}(l,o=Math.floor(o/(p/k)))})})}]),angular.module("app").controller("WorkoutCtrl",["$scope",function(n){n.timeRemaining=0;var t,l=[{name:"Jumping Jacks",split:n.rest=!1},{name:"Wall Sit",split:!1},{name:"Push-Up",split:!1},{name:"Crunch",split:!1},{name:"Step-Up",split:!0},{name:"Squat",split:!1},{name:"Triceps Dip",split:!1},{name:"Plank",split:!1},{name:"High Knees",split:!1},{name:"Lunge",split:!1},{name:"Push-Up with Rotation",split:!1},{name:"Side Plank",split:!0}];n.workout=function(){n.timeRemaining?(clearInterval(t),n.timer="",n.timeRemaining=0,n.rest=!1,n.exercise={name:"",split:!1}):(n.timeRemaining=45*l.length,t=setInterval(function(){if(n.timeRemaining--,0===n.timeRemaining)return n.exercise={name:"Finished! Congrats!",split:!1},n.timer="",n.timeRemaining=0,n.rest=!1,n.$apply(),clearInterval(t);var a=Math.floor(n.timeRemaining/45),e=n.timeRemaining-45*a;n.timer=30<e?e-30:e,n.rest=30<e,n.exercise=l[l.length-a-1],n.$apply()},1e3))}}]),angular.module("app").directive("head",["$rootScope","$state","$compile","$interpolate",function(n,i,t,l){var r=function(a){var e={href:a,rel:"stylesheet"};return e.href.match(/\.less$/)&&(e.rel="stylesheet/less"),e};return{restrict:"E",link:function(o,a){o.templateStyles=[];var e='<link ng-attr-rel="{{style.rel}}" ng-repeat="style in templateStyles" ng-href="{{style.href}}">';e=(e=e.replace(/\{\{/g,l.startSymbol())).replace(/\}\}/g,l.endSymbol()),a.append(t(e)(o)),n.$on("$stateChangeStart",function(a,e,n,t,l){o.templateStyles=function(a){for(var n={};""!==a.name;){var t=i.get("^",a);n[t.name]||(n[t.name]={}),a.templateStyleUrl&&(n[t.name][""]||(n[t.name][""]=r(a.templateStyleUrl))),a.views&&_.forEach(a.views,function(a,e){if(a.templateStyleUrl)return(e=e.split("@"))[1]?(n[e[1]]||(n[e[1]]={}),void(n[e[1]][e[0]]||(n[e[1]][e[0]]=r(a.templateStyleUrl)))):void(n[t.name][e[0]]=r(a.templateStyleUrl))}),a=t}var e=[];return _.forEach(n,function(a){_.forEach(a,function(a){_.includes(e,a)||e.push(a)})}),e.reverse(),e}(e)})}}}]),angular.module("app").service("CategoriesSvc",["$http",function(n){var l=this;l.getCategories=function(){return n.get("/api/categories")},l.getTasks=function(a){return n.get("/api/categories/"+a)},l.addCategory=function(a){return n.post("/api/categories/",a)},l.addTask=function(a,e){return n.post("/api/categories/"+a+"/tasks",e)},l.setPriorityList=function(a){l.choices=a,l.priorityList=[];for(var e=0;e<a.length;e++)for(var n=e+1;n<a.length;n++){var t=Math.round(Math.random());l.priorityList.push({id:0,firstChoice:a[0===t?e:n].name,secondChoice:a[0===t?n:e].name,choice:""})}!function(a){var e,n,t=a.length;for(;t;)n=Math.floor(Math.random()*t--),a[t].firstChoice,e=a[t],a[t]=a[n],a[n]=e}(l.priorityList);for(e=0;e<l.priorityList.length;e++)l.priorityList[e].id=e+1},l.getPriorityList=function(a){return l.priorityList}}]),angular.module("app").service("EmailSvc",["$http",function(e){this.send=function(a){return console.log(a),e.post("/api/email",a)}}]),angular.module("app").service("LanguageSvc",function(){var e=this;e.languages=[{code:"EN",name:"English",flag:"flag-icon-gb"},{code:"NL",name:"Nederlands",flag:"flag-icon-nl"},{code:"FR",name:"Français",flag:"flag-icon-fr"}],e.text=[{code:"EN"},{code:"NL"},{code:"FR"}],e.selectedLanguage=e.languages[0],e.setLanguage=function(a){return e.selectedLanguage=a},e.getLanguage=function(){return e.selectedLanguage}}),angular.module("app").service("PostsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/posts")},this.create=function(a){return e.post("/api/posts",a)},this.getPost=function(a){return e.get("/api/posts/"+a._id)}}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users")},n.setToken=function(a){return t.defaults.headers.common["X-Auth"]=a,n.getUser()},n.authenticate=function(a){return t.post("/api/users/authenticate",{user:a}).then(function(a){return window.localStorage.token=a.data,n.setToken(a.data)})},n.login=function(a){return t.get("/api/users/"+a+"/login").then(function(a){return window.localStorage.token=a.data,n.setToken(a.data)})},n.updateUser=function(a){return t.post("/api/users/"+a._id,{user:a}).then(function(){return n.getUser()})},n.checkPassword=function(a,e){return t.post("/api/users/"+a+"/verification",{password:e})},n.changePassword=function(a,e,n){return t.post("/api/users/"+a+"/password",{oldPassword:e,newPassword:n})},n.changeUsername=function(a,e){return t.post("/api/users/"+a+"/username",{newUsername:e}).then(function(){return n.getUser()})},n.logout=function(){window.localStorage.clear(),t.defaults.headers.common["X-Auth"]=""},n.createUser=function(a,e){return t.post("/api/users",{username:a,password:e}).then(function(){return n.login(a,e)})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
