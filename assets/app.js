angular.module("app",["ui.router","ui.bootstrap","ngAnimate","ngSanitize","vcRecaptcha","chart.js"]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(a,e,n){e.otherwise("/home"),a.state("home",{url:"/home",templateUrl:"/home.html"}).state("print",{url:"/print",templateUrl:"/print.html"}).state("experience",{url:"/experience",controller:"ExperienceCtrl",templateUrl:"/experience.html"}).state("skills",{url:"/skills",controller:"SkillsCtrl",templateUrl:"/skills.html"}).state("hobbies",{url:"/hobbies",controller:"HobbiesCtrl",templateUrl:"/hobbies.html"}).state("contact",{url:"/contact",controller:"ContactCtrl",templateUrl:"/contact.html"}).state("workout",{url:"/workout",controller:"WorkoutCtrl",templateUrl:"/workout.html"}).state("top-priority",{url:"/top-priority",controller:"TopPriorityCtrl",templateUrl:"/top-priority.html"}).state("posts",{url:"/posts",controller:"PostsCtrl",templateUrl:"/posts.html"}),n.html5Mode({enabled:!0,requireBase:!1})}]),angular.module("app").service("WebSocketSvc",["$rootScope","$timeout",function(a,e){function n(){return"https:"===window.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host}var t;this.connect=function(){t=new WebSocket(n()),t.onopen=function(){console.log("Websocket connected")},t.onclose=function(a){console.log("Websocket closed. Reconnecting..."),e(connect,1e4)},t.onerror=function(a){console.log("Error: "+a+" - State: "+t.readyState)},t.onmessage=function(e){var n=JSON.parse(e.data);a.$broadcast("ws:"+n.topic,n.data)}},this.send=function(a,e){var n=JSON.stringify({topic:a,data:e});t.send(n)}}]).run(["WebSocketSvc",function(a){a.connect()}]),angular.module("app").controller("AppCtrl",["$scope","$location","LanguageSvc",function(a,e,n){console.log("%cYou sneaky bugger!","font: 2em sans-serif; color: DodgerBlue; text-shadow: 2px 0 0 #444, -2px 0 0 #444, 0 2px 0 #444, 0 -2px 0 #444, 1px 1px #444, -1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444;"),console.log("I'm glad you're curious whether something is popping up in here. I'm a bit of a stickler when it comes to messages in the console so I try to make sure only things I want are visible. That being said, if there is a big error here, I would really appreciate you telling me so I can get rid of it!"),console.log("The code for my resume is hosted on Github if you really want to go into all this! => https://github.com/FlandersBurger/resume"),$(window).load(function(){$(".loading").fadeOut("slow"),$(".content").fadeIn("slow")}),a.themeCounter=6,a.today=new Date,a.year=a.today.getFullYear(),a.random=Math.floor(1e6*Math.random()),a.flipTheme=function(){$(".loading").show(),$(".content").hide(),setTimeout(function(){$(".loading").fadeOut("slow"),$(".content").fadeIn("slow")},800),a.themeCounter=a.themeCounter<6?a.themeCounter+1:a.themeCounter=1},$.getJSON("/skills.json",function(e){a.skills=e.filter(function(a){return a.enabled})}),$.getJSON("/hobbies.json",function(e){a.hobbies=e}),$.getJSON("/experience.json",function(e){a.jobs=e,a.jobs.forEach(function(a){a.startDate=new Date(a.startDate),a.endDate&&(a.endDate=new Date(a.endDate))})}),a.getTimeSpan=function(a){return a.startDate.getFullYear()+(a.endDate?" - "+a.endDate.getFullYear():" - Today")},a.languages=n.languages,a.selectedLanguage=n.getLanguage(),a.selectLanguage=function(e){a.selectedLanguage=n.setLanguage(e)},a.hoverdiv=function(a,e){var n=a.clientX+"px",t=a.clientY+20+"px";document.getElementById(e);return $("#"+e).css("left",n),$("#"+e).css("top",t),$("#"+e).toggle(),!1},a.socialMedia=[{name:"linkedin",url:"https://www.linkedin.com/in/laurent-debacker-1633a916",icon:"fa-linkedin"},{name:"github",url:"https://github.com/FlandersBurger",icon:"fa-github"},{name:"jsfiddle",url:"https://jsfiddle.net/user/BelgoCanadian/fiddles/",icon:"fa-jsfiddle"},{name:"stackoverflow",url:"http://stackoverflow.com/users/1083923/belgocanadian",icon:"fa-stack-overflow"}]}]),angular.module("app").controller("ContactCtrl",["$scope","EmailSvc",function(a,e){a.options=[{name:"Spam",text:"I am a spam bot and automatically check the first option I find!"},{name:"Opportunitiy",text:"You seem to have the skills I seek, I'd like to talk about some opportunities."},{name:"Resume",text:"I dig the resume, how did you make it?"},{name:"Other",text:"Sumtin else!"}],a.contact={email:"",name:"",phone:"",about:"",message:""},a.send=function(){a.sending=!0,console.log("here"),e.send({email:a.contact.email,name:a.contact.name,phone:a.contact.phone,about:a.contact.about,message:a.contact.message}).then(function(e){a.sent=!0,console.log("SUCCESS. status=%d, text=%s",e.status,e.text),console.log(e)},function(e){a.sending=!1,console.log("FAILED. error=",e)})}}]),angular.module("app").controller("ExperienceCtrl",["$scope",function(a){a.getSkill=function(e){if(a.skills)return a.skills.find(function(a){return a.code===e})}}]),angular.module("app").controller("HobbiesCtrl",["$scope","$window",function(a,e){a.hobbySelectorVisible=!1,$.getJSON("https://www.reddit.com/user/belgocanadian/about/.json",function(a){}),a.selectedHobby=a.hobbies[0],a.selectHobby=function(e){a.selectedHobby=e,a.hobbySelectorVisible=!1},a.showHobby=function(a,e,n){return!!a.images&&a.images.length>0}}]),angular.module("app").controller("ListsCtrl",["$scope","$location","CategoriesSvc",function(a,e,n){a.showCategory=!0,a.init=function(){n.getCategories().success(function(e){a.categories=e,a.tasks=[];for(var n=0;n<a.categories.length;n++)for(var t=0;t<a.categories[n].tasks.length;t++)a.tasks.push({category:a.categories[n].name,task:a.categories[n].tasks[t].name})})},a.selectCategory=function(e){a.selectedCategory=e,a.selectedTasks=[],a.selectableTasks=[];for(var n=0;n<a.selectedCategory.tasks.length;n++)a.selectableTasks.push(a.selectedCategory.tasks[n]);a.showCategory=!1,a.enteredCategory=null},a.newCategory=function(e){for(var t=!1,l=0;l<a.categories.length;l++)a.categories[l].name===e&&(a.selectCategory(a.categories[l]),t=!0);t||n.addCategory({category:e}).success(function(e){a.init(),a.selectCategory(e)}),a.enteredCategory=null},a.newTask=function(e){for(var t=!1,l=0;l<a.selectedCategory.tasks.length;l++)a.selectedCategory.tasks[l].name===e&&(t=!0,a.selectTask(a.selectedCategory.tasks[l]));t||n.addTask(a.selectedCategory.name,{task:e}).success(function(){a.selectedCategory.tasks.push({name:e}),a.addTask(a.selectedTasks,a.selectedCategory.tasks[a.selectedCategory.tasks.length-1])}),a.enteredTask=null},a.selectTask=function(e){a.addTask(a.selectedTasks,e),a.removeTask(a.selectableTasks,e),a.enteredTask=null},a.unselectTask=function(e){a.addTask(a.selectableTasks,e),a.removeTask(a.selectedTasks,e)},a.addTask=function(a,e){a.push(e)},a.removeTask=function(a,e){a.splice(a.indexOf(e),1)},a.startPrioritizing=function(){n.setPriorityList(a.selectedTasks),e.path("/prioritize")},a.getQuestions=function(){if(!a.selectedTasks)return"";for(var e=0,n=a.selectedTasks.length-1;n>0;n--)e+=n;return e}}]),angular.module("app").controller("LoginCtrl",["$scope","$location","UserSvc",function(a,e,n){a.login=function(t,l){n.login(t,l).then(function(n){console.log(n),a.$emit("login",n.data),e.path("/")},function(){a.$emit("popup",{message:"Login Failed",type:"alert-danger"})})}}]),angular.module("app").controller("PostsCtrl",["$scope","$filter","PostsSvc",function(a,e,n){a.addPost=function(){a.postBody&&n.create({body:a.postBody}).success(function(e){a.postBody=null})},n.fetch().success(function(e){a.posts=e,a.filteredPosts=e}),a.$on("ws:new_post",function(e,t){a.$apply(function(){n.getPost(t).then(function(e){a.posts.unshift(e.data)})})})}]),angular.module("app").controller("ProfileCtrl",["$scope","$location","UserSvc",function(a,e,n){var t=$("#slider").CircularSlider({radius:50,innerCircleRatio:"0.9",handleDist:100,min:0,max:359,value:0,clockwise:!0,labelSuffix:"",labelPrefix:"",shape:"Circle",touch:!0,animate:!0,animateDuration:360,selectable:!1,slide:function(a,e){},onSlideEnd:function(a,e){},formLabel:void 0});a.currentUser?(t.setValue(a.currentUser.gender),a.tags=a.currentUser.flags):e.path("/"),a.usernameToggle=!0,a.passwordToggle=!0,a.toggleUsername=function(){a.usernameToggle=!a.usernameToggle,a.newUsername=a.currentUser.username},a.togglePassword=function(){a.newPassword=null,a.confirmPassword=null,a.passwordToggle=!a.passwordToggle},a.checkPassword=function(e){if(e){var t=a.currentUser._id;n.checkPassword(t,e).then(function(e){a.togglePassword()},function(){var a=$(".password").css("backgroundColor");$(".password").animate({backgroundColor:"#FFB6C1"},200).animate({backgroundColor:a},200)})}},a.changePassword=function(e,t,l){if(t)if(t==l){var o=a.currentUser._id;n.changePassword(o,e,t).then(function(e){a.$emit("popup",{message:"Password Changed",type:"alert-success"}),a.oldPassword=null,a.togglePassword()},function(){a.$emit("popup",{message:"Password Change Failed",type:"alert-danger"})})}else{var i=$(".password").css("backgroundColor");$(".password").animate({backgroundColor:"#FFB6C1"},200).animate({backgroundColor:i},200)}},a.changeUsername=function(e){n.changeUsername(a.currentUser._id,e).then(function(n){a.$emit("popup",{message:"Username changed to "+e,type:"alert-success"}),a.currentUser.username=e},function(n){a.$emit("popup",{message:e+" already in use",type:"alert-danger"})})},a.updateUser=function(){var e=t.getValue(),l=a.tags,o=a.currentUser._id;n.updateUser(o,e,l).then(function(e){a.$emit("update",e.data),a.$emit("popup",{message:"Profile updated",type:"alert-success"})})},a.loadCountries=function(a){var e=[{name:"Andorra",flag:"flag-ad",tidbit:""},{name:"United Arab Emirates",flag:"flag-ae"},{name:"Afghanistan",flag:"flag-af"},{name:"Antigua and Barbuda",flag:"flag-ag"},{name:"Anguilla",flag:"flag-ai"},{name:"Albania",flag:"flag-al"},{name:"Armenia",flag:"flag-am"},{name:"Angola",flag:"flag-ao"},{name:"Antarctica",flag:"flag-aq"},{name:"Argentina",flag:"flag-ar"},{name:"American Somoa",flag:"flag-as"},{name:"Austria",flag:"flag-at"},{name:"Australia",flag:"flag-au"},{name:"Aruba",flag:"flag-aw"},{name:"Åland Islands",flag:"flag-ax"},{name:"Azerbaijan",flag:"flag-az"},{name:"Bosnia and Herzegovina",flag:"flag-ba"},{name:"Barbados",flag:"flag-bb"},{name:"Bangladesh",flag:"flag-bd"},{name:"Belgium",flag:"flag-be"},{name:"Burkina Faso",flag:"flag-bf"},{name:"Bulgaria",flag:"flag-bg"},{name:"Bahrain",flag:"flag-bh"},{name:"Burundi",flag:"flag-bi"},{name:"Benin",flag:"flag-bj"},{name:"Saint Barthélemy",flag:"flag-bl"},{name:"Bermuda",flag:"flag-bm"},{name:"Brunei ",flag:"flag-bn"},{name:"Bolivia, Plurinational State of",flag:"flag-bo"},{name:"Bonaire, Sint Eustatius and Saba",flag:"flag-bq"},{name:"Brazil",flag:"flag-br"},{name:"Bahamas",flag:"flag-bs"},{name:"Bhutan",flag:"flag-bt"},{name:"Bouvet Island",flag:"flag-bv"},{name:"Botswana",flag:"flag-bw"},{name:"Belarus",flag:"flag-by"},{name:"Belize",flag:"flag-bz"},{name:"Canada",flag:"flag-ca"},{name:"Cocos (Keeling) Islands",flag:"flag-cc"},{name:"Congo, the Democratic Republic of the",flag:"flag-cd"},{name:"Central African Republic",flag:"flag-cf"},{name:"Congo",flag:"flag-cg"},{name:"Switzerland",flag:"flag-ch"},{name:"Côte d'Ivoire",flag:"flag-ci"},{name:"Cook Islands",flag:"flag-ck"},{name:"Chile",flag:"flag-cl"},{name:"Cameroon",flag:"flag-cm"},{name:"China",flag:"flag-cn"},{name:"Colombia",flag:"flag-co"},{name:"Costa Rica",flag:"flag-cr"},{name:"Cuba",flag:"flag-cu"},{name:"Cabo Verde",flag:"flag-cv"},{name:"Curaçao",flag:"flag-cw"},{name:"Christmas Island",flag:"flag-cx"},{name:"Cyprus",flag:"flag-cy"},{name:"Czech Republic",flag:"flag-cz"},{name:"Germany",flag:"flag-de"},{name:"Djibouti",flag:"flag-dj"},{name:"Denmark",flag:"flag-dk"},{name:"Dominica",flag:"flag-dm"},{name:"Dominican Republic",flag:"flag-do"},{name:"Algeria",flag:"flag-dz"},{name:"Ecuador",flag:"flag-ec"},{name:"Estonia",flag:"flag-ee"},{name:"Egypt",flag:"flag-eg"},{name:"Western Sahara",flag:"flag-eh"},{name:"Eritrea",flag:"flag-er"},{name:"Spain",flag:"flag-es"},{name:"Ethiopia",flag:"flag-et"},{name:"Finland",flag:"flag-fi"},{name:"Fiji",flag:"flag-fj"},{name:"Falkland Islands (Malvinas)",flag:"flag-fk"},{name:"Micronesia, Federated States of",flag:"flag-fm"},{name:"Faroe Islands",flag:"flag-fo"},{name:"France",flag:"flag-fr"},{name:"Gabon",flag:"flag-ga"},{name:"United Kingdom of Great Britain and Northern Ireland",flag:"flag-gb"},{name:"Grenada",flag:"flag-gd"},{name:"Georgia",flag:"flag-ge"},{name:"French Guiana",flag:"flag-gf"},{name:"Guernsey",flag:"flag-gg"},{name:"Ghana",flag:"flag-gh"},{name:"Gibraltar",flag:"flag-gi"},{name:"Greenland",flag:"flag-gl"},{name:"Gambia",flag:"flag-gm"},{name:"Guinea",flag:"flag-gn"},{name:"Guadeloupe",flag:"flag-gp"},{name:"Equatorial Guinea",flag:"flag-gq"},{name:"Greece",flag:"flag-gr"},{name:"South Georgia and the South Sandwich Islands",flag:"flag-gs"},{name:"Guatemala",flag:"flag-gt"},{name:"Guam",flag:"flag-gu"},{name:"Guinea-Bissau",flag:"flag-gw"},{name:"Guyana",flag:"flag-gy"},{name:"Hong Kong",flag:"flag-hk"},{name:"Heard Island and McDonald Islands",flag:"flag-hm"},{name:"Honduras",flag:"flag-hn"},{name:"Croatia",flag:"flag-hr"},{name:"Haiti",flag:"flag-ht"},{name:"Hungary",flag:"flag-hu"},{name:"Indonesia",flag:"flag-id"},{name:"Ireland",flag:"flag-ie"},{name:"Israel",flag:"flag-il"},{name:"Isle of Man",flag:"flag-im"},{name:"India",flag:"flag-in"},{name:"British Indian Ocean Territory",flag:"flag-io"},{name:"Iraq",flag:"flag-iq"},{name:"Iran, Islamic Republic of",flag:"flag-ir"},{name:"Iceland",flag:"flag-is"},{name:"Italy",flag:"flag-it"},{name:"Jersey",flag:"flag-je"},{name:"Jamaica",flag:"flag-jm"},{name:"Jordan",flag:"flag-jo"},{name:"Japan",flag:"flag-jp"},{name:"Kenya",flag:"flag-ke"},{name:"Kyrgyzstan",flag:"flag-kg"},{name:"Cambodia",flag:"flag-kh"},{name:"Kiribati",flag:"flag-ki"},{name:"Comoros",flag:"flag-km"},{name:"Saint Kitts and Nevis",flag:"flag-kn"},{name:"Korea, Democratic People's Republic of",flag:"flag-kp"},{name:"Korea, Republic of",flag:"flag-kr"},{name:"Kuwait",flag:"flag-kw"},{name:"Cayman Islands",flag:"flag-ky"},{name:"Kazakhstan",flag:"flag-kz"},{name:"Lao People's Democratic Republic",flag:"flag-la"},{name:"Lebanon",flag:"flag-lb"},{name:"Saint Lucia",flag:"flag-lc"},{name:"Liechtenstein",flag:"flag-li"},{name:"Sri Lanka",flag:"flag-lk"},{name:"Liberia",flag:"flag-lr"},{name:"Lesotho",flag:"flag-ls"},{name:"Lithuania",flag:"flag-lt"},{name:"Luxembourg",flag:"flag-lu"},{name:"Latvia",flag:"flag-lv"},{name:"Libya",flag:"flag-ly"},{name:"Morocco",flag:"flag-ma"},{name:"Monaco",flag:"flag-mc"},{name:"Moldova, Republic of",flag:"flag-md"},{name:"Montenegro",flag:"flag-me"},{name:"Saint Martin (French part)",flag:"flag-mf"},{name:"Madagascar",flag:"flag-mg"},{name:"Marshall Islands",flag:"flag-mh"},{name:"Macedonia, the former Yugoslav Republic of",flag:"flag-mk"},{name:"Mali",flag:"flag-ml"},{name:"Myanmar",flag:"flag-mm"},{name:"Mongolia",flag:"flag-mn"},{name:"Macao",flag:"flag-mo"},{name:"Northern Mariana Islands",flag:"flag-mp"},{name:"Martinique",flag:"flag-mq"},{name:"Mauritania",flag:"flag-mr"},{name:"Montserrat",flag:"flag-ms"},{name:"Malta",flag:"flag-mt"},{name:"Mauritius",flag:"flag-mu"},{name:"Maldives",flag:"flag-mv"},{name:"Malawi",flag:"flag-mw"},{name:"Mexico",flag:"flag-mx"},{name:"Malaysia",flag:"flag-my"},{name:"Mozambique",flag:"flag-mz"},{name:"Namibia",flag:"flag-na"},{name:"New Caledonia",flag:"flag-nc"},{name:"Niger",flag:"flag-ne"},{name:"Norfolk Island",flag:"flag-nf"},{name:"Nigeria",flag:"flag-ng"},{name:"Nicaragua",flag:"flag-ni"},{name:"Netherlands",flag:"flag-nl"},{name:"Norway",flag:"flag-no"},{name:"Nepal",flag:"flag-np"},{name:"Nauru",flag:"flag-nr"},{name:"Niue",flag:"flag-nu"},{name:"New Zealand",flag:"flag-nz"},{name:"Oman",flag:"flag-om"},{name:"Panama",flag:"flag-pa"},{name:"Peru",flag:"flag-pe"},{name:"French Polynesia",flag:"flag-pf"},{name:"Papua New Guinea",flag:"flag-pg"},{name:"Philippines",flag:"flag-ph"},{name:"Pakistan",flag:"flag-pk"},{name:"Poland",flag:"flag-pl"},{name:"Saint Pierre and Miquelon",flag:"flag-pm"},{name:"Pitcairn",flag:"flag-pn"},{name:"Puerto Rico",flag:"flag-pr"},{name:"Palestine, State of",flag:"flag-ps"},{name:"Portugal",flag:"flag-pt"},{name:"Palau",flag:"flag-pw"},{name:"Paraguay",flag:"flag-py"},{name:"Qatar",flag:"flag-qa"},{name:"Réunion",flag:"flag-re"},{name:"Romania",flag:"flag-ro"},{name:"Serbia",flag:"flag-rs"},{name:"Russian Federation",flag:"flag-ru"},{name:"Rwanda",flag:"flag-rw"},{name:"Saudi Arabia",flag:"flag-sa"},{name:"Solomon Islands",flag:"flag-sb"},{name:"Seychelles",flag:"flag-sc"},{name:"Sudan",flag:"flag-sd"},{name:"Sweden",flag:"flag-se"},{name:"Singapore",flag:"flag-sg"},{name:"Saint Helena, Ascension and Tristan da Cunha",flag:"flag-sh"},{name:"Slovenia",flag:"flag-si"},{name:"Svalbard and Jan Mayen",flag:"flag-sj"},{name:"Slovakia",flag:"flag-sk"},{name:"Sierra Leone",flag:"flag-sl"},{name:"San Marino",flag:"flag-sm"},{name:"Senegal",flag:"flag-sn"},{name:"Somalia",flag:"flag-so"},{name:"Suriname",flag:"flag-sr"},{name:"South Sudan",flag:"flag-ss"},{name:"Sao Tome and Principe",flag:"flag-st"},{name:"El Salvador",flag:"flag-sv"},{name:"Sint Maarten (Dutch part)",flag:"flag-sx"},{name:"Syrian Arab Republic",flag:"flag-sy"},{name:"Swaziland",flag:"flag-sz"},{name:"Turks and Caicos Islands",flag:"flag-tc"},{name:"Chad",flag:"flag-td"},{name:"French Southern Territories",flag:"flag-tf"},{name:"Togo",flag:"flag-tg"},{name:"Thailand",flag:"flag-th"},{name:"Tajikistan",flag:"flag-tj"},{name:"Tokelau",flag:"flag-tk"},{name:"Timor-Leste",flag:"flag-tl"},{name:"Turkmenistan",flag:"flag-tm"},{name:"Tunisia",flag:"flag-tn"},{name:"Tonga",flag:"flag-to"},{name:"Turkey",flag:"flag-tr"},{name:"Trinidad and Tobago",flag:"flag-tt"},{name:"Tuvalu",flag:"flag-tv"},{name:"Taiwan, Province of China",flag:"flag-tw"},{name:"Tanzania, United Republic of",flag:"flag-tz"},{name:"Ukraine",flag:"flag-ua"},{name:"Uganda",flag:"flag-ug"},{name:"United States Minor Outlying Islands",flag:"flag-um"},{name:"United States of America",flag:"flag-us"},{name:"Uruguay",flag:"flag-uy"},{name:"Uzbekistan",flag:"flag-uz"},{name:"Holy See",flag:"flag-va"},{name:"Saint Vincent and the Grenadines",flag:"flag-vc"},{name:"Venezuela, Bolivarian Republic of",flag:"flag-ve"},{name:"Virgin Islands, British",flag:"flag-vg"},{name:"Virgin Islands, U.S.",flag:"flag-vi"},{name:"Viet Nam",flag:"flag-vn"},{name:"Vanuatu",flag:"flag-vu"},{name:"Wallis and Futuna",flag:"flag-wf"},{name:"Samoa",flag:"flag-ws"},{name:"Yemen",flag:"flag-ye"},{name:"Mayotte",flag:"flag-yt"},{name:"South Africa",flag:"flag-za"},{name:"Zambia",flag:"flag-zm"},{name:"Zimbabwe",flag:"flag-zw"}];return e.filter(function(e){return e.name.toLowerCase().indexOf(a.toLowerCase())!=-1})}}]),angular.module("app").controller("RegisterCtrl",["$scope","$location","UserSvc",function(a,e,n){a.register=function(t,l,o){if(l==o)n.createUser(t,l).then(function(n){a.$emit("login",n.data),e.path("/")});else{var i=$(".password").css("backgroundColor");$(".password").animate({backgroundColor:"#FFB6C1"},200).animate({backgroundColor:i},200)}}}]),angular.module("app").controller("SkillsCtrl",["$scope","$window",function(a,e){a.selectedSkill=0,a.skillsVisible=!1,a.labels=["Download Sales","In-Store Sales","Mail-Order Sales"],a.data=[300,500,100],$.getJSON("/skills.json",function(e){a.skills=e.filter(function(a){return a.enabled}),a.setSelectedSkill=function(e){a.selectedSkill=e,a.selectedSkill.chartOptions={cutoutPercentage:80,circumference:2*Math.PI,maintainAspectRatio:!0,tooltips:{enabled:!1}},a.selectedSkill.chartStyle={"background-image":"url(/skills/"+a.selectedSkill.image+")","background-repeat":"no-repeat","background-size":"60%","background-position":"50% 50%"}},a.setSelectedSkill(a.skills[0]),a.$apply()})}]),angular.module("app").controller("TopPriorityCtrl",["$scope",function(a){function e(a){this.score=0,this.name=a,this.choose=function(){this.score++}}function n(a){this.tasks=[];for(var n in a)this.tasks[n]=new e(a[n].item);this.choose=function(a){for(var e in this.tasks)this.tasks[e].name==a&&this.tasks[e].choose()}}function t(a,n){this.avatar=[a,n],this.name="",this.tasks=[],this.setTasks=function(a){for(var n=0;n<a.length;n++)this.tasks[n]=new e(a[n].name)},this.choose=function(a){for(var e in this.tasks)this.tasks[e].name==a&&this.tasks[e].choose()},this.score=function(a){for(var e in this.tasks)if(this.tasks[e].name==a)return this.tasks[e].score}}function l(a){for(var e,n,t=a.length;0!==t;)n=Math.floor(Math.random()*t),t-=1,e=a[t],a[t]=a[n],a[n]=e;return a}function o(a){var e,n={};for(e in a){if(n[a[e].item])return a[e].item;n[a[e].item]=!0}return!0}function i(){$(".progress-bar").css("width","100%").attr("aria-valuenow",100),document.getElementById("ChoicesLeft").innerHTML="100%",document.getElementById("ResultList").innerHTML="",$("#PrioritizeSection").hide();var a,e;for(e=u.length-1,u[e].tasks.sort(function(a,e){return e[0]-a[0]}),a=0;a<u[e].tasks.length;a++){var n=document.createElement("LI"),t=document.createTextNode(u[e].tasks[a].name+": "+u[e].tasks[a].score+" vote"+(1==u[e].tasks[a].score?"":"s"));n.appendChild(t),document.getElementById("ResultList").appendChild(n)}$("#ResultSection").fadeIn()}function r(){for(var a,e,n=!0;n;){n=!1,a=Math.floor(Math.random()*k),e=Math.floor(Math.random()*b);for(var t=0;t<u.length;t++)u[t].avatar[0]==a&&u[t].avatar[1]==e&&(n=!0)}g("#Avatar",a,e)}function s(a,e){for(var n=0;n<u.length;n++)if(u[n].avatar[0]==a&&u[n].avatar[1]==e)return alert("Copycat!"),void r();g("#Avatar",a,e)}function g(a,e,n){$(a).css("background-position-x",-e*(p/k)),$(a).css("background-position-y",-n*(h/b)),d[0]=e,d[1]=n}var f,c,m,u=[],d=[],p=800,h=400,k=8,b=4;a.defaultLists={blank:{caption:"Blank List",message:"What needs to be prioritized?",list:["","",""]},chores:{caption:"Chores",message:"What chores need to be done?",list:["Laundry","Dishes","Sweeping","Groceries","Tidy"]},restaurants:{caption:"Restaurants",message:"What do you want to eat?",list:["Chinese","Japanese","American","Indian","Greek","Italian","Korean","Thai","Vietnamese","Mexican"]},pokemon:{caption:"Pokemon",message:"Which do you gotta catch?",list:["Pikachu","Squirtle","Charmander","Bulbasaur","Pidgeotto","Snorlax"]},genres:{caption:"Movie Genres",message:"What shall we watch tonight?",list:["Comedy","Drama","Thriller","Action","Horror","Animated","Adventure","Documentary","Musical","Science Fiction"]}},a.list=[],a.choose_type=function(e){$("#TypeSection").hide(),a.list=a.defaultLists[e].list.map(function(a){return{item:a}}),$("#InputTitle").text(a.defaultLists[e].message),$("#InputSection").show()},a.removeListItem=function(e){a.list.splice(e,1)},a.addListItem=function(){a.list.push({item:""})},a.choose_avatar=function(){u[u.length]=new t(d[0],d[1]),u[u.length-1].setTasks(m.tasks),a.prioritize()},a.start=function(){a.list=a.list.filter(function(a){return a.item});var e=o(a.list);return a.list.length<2?(alert("Oi, there're 2 textboxes for a reason!"),a.choose_type("blank"),!1):e!==!0?(alert("Seems like you prefer "+e+"."),!1):($("#InputSection").hide(),u=[],m=new n(a.list),r(),$(".Top").slideDown("slow"),void $("#AvatarSection").fadeIn())},a.prioritize=function(){var e,n,t,o;for(o=0,t=m.tasks.length,f=[],$("#AvatarSection").hide(),e=0;e<t-1;e++)for(n=e+1;n<t;n++)f[o]=[],f[o][0]=m.tasks[e].name,f[o][1]=m.tasks[n].name,f[o][2]=0,o++;l(f),a.new_choice(),$("#PrioritizeSection").fadeIn()},a.next_player=function(){$("#ResultSection").hide(),$("#btnMultiplayer").val("Final results"),r(),$("#AvatarSection").fadeIn()},a.multiplayer=function(){1===u.length?a.restart():a.final_results()},a.restart=function(){for($("#ResultSection").hide(),$("#FinalSection").hide(),$(".Top").slideUp(),$(".ListItem").val("");$(".ListItem").length>2;)$(".ListItem").last().parent().remove();$("#FinalResultList th").remove(),$("#FinalResultList tr").remove(),$("#btnMultiplayer").val("Restart"),$("#TypeSection").fadeIn(),$(".ListItem").first().focus()},a.new_choice=function(){var a,e;for(a=0;a<f.length;a++)if(0===f[a][2]){var n=Math.round(Math.random());return document.getElementById("choice1").value=f[a][n],document.getElementById("choice2").value=f[a][1-n],c=a,e=Math.round(100*a/f.length),$(".progress-bar").css("width",e+"%").attr("aria-valuenow",e),document.getElementById("ChoicesLeft").innerHTML=e+"%",!1}},a.choose=function(e){var n;m.choose(f[c][e]),u[u.length-1].choose(f[c][e]),f[c][2]=1;var t=1;for(n=0;n<f.length;n++)0===f[n][2]&&(t=0);1==t?i():a.new_choice()},a.final_results=function(){$("#ResultSection").hide(),$(".Top").slideUp();var a,e;m.tasks.sort(function(a,e){return e[0]-a[0]});var n=document.createElement("THEAD"),t=document.createElement("TR");for(t.appendChild(document.createElement("TH")),a=0;a<u.length;a++){var l="th"+a,o=document.createElement("TH");o.setAttribute("id",l),o.style.backgroundImage="url('http://i.imgur.com/IcP5F1m.png')",o.style.width=50,o.style.height=65,o.style.backgroundPosition=-u[a].avatar[0]*(p/k)+"px "+-u[a].avatar[1]*(h/b)+"px",t.appendChild(o)}var i=document.createElement("TD");i.appendChild(document.createTextNode("Total")),i.style.height=65,t.appendChild(i),n.appendChild(t),document.getElementById("FinalResultList").appendChild(n);var r=document.createElement("TBODY");for(a=0;a<m.tasks.length;a++){var s=document.createElement("TR"),g=document.createElement("TD");for(g.appendChild(document.createTextNode(m.tasks[a].name)),s.appendChild(g),e=0;e<u.length;e++){var f=document.createElement("TD");f.appendChild(document.createTextNode(u[e].score(m.tasks[a].name))),s.appendChild(f)}var c=document.createElement("TD");c.appendChild(document.createTextNode(m.tasks[a].score)),s.appendChild(c),r.appendChild(s)}document.getElementById("FinalResultList").appendChild(r),$("#FinalSection").fadeIn()},$(document).ready(function(){$(".ListItem").first().focus(),$("#Avatars").click(function(a){var e=($(this).offset(),document.getElementById("Avatars")),n=e.clientWidth,t=e.clientHeight,l=(a.pageX-$(this).offset().left)/n*p;l=Math.floor(l/(p/k));var o=(a.pageY-$(this).offset().top)/t*h;o=Math.floor(o/(h/b)),s(l,o)})})}]),angular.module("app").controller("WorkoutCtrl",["$scope",function(a){a.timeRemaining=0,a.rest=!1;var e,n=[{name:"Jumping Jacks",split:!1},{name:"Wall Sit",split:!1},{name:"Push-Up",split:!1},{name:"Crunch",split:!1},{name:"Step-Up",split:!0},{name:"Squat",split:!1},{name:"Triceps Dip",split:!1},{name:"Plank",split:!1},{name:"High Knees",split:!1},{name:"Lunge",split:!1},{name:"Push-Up with Rotation",split:!1},{name:"Side Plank",split:!0}];a.workout=function(){a.timeRemaining?(clearInterval(e),a.timer="",a.timeRemaining=0,a.rest=!1,a.exercise={name:"",split:!1}):(a.timeRemaining=45*n.length,e=setInterval(function(){if(a.timeRemaining--,0===a.timeRemaining)return a.exercise={name:"Finished! Congrats!",split:!1},a.timer="",a.timeRemaining=0,a.rest=!1,a.$apply(),clearInterval(e);var t=Math.floor(a.timeRemaining/45),l=a.timeRemaining-45*t;a.timer=l>30?l-30:l,l>30?a.rest=!0:a.rest=!1,a.exercise=n[n.length-t-1],a.$apply()},1e3))}}]),angular.module("app").directive("head",["$rootScope","$state","$compile","$interpolate",function(a,e,n,t){var l=function(a){var e={href:a,rel:"stylesheet"};return e.href.match(/\.less$/)&&(e.rel="stylesheet/less"),e},o=function(a){for(var n={};""!==a.name;){var t=e.get("^",a);n[t.name]||(n[t.name]={}),a.templateStyleUrl&&(n[t.name][""]||(n[t.name][""]=l(a.templateStyleUrl))),a.views&&_.forEach(a.views,function(a,e){if(a.templateStyleUrl)return(e=e.split("@"))[1]?(n[e[1]]||(n[e[1]]={}),void(n[e[1]][e[0]]||(n[e[1]][e[0]]=l(a.templateStyleUrl)))):void(n[t.name][e[0]]=l(a.templateStyleUrl))}),a=t}var o=[];return _.forEach(n,function(a){_.forEach(a,function(a){_.includes(o,a)||o.push(a)})}),o.reverse(),o};return{restrict:"E",link:function(e,l){e.templateStyles=[];var i='<link ng-attr-rel="{{style.rel}}" ng-repeat="style in templateStyles" ng-href="{{style.href}}">';i=i.replace(/\{\{/g,t.startSymbol()),i=i.replace(/\}\}/g,t.endSymbol()),l.append(n(i)(e)),a.$on("$stateChangeStart",function(a,n,t,l,i){e.templateStyles=o(n)})}}}]),angular.module("app").service("CategoriesSvc",["$http",function(a){function e(a){for(var e,n,t=a.length;t;)n=Math.floor(Math.random()*t--),a[t].firstChoice,e=a[t],a[t]=a[n],a[n]=e;return a}var n=this;n.getCategories=function(){return a.get("/api/categories")},n.getTasks=function(e){return a.get("/api/categories/"+e)},n.addCategory=function(e){return a.post("/api/categories/",e)},n.addTask=function(e,n){return a.post("/api/categories/"+e+"/tasks",n)},n.setPriorityList=function(a){n.choices=a,n.priorityList=[];for(var t=0;t<a.length;t++)for(var l=t+1;l<a.length;l++){var o=Math.round(Math.random());n.priorityList.push({id:0,firstChoice:a[0===o?t:l].name,secondChoice:a[0===o?l:t].name,choice:""})}e(n.priorityList);for(var t=0;t<n.priorityList.length;t++)n.priorityList[t].id=t+1},n.getPriorityList=function(a){return n.priorityList}}]),angular.module("app").service("EmailSvc",["$http",function(a){var e=this;e.send=function(e){return console.log(e),a.post("/api/email",e)}}]),angular.module("app").service("LanguageSvc",function(){var a=this;a.languages=[{code:"EN",name:"English",flag:"flag-icon-gb"},{code:"NL",name:"Nederlands",flag:"flag-icon-nl"},{code:"FR",name:"Français",flag:"flag-icon-fr"}],a.text=[{code:"EN"},{code:"NL"},{code:"FR"}],a.selectedLanguage=a.languages[0],a.setLanguage=function(e){return a.selectedLanguage=e,e},a.getLanguage=function(){return a.selectedLanguage}}),angular.module("app").service("PostsSvc",["$http",function(a){var e=this;e.fetch=function(){return a.get("/api/posts")},e.create=function(e){return a.post("/api/posts",e)},e.getPost=function(e){return a.get("/api/posts/"+e._id)}}]),angular.module("app").service("UserSvc",["$http",function(a){var e=this;e.getUser=function(){return a.get("/api/users")},e.setToken=function(n){return a.defaults.headers.common["X-Auth"]=n,e.getUser()},e.login=function(n,t){return a.post("/api/sessions",{username:n,password:t}).then(function(a){return window.localStorage.token=a.data,e.setToken(a.data)})},e.updateUser=function(n,t,l){return a.post("/api/users/"+n,{gender:t,flags:l}).then(function(){return e.getUser()})},e.checkPassword=function(e,n){return a.post("/api/users/"+e+"/verification",{password:n})},e.changePassword=function(e,n,t){return a.post("/api/users/"+e+"/password",{oldPassword:n,newPassword:t})},e.changeUsername=function(e,n){return a.post("/api/users/"+e+"/username",{newUsername:n})},e.logout=function(){window.localStorage.clear(),a.defaults.headers.common["X-Auth"]=""},e.createUser=function(n,t){return a.post("/api/users",{username:n,password:t}).then(function(){return e.login(n,t)})}}]);
//# sourceMappingURL=data:application/json;base64,
