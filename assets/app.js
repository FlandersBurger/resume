angular.module("app", ["ui.router", "ui.bootstrap", "ngAnimate", "ngSanitize", "ngDragDrop", "ngTagsInput", "vcRecaptcha", "chart.js", "tc.chartjs"]), angular.module("app").config(["$stateProvider", "$urlRouterProvider", "$urlServiceProvider", "$locationProvider", function ($stateProvider, $urlRouterProvider, $urlServiceProvider, $locationProvider) {
  $urlRouterProvider.otherwise("/home"), $urlServiceProvider.config.strictMode(!1), $stateProvider.state("home", {
    url: "/home",
    templateUrl: "/home.html"
  }).state("policy", {
    url: "/policy",
    templateUrl: "/policy.html"
  }).state("print", {
    url: "/print",
    templateUrl: "/print.html"
  }).state("experience", {
    url: "/experience",
    controller: "ExperienceCtrl",
    templateUrl: "/experience.html"
  }).state("skills", {
    url: "/skills",
    controller: "SkillsCtrl",
    templateUrl: "/skills.html"
  }).state("hobbies", {
    url: "/hobbies",
    controller: "HobbiesCtrl",
    templateUrl: "/hobbies.html"
  }).state("contact", {
    url: "/contact",
    controller: "ContactCtrl",
    templateUrl: "/contact.html"
  }).state("workout", {
    url: "/workout",
    controller: "WorkoutCtrl",
    templateUrl: "/workout.html"
  }).state("posts", {
    url: "/posts",
    controller: "PostsCtrl",
    templateUrl: "/posts.html"
  }).state("profile", {
    url: "/profile",
    controller: "ProfileCtrl",
    templateUrl: "/profile.html"
  }).state("lists", {
    url: "/lists",
    controller: "ListsCtrl",
    templateUrl: "lists.html"
  }).state("prioritize", {
    url: "/prioritize",
    controller: "PrioritizeCtrl",
    templateUrl: "prioritize.html"
  }).state("bubbles", {
    url: "/bubbles",
    controller: "BubblesCtrl",
    templateUrl: "bubbles.html"
  }).state("asteroids", {
    url: "/asteroids",
    controller: "AsteroidsCtrl",
    templateUrl: "asteroids.html"
  }).state("lemmings", {
    url: "/lemmings",
    controller: "LemmingsCtrl",
    templateUrl: "lemmings.html"
  }).state("bots", {
    url: "/bots",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("tenthings", {
    url: "/tenthings",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("quiz-google", {
    url: "/google",
    controller: "QuizGoogleCtrl",
    templateUrl: "quizzes/google.html"
  }).state("quiz-logos", {
    url: "/logos",
    controller: "QuizLogosCtrl",
    templateUrl: "quizzes/logos.html"
  }), $locationProvider.html5Mode({
    enabled: !0,
    requireBase: !1
  });
}]), angular.module("app").service("WebSocketSvc", ["$rootScope", "$timeout", function ($rootScope, $timeout) {
  var connection,
      connect = function () {
    (connection = new WebSocket("https:" === window.location.protocol ? "wss://" + window.location.host : "ws://" + window.location.host)).onopen = function () {
      console.log("Websocket connected");
    }, connection.onclose = function (e) {
      console.log("Websocket closed. Reconnecting..."), $timeout(connect, 1e3);
    }, connection.onerror = function (e) {
      console.log("Error: " + e + " - State: " + connection.readyState);
    }, connection.onmessage = function (e) {
      var payload = JSON.parse(e.data);
      $rootScope.$broadcast("ws:" + payload.topic, payload.data);
    };
  };

  this.send = function (topic, data) {
    var json = JSON.stringify({
      topic,
      data
    });
    connection.send(json);
  }, this.connect = connect;
}]).run(["WebSocketSvc", function (WebSocketSvc) {
  WebSocketSvc.connect();
}]), angular.module("app").controller("AppCtrl", ["$scope", "$location", "LanguageSvc", "UserSvc", function ($scope, $location, LanguageSvc, UserSvc) {
  function login(user) {
    $scope.loggedIn || (window.localStorage.user = user._id, $scope.loggedIn = !0, $scope.currentUser = user, $scope.$broadcast("login"));
  }

  console.log("%cYou sneaky bugger!", "font: 2em sans-serif; color: DodgerBlue; text-shadow: 2px 0 0 #444, -2px 0 0 #444, 0 2px 0 #444, 0 -2px 0 #444, 1px 1px #444, -1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444;"), console.log("I'm glad you're curious whether something is popping up in here. I'm a bit of a stickler when it comes to messages in the console so I try to make sure only things I want are visible. That being said, if there is a big error here, I would really appreciate you telling me so I can get rid of it!"), console.log("The code for my resume is hosted on Github if you really want to go into all this! => https://github.com/FlandersBurger/resume"), $(window).load(function () {
    $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
  }), $scope.themeCounter = 6, $scope.today = new Date(), $scope.year = $scope.today.getFullYear(), $scope.random = Math.floor(1e6 * Math.random()), $scope.flipTheme = function () {
    $(".loading").show(), $(".content").hide(), setTimeout(function () {
      $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
    }, 800), $scope.themeCounter = $scope.themeCounter < 6 ? $scope.themeCounter + 1 : $scope.themeCounter = 1;
  }, $.getJSON("/skills.json", function (data) {
    $scope.skills = data.filter(function (skill) {
      return skill.enabled;
    });
  }), $.getJSON("/hobbies.json", function (data) {
    $scope.hobbies = data;
  }), $.getJSON("/experience.json", function (data) {
    $scope.jobs = data, $scope.jobs.forEach(function (job) {
      job.startDate = new Date(job.startDate), job.endDate && (job.endDate = new Date(job.endDate));
    });
  }), $scope.getTimeSpan = function (job) {
    return job.startDate.getFullYear() + (job.endDate ? " - " + job.endDate.getFullYear() : " - Today");
  }, $scope.languages = LanguageSvc.languages, $scope.selectedLanguage = LanguageSvc.getLanguage(), $scope.selectLanguage = function (language) {
    $scope.selectedLanguage = LanguageSvc.setLanguage(language);
  }, $scope.hoverdiv = function (e, divid) {
    var left = e.clientX + "px",
        top = e.clientY + 20 + "px";
    document.getElementById(divid);
    return $("#" + divid).css("left", left), $("#" + divid).css("top", top), $("#" + divid).toggle(), !1;
  }, $scope.socialMedia = [{
    name: "linkedin",
    url: "https://www.linkedin.com/in/laurent-debacker-1633a916",
    icon: "fa-linkedin"
  }, {
    name: "github",
    url: "https://github.com/FlandersBurger",
    icon: "fa-github"
  }, {
    name: "jsfiddle",
    url: "https://jsfiddle.net/user/BelgoCanadian/fiddles/",
    icon: "fa-jsfiddle"
  }, {
    name: "stackoverflow",
    url: "http://stackoverflow.com/users/1083923/belgocanadian",
    icon: "fa-stack-overflow"
  }], window.localStorage.user && UserSvc.login(window.localStorage.user).then(function (response) {
    login(response.data);
  }), $scope.$on("login", function (_, user) {
    login(user);
  }), $scope.$on("update", function (_, user) {
    $scope.currentUser = user, $scope.currentUser.birthDate = new Date($scope.currentUser.birthDate), $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.$on("loading", function (_, user) {
    $scope.loading = !0, $("#loading-icon").show();
  }), $scope.$on("loaded", function (_, user) {
    $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.logout = function () {
    firebase.auth().signOut().then(function () {
      $scope.loggedIn = !1, window.localStorage.clear(), $scope.$broadcast("logout");
    }).catch(function (error) {});
  }, $scope.formatDate = function (date) {
    return (date = new Date(date)).getDate() + "-" + ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][date.getMonth()] + "-" + date.getFullYear();
  };
}]), angular.module("app").controller("AsteroidsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  $scope.announce = !1;
  var canvas = document.getElementById("asteroids-page"),
      ctx = canvas.getContext("2d");
  ctx.font = "30px Comic Sans MS", ctx.fillStyle = "red", ctx.textAlign = "center";
  var shots = {},
      asteroids = {},
      powerups = {},
      explosions = {},
      map = {},
      spacepics = 10,
      space = Math.floor(Math.random() * spacepics),
      powerupTypes = [{
    name: "speed",
    announcement: "Max Speed ⇧",
    cycle: {
      rows: 1,
      columns: 4,
      size: [14, 35],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.maxSpeed += 100;
    }
  }, {
    name: "cooldown",
    announcement: "Cooldown ⇩",
    cycle: {
      rows: 1,
      columns: 3,
      size: [17, 17],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.cooldown > 0 && (spaceship.cooldownTime -= 1);
    }
  }, {
    name: "range",
    announcement: "Firing Range ⇧",
    cycle: {
      rows: 4,
      columns: 1,
      size: [30, 8],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.range += 5;
    }
  }, {
    name: "shield",
    announcement: "Shield",
    cycle: {
      rows: 5,
      columns: 1,
      size: [19, 19],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.shield = !0;
    }
  }, {
    name: "nuke",
    announcement: "Nuke",
    cycle: {
      rows: 1,
      columns: 8,
      size: [15, 15],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      for (var i in asteroids) asteroids[i].explode();

      spawnAsteroids(5);
    }
  }];
  powerupTypes.forEach(function (powerup, i, array) {
    array[i].img.src = "asteroids/" + powerup.name + ".png";
  });
  var spaceship,
      explosionImage = new Image();

  function evaluateKeys() {
    $scope.playing ? (map[32] && 0 === spaceship.cooldown && spaceship.shoot(), map[37] && (0 === spaceship.rotation ? spaceship.rotation = 360 : spaceship.rotation -= 3), map[39] && (360 === spaceship.rotation ? spaceship.rotation = 0 : spaceship.rotation += 3), map[38] ? spaceship.speed <= spaceship.maxSpeed && (spaceship.speed += 5) : spaceship.speed > 0 && spaceship.speed--, map[40] && spaceship.speed > 0 && (spaceship.speed -= 2)) : map[32] && ($scope.playing = !0, $scope.score = 0, space = Math.floor(Math.random() * spacepics), $scope.$apply(), spaceship = new Spaceship(), $scope.score = 0, spawnAsteroids(5), function autoSpawn() {
      if (Object.keys(asteroids).length < 200) {
        var id = Math.round(1e8 * Math.random());
        asteroids[id] = new Asteroid(id);
      }

      $scope.playing && setTimeout(function () {
        autoSpawn();
      }, $scope.score < 1e3 ? 1e3 : $scope.score < 2e3 ? 900 : $scope.score < 3e3 ? 800 : $scope.score < 4e3 ? 700 : $scope.score < 5e3 ? 600 : $scope.score < 6e3 ? 500 : $scope.score < 7e3 ? 400 : $scope.score < 8e3 ? 300 : 200);
    }());
  }

  function Spaceship() {
    this.width = 50, this.height = 50, this.shield = !1, this.range = 80, this.cannon = {
      x: this.width / 2 - 4.5,
      y: this.height / 2 - .078125 * this.height
    }, this.cooldown = 0, this.cooldownTime = 20, this.position = [canvas.width / 2 - this.width / 2, canvas.height / 2 - this.height / 2], this.img = new Image(), this.img.src = "asteroids/spaceship.png", this.speed = 0, this.maxSpeed = 1e3, this.angle = 0, this.rotation = 0, this.shoot = function () {
      this.cooldown = this.cooldownTime;
      var id = Math.round(1e8 * Math.random());
      shots[id] = new Shot(id, this);
    }, this.move = function () {
      for (var i in this.shield && (ctx.beginPath(), ctx.arc(this.position[0] + this.width / 2, this.position[1] + this.height / 2, 30, 0, 2 * Math.PI), ctx.fillStyle = "rgb(35, 237, 86, 0.5)", ctx.strokeStyle = "rgb(66, 168, 36, 0.8)", ctx.lineWidth = 5, ctx.stroke(), ctx.fill()), asteroids) {
        var asteroid = asteroids[i];

        if (hit(asteroid, this)) {
          if (!this.shield) return gameOver();
          this.shield = !1, asteroid.explode();
        }
      }

      this.angle = this.rotation, this.cooldown > 0 && this.cooldown--, move(this);
    };
  }

  function Shot(id, spaceship) {
    this.id = id, this.position = [spaceship.position[0] + spaceship.cannon.x + spaceship.cannon.x * Math.cos((spaceship.rotation - 90) * Math.PI / 180), spaceship.position[1] + spaceship.cannon.y + spaceship.cannon.y * Math.sin((spaceship.rotation - 90) * Math.PI / 180)], this.width = 9, this.height = 15, this.angle = spaceship.angle, this.rotation = spaceship.rotation, this.speed = spaceship.speed + 500, this.lifespan = spaceship.range, this.img = new Image(), this.img.src = "asteroids/shot.png", this.move = function () {
      this.lifespan--, move(this);
    };
  }

  function Asteroid(id) {
    this.id = id, this.width = 50 * Math.random() + 20, this.height = this.width, this.position = getEntryPosition(this.width, this.height), this.angle = 360 * Math.random(), this.rotation = 360 * Math.random(), this.rotationSpeed = 6 * Math.random() - 3, this.speed = 300 * Math.random() + 2, this.img = new Image(), this.img.src = "asteroids/asteroid" + (Math.round(6 * Math.random()) + 1) + ".png", this.explode = function () {
      return explosions[this.id] = new Explosion(this), delete asteroids[this.id];
    }, this.move = function () {
      for (var i in this.rotation += this.rotationSpeed, this.rotation > 360 ? this.rotation = this.rotation - 360 : this.rotation < 0 && (this.rotation = 360 + this.rotation), shots) {
        var shot = shots[i];

        if (hit(shot, this)) {
          this.explode();
          var points = Math.floor((shot.speed - 500) / 10 + 70 - this.width);
          Math.floor((points + $scope.score) / 100) > Math.floor($scope.score / 100) && spawnPowerup(), $scope.score += points, $scope.$apply(), delete shots[i];
        }
      }

      move(this);
    };
  }

  function Explosion(object) {
    this.position = [object.position[0], object.position[1]], this.width = object.width, this.height = object.height, this.speed = 0, this.angle = 360 * Math.random(), this.cycle = {
      rows: 6,
      columns: 8,
      size: [256, 256],
      i: 0,
      direction: !0
    }, this.lifespan = 47, this.img = explosionImage, this.move = function () {
      this.lifespan--, move(this), this.cycle.direction ? this.cycle.i++ : this.cycle.i--;
    };
  }

  function Powerup(id) {
    this.id = id, this.powerup = powerupTypes[Math.floor(Math.random() * powerupTypes.length)], this.cycle = this.powerup.cycle, this.lifespan = 1e3, this.cycle.size[1] > this.cycle.size[0] ? (this.height = 40, this.width = Math.round(this.height / this.cycle.size[1] * this.cycle.size[0])) : (this.width = 40, this.height = Math.round(this.width / this.cycle.size[0] * this.cycle.size[1])), this.position = getEntryPosition(this.width, this.height), this.img = this.powerup.img, this.angle = 360 * Math.random(), this.speed = 150 * Math.random() + 50;
    var delay = 5;

    this.move = function () {
      return this.lifespan <= 0 ? delete powerups[this.id] : hit(spaceship, this) ? ($scope.announce = !0, $scope.announcement = this.powerup.announcement, $scope.$apply(), setTimeout(function () {
        $scope.announce = !1, $scope.$apply();
      }, 1e3), this.powerup.activate(spaceship), delete powerups[this.id]) : (this.lifespan--, move(this), void (delay <= 0 ? (this.cycle.direction ? this.cycle.i++ : this.cycle.i--, delay = 5) : delay--));
    };
  }

  function move(object) {
    if (object.position[0] += object.speed / 100 * Math.cos((object.angle - 90) * Math.PI / 180), object.position[1] += object.speed / 100 * Math.sin((object.angle - 90) * Math.PI / 180), object.position[0] > canvas.width ? object.position[0] = -object.width : object.position[0] < -object.width && (object.position[0] = canvas.width), object.position[1] > canvas.height ? object.position[1] = -object.height : object.position[1] < -object.height && (object.position[1] = canvas.height), ctx.save(), ctx.translate(object.position[0], object.position[1]), ctx.translate(object.width / 2, object.height / 2), ctx.rotate(object.rotation * Math.PI / 180), object.cycle) {
      var column = object.cycle.i % object.cycle.columns,
          row = Math.floor(object.cycle.i / object.cycle.columns);
      ctx.drawImage(object.img, object.cycle.size[0] * column, object.cycle.size[1] * row, object.cycle.size[0], object.cycle.size[1], -object.width / 2, -object.height / 2, object.width, object.height), object.cycle.i <= 0 ? (object.cycle.i = 0, object.cycle.direction = !0) : object.cycle.i >= object.cycle.columns * object.cycle.rows && (object.cycle.i = object.cycle.columns * object.cycle.rows - 1, object.cycle.direction = !1);
    } else ctx.drawImage(object.img, -object.width / 2, -object.height / 2, object.width, object.height);

    ctx.restore();
  }

  function getEntryPosition(width, height) {
    var x,
        gridX = 2 * Math.random(),
        gridY = 2 * Math.random(),
        y = 0;
    return gridX >= 1 ? (x = Math.random() * canvas.width, y = y >= 1 ? 0 - height : canvas.height) : (y = Math.random() * canvas.height, x = gridY >= 1 ? 0 - width : canvas.width), [x, y];
  }

  function hit(object1, object2) {
    return object1.position[0] < object2.position[0] + object2.width && object2.position[0] < object1.position[0] + object1.width && object1.position[1] < object2.position[1] + object2.height && object2.position[1] < object1.position[1] + object1.height;
  }

  function spawnAsteroids(amount) {
    var i = 0;

    do {
      var id = Math.round(1e8 * Math.random());
      asteroids[id] = new Asteroid(id);
    } while (i++ <= amount);
  }

  function spawnPowerup() {
    if (Object.keys(powerups).length < 3) {
      var id = Math.round(1e8 * Math.random());
      powerups[id] = new Powerup(id);
    }
  }

  function gameOver() {
    for (var i in $scope.playing = !1, asteroids) asteroids[i].explode();

    shots = {}, $scope.loggedIn ? $scope.currentUser.highscore.asteroids < $scope.score && ($scope.currentUser.highscore.asteroids = $scope.score, GameSvc.setHighscore("asteroids", $scope.currentUser._id, $scope.score)) : $scope.highscore < $scope.score && ($scope.highscore = $scope.score);
  }

  function resizeCanvas() {
    console.log(window.innerWidth), canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }

  explosionImage.src = "asteroids/explosion.png", window.addEventListener("keydown", function (e) {
    map[e.keyCode || e.which] = !0;
  }, !0), window.addEventListener("keyup", function (e) {
    map[e.keyCode || e.which] = !1;
  }, !0), $scope.highscore = 0, window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), requestAnimationFrame(function draw() {
    for (var i in ctx.clearRect(0, 0, canvas.width, canvas.height), shots) shots[i].lifespan <= 0 ? delete shots[i] : shots[i].move();

    for (i in asteroids) asteroids[i].move();

    for (i in powerups) powerups[i].move();

    for (i in explosions) explosions[i].lifespan <= 0 ? delete explosions[i] : explosions[i].move();

    if (evaluateKeys(), $scope.playing) spaceship.move();else {
      var gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
      gradient.addColorStop("0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.25", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.5", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + ")"), gradient.addColorStop("0.75", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("1.0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), ctx.fillStyle = gradient, ctx.font = "60px Monoton", ctx.fillText("Asteroids", canvas.width / 2 - ctx.measureText("Asteroids").width / 2, canvas.height / 2), ctx.font = "20px Aldrich", ctx.fillText("Press space to start", canvas.width / 2 - ctx.measureText("Press space to start").width / 2, canvas.height / 2 + 20), ctx.fillText("Designed and developed by Laurent Debacker", canvas.width / 2 - ctx.measureText("Designed and developed by Laurent Debacker").width / 2, canvas.height - 30);
    }
    (tally += direction ? 1 : -1) > 100 ? (tally = 100, direction = !1) : tally < 0 && (tally = 0, direction = !0);
    requestAnimationFrame(draw);
  });
  var tally = 0,
      direction = !0;

  $scope.space = function () {
    return {
      backgroundImage: 'url("asteroids/space' + space + '.jpg")'
    };
  };
}]), angular.module("app").controller("BubblesCtrl", ["$scope", function ($scope) {
  var canvas = document.getElementById("bubbles-page"),
      ctx = canvas.getContext("2d"),
      bubbles = [],
      colors = ["#ffc300", "#ff5733", "#c70039", "#900c3e", "#571845"];

  function Bubble() {
    this.lifespan = 0, this.radius = 1, this.expanding = !0, this.speed = Math.round(3 * Math.random()), this.circumference = Math.round(50 * Math.random()) + 5, this.maxRadius = Math.round(200 * Math.random()) + 20, this.x = Math.round(Math.random() * canvas.width), this.y = Math.round(Math.random() * canvas.height), this.vx = Math.random() >= .5 ? 1 : -1, this.vy = Math.random() >= .5 ? 1 : -1;
  }

  requestAnimationFrame(function filterBubbles() {
    bubbles.push(new Bubble()), bubbles = bubbles.filter(function (bubble) {
      return bubble.radius === bubble.maxRadius && (bubble.expanding = !1), bubble.x += bubble.vx * bubble.speed, bubble.y += bubble.vy * bubble.speed, bubble.radius += bubble.expanding ? 1 : -1, bubble.radius > 0;
    }), ctx.clearRect(0, 0, canvas.width, canvas.height), bubbles.forEach(function (bubble) {
      colors[Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.beginPath(), ctx.arc(bubble.x, bubble.y, bubble.radius, 0, 2 * Math.PI), ctx.fillStyle = colors[Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.fill(), ctx.strokeStyle = colors[colors.length - Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.lineWidth = bubble.circumference * bubble.radius / bubble.maxRadius, ctx.stroke();
    }), requestAnimationFrame(filterBubbles);
  }), function () {
    function resizeCanvas() {
      canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 55 : 111);
    }

    window.addEventListener("resize", resizeCanvas, !1), resizeCanvas();
  }();
}]), angular.module("app").controller("ContactCtrl", ["$scope", "EmailSvc", function ($scope, EmailSvc) {
  $scope.options = [{
    name: "Spam",
    text: "I am a spam bot and automatically check the first option I find!"
  }, {
    name: "Opportunitiy",
    text: "You seem to have the skills I seek, I'd like to talk about some opportunities."
  }, {
    name: "Resume",
    text: "I dig the resume, how did you make it?"
  }, {
    name: "Other",
    text: "Sumtin else!"
  }], $scope.contact = {
    email: "",
    name: "",
    phone: "",
    about: "",
    message: ""
  }, $scope.send = function () {
    $scope.sending = !0, console.log("here"), EmailSvc.send({
      email: $scope.contact.email,
      name: $scope.contact.name,
      phone: $scope.contact.phone,
      about: $scope.contact.about,
      message: $scope.contact.message
    }).then(function (response) {
      $scope.sent = !0, console.log("SUCCESS. status=%d, text=%s", response.status, response.text), console.log(response);
    }, function (err) {
      $scope.sending = !1, console.log("FAILED. error=", err);
    });
  };
}]), angular.module("app").controller("ExperienceCtrl", ["$scope", function ($scope) {
  $scope.getSkill = function (skillCode) {
    if ($scope.skills) return $scope.skills.find(function (skill) {
      return skill.code === skillCode;
    });
  };
}]), angular.module("app").controller("HobbiesCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.hobbySelectorVisible = !1, $.getJSON("https://www.reddit.com/user/belgocanadian/about/.json", function (response) {}), $scope.selectedHobby = $scope.hobbies[0], $scope.selectHobby = function (hobby) {
    $scope.selectedHobby = hobby, $scope.hobbySelectorVisible = !1;
  }, $scope.showHobby = function (value, index, array) {
    return !!value.images && value.images.length > 0;
  };
}]), angular.module("app").controller("LemmingsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  var LEFT = 0,
      RIGHT = 1,
      canvas = document.getElementById("lemmings-page"),
      ctx = canvas.getContext("2d"),
      lemmingsImage = new Image();
  lemmingsImage.src = "lemmings/lemmings.png";
  var decorImage = new Image();
  decorImage.src = "lemmings/decor.png";
  var lemmings = {},
      started = !1,
      actions = {
    walk: {
      start: [0, 0],
      end: [320, 20],
      columns: 8,
      rows: 1,
      reverse: !1
    },
    huh: {
      start: [320, 0],
      end: [640, 20],
      columns: 8,
      rows: 1,
      reverse: !0
    },
    fall: {
      start: [0, 80],
      end: [160, 100],
      columns: 4,
      rows: 1,
      reverse: !1
    },
    fly: {
      start: [160, 80],
      end: [480, 110],
      columns: 8,
      rows: 1,
      reverse: !1
    },
    stop: {
      start: [0, 120],
      end: [640, 140],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    climb: {
      start: [0, 160],
      end: [640, 185],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    build: {
      start: [0, 200],
      end: [640, 225],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    punch: {
      start: [0, 240],
      end: [640, 300],
      columns: 16,
      rows: 2,
      reverse: !1
    },
    dig: {
      start: [0, 320],
      end: [320, 345],
      columns: 8,
      rows: 1,
      reverse: !1
    }
  };

  function Lemming(init) {
    this.position = [Math.floor(Math.random() * (canvas.width - 200)) + 100, Math.floor(Math.random() * (canvas.height - 200)) + 100], this.direction = 2 * Math.random() > 1 ? LEFT : RIGHT, this.act = function (action) {
      this.action = actions[action], this.cycle = 0, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1] - 20 * (this.action.rows - 1)) / this.action.rows, this.animation = !0;
    }, this.act(init), this.move = function () {
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), this.direction === LEFT && ctx.scale(-1, 1);
      var column = this.cycle % this.action.columns,
          row = Math.floor(this.cycle / this.action.columns);
      ctx.drawImage(lemmingsImage, this.width * column + this.action.start[0], (this.height + 20) * row + this.action.start[1], this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore(), this.action.reverse ? this.animation ? (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.animation = !this.animation, this.cycle--)) : (this.cycle--, this.cycle < 0 && (this.animation = !this.animation, this.cycle = 0)) : (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.cycle = 0));
    };
  }

  function resizeCanvas() {
    canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }

  window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), Object.keys(actions).forEach(function (action) {
    lemmings[Math.round(1e8 * Math.random())] = new Lemming(action);
  });
  let hatch = new function () {
    this.position = [20, 20], this.action = {
      start: [0, 0],
      end: [82, 500],
      columns: 1,
      rows: 10
    }, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1]) / this.action.rows, this.cycle = 0, this.open = function () {
      var column, row;
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), started ? (column = this.cycle % this.action.columns, row = Math.floor(this.cycle / this.action.columns), this.cycle < 9 && this.cycle++) : (column = 0, row = 0), ctx.drawImage(decorImage, this.width * column + this.action.start[0], this.height * row + this.action.start[1] - 1, this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore();
    };
  }();
  !function draw() {
    if (ctx.clearRect(0, 0, canvas.width, canvas.height), started) for (var i in lemmings) lemmings[i].move();else ctx.beginPath(), ctx.font = "40px Monoton", ctx.lineWidth = "10", ctx.strokeStyle = "blue", ctx.rect(15, canvas.height - 45, ctx.measureText("Start").width + 20, ctx.measureText("Start").height + canvas.height - 45), ctx.fill(), ctx.fillText("Start", 20, canvas.height - 50);
    hatch.open(), started = !0, setTimeout(function () {
      draw();
    }, 150);
  }();
}]), angular.module("app").controller("ListsCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.showCategory = !0, $scope.init = function () {
    CategoriesSvc.getCategories().then(function (response) {
      for (var i in $scope.categories = response.data, $scope.tasks = [], $scope.categories) for (var j in $scope.categories[i].tasks) $scope.tasks.push({
        category: $scope.categories[i].name,
        task: $scope.categories[i].tasks[j].name
      });
    });
  }, $scope.selectCategory = function (category) {
    for (var i in $scope.selectedCategory = category, $scope.selectedTasks = [], $scope.selectableTasks = [], $scope.selectedCategory.tasks) $scope.selectableTasks.push($scope.selectedCategory.tasks[i]);

    $scope.showCategory = !1, $scope.enteredCategory = "";
  }, $scope.newCategory = function (category) {
    for (var found = !1, i = 0; i < $scope.categories.length; i++) $scope.categories[i].name === category && ($scope.selectCategory($scope.categories[i]), found = !0);

    found || CategoriesSvc.addCategory({
      category
    }).then(function (category) {
      $scope.init(), $scope.selectCategory(category);
    }), $scope.enteredCategory = "";
  }, $scope.newTask = function (task) {
    var found = !1;

    for (var i in $scope.selectedCategory.tasks) $scope.selectedCategory.tasks[i].name === task && (found = !0, $scope.selectTask($scope.selectedCategory.tasks[i]));

    found || CategoriesSvc.addTask($scope.selectedCategory.name, {
      task
    }).then(function () {
      $scope.selectedCategory.tasks.push({
        name: task
      }), $scope.addTask($scope.selectedTasks, $scope.selectedCategory.tasks[$scope.selectedCategory.tasks.length - 1]);
    }), $scope.enteredTask = "";
  }, $scope.selectTask = function (task) {
    $scope.addTask($scope.selectedTasks, task), $scope.removeTask($scope.selectableTasks, task), $scope.enteredTask = "";
  }, $scope.unselectTask = function (task) {
    $scope.addTask($scope.selectableTasks, task), $scope.removeTask($scope.selectedTasks, task);
  }, $scope.addTask = function (taskList, task) {
    taskList.push(task);
  }, $scope.removeTask = function (taskList, task) {
    taskList.splice(taskList.indexOf(task), 1);
  }, $scope.startPrioritizing = function () {
    CategoriesSvc.setPriorityList($scope.selectedTasks), $location.path("/prioritize");
  }, $scope.getQuestions = function () {
    if (!$scope.selectedTasks) return "";

    for (var counter = 0, i = $scope.selectedTasks.length - 1; i > 0; i--) counter += i;

    return counter;
  };
}]), angular.module("app").controller("LoginCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  var ui = new firebaseui.auth.AuthUI(firebase.auth());

  function startUI() {
    ui.start("#firebaseui-auth-container", {
      callbacks: {
        signInSuccess: function (currentUser, credential, redirectUrl) {
          return firebase.auth().currentUser.getIdToken(!0).then(function (idToken) {
            UserSvc.authenticate({
              displayName: currentUser.displayName,
              email: currentUser.email,
              photoURL: currentUser.photoURL,
              emailVerified: currentUser.emailVerified,
              idToken
            }).then(function (response) {
              $scope.$emit("login", response.data), $("#modal-login").modal("hide");
            }, function () {
              $scope.$emit("popup", {
                message: "Login Failed",
                type: "alert-danger"
              });
            });
          }).catch(function (error) {}), !1;
        },
        signInFailure: function (error) {
          if ("firebaseui/anonymous-upgrade-merge-conflict" != error.code) return Promise.resolve();
          var cred = error.credential;
          return firebase.auth().signInWithCredential(cred);
        },
        uiShown: function () {
          document.getElementById("loader").style.display = "none";
        }
      },
      signInSuccessUrl: "/home",
      signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID],
      signInFlow: "popup"
    });
  }

  $scope.$on("logout", function (event) {
    ui.reset(), startUI();
  }), startUI();
}]), angular.module("app").controller("PostsCtrl", ["$scope", "$filter", "PostsSvc", function ($scope, $filter, PostsSvc) {
  $scope.addPost = function () {
    $scope.postBody && PostsSvc.create({
      body: $scope.postBody
    }).then(function (post) {
      $scope.postBody = null;
    });
  }, PostsSvc.fetch().then(function (response) {
    $scope.posts = response.data;
  }), $scope.$on("ws:new_post", function (_, post) {
    $scope.$apply(function () {
      PostsSvc.getPost(post).then(function (response) {
        $scope.posts.unshift(response.data);
      });
    });
  });
}]), angular.module("app").controller("PrioritizeCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.priorityList = CategoriesSvc.getPriorityList(), $scope.priorityList ? ($scope.selectedQuestion = 1, $scope.currentQuestion = 1, $scope.done = !1) : $location.path("/lists"), $scope.makeChoice = function (choice) {
    for (var i in $scope.priorityList) $scope.priorityList[i].id === $scope.selectedQuestion && ($scope.priorityList[i].choice = 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice);

    $scope.selectedQuestion === $scope.currentQuestion && ($scope.currentQuestion = $scope.currentQuestion === $scope.priorityList.length ? 1 : $scope.currentQuestion + 1), $scope.selectedQuestion = $scope.currentQuestion;
    var found = !1;

    for (i in $scope.priorityList) if ("" === $scope.priorityList[i].choice) {
      found = !0;
      break;
    }

    found || ($("#prioritizeChoices").hide(300), $scope.done = !0);
  }, $scope.getButtonValue = function (choice) {
    if (!$scope.priorityList) return "";

    for (var i = 0; i < $scope.priorityList.length; i++) if ($scope.priorityList[i].id === $scope.selectedQuestion) return 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice;
  }, $scope.selectQuestion = function (question) {
    $scope.selectedQuestion = question;
  }, $scope.getFilteredPriorityList = function () {
    return $scope.priorityList ? $scope.priorityList.sort(function (a, b) {
      return a.id - b.id;
    }).filter(function (question) {
      return "" !== question.choice || question.id === $scope.currentQuestion;
    }) : [];
  }, $scope.getChoicesMade = function () {
    if (!$scope.priorityList) return "";
    var choicesMade = 0;

    for (var i in $scope.priorityList) "" !== $scope.priorityList[i].choice && choicesMade++;

    return choicesMade;
  }, $scope.getButtonClass = function (choice) {
    if (!$scope.priorityList) return "";

    for (var i in $scope.priorityList) if ($scope.priorityList[i].id === $scope.selectedQuestion) return "" === $scope.priorityList[i].choice ? "btn-primary" : 1 === choice ? $scope.priorityList[i].firstChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger" : $scope.priorityList[i].secondChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger";
  }, $scope.showChoices = function () {
    $("#prioritizeChoices").show(1e3), $("#reviewChoices").hide();
  }, $scope.chartClick = function (event) {
    $scope.chart && console.log($scope.chart.getSegmentsAtEvent(event));
  }, $scope.showResults = function () {
    for (var i in $scope.data = [], $scope.options = {
      responsive: !0,
      segmentShowStroke: !0,
      segmentStrokeColor: "#fff",
      segmentStrokeWidth: 2,
      percentageInnerCutout: 0,
      animationSteps: 100,
      animationEasing: "easeOutBounce",
      animateRotate: !0,
      animateScale: !1,
      legendTemplate: '<h3 class="tc-chart-js-legend" style="padding:5px"><% for (var i=0; i<segments.length; i++){%><div class="label" style="float:left;margin:5px;background-color:<%=segments[i].fillColor%>"><%if(segments[i].label){%><%=segments[i].label%><%}%></div><%}%></h3>'
    }, CategoriesSvc.choices) for (var j in CategoriesSvc.choices[i].votes = 0, $scope.priorityList) CategoriesSvc.choices[i].name === $scope.priorityList[j].choice && CategoriesSvc.choices[i].votes++;

    for (i in CategoriesSvc.choices.sort(function (a, b) {
      return a.votes < b.votes;
    }), CategoriesSvc.choices) $scope.data.push({
      value: CategoriesSvc.choices[i].votes,
      label: CategoriesSvc.choices[i].name
    });

    $("#prioritizeResult").hide(), $("#prioritizeChoices").hide(), $("#priorityResults").show(1e3);
  };
}]), angular.module("app").controller("ProfileCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  $scope.currentUser ? ($("#sex-indicator").offset({
    left: $scope.currentUser.gender.sex / 200 * $("#sex").width() + $("#sex").offset().left
  }), $("#identity-indicator").offset({
    left: $scope.currentUser.gender.identity / 200 * $("#identity").width() + $("#identity").offset().left
  })) : $location.path("/"), $scope.sexes = ["Male", "FtM Male", "Intersex", "MtF Female", "Female"], $scope.identities = ["Man", "Bigender", "Pangender", "Agender", "Polygender", "Genderfluid", "Genderqueer", "Queer", "Woman"], $scope.dateOptions = {
    maxDate: new Date(),
    minDate: new Date(1900, 1, 1),
    initDate: new Date(2e3, 1, 1),
    datepickerMode: "year"
  }, $scope.gender = function (array, percentage) {
    return array[Math.round(percentage / 200 * (array.length - 1))];
  }, $scope.startSlider = function () {}, $scope.dragSlider = function (event, ui, type) {
    $scope.currentUser.gender[type] = Math.round(($("#" + type + "-indicator").offset().left - $("#" + type).offset().left) / ($("#" + type).width() - $("#" + type + "-indicator").width()) * 200), $scope.$apply();
  }, $scope.stopSlider = function () {}, $scope.usernameToggle = !0, $scope.passwordToggle = !0, $scope.toggleUsername = function () {
    $scope.usernameToggle = !$scope.usernameToggle, $scope.newUsername = $scope.currentUser.username;
  }, $scope.togglePassword = function () {
    $scope.newPassword = null, $scope.confirmPassword = null, $scope.passwordToggle = !$scope.passwordToggle;
  }, $scope.checkPassword = function (password) {
    if (password) {
      var user = $scope.currentUser._id;
      UserSvc.checkPassword(user, password).then(function (response) {
        $scope.togglePassword();
      }, function () {
        var originalBg = $(".password").css("backgroundColor");
        $(".password").animate({
          backgroundColor: "#FFB6C1"
        }, 200).animate({
          backgroundColor: originalBg
        }, 200);
      });
    }
  }, $scope.changePassword = function (oldPassword, newPassword, confirmPassword) {
    if (newPassword) if (newPassword == confirmPassword) {
      var user = $scope.currentUser._id;
      UserSvc.changePassword(user, oldPassword, newPassword).then(function (response) {
        $scope.$emit("popup", {
          message: "Password Changed",
          type: "alert-success"
        }), $scope.oldPassword = null, $scope.togglePassword();
      }, function () {
        $scope.$emit("popup", {
          message: "Password Change Failed",
          type: "alert-danger"
        });
      });
    } else {
      var originalBg = $(".password").css("backgroundColor");
      $(".password").animate({
        backgroundColor: "#FFB6C1"
      }, 200).animate({
        backgroundColor: originalBg
      }, 200);
    }
  }, $scope.changeUsername = function (username) {
    $scope.$emit("loading"), UserSvc.changeUsername($scope.currentUser._id, username).then(function (response) {
      $scope.$emit("update", response.data);
    }, function (response) {
      $scope.$emit("popup", {
        message: username + " already in use",
        type: "alert-danger"
      });
    });
  }, $scope.updateUser = function () {
    $scope.currentUser && ($scope.$emit("loading"), UserSvc.updateUser($scope.currentUser).then(function (response) {
      $scope.$emit("update", response.data);
    }));
  }, $scope.$watch("currentUser.flags.length", function (length) {
    $scope.updateUser();
  }), $scope.loadCountries = function ($query) {
    return [{
      name: "Andorra",
      flag: "flag-ad",
      tidbit: ""
    }, {
      name: "United Arab Emirates",
      flag: "flag-ae"
    }, {
      name: "Afghanistan",
      flag: "flag-af"
    }, {
      name: "Antigua and Barbuda",
      flag: "flag-ag"
    }, {
      name: "Anguilla",
      flag: "flag-ai"
    }, {
      name: "Albania",
      flag: "flag-al"
    }, {
      name: "Armenia",
      flag: "flag-am"
    }, {
      name: "Angola",
      flag: "flag-ao"
    }, {
      name: "Antarctica",
      flag: "flag-aq"
    }, {
      name: "Argentina",
      flag: "flag-ar"
    }, {
      name: "American Somoa",
      flag: "flag-as"
    }, {
      name: "Austria",
      flag: "flag-at"
    }, {
      name: "Australia",
      flag: "flag-au"
    }, {
      name: "Aruba",
      flag: "flag-aw"
    }, {
      name: "Åland Islands",
      flag: "flag-ax"
    }, {
      name: "Azerbaijan",
      flag: "flag-az"
    }, {
      name: "Bosnia and Herzegovina",
      flag: "flag-ba"
    }, {
      name: "Barbados",
      flag: "flag-bb"
    }, {
      name: "Bangladesh",
      flag: "flag-bd"
    }, {
      name: "Belgium",
      flag: "flag-be"
    }, {
      name: "Burkina Faso",
      flag: "flag-bf"
    }, {
      name: "Bulgaria",
      flag: "flag-bg"
    }, {
      name: "Bahrain",
      flag: "flag-bh"
    }, {
      name: "Burundi",
      flag: "flag-bi"
    }, {
      name: "Benin",
      flag: "flag-bj"
    }, {
      name: "Saint Barthélemy",
      flag: "flag-bl"
    }, {
      name: "Bermuda",
      flag: "flag-bm"
    }, {
      name: "Brunei ",
      flag: "flag-bn"
    }, {
      name: "Bolivia, Plurinational State of",
      flag: "flag-bo"
    }, {
      name: "Bonaire, Sint Eustatius and Saba",
      flag: "flag-bq"
    }, {
      name: "Brazil",
      flag: "flag-br"
    }, {
      name: "Bahamas",
      flag: "flag-bs"
    }, {
      name: "Bhutan",
      flag: "flag-bt"
    }, {
      name: "Bouvet Island",
      flag: "flag-bv"
    }, {
      name: "Botswana",
      flag: "flag-bw"
    }, {
      name: "Belarus",
      flag: "flag-by"
    }, {
      name: "Belize",
      flag: "flag-bz"
    }, {
      name: "Canada",
      flag: "flag-ca"
    }, {
      name: "Cocos (Keeling) Islands",
      flag: "flag-cc"
    }, {
      name: "Congo, the Democratic Republic of the",
      flag: "flag-cd"
    }, {
      name: "Central African Republic",
      flag: "flag-cf"
    }, {
      name: "Congo",
      flag: "flag-cg"
    }, {
      name: "Switzerland",
      flag: "flag-ch"
    }, {
      name: "Côte d'Ivoire",
      flag: "flag-ci"
    }, {
      name: "Cook Islands",
      flag: "flag-ck"
    }, {
      name: "Chile",
      flag: "flag-cl"
    }, {
      name: "Cameroon",
      flag: "flag-cm"
    }, {
      name: "China",
      flag: "flag-cn"
    }, {
      name: "Colombia",
      flag: "flag-co"
    }, {
      name: "Costa Rica",
      flag: "flag-cr"
    }, {
      name: "Cuba",
      flag: "flag-cu"
    }, {
      name: "Cabo Verde",
      flag: "flag-cv"
    }, {
      name: "Curaçao",
      flag: "flag-cw"
    }, {
      name: "Christmas Island",
      flag: "flag-cx"
    }, {
      name: "Cyprus",
      flag: "flag-cy"
    }, {
      name: "Czech Republic",
      flag: "flag-cz"
    }, {
      name: "Germany",
      flag: "flag-de"
    }, {
      name: "Djibouti",
      flag: "flag-dj"
    }, {
      name: "Denmark",
      flag: "flag-dk"
    }, {
      name: "Dominica",
      flag: "flag-dm"
    }, {
      name: "Dominican Republic",
      flag: "flag-do"
    }, {
      name: "Algeria",
      flag: "flag-dz"
    }, {
      name: "Ecuador",
      flag: "flag-ec"
    }, {
      name: "Estonia",
      flag: "flag-ee"
    }, {
      name: "Egypt",
      flag: "flag-eg"
    }, {
      name: "Western Sahara",
      flag: "flag-eh"
    }, {
      name: "Eritrea",
      flag: "flag-er"
    }, {
      name: "Spain",
      flag: "flag-es"
    }, {
      name: "Ethiopia",
      flag: "flag-et"
    }, {
      name: "Finland",
      flag: "flag-fi"
    }, {
      name: "Fiji",
      flag: "flag-fj"
    }, {
      name: "Falkland Islands (Malvinas)",
      flag: "flag-fk"
    }, {
      name: "Micronesia, Federated States of",
      flag: "flag-fm"
    }, {
      name: "Faroe Islands",
      flag: "flag-fo"
    }, {
      name: "France",
      flag: "flag-fr"
    }, {
      name: "Gabon",
      flag: "flag-ga"
    }, {
      name: "United Kingdom of Great Britain and Northern Ireland",
      flag: "flag-gb"
    }, {
      name: "Grenada",
      flag: "flag-gd"
    }, {
      name: "Georgia",
      flag: "flag-ge"
    }, {
      name: "French Guiana",
      flag: "flag-gf"
    }, {
      name: "Guernsey",
      flag: "flag-gg"
    }, {
      name: "Ghana",
      flag: "flag-gh"
    }, {
      name: "Gibraltar",
      flag: "flag-gi"
    }, {
      name: "Greenland",
      flag: "flag-gl"
    }, {
      name: "Gambia",
      flag: "flag-gm"
    }, {
      name: "Guinea",
      flag: "flag-gn"
    }, {
      name: "Guadeloupe",
      flag: "flag-gp"
    }, {
      name: "Equatorial Guinea",
      flag: "flag-gq"
    }, {
      name: "Greece",
      flag: "flag-gr"
    }, {
      name: "South Georgia and the South Sandwich Islands",
      flag: "flag-gs"
    }, {
      name: "Guatemala",
      flag: "flag-gt"
    }, {
      name: "Guam",
      flag: "flag-gu"
    }, {
      name: "Guinea-Bissau",
      flag: "flag-gw"
    }, {
      name: "Guyana",
      flag: "flag-gy"
    }, {
      name: "Hong Kong",
      flag: "flag-hk"
    }, {
      name: "Heard Island and McDonald Islands",
      flag: "flag-hm"
    }, {
      name: "Honduras",
      flag: "flag-hn"
    }, {
      name: "Croatia",
      flag: "flag-hr"
    }, {
      name: "Haiti",
      flag: "flag-ht"
    }, {
      name: "Hungary",
      flag: "flag-hu"
    }, {
      name: "Indonesia",
      flag: "flag-id"
    }, {
      name: "Ireland",
      flag: "flag-ie"
    }, {
      name: "Israel",
      flag: "flag-il"
    }, {
      name: "Isle of Man",
      flag: "flag-im"
    }, {
      name: "India",
      flag: "flag-in"
    }, {
      name: "British Indian Ocean Territory",
      flag: "flag-io"
    }, {
      name: "Iraq",
      flag: "flag-iq"
    }, {
      name: "Iran, Islamic Republic of",
      flag: "flag-ir"
    }, {
      name: "Iceland",
      flag: "flag-is"
    }, {
      name: "Italy",
      flag: "flag-it"
    }, {
      name: "Jersey",
      flag: "flag-je"
    }, {
      name: "Jamaica",
      flag: "flag-jm"
    }, {
      name: "Jordan",
      flag: "flag-jo"
    }, {
      name: "Japan",
      flag: "flag-jp"
    }, {
      name: "Kenya",
      flag: "flag-ke"
    }, {
      name: "Kyrgyzstan",
      flag: "flag-kg"
    }, {
      name: "Cambodia",
      flag: "flag-kh"
    }, {
      name: "Kiribati",
      flag: "flag-ki"
    }, {
      name: "Comoros",
      flag: "flag-km"
    }, {
      name: "Saint Kitts and Nevis",
      flag: "flag-kn"
    }, {
      name: "Korea, Democratic People's Republic of",
      flag: "flag-kp"
    }, {
      name: "Korea, Republic of",
      flag: "flag-kr"
    }, {
      name: "Kuwait",
      flag: "flag-kw"
    }, {
      name: "Cayman Islands",
      flag: "flag-ky"
    }, {
      name: "Kazakhstan",
      flag: "flag-kz"
    }, {
      name: "Lao People's Democratic Republic",
      flag: "flag-la"
    }, {
      name: "Lebanon",
      flag: "flag-lb"
    }, {
      name: "Saint Lucia",
      flag: "flag-lc"
    }, {
      name: "Liechtenstein",
      flag: "flag-li"
    }, {
      name: "Sri Lanka",
      flag: "flag-lk"
    }, {
      name: "Liberia",
      flag: "flag-lr"
    }, {
      name: "Lesotho",
      flag: "flag-ls"
    }, {
      name: "Lithuania",
      flag: "flag-lt"
    }, {
      name: "Luxembourg",
      flag: "flag-lu"
    }, {
      name: "Latvia",
      flag: "flag-lv"
    }, {
      name: "Libya",
      flag: "flag-ly"
    }, {
      name: "Morocco",
      flag: "flag-ma"
    }, {
      name: "Monaco",
      flag: "flag-mc"
    }, {
      name: "Moldova, Republic of",
      flag: "flag-md"
    }, {
      name: "Montenegro",
      flag: "flag-me"
    }, {
      name: "Saint Martin (French part)",
      flag: "flag-mf"
    }, {
      name: "Madagascar",
      flag: "flag-mg"
    }, {
      name: "Marshall Islands",
      flag: "flag-mh"
    }, {
      name: "Macedonia, the former Yugoslav Republic of",
      flag: "flag-mk"
    }, {
      name: "Mali",
      flag: "flag-ml"
    }, {
      name: "Myanmar",
      flag: "flag-mm"
    }, {
      name: "Mongolia",
      flag: "flag-mn"
    }, {
      name: "Macao",
      flag: "flag-mo"
    }, {
      name: "Northern Mariana Islands",
      flag: "flag-mp"
    }, {
      name: "Martinique",
      flag: "flag-mq"
    }, {
      name: "Mauritania",
      flag: "flag-mr"
    }, {
      name: "Montserrat",
      flag: "flag-ms"
    }, {
      name: "Malta",
      flag: "flag-mt"
    }, {
      name: "Mauritius",
      flag: "flag-mu"
    }, {
      name: "Maldives",
      flag: "flag-mv"
    }, {
      name: "Malawi",
      flag: "flag-mw"
    }, {
      name: "Mexico",
      flag: "flag-mx"
    }, {
      name: "Malaysia",
      flag: "flag-my"
    }, {
      name: "Mozambique",
      flag: "flag-mz"
    }, {
      name: "Namibia",
      flag: "flag-na"
    }, {
      name: "New Caledonia",
      flag: "flag-nc"
    }, {
      name: "Niger",
      flag: "flag-ne"
    }, {
      name: "Norfolk Island",
      flag: "flag-nf"
    }, {
      name: "Nigeria",
      flag: "flag-ng"
    }, {
      name: "Nicaragua",
      flag: "flag-ni"
    }, {
      name: "Netherlands",
      flag: "flag-nl"
    }, {
      name: "Norway",
      flag: "flag-no"
    }, {
      name: "Nepal",
      flag: "flag-np"
    }, {
      name: "Nauru",
      flag: "flag-nr"
    }, {
      name: "Niue",
      flag: "flag-nu"
    }, {
      name: "New Zealand",
      flag: "flag-nz"
    }, {
      name: "Oman",
      flag: "flag-om"
    }, {
      name: "Panama",
      flag: "flag-pa"
    }, {
      name: "Peru",
      flag: "flag-pe"
    }, {
      name: "French Polynesia",
      flag: "flag-pf"
    }, {
      name: "Papua New Guinea",
      flag: "flag-pg"
    }, {
      name: "Philippines",
      flag: "flag-ph"
    }, {
      name: "Pakistan",
      flag: "flag-pk"
    }, {
      name: "Poland",
      flag: "flag-pl"
    }, {
      name: "Saint Pierre and Miquelon",
      flag: "flag-pm"
    }, {
      name: "Pitcairn",
      flag: "flag-pn"
    }, {
      name: "Puerto Rico",
      flag: "flag-pr"
    }, {
      name: "Palestine, State of",
      flag: "flag-ps"
    }, {
      name: "Portugal",
      flag: "flag-pt"
    }, {
      name: "Palau",
      flag: "flag-pw"
    }, {
      name: "Paraguay",
      flag: "flag-py"
    }, {
      name: "Qatar",
      flag: "flag-qa"
    }, {
      name: "Réunion",
      flag: "flag-re"
    }, {
      name: "Romania",
      flag: "flag-ro"
    }, {
      name: "Serbia",
      flag: "flag-rs"
    }, {
      name: "Russian Federation",
      flag: "flag-ru"
    }, {
      name: "Rwanda",
      flag: "flag-rw"
    }, {
      name: "Saudi Arabia",
      flag: "flag-sa"
    }, {
      name: "Solomon Islands",
      flag: "flag-sb"
    }, {
      name: "Seychelles",
      flag: "flag-sc"
    }, {
      name: "Sudan",
      flag: "flag-sd"
    }, {
      name: "Sweden",
      flag: "flag-se"
    }, {
      name: "Singapore",
      flag: "flag-sg"
    }, {
      name: "Saint Helena, Ascension and Tristan da Cunha",
      flag: "flag-sh"
    }, {
      name: "Slovenia",
      flag: "flag-si"
    }, {
      name: "Svalbard and Jan Mayen",
      flag: "flag-sj"
    }, {
      name: "Slovakia",
      flag: "flag-sk"
    }, {
      name: "Sierra Leone",
      flag: "flag-sl"
    }, {
      name: "San Marino",
      flag: "flag-sm"
    }, {
      name: "Senegal",
      flag: "flag-sn"
    }, {
      name: "Somalia",
      flag: "flag-so"
    }, {
      name: "Suriname",
      flag: "flag-sr"
    }, {
      name: "South Sudan",
      flag: "flag-ss"
    }, {
      name: "Sao Tome and Principe",
      flag: "flag-st"
    }, {
      name: "El Salvador",
      flag: "flag-sv"
    }, {
      name: "Sint Maarten (Dutch part)",
      flag: "flag-sx"
    }, {
      name: "Syrian Arab Republic",
      flag: "flag-sy"
    }, {
      name: "Swaziland",
      flag: "flag-sz"
    }, {
      name: "Turks and Caicos Islands",
      flag: "flag-tc"
    }, {
      name: "Chad",
      flag: "flag-td"
    }, {
      name: "French Southern Territories",
      flag: "flag-tf"
    }, {
      name: "Togo",
      flag: "flag-tg"
    }, {
      name: "Thailand",
      flag: "flag-th"
    }, {
      name: "Tajikistan",
      flag: "flag-tj"
    }, {
      name: "Tokelau",
      flag: "flag-tk"
    }, {
      name: "Timor-Leste",
      flag: "flag-tl"
    }, {
      name: "Turkmenistan",
      flag: "flag-tm"
    }, {
      name: "Tunisia",
      flag: "flag-tn"
    }, {
      name: "Tonga",
      flag: "flag-to"
    }, {
      name: "Turkey",
      flag: "flag-tr"
    }, {
      name: "Trinidad and Tobago",
      flag: "flag-tt"
    }, {
      name: "Tuvalu",
      flag: "flag-tv"
    }, {
      name: "Taiwan, Province of China",
      flag: "flag-tw"
    }, {
      name: "Tanzania, United Republic of",
      flag: "flag-tz"
    }, {
      name: "Ukraine",
      flag: "flag-ua"
    }, {
      name: "Uganda",
      flag: "flag-ug"
    }, {
      name: "United States Minor Outlying Islands",
      flag: "flag-um"
    }, {
      name: "United States of America",
      flag: "flag-us"
    }, {
      name: "Uruguay",
      flag: "flag-uy"
    }, {
      name: "Uzbekistan",
      flag: "flag-uz"
    }, {
      name: "Holy See",
      flag: "flag-va"
    }, {
      name: "Saint Vincent and the Grenadines",
      flag: "flag-vc"
    }, {
      name: "Venezuela, Bolivarian Republic of",
      flag: "flag-ve"
    }, {
      name: "Virgin Islands, British",
      flag: "flag-vg"
    }, {
      name: "Virgin Islands, U.S.",
      flag: "flag-vi"
    }, {
      name: "Viet Nam",
      flag: "flag-vn"
    }, {
      name: "Vanuatu",
      flag: "flag-vu"
    }, {
      name: "Wallis and Futuna",
      flag: "flag-wf"
    }, {
      name: "Samoa",
      flag: "flag-ws"
    }, {
      name: "Yemen",
      flag: "flag-ye"
    }, {
      name: "Mayotte",
      flag: "flag-yt"
    }, {
      name: "South Africa",
      flag: "flag-za"
    }, {
      name: "Zambia",
      flag: "flag-zm"
    }, {
      name: "Zimbabwe",
      flag: "flag-zw"
    }].filter(function (country) {
      return -1 != country.name.toLowerCase().indexOf($query.toLowerCase());
    });
  };
}]), angular.module("app").controller("SkillsCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.selectedSkill = 0, $scope.skillsVisible = !1, $scope.labels = ["Download Sales", "In-Store Sales", "Mail-Order Sales"], $scope.data = [300, 500, 100], $.getJSON("/skills.json", function (data) {
    $scope.skills = data.filter(function (skill) {
      return skill.enabled;
    }), $scope.setSelectedSkill = function (skill) {
      $scope.selectedSkill = skill, $scope.selectedSkill.chartOptions = {
        cutoutPercentage: 80,
        circumference: 2 * Math.PI,
        maintainAspectRatio: !0,
        tooltips: {
          enabled: !1
        }
      }, $scope.selectedSkill.chartStyle = {
        "background-image": "url(/skills/" + $scope.selectedSkill.image + ")",
        "background-repeat": "no-repeat",
        "background-size": "60%",
        "background-position": "50% 50%"
      };
    }, $scope.setSelectedSkill($scope.skills[0]), $scope.$apply();
  });
}]), angular.module("app").controller("TenThingsCtrl", ["$scope", "BotsSvc", function ($scope, BotsSvc) {
  function flash(element) {
    const color = $(element).css("background-color");
    $(element).animate({
      backgroundColor: "#FA8072"
    }, 100, () => {
      $(element).animate({
        backgroundColor: color
      }, 100);
    });
  }

  $scope.categories = ["Music", "Television", "Movies", "Entertainment", "Geography", "History", "Science", "Gaming", "Sports", "Religion", "Art", "Literature", "Misc", "Funny", "Food and Drink", "Society", "Nature", "Technology", "Language", "Business", "Internet"], $scope.keyDown = e => {
    switch ((e = e || window.event).keyCode) {
      case 9:
        $("#new-blurb").is(":focus") && setTimeout(() => {
          $scope.addValue();
        }, 100);
        break;

      case 13:
        $("#new-blurb").is(":focus") ? $scope.addValue() : $("#new-value").is(":focus") && $("#new-blurb").focus();
    }
  }, $scope.categoryFilters = $scope.categories.map(category => category), $scope.categoryFilters.push("All"), $scope.categoryFilters.push("Blank"), $scope.categoryFilter = "All", $scope.searchName = "", $scope.newItem = {}, $scope.setCategoryFilter = category => {
    $scope.categoryFilter = category;
  }, $scope.setUserFilter = user => {
    $scope.userFilter = user;
  }, $scope.filteredLists = () => $scope.lists ? $scope.lists.filter(({
    category,
    creator
  }) => "All" === $scope.categoryFilter && "All" === $scope.userFilter || ("All" !== $scope.categoryFilter && "All" === $scope.userFilter ? category ? category === $scope.categoryFilter : "Blank" === $scope.categoryFilter : "All" === $scope.categoryFilter && "All" !== $scope.userFilter ? creator === $scope.userFilter : category ? category === $scope.categoryFilter && creator === $scope.userFilter : "Blank" === $scope.categoryFilter && creator === $scope.userFilter)).filter(({
    name
  }) => !name || name.toLowerCase().indexOf($scope.searchName.toLowerCase()) >= 0) : [], $scope.$on("login", _ => {
    $scope.getLists();
  }), $scope.sort = sortBy => {
    $scope.sortValue === sortBy ? $scope.sortDirection = !$scope.sortDirection : ($scope.sortValue = sortBy, $scope.sortDirection = !0), $scope.sorter = ($scope.sortDirection ? "+" : "-") + $scope.sortValue;
  }, $scope.sortValue = "date", $scope.sortDirection = !0, $scope.sortList = "value", $scope.sort("date"), $scope.getCategoryCount = category => $scope.lists ? $scope.lists.filter(list => !("All" !== category && list.category !== category || "All" !== $scope.userFilter && list.creator.username !== $scope.userFilter)).length : 0, $scope.getLists = () => {
    $scope.loading = !0, BotsSvc.getLists($scope.currentUser).then(({
      data
    }) => {
      $scope.lists = data, $scope.userFilters = {}, $scope.userFilters.All = $scope.lists.length, $scope.userFilters = $scope.lists.sort((list1, list2) => list1.creator > list2.creator).reduce((users, {
        creator
      }) => (users[creator] || (users[creator] = 0), users[creator]++, users), $scope.userFilters), $scope.userCount = Object.keys($scope.userFilters).length, $scope.userFilter = "All", $scope.loading = !1;
    });
  }, $scope.selectList = list => {
    BotsSvc.getList(list).then(({
      data
    }) => {
      $scope.selectedList = data;
    });
  }, $scope.selectCategory = category => {
    $scope.selectedList.category = category, $("#category-select").hide();
  }, $scope.addList = () => {
    $scope.selectedList = {
      name: "",
      creator: $scope.currentUser._id,
      date: new Date(),
      values: [],
      answers: 0,
      isDynamic: !0,
      category: ""
    };
  }, $scope.addValue = () => {
    $scope.newItem.value && (_.some($scope.selectedList.values, value => value == $scope.newItem.value) ? alert(`${$scope.newItem.value} is already in the list`) : ($scope.newItem.creator = $scope.currentUser._id, $scope.selectedList.values.unshift(JSON.parse(JSON.stringify($scope.newItem))), $scope.selectedList.answers++, $scope.newItem.value = "", $scope.newItem.blurb = "", $scope.selectedList.values.length >= 10 && $scope.selectedList.name && $scope.selectedList.category && $scope.saveList($scope.selectedList))), $("#new-value").focus();
  }, $scope.reportList = list => {
    BotsSvc.reportList($scope.currentUser, list);
  }, $scope.saveList = list => {
    list.values = list.values.filter(({
      value
    }) => value), list.values.length >= 10 && list.name && list.category ? ($scope.saving = !0, BotsSvc.saveList($scope.currentUser, list).then(({
      data
    }) => {
      if ($scope.selectedList._id) {
        for (let i = 0; i < $scope.lists.length; i++) if ($scope.lists[i]._id === data._id) {
          $scope.lists[i] = data;
          break;
        }

        $scope.selectList(list);
      } else $scope.lists.unshift(data), $scope.selectList(data);

      $scope.saving = !1;
    }, err => {
      console.error(err), $scope.saving = !1;
    })) : list.values.length < 10 ? alert("Lists must contain 10 or more values!") : list.name ? flash("#list-category") : flash("#list-name");
  }, $scope.deleteList = list => {
    list._id ? confirm("Are you sure you want to delete this list?") && BotsSvc.deleteList(list).then(response => {
      $scope.getLists(), $scope.selectedList = null;
    }) : ($scope.lists = $scope.lists.filter(({
      _id
    }) => _id), $scope.selectedList = null);
  }, $scope.listButtonClass = list => {
    const values = list.values,
          blurbs = list.blurbs;
    return values === blurbs && list.description ? "btn-default" : 0 !== blurbs || list.description ? 0 === blurbs && list.description ? "btn-info" : "btn-primary" : "btn-warning";
  };
}]), angular.module("app").controller("WorkoutCtrl", ["$scope", function ($scope) {
  $scope.timeRemaining = 0, $scope.timeExercising = 30, $scope.timeResting = 10, $scope.rest = !1;
  var exercising,
      sounds = {
    on: new Audio("on.wav"),
    off: new Audio("off.wav"),
    switch: new Audio("switch.wav")
  },
      exercises = [{
    name: "Jumping Jacks",
    split: !1
  }, {
    name: "Wall Sit",
    split: !1
  }, {
    name: "Push-Up",
    split: !1
  }, {
    name: "Crunch",
    split: !1
  }, {
    name: "Step-Up",
    split: !0
  }, {
    name: "Squat",
    split: !1
  }, {
    name: "Triceps Dip",
    split: !1
  }, {
    name: "Plank",
    split: !1
  }, {
    name: "High Knees",
    split: !1
  }, {
    name: "Lunge",
    split: !1
  }, {
    name: "Push-Up with Rotation",
    split: !1
  }, {
    name: "Side Plank",
    split: !0
  }];
  $scope.progress = function () {
    return exercises.length - Math.floor($scope.timeRemaining / ($scope.timeExercising + $scope.timeResting)) + "/" + exercises.length;
  }, $scope.workout = function () {
    var excerciseTime = $scope.timeExercising + $scope.timeResting;
    $scope.timeRemaining ? (clearInterval(exercising), $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.exercise = {
      name: "",
      split: !1
    }) : ($scope.timeRemaining = exercises.length * excerciseTime, exercising = setInterval(function () {
      if ($scope.timeRemaining--, 0 === $scope.timeRemaining) return $scope.exercise = {
        name: "Finished! Congrats!",
        split: !1
      }, $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.$apply(), clearInterval(exercising);
      var currentExercise = Math.floor($scope.timeRemaining / excerciseTime),
          timer = $scope.timeRemaining - currentExercise * excerciseTime;
      $scope.timer = timer > $scope.timeExercising ? timer - $scope.timeExercising : timer, timer > $scope.timeExercising ? $scope.rest = !0 : $scope.rest = !1, $scope.exercise = exercises[exercises.length - currentExercise - 1], timer === $scope.timeExercising ? sounds.on.play() : 0 === timer ? sounds.off.play() : $scope.exercise.split && timer === Math.floor($scope.timeExercising / 2) && sounds.switch.play(), $scope.$apply();
    }, 1e3));
  };
}]), angular.module("app").directive("head", ["$rootScope", "$state", "$compile", "$interpolate", function ($rootScope, $state, $compile, $interpolate) {
  var getStyle = function (templateStyleUrl) {
    var style = {
      href: templateStyleUrl,
      rel: "stylesheet"
    };
    return style.href.match(/\.less$/) && (style.rel = "stylesheet/less"), style;
  };

  return {
    restrict: "E",
    link: function (scope, elem) {
      scope.templateStyles = [];
      var html = '<link ng-attr-rel="{{style.rel}}" ng-repeat="style in templateStyles" ng-href="{{style.href}}">';
      html = (html = html.replace(/\{\{/g, $interpolate.startSymbol())).replace(/\}\}/g, $interpolate.endSymbol()), elem.append($compile(html)(scope)), $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
        scope.templateStyles = function (state) {
          for (var states = {}; "" !== state.name;) {
            var parent = $state.get("^", state);
            states[parent.name] || (states[parent.name] = {}), state.templateStyleUrl && (states[parent.name][""] || (states[parent.name][""] = getStyle(state.templateStyleUrl))), state.views && _.forEach(state.views, function (view, key) {
              if (view.templateStyleUrl) return (key = key.split("@"))[1] ? (states[key[1]] || (states[key[1]] = {}), void (states[key[1]][key[0]] || (states[key[1]][key[0]] = getStyle(view.templateStyleUrl)))) : void (states[parent.name][key[0]] = getStyle(view.templateStyleUrl));
            }), state = parent;
          }

          var flat = [];
          return _.forEach(states, function (views) {
            _.forEach(views, function (style) {
              _.includes(flat, style) || flat.push(style);
            });
          }), flat.reverse(), flat;
        }(toState);
      });
    }
  };
}]), angular.module("app").service("BotsSvc", ["$http", function ($http) {
  this.getLists = function (user) {
    return $http.get("/api/bots/lists");
  }, this.getList = function (list) {
    return $http.get("/api/bots/lists/" + list._id);
  }, this.saveList = function (user, list) {
    return $http.put("/api/bots/lists", {
      user,
      list
    });
  }, this.reportList = function (user, list) {
    $http.get("/api/bots/lists/" + list._id + "/report/" + user._id);
  }, this.deleteList = function (list) {
    return $http.delete("/api/bots/lists/" + list._id);
  };
}]), angular.module("app").service("CategoriesSvc", ["$http", function ($http) {
  var svc = this;
  svc.getCategories = function () {
    return $http.get("/api/categories");
  }, svc.getTasks = function (category) {
    return $http.get("/api/categories/" + category);
  }, svc.addCategory = function (category) {
    return $http.post("/api/categories/", category);
  }, svc.addTask = function (category, task) {
    return $http.post("/api/categories/" + category + "/tasks", task);
  }, svc.setPriorityList = function (list) {
    svc.choices = list, svc.priorityList = [];

    for (var i = 0; i < list.length; i++) for (var j = i + 1; j < list.length; j++) {
      var random = Math.round(Math.random());
      svc.priorityList.push({
        id: 0,
        firstChoice: list[0 === random ? i : j].name,
        secondChoice: list[0 === random ? j : i].name,
        choice: ""
      });
    }

    for (i in function (array) {
      var t,
          i,
          m = array.length;

      for (; m;) i = Math.floor(Math.random() * m--), t = array[m], array[m] = array[i], array[i] = t;
    }(svc.priorityList), svc.priorityList) svc.priorityList[i].id = i + 1;
  }, svc.getPriorityList = function (list) {
    return svc.priorityList;
  };
}]), angular.module("app").service("EmailSvc", ["$http", function ($http) {
  this.send = function (email) {
    return console.log(email), $http.post("/api/email", email);
  };
}]), angular.module("app").service("FileSvc", ["$http", function ($http) {
  this.getImages = function (folder) {
    return $http.get("/api/files/images/" + folder);
  };
}]), angular.module("app").service("GameSvc", ["$http", function ($http) {
  this.getHighscore = function (game, user) {
    return $http.get("/api/games/" + game + "/" + user + "/highscore");
  }, this.setHighscore = function (game, user, score) {
    return $http.post("/api/games/" + game + "/" + user + "/highscore", {
      score
    });
  };
}]), angular.module("app").service("LanguageSvc", function () {
  var svc = this;
  svc.languages = [{
    code: "EN",
    name: "English",
    flag: "flag-icon-gb"
  }, {
    code: "NL",
    name: "Nederlands",
    flag: "flag-icon-nl"
  }, {
    code: "FR",
    name: "Français",
    flag: "flag-icon-fr"
  }], svc.text = [{
    code: "EN"
  }, {
    code: "NL"
  }, {
    code: "FR"
  }], svc.selectedLanguage = svc.languages[0], svc.setLanguage = function (language) {
    return svc.selectedLanguage = language, language;
  }, svc.getLanguage = function () {
    return svc.selectedLanguage;
  };
}), angular.module("app").service("PostsSvc", ["$http", function ($http) {
  this.fetch = function () {
    return $http.get("/api/posts");
  }, this.create = function (post) {
    return $http.post("/api/posts", post);
  }, this.getPost = function (post) {
    return $http.get("/api/posts/" + post._id);
  };
}]), angular.module("app").service("UserSvc", ["$http", function ($http) {
  var svc = this;
  svc.getUser = function () {
    return $http.get("/api/users");
  }, svc.setToken = function (token) {
    return $http.defaults.headers.common["X-Auth"] = token, svc.getUser();
  }, svc.authenticate = function (user) {
    return $http.post("/api/users/authenticate", {
      user
    }).then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.login = function (user) {
    return $http.get("/api/users/" + user + "/login").then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.updateUser = function (user) {
    return $http.post("/api/users/" + user._id, {
      user
    }).then(function () {
      return svc.getUser();
    });
  }, svc.checkPassword = function (user, password) {
    return $http.post("/api/users/" + user + "/verification", {
      password
    });
  }, svc.changePassword = function (user, oldPassword, newPassword) {
    return $http.post("/api/users/" + user + "/password", {
      oldPassword,
      newPassword
    });
  }, svc.changeUsername = function (user, newUsername) {
    return $http.post("/api/users/" + user + "/username", {
      newUsername
    }).then(function () {
      return svc.getUser();
    });
  }, svc.logout = function () {
    window.localStorage.clear(), $http.defaults.headers.common["X-Auth"] = "";
  }, svc.createUser = function (username, password) {
    return $http.post("/api/users", {
      username,
      password
    }).then(function () {
      return svc.login(username, password);
    });
  };
}]), angular.module("app").controller("QuizGoogleCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("google").then(function (response) {
    $scope.images = response.data;
  });
}]), angular.module("app").controller("QuizLogosCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("logos").then(function (response) {
    $scope.images = response.data;
  });
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInJvdXRlcy5qcyIsIndlYnNvY2tldHMuanMiLCJjb250cm9sbGVycy9hcHAuY3RybC5qcyIsImNvbnRyb2xsZXJzL2FzdGVyb2lkcy5jdHJsLmpzIiwiY29udHJvbGxlcnMvYnViYmxlcy5jdHJsLmpzIiwiY29udHJvbGxlcnMvY29udGFjdC5jdHJsLmpzIiwiY29udHJvbGxlcnMvZXhwZXJpZW5jZS5jdHJsLmpzIiwiY29udHJvbGxlcnMvaG9iYmllcy5jdHJsLmpzIiwiY29udHJvbGxlcnMvbGVtbWluZ3MuY3RybC5qcyIsImNvbnRyb2xsZXJzL2xpc3RzLmN0cmwuanMiLCJjb250cm9sbGVycy9sb2dpbi5jdHJsLmpzIiwiY29udHJvbGxlcnMvcG9zdHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL3ByaW9yaXRpemUuY3RybC5qcyIsImNvbnRyb2xsZXJzL3Byb2ZpbGUuY3RybC5qcyIsImNvbnRyb2xsZXJzL3NraWxscy5jdHJsLmpzIiwiY29udHJvbGxlcnMvdGVudGhpbmdzLmN0cmwuanMiLCJhcHAuanMiLCJjb250cm9sbGVycy93b3Jrb3V0LmN0cmwuanMiLCJkaXJlY3RpdmVzL3VpLXJvdXRlci1zdHlsZXMuZGlyLmpzIiwic2VydmljZXMvYm90cy5zdmMuanMiLCJzZXJ2aWNlcy9jYXRlZ29yaWVzLnN2Yy5qcyIsInNlcnZpY2VzL2VtYWlsLnN2Yy5qcyIsInNlcnZpY2VzL2ZpbGUuc3ZjLmpzIiwic2VydmljZXMvZ2FtZS5zdmMuanMiLCJzZXJ2aWNlcy9sYW5ndWFnZS5zdmMuanMiLCJzZXJ2aWNlcy9wb3N0cy5zdmMuanMiLCJzZXJ2aWNlcy91c2VyLnN2Yy5qcyIsImNvbnRyb2xsZXJzL3F1aXp6ZXMvZ29vZ2xlLmN0cmwuanMiLCJjb250cm9sbGVycy9xdWl6emVzL2xvZ29zLmN0cmwuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJHVybFNlcnZpY2VQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwib3RoZXJ3aXNlIiwic3RyaWN0TW9kZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiaHRtbDVNb2RlIiwiZW5hYmxlZCIsInJlcXVpcmVCYXNlIiwic2VydmljZSIsIiRyb290U2NvcGUiLCIkdGltZW91dCIsImNvbm5lY3Rpb24iLCJjb25uZWN0IiwiV2ViU29ja2V0Iiwid2luZG93IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3QiLCJvbm9wZW4iLCJjb25zb2xlIiwibG9nIiwib25jbG9zZSIsImUiLCJvbmVycm9yIiwicmVhZHlTdGF0ZSIsIm9ubWVzc2FnZSIsInBheWxvYWQiLCJKU09OIiwicGFyc2UiLCJkYXRhIiwiJGJyb2FkY2FzdCIsInRvcGljIiwidGhpcyIsInNlbmQiLCJqc29uIiwic3RyaW5naWZ5IiwicnVuIiwiV2ViU29ja2V0U3ZjIiwiJHNjb3BlIiwiJGxvY2F0aW9uIiwiTGFuZ3VhZ2VTdmMiLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VyIiwibG9nZ2VkSW4iLCJsb2NhbFN0b3JhZ2UiLCJfaWQiLCJjdXJyZW50VXNlciIsIiQiLCJsb2FkIiwiZmFkZU91dCIsImZhZGVJbiIsInRoZW1lQ291bnRlciIsInRvZGF5IiwiRGF0ZSIsInllYXIiLCJnZXRGdWxsWWVhciIsInJhbmRvbSIsIk1hdGgiLCJmbG9vciIsImZsaXBUaGVtZSIsInNob3ciLCJoaWRlIiwic2V0VGltZW91dCIsImdldEpTT04iLCJza2lsbHMiLCJmaWx0ZXIiLCJza2lsbCIsImhvYmJpZXMiLCJqb2JzIiwiZm9yRWFjaCIsImpvYiIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJnZXRUaW1lU3BhbiIsImxhbmd1YWdlcyIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJnZXRMYW5ndWFnZSIsInNlbGVjdExhbmd1YWdlIiwibGFuZ3VhZ2UiLCJzZXRMYW5ndWFnZSIsImhvdmVyZGl2IiwiZGl2aWQiLCJsZWZ0IiwiY2xpZW50WCIsInRvcCIsImNsaWVudFkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3NzIiwidG9nZ2xlIiwic29jaWFsTWVkaWEiLCJuYW1lIiwiaWNvbiIsInRoZW4iLCJyZXNwb25zZSIsIiRvbiIsIl8iLCJiaXJ0aERhdGUiLCJsb2FkaW5nIiwibG9nb3V0IiwiZmlyZWJhc2UiLCJhdXRoIiwic2lnbk91dCIsImNsZWFyIiwiY2F0Y2giLCJlcnJvciIsImZvcm1hdERhdGUiLCJkYXRlIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwiR2FtZVN2YyIsImFubm91bmNlIiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImZvbnQiLCJmaWxsU3R5bGUiLCJ0ZXh0QWxpZ24iLCJzaG90cyIsImFzdGVyb2lkcyIsInBvd2VydXBzIiwiZXhwbG9zaW9ucyIsIm1hcCIsInNwYWNlcGljcyIsInNwYWNlIiwicG93ZXJ1cFR5cGVzIiwiYW5ub3VuY2VtZW50IiwiY3ljbGUiLCJyb3dzIiwiY29sdW1ucyIsInNpemUiLCJpIiwiZGlyZWN0aW9uIiwiaW1nIiwiSW1hZ2UiLCJhY3RpdmF0ZSIsInNwYWNlc2hpcCIsIm1heFNwZWVkIiwiY29vbGRvd24iLCJjb29sZG93blRpbWUiLCJyYW5nZSIsInNoaWVsZCIsImV4cGxvZGUiLCJzcGF3bkFzdGVyb2lkcyIsInBvd2VydXAiLCJhcnJheSIsInNyYyIsImV4cGxvc2lvbkltYWdlIiwiZXZhbHVhdGVLZXlzIiwicGxheWluZyIsInNob290Iiwicm90YXRpb24iLCJzcGVlZCIsInNjb3JlIiwiJGFwcGx5IiwiU3BhY2VzaGlwIiwiYXV0b1NwYXduIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImlkIiwicm91bmQiLCJBc3Rlcm9pZCIsIndpZHRoIiwiaGVpZ2h0IiwiY2Fubm9uIiwieCIsInkiLCJwb3NpdGlvbiIsImFuZ2xlIiwiU2hvdCIsIm1vdmUiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiZmlsbCIsImFzdGVyb2lkIiwiaGl0IiwiZ2FtZU92ZXIiLCJjb3MiLCJzaW4iLCJsaWZlc3BhbiIsImdldEVudHJ5UG9zaXRpb24iLCJyb3RhdGlvblNwZWVkIiwiRXhwbG9zaW9uIiwic2hvdCIsInBvaW50cyIsInNwYXduUG93ZXJ1cCIsIm9iamVjdCIsIlBvd2VydXAiLCJkZWxheSIsInNhdmUiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJjb2x1bW4iLCJyb3ciLCJkcmF3SW1hZ2UiLCJyZXN0b3JlIiwiZ3JpZFgiLCJncmlkWSIsIm9iamVjdDEiLCJvYmplY3QyIiwiYW1vdW50IiwiaGlnaHNjb3JlIiwic2V0SGlnaHNjb3JlIiwicmVzaXplQ2FudmFzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImtleUNvZGUiLCJ3aGljaCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRyYXciLCJjbGVhclJlY3QiLCJncmFkaWVudCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwidGFsbHkiLCJmaWxsVGV4dCIsIm1lYXN1cmVUZXh0IiwiYmFja2dyb3VuZEltYWdlIiwiYnViYmxlcyIsImNvbG9ycyIsIkJ1YmJsZSIsInJhZGl1cyIsImV4cGFuZGluZyIsImNpcmN1bWZlcmVuY2UiLCJtYXhSYWRpdXMiLCJ2eCIsInZ5IiwiZmlsdGVyQnViYmxlcyIsInB1c2giLCJidWJibGUiLCJFbWFpbFN2YyIsIm9wdGlvbnMiLCJ0ZXh0IiwiY29udGFjdCIsImVtYWlsIiwicGhvbmUiLCJhYm91dCIsIm1lc3NhZ2UiLCJzZW5kaW5nIiwic2VudCIsInN0YXR1cyIsImVyciIsImdldFNraWxsIiwic2tpbGxDb2RlIiwiZmluZCIsImNvZGUiLCIkd2luZG93IiwiaG9iYnlTZWxlY3RvclZpc2libGUiLCJzZWxlY3RlZEhvYmJ5Iiwic2VsZWN0SG9iYnkiLCJob2JieSIsInNob3dIb2JieSIsInZhbHVlIiwiaW5kZXgiLCJpbWFnZXMiLCJMRUZUIiwiUklHSFQiLCJsZW1taW5nc0ltYWdlIiwiZGVjb3JJbWFnZSIsImxlbW1pbmdzIiwic3RhcnRlZCIsImFjdGlvbnMiLCJ3YWxrIiwic3RhcnQiLCJlbmQiLCJyZXZlcnNlIiwiaHVoIiwiZmFsbCIsImZseSIsInN0b3AiLCJjbGltYiIsImJ1aWxkIiwicHVuY2giLCJkaWciLCJMZW1taW5nIiwiaW5pdCIsImFjdCIsImFjdGlvbiIsImFuaW1hdGlvbiIsInNjYWxlIiwiaGF0Y2giLCJvcGVuIiwicmVjdCIsIkNhdGVnb3JpZXNTdmMiLCJzaG93Q2F0ZWdvcnkiLCJnZXRDYXRlZ29yaWVzIiwiY2F0ZWdvcmllcyIsInRhc2tzIiwiaiIsImNhdGVnb3J5IiwidGFzayIsInNlbGVjdENhdGVnb3J5Iiwic2VsZWN0ZWRDYXRlZ29yeSIsInNlbGVjdGVkVGFza3MiLCJzZWxlY3RhYmxlVGFza3MiLCJlbnRlcmVkQ2F0ZWdvcnkiLCJuZXdDYXRlZ29yeSIsImZvdW5kIiwiYWRkQ2F0ZWdvcnkiLCJuZXdUYXNrIiwic2VsZWN0VGFzayIsImFkZFRhc2siLCJlbnRlcmVkVGFzayIsInJlbW92ZVRhc2siLCJ1bnNlbGVjdFRhc2siLCJ0YXNrTGlzdCIsInNwbGljZSIsImluZGV4T2YiLCJzdGFydFByaW9yaXRpemluZyIsInNldFByaW9yaXR5TGlzdCIsInBhdGgiLCJnZXRRdWVzdGlvbnMiLCJjb3VudGVyIiwidWkiLCJmaXJlYmFzZXVpIiwiQXV0aFVJIiwic3RhcnRVSSIsImNhbGxiYWNrcyIsInNpZ25JblN1Y2Nlc3MiLCJjcmVkZW50aWFsIiwicmVkaXJlY3RVcmwiLCJnZXRJZFRva2VuIiwiaWRUb2tlbiIsImF1dGhlbnRpY2F0ZSIsImRpc3BsYXlOYW1lIiwicGhvdG9VUkwiLCJlbWFpbFZlcmlmaWVkIiwiJGVtaXQiLCJtb2RhbCIsInR5cGUiLCJzaWduSW5GYWlsdXJlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjcmVkIiwic2lnbkluV2l0aENyZWRlbnRpYWwiLCJ1aVNob3duIiwic3R5bGUiLCJkaXNwbGF5Iiwic2lnbkluU3VjY2Vzc1VybCIsInNpZ25Jbk9wdGlvbnMiLCJHb29nbGVBdXRoUHJvdmlkZXIiLCJQUk9WSURFUl9JRCIsIkZhY2Vib29rQXV0aFByb3ZpZGVyIiwic2lnbkluRmxvdyIsImV2ZW50IiwicmVzZXQiLCIkZmlsdGVyIiwiUG9zdHNTdmMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5IiwicG9zdCIsImZldGNoIiwicG9zdHMiLCJnZXRQb3N0IiwidW5zaGlmdCIsInByaW9yaXR5TGlzdCIsImdldFByaW9yaXR5TGlzdCIsInNlbGVjdGVkUXVlc3Rpb24iLCJjdXJyZW50UXVlc3Rpb24iLCJkb25lIiwibWFrZUNob2ljZSIsImNob2ljZSIsImZpcnN0Q2hvaWNlIiwic2Vjb25kQ2hvaWNlIiwiZ2V0QnV0dG9uVmFsdWUiLCJzZWxlY3RRdWVzdGlvbiIsInF1ZXN0aW9uIiwiZ2V0RmlsdGVyZWRQcmlvcml0eUxpc3QiLCJzb3J0IiwiYSIsImIiLCJnZXRDaG9pY2VzTWFkZSIsImNob2ljZXNNYWRlIiwiZ2V0QnV0dG9uQ2xhc3MiLCJzaG93Q2hvaWNlcyIsImNoYXJ0Q2xpY2siLCJjaGFydCIsImdldFNlZ21lbnRzQXRFdmVudCIsInNob3dSZXN1bHRzIiwicmVzcG9uc2l2ZSIsInNlZ21lbnRTaG93U3Ryb2tlIiwic2VnbWVudFN0cm9rZUNvbG9yIiwic2VnbWVudFN0cm9rZVdpZHRoIiwicGVyY2VudGFnZUlubmVyQ3V0b3V0IiwiYW5pbWF0aW9uU3RlcHMiLCJhbmltYXRpb25FYXNpbmciLCJhbmltYXRlUm90YXRlIiwiYW5pbWF0ZVNjYWxlIiwibGVnZW5kVGVtcGxhdGUiLCJjaG9pY2VzIiwidm90ZXMiLCJsYWJlbCIsIm9mZnNldCIsImdlbmRlciIsInNleCIsImlkZW50aXR5Iiwic2V4ZXMiLCJpZGVudGl0aWVzIiwiZGF0ZU9wdGlvbnMiLCJtYXhEYXRlIiwibWluRGF0ZSIsImluaXREYXRlIiwiZGF0ZXBpY2tlck1vZGUiLCJwZXJjZW50YWdlIiwic3RhcnRTbGlkZXIiLCJkcmFnU2xpZGVyIiwic3RvcFNsaWRlciIsInVzZXJuYW1lVG9nZ2xlIiwicGFzc3dvcmRUb2dnbGUiLCJ0b2dnbGVVc2VybmFtZSIsIm5ld1VzZXJuYW1lIiwidXNlcm5hbWUiLCJ0b2dnbGVQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwiY29uZmlybVBhc3N3b3JkIiwiY2hlY2tQYXNzd29yZCIsInBhc3N3b3JkIiwib3JpZ2luYWxCZyIsImFuaW1hdGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjaGFuZ2VQYXNzd29yZCIsIm9sZFBhc3N3b3JkIiwiY2hhbmdlVXNlcm5hbWUiLCJ1cGRhdGVVc2VyIiwiJHdhdGNoIiwibG9hZENvdW50cmllcyIsIiRxdWVyeSIsImZsYWciLCJ0aWRiaXQiLCJjb3VudHJ5IiwidG9Mb3dlckNhc2UiLCJzZWxlY3RlZFNraWxsIiwic2tpbGxzVmlzaWJsZSIsImxhYmVscyIsInNldFNlbGVjdGVkU2tpbGwiLCJjaGFydE9wdGlvbnMiLCJjdXRvdXRQZXJjZW50YWdlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsInRvb2x0aXBzIiwiY2hhcnRTdHlsZSIsImJhY2tncm91bmQtaW1hZ2UiLCJpbWFnZSIsImJhY2tncm91bmQtcmVwZWF0IiwiYmFja2dyb3VuZC1zaXplIiwiYmFja2dyb3VuZC1wb3NpdGlvbiIsIkJvdHNTdmMiLCJmbGFzaCIsImVsZW1lbnQiLCJjb2xvciIsImtleURvd24iLCJpcyIsImFkZFZhbHVlIiwiZm9jdXMiLCJjYXRlZ29yeUZpbHRlcnMiLCJjYXRlZ29yeUZpbHRlciIsInNlYXJjaE5hbWUiLCJuZXdJdGVtIiwic2V0Q2F0ZWdvcnlGaWx0ZXIiLCJzZXRVc2VyRmlsdGVyIiwidXNlckZpbHRlciIsImZpbHRlcmVkTGlzdHMiLCJsaXN0cyIsImNyZWF0b3IiLCJnZXRMaXN0cyIsInNvcnRCeSIsInNvcnRWYWx1ZSIsInNvcnREaXJlY3Rpb24iLCJzb3J0ZXIiLCJzb3J0TGlzdCIsImdldENhdGVnb3J5Q291bnQiLCJsaXN0IiwidXNlckZpbHRlcnMiLCJBbGwiLCJsaXN0MSIsImxpc3QyIiwicmVkdWNlIiwidXNlcnMiLCJ1c2VyQ291bnQiLCJzZWxlY3RMaXN0IiwiZ2V0TGlzdCIsInNlbGVjdGVkTGlzdCIsImFkZExpc3QiLCJ2YWx1ZXMiLCJhbnN3ZXJzIiwiaXNEeW5hbWljIiwic29tZSIsImFsZXJ0IiwiYmx1cmIiLCJzYXZlTGlzdCIsInJlcG9ydExpc3QiLCJzYXZpbmciLCJkZWxldGVMaXN0IiwiY29uZmlybSIsImxpc3RCdXR0b25DbGFzcyIsImJsdXJicyIsImRlc2NyaXB0aW9uIiwidGltZVJlbWFpbmluZyIsInRpbWVFeGVyY2lzaW5nIiwidGltZVJlc3RpbmciLCJyZXN0IiwiZXhlcmNpc2luZyIsInNvdW5kcyIsIm9uIiwiQXVkaW8iLCJvZmYiLCJzd2l0Y2giLCJleGVyY2lzZXMiLCJzcGxpdCIsInByb2dyZXNzIiwid29ya291dCIsImV4Y2VyY2lzZVRpbWUiLCJjbGVhckludGVydmFsIiwidGltZXIiLCJleGVyY2lzZSIsInNldEludGVydmFsIiwiY3VycmVudEV4ZXJjaXNlIiwicGxheSIsImRpcmVjdGl2ZSIsIiRzdGF0ZSIsIiRjb21waWxlIiwiJGludGVycG9sYXRlIiwiZ2V0U3R5bGUiLCJ0ZW1wbGF0ZVN0eWxlVXJsIiwiaHJlZiIsInJlbCIsIm1hdGNoIiwicmVzdHJpY3QiLCJsaW5rIiwic2NvcGUiLCJlbGVtIiwidGVtcGxhdGVTdHlsZXMiLCJodG1sIiwicmVwbGFjZSIsInN0YXJ0U3ltYm9sIiwiZW5kU3ltYm9sIiwiYXBwZW5kIiwidG9TdGF0ZSIsInRvUGFyYW1zIiwiZnJvbVN0YXRlIiwiZnJvbVBhcmFtcyIsInN0YXRlcyIsInBhcmVudCIsImdldCIsInZpZXdzIiwidmlldyIsImtleSIsImZsYXQiLCJpbmNsdWRlcyIsImdldFN0eWxlcyIsIiRodHRwIiwicHV0IiwiZGVsZXRlIiwic3ZjIiwiZ2V0VGFza3MiLCJ0IiwibSIsInNodWZmbGUiLCJnZXRJbWFnZXMiLCJmb2xkZXIiLCJnZXRIaWdoc2NvcmUiLCJnYW1lIiwiZ2V0VXNlciIsInNldFRva2VuIiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJjcmVhdGVVc2VyIiwiRmlsZVN2YyJdLCJtYXBwaW5ncyI6IkFBT0FBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFBQSxDQUNBLFdBREEsRUFFQSxjQUZBLEVBR0EsV0FIQSxFQUlBLFlBSkEsRUFLQSxZQUxBLEVBTUEsYUFOQSxFQU9BLGFBUEEsRUFRQSxVQVJBLEVBU0EsWUFUQSxDQUFBQSxHQ1BBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FFLE1BREFGLENBQ0EsQ0FBQSxnQkFBQSxFQUFBLG9CQUFBLEVBQUEscUJBQUEsRUFBQSxtQkFBQSxFQUFBLFVBQUFHLGNBQUEsRUFBQUMsa0JBQUEsRUFBQUMsbUJBQUEsRUFBQUMsaUJBQUEsRUFBQUE7QUFFQUYsRUFBQUEsa0JBQUFBLENBQUFHLFNBQUFILENBQUEsT0FBQUEsR0FDQUMsbUJBQUFBLENBQUFILE1BQUFHLENBQUFHLFVBQUFILENBQUFHLENBQUEsQ0FBQUgsQ0FEQUQsRUFHQUQsY0FBQUEsQ0FDQU0sS0FEQU4sQ0FDQSxNQURBQSxFQUNBO0FBQ0FPLElBQUFBLEdBQUFBLEVBQUEsT0FEQTtBQUVBQyxJQUFBQSxXQUFBQSxFQUFBO0FBRkEsR0FEQVIsRUFLQU0sS0FMQU4sQ0FLQSxRQUxBQSxFQUtBO0FBQ0FPLElBQUFBLEdBQUFBLEVBQUEsU0FEQTtBQUVBQyxJQUFBQSxXQUFBQSxFQUFBO0FBRkEsR0FMQVIsRUFTQU0sS0FUQU4sQ0FTQSxPQVRBQSxFQVNBO0FBQ0FPLElBQUFBLEdBQUFBLEVBQUEsUUFEQTtBQUVBQyxJQUFBQSxXQUFBQSxFQUFBO0FBRkEsR0FUQVIsRUFhQU0sS0FiQU4sQ0FhQSxZQWJBQSxFQWFBO0FBQ0FPLElBQUFBLEdBQUFBLEVBQUEsYUFEQTtBQUVBRSxJQUFBQSxVQUFBQSxFQUFBLGdCQUZBO0FBR0FELElBQUFBLFdBQUFBLEVB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R0FBQSxHQUFBLEdBQUFBLElBQUFBLENBQUFDLEtBQUFELENBQUEsTUFBQSxNQUFBbUssS0FBQSxHQUFBLEdBQUFuSyxDQUFBLEdBQUEsR0FBQSxHQUFBQSxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLElBQUEsTUFBQW1LLEtBQUEsR0FBQSxHQUFBbkssQ0FBQSxHQUFBLEdBQUFnSyxDQURBQSxFQUVBQSxRQUFBQSxDQUFBRSxZQUFBRixDQUFBLEtBQUFBLEVBQUEsU0FBQWhLLElBQUFBLENBQUFDLEtBQUFELENBQUEsSUFBQSxNQUFBbUssS0FBQSxHQUFBLEdBQUFuSyxDQUFBLEdBQUEsR0FBQSxHQUFBQSxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLElBQUEsTUFBQW1LLEtBQUEsR0FBQSxHQUFBbkssQ0FBQSxHQUFBLEdBQUEsR0FBQUEsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxNQUFBLE1BQUFtSyxLQUFBLEdBQUEsR0FBQW5LLENBQUEsR0FBQSxHQUFBZ0ssQ0FGQUEsRUFHQUEsUUFBQUEsQ0FBQUUsWUFBQUYsQ0FBQSxNQUFBQSxFQUFBLFNBQUFoSyxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLElBQUEsTUFBQW1LLEtBQUEsR0FBQSxHQUFBbkssQ0FBQSxHQUFBLEdBQUEsR0FBQUEsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxNQUFBLE1BQUFtSyxLQUFBLEdBQUEsR0FBQW5LLENBQUEsR0FBQSxHQUFBLEdBQUFBLElBQUFBLENBQUFDLEtBQUFELENBQUEsSUFBQSxNQUFBbUssS0FBQSxHQUFBLEdBQUFuSyxDQUFBLEdBQUEsR0FBQWdLLENBSEFBLEVBSUFBLFFBQUFBLENBQUFFLFlBQUFGLENBQUEsS0FBQUEsRUFBQSxTQUFBaEssSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxNQUFBLE1BQUFtSyxLQUFBLEdBQUEsR0FBQW5LLENBQUEsR0FBQSxHQUFBLEdBQUFBLElBQUFBLENBQUFDLEtBQUFELENBQUEsSUFBQSxNQUFBbUssS0FBQSxHQUFBLEdBQUFuSyxDQUFBLEdBQUEsR0FBQSxHQUFBQSxJQUFBQSxD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LEVBQUE7QUFDQWtJLEVBQUFBLFVBQUFBLENBQUF0SCxHQUFBc0gsR0FBQSxvQkFBQUE7QUFDQSxNQUFBQyxRQUFBQSxHQUFBLEVBQUE7QUFBQSxNQUNBQyxPQUFBQSxHQUFBQSxDQUFBLENBREE7QUFBQSxNQUdBQyxPQUFBQSxHQUFBO0FBQ0FDLElBQUFBLElBQUFBLEVBQUE7QUFDQUMsTUFBQUEsS0FBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLENBREE7QUFFQUMsTUFBQUEsR0FBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxFQUFBLENBRkE7QUFHQTdJLE1BQUFBLE9BQUFBLEVBQUEsQ0FIQTtBQUlBRCxNQUFBQSxJQUFBQSxFQUFBLENBSkE7QUFLQStJLE1BQUFBLE9BQUFBLEVBQUFBLENBQUE7QUFMQSxLQURBO0FBUUFDLElBQUFBLEdBQUFBLEVBQUE7QUFDQUgsTUFBQUEsS0FBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLENBREE7QUFFQUMsTUFBQUEsR0FBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxFQUFBLENBRkE7QUFHQTdJLE1BQUFBLE9BQUFBLEVBQUEsQ0FIQTtBQUlBRCxNQUFBQSxJQUFBQSxFQUFBLENBSkE7QUFLQStJLE1BQUFBLE9BQUFBLEVBQUFBLENBQUE7QUFMQSxLQVJBO0FBZUFFLElBQUFBLElBQUFBLEVBQUE7QUFDQUosTUFBQUEsS0FBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxFQUFBLENBREE7QUFFQUMsTUFBQUEsR0FBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLENBRkE7QUFHQTdJLE1BQUFBLE9BQUFBLEVBQUEsQ0FIQTtBQUlBRCxNQUFBQSxJQUFBQSxFQUFBLENBSkE7QUFLQStJLE1BQUFBLE9BQUFBLEVBQUFBLENBQUE7QUFMQSxLQWZBO0FBc0JBRyxJQUFBQSxHQUFBQSxFQUFBO0FBQ0FMLE1BQUFBLEtBQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQSxDQURBO0FBRUFDLE1BQUFBLEdBQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUZB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QUFBd1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBUEEsRUFRQTtBQUFBeFYsTUFBQUEsSUFBQUEsRUFBQSxRQUFBO0FBQUF3VixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FSQSxFQVNBO0FBQUF4VixNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQXdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQVRBLEVBVUE7QUFBQXhWLE1BQUFBLElBQUFBLEVBQUEsV0FBQTtBQUFBd1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBVkEsRUFXQTtBQUFBeFYsTUFBQUEsSUFBQUEsRUFBQSxnQkFBQTtBQUFBd1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBWEEsRUFZQTtBQUFBeFYsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUF3VixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FaQSxFQWFBO0FBQUF4VixNQUFBQSxJQUFBQSxFQUFBLFdBQUE7QUFBQXdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWJBLEVBY0E7QUFBQXhWLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBd1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBZEEsRUFlQTtBQUFBeFYsTUFBQUEsSUFBQUEsRUFBQSxlQUFBO0FBQUF3VixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FmQSxFQWdCQTtBQUFBeFYsTUFBQUEsSUFBQUEsRUFBQSxZQUFBO0FBQUF3VixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FoQkEsRUFpQkE7QUFBQXhWLE1BQUFBLElBQUFBLEVBQUEsd0JBQUE7QUFBQXdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWpCQSxFQWtCQTtBQUFBeFYsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUF3VixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FsQkEsRUFtQkE7QUFBQXhWLE1BQUFBLElBQUFBLEVBQUEsWUFBQTtBQUFBd1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbkJBLEVBb0JBO0FBQUF4VixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQXdW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RUFHQWhkLElBSEFnZCxDQUdBLFlBQUE7QUFDQSxhQUFBRyxHQUFBQSxDQUFBdmdCLEtBQUF1Z0IsQ0FBQTdJLFFBQUE2SSxFQUFBeEksUUFBQXdJLENBQUE7QUFBQXhJLEtBSkFxSSxDQUFBO0FBSUFySSxHQWpFQXdJO0FBaUVBeEksQ0FyRUEsQ0FEQWpiLEMzQk9BQSxFNEJQQUEsT0FBQUEsQ0FBQUMsTUFBQUQsQ0FBQSxLQUFBQSxFQUNBWSxVQURBWixDQUNBLGdCQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBOEMsTUFBQSxFQUFBMmhCLE9BQUEsRUFBQUE7QUFDQUEsRUFBQUEsT0FBQUEsQ0FBQVgsU0FBQVcsQ0FBQSxRQUFBQSxFQUNBbmUsSUFEQW1lLENBQ0EsVUFBQWxlLFFBQUEsRUFBQUE7QUFDQXpELElBQUFBLE1BQUFBLENBQUErTixNQUFBL04sR0FBQXlELFFBQUFBLENBQUFsRSxJQUFBUztBQUFBVCxHQUZBb2lCO0FBRUFwaUIsQ0FIQSxDQURBckMsQzVCT0FBLEU2QlBBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsZUFEQUEsRUFDQSxDQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQThDLE1BQUEsRUFBQTJoQixPQUFBLEVBQUFBO0FBQ0FBLEVBQUFBLE9BQUFBLENBQUFYLFNBQUFXLENBQUEsT0FBQUEsRUFDQW5lLElBREFtZSxDQUNBLFVBQUFsZSxRQUFBLEVBQUFBO0FBQ0F6RCxJQUFBQSxNQUFBQSxDQUFBK04sTUFBQS9OLEdBQUF5RCxRQUFBQSxDQUFBbEUsSUFBQVM7QUFBQVQsR0FGQW9pQjtBQUVBcGlCLENBSEEsQ0FEQXJDLEM3Qk9BQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4kID0galF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XHJcbnZhciBib290c3RyYXAgPSByZXF1aXJlKCdib290c3RyYXAnKTtcclxudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XHJcbnZhciBhbmd1bGFyU2FuaXRpemUgPSByZXF1aXJlKCdhbmd1bGFyLXNhbml0aXplJyk7XHJcbnZhciBhbmd1bGFyQW5pbWF0ZSA9IHJlcXVpcmUoJ2FuZ3VsYXItYW5pbWF0ZScpO1xyXG4qL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xyXG4gICd1aS5yb3V0ZXInLFxyXG4gICd1aS5ib290c3RyYXAnLFxyXG4gICduZ0FuaW1hdGUnLFxyXG4gICduZ1Nhbml0aXplJyxcclxuICAnbmdEcmFnRHJvcCcsXHJcbiAgJ25nVGFnc0lucHV0JyxcclxuICAndmNSZWNhcHRjaGEnLFxyXG4gICdjaGFydC5qcycsXHJcbiAgJ3RjLmNoYXJ0anMnXHJcbl0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJHVybFNlcnZpY2VQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcclxuXHJcbiAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2hvbWUnKTtcclxuICAkdXJsU2VydmljZVByb3ZpZGVyLmNvbmZpZy5zdHJpY3RNb2RlKGZhbHNlKTtcclxuXHJcbiAgJHN0YXRlUHJvdmlkZXJcclxuICAuc3RhdGUoJ2hvbWUnLCB7XHJcbiAgICB1cmw6ICcvaG9tZScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy9ob21lLmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ3BvbGljeScsIHtcclxuICAgIHVybDogJy9wb2xpY3knLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcvcG9saWN5Lmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ3ByaW50Jywge1xyXG4gICAgdXJsOiAnL3ByaW50JyxcclxuICAgIHRlbXBsYXRlVXJsOiAnL3ByaW50Lmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ2V4cGVyaWVuY2UnLCB7XHJcbiAgICB1cmw6ICcvZXhwZXJpZW5jZScsXHJcbiAgICBjb250cm9sbGVyOiAnRXhwZXJpZW5jZUN0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcvZXhwZXJpZW5jZS5odG1sJ1xyXG4gIH0pXHJcbiAgLnN0YXRlKCdza2lsbHMnLCB7XHJcbiAgICB1cmw6ICcvc2tpbGxzJyxcclxuICAgIGNvbnRyb2xsZXI6ICdTa2lsbHNDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnL3NraWxscy5odG1sJ1xyXG4gIH0pXHJcbiAgLnN0YXRlKCdob2JiaWVzJywge1xyXG4gICAgdXJsOiAnL2hvYmJpZXMnLFxyXG4gICAgY29udHJvbGxlcjogJ0hvYmJpZXNDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnL2hvYmJpZXMuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgnY29udGFjdCcsIHtcclxuICAgIHVybDogJy9jb250YWN0JyxcclxuICAgIGNvbnRyb2xsZXI6ICdDb250YWN0Q3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy9jb250YWN0Lmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ3dvcmtvdXQnLCB7XHJcbiAgICB1cmw6ICcvd29ya291dCcsXHJcbiAgICBjb250cm9sbGVyOiAnV29ya291dEN0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcvd29ya291dC5odG1sJ1xyXG4gIH0pXHJcbiAgLnN0YXRlKCdwb3N0cycsIHtcclxuICAgIHVybDogJy9wb3N0cycsXHJcbiAgICBjb250cm9sbGVyOiAnUG9zdHNDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnL3Bvc3RzLmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ3Byb2ZpbGUnLCB7XHJcbiAgICB1cmw6ICcvcHJvZmlsZScsXHJcbiAgICBjb250cm9sbGVyOiAnUHJvZmlsZUN0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcvcHJvZmlsZS5odG1sJ1xyXG4gIH0pXHJcbiAgLnN0YXRlKCdsaXN0cycsIHtcclxuICAgIHVybDogJy9saXN0cycsXHJcbiAgICBjb250cm9sbGVyOiAnTGlzdHNDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnbGlzdHMuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgncHJpb3JpdGl6ZScsIHtcclxuICAgIHVybDogJy9wcmlvcml0aXplJyxcclxuICAgIGNvbnRyb2xsZXI6ICdQcmlvcml0aXplQ3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3ByaW9yaXRpemUuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgnYnViYmxlcycsIHtcclxuICAgIHVybDogJy9idWJibGVzJyxcclxuICAgIGNvbnRyb2xsZXI6ICdCdWJibGVzQ3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ2J1YmJsZXMuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgnYXN0ZXJvaWRzJywge1xyXG4gICAgdXJsOiAnL2FzdGVyb2lkcycsXHJcbiAgICBjb250cm9sbGVyOiAnQXN0ZXJvaWRzQ3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ2FzdGVyb2lkcy5odG1sJ1xyXG4gIH0pXHJcbiAgLnN0YXRlKCdsZW1taW5ncycsIHtcclxuICAgIHVybDogJy9sZW1taW5ncycsXHJcbiAgICBjb250cm9sbGVyOiAnTGVtbWluZ3NDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnbGVtbWluZ3MuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgnYm90cycsIHtcclxuICAgIHVybDogJy9ib3RzJyxcclxuICAgIGNvbnRyb2xsZXI6ICdUZW5UaGluZ3NDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndGVudGhpbmdzLmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ3RlbnRoaW5ncycsIHtcclxuICAgIHVybDogJy90ZW50aGluZ3MnLFxyXG4gICAgY29udHJvbGxlcjogJ1RlblRoaW5nc0N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW50aGluZ3MuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgncXVpei1nb29nbGUnLCB7XHJcbiAgICB1cmw6ICcvZ29vZ2xlJyxcclxuICAgIGNvbnRyb2xsZXI6ICdRdWl6R29vZ2xlQ3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3F1aXp6ZXMvZ29vZ2xlLmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ3F1aXotbG9nb3MnLCB7XHJcbiAgICB1cmw6ICcvbG9nb3MnLFxyXG4gICAgY29udHJvbGxlcjogJ1F1aXpMb2dvc0N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICdxdWl6emVzL2xvZ29zLmh0bWwnXHJcbiAgfSk7XHJcblxyXG4gICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh7XHJcbiAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgcmVxdWlyZUJhc2U6IGZhbHNlXHJcbiAgfSk7XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdXZWJTb2NrZXRTdmMnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHRpbWVvdXQpIHtcclxuICBmdW5jdGlvbiB3ZWJzb2NrZXRIb3N0KCkge1xyXG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcclxuICAgICAgcmV0dXJuIFwid3NzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBcIndzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBjb25uZWN0aW9uO1xyXG4gIHZhciBjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQod2Vic29ja2V0SG9zdCgpKTtcclxuXHJcbiAgICBjb25uZWN0aW9uLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1dlYnNvY2tldCBjb25uZWN0ZWQnKTtcclxuICAgIH07XHJcblxyXG4gICAgY29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1dlYnNvY2tldCBjbG9zZWQuIFJlY29ubmVjdGluZy4uLicpO1xyXG4gICAgICAkdGltZW91dChjb25uZWN0LCAxMDAwKTtcclxuICAgIH07XHJcblxyXG4gICAgY29ubmVjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiArIGUgKyBcIiAtIFN0YXRlOiBcIiArIGNvbm5lY3Rpb24ucmVhZHlTdGF0ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgdmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGUuZGF0YSk7XHJcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnd3M6JyArIHBheWxvYWQudG9waWMsIHBheWxvYWQuZGF0YSk7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHRoaXMuc2VuZCA9IGZ1bmN0aW9uICh0b3BpYywgZGF0YSkge1xyXG4gICAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeSh7dG9waWM6IHRvcGljLCBkYXRhOiBkYXRhfSk7XHJcbiAgICBjb25uZWN0aW9uLnNlbmQoanNvbik7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5jb25uZWN0ID0gY29ubmVjdDtcclxuXHJcbn0pLnJ1bihmdW5jdGlvbiAoV2ViU29ja2V0U3ZjKSB7XHJcbiAgV2ViU29ja2V0U3ZjLmNvbm5lY3QoKTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignQXBwQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgTGFuZ3VhZ2VTdmMsIFVzZXJTdmMpIHtcclxuXHJcbiAgY29uc29sZS5sb2coXCIlY1lvdSBzbmVha3kgYnVnZ2VyIVwiLCBcImZvbnQ6IDJlbSBzYW5zLXNlcmlmOyBjb2xvcjogRG9kZ2VyQmx1ZTsgdGV4dC1zaGFkb3c6IDJweCAwIDAgIzQ0NCwgLTJweCAwIDAgIzQ0NCwgMCAycHggMCAjNDQ0LCAwIC0ycHggMCAjNDQ0LCAxcHggMXB4ICM0NDQsIC0xcHggLTFweCAwICM0NDQsIDFweCAtMXB4IDAgIzQ0NCwgLTFweCAxcHggMCAjNDQ0O1wiKTtcclxuICBjb25zb2xlLmxvZyhcIkknbSBnbGFkIHlvdSdyZSBjdXJpb3VzIHdoZXRoZXIgc29tZXRoaW5nIGlzIHBvcHBpbmcgdXAgaW4gaGVyZS4gSSdtIGEgYml0IG9mIGEgc3RpY2tsZXIgd2hlbiBpdCBjb21lcyB0byBtZXNzYWdlcyBpbiB0aGUgY29uc29sZSBzbyBJIHRyeSB0byBtYWtlIHN1cmUgb25seSB0aGluZ3MgSSB3YW50IGFyZSB2aXNpYmxlLiBUaGF0IGJlaW5nIHNhaWQsIGlmIHRoZXJlIGlzIGEgYmlnIGVycm9yIGhlcmUsIEkgd291bGQgcmVhbGx5IGFwcHJlY2lhdGUgeW91IHRlbGxpbmcgbWUgc28gSSBjYW4gZ2V0IHJpZCBvZiBpdCFcIik7XHJcbiAgY29uc29sZS5sb2coXCJUaGUgY29kZSBmb3IgbXkgcmVzdW1lIGlzIGhvc3RlZCBvbiBHaXRodWIgaWYgeW91IHJlYWxseSB3YW50IHRvIGdvIGludG8gYWxsIHRoaXMhID0+IGh0dHBzOi8vZ2l0aHViLmNvbS9GbGFuZGVyc0J1cmdlci9yZXN1bWVcIik7XHJcblxyXG4gIC8qXHJcbiAgJChkb2N1bWVudCkuYmluZChcImtleXVwIGtleWRvd25cIiwgZnVuY3Rpb24oZSl7XHJcbiAgICBpZihlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09IDgwKXtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgKi9cclxuXHJcbiAgJCh3aW5kb3cpLmxvYWQoZnVuY3Rpb24oKXtcclxuICAgICQoXCIubG9hZGluZ1wiKS5mYWRlT3V0KFwic2xvd1wiKTtcclxuICAgICQoXCIuY29udGVudFwiKS5mYWRlSW4oXCJzbG93XCIpO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUudGhlbWVDb3VudGVyID0gNjtcclxuICAkc2NvcGUudG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICRzY29wZS55ZWFyID0gJHNjb3BlLnRvZGF5LmdldEZ1bGxZZWFyKCk7XHJcbiAgJHNjb3BlLnJhbmRvbSA9IE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKSk7XHJcblxyXG4gICRzY29wZS5mbGlwVGhlbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICQoXCIubG9hZGluZ1wiKS5zaG93KCk7XHJcbiAgICAgICQoXCIuY29udGVudFwiKS5oaWRlKCk7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAkKFwiLmxvYWRpbmdcIikuZmFkZU91dChcInNsb3dcIik7XHJcbiAgICAgICAgJChcIi5jb250ZW50XCIpLmZhZGVJbihcInNsb3dcIik7XHJcbiAgICAgIH0sIDgwMCk7XHJcbiAgICAkc2NvcGUudGhlbWVDb3VudGVyID0gJHNjb3BlLnRoZW1lQ291bnRlciA8IDYgPyAkc2NvcGUudGhlbWVDb3VudGVyICsgMSA6ICRzY29wZS50aGVtZUNvdW50ZXIgPSAxO1xyXG4gIH07XHJcblxyXG5cclxuICAkLmdldEpTT04oJy9za2lsbHMuanNvbicsIGZ1bmN0aW9uKCBkYXRhICkge1xyXG4gICAgJHNjb3BlLnNraWxscyA9IGRhdGEuZmlsdGVyKGZ1bmN0aW9uKHNraWxsKSB7XHJcbiAgICAgIHJldHVybiBza2lsbC5lbmFibGVkO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG5cclxuICAkLmdldEpTT04oJy9ob2JiaWVzLmpzb24nLCBmdW5jdGlvbiggZGF0YSApIHtcclxuICAgICRzY29wZS5ob2JiaWVzID0gZGF0YTtcclxuICB9KTtcclxuXHJcblxyXG4gICQuZ2V0SlNPTignL2V4cGVyaWVuY2UuanNvbicsIGZ1bmN0aW9uKCBkYXRhICkge1xyXG4gICAgJHNjb3BlLmpvYnMgPSBkYXRhO1xyXG4gICAgJHNjb3BlLmpvYnMuZm9yRWFjaChmdW5jdGlvbiAoam9iKSB7XHJcbiAgICAgIGpvYi5zdGFydERhdGUgPSBuZXcgRGF0ZShqb2Iuc3RhcnREYXRlKTtcclxuICAgICAgaWYgKGpvYi5lbmREYXRlKSBqb2IuZW5kRGF0ZSA9IG5ldyBEYXRlKGpvYi5lbmREYXRlKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUuZ2V0VGltZVNwYW4gPSBmdW5jdGlvbiAoam9iKSB7XHJcbiAgICByZXR1cm4gam9iLnN0YXJ0RGF0ZS5nZXRGdWxsWWVhcigpICsgKGpvYi5lbmREYXRlID8gKCcgLSAnICsgam9iLmVuZERhdGUuZ2V0RnVsbFllYXIoKSkgOiAnIC0gVG9kYXknKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUubGFuZ3VhZ2VzID0gTGFuZ3VhZ2VTdmMubGFuZ3VhZ2VzO1xyXG5cclxuICAkc2NvcGUuc2VsZWN0ZWRMYW5ndWFnZSA9IExhbmd1YWdlU3ZjLmdldExhbmd1YWdlKCk7XHJcblxyXG4gICRzY29wZS5zZWxlY3RMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5ndWFnZSkge1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkTGFuZ3VhZ2UgPSBMYW5ndWFnZVN2Yy5zZXRMYW5ndWFnZShsYW5ndWFnZSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmhvdmVyZGl2ID0gZnVuY3Rpb24gKGUsIGRpdmlkKSB7XHJcbiAgICB2YXIgbGVmdCAgPSBlLmNsaWVudFggKyBcInB4XCI7XHJcbiAgICB2YXIgdG9wICA9IChlLmNsaWVudFkgKyAyMCkgKyBcInB4XCI7XHJcblxyXG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdmlkKTtcclxuXHJcbiAgICAkKFwiI1wiK2RpdmlkKS5jc3MoJ2xlZnQnLGxlZnQpO1xyXG4gICAgJChcIiNcIitkaXZpZCkuY3NzKCd0b3AnLHRvcCk7XHJcblxyXG4gICAgJChcIiNcIitkaXZpZCkudG9nZ2xlKCk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNvY2lhbE1lZGlhID0gWy8qXHJcbiAgICB7XHJcbiAgICAgIFwibmFtZVwiOiBcImZhY2Vib29rXCIsXHJcbiAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2ZsYW5kZXJzYnVyZ2VyXCIsXHJcbiAgICAgIFwiaWNvblwiOiBcImZhLWZhY2Vib29rLWZcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwidHdpdHRlclwiLFxyXG4gICAgICBcInVybFwiOiBcImh0dHBzOi8vdHdpdHRlci5jb20vQmVsZ29DYW5hZGlhblwiLFxyXG4gICAgICBcImljb25cIjogXCJmYS10d2l0dGVyXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibmFtZVwiOiBcImdvb2RyZWFkc1wiLFxyXG4gICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3Lmdvb2RyZWFkcy5jb20vdXNlci9zaG93LzE3MDcwMDEwLWxhdXJlbnRcIixcclxuICAgICAgXCJpY29uXCI6IFwiZmEtYm9va1wiXHJcbiAgICB9LCovXHJcbiAgICB7XHJcbiAgICAgIFwibmFtZVwiOiBcImxpbmtlZGluXCIsXHJcbiAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2xhdXJlbnQtZGViYWNrZXItMTYzM2E5MTZcIixcclxuICAgICAgXCJpY29uXCI6IFwiZmEtbGlua2VkaW5cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwiZ2l0aHViXCIsXHJcbiAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL0ZsYW5kZXJzQnVyZ2VyXCIsXHJcbiAgICAgIFwiaWNvblwiOiBcImZhLWdpdGh1YlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm5hbWVcIjogXCJqc2ZpZGRsZVwiLFxyXG4gICAgICBcInVybFwiOiBcImh0dHBzOi8vanNmaWRkbGUubmV0L3VzZXIvQmVsZ29DYW5hZGlhbi9maWRkbGVzL1wiLFxyXG4gICAgICBcImljb25cIjogXCJmYS1qc2ZpZGRsZVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm5hbWVcIjogXCJzdGFja292ZXJmbG93XCIsXHJcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzEwODM5MjMvYmVsZ29jYW5hZGlhblwiLFxyXG4gICAgICBcImljb25cIjogXCJmYS1zdGFjay1vdmVyZmxvd1wiXHJcblxyXG4gICAgfVxyXG4gIF07XHJcblxyXG4gIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXIpIHtcclxuICAgIFVzZXJTdmMubG9naW4od2luZG93LmxvY2FsU3RvcmFnZS51c2VyKVxyXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgbG9naW4ocmVzcG9uc2UuZGF0YSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gICRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24gKF8sIHVzZXIpIHtcclxuICAgIGxvZ2luKHVzZXIpO1xyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBsb2dpbih1c2VyKSB7XHJcbiAgICBpZiAoISRzY29wZS5sb2dnZWRJbikge1xyXG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXIgPSB1c2VyLl9pZDtcclxuICAgICAgJHNjb3BlLmxvZ2dlZEluID0gdHJ1ZTtcclxuICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcclxuICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2xvZ2luJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAkc2NvcGUuJG9uKCd1cGRhdGUnLCBmdW5jdGlvbiAoXywgdXNlcikge1xyXG4gICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcclxuICAgICRzY29wZS5jdXJyZW50VXNlci5iaXJ0aERhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuY3VycmVudFVzZXIuYmlydGhEYXRlKTtcclxuICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICQoXCIjbG9hZGluZy1pY29uXCIpLmZhZGVPdXQoXCJzbG93XCIpO1xyXG4gICAgfSwgMTAwMCk7XHJcbiAgfSk7XHJcblxyXG5cclxuICAkc2NvcGUuJG9uKCdsb2FkaW5nJywgZnVuY3Rpb24gKF8sIHVzZXIpIHtcclxuICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICQoXCIjbG9hZGluZy1pY29uXCIpLnNob3coKTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLiRvbignbG9hZGVkJywgZnVuY3Rpb24gKF8sIHVzZXIpIHtcclxuICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICQoXCIjbG9hZGluZy1pY29uXCIpLmZhZGVPdXQoXCJzbG93XCIpO1xyXG4gICAgfSwgMTAwMCk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIGZpcmViYXNlLmF1dGgoKS5zaWduT3V0KCkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgLy8gU2lnbi1vdXQgc3VjY2Vzc2Z1bC5cclxuICAgICAgJHNjb3BlLmxvZ2dlZEluID0gZmFsc2U7XHJcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKTtcclxuICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2xvZ291dCcpO1xyXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgLy8gQW4gZXJyb3IgaGFwcGVuZWQuXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgIHZhciBtb250aHMgPSBbJ0phbicsJ0ZlYicsJ01hcicsJ0FwcicsJ01heScsJ0p1bicsJ0p1bCcsJ0F1ZycsJ1NlcCcsJ09jdCcsJ05vdicsJ0RlYyddO1xyXG4gICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xyXG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpICsgXCItXCIgKyBtb250aHNbZGF0ZS5nZXRNb250aCgpXSArIFwiLVwiICsgZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdBc3Rlcm9pZHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgR2FtZVN2Yykge1xyXG5cclxuICAkc2NvcGUuYW5ub3VuY2UgPSBmYWxzZTtcclxuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FzdGVyb2lkcy1wYWdlJyk7XHJcbiAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gIGN0eC5mb250ID0gXCIzMHB4IENvbWljIFNhbnMgTVNcIjtcclxuICBjdHguZmlsbFN0eWxlID0gXCJyZWRcIjtcclxuICBjdHgudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICB2YXIgc2hvdHMgPSB7fTtcclxuICB2YXIgYXN0ZXJvaWRzID0ge307XHJcbiAgdmFyIHBvd2VydXBzID0ge307XHJcbiAgdmFyIGV4cGxvc2lvbnMgPSB7fTtcclxuICB2YXIgbWFwID0ge307XHJcbiAgdmFyIHNwYWNlcGljcyA9IDEwO1xyXG4gIHZhciBzcGFjZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNwYWNlcGljcyk7XHJcbiAgdmFyIHBvd2VydXBUeXBlcyA9IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogJ3NwZWVkJyxcclxuICAgICAgYW5ub3VuY2VtZW50OiAnTWF4IFNwZWVkIOKHpycsXHJcbiAgICAgIGN5Y2xlOiB7XHJcbiAgICAgICAgcm93czogMSxcclxuICAgICAgICBjb2x1bW5zOiA0LFxyXG4gICAgICAgIHNpemU6IFsxNCwgMzVdLFxyXG4gICAgICAgIGk6IDAsXHJcbiAgICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZzogbmV3IEltYWdlKCksXHJcbiAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbihzcGFjZXNoaXApIHtcclxuICAgICAgICBzcGFjZXNoaXAubWF4U3BlZWQgKz0gMTAwO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnY29vbGRvd24nLFxyXG4gICAgICBhbm5vdW5jZW1lbnQ6ICdDb29sZG93biDih6knLFxyXG4gICAgICBjeWNsZToge1xyXG4gICAgICAgIHJvd3M6IDEsXHJcbiAgICAgICAgY29sdW1uczogMyxcclxuICAgICAgICBzaXplOiBbMTcsIDE3XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5jb29sZG93biA+IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5jb29sZG93blRpbWUgLT0gMTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdyYW5nZScsXHJcbiAgICAgIGFubm91bmNlbWVudDogJ0ZpcmluZyBSYW5nZSDih6cnLFxyXG4gICAgICBjeWNsZToge1xyXG4gICAgICAgIHJvd3M6IDQsXHJcbiAgICAgICAgY29sdW1uczogMSxcclxuICAgICAgICBzaXplOiBbMzAsIDhdLFxyXG4gICAgICAgIGk6IDAsXHJcbiAgICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZzogbmV3IEltYWdlKCksXHJcbiAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbihzcGFjZXNoaXApIHtcclxuICAgICAgICBzcGFjZXNoaXAucmFuZ2UgKz0gNTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogJ3NoaWVsZCcsXHJcbiAgICAgIGFubm91bmNlbWVudDogJ1NoaWVsZCcsXHJcbiAgICAgIGN5Y2xlOiB7XHJcbiAgICAgICAgcm93czogNSxcclxuICAgICAgICBjb2x1bW5zOiAxLFxyXG4gICAgICAgIHNpemU6IFsxOSwgMTldLFxyXG4gICAgICAgIGk6IDAsXHJcbiAgICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZzogbmV3IEltYWdlKCksXHJcbiAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbihzcGFjZXNoaXApIHtcclxuICAgICAgICBzcGFjZXNoaXAuc2hpZWxkID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogJ251a2UnLFxyXG4gICAgICBhbm5vdW5jZW1lbnQ6ICdOdWtlJyxcclxuICAgICAgY3ljbGU6IHtcclxuICAgICAgICByb3dzOiAxLFxyXG4gICAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgICAgc2l6ZTogWzE1LCAxNV0sXHJcbiAgICAgICAgaTogMCxcclxuICAgICAgICBkaXJlY3Rpb246IHRydWVcclxuICAgICAgfSxcclxuICAgICAgaW1nOiBuZXcgSW1hZ2UoKSxcclxuICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKHNwYWNlc2hpcCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgaW4gYXN0ZXJvaWRzKSB7XHJcbiAgICAgICAgICBhc3Rlcm9pZHNbaV0uZXhwbG9kZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzcGF3bkFzdGVyb2lkcyg1KTtcclxuICAgICAgfVxyXG4gICAgfSwvKlxyXG4gICAgJ3NpZGVfY2Fubm9ucycsXHJcbiAgICAnbGFzZXInLFxyXG4gICAgJ3NoaWVsZCcsXHJcbiAgICAnbGlmZScsXHJcbiAgICAnbWlzc2lsZXMnLFxyXG4gICAgJ251a2UnXHJcbiAgICAqL1xyXG4gIF07XHJcbiAgcG93ZXJ1cFR5cGVzLmZvckVhY2goZnVuY3Rpb24ocG93ZXJ1cCwgaSwgYXJyYXkpIHtcclxuICAgIGFycmF5W2ldLmltZy5zcmMgPSAnYXN0ZXJvaWRzLycgKyBwb3dlcnVwLm5hbWUgKyAnLnBuZyc7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBleHBsb3Npb25JbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gIGV4cGxvc2lvbkltYWdlLnNyYyA9ICdhc3Rlcm9pZHMvZXhwbG9zaW9uLnBuZyc7XHJcblxyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICBtYXBbZS5rZXlDb2RlIHx8IGUud2hpY2hdID0gdHJ1ZTtcclxuICB9LHRydWUpO1xyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgbWFwW2Uua2V5Q29kZSB8fCBlLndoaWNoXSA9IGZhbHNlO1xyXG4gIH0sdHJ1ZSk7XHJcblxyXG4gICRzY29wZS5oaWdoc2NvcmUgPSAwO1xyXG5cclxuICBmdW5jdGlvbiBldmFsdWF0ZUtleXMoKSB7XHJcbiAgICBpZiAoJHNjb3BlLnBsYXlpbmcpIHtcclxuICAgICAgaWYgKG1hcFszMl0pIHtcclxuICAgICAgICAvL1NwYWNlXHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5jb29sZG93biA9PT0gMCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnNob290KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXBbMzddKSB7XHJcbiAgICAgICAgLy9MZWZ0IEFycm93XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5yb3RhdGlvbiA9PT0gMCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnJvdGF0aW9uID0gMzYwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAucm90YXRpb24gLT0gMztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1hcFszOV0pIHtcclxuICAgICAgICAvL1JpZ2h0IEFycm93XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5yb3RhdGlvbiA9PT0gMzYwKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAucm90YXRpb24gPSAwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAucm90YXRpb24gKz0gMztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1hcFszOF0pIHtcclxuICAgICAgICAvL1VwIEFycm93XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5zcGVlZCA8PSBzcGFjZXNoaXAubWF4U3BlZWQpIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5zcGVlZCArPSA1O1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoc3BhY2VzaGlwLnNwZWVkID4gMCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnNwZWVkLS07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXBbNDBdKSB7XHJcbiAgICAgICAgLy9Eb3duIEFycm93XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5zcGVlZCA+IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5zcGVlZCAtPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKG1hcFszMl0pIHtcclxuICAgICAgICBzdGFydCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBTcGFjZXNoaXAoKSB7XHJcbiAgICB0aGlzLndpZHRoID0gNTA7XHJcbiAgICB0aGlzLmhlaWdodCA9IDUwO1xyXG4gICAgdGhpcy5zaGllbGQgPSBmYWxzZTtcclxuICAgIHRoaXMucmFuZ2UgPSA4MDtcclxuICAgIHRoaXMuY2Fubm9uID0ge1xyXG4gICAgICB4OiB0aGlzLndpZHRoIC8gMiAtIDQuNSxcclxuICAgICAgeTogdGhpcy5oZWlnaHQgLyAyIC0gdGhpcy5oZWlnaHQgKiAwLjA3ODEyNVxyXG4gICAgfTtcclxuICAgIHRoaXMuY29vbGRvd24gPSAwO1xyXG4gICAgdGhpcy5jb29sZG93blRpbWUgPSAyMDtcclxuICAgIHRoaXMucG9zaXRpb24gPSBbXHJcbiAgICAgIGNhbnZhcy53aWR0aCAvIDIgLSB0aGlzLndpZHRoIC8gMixcclxuICAgICAgY2FudmFzLmhlaWdodCAvIDIgLSB0aGlzLmhlaWdodCAvIDJcclxuICAgIF07XHJcbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgdGhpcy5pbWcuc3JjID0gJ2FzdGVyb2lkcy9zcGFjZXNoaXAucG5nJztcclxuICAgIHRoaXMuc3BlZWQgPSAwO1xyXG4gICAgdGhpcy5tYXhTcGVlZCA9IDEwMDA7XHJcbiAgICB0aGlzLmFuZ2xlID0gMDtcclxuICAgIHRoaXMucm90YXRpb24gPSAwO1xyXG5cclxuICAgIHRoaXMuc2hvb3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5jb29sZG93biA9IHRoaXMuY29vbGRvd25UaW1lO1xyXG4gICAgICB2YXIgaWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDApO1xyXG4gICAgICBzaG90c1tpZF0gPSBuZXcgU2hvdChpZCwgdGhpcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5zaGllbGQpIHtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LmFyYyh0aGlzLnBvc2l0aW9uWzBdICsgdGhpcy53aWR0aCAvIDIsIHRoaXMucG9zaXRpb25bMV0gKyB0aGlzLmhlaWdodCAvIDIsIDMwLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwicmdiKDM1LCAyMzcsIDg2LCAwLjUpXCI7XHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJyZ2IoNjYsIDE2OCwgMzYsIDAuOClcIjtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gNTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKHZhciBpIGluIGFzdGVyb2lkcykge1xyXG4gICAgICAgIHZhciBhc3Rlcm9pZCA9IGFzdGVyb2lkc1tpXTtcclxuICAgICAgICBpZiAoaGl0KGFzdGVyb2lkLCB0aGlzKSkge1xyXG4gICAgICAgICAgaWYgKHRoaXMuc2hpZWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hpZWxkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFzdGVyb2lkLmV4cGxvZGUoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnYW1lT3ZlcigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLmFuZ2xlID0gdGhpcy5yb3RhdGlvbjtcclxuICAgICAgaWYgKHRoaXMuY29vbGRvd24gPiAwKSB7XHJcbiAgICAgICAgdGhpcy5jb29sZG93bi0tO1xyXG4gICAgICB9XHJcbiAgICAgIG1vdmUodGhpcyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gU2hvdChpZCwgc3BhY2VzaGlwKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gW1xyXG4gICAgICBzcGFjZXNoaXAucG9zaXRpb25bMF0gKyBzcGFjZXNoaXAuY2Fubm9uLnggKyBzcGFjZXNoaXAuY2Fubm9uLnggKiBNYXRoLmNvcygoc3BhY2VzaGlwLnJvdGF0aW9uIC0gOTApICogTWF0aC5QSSAvIDE4MCksXHJcbiAgICAgIHNwYWNlc2hpcC5wb3NpdGlvblsxXSArIHNwYWNlc2hpcC5jYW5ub24ueSArIHNwYWNlc2hpcC5jYW5ub24ueSAqIE1hdGguc2luKChzcGFjZXNoaXAucm90YXRpb24gLSA5MCkgKiBNYXRoLlBJIC8gMTgwKVxyXG4gICAgXTtcclxuICAgIHRoaXMud2lkdGggPSA5O1xyXG4gICAgdGhpcy5oZWlnaHQgPSAxNTtcclxuICAgIHRoaXMuYW5nbGUgPSBzcGFjZXNoaXAuYW5nbGU7XHJcbiAgICB0aGlzLnJvdGF0aW9uID0gc3BhY2VzaGlwLnJvdGF0aW9uO1xyXG4gICAgdGhpcy5zcGVlZCA9IHNwYWNlc2hpcC5zcGVlZCArIDUwMDtcclxuICAgIHRoaXMubGlmZXNwYW4gPSBzcGFjZXNoaXAucmFuZ2U7XHJcbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgdGhpcy5pbWcuc3JjID0gJ2FzdGVyb2lkcy9zaG90LnBuZyc7XHJcblxyXG4gICAgdGhpcy5tb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMubGlmZXNwYW4tLTtcclxuICAgICAgbW92ZSh0aGlzKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBBc3Rlcm9pZChpZCkge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy53aWR0aCA9IE1hdGgucmFuZG9tKCkgKiA1MCArIDIwO1xyXG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLndpZHRoO1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IGdldEVudHJ5UG9zaXRpb24odGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgdGhpcy5hbmdsZSA9IE1hdGgucmFuZG9tKCkgKiAzNjA7XHJcbiAgICB0aGlzLnJvdGF0aW9uID0gTWF0aC5yYW5kb20oKSAqIDM2MDtcclxuICAgIHRoaXMucm90YXRpb25TcGVlZCA9IE1hdGgucmFuZG9tKCkgKiA2IC0gMztcclxuICAgIHRoaXMuc3BlZWQgPSBNYXRoLnJhbmRvbSgpICogMzAwICsgMjtcclxuICAgIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICB0aGlzLmltZy5zcmMgPSAnYXN0ZXJvaWRzL2FzdGVyb2lkJyArIChNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA2KSArIDEpICsgJy5wbmcnO1xyXG5cclxuICAgIHRoaXMuZXhwbG9kZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBleHBsb3Npb25zW3RoaXMuaWRdID0gbmV3IEV4cGxvc2lvbih0aGlzKTtcclxuICAgICAgcmV0dXJuIGRlbGV0ZSBhc3Rlcm9pZHNbdGhpcy5pZF07XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLnJvdGF0aW9uICs9IHRoaXMucm90YXRpb25TcGVlZDtcclxuICAgICAgaWYgKHRoaXMucm90YXRpb24gPiAzNjApIHtcclxuICAgICAgICB0aGlzLnJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbiAtIDM2MDtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLnJvdGF0aW9uIDwgMCkge1xyXG4gICAgICAgIHRoaXMucm90YXRpb24gPSAzNjAgKyB0aGlzLnJvdGF0aW9uO1xyXG4gICAgICB9XHJcbiAgICAgIGZvciAodmFyIGkgaW4gc2hvdHMpIHtcclxuICAgICAgICB2YXIgc2hvdCA9IHNob3RzW2ldO1xyXG4gICAgICAgIGlmIChoaXQoc2hvdCwgdGhpcykpIHtcclxuICAgICAgICAgIHRoaXMuZXhwbG9kZSgpO1xyXG4gICAgICAgICAgdmFyIHBvaW50cyA9IE1hdGguZmxvb3IoKHNob3Quc3BlZWQgLSA1MDApIC8gMTAgKyA3MCAtIHRoaXMud2lkdGgpO1xyXG4gICAgICAgICAgaWYgKE1hdGguZmxvb3IoKHBvaW50cyArICRzY29wZS5zY29yZSkgLyAxMDApID4gTWF0aC5mbG9vcigkc2NvcGUuc2NvcmUgLyAxMDApKSB7XHJcbiAgICAgICAgICAgIHNwYXduUG93ZXJ1cCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgJHNjb3BlLnNjb3JlICs9IHBvaW50cztcclxuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgIGRlbGV0ZSBzaG90c1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgbW92ZSh0aGlzKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBFeHBsb3Npb24ob2JqZWN0KSB7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gW29iamVjdC5wb3NpdGlvblswXSwgb2JqZWN0LnBvc2l0aW9uWzFdXTtcclxuICAgIHRoaXMud2lkdGggPSBvYmplY3Qud2lkdGg7XHJcbiAgICB0aGlzLmhlaWdodCA9IG9iamVjdC5oZWlnaHQ7XHJcbiAgICB0aGlzLnNwZWVkID0gMDtcclxuICAgIHRoaXMuYW5nbGUgPSBNYXRoLnJhbmRvbSgpICogMzYwO1xyXG4gICAgdGhpcy5jeWNsZSA9IHtcclxuICAgICAgcm93czogNixcclxuICAgICAgY29sdW1uczogOCxcclxuICAgICAgc2l6ZTogWzI1NiwgMjU2XSxcclxuICAgICAgaTogMCxcclxuICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICB9O1xyXG4gICAgdGhpcy5saWZlc3BhbiA9IDQ3O1xyXG4gICAgdGhpcy5pbWcgPSBleHBsb3Npb25JbWFnZTtcclxuXHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5saWZlc3Bhbi0tO1xyXG4gICAgICBtb3ZlKHRoaXMpO1xyXG4gICAgICBpZiAodGhpcy5jeWNsZS5kaXJlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmN5Y2xlLmkrKztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmN5Y2xlLmktLTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIFBvd2VydXAoaWQpIHtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMucG93ZXJ1cCA9IHBvd2VydXBUeXBlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3dlcnVwVHlwZXMubGVuZ3RoKV07XHJcbiAgICB0aGlzLmN5Y2xlID0gdGhpcy5wb3dlcnVwLmN5Y2xlO1xyXG4gICAgdGhpcy5saWZlc3BhbiA9IDEwMDA7XHJcbiAgICBpZiAodGhpcy5jeWNsZS5zaXplWzFdID4gdGhpcy5jeWNsZS5zaXplWzBdKSB7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gNDA7XHJcbiAgICAgIHRoaXMud2lkdGggPSBNYXRoLnJvdW5kKHRoaXMuaGVpZ2h0IC8gdGhpcy5jeWNsZS5zaXplWzFdICogdGhpcy5jeWNsZS5zaXplWzBdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMud2lkdGggPSA0MDtcclxuICAgICAgdGhpcy5oZWlnaHQgPSBNYXRoLnJvdW5kKHRoaXMud2lkdGggLyB0aGlzLmN5Y2xlLnNpemVbMF0gKiB0aGlzLmN5Y2xlLnNpemVbMV0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wb3NpdGlvbiA9IGdldEVudHJ5UG9zaXRpb24odGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgdGhpcy5pbWcgPSB0aGlzLnBvd2VydXAuaW1nO1xyXG4gICAgdGhpcy5hbmdsZSA9IE1hdGgucmFuZG9tKCkgKiAzNjA7XHJcbiAgICB0aGlzLnNwZWVkID0gTWF0aC5yYW5kb20oKSAqIDE1MCArIDUwO1xyXG4gICAgdmFyIGRlbGF5ID0gNTtcclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5saWZlc3BhbiA8PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSBwb3dlcnVwc1t0aGlzLmlkXTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaGl0KHNwYWNlc2hpcCwgdGhpcykpIHtcclxuICAgICAgICAkc2NvcGUuYW5ub3VuY2UgPSB0cnVlO1xyXG4gICAgICAgICRzY29wZS5hbm5vdW5jZW1lbnQgPSB0aGlzLnBvd2VydXAuYW5ub3VuY2VtZW50O1xyXG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJHNjb3BlLmFubm91bmNlID0gZmFsc2U7XHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgdGhpcy5wb3dlcnVwLmFjdGl2YXRlKHNwYWNlc2hpcCk7XHJcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSBwb3dlcnVwc1t0aGlzLmlkXTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxpZmVzcGFuLS07XHJcbiAgICAgIG1vdmUodGhpcyk7XHJcbiAgICAgIGlmIChkZWxheSA8PSAwKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3ljbGUuZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlLmkrKztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZS5pLS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGF5ID0gNTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkZWxheS0tO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbW92ZShvYmplY3QpIHtcclxuICAgICBvYmplY3QucG9zaXRpb25bMF0gKz0gb2JqZWN0LnNwZWVkIC8gMTAwICogTWF0aC5jb3MoKG9iamVjdC5hbmdsZSAtIDkwKSAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgIG9iamVjdC5wb3NpdGlvblsxXSArPSBvYmplY3Quc3BlZWQgLyAxMDAgKiBNYXRoLnNpbigob2JqZWN0LmFuZ2xlIC0gOTApICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgaWYgKG9iamVjdC5wb3NpdGlvblswXSA+IGNhbnZhcy53aWR0aCkge1xyXG4gICAgICAgb2JqZWN0LnBvc2l0aW9uWzBdID0gLW9iamVjdC53aWR0aDtcclxuICAgICB9IGVsc2UgaWYgKG9iamVjdC5wb3NpdGlvblswXSA8IC1vYmplY3Qud2lkdGgpIHtcclxuICAgICAgIG9iamVjdC5wb3NpdGlvblswXSA9IGNhbnZhcy53aWR0aDtcclxuICAgICB9XHJcbiAgICAgaWYgKG9iamVjdC5wb3NpdGlvblsxXSA+IGNhbnZhcy5oZWlnaHQpIHtcclxuICAgICAgIG9iamVjdC5wb3NpdGlvblsxXSA9IC1vYmplY3QuaGVpZ2h0O1xyXG4gICAgIH0gZWxzZSBpZiAob2JqZWN0LnBvc2l0aW9uWzFdIDwgLW9iamVjdC5oZWlnaHQpIHtcclxuICAgICAgIG9iamVjdC5wb3NpdGlvblsxXSA9IGNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgfVxyXG4gICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgY3R4LnRyYW5zbGF0ZShvYmplY3QucG9zaXRpb25bMF0sIG9iamVjdC5wb3NpdGlvblsxXSk7XHJcbiAgICAgY3R4LnRyYW5zbGF0ZShvYmplY3Qud2lkdGggLyAyLCBvYmplY3QuaGVpZ2h0IC8gMik7XHJcbiAgICAgY3R4LnJvdGF0ZShvYmplY3Qucm90YXRpb24gKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICBpZiAob2JqZWN0LmN5Y2xlKSB7XHJcbiAgICAgICB2YXIgY29sdW1uID0gb2JqZWN0LmN5Y2xlLmkgJSBvYmplY3QuY3ljbGUuY29sdW1ucztcclxuICAgICAgIHZhciByb3cgPSBNYXRoLmZsb29yKG9iamVjdC5jeWNsZS5pIC8gb2JqZWN0LmN5Y2xlLmNvbHVtbnMpO1xyXG4gICAgICAgY3R4LmRyYXdJbWFnZShvYmplY3QuaW1nLCBvYmplY3QuY3ljbGUuc2l6ZVswXSAqIGNvbHVtbiwgb2JqZWN0LmN5Y2xlLnNpemVbMV0gKiByb3csIG9iamVjdC5jeWNsZS5zaXplWzBdLCBvYmplY3QuY3ljbGUuc2l6ZVsxXSwgLW9iamVjdC53aWR0aCAvIDIsIC1vYmplY3QuaGVpZ2h0IC8gMiwgb2JqZWN0LndpZHRoLCBvYmplY3QuaGVpZ2h0KTtcclxuXHJcbiAgICAgICBpZiAob2JqZWN0LmN5Y2xlLmkgPD0gMCkge1xyXG4gICAgICAgICBvYmplY3QuY3ljbGUuaSA9IDA7XHJcbiAgICAgICAgIG9iamVjdC5jeWNsZS5kaXJlY3Rpb24gPSB0cnVlO1xyXG4gICAgICAgfSBlbHNlIGlmIChvYmplY3QuY3ljbGUuaSA+PSBvYmplY3QuY3ljbGUuY29sdW1ucyAqIG9iamVjdC5jeWNsZS5yb3dzKSB7XHJcbiAgICAgICAgIG9iamVjdC5jeWNsZS5pID0gb2JqZWN0LmN5Y2xlLmNvbHVtbnMgKiBvYmplY3QuY3ljbGUucm93cyAtIDE7XHJcbiAgICAgICAgIG9iamVjdC5jeWNsZS5kaXJlY3Rpb24gPSBmYWxzZTtcclxuICAgICAgIH1cclxuICAgICB9IGVsc2Uge1xyXG4gICAgICAgY3R4LmRyYXdJbWFnZShvYmplY3QuaW1nLCAtb2JqZWN0LndpZHRoIC8gMiwgLW9iamVjdC5oZWlnaHQgLyAyLCBvYmplY3Qud2lkdGgsIG9iamVjdC5oZWlnaHQpO1xyXG4gICAgIH1cclxuICAgICBjdHgucmVzdG9yZSgpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHNwYWNlc2hpcDtcclxuXHJcbiAgZnVuY3Rpb24gc3RhcnQoKSB7XHJcbiAgICAkc2NvcGUucGxheWluZyA9IHRydWU7XHJcbiAgICAkc2NvcGUuc2NvcmUgPSAwO1xyXG4gICAgc3BhY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzcGFjZXBpY3MpO1xyXG4gICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgc3BhY2VzaGlwID0gbmV3IFNwYWNlc2hpcCgpO1xyXG4gICAgJHNjb3BlLnNjb3JlID0gMDtcclxuICAgIHNwYXduQXN0ZXJvaWRzKDUpO1xyXG4gICAgYXV0b1NwYXduKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRFbnRyeVBvc2l0aW9uKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHZhciBncmlkWCA9IE1hdGgucmFuZG9tKCkgKiAyO1xyXG4gICAgdmFyIGdyaWRZID0gTWF0aC5yYW5kb20oKSAqIDI7XHJcbiAgICB2YXIgeCwgeSA9IDA7XHJcbiAgICBpZiAoZ3JpZFggPj0gMSkge1xyXG4gICAgICB4ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aDtcclxuICAgICAgaWYgKHkgPj0gMSkge1xyXG4gICAgICAgIHkgPSAwIC0gaGVpZ2h0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHkgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB5ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgIGlmIChncmlkWSA+PSAxKSB7XHJcbiAgICAgICAgeCA9IDAgLSB3aWR0aDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB4ID0gY2FudmFzLndpZHRoO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW3gsIHldO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGl0KG9iamVjdDEsIG9iamVjdDIpIHtcclxuICAgIHJldHVybiAob2JqZWN0MS5wb3NpdGlvblswXSA8IG9iamVjdDIucG9zaXRpb25bMF0gKyBvYmplY3QyLndpZHRoKSAmJlxyXG4gICAgICAgICAgIChvYmplY3QyLnBvc2l0aW9uWzBdIDwgb2JqZWN0MS5wb3NpdGlvblswXSArIG9iamVjdDEud2lkdGgpICYmXHJcbiAgICAgICAgICAgKG9iamVjdDEucG9zaXRpb25bMV0gPCBvYmplY3QyLnBvc2l0aW9uWzFdICsgb2JqZWN0Mi5oZWlnaHQpICYmXHJcbiAgICAgICAgICAgKG9iamVjdDIucG9zaXRpb25bMV0gPCBvYmplY3QxLnBvc2l0aW9uWzFdICsgb2JqZWN0MS5oZWlnaHQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXV0b1NwYXduKCkge1xyXG4gICAgaWYgKE9iamVjdC5rZXlzKGFzdGVyb2lkcykubGVuZ3RoIDwgMjAwKSB7XHJcbiAgICAgIHZhciBpZCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XHJcbiAgICAgIGFzdGVyb2lkc1tpZF0gPSBuZXcgQXN0ZXJvaWQoaWQpO1xyXG4gICAgfVxyXG4gICAgaWYgKCRzY29wZS5wbGF5aW5nKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgYXV0b1NwYXduKCk7XHJcbiAgICAgIH0sIHNwYXduSW50ZXJ2YWwoKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzcGF3bkludGVydmFsKCkge1xyXG4gICAgaWYgKCRzY29wZS5zY29yZSA8IDEwMDApIHtcclxuICAgICAgcmV0dXJuIDEwMDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDIwMDApIHtcclxuICAgICAgcmV0dXJuIDkwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgMzAwMCkge1xyXG4gICAgICByZXR1cm4gODAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCA0MDAwKSB7XHJcbiAgICAgIHJldHVybiA3MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDUwMDApIHtcclxuICAgICAgcmV0dXJuIDYwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgNjAwMCkge1xyXG4gICAgICByZXR1cm4gNTAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCA3MDAwKSB7XHJcbiAgICAgIHJldHVybiA0MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDgwMDApIHtcclxuICAgICAgcmV0dXJuIDMwMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAyMDA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzcGF3bkFzdGVyb2lkcyhhbW91bnQpIHtcclxuICAgIHZhciBpID0gMDtcclxuICAgIGRvIHtcclxuICAgICAgdmFyIGlkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcclxuICAgICAgYXN0ZXJvaWRzW2lkXSA9IG5ldyBBc3Rlcm9pZChpZCk7XHJcbiAgICB9IHdoaWxlIChpKysgPD0gYW1vdW50KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNwYXduUG93ZXJ1cCgpIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhwb3dlcnVwcykubGVuZ3RoIDwgMykge1xyXG4gICAgICB2YXIgaWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDApO1xyXG4gICAgICBwb3dlcnVwc1tpZF0gPSBuZXcgUG93ZXJ1cChpZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnYW1lT3ZlcigpIHtcclxuICAgICRzY29wZS5wbGF5aW5nID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpIGluIGFzdGVyb2lkcykge1xyXG4gICAgICBhc3Rlcm9pZHNbaV0uZXhwbG9kZSgpO1xyXG4gICAgfVxyXG4gICAgc2hvdHMgPSB7fTtcclxuICAgIGlmICgkc2NvcGUubG9nZ2VkSW4pIHtcclxuICAgICAgaWYgKCRzY29wZS5jdXJyZW50VXNlci5oaWdoc2NvcmUuYXN0ZXJvaWRzIDwgJHNjb3BlLnNjb3JlKSB7XHJcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyLmhpZ2hzY29yZS5hc3Rlcm9pZHMgPSAkc2NvcGUuc2NvcmU7XHJcbiAgICAgICAgR2FtZVN2Yy5zZXRIaWdoc2NvcmUoJ2FzdGVyb2lkcycsICRzY29wZS5jdXJyZW50VXNlci5faWQsICRzY29wZS5zY29yZSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICgkc2NvcGUuaGlnaHNjb3JlIDwgJHNjb3BlLnNjb3JlKSB7XHJcbiAgICAgICAgJHNjb3BlLmhpZ2hzY29yZSA9ICRzY29wZS5zY29yZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcblx0Ly8gU3RhcnQgbGlzdGVuaW5nIHRvIHJlc2l6ZSBldmVudHMgYW5kXHJcblx0Ly8gZHJhdyBjYW52YXMuXHJcblxyXG5cdGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcblx0XHQvLyBSZWdpc3RlciBhbiBldmVudCBsaXN0ZW5lciB0b1xyXG5cdFx0Ly8gY2FsbCB0aGUgcmVzaXplQ2FudmFzKCkgZnVuY3Rpb24gZWFjaCB0aW1lXHJcblx0XHQvLyB0aGUgd2luZG93IGlzIHJlc2l6ZWQuXHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplQ2FudmFzLCBmYWxzZSk7XHJcblxyXG5cclxuXHRcdC8vIERyYXcgY2FudmFzIGJvcmRlciBmb3IgdGhlIGZpcnN0IHRpbWUuXHJcblx0XHRyZXNpemVDYW52YXMoKTtcclxuXHR9XHJcblx0Ly8gUnVucyBlYWNoIHRpbWUgdGhlIERPTSB3aW5kb3cgcmVzaXplIGV2ZW50IGZpcmVzLlxyXG5cdC8vIFJlc2V0cyB0aGUgY2FudmFzIGRpbWVuc2lvbnMgdG8gbWF0Y2ggd2luZG93LFxyXG5cdC8vIHRoZW4gZHJhd3MgdGhlIG5ldyBib3JkZXJzIGFjY29yZGluZ2x5LlxyXG5cdGZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpIHtcclxuICAgIGNvbnNvbGUubG9nKHdpbmRvdy5pbm5lcldpZHRoKTtcclxuXHRcdGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG5cdFx0Y2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIChjYW52YXMud2lkdGggPD0gNzY4ID8gNTAgOiAxMDUpO1xyXG5cdH1cclxuXHJcblx0aW5pdGlhbGl6ZSgpO1xyXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcclxuXHJcbiAgdmFyIHRhbGx5ID0gMDtcclxuICB2YXIgZGlyZWN0aW9uID0gdHJ1ZTtcclxuXHJcbiAgZnVuY3Rpb24gZHJhdygpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIGZvciAodmFyIGkgaW4gc2hvdHMpIHtcclxuICAgICAgaWYgKHNob3RzW2ldLmxpZmVzcGFuIDw9IDApIHtcclxuICAgICAgICBkZWxldGUgc2hvdHNbaV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2hvdHNbaV0ubW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGkgaW4gYXN0ZXJvaWRzKSB7XHJcbiAgICAgIGFzdGVyb2lkc1tpXS5tb3ZlKCk7XHJcbiAgICB9XHJcbiAgICBmb3IgKGkgaW4gcG93ZXJ1cHMpIHtcclxuICAgICAgcG93ZXJ1cHNbaV0ubW92ZSgpO1xyXG4gICAgfVxyXG4gICAgZm9yIChpIGluIGV4cGxvc2lvbnMpIHtcclxuICAgICAgaWYgKGV4cGxvc2lvbnNbaV0ubGlmZXNwYW4gPD0gMCkge1xyXG4gICAgICAgIGRlbGV0ZSBleHBsb3Npb25zW2ldO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGV4cGxvc2lvbnNbaV0ubW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBldmFsdWF0ZUtleXMoKTtcclxuICAgIGlmICgkc2NvcGUucGxheWluZykge1xyXG4gICAgICBzcGFjZXNoaXAubW92ZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIGdyYWRpZW50ID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIDAsIGNhbnZhcy53aWR0aCwgMCk7XHJcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMCcsICdyZ2IoJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCcwLjI1JywgJ3JnYignICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigyNTYgLSAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnKScpO1xyXG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoJzAuNScsICdyZ2IoJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCcwLjc1JywgJ3JnYignICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigyNTYgLSAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnKScpO1xyXG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoJzEuMCcsICdyZ2IoJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9IGdyYWRpZW50O1xyXG4gICAgICBjdHguZm9udD0nNjBweCBNb25vdG9uJztcclxuICAgICAgY3R4LmZpbGxUZXh0KCdBc3Rlcm9pZHMnLCBjYW52YXMud2lkdGggLyAyIC0gY3R4Lm1lYXN1cmVUZXh0KCdBc3Rlcm9pZHMnKS53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyKTtcclxuICAgICAgY3R4LmZvbnQ9JzIwcHggQWxkcmljaCc7XHJcbiAgICAgIGN0eC5maWxsVGV4dCgnUHJlc3Mgc3BhY2UgdG8gc3RhcnQnLCBjYW52YXMud2lkdGggLyAyIC0gY3R4Lm1lYXN1cmVUZXh0KCdQcmVzcyBzcGFjZSB0byBzdGFydCcpLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAvIDIgKyAyMCk7XHJcbiAgICAgIGN0eC5maWxsVGV4dCgnRGVzaWduZWQgYW5kIGRldmVsb3BlZCBieSBMYXVyZW50IERlYmFja2VyJywgY2FudmFzLndpZHRoIC8gMiAtIGN0eC5tZWFzdXJlVGV4dCgnRGVzaWduZWQgYW5kIGRldmVsb3BlZCBieSBMYXVyZW50IERlYmFja2VyJykud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC0gMzApO1xyXG4gICAgfVxyXG4gICAgdGFsbHkgKz0gZGlyZWN0aW9uID8gMSA6IC0xO1xyXG4gICAgaWYgKHRhbGx5ID4gMTAwKSB7XHJcbiAgICAgIHRhbGx5ID0gMTAwO1xyXG4gICAgICBkaXJlY3Rpb24gPSBmYWxzZTtcclxuICAgIH0gZWxzZSBpZiAodGFsbHkgPCAwKSB7XHJcbiAgICAgIHRhbGx5ID0gMDtcclxuICAgICAgZGlyZWN0aW9uID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcclxuICB9XHJcblxyXG4gICRzY29wZS5zcGFjZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYmFja2dyb3VuZEltYWdlOiAndXJsKFwiYXN0ZXJvaWRzL3NwYWNlJyArIHNwYWNlICsgJy5qcGdcIiknXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG5cclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0J1YmJsZXNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xyXG5cclxuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1YmJsZXMtcGFnZScpO1xyXG4gIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICB2YXIgYnViYmxlcyA9IFtdO1xyXG4gIHZhciBjb2xvcnMgPSBbJyNmZmMzMDAnLCcjZmY1NzMzJywnI2M3MDAzOScsJyM5MDBjM2UnLCcjNTcxODQ1J107XHJcblxyXG4gIGZ1bmN0aW9uIEJ1YmJsZSgpIHtcclxuICAgIHRoaXMubGlmZXNwYW4gPSAwO1xyXG4gICAgdGhpcy5yYWRpdXMgPSAxO1xyXG4gICAgdGhpcy5leHBhbmRpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5zcGVlZCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDMpO1xyXG4gICAgdGhpcy5jaXJjdW1mZXJlbmNlID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNTApICsgNTtcclxuICAgIHRoaXMubWF4UmFkaXVzID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMjAwKSArIDIwO1xyXG4gICAgdGhpcy54ID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogY2FudmFzLndpZHRoKTtcclxuICAgIHRoaXMueSA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgdGhpcy52eCA9IChNYXRoLnJhbmRvbSgpID49IDAuNSA/IDEgOiAtMSk7XHJcbiAgICB0aGlzLnZ5ID0gKE1hdGgucmFuZG9tKCkgPj0gMC41ID8gMSA6IC0xKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICBidWJibGVzLmZvckVhY2goZnVuY3Rpb24oYnViYmxlKSB7XHJcbiAgICAgIHZhciBjb2xvciA9IGNvbG9yc1tNYXRoLnJvdW5kKGNvbG9ycy5sZW5ndGggKiBidWJibGUucmFkaXVzIC8gYnViYmxlLm1heFJhZGl1cyldO1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5hcmMoYnViYmxlLngsIGJ1YmJsZS55LCBidWJibGUucmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcnNbTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoICogYnViYmxlLnJhZGl1cyAvIGJ1YmJsZS5tYXhSYWRpdXMpXTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3JzW2NvbG9ycy5sZW5ndGggLSBNYXRoLnJvdW5kKGNvbG9ycy5sZW5ndGggKiBidWJibGUucmFkaXVzIC8gYnViYmxlLm1heFJhZGl1cyldO1xyXG4gICAgICBjdHgubGluZVdpZHRoID0gYnViYmxlLmNpcmN1bWZlcmVuY2UgKiBidWJibGUucmFkaXVzIC8gYnViYmxlLm1heFJhZGl1cztcclxuICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmaWx0ZXJCdWJibGVzKCkge1xyXG4gICAgYnViYmxlcy5wdXNoKG5ldyBCdWJibGUoKSk7XHJcbiAgICBidWJibGVzID0gYnViYmxlcy5maWx0ZXIoZnVuY3Rpb24gKGJ1YmJsZSkge1xyXG4gICAgICBpZiAoYnViYmxlLnJhZGl1cyA9PT0gYnViYmxlLm1heFJhZGl1cykge1xyXG4gICAgICAgIGJ1YmJsZS5leHBhbmRpbmcgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBidWJibGUueCArPSBidWJibGUudnggKiBidWJibGUuc3BlZWQ7XHJcbiAgICAgIGJ1YmJsZS55ICs9IGJ1YmJsZS52eSAqIGJ1YmJsZS5zcGVlZDtcclxuICAgICAgYnViYmxlLnJhZGl1cyArPSAoYnViYmxlLmV4cGFuZGluZyA/IDEgOiAtMSk7XHJcbiAgICAgIHJldHVybiBidWJibGUucmFkaXVzID4gMDtcclxuICAgIH0pO1xyXG4gICAgZHJhdygpO1xyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZpbHRlckJ1YmJsZXMpO1xyXG4gIH1cclxuXHJcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZpbHRlckJ1YmJsZXMpO1xyXG5cclxuXHJcblx0KGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdC8vIFN0YXJ0IGxpc3RlbmluZyB0byByZXNpemUgZXZlbnRzIGFuZFxyXG5cdFx0Ly8gZHJhdyBjYW52YXMuXHJcblx0XHRpbml0aWFsaXplKCk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcclxuXHRcdFx0Ly8gUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXIgdG9cclxuXHRcdFx0Ly8gY2FsbCB0aGUgcmVzaXplQ2FudmFzKCkgZnVuY3Rpb24gZWFjaCB0aW1lXHJcblx0XHRcdC8vIHRoZSB3aW5kb3cgaXMgcmVzaXplZC5cclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUNhbnZhcywgZmFsc2UpO1xyXG5cclxuXHRcdFx0Ly8gRHJhdyBjYW52YXMgYm9yZGVyIGZvciB0aGUgZmlyc3QgdGltZS5cclxuXHRcdFx0cmVzaXplQ2FudmFzKCk7XHJcblx0XHR9XHJcblx0XHQvLyBSdW5zIGVhY2ggdGltZSB0aGUgRE9NIHdpbmRvdyByZXNpemUgZXZlbnQgZmlyZXMuXHJcblx0XHQvLyBSZXNldHMgdGhlIGNhbnZhcyBkaW1lbnNpb25zIHRvIG1hdGNoIHdpbmRvdyxcclxuXHRcdC8vIHRoZW4gZHJhd3MgdGhlIG5ldyBib3JkZXJzIGFjY29yZGluZ2x5LlxyXG5cdFx0ZnVuY3Rpb24gcmVzaXplQ2FudmFzKCkge1xyXG5cdFx0XHRjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHRcdFx0Y2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIChjYW52YXMud2lkdGggPD0gNzY4ID8gNTUgOiAxMTEpO1xyXG5cdFx0fVxyXG5cclxuXHR9KSgpO1xyXG5cclxuXHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdDb250YWN0Q3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEVtYWlsU3ZjKSB7XHJcblxyXG4gICRzY29wZS5vcHRpb25zID0gW1xyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIlNwYW1cIixcclxuICAgICAgdGV4dDogXCJJIGFtIGEgc3BhbSBib3QgYW5kIGF1dG9tYXRpY2FsbHkgY2hlY2sgdGhlIGZpcnN0IG9wdGlvbiBJIGZpbmQhXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiT3Bwb3J0dW5pdGl5XCIsXHJcbiAgICAgIHRleHQ6IFwiWW91IHNlZW0gdG8gaGF2ZSB0aGUgc2tpbGxzIEkgc2VlaywgSSdkIGxpa2UgdG8gdGFsayBhYm91dCBzb21lIG9wcG9ydHVuaXRpZXMuXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiUmVzdW1lXCIsXHJcbiAgICAgIHRleHQ6IFwiSSBkaWcgdGhlIHJlc3VtZSwgaG93IGRpZCB5b3UgbWFrZSBpdD9cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJPdGhlclwiLFxyXG4gICAgICB0ZXh0OiBcIlN1bXRpbiBlbHNlIVwiXHJcbiAgICB9XHJcblxyXG4gIF07XHJcblxyXG4gICRzY29wZS5jb250YWN0ID0ge1xyXG4gICAgZW1haWw6IFwiXCIsXHJcbiAgICBuYW1lOiBcIlwiLFxyXG4gICAgcGhvbmU6IFwiXCIsXHJcbiAgICBhYm91dDogXCJcIixcclxuICAgIG1lc3NhZ2U6IFwiXCJcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VuZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLnNlbmRpbmcgPSB0cnVlO1xyXG4gICAgY29uc29sZS5sb2coJ2hlcmUnKTtcclxuICAgIEVtYWlsU3ZjLnNlbmQoe1xyXG4gICAgICBcImVtYWlsXCI6ICRzY29wZS5jb250YWN0LmVtYWlsLFxyXG4gICAgICBcIm5hbWVcIjogJHNjb3BlLmNvbnRhY3QubmFtZSxcclxuICAgICAgXCJwaG9uZVwiOiAgJHNjb3BlLmNvbnRhY3QucGhvbmUsXHJcbiAgICAgIFwiYWJvdXRcIjogJHNjb3BlLmNvbnRhY3QuYWJvdXQsXHJcbiAgICAgIFwibWVzc2FnZVwiOiAkc2NvcGUuY29udGFjdC5tZXNzYWdlXHJcbiAgICB9KVxyXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgJHNjb3BlLnNlbnQgPSB0cnVlO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlNVQ0NFU1MuIHN0YXR1cz0lZCwgdGV4dD0lc1wiLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnRleHQpO1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XHJcbiAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgJHNjb3BlLnNlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgY29uc29sZS5sb2coXCJGQUlMRUQuIGVycm9yPVwiLCBlcnIpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0V4cGVyaWVuY2VDdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xyXG5cclxuICAkc2NvcGUuZ2V0U2tpbGwgPSBmdW5jdGlvbihza2lsbENvZGUpIHtcclxuICAgIGlmICghJHNjb3BlLnNraWxscykgcmV0dXJuO1xyXG4gICAgcmV0dXJuICRzY29wZS5za2lsbHMuZmluZChmdW5jdGlvbihza2lsbCkge1xyXG4gICAgICByZXR1cm4gc2tpbGwuY29kZSA9PT0gc2tpbGxDb2RlO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0hvYmJpZXNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJHdpbmRvdykge1xyXG5cclxuICAkc2NvcGUuaG9iYnlTZWxlY3RvclZpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgJC5nZXRKU09OKCdodHRwczovL3d3dy5yZWRkaXQuY29tL3VzZXIvYmVsZ29jYW5hZGlhbi9hYm91dC8uanNvbicsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgLy9jb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdGVkSG9iYnkgPSAkc2NvcGUuaG9iYmllc1swXTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdEhvYmJ5ID0gZnVuY3Rpb24gKGhvYmJ5KSB7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRIb2JieSA9IGhvYmJ5O1xyXG4gICAgJHNjb3BlLmhvYmJ5U2VsZWN0b3JWaXNpYmxlID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNob3dIb2JieSA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICBpZiAoIXZhbHVlLmltYWdlcykgcmV0dXJuIGZhbHNlO1xyXG4gICAgcmV0dXJuIHZhbHVlLmltYWdlcy5sZW5ndGggPiAwO1xyXG4gIH07XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0xlbW1pbmdzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEdhbWVTdmMpIHtcclxuXHJcbiAgdmFyIExFRlQgPSAwO1xyXG4gIHZhciBSSUdIVCA9IDE7XHJcblxyXG4gIHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGVtbWluZ3MtcGFnZScpO1xyXG4gIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICB2YXIgbGVtbWluZ3NJbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gIGxlbW1pbmdzSW1hZ2Uuc3JjID0gJ2xlbW1pbmdzL2xlbW1pbmdzLnBuZyc7XHJcbiAgdmFyIGRlY29ySW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICBkZWNvckltYWdlLnNyYyA9ICdsZW1taW5ncy9kZWNvci5wbmcnO1xyXG4gIHZhciBsZW1taW5ncyA9IHt9O1xyXG4gIHZhciBzdGFydGVkID0gZmFsc2U7XHJcblxyXG4gIHZhciBhY3Rpb25zID0ge1xyXG4gICAgd2Fsazoge1xyXG4gICAgICBzdGFydDogWzAsIDBdLFxyXG4gICAgICBlbmQ6IFszMjAsIDIwXSxcclxuICAgICAgY29sdW1uczogOCxcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBodWg6IHtcclxuICAgICAgc3RhcnQ6IFszMjAsIDBdLFxyXG4gICAgICBlbmQ6IFs2NDAsIDIwXSxcclxuICAgICAgY29sdW1uczogOCxcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogdHJ1ZVxyXG4gICAgfSxcclxuICAgIGZhbGw6IHtcclxuICAgICAgc3RhcnQ6IFswLCA4MF0sXHJcbiAgICAgIGVuZDogWzE2MCwgMTAwXSxcclxuICAgICAgY29sdW1uczogNCxcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBmbHk6IHtcclxuICAgICAgc3RhcnQ6IFsxNjAsIDgwXSxcclxuICAgICAgZW5kOiBbNDgwLCAxMTBdLFxyXG4gICAgICBjb2x1bW5zOiA4LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHN0b3A6IHtcclxuICAgICAgc3RhcnQ6IFswLCAxMjBdLFxyXG4gICAgICBlbmQ6IFs2NDAsIDE0MF0sXHJcbiAgICAgIGNvbHVtbnM6IDE2LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGNsaW1iOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMTYwXSxcclxuICAgICAgZW5kOiBbNjQwLCAxODVdLFxyXG4gICAgICBjb2x1bW5zOiAxNixcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBidWlsZDoge1xyXG4gICAgICBzdGFydDogWzAsIDIwMF0sXHJcbiAgICAgIGVuZDogWzY0MCwgMjI1XSxcclxuICAgICAgY29sdW1uczogMTYsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgcHVuY2g6IHtcclxuICAgICAgc3RhcnQ6IFswLCAyNDBdLFxyXG4gICAgICBlbmQ6IFs2NDAsIDMwMF0sXHJcbiAgICAgIGNvbHVtbnM6IDE2LFxyXG4gICAgICByb3dzOiAyLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGRpZzoge1xyXG4gICAgICBzdGFydDogWzAsIDMyMF0sXHJcbiAgICAgIGVuZDogWzMyMCwgMzQ1XSxcclxuICAgICAgY29sdW1uczogOCxcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gTGVtbWluZyhpbml0KSB7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChjYW52YXMud2lkdGggLSAyMDApKSArIDEwMCwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGNhbnZhcy5oZWlnaHQgLSAyMDApKSArIDEwMF07XHJcbiAgICB0aGlzLmRpcmVjdGlvbiA9IE1hdGgucmFuZG9tKCkgKiAyID4gMSA/IExFRlQgOiBSSUdIVDtcclxuICAgIHRoaXMuYWN0ID0gZnVuY3Rpb24oYWN0aW9uKSB7XHJcbiAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uc1thY3Rpb25dO1xyXG4gICAgICB0aGlzLmN5Y2xlID0gMDtcclxuICAgICAgdGhpcy53aWR0aCA9ICh0aGlzLmFjdGlvbi5lbmRbMF0gLSB0aGlzLmFjdGlvbi5zdGFydFswXSkgLyB0aGlzLmFjdGlvbi5jb2x1bW5zO1xyXG4gICAgICB0aGlzLmhlaWdodCA9ICh0aGlzLmFjdGlvbi5lbmRbMV0gLSB0aGlzLmFjdGlvbi5zdGFydFsxXSAtICgyMCAqICh0aGlzLmFjdGlvbi5yb3dzIC0gMSkpKSAvIHRoaXMuYWN0aW9uLnJvd3M7XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICB0aGlzLmFjdChpbml0KTtcclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMucG9zaXRpb25bMF0sIHRoaXMucG9zaXRpb25bMV0pO1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMud2lkdGggLyAyLCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09IExFRlQpIHtcclxuICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBjb2x1bW4gPSB0aGlzLmN5Y2xlICUgdGhpcy5hY3Rpb24uY29sdW1ucztcclxuICAgICAgdmFyIHJvdyA9IE1hdGguZmxvb3IodGhpcy5jeWNsZSAvIHRoaXMuYWN0aW9uLmNvbHVtbnMpO1xyXG4gICAgICBjdHguZHJhd0ltYWdlKGxlbW1pbmdzSW1hZ2UsICh0aGlzLndpZHRoICogY29sdW1uKSArIHRoaXMuYWN0aW9uLnN0YXJ0WzBdLCAoKHRoaXMuaGVpZ2h0ICsgMjApICogcm93KSArIHRoaXMuYWN0aW9uLnN0YXJ0WzFdLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgMCwgMCwgdGhpcy53aWR0aCAqIDIsIHRoaXMuaGVpZ2h0ICogMik7XHJcbiAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgIGlmICh0aGlzLmFjdGlvbi5yZXZlcnNlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlKys7XHJcbiAgICAgICAgICBpZiAodGhpcy5jeWNsZSA+PSB0aGlzLmFjdGlvbi5jb2x1bW5zICogdGhpcy5hY3Rpb24ucm93cykge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbiA9ICF0aGlzLmFuaW1hdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5jeWNsZS0tO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlLS07XHJcbiAgICAgICAgICBpZiAodGhpcy5jeWNsZSA8IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSAhdGhpcy5hbmltYXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuY3ljbGUgPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmN5Y2xlKys7XHJcbiAgICAgICAgaWYgKHRoaXMuY3ljbGUgPj0gdGhpcy5hY3Rpb24uY29sdW1ucyAqIHRoaXMuYWN0aW9uLnJvd3MpIHtcclxuICAgICAgICAgIHRoaXMuY3ljbGUgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEhhdGNoKCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFsyMCwgMjBdO1xyXG4gICAgdGhpcy5hY3Rpb24gPSB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMF0sXHJcbiAgICAgIGVuZDogWzgyLCA1MDBdLFxyXG4gICAgICBjb2x1bW5zOiAxLFxyXG4gICAgICByb3dzOiAxMFxyXG4gICAgfVxyXG4gICAgdGhpcy53aWR0aCA9ICh0aGlzLmFjdGlvbi5lbmRbMF0gLSB0aGlzLmFjdGlvbi5zdGFydFswXSkgLyB0aGlzLmFjdGlvbi5jb2x1bW5zO1xyXG4gICAgdGhpcy5oZWlnaHQgPSAodGhpcy5hY3Rpb24uZW5kWzFdIC0gdGhpcy5hY3Rpb24uc3RhcnRbMV0pIC8gdGhpcy5hY3Rpb24ucm93cztcclxuICAgIHRoaXMuY3ljbGUgPSAwO1xyXG4gICAgdGhpcy5vcGVuID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgIGN0eC50cmFuc2xhdGUodGhpcy5wb3NpdGlvblswXSwgdGhpcy5wb3NpdGlvblsxXSk7XHJcbiAgICAgIGN0eC50cmFuc2xhdGUodGhpcy53aWR0aCAvIDIsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgIHZhciBjb2x1bW4sIHJvdztcclxuICAgICAgaWYgKHN0YXJ0ZWQpIHtcclxuICAgICAgICBjb2x1bW4gPSB0aGlzLmN5Y2xlICUgdGhpcy5hY3Rpb24uY29sdW1ucztcclxuICAgICAgICByb3cgPSBNYXRoLmZsb29yKHRoaXMuY3ljbGUgLyB0aGlzLmFjdGlvbi5jb2x1bW5zKTtcclxuICAgICAgICBpZiAodGhpcy5jeWNsZSA8IDkpIHtcclxuICAgICAgICAgIHRoaXMuY3ljbGUrKztcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29sdW1uID0gMDtcclxuICAgICAgICByb3cgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIGN0eC5kcmF3SW1hZ2UoZGVjb3JJbWFnZSwgKHRoaXMud2lkdGggKiBjb2x1bW4pICsgdGhpcy5hY3Rpb24uc3RhcnRbMF0sICh0aGlzLmhlaWdodCAqIHJvdykgKyB0aGlzLmFjdGlvbi5zdGFydFsxXSAtIDEsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCAwLCAwLCB0aGlzLndpZHRoICogMiwgdGhpcy5oZWlnaHQgKiAyKTtcclxuICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNwYXduTGVtbWluZygpIHtcclxuICAgIE9iamVjdC5rZXlzKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oYWN0aW9uKSB7XHJcbiAgICAgIGxlbW1pbmdzW01hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCldID0gbmV3IExlbW1pbmcoYWN0aW9uKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblx0ZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcclxuXHRcdC8vIFJlZ2lzdGVyIGFuIGV2ZW50IGxpc3RlbmVyIHRvXHJcblx0XHQvLyBjYWxsIHRoZSByZXNpemVDYW52YXMoKSBmdW5jdGlvbiBlYWNoIHRpbWVcclxuXHRcdC8vIHRoZSB3aW5kb3cgaXMgcmVzaXplZC5cclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVDYW52YXMsIGZhbHNlKTtcclxuXHRcdC8vIERyYXcgY2FudmFzIGJvcmRlciBmb3IgdGhlIGZpcnN0IHRpbWUuXHJcblx0XHRyZXNpemVDYW52YXMoKTtcclxuXHR9XHJcblx0Ly8gUnVucyBlYWNoIHRpbWUgdGhlIERPTSB3aW5kb3cgcmVzaXplIGV2ZW50IGZpcmVzLlxyXG5cdC8vIFJlc2V0cyB0aGUgY2FudmFzIGRpbWVuc2lvbnMgdG8gbWF0Y2ggd2luZG93LFxyXG5cdC8vIHRoZW4gZHJhd3MgdGhlIG5ldyBib3JkZXJzIGFjY29yZGluZ2x5LlxyXG5cdGZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpIHtcclxuXHRcdGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG5cdFx0Y2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIChjYW52YXMud2lkdGggPD0gNzY4ID8gNTAgOiAxMDUpO1xyXG5cdH1cclxuXHJcblx0aW5pdGlhbGl6ZSgpO1xyXG4gIHNwYXduTGVtbWluZygpO1xyXG4gIGxldCBoYXRjaCA9IG5ldyBIYXRjaCgpXHJcbiAgZHJhdygpO1xyXG5cclxuICBmdW5jdGlvbiBkcmF3KCkge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgaWYgKCFzdGFydGVkKSB7XHJcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgY3R4LmZvbnQ9JzQwcHggTW9ub3Rvbic7XHJcbiAgICAgIGN0eC5saW5lV2lkdGggPSAnMTAnO1xyXG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnYmx1ZSc7XHJcbiAgICAgIGN0eC5yZWN0KDE1LCBjYW52YXMuaGVpZ2h0IC0gNDUsIGN0eC5tZWFzdXJlVGV4dCgnU3RhcnQnKS53aWR0aCArIDIwLCBjdHgubWVhc3VyZVRleHQoJ1N0YXJ0JykuaGVpZ2h0ICsgY2FudmFzLmhlaWdodCAtIDQ1KTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgY3R4LmZpbGxUZXh0KCdTdGFydCcsIDIwLCBjYW52YXMuaGVpZ2h0IC0gNTApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm9yICh2YXIgaSBpbiBsZW1taW5ncykge1xyXG4gICAgICAgIGxlbW1pbmdzW2ldLm1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGF0Y2gub3BlbigpO1xyXG4gICAgc3RhcnRlZCA9IHRydWU7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICBkcmF3KCk7XHJcbiAgICB9LCAxNTApO1xyXG4gIH1cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignTGlzdHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBDYXRlZ29yaWVzU3ZjKSB7XHJcblxyXG4gICRzY29wZS5zaG93Q2F0ZWdvcnkgPSB0cnVlO1xyXG5cclxuICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIENhdGVnb3JpZXNTdmMuZ2V0Q2F0ZWdvcmllcygpXHJcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgJHNjb3BlLmNhdGVnb3JpZXMgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAkc2NvcGUudGFza3MgPSBbXTtcclxuICAgICAgZm9yICh2YXIgaSBpbiAkc2NvcGUuY2F0ZWdvcmllcykge1xyXG4gICAgICAgIGZvciAodmFyIGogaW4gJHNjb3BlLmNhdGVnb3JpZXNbaV0udGFza3MpIHtcclxuICAgICAgICAgICRzY29wZS50YXNrcy5wdXNoKHtcclxuICAgICAgICAgICAgXCJjYXRlZ29yeVwiOiAkc2NvcGUuY2F0ZWdvcmllc1tpXS5uYW1lLFxyXG4gICAgICAgICAgICBcInRhc2tcIjogJHNjb3BlLmNhdGVnb3JpZXNbaV0udGFza3Nbal0ubmFtZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkgPSBmdW5jdGlvbihjYXRlZ29yeSkge1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkgPSBjYXRlZ29yeTtcclxuICAgICRzY29wZS5zZWxlY3RlZFRhc2tzID0gW107XHJcbiAgICAkc2NvcGUuc2VsZWN0YWJsZVRhc2tzID0gW107XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzKSB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RhYmxlVGFza3MucHVzaCgkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXSk7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuc2hvd0NhdGVnb3J5ID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZW50ZXJlZENhdGVnb3J5ID0gJyc7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLm5ld0NhdGVnb3J5ID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XHJcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLmNhdGVnb3JpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKCRzY29wZS5jYXRlZ29yaWVzW2ldLm5hbWUgPT09IGNhdGVnb3J5KSB7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdENhdGVnb3J5KCRzY29wZS5jYXRlZ29yaWVzW2ldKTtcclxuICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghZm91bmQpIHtcclxuICAgICAgQ2F0ZWdvcmllc1N2Yy5hZGRDYXRlZ29yeSh7XHJcbiAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5XHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNhdGVnb3J5KSB7XHJcbiAgICAgICAgJHNjb3BlLmluaXQoKTtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgICRzY29wZS5lbnRlcmVkQ2F0ZWdvcnkgPSAnJztcclxuICB9O1xyXG5cclxuICAkc2NvcGUubmV3VGFzayA9IGZ1bmN0aW9uICh0YXNrKSB7XHJcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGkgaW4gJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MpIHtcclxuICAgICAgaWYgKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldLm5hbWUgPT09IHRhc2spIHtcclxuICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdFRhc2soJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWZvdW5kKSB7XHJcbiAgICAgIENhdGVnb3JpZXNTdmMuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS5uYW1lLCB7XHJcbiAgICAgICAgdGFzazogdGFza1xyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcy5wdXNoKHsgbmFtZTogdGFzayB9KTtcclxuICAgICAgICAkc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcywgJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MubGVuZ3RoIC0gMV0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgICRzY29wZS5lbnRlcmVkVGFzayA9ICcnO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zZWxlY3RUYXNrID0gZnVuY3Rpb24gKHRhc2spIHtcclxuICAgICRzY29wZS5hZGRUYXNrKCRzY29wZS5zZWxlY3RlZFRhc2tzLCB0YXNrKTtcclxuICAgICRzY29wZS5yZW1vdmVUYXNrKCRzY29wZS5zZWxlY3RhYmxlVGFza3MsIHRhc2spO1xyXG4gICAgJHNjb3BlLmVudGVyZWRUYXNrID0gJyc7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnVuc2VsZWN0VGFzayA9IGZ1bmN0aW9uICh0YXNrKSB7XHJcbiAgICAkc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLCB0YXNrKTtcclxuICAgICRzY29wZS5yZW1vdmVUYXNrKCRzY29wZS5zZWxlY3RlZFRhc2tzLCB0YXNrKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuYWRkVGFzayA9IGZ1bmN0aW9uKHRhc2tMaXN0LCB0YXNrKSB7XHJcbiAgICB0YXNrTGlzdC5wdXNoKHRhc2spO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5yZW1vdmVUYXNrID0gZnVuY3Rpb24odGFza0xpc3QsIHRhc2spIHtcclxuICAgIHRhc2tMaXN0LnNwbGljZSh0YXNrTGlzdC5pbmRleE9mKHRhc2spLCAxKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc3RhcnRQcmlvcml0aXppbmcgPSBmdW5jdGlvbigpIHtcclxuICAgIENhdGVnb3JpZXNTdmMuc2V0UHJpb3JpdHlMaXN0KCRzY29wZS5zZWxlY3RlZFRhc2tzKTtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvcHJpb3JpdGl6ZScpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZXRRdWVzdGlvbnMgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmICghJHNjb3BlLnNlbGVjdGVkVGFza3MpIHJldHVybiAnJztcclxuICAgIHZhciBjb3VudGVyID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAkc2NvcGUuc2VsZWN0ZWRUYXNrcy5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgIGNvdW50ZXIgKz0gaTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb3VudGVyO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJTdmMpIHtcclxuXHJcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgRmlyZWJhc2VVSSBXaWRnZXQgdXNpbmcgRmlyZWJhc2UuXHJcbiAgdmFyIHVpID0gbmV3IGZpcmViYXNldWkuYXV0aC5BdXRoVUkoZmlyZWJhc2UuYXV0aCgpKTtcclxuXHJcbiAgJHNjb3BlLiRvbignbG9nb3V0JywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgIHVpLnJlc2V0KCk7XHJcbiAgICBzdGFydFVJKCk7XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXJ0VUkoKSB7XHJcbiAgICB1aS5zdGFydCgnI2ZpcmViYXNldWktYXV0aC1jb250YWluZXInLCB7XHJcblxyXG4gICAgICBjYWxsYmFja3M6IHtcclxuICAgICAgICBzaWduSW5TdWNjZXNzOiBmdW5jdGlvbihjdXJyZW50VXNlciwgY3JlZGVudGlhbCwgcmVkaXJlY3RVcmwpIHtcclxuICAgICAgICAgIC8vIE5vIHJlZGlyZWN0LlxyXG4gICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLmdldElkVG9rZW4odHJ1ZSkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XHJcbiAgICAgICAgICAgIFVzZXJTdmMuYXV0aGVudGljYXRlKHtcclxuICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogY3VycmVudFVzZXIuZGlzcGxheU5hbWUsXHJcbiAgICAgICAgICAgICAgZW1haWw6IGN1cnJlbnRVc2VyLmVtYWlsLFxyXG4gICAgICAgICAgICAgIHBob3RvVVJMOiBjdXJyZW50VXNlci5waG90b1VSTCxcclxuICAgICAgICAgICAgICBlbWFpbFZlcmlmaWVkOiBjdXJyZW50VXNlci5lbWFpbFZlcmlmaWVkLFxyXG4gICAgICAgICAgICAgIGlkVG9rZW46IGlkVG9rZW5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICQoJyNtb2RhbC1sb2dpbicpLm1vZGFsKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICAgLy8kbG9jYXRpb24ucGF0aCgnLycpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdwb3B1cCcsIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdMb2dpbiBGYWlsZWQnLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FsZXJ0LWRhbmdlcidcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIC4uLlxyXG4gICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAgICAgLy8gSGFuZGxlIGVycm9yXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBzaWduSW5GYWlsdXJlIGNhbGxiYWNrIG11c3QgYmUgcHJvdmlkZWQgdG8gaGFuZGxlIG1lcmdlIGNvbmZsaWN0cyB3aGljaFxyXG4gICAgICAgIC8vIG9jY3VyIHdoZW4gYW4gZXhpc3RpbmcgY3JlZGVudGlhbCBpcyBsaW5rZWQgdG8gYW4gYW5vbnltb3VzIHVzZXIuXHJcbiAgICAgICAgc2lnbkluRmFpbHVyZTogZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAgIC8vIEZvciBtZXJnZSBjb25mbGljdHMsIHRoZSBlcnJvci5jb2RlIHdpbGwgYmVcclxuICAgICAgICAgIC8vICdmaXJlYmFzZXVpL2Fub255bW91cy11cGdyYWRlLW1lcmdlLWNvbmZsaWN0Jy5cclxuICAgICAgICAgIGlmIChlcnJvci5jb2RlICE9ICdmaXJlYmFzZXVpL2Fub255bW91cy11cGdyYWRlLW1lcmdlLWNvbmZsaWN0Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBUaGUgY3JlZGVudGlhbCB0aGUgdXNlciB0cmllZCB0byBzaWduIGluIHdpdGguXHJcbiAgICAgICAgICB2YXIgY3JlZCA9IGVycm9yLmNyZWRlbnRpYWw7XHJcbiAgICAgICAgICAvLyBDb3B5IGRhdGEgZnJvbSBhbm9ueW1vdXMgdXNlciB0byBwZXJtYW5lbnQgdXNlciBhbmQgZGVsZXRlIGFub255bW91c1xyXG4gICAgICAgICAgLy8gdXNlci5cclxuICAgICAgICAgIC8vIC4uLlxyXG4gICAgICAgICAgLy8gRmluaXNoIHNpZ24taW4gYWZ0ZXIgZGF0YSBpcyBjb3BpZWQuXHJcbiAgICAgICAgICByZXR1cm4gZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDcmVkZW50aWFsKGNyZWQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdWlTaG93bjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAvLyBUaGUgd2lkZ2V0IGlzIHJlbmRlcmVkLlxyXG4gICAgICAgICAgLy8gSGlkZSB0aGUgbG9hZGVyLlxyXG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRlcicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBzaWduSW5TdWNjZXNzVXJsOiAnL2hvbWUnLFxyXG4gICAgICBzaWduSW5PcHRpb25zOiBbXHJcbiAgICAgICAgLy9maXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICAgIGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICAgIGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQsXHJcbiAgICAgIF0sXHJcblxyXG4gICAgICAvLyBXaWxsIHVzZSBwb3B1cCBmb3IgSURQIFByb3ZpZGVycyBzaWduLWluIGZsb3cgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCwgcmVkaXJlY3QuXHJcbiAgICAgIHNpZ25JbkZsb3c6ICdwb3B1cCcsXHJcbiAgICAgIC8vIE90aGVyIGNvbmZpZyBvcHRpb25zLi4uXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXJ0VUkoKTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRmaWx0ZXIsIFBvc3RzU3ZjKSB7XHJcblxyXG4gICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCRzY29wZS5wb3N0Qm9keSkge1xyXG4gICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xyXG4gICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChwb3N0KSB7XHJcbiAgICAgICAgJHNjb3BlLnBvc3RCb2R5ID0gbnVsbDtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgUG9zdHNTdmMuZmV0Y2goKVxyXG4gIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgJHNjb3BlLnBvc3RzID0gcmVzcG9uc2UuZGF0YTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLiRvbignd3M6bmV3X3Bvc3QnLCBmdW5jdGlvbiAoXywgcG9zdCkge1xyXG4gICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgIFBvc3RzU3ZjLmdldFBvc3QocG9zdClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgJHNjb3BlLnBvc3RzLnVuc2hpZnQocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdQcmlvcml0aXplQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgQ2F0ZWdvcmllc1N2Yykge1xyXG5cclxuICAkc2NvcGUucHJpb3JpdHlMaXN0ID0gQ2F0ZWdvcmllc1N2Yy5nZXRQcmlvcml0eUxpc3QoKTtcclxuXHJcbiAgaWYgKCEkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2xpc3RzJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uID0gMTtcclxuICAgICRzY29wZS5jdXJyZW50UXVlc3Rpb24gPSAxO1xyXG4gICAgJHNjb3BlLmRvbmUgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gICRzY29wZS5tYWtlQ2hvaWNlID0gZnVuY3Rpb24oY2hvaWNlKSB7XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQgPT09ICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uKSB7XHJcbiAgICAgICAgJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgPSBjaG9pY2UgPT09IDEgPyAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmZpcnN0Q2hvaWNlIDogJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICgkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbiA9PT0gJHNjb3BlLmN1cnJlbnRRdWVzdGlvbikge1xyXG4gICAgICAkc2NvcGUuY3VycmVudFF1ZXN0aW9uID0gJHNjb3BlLmN1cnJlbnRRdWVzdGlvbiA9PT0gJHNjb3BlLnByaW9yaXR5TGlzdC5sZW5ndGggPyAxIDogJHNjb3BlLmN1cnJlbnRRdWVzdGlvbiArIDE7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbiA9ICRzY29wZS5jdXJyZW50UXVlc3Rpb247XHJcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcclxuICAgIGZvciAoaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIGlmICgkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSA9PT0gJycpIHtcclxuICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghZm91bmQpIHtcclxuICAgICAgJCgnI3ByaW9yaXRpemVDaG9pY2VzJykuaGlkZSgzMDApO1xyXG4gICAgICAkc2NvcGUuZG9uZSA9IHRydWU7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmdldEJ1dHRvblZhbHVlID0gZnVuY3Rpb24oY2hvaWNlKSB7XHJcbiAgICBpZiAoISRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2NvcGUucHJpb3JpdHlMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICgkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkID09PSAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbikge1xyXG4gICAgICAgIHJldHVybiBjaG9pY2UgPT09IDEgPyAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmZpcnN0Q2hvaWNlIDogJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VsZWN0UXVlc3Rpb24gPSBmdW5jdGlvbihxdWVzdGlvbikge1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24gPSBxdWVzdGlvbjtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0RmlsdGVyZWRQcmlvcml0eUxpc3QgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmICghJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJHNjb3BlLnByaW9yaXR5TGlzdFxyXG4gICAgICAuc29ydChmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEuaWQtYi5pZDsgfSlcclxuICAgICAgLmZpbHRlcihmdW5jdGlvbihxdWVzdGlvbikgeyByZXR1cm4gcXVlc3Rpb24uY2hvaWNlICE9PSAnJyB8fCBxdWVzdGlvbi5pZCA9PT0gJHNjb3BlLmN1cnJlbnRRdWVzdGlvbjsgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmdldENob2ljZXNNYWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoISRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgdmFyIGNob2ljZXNNYWRlID0gMDtcclxuICAgIGZvciAodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgIT09ICcnKSB7XHJcbiAgICAgICAgY2hvaWNlc01hZGUrKztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNob2ljZXNNYWRlO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZXRCdXR0b25DbGFzcyA9IGZ1bmN0aW9uKGNob2ljZSkge1xyXG4gICAgaWYgKCEkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZCA9PT0gJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24pIHtcclxuICAgICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgPT09ICcnKSB7XHJcbiAgICAgICAgICByZXR1cm4gJ2J0bi1wcmltYXJ5JztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNob2ljZSA9PT0gMSkge1xyXG4gICAgICAgICAgcmV0dXJuICRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2UgPT09ICRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlID8gJ2J0bi1zdWNjZXNzJyA6ICdidG4tZGFuZ2VyJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuICRzY29wZS5wcmlvcml0eUxpc3RbaV0uc2Vjb25kQ2hvaWNlID09PSAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSA/ICdidG4tc3VjY2VzcycgOiAnYnRuLWRhbmdlcic7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNob3dDaG9pY2VzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkKCcjcHJpb3JpdGl6ZUNob2ljZXMnKS5zaG93KDEwMDApO1xyXG4gICAgJCgnI3Jldmlld0Nob2ljZXMnKS5oaWRlKCk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmNoYXJ0Q2xpY2sgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgICBpZiAoICRzY29wZS5jaGFydCApIHtcclxuICAgICAgLy8gRGlmZmVyZW50IG1ldGhvZHMgZGVwZW5kaW5nIG9uIGNoYXJ0IHR5cGVcclxuICAgICAgLy9jb25zb2xlLmxvZyggJHNjb3BlLmNoYXJ0LmdldFBvaW50c0F0RXZlbnQoIGV2ZW50ICkgKTsgLy8gZm9yIFBvaW50c1xyXG4gICAgICBjb25zb2xlLmxvZyggJHNjb3BlLmNoYXJ0LmdldFNlZ21lbnRzQXRFdmVudCggZXZlbnQgKSApOyAvLyBmb3IgU2VnbWVudHNcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2hvd1Jlc3VsdHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAkc2NvcGUuZGF0YSA9IFtdO1xyXG4gICAgJHNjb3BlLm9wdGlvbnMgPSB7XHJcbiAgICAgIC8vIFNldHMgdGhlIGNoYXJ0IHRvIGJlIHJlc3BvbnNpdmVcclxuICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcclxuXHJcbiAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgd2Ugc2hvdWxkIHNob3cgYSBzdHJva2Ugb24gZWFjaCBzZWdtZW50XHJcbiAgICAgIHNlZ21lbnRTaG93U3Ryb2tlIDogdHJ1ZSxcclxuXHJcbiAgICAgIC8vU3RyaW5nIC0gVGhlIGNvbG91ciBvZiBlYWNoIHNlZ21lbnQgc3Ryb2tlXHJcbiAgICAgIHNlZ21lbnRTdHJva2VDb2xvciA6ICcjZmZmJyxcclxuXHJcbiAgICAgIC8vTnVtYmVyIC0gVGhlIHdpZHRoIG9mIGVhY2ggc2VnbWVudCBzdHJva2VcclxuICAgICAgc2VnbWVudFN0cm9rZVdpZHRoIDogMixcclxuXHJcbiAgICAgIC8vTnVtYmVyIC0gVGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGNoYXJ0IHRoYXQgd2UgY3V0IG91dCBvZiB0aGUgbWlkZGxlXHJcbiAgICAgIHBlcmNlbnRhZ2VJbm5lckN1dG91dCA6IDAsIC8vIFRoaXMgaXMgMCBmb3IgUGllIGNoYXJ0c1xyXG5cclxuICAgICAgLy9OdW1iZXIgLSBBbW91bnQgb2YgYW5pbWF0aW9uIHN0ZXBzXHJcbiAgICAgIGFuaW1hdGlvblN0ZXBzIDogMTAwLFxyXG5cclxuICAgICAgLy9TdHJpbmcgLSBBbmltYXRpb24gZWFzaW5nIGVmZmVjdFxyXG4gICAgICBhbmltYXRpb25FYXNpbmcgOiAnZWFzZU91dEJvdW5jZScsXHJcblxyXG4gICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgdGhlIHJvdGF0aW9uIG9mIHRoZSBEb3VnaG51dFxyXG4gICAgICBhbmltYXRlUm90YXRlIDogdHJ1ZSxcclxuXHJcbiAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgd2UgYW5pbWF0ZSBzY2FsaW5nIHRoZSBEb3VnaG51dCBmcm9tIHRoZSBjZW50cmVcclxuICAgICAgYW5pbWF0ZVNjYWxlIDogZmFsc2UsXHJcblxyXG4gICAgICAvL1N0cmluZyAtIEEgbGVnZW5kIHRlbXBsYXRlXHJcbiAgICAgIGxlZ2VuZFRlbXBsYXRlIDogJzxoMyBjbGFzcz1cInRjLWNoYXJ0LWpzLWxlZ2VuZFwiIHN0eWxlPVwicGFkZGluZzo1cHhcIj48JSBmb3IgKHZhciBpPTA7IGk8c2VnbWVudHMubGVuZ3RoOyBpKyspeyU+PGRpdiBjbGFzcz1cImxhYmVsXCIgc3R5bGU9XCJmbG9hdDpsZWZ0O21hcmdpbjo1cHg7YmFja2dyb3VuZC1jb2xvcjo8JT1zZWdtZW50c1tpXS5maWxsQ29sb3IlPlwiPjwlaWYoc2VnbWVudHNbaV0ubGFiZWwpeyU+PCU9c2VnbWVudHNbaV0ubGFiZWwlPjwlfSU+PC9kaXY+PCV9JT48L2gzPidcclxuICAgIH07XHJcbiAgICBmb3IgKHZhciBpIGluIENhdGVnb3JpZXNTdmMuY2hvaWNlcykge1xyXG4gICAgICBDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMgPSAwO1xyXG4gICAgICBmb3IgKHZhciBqIGluICRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgICBpZiAoQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLm5hbWUgPT09ICRzY29wZS5wcmlvcml0eUxpc3Rbal0uY2hvaWNlKSB7XHJcbiAgICAgICAgICBDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMrKztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIENhdGVnb3JpZXNTdmMuY2hvaWNlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEudm90ZXMgPCBiLnZvdGVzOyB9KTtcclxuICAgIGZvciAoaSBpbiBDYXRlZ29yaWVzU3ZjLmNob2ljZXMpIHtcclxuICAgICAgJHNjb3BlLmRhdGEucHVzaCh7XHJcbiAgICAgICAgdmFsdWU6IENhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS52b3RlcyxcclxuICAgICAgICBsYWJlbDogQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLm5hbWVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAkKCcjcHJpb3JpdGl6ZVJlc3VsdCcpLmhpZGUoKTtcclxuICAgICQoJyNwcmlvcml0aXplQ2hvaWNlcycpLmhpZGUoKTtcclxuICAgICQoJyNwcmlvcml0eVJlc3VsdHMnKS5zaG93KDEwMDApO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdQcm9maWxlQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgVXNlclN2Yykge1xyXG5cclxuICBpZiAoISRzY29wZS5jdXJyZW50VXNlcikge1xyXG4gICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICB9IGVsc2Uge1xyXG4gICAgJCgnI3NleC1pbmRpY2F0b3InKS5vZmZzZXQoeyBsZWZ0OiAoJHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlci5zZXggLyAyMDAgKiAkKCcjc2V4Jykud2lkdGgoKSkgKyAkKCcjc2V4Jykub2Zmc2V0KCkubGVmdCB9KTtcclxuICAgICQoJyNpZGVudGl0eS1pbmRpY2F0b3InKS5vZmZzZXQoeyBsZWZ0OiAoJHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlci5pZGVudGl0eSAvIDIwMCAqICQoJyNpZGVudGl0eScpLndpZHRoKCkpICsgJCgnI2lkZW50aXR5Jykub2Zmc2V0KCkubGVmdCB9KTtcclxuICB9XHJcblxyXG4gICRzY29wZS5zZXhlcyA9IFtcclxuICAgICdNYWxlJyxcclxuICAgICdGdE0gTWFsZScsXHJcbiAgICAnSW50ZXJzZXgnLFxyXG4gICAgJ010RiBGZW1hbGUnLFxyXG4gICAgJ0ZlbWFsZSdcclxuICBdO1xyXG4gICRzY29wZS5pZGVudGl0aWVzID0gW1xyXG4gICAgJ01hbicsXHJcbiAgICAnQmlnZW5kZXInLFxyXG4gICAgJ1BhbmdlbmRlcicsXHJcbiAgICAnQWdlbmRlcicsXHJcbiAgICAnUG9seWdlbmRlcicsXHJcbiAgICAnR2VuZGVyZmx1aWQnLFxyXG4gICAgJ0dlbmRlcnF1ZWVyJyxcclxuICAgICdRdWVlcicsXHJcbiAgICAnV29tYW4nXHJcbiAgXTtcclxuXHJcbiAgJHNjb3BlLmRhdGVPcHRpb25zID0ge1xyXG4gICAgbWF4RGF0ZTogbmV3IERhdGUoKSxcclxuICAgIG1pbkRhdGU6IG5ldyBEYXRlKDE5MDAsIDEsIDEpLFxyXG4gICAgaW5pdERhdGU6IG5ldyBEYXRlKDIwMDAsIDEsIDEpLFxyXG4gICAgZGF0ZXBpY2tlck1vZGU6ICd5ZWFyJ1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZW5kZXIgPSBmdW5jdGlvbihhcnJheSwgcGVyY2VudGFnZSkge1xyXG4gICAgcmV0dXJuIGFycmF5W01hdGgucm91bmQocGVyY2VudGFnZSAvIDIwMCAqIChhcnJheS5sZW5ndGggLSAxKSldO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zdGFydFNsaWRlciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICB9O1xyXG4gICRzY29wZS5kcmFnU2xpZGVyID0gZnVuY3Rpb24oZXZlbnQsIHVpLCB0eXBlKSB7XHJcbiAgICAkc2NvcGUuY3VycmVudFVzZXIuZ2VuZGVyW3R5cGVdID0gTWF0aC5yb3VuZCgoJCgnIycgKyB0eXBlICsgJy1pbmRpY2F0b3InKS5vZmZzZXQoKS5sZWZ0IC0gJCgnIycgKyB0eXBlKS5vZmZzZXQoKS5sZWZ0KSAvICgkKCcjJyArIHR5cGUpLndpZHRoKCkgLSAkKCcjJyArIHR5cGUgKyAnLWluZGljYXRvcicpLndpZHRoKCkpICogMjAwKTtcclxuICAgICRzY29wZS4kYXBwbHkoKTtcclxuICB9O1xyXG4gICRzY29wZS5zdG9wU2xpZGVyID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gIH07XHJcblxyXG4gICRzY29wZS51c2VybmFtZVRvZ2dsZSA9IHRydWU7XHJcbiAgJHNjb3BlLnBhc3N3b3JkVG9nZ2xlID0gdHJ1ZTtcclxuXHJcbiAgJHNjb3BlLnRvZ2dsZVVzZXJuYW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkc2NvcGUudXNlcm5hbWVUb2dnbGUgPSAhJHNjb3BlLnVzZXJuYW1lVG9nZ2xlO1xyXG4gICAgJHNjb3BlLm5ld1VzZXJuYW1lID0gJHNjb3BlLmN1cnJlbnRVc2VyLnVzZXJuYW1lO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS50b2dnbGVQYXNzd29yZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLm5ld1Bhc3N3b3JkID0gbnVsbDtcclxuICAgICRzY29wZS5jb25maXJtUGFzc3dvcmQgPSBudWxsO1xyXG4gICAgJHNjb3BlLnBhc3N3b3JkVG9nZ2xlID0gISRzY29wZS5wYXNzd29yZFRvZ2dsZTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuY2hlY2tQYXNzd29yZCA9IGZ1bmN0aW9uIChwYXNzd29yZCkge1xyXG4gICAgaWYgKHBhc3N3b3JkKSB7XHJcbiAgICAgIHZhciB1c2VyID0gJHNjb3BlLmN1cnJlbnRVc2VyLl9pZDtcclxuICAgICAgVXNlclN2Yy5jaGVja1Bhc3N3b3JkKHVzZXIsIHBhc3N3b3JkKVxyXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUudG9nZ2xlUGFzc3dvcmQoKTtcclxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvcmlnaW5hbEJnID0gJChcIi5wYXNzd29yZFwiKS5jc3MoXCJiYWNrZ3JvdW5kQ29sb3JcIik7XHJcbiAgICAgICAgJChcIi5wYXNzd29yZFwiKS5hbmltYXRlKHsgYmFja2dyb3VuZENvbG9yOiBcIiNGRkI2QzFcIiB9LCAyMDApLmFuaW1hdGUoeyBiYWNrZ3JvdW5kQ29sb3I6IG9yaWdpbmFsQmcgfSwgMjAwKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24gKG9sZFBhc3N3b3JkLCBuZXdQYXNzd29yZCwgY29uZmlybVBhc3N3b3JkKSB7XHJcbiAgICBpZiAobmV3UGFzc3dvcmQpIHtcclxuICAgICAgaWYgKG5ld1Bhc3N3b3JkID09IGNvbmZpcm1QYXNzd29yZCkge1xyXG4gICAgICAgIHZhciB1c2VyID0gJHNjb3BlLmN1cnJlbnRVc2VyLl9pZDtcclxuICAgICAgICBVc2VyU3ZjLmNoYW5nZVBhc3N3b3JkKHVzZXIsIG9sZFBhc3N3b3JkLCBuZXdQYXNzd29yZClcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICRzY29wZS4kZW1pdCgncG9wdXAnLCB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdQYXNzd29yZCBDaGFuZ2VkJyxcclxuICAgICAgICAgICAgdHlwZTogJ2FsZXJ0LXN1Y2Nlc3MnXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgICRzY29wZS5vbGRQYXNzd29yZCA9IG51bGw7XHJcbiAgICAgICAgICAkc2NvcGUudG9nZ2xlUGFzc3dvcmQoKTtcclxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3BvcHVwJywge1xyXG4gICAgICAgICAgICBtZXNzYWdlOiAnUGFzc3dvcmQgQ2hhbmdlIEZhaWxlZCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdhbGVydC1kYW5nZXInXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgb3JpZ2luYWxCZyA9ICQoXCIucGFzc3dvcmRcIikuY3NzKFwiYmFja2dyb3VuZENvbG9yXCIpO1xyXG4gICAgICAgICQoXCIucGFzc3dvcmRcIikuYW5pbWF0ZSh7IGJhY2tncm91bmRDb2xvcjogXCIjRkZCNkMxXCIgfSwgMjAwKS5hbmltYXRlKHsgYmFja2dyb3VuZENvbG9yOiBvcmlnaW5hbEJnIH0sIDIwMCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkc2NvcGUuY2hhbmdlVXNlcm5hbWUgPSBmdW5jdGlvbiAodXNlcm5hbWUpIHtcclxuICAgICRzY29wZS4kZW1pdCgnbG9hZGluZycpO1xyXG4gICAgVXNlclN2Yy5jaGFuZ2VVc2VybmFtZSgkc2NvcGUuY3VycmVudFVzZXIuX2lkLCB1c2VybmFtZSlcclxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAkc2NvcGUuJGVtaXQoJ3VwZGF0ZScsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgJHNjb3BlLiRlbWl0KCdwb3B1cCcsIHtcclxuICAgICAgICBtZXNzYWdlOiB1c2VybmFtZSArICcgYWxyZWFkeSBpbiB1c2UnLFxyXG4gICAgICAgIHR5cGU6ICdhbGVydC1kYW5nZXInXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnVwZGF0ZVVzZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoJHNjb3BlLmN1cnJlbnRVc2VyKSB7ICBcclxuICAgICAgJHNjb3BlLiRlbWl0KCdsb2FkaW5nJyk7XHJcbiAgICAgIFVzZXJTdmMudXBkYXRlVXNlcigkc2NvcGUuY3VycmVudFVzZXIpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICRzY29wZS4kZW1pdCgndXBkYXRlJywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG5cclxuICAkc2NvcGUuJHdhdGNoKCdjdXJyZW50VXNlci5mbGFncy5sZW5ndGgnLCBmdW5jdGlvbihsZW5ndGgpIHtcclxuICAgICRzY29wZS51cGRhdGVVc2VyKCk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS5sb2FkQ291bnRyaWVzID0gZnVuY3Rpb24oJHF1ZXJ5KSB7XHJcbiAgICB2YXIgY291bnRyaWVzID0gW1xyXG4gICAgICB7IFwibmFtZVwiOiBcIkFuZG9ycmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hZFwiLCBcInRpZGJpdFwiOiBcIlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVW5pdGVkIEFyYWIgRW1pcmF0ZXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1hZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQWZnaGFuaXN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1hZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQW50aWd1YSBhbmQgQmFyYnVkYVwiLCBcImZsYWdcIjogXCJmbGFnLWFnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbmd1aWxsYVwiLCBcImZsYWdcIjogXCJmbGFnLWFpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbGJhbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYWxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFybWVuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQW5nb2xhXCIsIFwiZmxhZ1wiOiBcImZsYWctYW9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFudGFyY3RpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1hcVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQXJnZW50aW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctYXJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFtZXJpY2FuIFNvbW9hXCIsIFwiZmxhZ1wiOiBcImZsYWctYXNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkF1c3RyaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hdFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQXVzdHJhbGlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYXVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFydWJhXCIsIFwiZmxhZ1wiOiBcImZsYWctYXdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIsOFbGFuZCBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctYXhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkF6ZXJiYWlqYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1helwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYVwiLCBcImZsYWdcIjogXCJmbGFnLWJhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCYXJiYWRvc1wiLCBcImZsYWdcIjogXCJmbGFnLWJiXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCYW5nbGFkZXNoXCIsIFwiZmxhZ1wiOiBcImZsYWctYmRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJlbGdpdW1cIiwgXCJmbGFnXCI6IFwiZmxhZy1iZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQnVya2luYSBGYXNvXCIsIFwiZmxhZ1wiOiBcImZsYWctYmZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJ1bGdhcmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYmdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJhaHJhaW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1iaFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQnVydW5kaVwiLCBcImZsYWdcIjogXCJmbGFnLWJpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZW5pblwiLCBcImZsYWdcIjogXCJmbGFnLWJqXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBCYXJ0aMOpbGVteVwiLCBcImZsYWdcIjogXCJmbGFnLWJsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZXJtdWRhXCIsIFwiZmxhZ1wiOiBcImZsYWctYm1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJydW5laSBcIiwgXCJmbGFnXCI6IFwiZmxhZy1iblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm9saXZpYSwgUGx1cmluYXRpb25hbCBTdGF0ZSBvZlwiLCBcImZsYWdcIjogXCJmbGFnLWJvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCb25haXJlLCBTaW50IEV1c3RhdGl1cyBhbmQgU2FiYVwiLCBcImZsYWdcIjogXCJmbGFnLWJxXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCcmF6aWxcIiwgXCJmbGFnXCI6IFwiZmxhZy1iclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmFoYW1hc1wiLCBcImZsYWdcIjogXCJmbGFnLWJzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCaHV0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1idFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm91dmV0IElzbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWJ2XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCb3Rzd2FuYVwiLCBcImZsYWdcIjogXCJmbGFnLWJ3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZWxhcnVzXCIsIFwiZmxhZ1wiOiBcImZsYWctYnlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJlbGl6ZVwiLCBcImZsYWdcIjogXCJmbGFnLWJ6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYW5hZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1jYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29jb3MgKEtlZWxpbmcpIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1jY1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29uZ28sIHRoZSBEZW1vY3JhdGljIFJlcHVibGljIG9mIHRoZVwiLCBcImZsYWdcIjogXCJmbGFnLWNkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDZW50cmFsIEFmcmljYW4gUmVwdWJsaWNcIiwgXCJmbGFnXCI6IFwiZmxhZy1jZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29uZ29cIiwgXCJmbGFnXCI6IFwiZmxhZy1jZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3dpdHplcmxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1jaFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ8O0dGUgZCdJdm9pcmVcIiwgXCJmbGFnXCI6IFwiZmxhZy1jaVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29vayBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctY2tcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNoaWxlXCIsIFwiZmxhZ1wiOiBcImZsYWctY2xcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNhbWVyb29uXCIsIFwiZmxhZ1wiOiBcImZsYWctY21cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNoaW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctY25cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvbG9tYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctY29cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvc3RhIFJpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1jclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ3ViYVwiLCBcImZsYWdcIjogXCJmbGFnLWN1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYWJvIFZlcmRlXCIsIFwiZmxhZ1wiOiBcImZsYWctY3ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkN1cmHDp2FvXCIsIFwiZmxhZ1wiOiBcImZsYWctY3dcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNocmlzdG1hcyBJc2xhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1jeFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ3lwcnVzXCIsIFwiZmxhZ1wiOiBcImZsYWctY3lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkN6ZWNoIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctY3pcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdlcm1hbnlcIiwgXCJmbGFnXCI6IFwiZmxhZy1kZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRGppYm91dGlcIiwgXCJmbGFnXCI6IFwiZmxhZy1kalwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRGVubWFya1wiLCBcImZsYWdcIjogXCJmbGFnLWRrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJEb21pbmljYVwiLCBcImZsYWdcIjogXCJmbGFnLWRtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJEb21pbmljYW4gUmVwdWJsaWNcIiwgXCJmbGFnXCI6IFwiZmxhZy1kb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQWxnZXJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWR6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFY3VhZG9yXCIsIFwiZmxhZ1wiOiBcImZsYWctZWNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVzdG9uaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1lZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRWd5cHRcIiwgXCJmbGFnXCI6IFwiZmxhZy1lZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiV2VzdGVybiBTYWhhcmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1laFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRXJpdHJlYVwiLCBcImZsYWdcIjogXCJmbGFnLWVyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTcGFpblwiLCBcImZsYWdcIjogXCJmbGFnLWVzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFdGhpb3BpYVwiLCBcImZsYWdcIjogXCJmbGFnLWV0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGaW5sYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctZmlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZpamlcIiwgXCJmbGFnXCI6IFwiZmxhZy1malwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRmFsa2xhbmQgSXNsYW5kcyAoTWFsdmluYXMpXCIsIFwiZmxhZ1wiOiBcImZsYWctZmtcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1pY3JvbmVzaWEsIEZlZGVyYXRlZCBTdGF0ZXMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1mbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRmFyb2UgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWZvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGcmFuY2VcIiwgXCJmbGFnXCI6IFwiZmxhZy1mclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR2Fib25cIiwgXCJmbGFnXCI6IFwiZmxhZy1nYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVW5pdGVkIEtpbmdkb20gb2YgR3JlYXQgQnJpdGFpbiBhbmQgTm9ydGhlcm4gSXJlbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWdiXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHcmVuYWRhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2RcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdlb3JnaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1nZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRnJlbmNoIEd1aWFuYVwiLCBcImZsYWdcIjogXCJmbGFnLWdmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdWVybnNleVwiLCBcImZsYWdcIjogXCJmbGFnLWdnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHaGFuYVwiLCBcImZsYWdcIjogXCJmbGFnLWdoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHaWJyYWx0YXJcIiwgXCJmbGFnXCI6IFwiZmxhZy1naVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3JlZW5sYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2xcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdhbWJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWdtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdWluZWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1nblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3VhZGVsb3VwZVwiLCBcImZsYWdcIjogXCJmbGFnLWdwXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFcXVhdG9yaWFsIEd1aW5lYVwiLCBcImZsYWdcIjogXCJmbGFnLWdxXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHcmVlY2VcIiwgXCJmbGFnXCI6IFwiZmxhZy1nclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU291dGggR2VvcmdpYSBhbmQgdGhlIFNvdXRoIFNhbmR3aWNoIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1nc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3VhdGVtYWxhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3RcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1YW1cIiwgXCJmbGFnXCI6IFwiZmxhZy1ndVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3VpbmVhLUJpc3NhdVwiLCBcImZsYWdcIjogXCJmbGFnLWd3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdXlhbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1neVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSG9uZyBLb25nXCIsIFwiZmxhZ1wiOiBcImZsYWctaGtcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkhlYXJkIElzbGFuZCBhbmQgTWNEb25hbGQgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWhtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIb25kdXJhc1wiLCBcImZsYWdcIjogXCJmbGFnLWhuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDcm9hdGlhXCIsIFwiZmxhZ1wiOiBcImZsYWctaHJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkhhaXRpXCIsIFwiZmxhZ1wiOiBcImZsYWctaHRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkh1bmdhcnlcIiwgXCJmbGFnXCI6IFwiZmxhZy1odVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSW5kb25lc2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctaWRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIklyZWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1pZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSXNyYWVsXCIsIFwiZmxhZ1wiOiBcImZsYWctaWxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIklzbGUgb2YgTWFuXCIsIFwiZmxhZ1wiOiBcImZsYWctaW1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkluZGlhXCIsIFwiZmxhZ1wiOiBcImZsYWctaW5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJyaXRpc2ggSW5kaWFuIE9jZWFuIFRlcnJpdG9yeVwiLCBcImZsYWdcIjogXCJmbGFnLWlvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJcmFxXCIsIFwiZmxhZ1wiOiBcImZsYWctaXFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIklyYW4sIElzbGFtaWMgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1pclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSWNlbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWlzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJdGFseVwiLCBcImZsYWdcIjogXCJmbGFnLWl0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJKZXJzZXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1qZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSmFtYWljYVwiLCBcImZsYWdcIjogXCJmbGFnLWptXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJKb3JkYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1qb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSmFwYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1qcFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS2VueWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1rZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS3lyZ3l6c3RhblwiLCBcImZsYWdcIjogXCJmbGFnLWtnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYW1ib2RpYVwiLCBcImZsYWdcIjogXCJmbGFnLWtoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLaXJpYmF0aVwiLCBcImZsYWdcIjogXCJmbGFnLWtpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb21vcm9zXCIsIFwiZmxhZ1wiOiBcImZsYWcta21cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IEtpdHRzIGFuZCBOZXZpc1wiLCBcImZsYWdcIjogXCJmbGFnLWtuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLb3JlYSwgRGVtb2NyYXRpYyBQZW9wbGUncyBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLWtwXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLb3JlYSwgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1rclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS3V3YWl0XCIsIFwiZmxhZ1wiOiBcImZsYWcta3dcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNheW1hbiBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWcta3lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkthemFraHN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1relwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGFvIFBlb3BsZSdzIERlbW9jcmF0aWMgUmVwdWJsaWNcIiwgXCJmbGFnXCI6IFwiZmxhZy1sYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGViYW5vblwiLCBcImZsYWdcIjogXCJmbGFnLWxiXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBMdWNpYVwiLCBcImZsYWdcIjogXCJmbGFnLWxjXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMaWVjaHRlbnN0ZWluXCIsIFwiZmxhZ1wiOiBcImZsYWctbGlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNyaSBMYW5rYVwiLCBcImZsYWdcIjogXCJmbGFnLWxrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMaWJlcmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbHJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxlc290aG9cIiwgXCJmbGFnXCI6IFwiZmxhZy1sc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGl0aHVhbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbHRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkx1eGVtYm91cmdcIiwgXCJmbGFnXCI6IFwiZmxhZy1sdVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGF0dmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbHZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxpYnlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbHlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vcm9jY29cIiwgXCJmbGFnXCI6IFwiZmxhZy1tYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTW9uYWNvXCIsIFwiZmxhZ1wiOiBcImZsYWctbWNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vbGRvdmEsIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctbWRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vbnRlbmVncm9cIiwgXCJmbGFnXCI6IFwiZmxhZy1tZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgTWFydGluIChGcmVuY2ggcGFydClcIiwgXCJmbGFnXCI6IFwiZmxhZy1tZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFkYWdhc2NhclwiLCBcImZsYWdcIjogXCJmbGFnLW1nXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYXJzaGFsbCBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctbWhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hY2Vkb25pYSwgdGhlIGZvcm1lciBZdWdvc2xhdiBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLW1rXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWxpXCIsIFwiZmxhZ1wiOiBcImZsYWctbWxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk15YW5tYXJcIiwgXCJmbGFnXCI6IFwiZmxhZy1tbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTW9uZ29saWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1tblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFjYW9cIiwgXCJmbGFnXCI6IFwiZmxhZy1tb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctbXBcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hcnRpbmlxdWVcIiwgXCJmbGFnXCI6IFwiZmxhZy1tcVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWF1cml0YW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLW1yXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb250c2VycmF0XCIsIFwiZmxhZ1wiOiBcImZsYWctbXNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hbHRhXCIsIFwiZmxhZ1wiOiBcImZsYWctbXRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hdXJpdGl1c1wiLCBcImZsYWdcIjogXCJmbGFnLW11XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWxkaXZlc1wiLCBcImZsYWdcIjogXCJmbGFnLW12XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWxhd2lcIiwgXCJmbGFnXCI6IFwiZmxhZy1td1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWV4aWNvXCIsIFwiZmxhZ1wiOiBcImZsYWctbXhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hbGF5c2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctbXlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vemFtYmlxdWVcIiwgXCJmbGFnXCI6IFwiZmxhZy1telwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmFtaWJpYVwiLCBcImZsYWdcIjogXCJmbGFnLW5hXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOZXcgQ2FsZWRvbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbmNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5pZ2VyXCIsIFwiZmxhZ1wiOiBcImZsYWctbmVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5vcmZvbGsgSXNsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctbmZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5pZ2VyaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1uZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmljYXJhZ3VhXCIsIFwiZmxhZ1wiOiBcImZsYWctbmlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5ldGhlcmxhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctbmxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5vcndheVwiLCBcImZsYWdcIjogXCJmbGFnLW5vXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOZXBhbFwiLCBcImZsYWdcIjogXCJmbGFnLW5wXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOYXVydVwiLCBcImZsYWdcIjogXCJmbGFnLW5yXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOaXVlXCIsIFwiZmxhZ1wiOiBcImZsYWctbnVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5ldyBaZWFsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctbnpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk9tYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1vbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGFuYW1hXCIsIFwiZmxhZ1wiOiBcImZsYWctcGFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBlcnVcIiwgXCJmbGFnXCI6IFwiZmxhZy1wZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRnJlbmNoIFBvbHluZXNpYVwiLCBcImZsYWdcIjogXCJmbGFnLXBmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQYXB1YSBOZXcgR3VpbmVhXCIsIFwiZmxhZ1wiOiBcImZsYWctcGdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBoaWxpcHBpbmVzXCIsIFwiZmxhZ1wiOiBcImZsYWctcGhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBha2lzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctcGtcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBvbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLXBsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBQaWVycmUgYW5kIE1pcXVlbG9uXCIsIFwiZmxhZ1wiOiBcImZsYWctcG1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBpdGNhaXJuXCIsIFwiZmxhZ1wiOiBcImZsYWctcG5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlB1ZXJ0byBSaWNvXCIsIFwiZmxhZ1wiOiBcImZsYWctcHJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhbGVzdGluZSwgU3RhdGUgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1wc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUG9ydHVnYWxcIiwgXCJmbGFnXCI6IFwiZmxhZy1wdFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGFsYXVcIiwgXCJmbGFnXCI6IFwiZmxhZy1wd1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGFyYWd1YXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1weVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUWF0YXJcIiwgXCJmbGFnXCI6IFwiZmxhZy1xYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUsOpdW5pb25cIiwgXCJmbGFnXCI6IFwiZmxhZy1yZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUm9tYW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLXJvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTZXJiaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1yc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUnVzc2lhbiBGZWRlcmF0aW9uXCIsIFwiZmxhZ1wiOiBcImZsYWctcnVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlJ3YW5kYVwiLCBcImZsYWdcIjogXCJmbGFnLXJ3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYXVkaSBBcmFiaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1zYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU29sb21vbiBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctc2JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNleWNoZWxsZXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1zY1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3VkYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1zZFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3dlZGVuXCIsIFwiZmxhZ1wiOiBcImZsYWctc2VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNpbmdhcG9yZVwiLCBcImZsYWdcIjogXCJmbGFnLXNnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBIZWxlbmEsIEFzY2Vuc2lvbiBhbmQgVHJpc3RhbiBkYSBDdW5oYVwiLCBcImZsYWdcIjogXCJmbGFnLXNoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTbG92ZW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLXNpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTdmFsYmFyZCBhbmQgSmFuIE1heWVuXCIsIFwiZmxhZ1wiOiBcImZsYWctc2pcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNsb3Zha2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctc2tcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNpZXJyYSBMZW9uZVwiLCBcImZsYWdcIjogXCJmbGFnLXNsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYW4gTWFyaW5vXCIsIFwiZmxhZ1wiOiBcImZsYWctc21cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNlbmVnYWxcIiwgXCJmbGFnXCI6IFwiZmxhZy1zblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU29tYWxpYVwiLCBcImZsYWdcIjogXCJmbGFnLXNvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTdXJpbmFtZVwiLCBcImZsYWdcIjogXCJmbGFnLXNyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTb3V0aCBTdWRhblwiLCBcImZsYWdcIjogXCJmbGFnLXNzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYW8gVG9tZSBhbmQgUHJpbmNpcGVcIiwgXCJmbGFnXCI6IFwiZmxhZy1zdFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRWwgU2FsdmFkb3JcIiwgXCJmbGFnXCI6IFwiZmxhZy1zdlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2ludCBNYWFydGVuIChEdXRjaCBwYXJ0KVwiLCBcImZsYWdcIjogXCJmbGFnLXN4XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTeXJpYW4gQXJhYiBSZXB1YmxpY1wiLCBcImZsYWdcIjogXCJmbGFnLXN5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTd2F6aWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1zelwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVHVya3MgYW5kIENhaWNvcyBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctdGNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNoYWRcIiwgXCJmbGFnXCI6IFwiZmxhZy10ZFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRnJlbmNoIFNvdXRoZXJuIFRlcnJpdG9yaWVzXCIsIFwiZmxhZ1wiOiBcImZsYWctdGZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRvZ29cIiwgXCJmbGFnXCI6IFwiZmxhZy10Z1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVGhhaWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy10aFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVGFqaWtpc3RhblwiLCBcImZsYWdcIjogXCJmbGFnLXRqXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUb2tlbGF1XCIsIFwiZmxhZ1wiOiBcImZsYWctdGtcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRpbW9yLUxlc3RlXCIsIFwiZmxhZ1wiOiBcImZsYWctdGxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlR1cmttZW5pc3RhblwiLCBcImZsYWdcIjogXCJmbGFnLXRtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdW5pc2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctdG5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRvbmdhXCIsIFwiZmxhZ1wiOiBcImZsYWctdG9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlR1cmtleVwiLCBcImZsYWdcIjogXCJmbGFnLXRyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUcmluaWRhZCBhbmQgVG9iYWdvXCIsIFwiZmxhZ1wiOiBcImZsYWctdHRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlR1dmFsdVwiLCBcImZsYWdcIjogXCJmbGFnLXR2XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUYWl3YW4sIFByb3ZpbmNlIG9mIENoaW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctdHdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRhbnphbmlhLCBVbml0ZWQgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy10elwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVWtyYWluZVwiLCBcImZsYWdcIjogXCJmbGFnLXVhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVZ2FuZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy11Z1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVW5pdGVkIFN0YXRlcyBNaW5vciBPdXRseWluZyBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctdW1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYVwiLCBcImZsYWdcIjogXCJmbGFnLXVzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVcnVndWF5XCIsIFwiZmxhZ1wiOiBcImZsYWctdXlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlV6YmVraXN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy11elwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSG9seSBTZWVcIiwgXCJmbGFnXCI6IFwiZmxhZy12YVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgVmluY2VudCBhbmQgdGhlIEdyZW5hZGluZXNcIiwgXCJmbGFnXCI6IFwiZmxhZy12Y1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVmVuZXp1ZWxhLCBCb2xpdmFyaWFuIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctdmVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlZpcmdpbiBJc2xhbmRzLCBCcml0aXNoXCIsIFwiZmxhZ1wiOiBcImZsYWctdmdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlZpcmdpbiBJc2xhbmRzLCBVLlMuXCIsIFwiZmxhZ1wiOiBcImZsYWctdmlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlZpZXQgTmFtXCIsIFwiZmxhZ1wiOiBcImZsYWctdm5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlZhbnVhdHVcIiwgXCJmbGFnXCI6IFwiZmxhZy12dVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiV2FsbGlzIGFuZCBGdXR1bmFcIiwgXCJmbGFnXCI6IFwiZmxhZy13ZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2Ftb2FcIiwgXCJmbGFnXCI6IFwiZmxhZy13c1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiWWVtZW5cIiwgXCJmbGFnXCI6IFwiZmxhZy15ZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWF5b3R0ZVwiLCBcImZsYWdcIjogXCJmbGFnLXl0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTb3V0aCBBZnJpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy16YVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiWmFtYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctem1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlppbWJhYndlXCIsIFwiZmxhZ1wiOiBcImZsYWctendcIiB9LFxyXG4gICAgXTtcclxuICAgIHJldHVybiBjb3VudHJpZXMuZmlsdGVyKGZ1bmN0aW9uKGNvdW50cnkpIHtcclxuICAgICAgcmV0dXJuIGNvdW50cnkubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJHF1ZXJ5LnRvTG93ZXJDYXNlKCkpICE9IC0xO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdTa2lsbHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJHdpbmRvdykge1xyXG5cclxuICAkc2NvcGUuc2VsZWN0ZWRTa2lsbCA9IDA7XHJcbiAgJHNjb3BlLnNraWxsc1Zpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgJHNjb3BlLmxhYmVscyA9IFtcIkRvd25sb2FkIFNhbGVzXCIsIFwiSW4tU3RvcmUgU2FsZXNcIiwgXCJNYWlsLU9yZGVyIFNhbGVzXCJdO1xyXG4gICRzY29wZS5kYXRhID0gWzMwMCwgNTAwLCAxMDBdO1xyXG5cclxuICAkLmdldEpTT04oJy9za2lsbHMuanNvbicsIGZ1bmN0aW9uKCBkYXRhICkge1xyXG4gICAgJHNjb3BlLnNraWxscyA9IGRhdGEuZmlsdGVyKGZ1bmN0aW9uKHNraWxsKSB7XHJcbiAgICAgIHJldHVybiBza2lsbC5lbmFibGVkO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLnNldFNlbGVjdGVkU2tpbGwgPSBmdW5jdGlvbiAoc2tpbGwpIHtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkU2tpbGwgPSBza2lsbDtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkU2tpbGwuY2hhcnRPcHRpb25zID0ge1xyXG4gICAgICAgIGN1dG91dFBlcmNlbnRhZ2UgOiA4MCxcclxuICAgICAgICBjaXJjdW1mZXJlbmNlOiAyICogTWF0aC5QSSxcclxuICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiB0cnVlLFxyXG4gICAgICAgIHRvb2x0aXBzOiB7XHJcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkU2tpbGwuY2hhcnRTdHlsZSA9IHtcclxuICAgICAgICAnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoL3NraWxscy8nICsgJHNjb3BlLnNlbGVjdGVkU2tpbGwuaW1hZ2UgKyAnKScsXHJcbiAgICAgICAgJ2JhY2tncm91bmQtcmVwZWF0JzogJ25vLXJlcGVhdCcsXHJcbiAgICAgICAgJ2JhY2tncm91bmQtc2l6ZSc6ICc2MCUnLFxyXG4gICAgICAgICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogJzUwJSA1MCUnXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zZXRTZWxlY3RlZFNraWxsKCRzY29wZS5za2lsbHNbMF0pO1xyXG5cclxuICAgIC8qXHJcbiAgICBoYWxmIGNpcmNsZSBza2lsbCB3aGVlbCB0aGF0IGRpZG4ndCB0dXJuIG91dCBncmVhdFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZGlzcGxheTogJHNjb3BlLnNraWxsc1Zpc2libGUgPyAnYmxvY2snIDogJ25vbmUnLFxyXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgbGVmdDogJHNjb3BlLndoZWVsV2lkdGggLyAyICogTWF0aC5jb3MoaSAqIChNYXRoLlBJIC8gKCRzY29wZS5za2lsbHMubGVuZ3RoIC0gMSkpKSArICRzY29wZS53aGVlbFdpZHRoIC8gMiAtICRzY29wZS53aGVlbFdpZHRoICogMC4wMjUsXHJcbiAgICAgIHRvcDogTWF0aC5zaW4oaSAqIChNYXRoLlBJIC8gKCRzY29wZS5za2lsbHMubGVuZ3RoIC0gMSkpKSAqICQoJy5zZWxlY3RlZC1za2lsbCcpLmhlaWdodCgpICogMi41LFxyXG4gICAgICB3aWR0aDogJHNjb3BlLndoZWVsV2lkdGggKiAwLjA1LFxyXG4gICAgICBoZWlnaHQ6ICRzY29wZS53aGVlbFdpZHRoICogMC4wNVxyXG4gICAgfTtcclxuICAgICovXHJcblxyXG4gICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gIH0pO1xyXG5cclxufSk7XHJcbiIsIi8qanNsaW50IGVzdmVyc2lvbjogNiovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4vL0FuZ3VsYXJKcyBjYW4ndCBoYXZlIGFuIGFycm93IGZ1bmN0aW9uIGhlcmVcclxuLmNvbnRyb2xsZXIoJ1RlblRoaW5nc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsIEJvdHNTdmMpIHtcclxuXHJcbiAgJHNjb3BlLmNhdGVnb3JpZXMgPSBbXHJcbiAgICAnTXVzaWMnLFxyXG4gICAgJ1RlbGV2aXNpb24nLFxyXG4gICAgJ01vdmllcycsXHJcbiAgICAnRW50ZXJ0YWlubWVudCcsXHJcbiAgICAvLydDdWx0dXJlJyxcclxuICAgICdHZW9ncmFwaHknLFxyXG4gICAgJ0hpc3RvcnknLFxyXG4gICAgJ1NjaWVuY2UnLFxyXG4gICAgJ0dhbWluZycsXHJcbiAgICAnU3BvcnRzJyxcclxuICAgICdSZWxpZ2lvbicsXHJcbiAgICAnQXJ0JyxcclxuICAgICdMaXRlcmF0dXJlJyxcclxuICAgICdNaXNjJyxcclxuICAgICdGdW5ueScsXHJcbiAgICAnRm9vZCBhbmQgRHJpbmsnLFxyXG4gICAgJ1NvY2lldHknLFxyXG4gICAgJ05hdHVyZScsXHJcbiAgICAnVGVjaG5vbG9neScsXHJcbiAgICAnTGFuZ3VhZ2UnLFxyXG4gICAgJ0J1c2luZXNzJyxcclxuICAgICdJbnRlcm5ldCdcclxuICBdO1xyXG4gICRzY29wZS5rZXlEb3duID0gZSA9PiB7XHJcbiAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xyXG4gICAgICBjYXNlIDk6XHJcbiAgICAgICAgaWYgKCQoXCIjbmV3LWJsdXJiXCIpLmlzKFwiOmZvY3VzXCIpKSB7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgJHNjb3BlLmFkZFZhbHVlKCk7XHJcbiAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAxMzpcclxuICAgICAgICBpZiAoJChcIiNuZXctYmx1cmJcIikuaXMoXCI6Zm9jdXNcIikpIHtcclxuICAgICAgICAgICRzY29wZS5hZGRWYWx1ZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoJChcIiNuZXctdmFsdWVcIikuaXMoXCI6Zm9jdXNcIikpIHtcclxuICAgICAgICAgICQoJyNuZXctYmx1cmInKS5mb2N1cygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuXHJcbiAgICB9XHJcbiAgICAvLyB1c2UgZS5rZXlDb2RlXHJcbiAgfTtcclxuXHJcblxyXG4gICRzY29wZS5jYXRlZ29yeUZpbHRlcnMgPSAkc2NvcGUuY2F0ZWdvcmllcy5tYXAoY2F0ZWdvcnkgPT4gY2F0ZWdvcnkpO1xyXG4gICRzY29wZS5jYXRlZ29yeUZpbHRlcnMucHVzaCgnQWxsJyk7XHJcbiAgJHNjb3BlLmNhdGVnb3J5RmlsdGVycy5wdXNoKCdCbGFuaycpO1xyXG4gICRzY29wZS5jYXRlZ29yeUZpbHRlciA9ICdBbGwnO1xyXG4gICRzY29wZS5zZWFyY2hOYW1lID0gJyc7XHJcbiAgJHNjb3BlLm5ld0l0ZW0gPSB7fTtcclxuXHJcbiAgJHNjb3BlLnNldENhdGVnb3J5RmlsdGVyID0gY2F0ZWdvcnkgPT4ge1xyXG4gICAgJHNjb3BlLmNhdGVnb3J5RmlsdGVyID0gY2F0ZWdvcnk7XHJcbiAgfTtcclxuICAkc2NvcGUuc2V0VXNlckZpbHRlciA9IHVzZXIgPT4ge1xyXG4gICAgJHNjb3BlLnVzZXJGaWx0ZXIgPSB1c2VyO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5maWx0ZXJlZExpc3RzID0gKCkgPT4ge1xyXG4gICAgaWYgKCEkc2NvcGUubGlzdHMpIHJldHVybiBbXTtcclxuICAgIHJldHVybiAkc2NvcGUubGlzdHMuZmlsdGVyKCh7Y2F0ZWdvcnksIGNyZWF0b3J9KSA9PiB7XHJcbiAgICAgIGlmICgkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIgPT09ICdBbGwnICYmICRzY29wZS51c2VyRmlsdGVyID09PSAnQWxsJykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9IGVsc2UgaWYgKCRzY29wZS5jYXRlZ29yeUZpbHRlciAhPT0gJ0FsbCcgJiYgJHNjb3BlLnVzZXJGaWx0ZXIgPT09ICdBbGwnKSB7XHJcbiAgICAgICAgaWYgKGNhdGVnb3J5KSB7XHJcbiAgICAgICAgICByZXR1cm4gY2F0ZWdvcnkgPT09ICRzY29wZS5jYXRlZ29yeUZpbHRlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuICRzY29wZS5jYXRlZ29yeUZpbHRlciA9PT0gJ0JsYW5rJztcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNhdGVnb3J5RmlsdGVyID09PSAnQWxsJyAmJiAkc2NvcGUudXNlckZpbHRlciAhPT0gJ0FsbCcpIHtcclxuICAgICAgICByZXR1cm4gY3JlYXRvciA9PT0gJHNjb3BlLnVzZXJGaWx0ZXI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGNhdGVnb3J5KSB7XHJcbiAgICAgICAgICByZXR1cm4gY2F0ZWdvcnkgPT09ICRzY29wZS5jYXRlZ29yeUZpbHRlciAmJiBjcmVhdG9yID09PSAkc2NvcGUudXNlckZpbHRlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuICRzY29wZS5jYXRlZ29yeUZpbHRlciA9PT0gJ0JsYW5rJyAmJiBjcmVhdG9yID09PSAkc2NvcGUudXNlckZpbHRlcjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pLmZpbHRlcigoe25hbWV9KSA9PiAhbmFtZSB8fCBuYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigkc2NvcGUuc2VhcmNoTmFtZS50b0xvd2VyQ2FzZSgpKSA+PSAwKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuJG9uKCdsb2dpbicsIF8gPT4ge1xyXG4gICAgJHNjb3BlLmdldExpc3RzKCk7XHJcbiAgfSk7XHJcblxyXG5cclxuICAkc2NvcGUuc29ydCA9IHNvcnRCeSA9PiB7XHJcbiAgICBpZiAoJHNjb3BlLnNvcnRWYWx1ZSA9PT0gc29ydEJ5KSB7XHJcbiAgICAgICRzY29wZS5zb3J0RGlyZWN0aW9uID0gISRzY29wZS5zb3J0RGlyZWN0aW9uO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJHNjb3BlLnNvcnRWYWx1ZSA9IHNvcnRCeTtcclxuICAgICAgJHNjb3BlLnNvcnREaXJlY3Rpb24gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLnNvcnRlciA9ICgkc2NvcGUuc29ydERpcmVjdGlvbiA/ICcrJyA6ICctJykgKyAkc2NvcGUuc29ydFZhbHVlO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zb3J0VmFsdWUgPSAnZGF0ZSc7XHJcbiAgJHNjb3BlLnNvcnREaXJlY3Rpb24gPSB0cnVlO1xyXG4gICRzY29wZS5zb3J0TGlzdCA9ICd2YWx1ZSc7XHJcbiAgJHNjb3BlLnNvcnQoJ2RhdGUnKTtcclxuXHJcbiAgJHNjb3BlLmdldENhdGVnb3J5Q291bnQgPSBjYXRlZ29yeSA9PiB7XHJcbiAgICBpZiAoISRzY29wZS5saXN0cykgcmV0dXJuIDA7XHJcbiAgICByZXR1cm4gJHNjb3BlLmxpc3RzLmZpbHRlcihsaXN0ID0+IChjYXRlZ29yeSA9PT0gJ0FsbCcgfHwgbGlzdC5jYXRlZ29yeSA9PT0gY2F0ZWdvcnkpICYmICgkc2NvcGUudXNlckZpbHRlciA9PT0gJ0FsbCcgfHwgbGlzdC5jcmVhdG9yLnVzZXJuYW1lID09PSAkc2NvcGUudXNlckZpbHRlcikpLmxlbmd0aDtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0TGlzdHMgPSAoKSA9PiB7XHJcbiAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XHJcbiAgICBCb3RzU3ZjLmdldExpc3RzKCRzY29wZS5jdXJyZW50VXNlcilcclxuICAgIC50aGVuKCh7ZGF0YX0pID0+IHtcclxuICAgICAgJHNjb3BlLmxpc3RzID0gZGF0YTtcclxuICAgICAgJHNjb3BlLnVzZXJGaWx0ZXJzID0ge307XHJcbiAgICAgICRzY29wZS51c2VyRmlsdGVycy5BbGwgPSAkc2NvcGUubGlzdHMubGVuZ3RoO1xyXG4gICAgICAkc2NvcGUudXNlckZpbHRlcnMgPSAkc2NvcGUubGlzdHMuc29ydCgobGlzdDEsIGxpc3QyKSA9PiBsaXN0MS5jcmVhdG9yID4gbGlzdDIuY3JlYXRvcikucmVkdWNlKCh1c2Vycywge2NyZWF0b3J9KSA9PiB7XHJcbiAgICAgICAgaWYgKCF1c2Vyc1tjcmVhdG9yXSkgdXNlcnNbY3JlYXRvcl0gPSAwO1xyXG4gICAgICAgIHVzZXJzW2NyZWF0b3JdKys7XHJcbiAgICAgICAgcmV0dXJuIHVzZXJzO1xyXG4gICAgICB9LCAkc2NvcGUudXNlckZpbHRlcnMpO1xyXG4gICAgICAkc2NvcGUudXNlckNvdW50ID0gT2JqZWN0LmtleXMoJHNjb3BlLnVzZXJGaWx0ZXJzKS5sZW5ndGg7XHJcbiAgICAgICRzY29wZS51c2VyRmlsdGVyID0gJ0FsbCc7XHJcbiAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VsZWN0TGlzdCA9IGxpc3QgPT4ge1xyXG4gICAgQm90c1N2Yy5nZXRMaXN0KGxpc3QpXHJcbiAgICAudGhlbigoe2RhdGF9KSA9PiB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZExpc3QgPSBkYXRhO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdENhdGVnb3J5ID0gY2F0ZWdvcnkgPT4ge1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yeSA9IGNhdGVnb3J5O1xyXG4gICAgJCgnI2NhdGVnb3J5LXNlbGVjdCcpLmhpZGUoKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuYWRkTGlzdCA9ICgpID0+IHtcclxuICAgICRzY29wZS5zZWxlY3RlZExpc3QgPSB7XHJcbiAgICAgIG5hbWU6ICcnLFxyXG4gICAgICBjcmVhdG9yOiAkc2NvcGUuY3VycmVudFVzZXIuX2lkLFxyXG4gICAgICBkYXRlOiBuZXcgRGF0ZSgpLFxyXG4gICAgICB2YWx1ZXM6IFtdLFxyXG4gICAgICBhbnN3ZXJzOiAwLFxyXG4gICAgICBpc0R5bmFtaWM6IHRydWUsXHJcbiAgICAgIGNhdGVnb3J5OiAnJ1xyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuYWRkVmFsdWUgPSAoKSA9PiB7XHJcbiAgICBpZiAoJHNjb3BlLm5ld0l0ZW0udmFsdWUpIHtcclxuICAgICAgaWYgKF8uc29tZSgkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcywgdmFsdWUgPT4gdmFsdWUgPT0gJHNjb3BlLm5ld0l0ZW0udmFsdWUpKSB7XHJcbiAgICAgICAgYWxlcnQoYCR7JHNjb3BlLm5ld0l0ZW0udmFsdWV9IGlzIGFscmVhZHkgaW4gdGhlIGxpc3RgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkc2NvcGUubmV3SXRlbS5jcmVhdG9yID0gJHNjb3BlLmN1cnJlbnRVc2VyLl9pZDtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcy51bnNoaWZ0KEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoJHNjb3BlLm5ld0l0ZW0pKSk7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdC5hbnN3ZXJzKys7XHJcbiAgICAgICAgJHNjb3BlLm5ld0l0ZW0udmFsdWUgPSAnJztcclxuICAgICAgICAkc2NvcGUubmV3SXRlbS5ibHVyYiA9ICcnO1xyXG4gICAgICAgIGlmICgkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcy5sZW5ndGggPj0gMTAgJiYgJHNjb3BlLnNlbGVjdGVkTGlzdC5uYW1lICYmICRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcnkpIHtcclxuICAgICAgICAgICRzY29wZS5zYXZlTGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICQoJyNuZXctdmFsdWUnKS5mb2N1cygpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5yZXBvcnRMaXN0ID0gbGlzdCA9PiB7XHJcbiAgICBCb3RzU3ZjLnJlcG9ydExpc3QoJHNjb3BlLmN1cnJlbnRVc2VyLCBsaXN0KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2F2ZUxpc3QgPSBsaXN0ID0+IHtcclxuICAgIGxpc3QudmFsdWVzID0gbGlzdC52YWx1ZXMuZmlsdGVyKCh7dmFsdWV9KSA9PiB2YWx1ZSk7XHJcbiAgICBpZiAobGlzdC52YWx1ZXMubGVuZ3RoID49IDEwICYmIGxpc3QubmFtZSAmJiBsaXN0LmNhdGVnb3J5KSB7XHJcbiAgICAgICRzY29wZS5zYXZpbmcgPSB0cnVlO1xyXG4gICAgICBCb3RzU3ZjLnNhdmVMaXN0KCRzY29wZS5jdXJyZW50VXNlciwgbGlzdClcclxuICAgICAgLnRoZW4oKHtkYXRhfSkgPT4ge1xyXG4gICAgICAgIGlmICghJHNjb3BlLnNlbGVjdGVkTGlzdC5faWQpIHtcclxuICAgICAgICAgICRzY29wZS5saXN0cy51bnNoaWZ0KGRhdGEpO1xyXG4gICAgICAgICAgJHNjb3BlLnNlbGVjdExpc3QoZGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgJHNjb3BlLmxpc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUubGlzdHNbaV0uX2lkID09PSBkYXRhLl9pZCkge1xyXG4gICAgICAgICAgICAgICRzY29wZS5saXN0c1tpXSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgICRzY29wZS5zZWxlY3RMaXN0KGxpc3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuc2F2aW5nID0gZmFsc2U7XHJcbiAgICAgIH0sIGVyciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICRzY29wZS5zYXZpbmcgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKGxpc3QudmFsdWVzLmxlbmd0aCA8IDEwKSB7XHJcbiAgICAgIGFsZXJ0KCdMaXN0cyBtdXN0IGNvbnRhaW4gMTAgb3IgbW9yZSB2YWx1ZXMhJyk7XHJcbiAgICB9IGVsc2UgaWYgKCFsaXN0Lm5hbWUpIHtcclxuICAgICAgZmxhc2goJyNsaXN0LW5hbWUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZsYXNoKCcjbGlzdC1jYXRlZ29yeScpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIGZsYXNoKGVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGNvbG9yID0gJChlbGVtZW50KS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIpO1xyXG4gICAgJChlbGVtZW50KS5hbmltYXRlKHtcclxuICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNGQTgwNzJcIlxyXG4gICAgfSwgMTAwLCAoKSA9PiB7XHJcbiAgICAgICQoZWxlbWVudCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvclxyXG4gICAgICB9LCAxMDApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAkc2NvcGUuZGVsZXRlTGlzdCA9IGxpc3QgPT4ge1xyXG4gICAgaWYgKCFsaXN0Ll9pZCkge1xyXG4gICAgICAkc2NvcGUubGlzdHMgPSAkc2NvcGUubGlzdHMuZmlsdGVyKCh7X2lkfSkgPT4gX2lkKTtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdCA9IG51bGw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIGxpc3Q/JykpIHtcclxuICAgICAgICBCb3RzU3ZjLmRlbGV0ZUxpc3QobGlzdClcclxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAkc2NvcGUuZ2V0TGlzdHMoKTtcclxuICAgICAgICAgICRzY29wZS5zZWxlY3RlZExpc3QgPSBudWxsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmxpc3RCdXR0b25DbGFzcyA9IGxpc3QgPT4ge1xyXG4gICAgY29uc3QgdmFsdWVzID0gbGlzdC52YWx1ZXM7XHJcbiAgICBjb25zdCBibHVyYnMgPSBsaXN0LmJsdXJicztcclxuICAgIGlmICh2YWx1ZXMgPT09IGJsdXJicyAmJiBsaXN0LmRlc2NyaXB0aW9uKSB7XHJcbiAgICAgIHJldHVybiAnYnRuLWRlZmF1bHQnO1xyXG4gICAgfSBlbHNlIGlmIChibHVyYnMgPT09IDAgJiYgIWxpc3QuZGVzY3JpcHRpb24pIHtcclxuICAgICAgcmV0dXJuICdidG4td2FybmluZyc7XHJcbiAgICB9IGVsc2UgaWYgKGJsdXJicyA9PT0gMCAmJiBsaXN0LmRlc2NyaXB0aW9uKSB7XHJcbiAgICAgIHJldHVybiAnYnRuLWluZm8nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuICdidG4tcHJpbWFyeSc7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZShcImFwcFwiLFtcInVpLnJvdXRlclwiLFwidWkuYm9vdHN0cmFwXCIsXCJuZ0FuaW1hdGVcIixcIm5nU2FuaXRpemVcIixcIm5nRHJhZ0Ryb3BcIixcIm5nVGFnc0lucHV0XCIsXCJ2Y1JlY2FwdGNoYVwiLFwiY2hhcnQuanNcIixcInRjLmNoYXJ0anNcIl0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbmZpZyhbXCIkc3RhdGVQcm92aWRlclwiLFwiJHVybFJvdXRlclByb3ZpZGVyXCIsXCIkdXJsU2VydmljZVByb3ZpZGVyXCIsXCIkbG9jYXRpb25Qcm92aWRlclwiLGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCR1cmxSb3V0ZXJQcm92aWRlciwkdXJsU2VydmljZVByb3ZpZGVyLCRsb2NhdGlvblByb3ZpZGVyKXskdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL2hvbWVcIiksJHVybFNlcnZpY2VQcm92aWRlci5jb25maWcuc3RyaWN0TW9kZSghMSksJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJob21lXCIse3VybDpcIi9ob21lXCIsdGVtcGxhdGVVcmw6XCIvaG9tZS5odG1sXCJ9KS5zdGF0ZShcInBvbGljeVwiLHt1cmw6XCIvcG9saWN5XCIsdGVtcGxhdGVVcmw6XCIvcG9saWN5Lmh0bWxcIn0pLnN0YXRlKFwicHJpbnRcIix7dXJsOlwiL3ByaW50XCIsdGVtcGxhdGVVcmw6XCIvcHJpbnQuaHRtbFwifSkuc3RhdGUoXCJleHBlcmllbmNlXCIse3VybDpcIi9leHBlcmllbmNlXCIsY29udHJvbGxlcjpcIkV4cGVyaWVuY2VDdHJsXCIsdGVtcGxhdGVVcmw6XCIvZXhwZXJpZW5jZS5odG1sXCJ9KS5zdGF0ZShcInNraWxsc1wiLHt1cmw6XCIvc2tpbGxzXCIsY29udHJvbGxlcjpcIlNraWxsc0N0cmxcIix0ZW1wbGF0ZVVybDpcIi9za2lsbHMuaHRtbFwifSkuc3RhdGUoXCJob2JiaWVzXCIse3VybDpcIi9ob2JiaWVzXCIsY29udHJvbGxlcjpcIkhvYmJpZXNDdHJsXCIsdGVtcGxhdGVVcmw6XCIvaG9iYmllcy5odG1sXCJ9KS5zdGF0ZShcImNvbnRhY3RcIix7dXJsOlwiL2NvbnRhY3RcIixjb250cm9sbGVyOlwiQ29udGFjdEN0cmxcIix0ZW1wbGF0ZVVybDpcIi9jb250YWN0Lmh0bWxcIn0pLnN0YXRlKFwid29ya291dFwiLHt1cmw6XCIvd29ya291dFwiLGNvbnRyb2xsZXI6XCJXb3Jrb3V0Q3RybFwiLHRlbXBsYXRlVXJsOlwiL3dvcmtvdXQuaHRtbFwifSkuc3RhdGUoXCJwb3N0c1wiLHt1cmw6XCIvcG9zdHNcIixjb250cm9sbGVyOlwiUG9zdHNDdHJsXCIsdGVtcGxhdGVVcmw6XCIvcG9zdHMuaHRtbFwifSkuc3RhdGUoXCJwcm9maWxlXCIse3VybDpcIi9wcm9maWxlXCIsY29udHJvbGxlcjpcIlByb2ZpbGVDdHJsXCIsdGVtcGxhdGVVcmw6XCIvcHJvZmlsZS5odG1sXCJ9KS5zdGF0ZShcImxpc3RzXCIse3VybDpcIi9saXN0c1wiLGNvbnRyb2xsZXI6XCJMaXN0c0N0cmxcIix0ZW1wbGF0ZVVybDpcImxpc3RzLmh0bWxcIn0pLnN0YXRlKFwicHJpb3JpdGl6ZVwiLHt1cmw6XCIvcHJpb3JpdGl6ZVwiLGNvbnRyb2xsZXI6XCJQcmlvcml0aXplQ3RybFwiLHRlbXBsYXRlVXJsOlwicHJpb3JpdGl6ZS5odG1sXCJ9KS5zdGF0ZShcImJ1YmJsZXNcIix7dXJsOlwiL2J1YmJsZXNcIixjb250cm9sbGVyOlwiQnViYmxlc0N0cmxcIix0ZW1wbGF0ZVVybDpcImJ1YmJsZXMuaHRtbFwifSkuc3RhdGUoXCJhc3Rlcm9pZHNcIix7dXJsOlwiL2FzdGVyb2lkc1wiLGNvbnRyb2xsZXI6XCJBc3Rlcm9pZHNDdHJsXCIsdGVtcGxhdGVVcmw6XCJhc3Rlcm9pZHMuaHRtbFwifSkuc3RhdGUoXCJsZW1taW5nc1wiLHt1cmw6XCIvbGVtbWluZ3NcIixjb250cm9sbGVyOlwiTGVtbWluZ3NDdHJsXCIsdGVtcGxhdGVVcmw6XCJsZW1taW5ncy5odG1sXCJ9KS5zdGF0ZShcImJvdHNcIix7dXJsOlwiL2JvdHNcIixjb250cm9sbGVyOlwiVGVuVGhpbmdzQ3RybFwiLHRlbXBsYXRlVXJsOlwidGVudGhpbmdzLmh0bWxcIn0pLnN0YXRlKFwidGVudGhpbmdzXCIse3VybDpcIi90ZW50aGluZ3NcIixjb250cm9sbGVyOlwiVGVuVGhpbmdzQ3RybFwiLHRlbXBsYXRlVXJsOlwidGVudGhpbmdzLmh0bWxcIn0pLnN0YXRlKFwicXVpei1nb29nbGVcIix7dXJsOlwiL2dvb2dsZVwiLGNvbnRyb2xsZXI6XCJRdWl6R29vZ2xlQ3RybFwiLHRlbXBsYXRlVXJsOlwicXVpenplcy9nb29nbGUuaHRtbFwifSkuc3RhdGUoXCJxdWl6LWxvZ29zXCIse3VybDpcIi9sb2dvc1wiLGNvbnRyb2xsZXI6XCJRdWl6TG9nb3NDdHJsXCIsdGVtcGxhdGVVcmw6XCJxdWl6emVzL2xvZ29zLmh0bWxcIn0pLCRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh7ZW5hYmxlZDohMCxyZXF1aXJlQmFzZTohMX0pfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJXZWJTb2NrZXRTdmNcIixbXCIkcm9vdFNjb3BlXCIsXCIkdGltZW91dFwiLGZ1bmN0aW9uKCRyb290U2NvcGUsJHRpbWVvdXQpe3ZhciBjb25uZWN0aW9uLGNvbm5lY3Q9ZnVuY3Rpb24oKXsoY29ubmVjdGlvbj1uZXcgV2ViU29ja2V0KFwiaHR0cHM6XCI9PT13aW5kb3cubG9jYXRpb24ucHJvdG9jb2w/XCJ3c3M6Ly9cIit3aW5kb3cubG9jYXRpb24uaG9zdDpcIndzOi8vXCIrd2luZG93LmxvY2F0aW9uLmhvc3QpKS5vbm9wZW49ZnVuY3Rpb24oKXtjb25zb2xlLmxvZyhcIldlYnNvY2tldCBjb25uZWN0ZWRcIil9LGNvbm5lY3Rpb24ub25jbG9zZT1mdW5jdGlvbihlKXtjb25zb2xlLmxvZyhcIldlYnNvY2tldCBjbG9zZWQuIFJlY29ubmVjdGluZy4uLlwiKSwkdGltZW91dChjb25uZWN0LDFlMyl9LGNvbm5lY3Rpb24ub25lcnJvcj1mdW5jdGlvbihlKXtjb25zb2xlLmxvZyhcIkVycm9yOiBcIitlK1wiIC0gU3RhdGU6IFwiK2Nvbm5lY3Rpb24ucmVhZHlTdGF0ZSl9LGNvbm5lY3Rpb24ub25tZXNzYWdlPWZ1bmN0aW9uKGUpe3ZhciBwYXlsb2FkPUpTT04ucGFyc2UoZS5kYXRhKTskcm9vdFNjb3BlLiRicm9hZGNhc3QoXCJ3czpcIitwYXlsb2FkLnRvcGljLHBheWxvYWQuZGF0YSl9fTt0aGlzLnNlbmQ9ZnVuY3Rpb24odG9waWMsZGF0YSl7dmFyIGpzb249SlNPTi5zdHJpbmdpZnkoe3RvcGljLGRhdGF9KTtjb25uZWN0aW9uLnNlbmQoanNvbil9LHRoaXMuY29ubmVjdD1jb25uZWN0fV0pLnJ1bihbXCJXZWJTb2NrZXRTdmNcIixmdW5jdGlvbihXZWJTb2NrZXRTdmMpe1dlYlNvY2tldFN2Yy5jb25uZWN0KCl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkFwcEN0cmxcIixbXCIkc2NvcGVcIixcIiRsb2NhdGlvblwiLFwiTGFuZ3VhZ2VTdmNcIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLExhbmd1YWdlU3ZjLFVzZXJTdmMpe2Z1bmN0aW9uIGxvZ2luKHVzZXIpeyRzY29wZS5sb2dnZWRJbnx8KHdpbmRvdy5sb2NhbFN0b3JhZ2UudXNlcj11c2VyLl9pZCwkc2NvcGUubG9nZ2VkSW49ITAsJHNjb3BlLmN1cnJlbnRVc2VyPXVzZXIsJHNjb3BlLiRicm9hZGNhc3QoXCJsb2dpblwiKSl9Y29uc29sZS5sb2coXCIlY1lvdSBzbmVha3kgYnVnZ2VyIVwiLFwiZm9udDogMmVtIHNhbnMtc2VyaWY7IGNvbG9yOiBEb2RnZXJCbHVlOyB0ZXh0LXNoYWRvdzogMnB4IDAgMCAjNDQ0LCAtMnB4IDAgMCAjNDQ0LCAwIDJweCAwICM0NDQsIDAgLTJweCAwICM0NDQsIDFweCAxcHggIzQ0NCwgLTFweCAtMXB4IDAgIzQ0NCwgMXB4IC0xcHggMCAjNDQ0LCAtMXB4IDFweCAwICM0NDQ7XCIpLGNvbnNvbGUubG9nKFwiSSdtIGdsYWQgeW91J3JlIGN1cmlvdXMgd2hldGhlciBzb21ldGhpbmcgaXMgcG9wcGluZyB1cCBpbiBoZXJlLiBJJ20gYSBiaXQgb2YgYSBzdGlja2xlciB3aGVuIGl0IGNvbWVzIHRvIG1lc3NhZ2VzIGluIHRoZSBjb25zb2xlIHNvIEkgdHJ5IHRvIG1ha2Ugc3VyZSBvbmx5IHRoaW5ncyBJIHdhbnQgYXJlIHZpc2libGUuIFRoYXQgYmVpbmcgc2FpZCwgaWYgdGhlcmUgaXMgYSBiaWcgZXJyb3IgaGVyZSwgSSB3b3VsZCByZWFsbHkgYXBwcmVjaWF0ZSB5b3UgdGVsbGluZyBtZSBzbyBJIGNhbiBnZXQgcmlkIG9mIGl0IVwiKSxjb25zb2xlLmxvZyhcIlRoZSBjb2RlIGZvciBteSByZXN1bWUgaXMgaG9zdGVkIG9uIEdpdGh1YiBpZiB5b3UgcmVhbGx5IHdhbnQgdG8gZ28gaW50byBhbGwgdGhpcyEgPT4gaHR0cHM6Ly9naXRodWIuY29tL0ZsYW5kZXJzQnVyZ2VyL3Jlc3VtZVwiKSwkKHdpbmRvdykubG9hZCgoZnVuY3Rpb24oKXskKFwiLmxvYWRpbmdcIikuZmFkZU91dChcInNsb3dcIiksJChcIi5jb250ZW50XCIpLmZhZGVJbihcInNsb3dcIil9KSksJHNjb3BlLnRoZW1lQ291bnRlcj02LCRzY29wZS50b2RheT1uZXcgRGF0ZSwkc2NvcGUueWVhcj0kc2NvcGUudG9kYXkuZ2V0RnVsbFllYXIoKSwkc2NvcGUucmFuZG9tPU1hdGguZmxvb3IoMWU2Kk1hdGgucmFuZG9tKCkpLCRzY29wZS5mbGlwVGhlbWU9ZnVuY3Rpb24oKXskKFwiLmxvYWRpbmdcIikuc2hvdygpLCQoXCIuY29udGVudFwiKS5oaWRlKCksc2V0VGltZW91dCgoZnVuY3Rpb24oKXskKFwiLmxvYWRpbmdcIikuZmFkZU91dChcInNsb3dcIiksJChcIi5jb250ZW50XCIpLmZhZGVJbihcInNsb3dcIil9KSw4MDApLCRzY29wZS50aGVtZUNvdW50ZXI9JHNjb3BlLnRoZW1lQ291bnRlcjw2PyRzY29wZS50aGVtZUNvdW50ZXIrMTokc2NvcGUudGhlbWVDb3VudGVyPTF9LCQuZ2V0SlNPTihcIi9za2lsbHMuanNvblwiLChmdW5jdGlvbihkYXRhKXskc2NvcGUuc2tpbGxzPWRhdGEuZmlsdGVyKChmdW5jdGlvbihza2lsbCl7cmV0dXJuIHNraWxsLmVuYWJsZWR9KSl9KSksJC5nZXRKU09OKFwiL2hvYmJpZXMuanNvblwiLChmdW5jdGlvbihkYXRhKXskc2NvcGUuaG9iYmllcz1kYXRhfSkpLCQuZ2V0SlNPTihcIi9leHBlcmllbmNlLmpzb25cIiwoZnVuY3Rpb24oZGF0YSl7JHNjb3BlLmpvYnM9ZGF0YSwkc2NvcGUuam9icy5mb3JFYWNoKChmdW5jdGlvbihqb2Ipe2pvYi5zdGFydERhdGU9bmV3IERhdGUoam9iLnN0YXJ0RGF0ZSksam9iLmVuZERhdGUmJihqb2IuZW5kRGF0ZT1uZXcgRGF0ZShqb2IuZW5kRGF0ZSkpfSkpfSkpLCRzY29wZS5nZXRUaW1lU3Bhbj1mdW5jdGlvbihqb2Ipe3JldHVybiBqb2Iuc3RhcnREYXRlLmdldEZ1bGxZZWFyKCkrKGpvYi5lbmREYXRlP1wiIC0gXCIram9iLmVuZERhdGUuZ2V0RnVsbFllYXIoKTpcIiAtIFRvZGF5XCIpfSwkc2NvcGUubGFuZ3VhZ2VzPUxhbmd1YWdlU3ZjLmxhbmd1YWdlcywkc2NvcGUuc2VsZWN0ZWRMYW5ndWFnZT1MYW5ndWFnZVN2Yy5nZXRMYW5ndWFnZSgpLCRzY29wZS5zZWxlY3RMYW5ndWFnZT1mdW5jdGlvbihsYW5ndWFnZSl7JHNjb3BlLnNlbGVjdGVkTGFuZ3VhZ2U9TGFuZ3VhZ2VTdmMuc2V0TGFuZ3VhZ2UobGFuZ3VhZ2UpfSwkc2NvcGUuaG92ZXJkaXY9ZnVuY3Rpb24oZSxkaXZpZCl7dmFyIGxlZnQ9ZS5jbGllbnRYK1wicHhcIix0b3A9ZS5jbGllbnRZKzIwK1wicHhcIjtkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaXZpZCk7cmV0dXJuICQoXCIjXCIrZGl2aWQpLmNzcyhcImxlZnRcIixsZWZ0KSwkKFwiI1wiK2RpdmlkKS5jc3MoXCJ0b3BcIix0b3ApLCQoXCIjXCIrZGl2aWQpLnRvZ2dsZSgpLCExfSwkc2NvcGUuc29jaWFsTWVkaWE9W3tuYW1lOlwibGlua2VkaW5cIix1cmw6XCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vbGF1cmVudC1kZWJhY2tlci0xNjMzYTkxNlwiLGljb246XCJmYS1saW5rZWRpblwifSx7bmFtZTpcImdpdGh1YlwiLHVybDpcImh0dHBzOi8vZ2l0aHViLmNvbS9GbGFuZGVyc0J1cmdlclwiLGljb246XCJmYS1naXRodWJcIn0se25hbWU6XCJqc2ZpZGRsZVwiLHVybDpcImh0dHBzOi8vanNmaWRkbGUubmV0L3VzZXIvQmVsZ29DYW5hZGlhbi9maWRkbGVzL1wiLGljb246XCJmYS1qc2ZpZGRsZVwifSx7bmFtZTpcInN0YWNrb3ZlcmZsb3dcIix1cmw6XCJodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTA4MzkyMy9iZWxnb2NhbmFkaWFuXCIsaWNvbjpcImZhLXN0YWNrLW92ZXJmbG93XCJ9XSx3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXImJlVzZXJTdmMubG9naW4od2luZG93LmxvY2FsU3RvcmFnZS51c2VyKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7bG9naW4ocmVzcG9uc2UuZGF0YSl9KSksJHNjb3BlLiRvbihcImxvZ2luXCIsKGZ1bmN0aW9uKF8sdXNlcil7bG9naW4odXNlcil9KSksJHNjb3BlLiRvbihcInVwZGF0ZVwiLChmdW5jdGlvbihfLHVzZXIpeyRzY29wZS5jdXJyZW50VXNlcj11c2VyLCRzY29wZS5jdXJyZW50VXNlci5iaXJ0aERhdGU9bmV3IERhdGUoJHNjb3BlLmN1cnJlbnRVc2VyLmJpcnRoRGF0ZSksJHNjb3BlLmxvYWRpbmc9ITEsc2V0VGltZW91dCgoZnVuY3Rpb24oKXskKFwiI2xvYWRpbmctaWNvblwiKS5mYWRlT3V0KFwic2xvd1wiKX0pLDFlMyl9KSksJHNjb3BlLiRvbihcImxvYWRpbmdcIiwoZnVuY3Rpb24oXyx1c2VyKXskc2NvcGUubG9hZGluZz0hMCwkKFwiI2xvYWRpbmctaWNvblwiKS5zaG93KCl9KSksJHNjb3BlLiRvbihcImxvYWRlZFwiLChmdW5jdGlvbihfLHVzZXIpeyRzY29wZS5sb2FkaW5nPSExLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7JChcIiNsb2FkaW5nLWljb25cIikuZmFkZU91dChcInNsb3dcIil9KSwxZTMpfSkpLCRzY29wZS5sb2dvdXQ9ZnVuY3Rpb24oKXtmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpLnRoZW4oKGZ1bmN0aW9uKCl7JHNjb3BlLmxvZ2dlZEluPSExLHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKSwkc2NvcGUuJGJyb2FkY2FzdChcImxvZ291dFwiKX0pKS5jYXRjaCgoZnVuY3Rpb24oZXJyb3Ipe30pKX0sJHNjb3BlLmZvcm1hdERhdGU9ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuKGRhdGU9bmV3IERhdGUoZGF0ZSkpLmdldERhdGUoKStcIi1cIitbXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCJdW2RhdGUuZ2V0TW9udGgoKV0rXCItXCIrZGF0ZS5nZXRGdWxsWWVhcigpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQXN0ZXJvaWRzQ3RybFwiLFtcIiRzY29wZVwiLFwiR2FtZVN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxHYW1lU3ZjKXskc2NvcGUuYW5ub3VuY2U9ITE7dmFyIGNhbnZhcz1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFzdGVyb2lkcy1wYWdlXCIpLGN0eD1jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO2N0eC5mb250PVwiMzBweCBDb21pYyBTYW5zIE1TXCIsY3R4LmZpbGxTdHlsZT1cInJlZFwiLGN0eC50ZXh0QWxpZ249XCJjZW50ZXJcIjt2YXIgc2hvdHM9e30sYXN0ZXJvaWRzPXt9LHBvd2VydXBzPXt9LGV4cGxvc2lvbnM9e30sbWFwPXt9LHNwYWNlcGljcz0xMCxzcGFjZT1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqc3BhY2VwaWNzKSxwb3dlcnVwVHlwZXM9W3tuYW1lOlwic3BlZWRcIixhbm5vdW5jZW1lbnQ6XCJNYXggU3BlZWQg4oenXCIsY3ljbGU6e3Jvd3M6MSxjb2x1bW5zOjQsc2l6ZTpbMTQsMzVdLGk6MCxkaXJlY3Rpb246ITB9LGltZzpuZXcgSW1hZ2UsYWN0aXZhdGU6ZnVuY3Rpb24oc3BhY2VzaGlwKXtzcGFjZXNoaXAubWF4U3BlZWQrPTEwMH19LHtuYW1lOlwiY29vbGRvd25cIixhbm5vdW5jZW1lbnQ6XCJDb29sZG93biDih6lcIixjeWNsZTp7cm93czoxLGNvbHVtbnM6MyxzaXplOlsxNywxN10saTowLGRpcmVjdGlvbjohMH0saW1nOm5ldyBJbWFnZSxhY3RpdmF0ZTpmdW5jdGlvbihzcGFjZXNoaXApe3NwYWNlc2hpcC5jb29sZG93bj4wJiYoc3BhY2VzaGlwLmNvb2xkb3duVGltZS09MSl9fSx7bmFtZTpcInJhbmdlXCIsYW5ub3VuY2VtZW50OlwiRmlyaW5nIFJhbmdlIOKHp1wiLGN5Y2xlOntyb3dzOjQsY29sdW1uczoxLHNpemU6WzMwLDhdLGk6MCxkaXJlY3Rpb246ITB9LGltZzpuZXcgSW1hZ2UsYWN0aXZhdGU6ZnVuY3Rpb24oc3BhY2VzaGlwKXtzcGFjZXNoaXAucmFuZ2UrPTV9fSx7bmFtZTpcInNoaWVsZFwiLGFubm91bmNlbWVudDpcIlNoaWVsZFwiLGN5Y2xlOntyb3dzOjUsY29sdW1uczoxLHNpemU6WzE5LDE5XSxpOjAsZGlyZWN0aW9uOiEwfSxpbWc6bmV3IEltYWdlLGFjdGl2YXRlOmZ1bmN0aW9uKHNwYWNlc2hpcCl7c3BhY2VzaGlwLnNoaWVsZD0hMH19LHtuYW1lOlwibnVrZVwiLGFubm91bmNlbWVudDpcIk51a2VcIixjeWNsZTp7cm93czoxLGNvbHVtbnM6OCxzaXplOlsxNSwxNV0saTowLGRpcmVjdGlvbjohMH0saW1nOm5ldyBJbWFnZSxhY3RpdmF0ZTpmdW5jdGlvbihzcGFjZXNoaXApe2Zvcih2YXIgaSBpbiBhc3Rlcm9pZHMpYXN0ZXJvaWRzW2ldLmV4cGxvZGUoKTtzcGF3bkFzdGVyb2lkcyg1KX19XTtwb3dlcnVwVHlwZXMuZm9yRWFjaCgoZnVuY3Rpb24ocG93ZXJ1cCxpLGFycmF5KXthcnJheVtpXS5pbWcuc3JjPVwiYXN0ZXJvaWRzL1wiK3Bvd2VydXAubmFtZStcIi5wbmdcIn0pKTt2YXIgc3BhY2VzaGlwLGV4cGxvc2lvbkltYWdlPW5ldyBJbWFnZTtmdW5jdGlvbiBldmFsdWF0ZUtleXMoKXskc2NvcGUucGxheWluZz8obWFwWzMyXSYmMD09PXNwYWNlc2hpcC5jb29sZG93biYmc3BhY2VzaGlwLnNob290KCksbWFwWzM3XSYmKDA9PT1zcGFjZXNoaXAucm90YXRpb24/c3BhY2VzaGlwLnJvdGF0aW9uPTM2MDpzcGFjZXNoaXAucm90YXRpb24tPTMpLG1hcFszOV0mJigzNjA9PT1zcGFjZXNoaXAucm90YXRpb24/c3BhY2VzaGlwLnJvdGF0aW9uPTA6c3BhY2VzaGlwLnJvdGF0aW9uKz0zKSxtYXBbMzhdP3NwYWNlc2hpcC5zcGVlZDw9c3BhY2VzaGlwLm1heFNwZWVkJiYoc3BhY2VzaGlwLnNwZWVkKz01KTpzcGFjZXNoaXAuc3BlZWQ+MCYmc3BhY2VzaGlwLnNwZWVkLS0sbWFwWzQwXSYmc3BhY2VzaGlwLnNwZWVkPjAmJihzcGFjZXNoaXAuc3BlZWQtPTIpKTptYXBbMzJdJiYoJHNjb3BlLnBsYXlpbmc9ITAsJHNjb3BlLnNjb3JlPTAsc3BhY2U9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnNwYWNlcGljcyksJHNjb3BlLiRhcHBseSgpLHNwYWNlc2hpcD1uZXcgU3BhY2VzaGlwLCRzY29wZS5zY29yZT0wLHNwYXduQXN0ZXJvaWRzKDUpLGZ1bmN0aW9uIGF1dG9TcGF3bigpe2lmKE9iamVjdC5rZXlzKGFzdGVyb2lkcykubGVuZ3RoPDIwMCl7dmFyIGlkPU1hdGgucm91bmQoMWU4Kk1hdGgucmFuZG9tKCkpO2FzdGVyb2lkc1tpZF09bmV3IEFzdGVyb2lkKGlkKX0kc2NvcGUucGxheWluZyYmc2V0VGltZW91dCgoZnVuY3Rpb24oKXthdXRvU3Bhd24oKX0pLCRzY29wZS5zY29yZTwxZTM/MWUzOiRzY29wZS5zY29yZTwyZTM/OTAwOiRzY29wZS5zY29yZTwzZTM/ODAwOiRzY29wZS5zY29yZTw0ZTM/NzAwOiRzY29wZS5zY29yZTw1ZTM/NjAwOiRzY29wZS5zY29yZTw2ZTM/NTAwOiRzY29wZS5zY29yZTw3ZTM/NDAwOiRzY29wZS5zY29yZTw4ZTM/MzAwOjIwMCl9KCkpfWZ1bmN0aW9uIFNwYWNlc2hpcCgpe3RoaXMud2lkdGg9NTAsdGhpcy5oZWlnaHQ9NTAsdGhpcy5zaGllbGQ9ITEsdGhpcy5yYW5nZT04MCx0aGlzLmNhbm5vbj17eDp0aGlzLndpZHRoLzItNC41LHk6dGhpcy5oZWlnaHQvMi0uMDc4MTI1KnRoaXMuaGVpZ2h0fSx0aGlzLmNvb2xkb3duPTAsdGhpcy5jb29sZG93blRpbWU9MjAsdGhpcy5wb3NpdGlvbj1bY2FudmFzLndpZHRoLzItdGhpcy53aWR0aC8yLGNhbnZhcy5oZWlnaHQvMi10aGlzLmhlaWdodC8yXSx0aGlzLmltZz1uZXcgSW1hZ2UsdGhpcy5pbWcuc3JjPVwiYXN0ZXJvaWRzL3NwYWNlc2hpcC5wbmdcIix0aGlzLnNwZWVkPTAsdGhpcy5tYXhTcGVlZD0xZTMsdGhpcy5hbmdsZT0wLHRoaXMucm90YXRpb249MCx0aGlzLnNob290PWZ1bmN0aW9uKCl7dGhpcy5jb29sZG93bj10aGlzLmNvb2xkb3duVGltZTt2YXIgaWQ9TWF0aC5yb3VuZCgxZTgqTWF0aC5yYW5kb20oKSk7c2hvdHNbaWRdPW5ldyBTaG90KGlkLHRoaXMpfSx0aGlzLm1vdmU9ZnVuY3Rpb24oKXtmb3IodmFyIGkgaW4gdGhpcy5zaGllbGQmJihjdHguYmVnaW5QYXRoKCksY3R4LmFyYyh0aGlzLnBvc2l0aW9uWzBdK3RoaXMud2lkdGgvMix0aGlzLnBvc2l0aW9uWzFdK3RoaXMuaGVpZ2h0LzIsMzAsMCwyKk1hdGguUEkpLGN0eC5maWxsU3R5bGU9XCJyZ2IoMzUsIDIzNywgODYsIDAuNSlcIixjdHguc3Ryb2tlU3R5bGU9XCJyZ2IoNjYsIDE2OCwgMzYsIDAuOClcIixjdHgubGluZVdpZHRoPTUsY3R4LnN0cm9rZSgpLGN0eC5maWxsKCkpLGFzdGVyb2lkcyl7dmFyIGFzdGVyb2lkPWFzdGVyb2lkc1tpXTtpZihoaXQoYXN0ZXJvaWQsdGhpcykpe2lmKCF0aGlzLnNoaWVsZClyZXR1cm4gZ2FtZU92ZXIoKTt0aGlzLnNoaWVsZD0hMSxhc3Rlcm9pZC5leHBsb2RlKCl9fXRoaXMuYW5nbGU9dGhpcy5yb3RhdGlvbix0aGlzLmNvb2xkb3duPjAmJnRoaXMuY29vbGRvd24tLSxtb3ZlKHRoaXMpfX1mdW5jdGlvbiBTaG90KGlkLHNwYWNlc2hpcCl7dGhpcy5pZD1pZCx0aGlzLnBvc2l0aW9uPVtzcGFjZXNoaXAucG9zaXRpb25bMF0rc3BhY2VzaGlwLmNhbm5vbi54K3NwYWNlc2hpcC5jYW5ub24ueCpNYXRoLmNvcygoc3BhY2VzaGlwLnJvdGF0aW9uLTkwKSpNYXRoLlBJLzE4MCksc3BhY2VzaGlwLnBvc2l0aW9uWzFdK3NwYWNlc2hpcC5jYW5ub24ueStzcGFjZXNoaXAuY2Fubm9uLnkqTWF0aC5zaW4oKHNwYWNlc2hpcC5yb3RhdGlvbi05MCkqTWF0aC5QSS8xODApXSx0aGlzLndpZHRoPTksdGhpcy5oZWlnaHQ9MTUsdGhpcy5hbmdsZT1zcGFjZXNoaXAuYW5nbGUsdGhpcy5yb3RhdGlvbj1zcGFjZXNoaXAucm90YXRpb24sdGhpcy5zcGVlZD1zcGFjZXNoaXAuc3BlZWQrNTAwLHRoaXMubGlmZXNwYW49c3BhY2VzaGlwLnJhbmdlLHRoaXMuaW1nPW5ldyBJbWFnZSx0aGlzLmltZy5zcmM9XCJhc3Rlcm9pZHMvc2hvdC5wbmdcIix0aGlzLm1vdmU9ZnVuY3Rpb24oKXt0aGlzLmxpZmVzcGFuLS0sbW92ZSh0aGlzKX19ZnVuY3Rpb24gQXN0ZXJvaWQoaWQpe3RoaXMuaWQ9aWQsdGhpcy53aWR0aD01MCpNYXRoLnJhbmRvbSgpKzIwLHRoaXMuaGVpZ2h0PXRoaXMud2lkdGgsdGhpcy5wb3NpdGlvbj1nZXRFbnRyeVBvc2l0aW9uKHRoaXMud2lkdGgsdGhpcy5oZWlnaHQpLHRoaXMuYW5nbGU9MzYwKk1hdGgucmFuZG9tKCksdGhpcy5yb3RhdGlvbj0zNjAqTWF0aC5yYW5kb20oKSx0aGlzLnJvdGF0aW9uU3BlZWQ9NipNYXRoLnJhbmRvbSgpLTMsdGhpcy5zcGVlZD0zMDAqTWF0aC5yYW5kb20oKSsyLHRoaXMuaW1nPW5ldyBJbWFnZSx0aGlzLmltZy5zcmM9XCJhc3Rlcm9pZHMvYXN0ZXJvaWRcIisoTWF0aC5yb3VuZCg2Kk1hdGgucmFuZG9tKCkpKzEpK1wiLnBuZ1wiLHRoaXMuZXhwbG9kZT1mdW5jdGlvbigpe3JldHVybiBleHBsb3Npb25zW3RoaXMuaWRdPW5ldyBFeHBsb3Npb24odGhpcyksZGVsZXRlIGFzdGVyb2lkc1t0aGlzLmlkXX0sdGhpcy5tb3ZlPWZ1bmN0aW9uKCl7Zm9yKHZhciBpIGluIHRoaXMucm90YXRpb24rPXRoaXMucm90YXRpb25TcGVlZCx0aGlzLnJvdGF0aW9uPjM2MD90aGlzLnJvdGF0aW9uPXRoaXMucm90YXRpb24tMzYwOnRoaXMucm90YXRpb248MCYmKHRoaXMucm90YXRpb249MzYwK3RoaXMucm90YXRpb24pLHNob3RzKXt2YXIgc2hvdD1zaG90c1tpXTtpZihoaXQoc2hvdCx0aGlzKSl7dGhpcy5leHBsb2RlKCk7dmFyIHBvaW50cz1NYXRoLmZsb29yKChzaG90LnNwZWVkLTUwMCkvMTArNzAtdGhpcy53aWR0aCk7TWF0aC5mbG9vcigocG9pbnRzKyRzY29wZS5zY29yZSkvMTAwKT5NYXRoLmZsb29yKCRzY29wZS5zY29yZS8xMDApJiZzcGF3blBvd2VydXAoKSwkc2NvcGUuc2NvcmUrPXBvaW50cywkc2NvcGUuJGFwcGx5KCksZGVsZXRlIHNob3RzW2ldfX1tb3ZlKHRoaXMpfX1mdW5jdGlvbiBFeHBsb3Npb24ob2JqZWN0KXt0aGlzLnBvc2l0aW9uPVtvYmplY3QucG9zaXRpb25bMF0sb2JqZWN0LnBvc2l0aW9uWzFdXSx0aGlzLndpZHRoPW9iamVjdC53aWR0aCx0aGlzLmhlaWdodD1vYmplY3QuaGVpZ2h0LHRoaXMuc3BlZWQ9MCx0aGlzLmFuZ2xlPTM2MCpNYXRoLnJhbmRvbSgpLHRoaXMuY3ljbGU9e3Jvd3M6Nixjb2x1bW5zOjgsc2l6ZTpbMjU2LDI1Nl0saTowLGRpcmVjdGlvbjohMH0sdGhpcy5saWZlc3Bhbj00Nyx0aGlzLmltZz1leHBsb3Npb25JbWFnZSx0aGlzLm1vdmU9ZnVuY3Rpb24oKXt0aGlzLmxpZmVzcGFuLS0sbW92ZSh0aGlzKSx0aGlzLmN5Y2xlLmRpcmVjdGlvbj90aGlzLmN5Y2xlLmkrKzp0aGlzLmN5Y2xlLmktLX19ZnVuY3Rpb24gUG93ZXJ1cChpZCl7dGhpcy5pZD1pZCx0aGlzLnBvd2VydXA9cG93ZXJ1cFR5cGVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpwb3dlcnVwVHlwZXMubGVuZ3RoKV0sdGhpcy5jeWNsZT10aGlzLnBvd2VydXAuY3ljbGUsdGhpcy5saWZlc3Bhbj0xZTMsdGhpcy5jeWNsZS5zaXplWzFdPnRoaXMuY3ljbGUuc2l6ZVswXT8odGhpcy5oZWlnaHQ9NDAsdGhpcy53aWR0aD1NYXRoLnJvdW5kKHRoaXMuaGVpZ2h0L3RoaXMuY3ljbGUuc2l6ZVsxXSp0aGlzLmN5Y2xlLnNpemVbMF0pKToodGhpcy53aWR0aD00MCx0aGlzLmhlaWdodD1NYXRoLnJvdW5kKHRoaXMud2lkdGgvdGhpcy5jeWNsZS5zaXplWzBdKnRoaXMuY3ljbGUuc2l6ZVsxXSkpLHRoaXMucG9zaXRpb249Z2V0RW50cnlQb3NpdGlvbih0aGlzLndpZHRoLHRoaXMuaGVpZ2h0KSx0aGlzLmltZz10aGlzLnBvd2VydXAuaW1nLHRoaXMuYW5nbGU9MzYwKk1hdGgucmFuZG9tKCksdGhpcy5zcGVlZD0xNTAqTWF0aC5yYW5kb20oKSs1MDt2YXIgZGVsYXk9NTt0aGlzLm1vdmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5saWZlc3Bhbjw9MD9kZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF06aGl0KHNwYWNlc2hpcCx0aGlzKT8oJHNjb3BlLmFubm91bmNlPSEwLCRzY29wZS5hbm5vdW5jZW1lbnQ9dGhpcy5wb3dlcnVwLmFubm91bmNlbWVudCwkc2NvcGUuJGFwcGx5KCksc2V0VGltZW91dCgoZnVuY3Rpb24oKXskc2NvcGUuYW5ub3VuY2U9ITEsJHNjb3BlLiRhcHBseSgpfSksMWUzKSx0aGlzLnBvd2VydXAuYWN0aXZhdGUoc3BhY2VzaGlwKSxkZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF0pOih0aGlzLmxpZmVzcGFuLS0sbW92ZSh0aGlzKSx2b2lkKGRlbGF5PD0wPyh0aGlzLmN5Y2xlLmRpcmVjdGlvbj90aGlzLmN5Y2xlLmkrKzp0aGlzLmN5Y2xlLmktLSxkZWxheT01KTpkZWxheS0tKSl9fWZ1bmN0aW9uIG1vdmUob2JqZWN0KXtpZihvYmplY3QucG9zaXRpb25bMF0rPW9iamVjdC5zcGVlZC8xMDAqTWF0aC5jb3MoKG9iamVjdC5hbmdsZS05MCkqTWF0aC5QSS8xODApLG9iamVjdC5wb3NpdGlvblsxXSs9b2JqZWN0LnNwZWVkLzEwMCpNYXRoLnNpbigob2JqZWN0LmFuZ2xlLTkwKSpNYXRoLlBJLzE4MCksb2JqZWN0LnBvc2l0aW9uWzBdPmNhbnZhcy53aWR0aD9vYmplY3QucG9zaXRpb25bMF09LW9iamVjdC53aWR0aDpvYmplY3QucG9zaXRpb25bMF08LW9iamVjdC53aWR0aCYmKG9iamVjdC5wb3NpdGlvblswXT1jYW52YXMud2lkdGgpLG9iamVjdC5wb3NpdGlvblsxXT5jYW52YXMuaGVpZ2h0P29iamVjdC5wb3NpdGlvblsxXT0tb2JqZWN0LmhlaWdodDpvYmplY3QucG9zaXRpb25bMV08LW9iamVjdC5oZWlnaHQmJihvYmplY3QucG9zaXRpb25bMV09Y2FudmFzLmhlaWdodCksY3R4LnNhdmUoKSxjdHgudHJhbnNsYXRlKG9iamVjdC5wb3NpdGlvblswXSxvYmplY3QucG9zaXRpb25bMV0pLGN0eC50cmFuc2xhdGUob2JqZWN0LndpZHRoLzIsb2JqZWN0LmhlaWdodC8yKSxjdHgucm90YXRlKG9iamVjdC5yb3RhdGlvbipNYXRoLlBJLzE4MCksb2JqZWN0LmN5Y2xlKXt2YXIgY29sdW1uPW9iamVjdC5jeWNsZS5pJW9iamVjdC5jeWNsZS5jb2x1bW5zLHJvdz1NYXRoLmZsb29yKG9iamVjdC5jeWNsZS5pL29iamVjdC5jeWNsZS5jb2x1bW5zKTtjdHguZHJhd0ltYWdlKG9iamVjdC5pbWcsb2JqZWN0LmN5Y2xlLnNpemVbMF0qY29sdW1uLG9iamVjdC5jeWNsZS5zaXplWzFdKnJvdyxvYmplY3QuY3ljbGUuc2l6ZVswXSxvYmplY3QuY3ljbGUuc2l6ZVsxXSwtb2JqZWN0LndpZHRoLzIsLW9iamVjdC5oZWlnaHQvMixvYmplY3Qud2lkdGgsb2JqZWN0LmhlaWdodCksb2JqZWN0LmN5Y2xlLmk8PTA/KG9iamVjdC5jeWNsZS5pPTAsb2JqZWN0LmN5Y2xlLmRpcmVjdGlvbj0hMCk6b2JqZWN0LmN5Y2xlLmk+PW9iamVjdC5jeWNsZS5jb2x1bW5zKm9iamVjdC5jeWNsZS5yb3dzJiYob2JqZWN0LmN5Y2xlLmk9b2JqZWN0LmN5Y2xlLmNvbHVtbnMqb2JqZWN0LmN5Y2xlLnJvd3MtMSxvYmplY3QuY3ljbGUuZGlyZWN0aW9uPSExKX1lbHNlIGN0eC5kcmF3SW1hZ2Uob2JqZWN0LmltZywtb2JqZWN0LndpZHRoLzIsLW9iamVjdC5oZWlnaHQvMixvYmplY3Qud2lkdGgsb2JqZWN0LmhlaWdodCk7Y3R4LnJlc3RvcmUoKX1mdW5jdGlvbiBnZXRFbnRyeVBvc2l0aW9uKHdpZHRoLGhlaWdodCl7dmFyIHgsZ3JpZFg9MipNYXRoLnJhbmRvbSgpLGdyaWRZPTIqTWF0aC5yYW5kb20oKSx5PTA7cmV0dXJuIGdyaWRYPj0xPyh4PU1hdGgucmFuZG9tKCkqY2FudmFzLndpZHRoLHk9eT49MT8wLWhlaWdodDpjYW52YXMuaGVpZ2h0KTooeT1NYXRoLnJhbmRvbSgpKmNhbnZhcy5oZWlnaHQseD1ncmlkWT49MT8wLXdpZHRoOmNhbnZhcy53aWR0aCksW3gseV19ZnVuY3Rpb24gaGl0KG9iamVjdDEsb2JqZWN0Mil7cmV0dXJuIG9iamVjdDEucG9zaXRpb25bMF08b2JqZWN0Mi5wb3NpdGlvblswXStvYmplY3QyLndpZHRoJiZvYmplY3QyLnBvc2l0aW9uWzBdPG9iamVjdDEucG9zaXRpb25bMF0rb2JqZWN0MS53aWR0aCYmb2JqZWN0MS5wb3NpdGlvblsxXTxvYmplY3QyLnBvc2l0aW9uWzFdK29iamVjdDIuaGVpZ2h0JiZvYmplY3QyLnBvc2l0aW9uWzFdPG9iamVjdDEucG9zaXRpb25bMV0rb2JqZWN0MS5oZWlnaHR9ZnVuY3Rpb24gc3Bhd25Bc3Rlcm9pZHMoYW1vdW50KXt2YXIgaT0wO2Rve3ZhciBpZD1NYXRoLnJvdW5kKDFlOCpNYXRoLnJhbmRvbSgpKTthc3Rlcm9pZHNbaWRdPW5ldyBBc3Rlcm9pZChpZCl9d2hpbGUoaSsrPD1hbW91bnQpfWZ1bmN0aW9uIHNwYXduUG93ZXJ1cCgpe2lmKE9iamVjdC5rZXlzKHBvd2VydXBzKS5sZW5ndGg8Myl7dmFyIGlkPU1hdGgucm91bmQoMWU4Kk1hdGgucmFuZG9tKCkpO3Bvd2VydXBzW2lkXT1uZXcgUG93ZXJ1cChpZCl9fWZ1bmN0aW9uIGdhbWVPdmVyKCl7Zm9yKHZhciBpIGluICRzY29wZS5wbGF5aW5nPSExLGFzdGVyb2lkcylhc3Rlcm9pZHNbaV0uZXhwbG9kZSgpO3Nob3RzPXt9LCRzY29wZS5sb2dnZWRJbj8kc2NvcGUuY3VycmVudFVzZXIuaGlnaHNjb3JlLmFzdGVyb2lkczwkc2NvcGUuc2NvcmUmJigkc2NvcGUuY3VycmVudFVzZXIuaGlnaHNjb3JlLmFzdGVyb2lkcz0kc2NvcGUuc2NvcmUsR2FtZVN2Yy5zZXRIaWdoc2NvcmUoXCJhc3Rlcm9pZHNcIiwkc2NvcGUuY3VycmVudFVzZXIuX2lkLCRzY29wZS5zY29yZSkpOiRzY29wZS5oaWdoc2NvcmU8JHNjb3BlLnNjb3JlJiYoJHNjb3BlLmhpZ2hzY29yZT0kc2NvcGUuc2NvcmUpfWZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpe2NvbnNvbGUubG9nKHdpbmRvdy5pbm5lcldpZHRoKSxjYW52YXMud2lkdGg9d2luZG93LmlubmVyV2lkdGgsY2FudmFzLmhlaWdodD13aW5kb3cuaW5uZXJIZWlnaHQtKGNhbnZhcy53aWR0aDw9NzY4PzUwOjEwNSl9ZXhwbG9zaW9uSW1hZ2Uuc3JjPVwiYXN0ZXJvaWRzL2V4cGxvc2lvbi5wbmdcIix3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwoZnVuY3Rpb24oZSl7bWFwW2Uua2V5Q29kZXx8ZS53aGljaF09ITB9KSwhMCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLChmdW5jdGlvbihlKXttYXBbZS5rZXlDb2RlfHxlLndoaWNoXT0hMX0pLCEwKSwkc2NvcGUuaGlnaHNjb3JlPTAsd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixyZXNpemVDYW52YXMsITEpLHJlc2l6ZUNhbnZhcygpLHJlcXVlc3RBbmltYXRpb25GcmFtZSgoZnVuY3Rpb24gZHJhdygpe2Zvcih2YXIgaSBpbiBjdHguY2xlYXJSZWN0KDAsMCxjYW52YXMud2lkdGgsY2FudmFzLmhlaWdodCksc2hvdHMpc2hvdHNbaV0ubGlmZXNwYW48PTA/ZGVsZXRlIHNob3RzW2ldOnNob3RzW2ldLm1vdmUoKTtmb3IoaSBpbiBhc3Rlcm9pZHMpYXN0ZXJvaWRzW2ldLm1vdmUoKTtmb3IoaSBpbiBwb3dlcnVwcylwb3dlcnVwc1tpXS5tb3ZlKCk7Zm9yKGkgaW4gZXhwbG9zaW9ucylleHBsb3Npb25zW2ldLmxpZmVzcGFuPD0wP2RlbGV0ZSBleHBsb3Npb25zW2ldOmV4cGxvc2lvbnNbaV0ubW92ZSgpO2lmKGV2YWx1YXRlS2V5cygpLCRzY29wZS5wbGF5aW5nKXNwYWNlc2hpcC5tb3ZlKCk7ZWxzZXt2YXIgZ3JhZGllbnQ9Y3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsMCxjYW52YXMud2lkdGgsMCk7Z3JhZGllbnQuYWRkQ29sb3JTdG9wKFwiMFwiLFwicmdiKFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIpXCIpLGdyYWRpZW50LmFkZENvbG9yU3RvcChcIjAuMjVcIixcInJnYihcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigyNTYtMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiKVwiKSxncmFkaWVudC5hZGRDb2xvclN0b3AoXCIwLjVcIixcInJnYihcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiKVwiKSxncmFkaWVudC5hZGRDb2xvclN0b3AoXCIwLjc1XCIsXCJyZ2IoXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIilcIiksZ3JhZGllbnQuYWRkQ29sb3JTdG9wKFwiMS4wXCIsXCJyZ2IoXCIrTWF0aC5mbG9vcigyNTYtMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIilcIiksY3R4LmZpbGxTdHlsZT1ncmFkaWVudCxjdHguZm9udD1cIjYwcHggTW9ub3RvblwiLGN0eC5maWxsVGV4dChcIkFzdGVyb2lkc1wiLGNhbnZhcy53aWR0aC8yLWN0eC5tZWFzdXJlVGV4dChcIkFzdGVyb2lkc1wiKS53aWR0aC8yLGNhbnZhcy5oZWlnaHQvMiksY3R4LmZvbnQ9XCIyMHB4IEFsZHJpY2hcIixjdHguZmlsbFRleHQoXCJQcmVzcyBzcGFjZSB0byBzdGFydFwiLGNhbnZhcy53aWR0aC8yLWN0eC5tZWFzdXJlVGV4dChcIlByZXNzIHNwYWNlIHRvIHN0YXJ0XCIpLndpZHRoLzIsY2FudmFzLmhlaWdodC8yKzIwKSxjdHguZmlsbFRleHQoXCJEZXNpZ25lZCBhbmQgZGV2ZWxvcGVkIGJ5IExhdXJlbnQgRGViYWNrZXJcIixjYW52YXMud2lkdGgvMi1jdHgubWVhc3VyZVRleHQoXCJEZXNpZ25lZCBhbmQgZGV2ZWxvcGVkIGJ5IExhdXJlbnQgRGViYWNrZXJcIikud2lkdGgvMixjYW52YXMuaGVpZ2h0LTMwKX0odGFsbHkrPWRpcmVjdGlvbj8xOi0xKT4xMDA/KHRhbGx5PTEwMCxkaXJlY3Rpb249ITEpOnRhbGx5PDAmJih0YWxseT0wLGRpcmVjdGlvbj0hMCk7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpfSkpO3ZhciB0YWxseT0wLGRpcmVjdGlvbj0hMDskc2NvcGUuc3BhY2U9ZnVuY3Rpb24oKXtyZXR1cm57YmFja2dyb3VuZEltYWdlOid1cmwoXCJhc3Rlcm9pZHMvc3BhY2UnK3NwYWNlKycuanBnXCIpJ319fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJCdWJibGVzQ3RybFwiLFtcIiRzY29wZVwiLGZ1bmN0aW9uKCRzY29wZSl7dmFyIGNhbnZhcz1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1YmJsZXMtcGFnZVwiKSxjdHg9Y2FudmFzLmdldENvbnRleHQoXCIyZFwiKSxidWJibGVzPVtdLGNvbG9ycz1bXCIjZmZjMzAwXCIsXCIjZmY1NzMzXCIsXCIjYzcwMDM5XCIsXCIjOTAwYzNlXCIsXCIjNTcxODQ1XCJdO2Z1bmN0aW9uIEJ1YmJsZSgpe3RoaXMubGlmZXNwYW49MCx0aGlzLnJhZGl1cz0xLHRoaXMuZXhwYW5kaW5nPSEwLHRoaXMuc3BlZWQ9TWF0aC5yb3VuZCgzKk1hdGgucmFuZG9tKCkpLHRoaXMuY2lyY3VtZmVyZW5jZT1NYXRoLnJvdW5kKDUwKk1hdGgucmFuZG9tKCkpKzUsdGhpcy5tYXhSYWRpdXM9TWF0aC5yb3VuZCgyMDAqTWF0aC5yYW5kb20oKSkrMjAsdGhpcy54PU1hdGgucm91bmQoTWF0aC5yYW5kb20oKSpjYW52YXMud2lkdGgpLHRoaXMueT1NYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkqY2FudmFzLmhlaWdodCksdGhpcy52eD1NYXRoLnJhbmRvbSgpPj0uNT8xOi0xLHRoaXMudnk9TWF0aC5yYW5kb20oKT49LjU/MTotMX1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uIGZpbHRlckJ1YmJsZXMoKXtidWJibGVzLnB1c2gobmV3IEJ1YmJsZSksYnViYmxlcz1idWJibGVzLmZpbHRlcigoZnVuY3Rpb24oYnViYmxlKXtyZXR1cm4gYnViYmxlLnJhZGl1cz09PWJ1YmJsZS5tYXhSYWRpdXMmJihidWJibGUuZXhwYW5kaW5nPSExKSxidWJibGUueCs9YnViYmxlLnZ4KmJ1YmJsZS5zcGVlZCxidWJibGUueSs9YnViYmxlLnZ5KmJ1YmJsZS5zcGVlZCxidWJibGUucmFkaXVzKz1idWJibGUuZXhwYW5kaW5nPzE6LTEsYnViYmxlLnJhZGl1cz4wfSkpLGN0eC5jbGVhclJlY3QoMCwwLGNhbnZhcy53aWR0aCxjYW52YXMuaGVpZ2h0KSxidWJibGVzLmZvckVhY2goKGZ1bmN0aW9uKGJ1YmJsZSl7Y29sb3JzW01hdGgucm91bmQoY29sb3JzLmxlbmd0aCpidWJibGUucmFkaXVzL2J1YmJsZS5tYXhSYWRpdXMpXSxjdHguYmVnaW5QYXRoKCksY3R4LmFyYyhidWJibGUueCxidWJibGUueSxidWJibGUucmFkaXVzLDAsMipNYXRoLlBJKSxjdHguZmlsbFN0eWxlPWNvbG9yc1tNYXRoLnJvdW5kKGNvbG9ycy5sZW5ndGgqYnViYmxlLnJhZGl1cy9idWJibGUubWF4UmFkaXVzKV0sY3R4LmZpbGwoKSxjdHguc3Ryb2tlU3R5bGU9Y29sb3JzW2NvbG9ycy5sZW5ndGgtTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoKmJ1YmJsZS5yYWRpdXMvYnViYmxlLm1heFJhZGl1cyldLGN0eC5saW5lV2lkdGg9YnViYmxlLmNpcmN1bWZlcmVuY2UqYnViYmxlLnJhZGl1cy9idWJibGUubWF4UmFkaXVzLGN0eC5zdHJva2UoKX0pKSxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZmlsdGVyQnViYmxlcyl9KSksZnVuY3Rpb24oKXtmdW5jdGlvbiByZXNpemVDYW52YXMoKXtjYW52YXMud2lkdGg9d2luZG93LmlubmVyV2lkdGgsY2FudmFzLmhlaWdodD13aW5kb3cuaW5uZXJIZWlnaHQtKGNhbnZhcy53aWR0aDw9NzY4PzU1OjExMSl9d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixyZXNpemVDYW52YXMsITEpLHJlc2l6ZUNhbnZhcygpfSgpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJDb250YWN0Q3RybFwiLFtcIiRzY29wZVwiLFwiRW1haWxTdmNcIixmdW5jdGlvbigkc2NvcGUsRW1haWxTdmMpeyRzY29wZS5vcHRpb25zPVt7bmFtZTpcIlNwYW1cIix0ZXh0OlwiSSBhbSBhIHNwYW0gYm90IGFuZCBhdXRvbWF0aWNhbGx5IGNoZWNrIHRoZSBmaXJzdCBvcHRpb24gSSBmaW5kIVwifSx7bmFtZTpcIk9wcG9ydHVuaXRpeVwiLHRleHQ6XCJZb3Ugc2VlbSB0byBoYXZlIHRoZSBza2lsbHMgSSBzZWVrLCBJJ2QgbGlrZSB0byB0YWxrIGFib3V0IHNvbWUgb3Bwb3J0dW5pdGllcy5cIn0se25hbWU6XCJSZXN1bWVcIix0ZXh0OlwiSSBkaWcgdGhlIHJlc3VtZSwgaG93IGRpZCB5b3UgbWFrZSBpdD9cIn0se25hbWU6XCJPdGhlclwiLHRleHQ6XCJTdW10aW4gZWxzZSFcIn1dLCRzY29wZS5jb250YWN0PXtlbWFpbDpcIlwiLG5hbWU6XCJcIixwaG9uZTpcIlwiLGFib3V0OlwiXCIsbWVzc2FnZTpcIlwifSwkc2NvcGUuc2VuZD1mdW5jdGlvbigpeyRzY29wZS5zZW5kaW5nPSEwLGNvbnNvbGUubG9nKFwiaGVyZVwiKSxFbWFpbFN2Yy5zZW5kKHtlbWFpbDokc2NvcGUuY29udGFjdC5lbWFpbCxuYW1lOiRzY29wZS5jb250YWN0Lm5hbWUscGhvbmU6JHNjb3BlLmNvbnRhY3QucGhvbmUsYWJvdXQ6JHNjb3BlLmNvbnRhY3QuYWJvdXQsbWVzc2FnZTokc2NvcGUuY29udGFjdC5tZXNzYWdlfSkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5zZW50PSEwLGNvbnNvbGUubG9nKFwiU1VDQ0VTUy4gc3RhdHVzPSVkLCB0ZXh0PSVzXCIscmVzcG9uc2Uuc3RhdHVzLHJlc3BvbnNlLnRleHQpLGNvbnNvbGUubG9nKHJlc3BvbnNlKX0pLChmdW5jdGlvbihlcnIpeyRzY29wZS5zZW5kaW5nPSExLGNvbnNvbGUubG9nKFwiRkFJTEVELiBlcnJvcj1cIixlcnIpfSkpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiRXhwZXJpZW5jZUN0cmxcIixbXCIkc2NvcGVcIixmdW5jdGlvbigkc2NvcGUpeyRzY29wZS5nZXRTa2lsbD1mdW5jdGlvbihza2lsbENvZGUpe2lmKCRzY29wZS5za2lsbHMpcmV0dXJuICRzY29wZS5za2lsbHMuZmluZCgoZnVuY3Rpb24oc2tpbGwpe3JldHVybiBza2lsbC5jb2RlPT09c2tpbGxDb2RlfSkpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiSG9iYmllc0N0cmxcIixbXCIkc2NvcGVcIixcIiR3aW5kb3dcIixmdW5jdGlvbigkc2NvcGUsJHdpbmRvdyl7JHNjb3BlLmhvYmJ5U2VsZWN0b3JWaXNpYmxlPSExLCQuZ2V0SlNPTihcImh0dHBzOi8vd3d3LnJlZGRpdC5jb20vdXNlci9iZWxnb2NhbmFkaWFuL2Fib3V0Ly5qc29uXCIsKGZ1bmN0aW9uKHJlc3BvbnNlKXt9KSksJHNjb3BlLnNlbGVjdGVkSG9iYnk9JHNjb3BlLmhvYmJpZXNbMF0sJHNjb3BlLnNlbGVjdEhvYmJ5PWZ1bmN0aW9uKGhvYmJ5KXskc2NvcGUuc2VsZWN0ZWRIb2JieT1ob2JieSwkc2NvcGUuaG9iYnlTZWxlY3RvclZpc2libGU9ITF9LCRzY29wZS5zaG93SG9iYnk9ZnVuY3Rpb24odmFsdWUsaW5kZXgsYXJyYXkpe3JldHVybiEhdmFsdWUuaW1hZ2VzJiZ2YWx1ZS5pbWFnZXMubGVuZ3RoPjB9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJMZW1taW5nc0N0cmxcIixbXCIkc2NvcGVcIixcIkdhbWVTdmNcIixmdW5jdGlvbigkc2NvcGUsR2FtZVN2Yyl7dmFyIExFRlQ9MCxSSUdIVD0xLGNhbnZhcz1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxlbW1pbmdzLXBhZ2VcIiksY3R4PWNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiksbGVtbWluZ3NJbWFnZT1uZXcgSW1hZ2U7bGVtbWluZ3NJbWFnZS5zcmM9XCJsZW1taW5ncy9sZW1taW5ncy5wbmdcIjt2YXIgZGVjb3JJbWFnZT1uZXcgSW1hZ2U7ZGVjb3JJbWFnZS5zcmM9XCJsZW1taW5ncy9kZWNvci5wbmdcIjt2YXIgbGVtbWluZ3M9e30sc3RhcnRlZD0hMSxhY3Rpb25zPXt3YWxrOntzdGFydDpbMCwwXSxlbmQ6WzMyMCwyMF0sY29sdW1uczo4LHJvd3M6MSxyZXZlcnNlOiExfSxodWg6e3N0YXJ0OlszMjAsMF0sZW5kOls2NDAsMjBdLGNvbHVtbnM6OCxyb3dzOjEscmV2ZXJzZTohMH0sZmFsbDp7c3RhcnQ6WzAsODBdLGVuZDpbMTYwLDEwMF0sY29sdW1uczo0LHJvd3M6MSxyZXZlcnNlOiExfSxmbHk6e3N0YXJ0OlsxNjAsODBdLGVuZDpbNDgwLDExMF0sY29sdW1uczo4LHJvd3M6MSxyZXZlcnNlOiExfSxzdG9wOntzdGFydDpbMCwxMjBdLGVuZDpbNjQwLDE0MF0sY29sdW1uczoxNixyb3dzOjEscmV2ZXJzZTohMX0sY2xpbWI6e3N0YXJ0OlswLDE2MF0sZW5kOls2NDAsMTg1XSxjb2x1bW5zOjE2LHJvd3M6MSxyZXZlcnNlOiExfSxidWlsZDp7c3RhcnQ6WzAsMjAwXSxlbmQ6WzY0MCwyMjVdLGNvbHVtbnM6MTYscm93czoxLHJldmVyc2U6ITF9LHB1bmNoOntzdGFydDpbMCwyNDBdLGVuZDpbNjQwLDMwMF0sY29sdW1uczoxNixyb3dzOjIscmV2ZXJzZTohMX0sZGlnOntzdGFydDpbMCwzMjBdLGVuZDpbMzIwLDM0NV0sY29sdW1uczo4LHJvd3M6MSxyZXZlcnNlOiExfX07ZnVuY3Rpb24gTGVtbWluZyhpbml0KXt0aGlzLnBvc2l0aW9uPVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGNhbnZhcy53aWR0aC0yMDApKSsxMDAsTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihjYW52YXMuaGVpZ2h0LTIwMCkpKzEwMF0sdGhpcy5kaXJlY3Rpb249MipNYXRoLnJhbmRvbSgpPjE/TEVGVDpSSUdIVCx0aGlzLmFjdD1mdW5jdGlvbihhY3Rpb24pe3RoaXMuYWN0aW9uPWFjdGlvbnNbYWN0aW9uXSx0aGlzLmN5Y2xlPTAsdGhpcy53aWR0aD0odGhpcy5hY3Rpb24uZW5kWzBdLXRoaXMuYWN0aW9uLnN0YXJ0WzBdKS90aGlzLmFjdGlvbi5jb2x1bW5zLHRoaXMuaGVpZ2h0PSh0aGlzLmFjdGlvbi5lbmRbMV0tdGhpcy5hY3Rpb24uc3RhcnRbMV0tMjAqKHRoaXMuYWN0aW9uLnJvd3MtMSkpL3RoaXMuYWN0aW9uLnJvd3MsdGhpcy5hbmltYXRpb249ITB9LHRoaXMuYWN0KGluaXQpLHRoaXMubW92ZT1mdW5jdGlvbigpe2N0eC5zYXZlKCksY3R4LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uWzBdLHRoaXMucG9zaXRpb25bMV0pLGN0eC50cmFuc2xhdGUodGhpcy53aWR0aC8yLHRoaXMuaGVpZ2h0LzIpLHRoaXMuZGlyZWN0aW9uPT09TEVGVCYmY3R4LnNjYWxlKC0xLDEpO3ZhciBjb2x1bW49dGhpcy5jeWNsZSV0aGlzLmFjdGlvbi5jb2x1bW5zLHJvdz1NYXRoLmZsb29yKHRoaXMuY3ljbGUvdGhpcy5hY3Rpb24uY29sdW1ucyk7Y3R4LmRyYXdJbWFnZShsZW1taW5nc0ltYWdlLHRoaXMud2lkdGgqY29sdW1uK3RoaXMuYWN0aW9uLnN0YXJ0WzBdLCh0aGlzLmhlaWdodCsyMCkqcm93K3RoaXMuYWN0aW9uLnN0YXJ0WzFdLHRoaXMud2lkdGgsdGhpcy5oZWlnaHQsMCwwLDIqdGhpcy53aWR0aCwyKnRoaXMuaGVpZ2h0KSxjdHgucmVzdG9yZSgpLHRoaXMuYWN0aW9uLnJldmVyc2U/dGhpcy5hbmltYXRpb24/KHRoaXMuY3ljbGUrKyx0aGlzLmN5Y2xlPj10aGlzLmFjdGlvbi5jb2x1bW5zKnRoaXMuYWN0aW9uLnJvd3MmJih0aGlzLmFuaW1hdGlvbj0hdGhpcy5hbmltYXRpb24sdGhpcy5jeWNsZS0tKSk6KHRoaXMuY3ljbGUtLSx0aGlzLmN5Y2xlPDAmJih0aGlzLmFuaW1hdGlvbj0hdGhpcy5hbmltYXRpb24sdGhpcy5jeWNsZT0wKSk6KHRoaXMuY3ljbGUrKyx0aGlzLmN5Y2xlPj10aGlzLmFjdGlvbi5jb2x1bW5zKnRoaXMuYWN0aW9uLnJvd3MmJih0aGlzLmN5Y2xlPTApKX19ZnVuY3Rpb24gcmVzaXplQ2FudmFzKCl7Y2FudmFzLndpZHRoPXdpbmRvdy5pbm5lcldpZHRoLGNhbnZhcy5oZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0LShjYW52YXMud2lkdGg8PTc2OD81MDoxMDUpfXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIscmVzaXplQ2FudmFzLCExKSxyZXNpemVDYW52YXMoKSxPYmplY3Qua2V5cyhhY3Rpb25zKS5mb3JFYWNoKChmdW5jdGlvbihhY3Rpb24pe2xlbW1pbmdzW01hdGgucm91bmQoMWU4Kk1hdGgucmFuZG9tKCkpXT1uZXcgTGVtbWluZyhhY3Rpb24pfSkpO2xldCBoYXRjaD1uZXcgZnVuY3Rpb24oKXt0aGlzLnBvc2l0aW9uPVsyMCwyMF0sdGhpcy5hY3Rpb249e3N0YXJ0OlswLDBdLGVuZDpbODIsNTAwXSxjb2x1bW5zOjEscm93czoxMH0sdGhpcy53aWR0aD0odGhpcy5hY3Rpb24uZW5kWzBdLXRoaXMuYWN0aW9uLnN0YXJ0WzBdKS90aGlzLmFjdGlvbi5jb2x1bW5zLHRoaXMuaGVpZ2h0PSh0aGlzLmFjdGlvbi5lbmRbMV0tdGhpcy5hY3Rpb24uc3RhcnRbMV0pL3RoaXMuYWN0aW9uLnJvd3MsdGhpcy5jeWNsZT0wLHRoaXMub3Blbj1mdW5jdGlvbigpe3ZhciBjb2x1bW4scm93O2N0eC5zYXZlKCksY3R4LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uWzBdLHRoaXMucG9zaXRpb25bMV0pLGN0eC50cmFuc2xhdGUodGhpcy53aWR0aC8yLHRoaXMuaGVpZ2h0LzIpLHN0YXJ0ZWQ/KGNvbHVtbj10aGlzLmN5Y2xlJXRoaXMuYWN0aW9uLmNvbHVtbnMscm93PU1hdGguZmxvb3IodGhpcy5jeWNsZS90aGlzLmFjdGlvbi5jb2x1bW5zKSx0aGlzLmN5Y2xlPDkmJnRoaXMuY3ljbGUrKyk6KGNvbHVtbj0wLHJvdz0wKSxjdHguZHJhd0ltYWdlKGRlY29ySW1hZ2UsdGhpcy53aWR0aCpjb2x1bW4rdGhpcy5hY3Rpb24uc3RhcnRbMF0sdGhpcy5oZWlnaHQqcm93K3RoaXMuYWN0aW9uLnN0YXJ0WzFdLTEsdGhpcy53aWR0aCx0aGlzLmhlaWdodCwwLDAsMip0aGlzLndpZHRoLDIqdGhpcy5oZWlnaHQpLGN0eC5yZXN0b3JlKCl9fTshZnVuY3Rpb24gZHJhdygpe2lmKGN0eC5jbGVhclJlY3QoMCwwLGNhbnZhcy53aWR0aCxjYW52YXMuaGVpZ2h0KSxzdGFydGVkKWZvcih2YXIgaSBpbiBsZW1taW5ncylsZW1taW5nc1tpXS5tb3ZlKCk7ZWxzZSBjdHguYmVnaW5QYXRoKCksY3R4LmZvbnQ9XCI0MHB4IE1vbm90b25cIixjdHgubGluZVdpZHRoPVwiMTBcIixjdHguc3Ryb2tlU3R5bGU9XCJibHVlXCIsY3R4LnJlY3QoMTUsY2FudmFzLmhlaWdodC00NSxjdHgubWVhc3VyZVRleHQoXCJTdGFydFwiKS53aWR0aCsyMCxjdHgubWVhc3VyZVRleHQoXCJTdGFydFwiKS5oZWlnaHQrY2FudmFzLmhlaWdodC00NSksY3R4LmZpbGwoKSxjdHguZmlsbFRleHQoXCJTdGFydFwiLDIwLGNhbnZhcy5oZWlnaHQtNTApO2hhdGNoLm9wZW4oKSxzdGFydGVkPSEwLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZHJhdygpfSksMTUwKX0oKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiTGlzdHNDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIkNhdGVnb3JpZXNTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLENhdGVnb3JpZXNTdmMpeyRzY29wZS5zaG93Q2F0ZWdvcnk9ITAsJHNjb3BlLmluaXQ9ZnVuY3Rpb24oKXtDYXRlZ29yaWVzU3ZjLmdldENhdGVnb3JpZXMoKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7Zm9yKHZhciBpIGluICRzY29wZS5jYXRlZ29yaWVzPXJlc3BvbnNlLmRhdGEsJHNjb3BlLnRhc2tzPVtdLCRzY29wZS5jYXRlZ29yaWVzKWZvcih2YXIgaiBpbiAkc2NvcGUuY2F0ZWdvcmllc1tpXS50YXNrcykkc2NvcGUudGFza3MucHVzaCh7Y2F0ZWdvcnk6JHNjb3BlLmNhdGVnb3JpZXNbaV0ubmFtZSx0YXNrOiRzY29wZS5jYXRlZ29yaWVzW2ldLnRhc2tzW2pdLm5hbWV9KX0pKX0sJHNjb3BlLnNlbGVjdENhdGVnb3J5PWZ1bmN0aW9uKGNhdGVnb3J5KXtmb3IodmFyIGkgaW4gJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnk9Y2F0ZWdvcnksJHNjb3BlLnNlbGVjdGVkVGFza3M9W10sJHNjb3BlLnNlbGVjdGFibGVUYXNrcz1bXSwkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcykkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLnB1c2goJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0pOyRzY29wZS5zaG93Q2F0ZWdvcnk9ITEsJHNjb3BlLmVudGVyZWRDYXRlZ29yeT1cIlwifSwkc2NvcGUubmV3Q2F0ZWdvcnk9ZnVuY3Rpb24oY2F0ZWdvcnkpe2Zvcih2YXIgZm91bmQ9ITEsaT0wO2k8JHNjb3BlLmNhdGVnb3JpZXMubGVuZ3RoO2krKykkc2NvcGUuY2F0ZWdvcmllc1tpXS5uYW1lPT09Y2F0ZWdvcnkmJigkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkoJHNjb3BlLmNhdGVnb3JpZXNbaV0pLGZvdW5kPSEwKTtmb3VuZHx8Q2F0ZWdvcmllc1N2Yy5hZGRDYXRlZ29yeSh7Y2F0ZWdvcnl9KS50aGVuKChmdW5jdGlvbihjYXRlZ29yeSl7JHNjb3BlLmluaXQoKSwkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnkpfSkpLCRzY29wZS5lbnRlcmVkQ2F0ZWdvcnk9XCJcIn0sJHNjb3BlLm5ld1Rhc2s9ZnVuY3Rpb24odGFzayl7dmFyIGZvdW5kPSExO2Zvcih2YXIgaSBpbiAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcykkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXS5uYW1lPT09dGFzayYmKGZvdW5kPSEwLCRzY29wZS5zZWxlY3RUYXNrKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldKSk7Zm91bmR8fENhdGVnb3JpZXNTdmMuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS5uYW1lLHt0YXNrfSkudGhlbigoZnVuY3Rpb24oKXskc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcy5wdXNoKHtuYW1lOnRhc2t9KSwkc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcywkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1skc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcy5sZW5ndGgtMV0pfSkpLCRzY29wZS5lbnRlcmVkVGFzaz1cIlwifSwkc2NvcGUuc2VsZWN0VGFzaz1mdW5jdGlvbih0YXNrKXskc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcyx0YXNrKSwkc2NvcGUucmVtb3ZlVGFzaygkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLHRhc2spLCRzY29wZS5lbnRlcmVkVGFzaz1cIlwifSwkc2NvcGUudW5zZWxlY3RUYXNrPWZ1bmN0aW9uKHRhc2speyRzY29wZS5hZGRUYXNrKCRzY29wZS5zZWxlY3RhYmxlVGFza3MsdGFzayksJHNjb3BlLnJlbW92ZVRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsdGFzayl9LCRzY29wZS5hZGRUYXNrPWZ1bmN0aW9uKHRhc2tMaXN0LHRhc2spe3Rhc2tMaXN0LnB1c2godGFzayl9LCRzY29wZS5yZW1vdmVUYXNrPWZ1bmN0aW9uKHRhc2tMaXN0LHRhc2spe3Rhc2tMaXN0LnNwbGljZSh0YXNrTGlzdC5pbmRleE9mKHRhc2spLDEpfSwkc2NvcGUuc3RhcnRQcmlvcml0aXppbmc9ZnVuY3Rpb24oKXtDYXRlZ29yaWVzU3ZjLnNldFByaW9yaXR5TGlzdCgkc2NvcGUuc2VsZWN0ZWRUYXNrcyksJGxvY2F0aW9uLnBhdGgoXCIvcHJpb3JpdGl6ZVwiKX0sJHNjb3BlLmdldFF1ZXN0aW9ucz1mdW5jdGlvbigpe2lmKCEkc2NvcGUuc2VsZWN0ZWRUYXNrcylyZXR1cm5cIlwiO2Zvcih2YXIgY291bnRlcj0wLGk9JHNjb3BlLnNlbGVjdGVkVGFza3MubGVuZ3RoLTE7aT4wO2ktLSljb3VudGVyKz1pO3JldHVybiBjb3VudGVyfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiTG9naW5DdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLFVzZXJTdmMpe3ZhciB1aT1uZXcgZmlyZWJhc2V1aS5hdXRoLkF1dGhVSShmaXJlYmFzZS5hdXRoKCkpO2Z1bmN0aW9uIHN0YXJ0VUkoKXt1aS5zdGFydChcIiNmaXJlYmFzZXVpLWF1dGgtY29udGFpbmVyXCIse2NhbGxiYWNrczp7c2lnbkluU3VjY2VzczpmdW5jdGlvbihjdXJyZW50VXNlcixjcmVkZW50aWFsLHJlZGlyZWN0VXJsKXtyZXR1cm4gZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLmdldElkVG9rZW4oITApLnRoZW4oKGZ1bmN0aW9uKGlkVG9rZW4pe1VzZXJTdmMuYXV0aGVudGljYXRlKHtkaXNwbGF5TmFtZTpjdXJyZW50VXNlci5kaXNwbGF5TmFtZSxlbWFpbDpjdXJyZW50VXNlci5lbWFpbCxwaG90b1VSTDpjdXJyZW50VXNlci5waG90b1VSTCxlbWFpbFZlcmlmaWVkOmN1cnJlbnRVc2VyLmVtYWlsVmVyaWZpZWQsaWRUb2tlbn0pLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuJGVtaXQoXCJsb2dpblwiLHJlc3BvbnNlLmRhdGEpLCQoXCIjbW9kYWwtbG9naW5cIikubW9kYWwoXCJoaWRlXCIpfSksKGZ1bmN0aW9uKCl7JHNjb3BlLiRlbWl0KFwicG9wdXBcIix7bWVzc2FnZTpcIkxvZ2luIEZhaWxlZFwiLHR5cGU6XCJhbGVydC1kYW5nZXJcIn0pfSkpfSkpLmNhdGNoKChmdW5jdGlvbihlcnJvcil7fSkpLCExfSxzaWduSW5GYWlsdXJlOmZ1bmN0aW9uKGVycm9yKXtpZihcImZpcmViYXNldWkvYW5vbnltb3VzLXVwZ3JhZGUtbWVyZ2UtY29uZmxpY3RcIiE9ZXJyb3IuY29kZSlyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7dmFyIGNyZWQ9ZXJyb3IuY3JlZGVudGlhbDtyZXR1cm4gZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDcmVkZW50aWFsKGNyZWQpfSx1aVNob3duOmZ1bmN0aW9uKCl7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2FkZXJcIikuc3R5bGUuZGlzcGxheT1cIm5vbmVcIn19LHNpZ25JblN1Y2Nlc3NVcmw6XCIvaG9tZVwiLHNpZ25Jbk9wdGlvbnM6W2ZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIuUFJPVklERVJfSURdLHNpZ25JbkZsb3c6XCJwb3B1cFwifSl9JHNjb3BlLiRvbihcImxvZ291dFwiLChmdW5jdGlvbihldmVudCl7dWkucmVzZXQoKSxzdGFydFVJKCl9KSksc3RhcnRVSSgpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJQb3N0c0N0cmxcIixbXCIkc2NvcGVcIixcIiRmaWx0ZXJcIixcIlBvc3RzU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRmaWx0ZXIsUG9zdHNTdmMpeyRzY29wZS5hZGRQb3N0PWZ1bmN0aW9uKCl7JHNjb3BlLnBvc3RCb2R5JiZQb3N0c1N2Yy5jcmVhdGUoe2JvZHk6JHNjb3BlLnBvc3RCb2R5fSkudGhlbigoZnVuY3Rpb24ocG9zdCl7JHNjb3BlLnBvc3RCb2R5PW51bGx9KSl9LFBvc3RzU3ZjLmZldGNoKCkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5wb3N0cz1yZXNwb25zZS5kYXRhfSkpLCRzY29wZS4kb24oXCJ3czpuZXdfcG9zdFwiLChmdW5jdGlvbihfLHBvc3QpeyRzY29wZS4kYXBwbHkoKGZ1bmN0aW9uKCl7UG9zdHNTdmMuZ2V0UG9zdChwb3N0KS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLnBvc3RzLnVuc2hpZnQocmVzcG9uc2UuZGF0YSl9KSl9KSl9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlByaW9yaXRpemVDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIkNhdGVnb3JpZXNTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLENhdGVnb3JpZXNTdmMpeyRzY29wZS5wcmlvcml0eUxpc3Q9Q2F0ZWdvcmllc1N2Yy5nZXRQcmlvcml0eUxpc3QoKSwkc2NvcGUucHJpb3JpdHlMaXN0Pygkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbj0xLCRzY29wZS5jdXJyZW50UXVlc3Rpb249MSwkc2NvcGUuZG9uZT0hMSk6JGxvY2F0aW9uLnBhdGgoXCIvbGlzdHNcIiksJHNjb3BlLm1ha2VDaG9pY2U9ZnVuY3Rpb24oY2hvaWNlKXtmb3IodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkPT09JHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24mJigkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZT0xPT09Y2hvaWNlPyRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2U6JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2UpOyRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uPT09JHNjb3BlLmN1cnJlbnRRdWVzdGlvbiYmKCRzY29wZS5jdXJyZW50UXVlc3Rpb249JHNjb3BlLmN1cnJlbnRRdWVzdGlvbj09PSRzY29wZS5wcmlvcml0eUxpc3QubGVuZ3RoPzE6JHNjb3BlLmN1cnJlbnRRdWVzdGlvbisxKSwkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbj0kc2NvcGUuY3VycmVudFF1ZXN0aW9uO3ZhciBmb3VuZD0hMTtmb3IoaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KWlmKFwiXCI9PT0kc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSl7Zm91bmQ9ITA7YnJlYWt9Zm91bmR8fCgkKFwiI3ByaW9yaXRpemVDaG9pY2VzXCIpLmhpZGUoMzAwKSwkc2NvcGUuZG9uZT0hMCl9LCRzY29wZS5nZXRCdXR0b25WYWx1ZT1mdW5jdGlvbihjaG9pY2Upe2lmKCEkc2NvcGUucHJpb3JpdHlMaXN0KXJldHVyblwiXCI7Zm9yKHZhciBpPTA7aTwkc2NvcGUucHJpb3JpdHlMaXN0Lmxlbmd0aDtpKyspaWYoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZD09PSRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uKXJldHVybiAxPT09Y2hvaWNlPyRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2U6JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2V9LCRzY29wZS5zZWxlY3RRdWVzdGlvbj1mdW5jdGlvbihxdWVzdGlvbil7JHNjb3BlLnNlbGVjdGVkUXVlc3Rpb249cXVlc3Rpb259LCRzY29wZS5nZXRGaWx0ZXJlZFByaW9yaXR5TGlzdD1mdW5jdGlvbigpe3JldHVybiAkc2NvcGUucHJpb3JpdHlMaXN0PyRzY29wZS5wcmlvcml0eUxpc3Quc29ydCgoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5pZC1iLmlkfSkpLmZpbHRlcigoZnVuY3Rpb24ocXVlc3Rpb24pe3JldHVyblwiXCIhPT1xdWVzdGlvbi5jaG9pY2V8fHF1ZXN0aW9uLmlkPT09JHNjb3BlLmN1cnJlbnRRdWVzdGlvbn0pKTpbXX0sJHNjb3BlLmdldENob2ljZXNNYWRlPWZ1bmN0aW9uKCl7aWYoISRzY29wZS5wcmlvcml0eUxpc3QpcmV0dXJuXCJcIjt2YXIgY2hvaWNlc01hZGU9MDtmb3IodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdClcIlwiIT09JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UmJmNob2ljZXNNYWRlKys7cmV0dXJuIGNob2ljZXNNYWRlfSwkc2NvcGUuZ2V0QnV0dG9uQ2xhc3M9ZnVuY3Rpb24oY2hvaWNlKXtpZighJHNjb3BlLnByaW9yaXR5TGlzdClyZXR1cm5cIlwiO2Zvcih2YXIgaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KWlmKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQ9PT0kc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbilyZXR1cm5cIlwiPT09JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2U/XCJidG4tcHJpbWFyeVwiOjE9PT1jaG9pY2U/JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZT09PSRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlP1wiYnRuLXN1Y2Nlc3NcIjpcImJ0bi1kYW5nZXJcIjokc2NvcGUucHJpb3JpdHlMaXN0W2ldLnNlY29uZENob2ljZT09PSRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlP1wiYnRuLXN1Y2Nlc3NcIjpcImJ0bi1kYW5nZXJcIn0sJHNjb3BlLnNob3dDaG9pY2VzPWZ1bmN0aW9uKCl7JChcIiNwcmlvcml0aXplQ2hvaWNlc1wiKS5zaG93KDFlMyksJChcIiNyZXZpZXdDaG9pY2VzXCIpLmhpZGUoKX0sJHNjb3BlLmNoYXJ0Q2xpY2s9ZnVuY3Rpb24oZXZlbnQpeyRzY29wZS5jaGFydCYmY29uc29sZS5sb2coJHNjb3BlLmNoYXJ0LmdldFNlZ21lbnRzQXRFdmVudChldmVudCkpfSwkc2NvcGUuc2hvd1Jlc3VsdHM9ZnVuY3Rpb24oKXtmb3IodmFyIGkgaW4gJHNjb3BlLmRhdGE9W10sJHNjb3BlLm9wdGlvbnM9e3Jlc3BvbnNpdmU6ITAsc2VnbWVudFNob3dTdHJva2U6ITAsc2VnbWVudFN0cm9rZUNvbG9yOlwiI2ZmZlwiLHNlZ21lbnRTdHJva2VXaWR0aDoyLHBlcmNlbnRhZ2VJbm5lckN1dG91dDowLGFuaW1hdGlvblN0ZXBzOjEwMCxhbmltYXRpb25FYXNpbmc6XCJlYXNlT3V0Qm91bmNlXCIsYW5pbWF0ZVJvdGF0ZTohMCxhbmltYXRlU2NhbGU6ITEsbGVnZW5kVGVtcGxhdGU6JzxoMyBjbGFzcz1cInRjLWNoYXJ0LWpzLWxlZ2VuZFwiIHN0eWxlPVwicGFkZGluZzo1cHhcIj48JSBmb3IgKHZhciBpPTA7IGk8c2VnbWVudHMubGVuZ3RoOyBpKyspeyU+PGRpdiBjbGFzcz1cImxhYmVsXCIgc3R5bGU9XCJmbG9hdDpsZWZ0O21hcmdpbjo1cHg7YmFja2dyb3VuZC1jb2xvcjo8JT1zZWdtZW50c1tpXS5maWxsQ29sb3IlPlwiPjwlaWYoc2VnbWVudHNbaV0ubGFiZWwpeyU+PCU9c2VnbWVudHNbaV0ubGFiZWwlPjwlfSU+PC9kaXY+PCV9JT48L2gzPid9LENhdGVnb3JpZXNTdmMuY2hvaWNlcylmb3IodmFyIGogaW4gQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzPTAsJHNjb3BlLnByaW9yaXR5TGlzdClDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0ubmFtZT09PSRzY29wZS5wcmlvcml0eUxpc3Rbal0uY2hvaWNlJiZDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMrKztmb3IoaSBpbiBDYXRlZ29yaWVzU3ZjLmNob2ljZXMuc29ydCgoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS52b3RlczxiLnZvdGVzfSkpLENhdGVnb3JpZXNTdmMuY2hvaWNlcykkc2NvcGUuZGF0YS5wdXNoKHt2YWx1ZTpDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMsbGFiZWw6Q2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLm5hbWV9KTskKFwiI3ByaW9yaXRpemVSZXN1bHRcIikuaGlkZSgpLCQoXCIjcHJpb3JpdGl6ZUNob2ljZXNcIikuaGlkZSgpLCQoXCIjcHJpb3JpdHlSZXN1bHRzXCIpLnNob3coMWUzKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlByb2ZpbGVDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLFVzZXJTdmMpeyRzY29wZS5jdXJyZW50VXNlcj8oJChcIiNzZXgtaW5kaWNhdG9yXCIpLm9mZnNldCh7bGVmdDokc2NvcGUuY3VycmVudFVzZXIuZ2VuZGVyLnNleC8yMDAqJChcIiNzZXhcIikud2lkdGgoKSskKFwiI3NleFwiKS5vZmZzZXQoKS5sZWZ0fSksJChcIiNpZGVudGl0eS1pbmRpY2F0b3JcIikub2Zmc2V0KHtsZWZ0OiRzY29wZS5jdXJyZW50VXNlci5nZW5kZXIuaWRlbnRpdHkvMjAwKiQoXCIjaWRlbnRpdHlcIikud2lkdGgoKSskKFwiI2lkZW50aXR5XCIpLm9mZnNldCgpLmxlZnR9KSk6JGxvY2F0aW9uLnBhdGgoXCIvXCIpLCRzY29wZS5zZXhlcz1bXCJNYWxlXCIsXCJGdE0gTWFsZVwiLFwiSW50ZXJzZXhcIixcIk10RiBGZW1hbGVcIixcIkZlbWFsZVwiXSwkc2NvcGUuaWRlbnRpdGllcz1bXCJNYW5cIixcIkJpZ2VuZGVyXCIsXCJQYW5nZW5kZXJcIixcIkFnZW5kZXJcIixcIlBvbHlnZW5kZXJcIixcIkdlbmRlcmZsdWlkXCIsXCJHZW5kZXJxdWVlclwiLFwiUXVlZXJcIixcIldvbWFuXCJdLCRzY29wZS5kYXRlT3B0aW9ucz17bWF4RGF0ZTpuZXcgRGF0ZSxtaW5EYXRlOm5ldyBEYXRlKDE5MDAsMSwxKSxpbml0RGF0ZTpuZXcgRGF0ZSgyZTMsMSwxKSxkYXRlcGlja2VyTW9kZTpcInllYXJcIn0sJHNjb3BlLmdlbmRlcj1mdW5jdGlvbihhcnJheSxwZXJjZW50YWdlKXtyZXR1cm4gYXJyYXlbTWF0aC5yb3VuZChwZXJjZW50YWdlLzIwMCooYXJyYXkubGVuZ3RoLTEpKV19LCRzY29wZS5zdGFydFNsaWRlcj1mdW5jdGlvbigpe30sJHNjb3BlLmRyYWdTbGlkZXI9ZnVuY3Rpb24oZXZlbnQsdWksdHlwZSl7JHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlclt0eXBlXT1NYXRoLnJvdW5kKCgkKFwiI1wiK3R5cGUrXCItaW5kaWNhdG9yXCIpLm9mZnNldCgpLmxlZnQtJChcIiNcIit0eXBlKS5vZmZzZXQoKS5sZWZ0KS8oJChcIiNcIit0eXBlKS53aWR0aCgpLSQoXCIjXCIrdHlwZStcIi1pbmRpY2F0b3JcIikud2lkdGgoKSkqMjAwKSwkc2NvcGUuJGFwcGx5KCl9LCRzY29wZS5zdG9wU2xpZGVyPWZ1bmN0aW9uKCl7fSwkc2NvcGUudXNlcm5hbWVUb2dnbGU9ITAsJHNjb3BlLnBhc3N3b3JkVG9nZ2xlPSEwLCRzY29wZS50b2dnbGVVc2VybmFtZT1mdW5jdGlvbigpeyRzY29wZS51c2VybmFtZVRvZ2dsZT0hJHNjb3BlLnVzZXJuYW1lVG9nZ2xlLCRzY29wZS5uZXdVc2VybmFtZT0kc2NvcGUuY3VycmVudFVzZXIudXNlcm5hbWV9LCRzY29wZS50b2dnbGVQYXNzd29yZD1mdW5jdGlvbigpeyRzY29wZS5uZXdQYXNzd29yZD1udWxsLCRzY29wZS5jb25maXJtUGFzc3dvcmQ9bnVsbCwkc2NvcGUucGFzc3dvcmRUb2dnbGU9ISRzY29wZS5wYXNzd29yZFRvZ2dsZX0sJHNjb3BlLmNoZWNrUGFzc3dvcmQ9ZnVuY3Rpb24ocGFzc3dvcmQpe2lmKHBhc3N3b3JkKXt2YXIgdXNlcj0kc2NvcGUuY3VycmVudFVzZXIuX2lkO1VzZXJTdmMuY2hlY2tQYXNzd29yZCh1c2VyLHBhc3N3b3JkKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCl9KSwoZnVuY3Rpb24oKXt2YXIgb3JpZ2luYWxCZz0kKFwiLnBhc3N3b3JkXCIpLmNzcyhcImJhY2tncm91bmRDb2xvclwiKTskKFwiLnBhc3N3b3JkXCIpLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjpcIiNGRkI2QzFcIn0sMjAwKS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6b3JpZ2luYWxCZ30sMjAwKX0pKX19LCRzY29wZS5jaGFuZ2VQYXNzd29yZD1mdW5jdGlvbihvbGRQYXNzd29yZCxuZXdQYXNzd29yZCxjb25maXJtUGFzc3dvcmQpe2lmKG5ld1Bhc3N3b3JkKWlmKG5ld1Bhc3N3b3JkPT1jb25maXJtUGFzc3dvcmQpe3ZhciB1c2VyPSRzY29wZS5jdXJyZW50VXNlci5faWQ7VXNlclN2Yy5jaGFuZ2VQYXNzd29yZCh1c2VyLG9sZFBhc3N3b3JkLG5ld1Bhc3N3b3JkKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwicG9wdXBcIix7bWVzc2FnZTpcIlBhc3N3b3JkIENoYW5nZWRcIix0eXBlOlwiYWxlcnQtc3VjY2Vzc1wifSksJHNjb3BlLm9sZFBhc3N3b3JkPW51bGwsJHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCl9KSwoZnVuY3Rpb24oKXskc2NvcGUuJGVtaXQoXCJwb3B1cFwiLHttZXNzYWdlOlwiUGFzc3dvcmQgQ2hhbmdlIEZhaWxlZFwiLHR5cGU6XCJhbGVydC1kYW5nZXJcIn0pfSkpfWVsc2V7dmFyIG9yaWdpbmFsQmc9JChcIi5wYXNzd29yZFwiKS5jc3MoXCJiYWNrZ3JvdW5kQ29sb3JcIik7JChcIi5wYXNzd29yZFwiKS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6XCIjRkZCNkMxXCJ9LDIwMCkuYW5pbWF0ZSh7YmFja2dyb3VuZENvbG9yOm9yaWdpbmFsQmd9LDIwMCl9fSwkc2NvcGUuY2hhbmdlVXNlcm5hbWU9ZnVuY3Rpb24odXNlcm5hbWUpeyRzY29wZS4kZW1pdChcImxvYWRpbmdcIiksVXNlclN2Yy5jaGFuZ2VVc2VybmFtZSgkc2NvcGUuY3VycmVudFVzZXIuX2lkLHVzZXJuYW1lKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwidXBkYXRlXCIscmVzcG9uc2UuZGF0YSl9KSwoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS4kZW1pdChcInBvcHVwXCIse21lc3NhZ2U6dXNlcm5hbWUrXCIgYWxyZWFkeSBpbiB1c2VcIix0eXBlOlwiYWxlcnQtZGFuZ2VyXCJ9KX0pKX0sJHNjb3BlLnVwZGF0ZVVzZXI9ZnVuY3Rpb24oKXskc2NvcGUuY3VycmVudFVzZXImJigkc2NvcGUuJGVtaXQoXCJsb2FkaW5nXCIpLFVzZXJTdmMudXBkYXRlVXNlcigkc2NvcGUuY3VycmVudFVzZXIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuJGVtaXQoXCJ1cGRhdGVcIixyZXNwb25zZS5kYXRhKX0pKSl9LCRzY29wZS4kd2F0Y2goXCJjdXJyZW50VXNlci5mbGFncy5sZW5ndGhcIiwoZnVuY3Rpb24obGVuZ3RoKXskc2NvcGUudXBkYXRlVXNlcigpfSkpLCRzY29wZS5sb2FkQ291bnRyaWVzPWZ1bmN0aW9uKCRxdWVyeSl7cmV0dXJuW3tuYW1lOlwiQW5kb3JyYVwiLGZsYWc6XCJmbGFnLWFkXCIsdGlkYml0OlwiXCJ9LHtuYW1lOlwiVW5pdGVkIEFyYWIgRW1pcmF0ZXNcIixmbGFnOlwiZmxhZy1hZVwifSx7bmFtZTpcIkFmZ2hhbmlzdGFuXCIsZmxhZzpcImZsYWctYWZcIn0se25hbWU6XCJBbnRpZ3VhIGFuZCBCYXJidWRhXCIsZmxhZzpcImZsYWctYWdcIn0se25hbWU6XCJBbmd1aWxsYVwiLGZsYWc6XCJmbGFnLWFpXCJ9LHtuYW1lOlwiQWxiYW5pYVwiLGZsYWc6XCJmbGFnLWFsXCJ9LHtuYW1lOlwiQXJtZW5pYVwiLGZsYWc6XCJmbGFnLWFtXCJ9LHtuYW1lOlwiQW5nb2xhXCIsZmxhZzpcImZsYWctYW9cIn0se25hbWU6XCJBbnRhcmN0aWNhXCIsZmxhZzpcImZsYWctYXFcIn0se25hbWU6XCJBcmdlbnRpbmFcIixmbGFnOlwiZmxhZy1hclwifSx7bmFtZTpcIkFtZXJpY2FuIFNvbW9hXCIsZmxhZzpcImZsYWctYXNcIn0se25hbWU6XCJBdXN0cmlhXCIsZmxhZzpcImZsYWctYXRcIn0se25hbWU6XCJBdXN0cmFsaWFcIixmbGFnOlwiZmxhZy1hdVwifSx7bmFtZTpcIkFydWJhXCIsZmxhZzpcImZsYWctYXdcIn0se25hbWU6XCLDhWxhbmQgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWF4XCJ9LHtuYW1lOlwiQXplcmJhaWphblwiLGZsYWc6XCJmbGFnLWF6XCJ9LHtuYW1lOlwiQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYVwiLGZsYWc6XCJmbGFnLWJhXCJ9LHtuYW1lOlwiQmFyYmFkb3NcIixmbGFnOlwiZmxhZy1iYlwifSx7bmFtZTpcIkJhbmdsYWRlc2hcIixmbGFnOlwiZmxhZy1iZFwifSx7bmFtZTpcIkJlbGdpdW1cIixmbGFnOlwiZmxhZy1iZVwifSx7bmFtZTpcIkJ1cmtpbmEgRmFzb1wiLGZsYWc6XCJmbGFnLWJmXCJ9LHtuYW1lOlwiQnVsZ2FyaWFcIixmbGFnOlwiZmxhZy1iZ1wifSx7bmFtZTpcIkJhaHJhaW5cIixmbGFnOlwiZmxhZy1iaFwifSx7bmFtZTpcIkJ1cnVuZGlcIixmbGFnOlwiZmxhZy1iaVwifSx7bmFtZTpcIkJlbmluXCIsZmxhZzpcImZsYWctYmpcIn0se25hbWU6XCJTYWludCBCYXJ0aMOpbGVteVwiLGZsYWc6XCJmbGFnLWJsXCJ9LHtuYW1lOlwiQmVybXVkYVwiLGZsYWc6XCJmbGFnLWJtXCJ9LHtuYW1lOlwiQnJ1bmVpIFwiLGZsYWc6XCJmbGFnLWJuXCJ9LHtuYW1lOlwiQm9saXZpYSwgUGx1cmluYXRpb25hbCBTdGF0ZSBvZlwiLGZsYWc6XCJmbGFnLWJvXCJ9LHtuYW1lOlwiQm9uYWlyZSwgU2ludCBFdXN0YXRpdXMgYW5kIFNhYmFcIixmbGFnOlwiZmxhZy1icVwifSx7bmFtZTpcIkJyYXppbFwiLGZsYWc6XCJmbGFnLWJyXCJ9LHtuYW1lOlwiQmFoYW1hc1wiLGZsYWc6XCJmbGFnLWJzXCJ9LHtuYW1lOlwiQmh1dGFuXCIsZmxhZzpcImZsYWctYnRcIn0se25hbWU6XCJCb3V2ZXQgSXNsYW5kXCIsZmxhZzpcImZsYWctYnZcIn0se25hbWU6XCJCb3Rzd2FuYVwiLGZsYWc6XCJmbGFnLWJ3XCJ9LHtuYW1lOlwiQmVsYXJ1c1wiLGZsYWc6XCJmbGFnLWJ5XCJ9LHtuYW1lOlwiQmVsaXplXCIsZmxhZzpcImZsYWctYnpcIn0se25hbWU6XCJDYW5hZGFcIixmbGFnOlwiZmxhZy1jYVwifSx7bmFtZTpcIkNvY29zIChLZWVsaW5nKSBJc2xhbmRzXCIsZmxhZzpcImZsYWctY2NcIn0se25hbWU6XCJDb25nbywgdGhlIERlbW9jcmF0aWMgUmVwdWJsaWMgb2YgdGhlXCIsZmxhZzpcImZsYWctY2RcIn0se25hbWU6XCJDZW50cmFsIEFmcmljYW4gUmVwdWJsaWNcIixmbGFnOlwiZmxhZy1jZlwifSx7bmFtZTpcIkNvbmdvXCIsZmxhZzpcImZsYWctY2dcIn0se25hbWU6XCJTd2l0emVybGFuZFwiLGZsYWc6XCJmbGFnLWNoXCJ9LHtuYW1lOlwiQ8O0dGUgZCdJdm9pcmVcIixmbGFnOlwiZmxhZy1jaVwifSx7bmFtZTpcIkNvb2sgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWNrXCJ9LHtuYW1lOlwiQ2hpbGVcIixmbGFnOlwiZmxhZy1jbFwifSx7bmFtZTpcIkNhbWVyb29uXCIsZmxhZzpcImZsYWctY21cIn0se25hbWU6XCJDaGluYVwiLGZsYWc6XCJmbGFnLWNuXCJ9LHtuYW1lOlwiQ29sb21iaWFcIixmbGFnOlwiZmxhZy1jb1wifSx7bmFtZTpcIkNvc3RhIFJpY2FcIixmbGFnOlwiZmxhZy1jclwifSx7bmFtZTpcIkN1YmFcIixmbGFnOlwiZmxhZy1jdVwifSx7bmFtZTpcIkNhYm8gVmVyZGVcIixmbGFnOlwiZmxhZy1jdlwifSx7bmFtZTpcIkN1cmHDp2FvXCIsZmxhZzpcImZsYWctY3dcIn0se25hbWU6XCJDaHJpc3RtYXMgSXNsYW5kXCIsZmxhZzpcImZsYWctY3hcIn0se25hbWU6XCJDeXBydXNcIixmbGFnOlwiZmxhZy1jeVwifSx7bmFtZTpcIkN6ZWNoIFJlcHVibGljXCIsZmxhZzpcImZsYWctY3pcIn0se25hbWU6XCJHZXJtYW55XCIsZmxhZzpcImZsYWctZGVcIn0se25hbWU6XCJEamlib3V0aVwiLGZsYWc6XCJmbGFnLWRqXCJ9LHtuYW1lOlwiRGVubWFya1wiLGZsYWc6XCJmbGFnLWRrXCJ9LHtuYW1lOlwiRG9taW5pY2FcIixmbGFnOlwiZmxhZy1kbVwifSx7bmFtZTpcIkRvbWluaWNhbiBSZXB1YmxpY1wiLGZsYWc6XCJmbGFnLWRvXCJ9LHtuYW1lOlwiQWxnZXJpYVwiLGZsYWc6XCJmbGFnLWR6XCJ9LHtuYW1lOlwiRWN1YWRvclwiLGZsYWc6XCJmbGFnLWVjXCJ9LHtuYW1lOlwiRXN0b25pYVwiLGZsYWc6XCJmbGFnLWVlXCJ9LHtuYW1lOlwiRWd5cHRcIixmbGFnOlwiZmxhZy1lZ1wifSx7bmFtZTpcIldlc3Rlcm4gU2FoYXJhXCIsZmxhZzpcImZsYWctZWhcIn0se25hbWU6XCJFcml0cmVhXCIsZmxhZzpcImZsYWctZXJcIn0se25hbWU6XCJTcGFpblwiLGZsYWc6XCJmbGFnLWVzXCJ9LHtuYW1lOlwiRXRoaW9waWFcIixmbGFnOlwiZmxhZy1ldFwifSx7bmFtZTpcIkZpbmxhbmRcIixmbGFnOlwiZmxhZy1maVwifSx7bmFtZTpcIkZpamlcIixmbGFnOlwiZmxhZy1malwifSx7bmFtZTpcIkZhbGtsYW5kIElzbGFuZHMgKE1hbHZpbmFzKVwiLGZsYWc6XCJmbGFnLWZrXCJ9LHtuYW1lOlwiTWljcm9uZXNpYSwgRmVkZXJhdGVkIFN0YXRlcyBvZlwiLGZsYWc6XCJmbGFnLWZtXCJ9LHtuYW1lOlwiRmFyb2UgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWZvXCJ9LHtuYW1lOlwiRnJhbmNlXCIsZmxhZzpcImZsYWctZnJcIn0se25hbWU6XCJHYWJvblwiLGZsYWc6XCJmbGFnLWdhXCJ9LHtuYW1lOlwiVW5pdGVkIEtpbmdkb20gb2YgR3JlYXQgQnJpdGFpbiBhbmQgTm9ydGhlcm4gSXJlbGFuZFwiLGZsYWc6XCJmbGFnLWdiXCJ9LHtuYW1lOlwiR3JlbmFkYVwiLGZsYWc6XCJmbGFnLWdkXCJ9LHtuYW1lOlwiR2VvcmdpYVwiLGZsYWc6XCJmbGFnLWdlXCJ9LHtuYW1lOlwiRnJlbmNoIEd1aWFuYVwiLGZsYWc6XCJmbGFnLWdmXCJ9LHtuYW1lOlwiR3Vlcm5zZXlcIixmbGFnOlwiZmxhZy1nZ1wifSx7bmFtZTpcIkdoYW5hXCIsZmxhZzpcImZsYWctZ2hcIn0se25hbWU6XCJHaWJyYWx0YXJcIixmbGFnOlwiZmxhZy1naVwifSx7bmFtZTpcIkdyZWVubGFuZFwiLGZsYWc6XCJmbGFnLWdsXCJ9LHtuYW1lOlwiR2FtYmlhXCIsZmxhZzpcImZsYWctZ21cIn0se25hbWU6XCJHdWluZWFcIixmbGFnOlwiZmxhZy1nblwifSx7bmFtZTpcIkd1YWRlbG91cGVcIixmbGFnOlwiZmxhZy1ncFwifSx7bmFtZTpcIkVxdWF0b3JpYWwgR3VpbmVhXCIsZmxhZzpcImZsYWctZ3FcIn0se25hbWU6XCJHcmVlY2VcIixmbGFnOlwiZmxhZy1nclwifSx7bmFtZTpcIlNvdXRoIEdlb3JnaWEgYW5kIHRoZSBTb3V0aCBTYW5kd2ljaCBJc2xhbmRzXCIsZmxhZzpcImZsYWctZ3NcIn0se25hbWU6XCJHdWF0ZW1hbGFcIixmbGFnOlwiZmxhZy1ndFwifSx7bmFtZTpcIkd1YW1cIixmbGFnOlwiZmxhZy1ndVwifSx7bmFtZTpcIkd1aW5lYS1CaXNzYXVcIixmbGFnOlwiZmxhZy1nd1wifSx7bmFtZTpcIkd1eWFuYVwiLGZsYWc6XCJmbGFnLWd5XCJ9LHtuYW1lOlwiSG9uZyBLb25nXCIsZmxhZzpcImZsYWctaGtcIn0se25hbWU6XCJIZWFyZCBJc2xhbmQgYW5kIE1jRG9uYWxkIElzbGFuZHNcIixmbGFnOlwiZmxhZy1obVwifSx7bmFtZTpcIkhvbmR1cmFzXCIsZmxhZzpcImZsYWctaG5cIn0se25hbWU6XCJDcm9hdGlhXCIsZmxhZzpcImZsYWctaHJcIn0se25hbWU6XCJIYWl0aVwiLGZsYWc6XCJmbGFnLWh0XCJ9LHtuYW1lOlwiSHVuZ2FyeVwiLGZsYWc6XCJmbGFnLWh1XCJ9LHtuYW1lOlwiSW5kb25lc2lhXCIsZmxhZzpcImZsYWctaWRcIn0se25hbWU6XCJJcmVsYW5kXCIsZmxhZzpcImZsYWctaWVcIn0se25hbWU6XCJJc3JhZWxcIixmbGFnOlwiZmxhZy1pbFwifSx7bmFtZTpcIklzbGUgb2YgTWFuXCIsZmxhZzpcImZsYWctaW1cIn0se25hbWU6XCJJbmRpYVwiLGZsYWc6XCJmbGFnLWluXCJ9LHtuYW1lOlwiQnJpdGlzaCBJbmRpYW4gT2NlYW4gVGVycml0b3J5XCIsZmxhZzpcImZsYWctaW9cIn0se25hbWU6XCJJcmFxXCIsZmxhZzpcImZsYWctaXFcIn0se25hbWU6XCJJcmFuLCBJc2xhbWljIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWctaXJcIn0se25hbWU6XCJJY2VsYW5kXCIsZmxhZzpcImZsYWctaXNcIn0se25hbWU6XCJJdGFseVwiLGZsYWc6XCJmbGFnLWl0XCJ9LHtuYW1lOlwiSmVyc2V5XCIsZmxhZzpcImZsYWctamVcIn0se25hbWU6XCJKYW1haWNhXCIsZmxhZzpcImZsYWctam1cIn0se25hbWU6XCJKb3JkYW5cIixmbGFnOlwiZmxhZy1qb1wifSx7bmFtZTpcIkphcGFuXCIsZmxhZzpcImZsYWctanBcIn0se25hbWU6XCJLZW55YVwiLGZsYWc6XCJmbGFnLWtlXCJ9LHtuYW1lOlwiS3lyZ3l6c3RhblwiLGZsYWc6XCJmbGFnLWtnXCJ9LHtuYW1lOlwiQ2FtYm9kaWFcIixmbGFnOlwiZmxhZy1raFwifSx7bmFtZTpcIktpcmliYXRpXCIsZmxhZzpcImZsYWcta2lcIn0se25hbWU6XCJDb21vcm9zXCIsZmxhZzpcImZsYWcta21cIn0se25hbWU6XCJTYWludCBLaXR0cyBhbmQgTmV2aXNcIixmbGFnOlwiZmxhZy1rblwifSx7bmFtZTpcIktvcmVhLCBEZW1vY3JhdGljIFBlb3BsZSdzIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWcta3BcIn0se25hbWU6XCJLb3JlYSwgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1rclwifSx7bmFtZTpcIkt1d2FpdFwiLGZsYWc6XCJmbGFnLWt3XCJ9LHtuYW1lOlwiQ2F5bWFuIElzbGFuZHNcIixmbGFnOlwiZmxhZy1reVwifSx7bmFtZTpcIkthemFraHN0YW5cIixmbGFnOlwiZmxhZy1relwifSx7bmFtZTpcIkxhbyBQZW9wbGUncyBEZW1vY3JhdGljIFJlcHVibGljXCIsZmxhZzpcImZsYWctbGFcIn0se25hbWU6XCJMZWJhbm9uXCIsZmxhZzpcImZsYWctbGJcIn0se25hbWU6XCJTYWludCBMdWNpYVwiLGZsYWc6XCJmbGFnLWxjXCJ9LHtuYW1lOlwiTGllY2h0ZW5zdGVpblwiLGZsYWc6XCJmbGFnLWxpXCJ9LHtuYW1lOlwiU3JpIExhbmthXCIsZmxhZzpcImZsYWctbGtcIn0se25hbWU6XCJMaWJlcmlhXCIsZmxhZzpcImZsYWctbHJcIn0se25hbWU6XCJMZXNvdGhvXCIsZmxhZzpcImZsYWctbHNcIn0se25hbWU6XCJMaXRodWFuaWFcIixmbGFnOlwiZmxhZy1sdFwifSx7bmFtZTpcIkx1eGVtYm91cmdcIixmbGFnOlwiZmxhZy1sdVwifSx7bmFtZTpcIkxhdHZpYVwiLGZsYWc6XCJmbGFnLWx2XCJ9LHtuYW1lOlwiTGlieWFcIixmbGFnOlwiZmxhZy1seVwifSx7bmFtZTpcIk1vcm9jY29cIixmbGFnOlwiZmxhZy1tYVwifSx7bmFtZTpcIk1vbmFjb1wiLGZsYWc6XCJmbGFnLW1jXCJ9LHtuYW1lOlwiTW9sZG92YSwgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1tZFwifSx7bmFtZTpcIk1vbnRlbmVncm9cIixmbGFnOlwiZmxhZy1tZVwifSx7bmFtZTpcIlNhaW50IE1hcnRpbiAoRnJlbmNoIHBhcnQpXCIsZmxhZzpcImZsYWctbWZcIn0se25hbWU6XCJNYWRhZ2FzY2FyXCIsZmxhZzpcImZsYWctbWdcIn0se25hbWU6XCJNYXJzaGFsbCBJc2xhbmRzXCIsZmxhZzpcImZsYWctbWhcIn0se25hbWU6XCJNYWNlZG9uaWEsIHRoZSBmb3JtZXIgWXVnb3NsYXYgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1ta1wifSx7bmFtZTpcIk1hbGlcIixmbGFnOlwiZmxhZy1tbFwifSx7bmFtZTpcIk15YW5tYXJcIixmbGFnOlwiZmxhZy1tbVwifSx7bmFtZTpcIk1vbmdvbGlhXCIsZmxhZzpcImZsYWctbW5cIn0se25hbWU6XCJNYWNhb1wiLGZsYWc6XCJmbGFnLW1vXCJ9LHtuYW1lOlwiTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzXCIsZmxhZzpcImZsYWctbXBcIn0se25hbWU6XCJNYXJ0aW5pcXVlXCIsZmxhZzpcImZsYWctbXFcIn0se25hbWU6XCJNYXVyaXRhbmlhXCIsZmxhZzpcImZsYWctbXJcIn0se25hbWU6XCJNb250c2VycmF0XCIsZmxhZzpcImZsYWctbXNcIn0se25hbWU6XCJNYWx0YVwiLGZsYWc6XCJmbGFnLW10XCJ9LHtuYW1lOlwiTWF1cml0aXVzXCIsZmxhZzpcImZsYWctbXVcIn0se25hbWU6XCJNYWxkaXZlc1wiLGZsYWc6XCJmbGFnLW12XCJ9LHtuYW1lOlwiTWFsYXdpXCIsZmxhZzpcImZsYWctbXdcIn0se25hbWU6XCJNZXhpY29cIixmbGFnOlwiZmxhZy1teFwifSx7bmFtZTpcIk1hbGF5c2lhXCIsZmxhZzpcImZsYWctbXlcIn0se25hbWU6XCJNb3phbWJpcXVlXCIsZmxhZzpcImZsYWctbXpcIn0se25hbWU6XCJOYW1pYmlhXCIsZmxhZzpcImZsYWctbmFcIn0se25hbWU6XCJOZXcgQ2FsZWRvbmlhXCIsZmxhZzpcImZsYWctbmNcIn0se25hbWU6XCJOaWdlclwiLGZsYWc6XCJmbGFnLW5lXCJ9LHtuYW1lOlwiTm9yZm9sayBJc2xhbmRcIixmbGFnOlwiZmxhZy1uZlwifSx7bmFtZTpcIk5pZ2VyaWFcIixmbGFnOlwiZmxhZy1uZ1wifSx7bmFtZTpcIk5pY2FyYWd1YVwiLGZsYWc6XCJmbGFnLW5pXCJ9LHtuYW1lOlwiTmV0aGVybGFuZHNcIixmbGFnOlwiZmxhZy1ubFwifSx7bmFtZTpcIk5vcndheVwiLGZsYWc6XCJmbGFnLW5vXCJ9LHtuYW1lOlwiTmVwYWxcIixmbGFnOlwiZmxhZy1ucFwifSx7bmFtZTpcIk5hdXJ1XCIsZmxhZzpcImZsYWctbnJcIn0se25hbWU6XCJOaXVlXCIsZmxhZzpcImZsYWctbnVcIn0se25hbWU6XCJOZXcgWmVhbGFuZFwiLGZsYWc6XCJmbGFnLW56XCJ9LHtuYW1lOlwiT21hblwiLGZsYWc6XCJmbGFnLW9tXCJ9LHtuYW1lOlwiUGFuYW1hXCIsZmxhZzpcImZsYWctcGFcIn0se25hbWU6XCJQZXJ1XCIsZmxhZzpcImZsYWctcGVcIn0se25hbWU6XCJGcmVuY2ggUG9seW5lc2lhXCIsZmxhZzpcImZsYWctcGZcIn0se25hbWU6XCJQYXB1YSBOZXcgR3VpbmVhXCIsZmxhZzpcImZsYWctcGdcIn0se25hbWU6XCJQaGlsaXBwaW5lc1wiLGZsYWc6XCJmbGFnLXBoXCJ9LHtuYW1lOlwiUGFraXN0YW5cIixmbGFnOlwiZmxhZy1wa1wifSx7bmFtZTpcIlBvbGFuZFwiLGZsYWc6XCJmbGFnLXBsXCJ9LHtuYW1lOlwiU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvblwiLGZsYWc6XCJmbGFnLXBtXCJ9LHtuYW1lOlwiUGl0Y2Fpcm5cIixmbGFnOlwiZmxhZy1wblwifSx7bmFtZTpcIlB1ZXJ0byBSaWNvXCIsZmxhZzpcImZsYWctcHJcIn0se25hbWU6XCJQYWxlc3RpbmUsIFN0YXRlIG9mXCIsZmxhZzpcImZsYWctcHNcIn0se25hbWU6XCJQb3J0dWdhbFwiLGZsYWc6XCJmbGFnLXB0XCJ9LHtuYW1lOlwiUGFsYXVcIixmbGFnOlwiZmxhZy1wd1wifSx7bmFtZTpcIlBhcmFndWF5XCIsZmxhZzpcImZsYWctcHlcIn0se25hbWU6XCJRYXRhclwiLGZsYWc6XCJmbGFnLXFhXCJ9LHtuYW1lOlwiUsOpdW5pb25cIixmbGFnOlwiZmxhZy1yZVwifSx7bmFtZTpcIlJvbWFuaWFcIixmbGFnOlwiZmxhZy1yb1wifSx7bmFtZTpcIlNlcmJpYVwiLGZsYWc6XCJmbGFnLXJzXCJ9LHtuYW1lOlwiUnVzc2lhbiBGZWRlcmF0aW9uXCIsZmxhZzpcImZsYWctcnVcIn0se25hbWU6XCJSd2FuZGFcIixmbGFnOlwiZmxhZy1yd1wifSx7bmFtZTpcIlNhdWRpIEFyYWJpYVwiLGZsYWc6XCJmbGFnLXNhXCJ9LHtuYW1lOlwiU29sb21vbiBJc2xhbmRzXCIsZmxhZzpcImZsYWctc2JcIn0se25hbWU6XCJTZXljaGVsbGVzXCIsZmxhZzpcImZsYWctc2NcIn0se25hbWU6XCJTdWRhblwiLGZsYWc6XCJmbGFnLXNkXCJ9LHtuYW1lOlwiU3dlZGVuXCIsZmxhZzpcImZsYWctc2VcIn0se25hbWU6XCJTaW5nYXBvcmVcIixmbGFnOlwiZmxhZy1zZ1wifSx7bmFtZTpcIlNhaW50IEhlbGVuYSwgQXNjZW5zaW9uIGFuZCBUcmlzdGFuIGRhIEN1bmhhXCIsZmxhZzpcImZsYWctc2hcIn0se25hbWU6XCJTbG92ZW5pYVwiLGZsYWc6XCJmbGFnLXNpXCJ9LHtuYW1lOlwiU3ZhbGJhcmQgYW5kIEphbiBNYXllblwiLGZsYWc6XCJmbGFnLXNqXCJ9LHtuYW1lOlwiU2xvdmFraWFcIixmbGFnOlwiZmxhZy1za1wifSx7bmFtZTpcIlNpZXJyYSBMZW9uZVwiLGZsYWc6XCJmbGFnLXNsXCJ9LHtuYW1lOlwiU2FuIE1hcmlub1wiLGZsYWc6XCJmbGFnLXNtXCJ9LHtuYW1lOlwiU2VuZWdhbFwiLGZsYWc6XCJmbGFnLXNuXCJ9LHtuYW1lOlwiU29tYWxpYVwiLGZsYWc6XCJmbGFnLXNvXCJ9LHtuYW1lOlwiU3VyaW5hbWVcIixmbGFnOlwiZmxhZy1zclwifSx7bmFtZTpcIlNvdXRoIFN1ZGFuXCIsZmxhZzpcImZsYWctc3NcIn0se25hbWU6XCJTYW8gVG9tZSBhbmQgUHJpbmNpcGVcIixmbGFnOlwiZmxhZy1zdFwifSx7bmFtZTpcIkVsIFNhbHZhZG9yXCIsZmxhZzpcImZsYWctc3ZcIn0se25hbWU6XCJTaW50IE1hYXJ0ZW4gKER1dGNoIHBhcnQpXCIsZmxhZzpcImZsYWctc3hcIn0se25hbWU6XCJTeXJpYW4gQXJhYiBSZXB1YmxpY1wiLGZsYWc6XCJmbGFnLXN5XCJ9LHtuYW1lOlwiU3dhemlsYW5kXCIsZmxhZzpcImZsYWctc3pcIn0se25hbWU6XCJUdXJrcyBhbmQgQ2FpY29zIElzbGFuZHNcIixmbGFnOlwiZmxhZy10Y1wifSx7bmFtZTpcIkNoYWRcIixmbGFnOlwiZmxhZy10ZFwifSx7bmFtZTpcIkZyZW5jaCBTb3V0aGVybiBUZXJyaXRvcmllc1wiLGZsYWc6XCJmbGFnLXRmXCJ9LHtuYW1lOlwiVG9nb1wiLGZsYWc6XCJmbGFnLXRnXCJ9LHtuYW1lOlwiVGhhaWxhbmRcIixmbGFnOlwiZmxhZy10aFwifSx7bmFtZTpcIlRhamlraXN0YW5cIixmbGFnOlwiZmxhZy10alwifSx7bmFtZTpcIlRva2VsYXVcIixmbGFnOlwiZmxhZy10a1wifSx7bmFtZTpcIlRpbW9yLUxlc3RlXCIsZmxhZzpcImZsYWctdGxcIn0se25hbWU6XCJUdXJrbWVuaXN0YW5cIixmbGFnOlwiZmxhZy10bVwifSx7bmFtZTpcIlR1bmlzaWFcIixmbGFnOlwiZmxhZy10blwifSx7bmFtZTpcIlRvbmdhXCIsZmxhZzpcImZsYWctdG9cIn0se25hbWU6XCJUdXJrZXlcIixmbGFnOlwiZmxhZy10clwifSx7bmFtZTpcIlRyaW5pZGFkIGFuZCBUb2JhZ29cIixmbGFnOlwiZmxhZy10dFwifSx7bmFtZTpcIlR1dmFsdVwiLGZsYWc6XCJmbGFnLXR2XCJ9LHtuYW1lOlwiVGFpd2FuLCBQcm92aW5jZSBvZiBDaGluYVwiLGZsYWc6XCJmbGFnLXR3XCJ9LHtuYW1lOlwiVGFuemFuaWEsIFVuaXRlZCBSZXB1YmxpYyBvZlwiLGZsYWc6XCJmbGFnLXR6XCJ9LHtuYW1lOlwiVWtyYWluZVwiLGZsYWc6XCJmbGFnLXVhXCJ9LHtuYW1lOlwiVWdhbmRhXCIsZmxhZzpcImZsYWctdWdcIn0se25hbWU6XCJVbml0ZWQgU3RhdGVzIE1pbm9yIE91dGx5aW5nIElzbGFuZHNcIixmbGFnOlwiZmxhZy11bVwifSx7bmFtZTpcIlVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYVwiLGZsYWc6XCJmbGFnLXVzXCJ9LHtuYW1lOlwiVXJ1Z3VheVwiLGZsYWc6XCJmbGFnLXV5XCJ9LHtuYW1lOlwiVXpiZWtpc3RhblwiLGZsYWc6XCJmbGFnLXV6XCJ9LHtuYW1lOlwiSG9seSBTZWVcIixmbGFnOlwiZmxhZy12YVwifSx7bmFtZTpcIlNhaW50IFZpbmNlbnQgYW5kIHRoZSBHcmVuYWRpbmVzXCIsZmxhZzpcImZsYWctdmNcIn0se25hbWU6XCJWZW5lenVlbGEsIEJvbGl2YXJpYW4gUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy12ZVwifSx7bmFtZTpcIlZpcmdpbiBJc2xhbmRzLCBCcml0aXNoXCIsZmxhZzpcImZsYWctdmdcIn0se25hbWU6XCJWaXJnaW4gSXNsYW5kcywgVS5TLlwiLGZsYWc6XCJmbGFnLXZpXCJ9LHtuYW1lOlwiVmlldCBOYW1cIixmbGFnOlwiZmxhZy12blwifSx7bmFtZTpcIlZhbnVhdHVcIixmbGFnOlwiZmxhZy12dVwifSx7bmFtZTpcIldhbGxpcyBhbmQgRnV0dW5hXCIsZmxhZzpcImZsYWctd2ZcIn0se25hbWU6XCJTYW1vYVwiLGZsYWc6XCJmbGFnLXdzXCJ9LHtuYW1lOlwiWWVtZW5cIixmbGFnOlwiZmxhZy15ZVwifSx7bmFtZTpcIk1heW90dGVcIixmbGFnOlwiZmxhZy15dFwifSx7bmFtZTpcIlNvdXRoIEFmcmljYVwiLGZsYWc6XCJmbGFnLXphXCJ9LHtuYW1lOlwiWmFtYmlhXCIsZmxhZzpcImZsYWctem1cIn0se25hbWU6XCJaaW1iYWJ3ZVwiLGZsYWc6XCJmbGFnLXp3XCJ9XS5maWx0ZXIoKGZ1bmN0aW9uKGNvdW50cnkpe3JldHVybi0xIT1jb3VudHJ5Lm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCRxdWVyeS50b0xvd2VyQ2FzZSgpKX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlNraWxsc0N0cmxcIixbXCIkc2NvcGVcIixcIiR3aW5kb3dcIixmdW5jdGlvbigkc2NvcGUsJHdpbmRvdyl7JHNjb3BlLnNlbGVjdGVkU2tpbGw9MCwkc2NvcGUuc2tpbGxzVmlzaWJsZT0hMSwkc2NvcGUubGFiZWxzPVtcIkRvd25sb2FkIFNhbGVzXCIsXCJJbi1TdG9yZSBTYWxlc1wiLFwiTWFpbC1PcmRlciBTYWxlc1wiXSwkc2NvcGUuZGF0YT1bMzAwLDUwMCwxMDBdLCQuZ2V0SlNPTihcIi9za2lsbHMuanNvblwiLChmdW5jdGlvbihkYXRhKXskc2NvcGUuc2tpbGxzPWRhdGEuZmlsdGVyKChmdW5jdGlvbihza2lsbCl7cmV0dXJuIHNraWxsLmVuYWJsZWR9KSksJHNjb3BlLnNldFNlbGVjdGVkU2tpbGw9ZnVuY3Rpb24oc2tpbGwpeyRzY29wZS5zZWxlY3RlZFNraWxsPXNraWxsLCRzY29wZS5zZWxlY3RlZFNraWxsLmNoYXJ0T3B0aW9ucz17Y3V0b3V0UGVyY2VudGFnZTo4MCxjaXJjdW1mZXJlbmNlOjIqTWF0aC5QSSxtYWludGFpbkFzcGVjdFJhdGlvOiEwLHRvb2x0aXBzOntlbmFibGVkOiExfX0sJHNjb3BlLnNlbGVjdGVkU2tpbGwuY2hhcnRTdHlsZT17XCJiYWNrZ3JvdW5kLWltYWdlXCI6XCJ1cmwoL3NraWxscy9cIiskc2NvcGUuc2VsZWN0ZWRTa2lsbC5pbWFnZStcIilcIixcImJhY2tncm91bmQtcmVwZWF0XCI6XCJuby1yZXBlYXRcIixcImJhY2tncm91bmQtc2l6ZVwiOlwiNjAlXCIsXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6XCI1MCUgNTAlXCJ9fSwkc2NvcGUuc2V0U2VsZWN0ZWRTa2lsbCgkc2NvcGUuc2tpbGxzWzBdKSwkc2NvcGUuJGFwcGx5KCl9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlRlblRoaW5nc0N0cmxcIixbXCIkc2NvcGVcIixcIkJvdHNTdmNcIixmdW5jdGlvbigkc2NvcGUsQm90c1N2Yyl7ZnVuY3Rpb24gZmxhc2goZWxlbWVudCl7Y29uc3QgY29sb3I9JChlbGVtZW50KS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIpOyQoZWxlbWVudCkuYW5pbWF0ZSh7YmFja2dyb3VuZENvbG9yOlwiI0ZBODA3MlwifSwxMDAsKCk9PnskKGVsZW1lbnQpLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjpjb2xvcn0sMTAwKX0pfSRzY29wZS5jYXRlZ29yaWVzPVtcIk11c2ljXCIsXCJUZWxldmlzaW9uXCIsXCJNb3ZpZXNcIixcIkVudGVydGFpbm1lbnRcIixcIkdlb2dyYXBoeVwiLFwiSGlzdG9yeVwiLFwiU2NpZW5jZVwiLFwiR2FtaW5nXCIsXCJTcG9ydHNcIixcIlJlbGlnaW9uXCIsXCJBcnRcIixcIkxpdGVyYXR1cmVcIixcIk1pc2NcIixcIkZ1bm55XCIsXCJGb29kIGFuZCBEcmlua1wiLFwiU29jaWV0eVwiLFwiTmF0dXJlXCIsXCJUZWNobm9sb2d5XCIsXCJMYW5ndWFnZVwiLFwiQnVzaW5lc3NcIixcIkludGVybmV0XCJdLCRzY29wZS5rZXlEb3duPWU9Pntzd2l0Y2goKGU9ZXx8d2luZG93LmV2ZW50KS5rZXlDb2RlKXtjYXNlIDk6JChcIiNuZXctYmx1cmJcIikuaXMoXCI6Zm9jdXNcIikmJnNldFRpbWVvdXQoKCk9Pnskc2NvcGUuYWRkVmFsdWUoKX0sMTAwKTticmVhaztjYXNlIDEzOiQoXCIjbmV3LWJsdXJiXCIpLmlzKFwiOmZvY3VzXCIpPyRzY29wZS5hZGRWYWx1ZSgpOiQoXCIjbmV3LXZhbHVlXCIpLmlzKFwiOmZvY3VzXCIpJiYkKFwiI25ldy1ibHVyYlwiKS5mb2N1cygpfX0sJHNjb3BlLmNhdGVnb3J5RmlsdGVycz0kc2NvcGUuY2F0ZWdvcmllcy5tYXAoY2F0ZWdvcnk9PmNhdGVnb3J5KSwkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzLnB1c2goXCJBbGxcIiksJHNjb3BlLmNhdGVnb3J5RmlsdGVycy5wdXNoKFwiQmxhbmtcIiksJHNjb3BlLmNhdGVnb3J5RmlsdGVyPVwiQWxsXCIsJHNjb3BlLnNlYXJjaE5hbWU9XCJcIiwkc2NvcGUubmV3SXRlbT17fSwkc2NvcGUuc2V0Q2F0ZWdvcnlGaWx0ZXI9Y2F0ZWdvcnk9Pnskc2NvcGUuY2F0ZWdvcnlGaWx0ZXI9Y2F0ZWdvcnl9LCRzY29wZS5zZXRVc2VyRmlsdGVyPXVzZXI9Pnskc2NvcGUudXNlckZpbHRlcj11c2VyfSwkc2NvcGUuZmlsdGVyZWRMaXN0cz0oKT0+JHNjb3BlLmxpc3RzPyRzY29wZS5saXN0cy5maWx0ZXIoKHtjYXRlZ29yeSxjcmVhdG9yfSk9PlwiQWxsXCI9PT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXImJlwiQWxsXCI9PT0kc2NvcGUudXNlckZpbHRlcnx8KFwiQWxsXCIhPT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXImJlwiQWxsXCI9PT0kc2NvcGUudXNlckZpbHRlcj9jYXRlZ29yeT9jYXRlZ29yeT09PSRzY29wZS5jYXRlZ29yeUZpbHRlcjpcIkJsYW5rXCI9PT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXI6XCJBbGxcIj09PSRzY29wZS5jYXRlZ29yeUZpbHRlciYmXCJBbGxcIiE9PSRzY29wZS51c2VyRmlsdGVyP2NyZWF0b3I9PT0kc2NvcGUudXNlckZpbHRlcjpjYXRlZ29yeT9jYXRlZ29yeT09PSRzY29wZS5jYXRlZ29yeUZpbHRlciYmY3JlYXRvcj09PSRzY29wZS51c2VyRmlsdGVyOlwiQmxhbmtcIj09PSRzY29wZS5jYXRlZ29yeUZpbHRlciYmY3JlYXRvcj09PSRzY29wZS51c2VyRmlsdGVyKSkuZmlsdGVyKCh7bmFtZX0pPT4hbmFtZXx8bmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJHNjb3BlLnNlYXJjaE5hbWUudG9Mb3dlckNhc2UoKSk+PTApOltdLCRzY29wZS4kb24oXCJsb2dpblwiLF89Pnskc2NvcGUuZ2V0TGlzdHMoKX0pLCRzY29wZS5zb3J0PXNvcnRCeT0+eyRzY29wZS5zb3J0VmFsdWU9PT1zb3J0Qnk/JHNjb3BlLnNvcnREaXJlY3Rpb249ISRzY29wZS5zb3J0RGlyZWN0aW9uOigkc2NvcGUuc29ydFZhbHVlPXNvcnRCeSwkc2NvcGUuc29ydERpcmVjdGlvbj0hMCksJHNjb3BlLnNvcnRlcj0oJHNjb3BlLnNvcnREaXJlY3Rpb24/XCIrXCI6XCItXCIpKyRzY29wZS5zb3J0VmFsdWV9LCRzY29wZS5zb3J0VmFsdWU9XCJkYXRlXCIsJHNjb3BlLnNvcnREaXJlY3Rpb249ITAsJHNjb3BlLnNvcnRMaXN0PVwidmFsdWVcIiwkc2NvcGUuc29ydChcImRhdGVcIiksJHNjb3BlLmdldENhdGVnb3J5Q291bnQ9Y2F0ZWdvcnk9PiRzY29wZS5saXN0cz8kc2NvcGUubGlzdHMuZmlsdGVyKGxpc3Q9PiEoXCJBbGxcIiE9PWNhdGVnb3J5JiZsaXN0LmNhdGVnb3J5IT09Y2F0ZWdvcnl8fFwiQWxsXCIhPT0kc2NvcGUudXNlckZpbHRlciYmbGlzdC5jcmVhdG9yLnVzZXJuYW1lIT09JHNjb3BlLnVzZXJGaWx0ZXIpKS5sZW5ndGg6MCwkc2NvcGUuZ2V0TGlzdHM9KCk9Pnskc2NvcGUubG9hZGluZz0hMCxCb3RzU3ZjLmdldExpc3RzKCRzY29wZS5jdXJyZW50VXNlcikudGhlbigoe2RhdGF9KT0+eyRzY29wZS5saXN0cz1kYXRhLCRzY29wZS51c2VyRmlsdGVycz17fSwkc2NvcGUudXNlckZpbHRlcnMuQWxsPSRzY29wZS5saXN0cy5sZW5ndGgsJHNjb3BlLnVzZXJGaWx0ZXJzPSRzY29wZS5saXN0cy5zb3J0KChsaXN0MSxsaXN0Mik9Pmxpc3QxLmNyZWF0b3I+bGlzdDIuY3JlYXRvcikucmVkdWNlKCh1c2Vycyx7Y3JlYXRvcn0pPT4odXNlcnNbY3JlYXRvcl18fCh1c2Vyc1tjcmVhdG9yXT0wKSx1c2Vyc1tjcmVhdG9yXSsrLHVzZXJzKSwkc2NvcGUudXNlckZpbHRlcnMpLCRzY29wZS51c2VyQ291bnQ9T2JqZWN0LmtleXMoJHNjb3BlLnVzZXJGaWx0ZXJzKS5sZW5ndGgsJHNjb3BlLnVzZXJGaWx0ZXI9XCJBbGxcIiwkc2NvcGUubG9hZGluZz0hMX0pfSwkc2NvcGUuc2VsZWN0TGlzdD1saXN0PT57Qm90c1N2Yy5nZXRMaXN0KGxpc3QpLnRoZW4oKHtkYXRhfSk9Pnskc2NvcGUuc2VsZWN0ZWRMaXN0PWRhdGF9KX0sJHNjb3BlLnNlbGVjdENhdGVnb3J5PWNhdGVnb3J5PT57JHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yeT1jYXRlZ29yeSwkKFwiI2NhdGVnb3J5LXNlbGVjdFwiKS5oaWRlKCl9LCRzY29wZS5hZGRMaXN0PSgpPT57JHNjb3BlLnNlbGVjdGVkTGlzdD17bmFtZTpcIlwiLGNyZWF0b3I6JHNjb3BlLmN1cnJlbnRVc2VyLl9pZCxkYXRlOm5ldyBEYXRlLHZhbHVlczpbXSxhbnN3ZXJzOjAsaXNEeW5hbWljOiEwLGNhdGVnb3J5OlwiXCJ9fSwkc2NvcGUuYWRkVmFsdWU9KCk9Pnskc2NvcGUubmV3SXRlbS52YWx1ZSYmKF8uc29tZSgkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcyx2YWx1ZT0+dmFsdWU9PSRzY29wZS5uZXdJdGVtLnZhbHVlKT9hbGVydChgJHskc2NvcGUubmV3SXRlbS52YWx1ZX0gaXMgYWxyZWFkeSBpbiB0aGUgbGlzdGApOigkc2NvcGUubmV3SXRlbS5jcmVhdG9yPSRzY29wZS5jdXJyZW50VXNlci5faWQsJHNjb3BlLnNlbGVjdGVkTGlzdC52YWx1ZXMudW5zaGlmdChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KCRzY29wZS5uZXdJdGVtKSkpLCRzY29wZS5zZWxlY3RlZExpc3QuYW5zd2VycysrLCRzY29wZS5uZXdJdGVtLnZhbHVlPVwiXCIsJHNjb3BlLm5ld0l0ZW0uYmx1cmI9XCJcIiwkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcy5sZW5ndGg+PTEwJiYkc2NvcGUuc2VsZWN0ZWRMaXN0Lm5hbWUmJiRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcnkmJiRzY29wZS5zYXZlTGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KSkpLCQoXCIjbmV3LXZhbHVlXCIpLmZvY3VzKCl9LCRzY29wZS5yZXBvcnRMaXN0PWxpc3Q9PntCb3RzU3ZjLnJlcG9ydExpc3QoJHNjb3BlLmN1cnJlbnRVc2VyLGxpc3QpfSwkc2NvcGUuc2F2ZUxpc3Q9bGlzdD0+e2xpc3QudmFsdWVzPWxpc3QudmFsdWVzLmZpbHRlcigoe3ZhbHVlfSk9PnZhbHVlKSxsaXN0LnZhbHVlcy5sZW5ndGg+PTEwJiZsaXN0Lm5hbWUmJmxpc3QuY2F0ZWdvcnk/KCRzY29wZS5zYXZpbmc9ITAsQm90c1N2Yy5zYXZlTGlzdCgkc2NvcGUuY3VycmVudFVzZXIsbGlzdCkudGhlbigoe2RhdGF9KT0+e2lmKCRzY29wZS5zZWxlY3RlZExpc3QuX2lkKXtmb3IobGV0IGk9MDtpPCRzY29wZS5saXN0cy5sZW5ndGg7aSsrKWlmKCRzY29wZS5saXN0c1tpXS5faWQ9PT1kYXRhLl9pZCl7JHNjb3BlLmxpc3RzW2ldPWRhdGE7YnJlYWt9JHNjb3BlLnNlbGVjdExpc3QobGlzdCl9ZWxzZSAkc2NvcGUubGlzdHMudW5zaGlmdChkYXRhKSwkc2NvcGUuc2VsZWN0TGlzdChkYXRhKTskc2NvcGUuc2F2aW5nPSExfSxlcnI9Pntjb25zb2xlLmVycm9yKGVyciksJHNjb3BlLnNhdmluZz0hMX0pKTpsaXN0LnZhbHVlcy5sZW5ndGg8MTA/YWxlcnQoXCJMaXN0cyBtdXN0IGNvbnRhaW4gMTAgb3IgbW9yZSB2YWx1ZXMhXCIpOmxpc3QubmFtZT9mbGFzaChcIiNsaXN0LWNhdGVnb3J5XCIpOmZsYXNoKFwiI2xpc3QtbmFtZVwiKX0sJHNjb3BlLmRlbGV0ZUxpc3Q9bGlzdD0+e2xpc3QuX2lkP2NvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgbGlzdD9cIikmJkJvdHNTdmMuZGVsZXRlTGlzdChsaXN0KS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLmdldExpc3RzKCksJHNjb3BlLnNlbGVjdGVkTGlzdD1udWxsfSk6KCRzY29wZS5saXN0cz0kc2NvcGUubGlzdHMuZmlsdGVyKCh7X2lkfSk9Pl9pZCksJHNjb3BlLnNlbGVjdGVkTGlzdD1udWxsKX0sJHNjb3BlLmxpc3RCdXR0b25DbGFzcz1saXN0PT57Y29uc3QgdmFsdWVzPWxpc3QudmFsdWVzLGJsdXJicz1saXN0LmJsdXJicztyZXR1cm4gdmFsdWVzPT09Ymx1cmJzJiZsaXN0LmRlc2NyaXB0aW9uP1wiYnRuLWRlZmF1bHRcIjowIT09Ymx1cmJzfHxsaXN0LmRlc2NyaXB0aW9uPzA9PT1ibHVyYnMmJmxpc3QuZGVzY3JpcHRpb24/XCJidG4taW5mb1wiOlwiYnRuLXByaW1hcnlcIjpcImJ0bi13YXJuaW5nXCJ9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJXb3Jrb3V0Q3RybFwiLFtcIiRzY29wZVwiLGZ1bmN0aW9uKCRzY29wZSl7JHNjb3BlLnRpbWVSZW1haW5pbmc9MCwkc2NvcGUudGltZUV4ZXJjaXNpbmc9MzAsJHNjb3BlLnRpbWVSZXN0aW5nPTEwLCRzY29wZS5yZXN0PSExO3ZhciBleGVyY2lzaW5nLHNvdW5kcz17b246bmV3IEF1ZGlvKFwib24ud2F2XCIpLG9mZjpuZXcgQXVkaW8oXCJvZmYud2F2XCIpLHN3aXRjaDpuZXcgQXVkaW8oXCJzd2l0Y2gud2F2XCIpfSxleGVyY2lzZXM9W3tuYW1lOlwiSnVtcGluZyBKYWNrc1wiLHNwbGl0OiExfSx7bmFtZTpcIldhbGwgU2l0XCIsc3BsaXQ6ITF9LHtuYW1lOlwiUHVzaC1VcFwiLHNwbGl0OiExfSx7bmFtZTpcIkNydW5jaFwiLHNwbGl0OiExfSx7bmFtZTpcIlN0ZXAtVXBcIixzcGxpdDohMH0se25hbWU6XCJTcXVhdFwiLHNwbGl0OiExfSx7bmFtZTpcIlRyaWNlcHMgRGlwXCIsc3BsaXQ6ITF9LHtuYW1lOlwiUGxhbmtcIixzcGxpdDohMX0se25hbWU6XCJIaWdoIEtuZWVzXCIsc3BsaXQ6ITF9LHtuYW1lOlwiTHVuZ2VcIixzcGxpdDohMX0se25hbWU6XCJQdXNoLVVwIHdpdGggUm90YXRpb25cIixzcGxpdDohMX0se25hbWU6XCJTaWRlIFBsYW5rXCIsc3BsaXQ6ITB9XTskc2NvcGUucHJvZ3Jlc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZXhlcmNpc2VzLmxlbmd0aC1NYXRoLmZsb29yKCRzY29wZS50aW1lUmVtYWluaW5nLygkc2NvcGUudGltZUV4ZXJjaXNpbmcrJHNjb3BlLnRpbWVSZXN0aW5nKSkrXCIvXCIrZXhlcmNpc2VzLmxlbmd0aH0sJHNjb3BlLndvcmtvdXQ9ZnVuY3Rpb24oKXt2YXIgZXhjZXJjaXNlVGltZT0kc2NvcGUudGltZUV4ZXJjaXNpbmcrJHNjb3BlLnRpbWVSZXN0aW5nOyRzY29wZS50aW1lUmVtYWluaW5nPyhjbGVhckludGVydmFsKGV4ZXJjaXNpbmcpLCRzY29wZS50aW1lcj1cIlwiLCRzY29wZS50aW1lUmVtYWluaW5nPTAsJHNjb3BlLnJlc3Q9ITEsJHNjb3BlLmV4ZXJjaXNlPXtuYW1lOlwiXCIsc3BsaXQ6ITF9KTooJHNjb3BlLnRpbWVSZW1haW5pbmc9ZXhlcmNpc2VzLmxlbmd0aCpleGNlcmNpc2VUaW1lLGV4ZXJjaXNpbmc9c2V0SW50ZXJ2YWwoKGZ1bmN0aW9uKCl7aWYoJHNjb3BlLnRpbWVSZW1haW5pbmctLSwwPT09JHNjb3BlLnRpbWVSZW1haW5pbmcpcmV0dXJuICRzY29wZS5leGVyY2lzZT17bmFtZTpcIkZpbmlzaGVkISBDb25ncmF0cyFcIixzcGxpdDohMX0sJHNjb3BlLnRpbWVyPVwiXCIsJHNjb3BlLnRpbWVSZW1haW5pbmc9MCwkc2NvcGUucmVzdD0hMSwkc2NvcGUuJGFwcGx5KCksY2xlYXJJbnRlcnZhbChleGVyY2lzaW5nKTt2YXIgY3VycmVudEV4ZXJjaXNlPU1hdGguZmxvb3IoJHNjb3BlLnRpbWVSZW1haW5pbmcvZXhjZXJjaXNlVGltZSksdGltZXI9JHNjb3BlLnRpbWVSZW1haW5pbmctY3VycmVudEV4ZXJjaXNlKmV4Y2VyY2lzZVRpbWU7JHNjb3BlLnRpbWVyPXRpbWVyPiRzY29wZS50aW1lRXhlcmNpc2luZz90aW1lci0kc2NvcGUudGltZUV4ZXJjaXNpbmc6dGltZXIsdGltZXI+JHNjb3BlLnRpbWVFeGVyY2lzaW5nPyRzY29wZS5yZXN0PSEwOiRzY29wZS5yZXN0PSExLCRzY29wZS5leGVyY2lzZT1leGVyY2lzZXNbZXhlcmNpc2VzLmxlbmd0aC1jdXJyZW50RXhlcmNpc2UtMV0sdGltZXI9PT0kc2NvcGUudGltZUV4ZXJjaXNpbmc/c291bmRzLm9uLnBsYXkoKTowPT09dGltZXI/c291bmRzLm9mZi5wbGF5KCk6JHNjb3BlLmV4ZXJjaXNlLnNwbGl0JiZ0aW1lcj09PU1hdGguZmxvb3IoJHNjb3BlLnRpbWVFeGVyY2lzaW5nLzIpJiZzb3VuZHMuc3dpdGNoLnBsYXkoKSwkc2NvcGUuJGFwcGx5KCl9KSwxZTMpKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZGlyZWN0aXZlKFwiaGVhZFwiLFtcIiRyb290U2NvcGVcIixcIiRzdGF0ZVwiLFwiJGNvbXBpbGVcIixcIiRpbnRlcnBvbGF0ZVwiLGZ1bmN0aW9uKCRyb290U2NvcGUsJHN0YXRlLCRjb21waWxlLCRpbnRlcnBvbGF0ZSl7dmFyIGdldFN0eWxlPWZ1bmN0aW9uKHRlbXBsYXRlU3R5bGVVcmwpe3ZhciBzdHlsZT17aHJlZjp0ZW1wbGF0ZVN0eWxlVXJsLHJlbDpcInN0eWxlc2hlZXRcIn07cmV0dXJuIHN0eWxlLmhyZWYubWF0Y2goL1xcLmxlc3MkLykmJihzdHlsZS5yZWw9XCJzdHlsZXNoZWV0L2xlc3NcIiksc3R5bGV9O3JldHVybntyZXN0cmljdDpcIkVcIixsaW5rOmZ1bmN0aW9uKHNjb3BlLGVsZW0pe3Njb3BlLnRlbXBsYXRlU3R5bGVzPVtdO3ZhciBodG1sPSc8bGluayBuZy1hdHRyLXJlbD1cInt7c3R5bGUucmVsfX1cIiBuZy1yZXBlYXQ9XCJzdHlsZSBpbiB0ZW1wbGF0ZVN0eWxlc1wiIG5nLWhyZWY9XCJ7e3N0eWxlLmhyZWZ9fVwiPic7aHRtbD0oaHRtbD1odG1sLnJlcGxhY2UoL1xce1xcey9nLCRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpKSkucmVwbGFjZSgvXFx9XFx9L2csJGludGVycG9sYXRlLmVuZFN5bWJvbCgpKSxlbGVtLmFwcGVuZCgkY29tcGlsZShodG1sKShzY29wZSkpLCRyb290U2NvcGUuJG9uKFwiJHN0YXRlQ2hhbmdlU3RhcnRcIiwoZnVuY3Rpb24oZXZlbnQsdG9TdGF0ZSx0b1BhcmFtcyxmcm9tU3RhdGUsZnJvbVBhcmFtcyl7c2NvcGUudGVtcGxhdGVTdHlsZXM9ZnVuY3Rpb24oc3RhdGUpe2Zvcih2YXIgc3RhdGVzPXt9O1wiXCIhPT1zdGF0ZS5uYW1lOyl7dmFyIHBhcmVudD0kc3RhdGUuZ2V0KFwiXlwiLHN0YXRlKTtzdGF0ZXNbcGFyZW50Lm5hbWVdfHwoc3RhdGVzW3BhcmVudC5uYW1lXT17fSksc3RhdGUudGVtcGxhdGVTdHlsZVVybCYmKHN0YXRlc1twYXJlbnQubmFtZV1bXCJcIl18fChzdGF0ZXNbcGFyZW50Lm5hbWVdW1wiXCJdPWdldFN0eWxlKHN0YXRlLnRlbXBsYXRlU3R5bGVVcmwpKSksc3RhdGUudmlld3MmJl8uZm9yRWFjaChzdGF0ZS52aWV3cywoZnVuY3Rpb24odmlldyxrZXkpe2lmKHZpZXcudGVtcGxhdGVTdHlsZVVybClyZXR1cm4oa2V5PWtleS5zcGxpdChcIkBcIikpWzFdPyhzdGF0ZXNba2V5WzFdXXx8KHN0YXRlc1trZXlbMV1dPXt9KSx2b2lkKHN0YXRlc1trZXlbMV1dW2tleVswXV18fChzdGF0ZXNba2V5WzFdXVtrZXlbMF1dPWdldFN0eWxlKHZpZXcudGVtcGxhdGVTdHlsZVVybCkpKSk6dm9pZChzdGF0ZXNbcGFyZW50Lm5hbWVdW2tleVswXV09Z2V0U3R5bGUodmlldy50ZW1wbGF0ZVN0eWxlVXJsKSl9KSksc3RhdGU9cGFyZW50fXZhciBmbGF0PVtdO3JldHVybiBfLmZvckVhY2goc3RhdGVzLChmdW5jdGlvbih2aWV3cyl7Xy5mb3JFYWNoKHZpZXdzLChmdW5jdGlvbihzdHlsZSl7Xy5pbmNsdWRlcyhmbGF0LHN0eWxlKXx8ZmxhdC5wdXNoKHN0eWxlKX0pKX0pKSxmbGF0LnJldmVyc2UoKSxmbGF0fSh0b1N0YXRlKX0pKX19fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJCb3RzU3ZjXCIsW1wiJGh0dHBcIixmdW5jdGlvbigkaHR0cCl7dGhpcy5nZXRMaXN0cz1mdW5jdGlvbih1c2VyKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9ib3RzL2xpc3RzXCIpfSx0aGlzLmdldExpc3Q9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvYm90cy9saXN0cy9cIitsaXN0Ll9pZCl9LHRoaXMuc2F2ZUxpc3Q9ZnVuY3Rpb24odXNlcixsaXN0KXtyZXR1cm4gJGh0dHAucHV0KFwiL2FwaS9ib3RzL2xpc3RzXCIse3VzZXIsbGlzdH0pfSx0aGlzLnJlcG9ydExpc3Q9ZnVuY3Rpb24odXNlcixsaXN0KXskaHR0cC5nZXQoXCIvYXBpL2JvdHMvbGlzdHMvXCIrbGlzdC5faWQrXCIvcmVwb3J0L1wiK3VzZXIuX2lkKX0sdGhpcy5kZWxldGVMaXN0PWZ1bmN0aW9uKGxpc3Qpe3JldHVybiAkaHR0cC5kZWxldGUoXCIvYXBpL2JvdHMvbGlzdHMvXCIrbGlzdC5faWQpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiQ2F0ZWdvcmllc1N2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3ZhciBzdmM9dGhpcztzdmMuZ2V0Q2F0ZWdvcmllcz1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2NhdGVnb3JpZXNcIil9LHN2Yy5nZXRUYXNrcz1mdW5jdGlvbihjYXRlZ29yeSl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvY2F0ZWdvcmllcy9cIitjYXRlZ29yeSl9LHN2Yy5hZGRDYXRlZ29yeT1mdW5jdGlvbihjYXRlZ29yeSl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL2NhdGVnb3JpZXMvXCIsY2F0ZWdvcnkpfSxzdmMuYWRkVGFzaz1mdW5jdGlvbihjYXRlZ29yeSx0YXNrKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvY2F0ZWdvcmllcy9cIitjYXRlZ29yeStcIi90YXNrc1wiLHRhc2spfSxzdmMuc2V0UHJpb3JpdHlMaXN0PWZ1bmN0aW9uKGxpc3Qpe3N2Yy5jaG9pY2VzPWxpc3Qsc3ZjLnByaW9yaXR5TGlzdD1bXTtmb3IodmFyIGk9MDtpPGxpc3QubGVuZ3RoO2krKylmb3IodmFyIGo9aSsxO2o8bGlzdC5sZW5ndGg7aisrKXt2YXIgcmFuZG9tPU1hdGgucm91bmQoTWF0aC5yYW5kb20oKSk7c3ZjLnByaW9yaXR5TGlzdC5wdXNoKHtpZDowLGZpcnN0Q2hvaWNlOmxpc3RbMD09PXJhbmRvbT9pOmpdLm5hbWUsc2Vjb25kQ2hvaWNlOmxpc3RbMD09PXJhbmRvbT9qOmldLm5hbWUsY2hvaWNlOlwiXCJ9KX1mb3IoaSBpbiBmdW5jdGlvbihhcnJheSl7dmFyIHQsaSxtPWFycmF5Lmxlbmd0aDtmb3IoO207KWk9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKm0tLSksdD1hcnJheVttXSxhcnJheVttXT1hcnJheVtpXSxhcnJheVtpXT10fShzdmMucHJpb3JpdHlMaXN0KSxzdmMucHJpb3JpdHlMaXN0KXN2Yy5wcmlvcml0eUxpc3RbaV0uaWQ9aSsxfSxzdmMuZ2V0UHJpb3JpdHlMaXN0PWZ1bmN0aW9uKGxpc3Qpe3JldHVybiBzdmMucHJpb3JpdHlMaXN0fX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiRW1haWxTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLnNlbmQ9ZnVuY3Rpb24oZW1haWwpe3JldHVybiBjb25zb2xlLmxvZyhlbWFpbCksJGh0dHAucG9zdChcIi9hcGkvZW1haWxcIixlbWFpbCl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJGaWxlU3ZjXCIsW1wiJGh0dHBcIixmdW5jdGlvbigkaHR0cCl7dGhpcy5nZXRJbWFnZXM9ZnVuY3Rpb24oZm9sZGVyKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9maWxlcy9pbWFnZXMvXCIrZm9sZGVyKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIkdhbWVTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLmdldEhpZ2hzY29yZT1mdW5jdGlvbihnYW1lLHVzZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2dhbWVzL1wiK2dhbWUrXCIvXCIrdXNlcitcIi9oaWdoc2NvcmVcIil9LHRoaXMuc2V0SGlnaHNjb3JlPWZ1bmN0aW9uKGdhbWUsdXNlcixzY29yZSl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL2dhbWVzL1wiK2dhbWUrXCIvXCIrdXNlcitcIi9oaWdoc2NvcmVcIix7c2NvcmV9KX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIkxhbmd1YWdlU3ZjXCIsKGZ1bmN0aW9uKCl7dmFyIHN2Yz10aGlzO3N2Yy5sYW5ndWFnZXM9W3tjb2RlOlwiRU5cIixuYW1lOlwiRW5nbGlzaFwiLGZsYWc6XCJmbGFnLWljb24tZ2JcIn0se2NvZGU6XCJOTFwiLG5hbWU6XCJOZWRlcmxhbmRzXCIsZmxhZzpcImZsYWctaWNvbi1ubFwifSx7Y29kZTpcIkZSXCIsbmFtZTpcIkZyYW7Dp2Fpc1wiLGZsYWc6XCJmbGFnLWljb24tZnJcIn1dLHN2Yy50ZXh0PVt7Y29kZTpcIkVOXCJ9LHtjb2RlOlwiTkxcIn0se2NvZGU6XCJGUlwifV0sc3ZjLnNlbGVjdGVkTGFuZ3VhZ2U9c3ZjLmxhbmd1YWdlc1swXSxzdmMuc2V0TGFuZ3VhZ2U9ZnVuY3Rpb24obGFuZ3VhZ2Upe3JldHVybiBzdmMuc2VsZWN0ZWRMYW5ndWFnZT1sYW5ndWFnZSxsYW5ndWFnZX0sc3ZjLmdldExhbmd1YWdlPWZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5zZWxlY3RlZExhbmd1YWdlfX0pKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiUG9zdHNTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLmZldGNoPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvcG9zdHNcIil9LHRoaXMuY3JlYXRlPWZ1bmN0aW9uKHBvc3Qpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS9wb3N0c1wiLHBvc3QpfSx0aGlzLmdldFBvc3Q9ZnVuY3Rpb24ocG9zdCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvcG9zdHMvXCIrcG9zdC5faWQpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiVXNlclN2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3ZhciBzdmM9dGhpcztzdmMuZ2V0VXNlcj1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3VzZXJzXCIpfSxzdmMuc2V0VG9rZW49ZnVuY3Rpb24odG9rZW4pe3JldHVybiAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIlgtQXV0aFwiXT10b2tlbixzdmMuZ2V0VXNlcigpfSxzdmMuYXV0aGVudGljYXRlPWZ1bmN0aW9uKHVzZXIpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9hdXRoZW50aWNhdGVcIix7dXNlcn0pLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXtyZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS50b2tlbj1yZXNwb25zZS5kYXRhLHN2Yy5zZXRUb2tlbihyZXNwb25zZS5kYXRhKX0pKX0sc3ZjLmxvZ2luPWZ1bmN0aW9uKHVzZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3VzZXJzL1wiK3VzZXIrXCIvbG9naW5cIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2Upe3JldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuPXJlc3BvbnNlLmRhdGEsc3ZjLnNldFRva2VuKHJlc3BvbnNlLmRhdGEpfSkpfSxzdmMudXBkYXRlVXNlcj1mdW5jdGlvbih1c2VyKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlci5faWQse3VzZXJ9KS50aGVuKChmdW5jdGlvbigpe3JldHVybiBzdmMuZ2V0VXNlcigpfSkpfSxzdmMuY2hlY2tQYXNzd29yZD1mdW5jdGlvbih1c2VyLHBhc3N3b3JkKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlcitcIi92ZXJpZmljYXRpb25cIix7cGFzc3dvcmR9KX0sc3ZjLmNoYW5nZVBhc3N3b3JkPWZ1bmN0aW9uKHVzZXIsb2xkUGFzc3dvcmQsbmV3UGFzc3dvcmQpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9cIit1c2VyK1wiL3Bhc3N3b3JkXCIse29sZFBhc3N3b3JkLG5ld1Bhc3N3b3JkfSl9LHN2Yy5jaGFuZ2VVc2VybmFtZT1mdW5jdGlvbih1c2VyLG5ld1VzZXJuYW1lKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlcitcIi91c2VybmFtZVwiLHtuZXdVc2VybmFtZX0pLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5nZXRVc2VyKCl9KSl9LHN2Yy5sb2dvdXQ9ZnVuY3Rpb24oKXt3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCksJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJYLUF1dGhcIl09XCJcIn0sc3ZjLmNyZWF0ZVVzZXI9ZnVuY3Rpb24odXNlcm5hbWUscGFzc3dvcmQpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vyc1wiLHt1c2VybmFtZSxwYXNzd29yZH0pLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSxwYXNzd29yZCl9KSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJRdWl6R29vZ2xlQ3RybFwiLFtcIiRzY29wZVwiLFwiRmlsZVN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxGaWxlU3ZjKXtGaWxlU3ZjLmdldEltYWdlcyhcImdvb2dsZVwiKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLmltYWdlcz1yZXNwb25zZS5kYXRhfSkpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJRdWl6TG9nb3NDdHJsXCIsW1wiJHNjb3BlXCIsXCJGaWxlU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEZpbGVTdmMpe0ZpbGVTdmMuZ2V0SW1hZ2VzKFwibG9nb3NcIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5pbWFnZXM9cmVzcG9uc2UuZGF0YX0pKX1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1dvcmtvdXRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xyXG5cclxuICAkc2NvcGUudGltZVJlbWFpbmluZyA9IDA7XHJcbiAgJHNjb3BlLnRpbWVFeGVyY2lzaW5nID0gMzA7XHJcbiAgJHNjb3BlLnRpbWVSZXN0aW5nID0gMTA7XHJcbiAgJHNjb3BlLnJlc3QgPSBmYWxzZTtcclxuXHJcbiAgdmFyIHNvdW5kcyA9IHtcclxuICAgIG9uOiBuZXcgQXVkaW8oJ29uLndhdicpLFxyXG4gICAgb2ZmOiBuZXcgQXVkaW8oJ29mZi53YXYnKSxcclxuICAgIHN3aXRjaDogbmV3IEF1ZGlvKCdzd2l0Y2gud2F2JyksXHJcbiAgfTtcclxuXHJcblxyXG4gIHZhciBleGVyY2lzZXMgPSBbXHJcbiAgICB7bmFtZTogJ0p1bXBpbmcgSmFja3MnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdXYWxsIFNpdCcsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1B1c2gtVXAnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdDcnVuY2gnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdTdGVwLVVwJywgc3BsaXQ6IHRydWV9LFxyXG4gICAge25hbWU6ICdTcXVhdCcsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1RyaWNlcHMgRGlwJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnUGxhbmsnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdIaWdoIEtuZWVzJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnTHVuZ2UnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdQdXNoLVVwIHdpdGggUm90YXRpb24nLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdTaWRlIFBsYW5rJywgc3BsaXQ6IHRydWV9XHJcbiAgXTtcclxuXHJcbiAgdmFyIGV4ZXJjaXNpbmc7XHJcblxyXG4gICRzY29wZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIChleGVyY2lzZXMubGVuZ3RoIC0gTWF0aC5mbG9vcigkc2NvcGUudGltZVJlbWFpbmluZyAvICgkc2NvcGUudGltZUV4ZXJjaXNpbmcgKyAkc2NvcGUudGltZVJlc3RpbmcpKSkgKyAnLycgKyBleGVyY2lzZXMubGVuZ3RoO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS53b3Jrb3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZXhjZXJjaXNlVGltZSA9ICRzY29wZS50aW1lRXhlcmNpc2luZyArICRzY29wZS50aW1lUmVzdGluZztcclxuICAgIGlmICghJHNjb3BlLnRpbWVSZW1haW5pbmcpIHtcclxuICAgICAgJHNjb3BlLnRpbWVSZW1haW5pbmcgPSBleGVyY2lzZXMubGVuZ3RoICogZXhjZXJjaXNlVGltZTtcclxuICAgICAgZXhlcmNpc2luZyA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICRzY29wZS50aW1lUmVtYWluaW5nLS07XHJcbiAgICAgICAgaWYgKCRzY29wZS50aW1lUmVtYWluaW5nID09PSAwKSB7XHJcbiAgICAgICAgICAkc2NvcGUuZXhlcmNpc2UgPSB7bmFtZTogJ0ZpbmlzaGVkISBDb25ncmF0cyEnLCBzcGxpdDogZmFsc2V9O1xyXG4gICAgICAgICAgJHNjb3BlLnRpbWVyID0gJyc7XHJcbiAgICAgICAgICAkc2NvcGUudGltZVJlbWFpbmluZyA9IDA7XHJcbiAgICAgICAgICAkc2NvcGUucmVzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgcmV0dXJuIGNsZWFySW50ZXJ2YWwoZXhlcmNpc2luZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjdXJyZW50RXhlcmNpc2UgPSBNYXRoLmZsb29yKCRzY29wZS50aW1lUmVtYWluaW5nIC8gZXhjZXJjaXNlVGltZSk7XHJcbiAgICAgICAgdmFyIHRpbWVyID0gJHNjb3BlLnRpbWVSZW1haW5pbmcgLSBjdXJyZW50RXhlcmNpc2UgKiBleGNlcmNpc2VUaW1lO1xyXG4gICAgICAgICRzY29wZS50aW1lciA9IHRpbWVyID4gJHNjb3BlLnRpbWVFeGVyY2lzaW5nID8gdGltZXIgLSAkc2NvcGUudGltZUV4ZXJjaXNpbmcgOiB0aW1lcjtcclxuICAgICAgICBpZiAodGltZXIgPiAkc2NvcGUudGltZUV4ZXJjaXNpbmcpIHtcclxuICAgICAgICAgICRzY29wZS5yZXN0ID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJHNjb3BlLnJlc3QgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLmV4ZXJjaXNlID0gZXhlcmNpc2VzW2V4ZXJjaXNlcy5sZW5ndGggLSBjdXJyZW50RXhlcmNpc2UgLSAxXTtcclxuICAgICAgICBpZiAodGltZXIgPT09ICRzY29wZS50aW1lRXhlcmNpc2luZykge1xyXG4gICAgICAgICAgc291bmRzLm9uLnBsYXkoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRpbWVyID09PSAwKSB7XHJcbiAgICAgICAgICBzb3VuZHMub2ZmLnBsYXkoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5leGVyY2lzZS5zcGxpdCAmJiB0aW1lciA9PT0gTWF0aC5mbG9vcigkc2NvcGUudGltZUV4ZXJjaXNpbmcgLyAyKSkge1xyXG4gICAgICAgICAgc291bmRzLnN3aXRjaC5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjbGVhckludGVydmFsKGV4ZXJjaXNpbmcpO1xyXG4gICAgICAkc2NvcGUudGltZXIgPSAnJztcclxuICAgICAgJHNjb3BlLnRpbWVSZW1haW5pbmcgPSAwO1xyXG4gICAgICAkc2NvcGUucmVzdCA9IGZhbHNlO1xyXG4gICAgICAkc2NvcGUuZXhlcmNpc2UgPSB7bmFtZTogJycsIHNwbGl0OiBmYWxzZX07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuXHQuZGlyZWN0aXZlKCdoZWFkJywgW1xyXG5cdFx0JyRyb290U2NvcGUnLFxyXG5cdFx0JyRzdGF0ZScsXHJcblx0XHQnJGNvbXBpbGUnLFxyXG5cdFx0JyRpbnRlcnBvbGF0ZScsXHJcblx0XHRmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHN0YXRlLCAkY29tcGlsZSwgJGludGVycG9sYXRlKSB7XHJcblxyXG5cdFx0XHR2YXIgZ2V0U3R5bGUgPSBmdW5jdGlvbiBnZXRTdHlsZSh0ZW1wbGF0ZVN0eWxlVXJsKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzdHlsZSA9IHtcclxuXHRcdFx0XHRcdGhyZWY6IHRlbXBsYXRlU3R5bGVVcmwsXHJcblx0XHRcdFx0XHRyZWw6ICdzdHlsZXNoZWV0J1xyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdGlmIChzdHlsZS5ocmVmLm1hdGNoKC9cXC5sZXNzJC8pKSB7XHJcblx0XHRcdFx0XHRzdHlsZS5yZWwgPSAnc3R5bGVzaGVldC9sZXNzJztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBzdHlsZTtcclxuXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHR2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gZ2V0U3R5bGVzKHN0YXRlKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzdGF0ZXMgPSB7fTtcclxuXHJcblx0XHRcdFx0Ly9DaGVjayBzdGF0ZSBmb3Igc3R5bGVzXHJcblx0XHRcdFx0d2hpbGUgKHN0YXRlLm5hbWUgIT09ICcnKSB7XHJcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gJHN0YXRlLmdldCgnXicsIHN0YXRlKTtcclxuXHJcblx0XHRcdFx0XHQvL0luaXRpYXRlIG91ciB2aWV3IGxpc3RcclxuXHRcdFx0XHRcdGlmICghc3RhdGVzW3BhcmVudC5uYW1lXSkge1xyXG5cdFx0XHRcdFx0XHRzdGF0ZXNbcGFyZW50Lm5hbWVdID0ge307XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly9DaGVjayB0aGUgdGVtcGxhdGVTdHlsZVxyXG5cdFx0XHRcdFx0aWYgKHN0YXRlLnRlbXBsYXRlU3R5bGVVcmwpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNbcGFyZW50Lm5hbWVdWycnXSkge1xyXG5cdFx0XHRcdFx0XHRcdHN0YXRlc1twYXJlbnQubmFtZV1bJyddID0gZ2V0U3R5bGUoc3RhdGUudGVtcGxhdGVTdHlsZVVybCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvL0NoZWNrIHZpZXdzXHJcblx0XHRcdFx0XHRpZiAoc3RhdGUudmlld3MpIHtcclxuXHRcdFx0XHRcdFx0Xy5mb3JFYWNoKHN0YXRlLnZpZXdzLCBmdW5jdGlvbiAodmlldywga2V5KSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vQ2hlY2sgaWYgd2UgaGF2ZSBhIHN0eWxlXHJcblx0XHRcdFx0XHRcdFx0aWYgKCF2aWV3LnRlbXBsYXRlU3R5bGVVcmwpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vQ2hlY2sgaWYgd2UgYXJlIHRhcmdldGluZyBzb21lIHBhcmVudFxyXG5cdFx0XHRcdFx0XHRcdGlmICgoa2V5ID0ga2V5LnNwbGl0KCdAJykpWzFdKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvL0NoZWNrIGlmIHdlIGhhdmUgc3R5bGVzIGZvciB0aGF0IHBhcmVudFxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNba2V5WzFdXSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZXNba2V5WzFdXSA9IHt9O1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vUGxhY2UgdGhlIHN0eWxlIG9uIHNvbWUgcGFyZW50J3Mgdmlld1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNba2V5WzFdXVtrZXlbMF1dKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlc1trZXlbMV1dW2tleVswXV0gPSBnZXRTdHlsZSh2aWV3LnRlbXBsYXRlU3R5bGVVcmwpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vUGxhY2UgdGhlIHN0eWxlIG9uIG91ciBwYXJlbnQncyB2aWV3XHJcblx0XHRcdFx0XHRcdFx0c3RhdGVzW3BhcmVudC5uYW1lXVtrZXlbMF1dID0gZ2V0U3R5bGUodmlldy50ZW1wbGF0ZVN0eWxlVXJsKTtcclxuXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vQ29udGludWUgd2l0aCB0aGUgcGFyZW50XHJcblx0XHRcdFx0XHRzdGF0ZSA9IHBhcmVudDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vRmxhdHRlbiB0aGUgbGlzdFxyXG5cdFx0XHRcdHZhciBmbGF0ID0gW107XHJcblx0XHRcdFx0Xy5mb3JFYWNoKHN0YXRlcywgZnVuY3Rpb24gKHZpZXdzKSB7XHJcblxyXG5cdFx0XHRcdFx0Xy5mb3JFYWNoKHZpZXdzLCBmdW5jdGlvbiAoc3R5bGUpIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmICghXy5pbmNsdWRlcyhmbGF0LCBzdHlsZSkpIHtcclxuXHRcdFx0XHRcdFx0XHRmbGF0LnB1c2goc3R5bGUpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQvL1JldmVyc2UgaXQgc28gd2UgaGF2ZSBhIHByb3BlciBoaWVyYXJjaHlcclxuXHRcdFx0XHRmbGF0LnJldmVyc2UoKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGZsYXQ7XHJcblxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRyZXN0cmljdDogJ0UnLFxyXG5cdFx0XHRcdGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbSkge1xyXG5cclxuXHRcdFx0XHRcdHNjb3BlLnRlbXBsYXRlU3R5bGVzID0gW107XHJcblxyXG5cdFx0XHRcdFx0dmFyIGh0bWwgPSAnPGxpbmsgbmctYXR0ci1yZWw9XCJ7e3N0eWxlLnJlbH19XCIgbmctcmVwZWF0PVwic3R5bGUgaW4gdGVtcGxhdGVTdHlsZXNcIiBuZy1ocmVmPVwie3tzdHlsZS5ocmVmfX1cIj4nO1xyXG5cclxuXHRcdFx0XHRcdGh0bWwgPSBodG1sLnJlcGxhY2UoL1xce1xcey9nLCAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSk7XHJcblx0XHRcdFx0XHRodG1sID0gaHRtbC5yZXBsYWNlKC9cXH1cXH0vZywgJGludGVycG9sYXRlLmVuZFN5bWJvbCgpKTtcclxuXHJcblx0XHRcdFx0XHRlbGVtLmFwcGVuZCgkY29tcGlsZShodG1sKShzY29wZSkpO1xyXG5cclxuXHRcdFx0XHRcdCRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG5cclxuXHRcdFx0XHRcdFx0c2NvcGUudGVtcGxhdGVTdHlsZXMgPSBnZXRTdHlsZXModG9TdGF0ZSk7XHJcblxyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHR9XHJcblx0XSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnQm90c1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZ2V0TGlzdHMgPSBmdW5jdGlvbiAodXNlcikge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9ib3RzL2xpc3RzJyk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldExpc3QgPSBmdW5jdGlvbiAobGlzdCkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9ib3RzL2xpc3RzLycgKyBsaXN0Ll9pZCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLnNhdmVMaXN0ID0gZnVuY3Rpb24gKHVzZXIsIGxpc3QpIHtcclxuICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvYm90cy9saXN0cycsIHtcclxuICAgICAgdXNlcjogdXNlcixcclxuICAgICAgbGlzdDogbGlzdFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLnJlcG9ydExpc3QgPSBmdW5jdGlvbiAodXNlciwgbGlzdCkge1xyXG4gICAgJGh0dHAuZ2V0KCcvYXBpL2JvdHMvbGlzdHMvJyArIGxpc3QuX2lkICsgJy9yZXBvcnQvJyArIHVzZXIuX2lkKTtcclxuICB9O1xyXG5cclxuICBzdmMuZGVsZXRlTGlzdCA9IGZ1bmN0aW9uIChsaXN0KSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL2JvdHMvbGlzdHMvJyArIGxpc3QuX2lkKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnQ2F0ZWdvcmllc1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZ2V0Q2F0ZWdvcmllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2F0ZWdvcmllcycpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRUYXNrcyA9IGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jYXRlZ29yaWVzLycgKyBjYXRlZ29yeSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmFkZENhdGVnb3J5ID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jYXRlZ29yaWVzLycsIGNhdGVnb3J5KTtcclxuICB9O1xyXG5cclxuICBzdmMuYWRkVGFzayA9IGZ1bmN0aW9uIChjYXRlZ29yeSwgdGFzaykge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY2F0ZWdvcmllcy8nICsgY2F0ZWdvcnkgKyAnL3Rhc2tzJywgdGFzayk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLnNldFByaW9yaXR5TGlzdCA9IGZ1bmN0aW9uKGxpc3QpIHtcclxuICAgIHN2Yy5jaG9pY2VzID0gbGlzdDtcclxuICAgIHN2Yy5wcmlvcml0eUxpc3QgPSBbXTtcclxuICAgIC8vTWFrZSBhIG5ldyBjaG9pY2UgbGlzdFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IGxpc3QubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICB2YXIgcmFuZG9tID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKTtcclxuICAgICAgICBzdmMucHJpb3JpdHlMaXN0LnB1c2goe1xyXG4gICAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgICBmaXJzdENob2ljZTogbGlzdFtyYW5kb20gPT09IDAgPyBpIDogal0ubmFtZSxcclxuICAgICAgICAgIHNlY29uZENob2ljZTogbGlzdFtyYW5kb20gPT09IDAgPyBqIDogaV0ubmFtZSxcclxuICAgICAgICAgIGNob2ljZTogJydcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2h1ZmZsZShzdmMucHJpb3JpdHlMaXN0KTtcclxuICAgIGZvciAoaSBpbiBzdmMucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHN2Yy5wcmlvcml0eUxpc3RbaV0uaWQgPSBpICsgMTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzdmMuZ2V0UHJpb3JpdHlMaXN0ID0gZnVuY3Rpb24obGlzdCkge1xyXG4gICAgcmV0dXJuIHN2Yy5wcmlvcml0eUxpc3Q7XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xyXG4gICAgdmFyIG0gPSBhcnJheS5sZW5ndGgsIHQsIGk7XHJcbiAgICAvLyBXaGlsZSB0aGVyZSByZW1haW4gZWxlbWVudHMgdG8gc2h1ZmZsZeKAplxyXG4gICAgd2hpbGUgKG0pIHtcclxuICAgICAgLy8gUGljayBhIHJlbWFpbmluZyBlbGVtZW504oCmXHJcbiAgICAgIGkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtLS0pO1xyXG4gICAgICAvLyBBbmQgc3dhcCBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQuXHJcbiAgICAgIC8vYXJyYXlbbV0uZmlyc3RDaG9pY2U7XHJcbiAgICAgIHQgPSBhcnJheVttXTtcclxuICAgICAgYXJyYXlbbV0gPSBhcnJheVtpXTtcclxuICAgICAgYXJyYXlbaV0gPSB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH1cclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLnNlcnZpY2UoJ0VtYWlsU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gIHN2Yy5zZW5kID0gZnVuY3Rpb24gKGVtYWlsKSB7XHJcbiAgICBjb25zb2xlLmxvZyhlbWFpbCk7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9lbWFpbCcsIGVtYWlsKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnRmlsZVN2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gICAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gICAgc3ZjLmdldEltYWdlcyA9IGZ1bmN0aW9uIChmb2xkZXIpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9maWxlcy9pbWFnZXMvJyArIGZvbGRlcik7XHJcbiAgICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnR2FtZVN2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gICAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gICAgc3ZjLmdldEhpZ2hzY29yZSA9IGZ1bmN0aW9uIChnYW1lLCB1c2VyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvZ2FtZXMvJyArIGdhbWUgKyAnLycgKyB1c2VyICsgJy9oaWdoc2NvcmUnKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLnNldEhpZ2hzY29yZSA9IGZ1bmN0aW9uIChnYW1lLCB1c2VyLCBzY29yZSkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9nYW1lcy8nICsgZ2FtZSArICcvJyArIHVzZXIgKyAnL2hpZ2hzY29yZScsIHtcclxuICAgICAgICBzY29yZTogc2NvcmVcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnTGFuZ3VhZ2VTdmMnLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gIHN2Yy5sYW5ndWFnZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIkVOXCIsXHJcbiAgICAgIFwibmFtZVwiOiBcIkVuZ2xpc2hcIixcclxuICAgICAgXCJmbGFnXCI6IFwiZmxhZy1pY29uLWdiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIk5MXCIsXHJcbiAgICAgIFwibmFtZVwiOiBcIk5lZGVybGFuZHNcIixcclxuICAgICAgXCJmbGFnXCI6IFwiZmxhZy1pY29uLW5sXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIkZSXCIsXHJcbiAgICAgIFwibmFtZVwiOiBcIkZyYW7Dp2Fpc1wiLFxyXG4gICAgICBcImZsYWdcIjogXCJmbGFnLWljb24tZnJcIlxyXG4gICAgfVxyXG4gIF07XHJcblxyXG4gIHN2Yy50ZXh0ID0gW1xyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJFTlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJOTFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJGUlwiXHJcbiAgICB9XHJcbiAgXTtcclxuXHJcbiAgc3ZjLnNlbGVjdGVkTGFuZ3VhZ2UgPSBzdmMubGFuZ3VhZ2VzWzBdO1xyXG5cclxuICBzdmMuc2V0TGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZ3VhZ2UpIHtcclxuICAgIHN2Yy5zZWxlY3RlZExhbmd1YWdlID0gbGFuZ3VhZ2U7XHJcbiAgICByZXR1cm4gbGFuZ3VhZ2U7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldExhbmd1YWdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHN2Yy5zZWxlY3RlZExhbmd1YWdlO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRQb3N0ID0gZnVuY3Rpb24gKHBvc3QpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMvJyArIHBvc3QuX2lkKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKTtcclxuICB9O1xyXG5cclxuICBzdmMuc2V0VG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHRva2VuO1xyXG4gICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmF1dGhlbnRpY2F0ZSA9IGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy9hdXRoZW50aWNhdGUnLCB7XHJcbiAgICAgIHVzZXI6IHVzZXJcclxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW4gPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICByZXR1cm4gc3ZjLnNldFRva2VuKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmxvZ2luID0gZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvJyArIHVzZXIgKyAnL2xvZ2luJylcclxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgcmV0dXJuIHN2Yy5zZXRUb2tlbihyZXNwb25zZS5kYXRhKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHN2Yy51cGRhdGVVc2VyID0gZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzLycgKyB1c2VyLl9pZCwge1xyXG4gICAgICB1c2VyOiB1c2VyXHJcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBzdmMuY2hlY2tQYXNzd29yZCA9IGZ1bmN0aW9uICh1c2VyLCBwYXNzd29yZCkge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvJyArIHVzZXIgKyAnL3ZlcmlmaWNhdGlvbicsIHtcclxuICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBzdmMuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbiAodXNlciwgb2xkUGFzc3dvcmQsIG5ld1Bhc3N3b3JkKSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy8nICsgdXNlciArICcvcGFzc3dvcmQnLCB7XHJcbiAgICAgIG9sZFBhc3N3b3JkOiBvbGRQYXNzd29yZCxcclxuICAgICAgbmV3UGFzc3dvcmQgOiBuZXdQYXNzd29yZFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmNoYW5nZVVzZXJuYW1lID0gZnVuY3Rpb24gKHVzZXIsIG5ld1VzZXJuYW1lKSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy8nICsgdXNlciArICcvdXNlcm5hbWUnLCB7XHJcbiAgICAgIG5ld1VzZXJuYW1lOiBuZXdVc2VybmFtZVxyXG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKTtcclxuICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9ICcnO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5jcmVhdGVVc2VyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XHJcbiAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcclxuICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXHJcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1F1aXpHb29nbGVDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgRmlsZVN2Yykge1xyXG4gIEZpbGVTdmMuZ2V0SW1hZ2VzKCdnb29nbGUnKVxyXG4gIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAkc2NvcGUuaW1hZ2VzID0gcmVzcG9uc2UuZGF0YTtcclxuICB9KTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUXVpekxvZ29zQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEZpbGVTdmMpIHtcclxuICBGaWxlU3ZjLmdldEltYWdlcygnbG9nb3MnKVxyXG4gIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAkc2NvcGUuaW1hZ2VzID0gcmVzcG9uc2UuZGF0YTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==
