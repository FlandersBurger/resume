angular.module("app",["ui.router","ui.bootstrap","ngAnimate","ngSanitize","vcRecaptcha","chart.js"]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){t.otherwise("/home"),e.state("home",{url:"/home",templateUrl:"/home.html"}).state("print",{url:"/print",templateUrl:"/print.html"}).state("experience",{url:"/experience",controller:"ExperienceCtrl",templateUrl:"/experience.html"}).state("skills",{url:"/skills",controller:"SkillsCtrl",templateUrl:"/skills.html"}).state("hobbies",{url:"/hobbies",controller:"HobbiesCtrl",templateUrl:"/hobbies.html"}).state("contact",{url:"/contact",controller:"ContactCtrl",templateUrl:"/contact.html"}).state("workout",{url:"/workout",controller:"WorkoutCtrl",templateUrl:"/workout.html"}).state("top-priority",{url:"/top-priority",controller:"TopPriorityCtrl",templateUrl:"/top-priority.html"}),n.html5Mode({enabled:!0,requireBase:!1})}]),angular.module("app").controller("AppCtrl",["$scope","$location","LanguageSvc",function(e,t,n){console.log("%cYou sneaky bugger!","font: 2em sans-serif; color: DodgerBlue; text-shadow: 2px 0 0 #444, -2px 0 0 #444, 0 2px 0 #444, 0 -2px 0 #444, 1px 1px #444, -1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444;"),console.log("I'm glad you're curious whether something is popping up in here. I'm a bit of a stickler when it comes to messages in the console so I try to make sure only things I want are visible. That being said, if there is a big error here, I would really appreciate you telling me so I can get rid of it!"),console.log("The code for my resume is hosted on Github if you really want to go into all this! => https://github.com/FlandersBurger/resume"),$(window).load(function(){$(".loading").fadeOut("slow"),$(".content").fadeIn("slow")}),e.themeCounter=6,e.today=new Date,e.year=e.today.getFullYear(),e.random=Math.floor(1e6*Math.random()),e.flipTheme=function(){$(".loading").show(),$(".content").hide(),setTimeout(function(){$(".loading").fadeOut("slow"),$(".content").fadeIn("slow")},800),e.themeCounter=e.themeCounter<6?e.themeCounter+1:e.themeCounter=1},$.getJSON("/skills.json",function(t){e.skills=t.filter(function(e){return e.enabled})}),$.getJSON("/hobbies.json",function(t){e.hobbies=t}),$.getJSON("/experience.json",function(t){e.jobs=t,e.jobs.forEach(function(e){e.startDate=new Date(e.startDate),e.endDate&&(e.endDate=new Date(e.endDate))})}),e.getTimeSpan=function(e){return e.startDate.getFullYear()+(e.endDate?" - "+e.endDate.getFullYear():" - Today")},e.languages=n.languages,e.selectedLanguage=n.getLanguage(),e.selectLanguage=function(t){e.selectedLanguage=n.setLanguage(t)},e.hoverdiv=function(e,t){var n=e.clientX+"px",a=e.clientY+20+"px";document.getElementById(t);return $("#"+t).css("left",n),$("#"+t).css("top",a),$("#"+t).toggle(),!1},e.socialMedia=[{name:"facebook",url:"https://www.facebook.com/flandersburger",icon:"fa-facebook-f"},{name:"twitter",url:"https://twitter.com/BelgoCanadian",icon:"fa-twitter"},{name:"goodreads",url:"https://www.goodreads.com/user/show/17070010-laurent",icon:"fa-book"},{name:"linkedin",url:"https://www.linkedin.com/in/laurent-debacker-1633a916",icon:"fa-linkedin"},{name:"github",url:"https://github.com/FlandersBurger",icon:"fa-github"},{name:"jsfiddle",url:"https://jsfiddle.net/user/BelgoCanadian/fiddles/",icon:"fa-jsfiddle"},{name:"stackoverflow",url:"http://stackoverflow.com/users/1083923/belgocanadian",icon:"fa-stack-overflow"}]}]),angular.module("app").controller("ContactCtrl",["$scope","EmailSvc",function(e,t){e.options=[{name:"Spam",text:"I am a spam bot and automatically check the first option I find!"},{name:"Opportunitiy",text:"You seem to have the skills I seek, I'd like to talk about some opportunities."},{name:"Resume",text:"I dig the resume, how did you make it?"},{name:"Other",text:"Sumtin else!"}],e.contact={email:"",name:"",phone:"",about:"",message:""},e.send=function(){e.sending=!0,console.log("here"),t.send({email:e.contact.email,name:e.contact.name,phone:e.contact.phone,about:e.contact.about,message:e.contact.message}).then(function(t){e.sent=!0,e.$apply(),console.log("SUCCESS. status=%d, text=%s",t.status,t.text),console.log(t)},function(t){e.sending=!1,e.$apply(),console.log("FAILED. error=",t)})}}]),angular.module("app").controller("ExperienceCtrl",["$scope",function(e){e.getSkill=function(t){if(e.skills)return e.skills.find(function(e){return e.code===t})}}]),angular.module("app").controller("HobbiesCtrl",["$scope","$window",function(e,t){e.hobbySelectorVisible=!1,$.getJSON("https://www.reddit.com/user/belgocanadian/about/.json",function(e){}),e.selectedHobby=e.hobbies[0],e.selectHobby=function(t){e.selectedHobby=t,e.hobbySelectorVisible=!1},e.showHobby=function(e,t,n){return!!e.images&&e.images.length>0}}]),angular.module("app").controller("SkillsCtrl",["$scope","$window",function(e,t){e.selectedSkill=0,e.skillsVisible=!1,e.labels=["Download Sales","In-Store Sales","Mail-Order Sales"],e.data=[300,500,100],$.getJSON("/skills.json",function(t){e.skills=t.filter(function(e){return e.enabled}),e.setSelectedSkill=function(t){e.selectedSkill=t,e.selectedSkill.chartOptions={cutoutPercentage:80,circumference:2*Math.PI*e.selectedSkill.percentage/100,maintainAspectRatio:!1},e.selectedSkill.chartStyle={"background-image":"url(/skills/"+e.selectedSkill.image+")","background-repeat":"no-repeat","background-size":"60%","background-position":"50% 50%"}},e.$apply()})}]),angular.module("app").controller("TopPriorityCtrl",["$scope",function(e){function n(e){this.score=0,this.name=e,this.choose=function(){this.score++}}function a(e){this.tasks=[];for(var t in e)this.tasks[t]=new n(e[t]);this.choose=function(e){for(var t in this.tasks)this.tasks[t].name==e&&this.tasks[t].choose()}}function o(e,t){this.avatar=[e,t],this.name="",this.tasks=[],this.setTasks=function(e){for(var t=0;t<e.length;t++)this.tasks[t]=new n(e[t].name)},this.choose=function(e){for(var t in this.tasks)this.tasks[t].name==e&&this.tasks[t].choose()},this.score=function(e){for(var t in this.tasks)if(this.tasks[t].name==e)return this.tasks[t].score}}function i(e){for(var t,n,a=e.length;0!==a;)n=Math.floor(Math.random()*a),a-=1,t=e[a],e[a]=e[n],e[n]=t;return e}function r(e){var t,n,a={};for(t=0,n=e.length;t<n;t++){if(a[e[t]])return e[t];a[e[t]]=!0}return!0}function l(){for(var e,t,n=!0;n;){n=!1,e=Math.floor(Math.random()*v),t=Math.floor(Math.random()*k);for(var a=0;a<h.length;a++)h[a].avatar[0]==e&&h[a].avatar[1]==t&&(n=!0)}c("#Avatar",e,t)}function s(e,t){for(var n=0;n<h.length;n++)if(h[n].avatar[0]==e&&h[n].avatar[1]==t)return alert("Copycat!"),void l();c("#Avatar",e,t)}function c(e,t,n){$(e).css("background-position-x",-t*(g/v)),$(e).css("background-position-y",-n*(f/k)),p[0]=t,p[1]=n}var u,d,m,h=[],p=[],g=800,f=400,v=8,k=4;e.defaultLists={chores:{caption:"Chores, ugh",message:"What chores need to be done?",list:["Laundry","Dishes","Sweeping","Groceries","Tidy"]},restaurants:{caption:"We're hungry",message:"What do you want to eat?",list:["Chinese","Japanese","American","Indian","Greek","Italian","Korean","Thai","Vietnamese","Mexican"]},pokemon:{caption:"I choose you",message:"Which do you gotta catch?",list:["Pikachu","Squirtle","Charmander","Bulbasaur","Pidgeotto","Snorlax"]}},e.list=[],e.choose_type=function(t){$("#TypeSection").hide(),t?(e.list=e.defaultLists[t].list,$("#InputTitle").text(e.defaultLists[t].message)):(e.list=["",""],$("#InputTitle").text("What needs prioritizing?")),$("#InputSection").show()},e.removeListItem=function(t){e.list.splice(t,1)},e.addListItem=function(){e.list.push("")},e.choose_avatar=function(){h[h.length]=new o(p[0],p[1]),h[h.length-1].setTasks(m.tasks),e.prioritize()},e.start=function(){var n;t=0,e.list=e.list.filter(function(e){return e}),n=e.list.length;var o=r(e.list);return n<2?(alert("Oi, there're 2 textboxes for a reason!"),e.list=["",""],!1):o!==!0?(alert("Seems like you prefer "+o+"."),!1):($("#InputSection").hide(),h=[],m=new a(e.list),l(),$(".Top").slideDown("slow"),void $("#AvatarSection").fadeIn())},e.prioritize=function(){var t,n,a,o;for(o=0,a=m.tasks.length,u=[],$("#AvatarSection").hide(),t=0;t<a-1;t++)for(n=t+1;n<a;n++)u[o]=[],u[o][0]=m.tasks[t].name,u[o][1]=m.tasks[n].name,u[o][2]=0,o++;i(u),e.new_choice(),$("#PrioritizeSection").fadeIn()},e.next_player=function(){$("#ResultSection").hide(),$("#btnMultiplayer").val("Final results"),l(),$("#AvatarSection").fadeIn()},e.multiplayer=function(){1===h.length?e.restart():e.final_results()},e.restart=function(){for($("#ResultSection").hide(),$("#FinalSection").hide(),$(".Top").slideUp(),$(".ListItem").val("");$(".ListItem").length>2;)$(".ListItem").last().parent().remove();$("#FinalResultList th").remove(),$("#FinalResultList tr").remove(),$("#btnMultiplayer").val("Restart"),$("#TypeSection").fadeIn(),$(".ListItem").first().focus()},e.new_choice=function(){var e,t;for(e=0;e<u.length;e++)if(0===u[e][2]){var n=Math.round(Math.random());return document.getElementById("choice1").value=u[e][n],document.getElementById("choice2").value=u[e][1-n],d=e,t=Math.round(100*e/u.length),$(".progress-bar").css("width",t+"%").attr("aria-valuenow",t),document.getElementById("ChoicesLeft").innerHTML=t+"%",!1}},e.choose=function(t){var n,a;a=t==u[d][0]?0:1,m.choose(u[d][a]),h[h.length-1].choose(u[d][a]),u[d][2]=1;var o=1;for(n=0;n<u.length;n++)0===u[n][2]&&(o=0);1==o?e.results():e.new_choice()},e.results=function(){$(".progress-bar").css("width","100%").attr("aria-valuenow",100),document.getElementById("ChoicesLeft").innerHTML="100%",document.getElementById("ResultList").innerHTML="",$("#PrioritizeSection").hide();var e,t;for(t=h.length-1,h[t].tasks.sort(function(e,t){return t[0]-e[0]}),e=0;e<h[t].tasks.length;e++){var n=document.createElement("LI"),a=document.createTextNode(h[t].tasks[e].name+": "+h[t].tasks[e].score+" vote"+(1==h[t].tasks[e].score?"":"s"));n.appendChild(a),document.getElementById("ResultList").appendChild(n)}$("#ResultSection").fadeIn()},e.final_results=function(){$("#ResultSection").hide(),$(".Top").slideUp();var e,t;m.tasks.sort(function(e,t){return t[0]-e[0]});var n=document.createElement("THEAD"),a=document.createElement("TR");for(a.appendChild(document.createElement("TH")),e=0;e<h.length;e++){var o="th"+e,i=document.createElement("TH");i.setAttribute("id",o),i.style.backgroundImage="url('http://i.imgur.com/IcP5F1m.png')",i.style.width=50,i.style.height=65,i.style.backgroundPosition=-h[e].avatar[0]*(g/v)+"px "+-h[e].avatar[1]*(f/k)+"px",a.appendChild(i)}var r=document.createElement("TD");r.appendChild(document.createTextNode("Total")),r.style.height=65,a.appendChild(r),n.appendChild(a),document.getElementById("FinalResultList").appendChild(n);var l=document.createElement("TBODY");for(e=0;e<m.tasks.length;e++){var s=document.createElement("TR"),c=document.createElement("TD");for(c.appendChild(document.createTextNode(m.tasks[e].name)),s.appendChild(c),t=0;t<h.length;t++){var u=document.createElement("TD");u.appendChild(document.createTextNode(h[t].score(m.tasks[e].name))),s.appendChild(u)}var d=document.createElement("TD");d.appendChild(document.createTextNode(m.tasks[e].score)),s.appendChild(d),l.appendChild(s)}document.getElementById("FinalResultList").appendChild(l),$("#FinalSection").fadeIn()},$(document).ready(function(){$(".ListItem").first().focus(),$("#Avatars").click(function(e){var t=($(this).offset(),document.getElementById("Avatars")),n=t.clientWidth,a=t.clientHeight,o=(e.pageX-$(this).offset().left)/n*g;o=Math.floor(o/(g/v));var i=(e.pageY-$(this).offset().top)/a*f;i=Math.floor(i/(f/k)),s(o,i)})})}]),angular.module("app").controller("WorkoutCtrl",["$scope",function(e){e.timeRemaining=0,e.rest=!1;var t,n=[{name:"Jumping Jacks",split:!1},{name:"Wall Sit",split:!1},{name:"Push-Up",split:!1},{name:"Crunch",split:!1},{name:"Step-Up",split:!0},{name:"Squat",split:!1},{name:"Triceps Dip",split:!1},{name:"Plank",split:!1},{name:"High Knees",split:!1},{name:"Lunge",split:!1},{name:"Push-Up with Rotation",split:!1},{name:"Side Plank",split:!0}];e.workout=function(){e.timeRemaining?(clearInterval(t),e.timer="",e.timeRemaining=0,e.rest=!1,e.exercise={name:"",split:!1}):(e.timeRemaining=40*n.length,t=setInterval(function(){if(e.timeRemaining--,0===e.timeRemaining)return e.exercise={name:"Finished! Congrats!",split:!1},e.timer="",e.timeRemaining=0,e.rest=!1,e.$apply(),clearInterval(t);var a=Math.floor(e.timeRemaining/40),o=e.timeRemaining-40*a;e.timer=o>30?o-30:o,o>30?e.rest=!0:e.rest=!1,e.exercise=n[n.length-a-1],e.$apply()},1e3))}}]),angular.module("app").directive("head",["$rootScope","$state","$compile","$interpolate",function(e,t,n,a){var o=function(e){var t={href:e,rel:"stylesheet"};return t.href.match(/\.less$/)&&(t.rel="stylesheet/less"),t},i=function(e){for(var n={};""!==e.name;){var a=t.get("^",e);n[a.name]||(n[a.name]={}),e.templateStyleUrl&&(n[a.name][""]||(n[a.name][""]=o(e.templateStyleUrl))),e.views&&_.forEach(e.views,function(e,t){if(e.templateStyleUrl)return(t=t.split("@"))[1]?(n[t[1]]||(n[t[1]]={}),void(n[t[1]][t[0]]||(n[t[1]][t[0]]=o(e.templateStyleUrl)))):void(n[a.name][t[0]]=o(e.templateStyleUrl))}),e=a}var i=[];return _.forEach(n,function(e){_.forEach(e,function(e){_.includes(i,e)||i.push(e)})}),i.reverse(),i};return{restrict:"E",link:function(t,o){t.templateStyles=[];var r='<link ng-attr-rel="{{style.rel}}" ng-repeat="style in templateStyles" ng-href="{{style.href}}">';r=r.replace(/\{\{/g,a.startSymbol()),r=r.replace(/\}\}/g,a.endSymbol()),o.append(n(r)(t)),e.$on("$stateChangeStart",function(e,n,a,o,r){t.templateStyles=i(n)})}}}]),angular.module("app").service("EmailSvc",["$http",function(e){var t=this;t.send=function(t){return console.log(t),e.post("/api/email",t)}}]),angular.module("app").service("LanguageSvc",function(){var e=this;e.languages=[{code:"EN",name:"English",flag:"flag-icon-gb"},{code:"NL",name:"Nederlands",flag:"flag-icon-nl"},{code:"FR",name:"Français",flag:"flag-icon-fr"}],e.text=[{code:"EN"},{code:"NL"},{code:"FR"}],e.selectedLanguage=e.languages[0],e.setLanguage=function(t){return e.selectedLanguage=t,t},e.getLanguage=function(){return e.selectedLanguage}});
//# sourceMappingURL=data:application/json;base64,
