var defaultDiacriticsRemovalMap = [{
  base: "A",
  letters: /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g
}, {
  base: "AA",
  letters: /[\uA732]/g
}, {
  base: "AE",
  letters: /[\u00C6\u01FC\u01E2]/g
}, {
  base: "AO",
  letters: /[\uA734]/g
}, {
  base: "AU",
  letters: /[\uA736]/g
}, {
  base: "AV",
  letters: /[\uA738\uA73A]/g
}, {
  base: "AY",
  letters: /[\uA73C]/g
}, {
  base: "B",
  letters: /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g
}, {
  base: "C",
  letters: /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g
}, {
  base: "D",
  letters: /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g
}, {
  base: "DZ",
  letters: /[\u01F1\u01C4]/g
}, {
  base: "Dz",
  letters: /[\u01F2\u01C5]/g
}, {
  base: "E",
  letters: /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g
}, {
  base: "F",
  letters: /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g
}, {
  base: "G",
  letters: /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g
}, {
  base: "H",
  letters: /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g
}, {
  base: "I",
  letters: /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g
}, {
  base: "J",
  letters: /[\u004A\u24BF\uFF2A\u0134\u0248]/g
}, {
  base: "K",
  letters: /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g
}, {
  base: "L",
  letters: /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g
}, {
  base: "LJ",
  letters: /[\u01C7]/g
}, {
  base: "Lj",
  letters: /[\u01C8]/g
}, {
  base: "M",
  letters: /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g
}, {
  base: "N",
  letters: /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g
}, {
  base: "NJ",
  letters: /[\u01CA]/g
}, {
  base: "Nj",
  letters: /[\u01CB]/g
}, {
  base: "O",
  letters: /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g
}, {
  base: "OI",
  letters: /[\u01A2]/g
}, {
  base: "OO",
  letters: /[\uA74E]/g
}, {
  base: "OU",
  letters: /[\u0222]/g
}, {
  base: "P",
  letters: /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g
}, {
  base: "Q",
  letters: /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g
}, {
  base: "R",
  letters: /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g
}, {
  base: "S",
  letters: /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g
}, {
  base: "T",
  letters: /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g
}, {
  base: "TZ",
  letters: /[\uA728]/g
}, {
  base: "U",
  letters: /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g
}, {
  base: "V",
  letters: /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g
}, {
  base: "VY",
  letters: /[\uA760]/g
}, {
  base: "W",
  letters: /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g
}, {
  base: "X",
  letters: /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g
}, {
  base: "Y",
  letters: /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g
}, {
  base: "Z",
  letters: /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g
}, {
  base: "a",
  letters: /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
}, {
  base: "aa",
  letters: /[\uA733]/g
}, {
  base: "ae",
  letters: /[\u00E6\u01FD\u01E3]/g
}, {
  base: "ao",
  letters: /[\uA735]/g
}, {
  base: "au",
  letters: /[\uA737]/g
}, {
  base: "av",
  letters: /[\uA739\uA73B]/g
}, {
  base: "ay",
  letters: /[\uA73D]/g
}, {
  base: "b",
  letters: /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g
}, {
  base: "c",
  letters: /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
}, {
  base: "d",
  letters: /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
}, {
  base: "dz",
  letters: /[\u01F3\u01C6]/g
}, {
  base: "e",
  letters: /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
}, {
  base: "f",
  letters: /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g
}, {
  base: "g",
  letters: /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
}, {
  base: "h",
  letters: /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
}, {
  base: "hv",
  letters: /[\u0195]/g
}, {
  base: "i",
  letters: /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
}, {
  base: "j",
  letters: /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g
}, {
  base: "k",
  letters: /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
}, {
  base: "l",
  letters: /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
}, {
  base: "lj",
  letters: /[\u01C9]/g
}, {
  base: "m",
  letters: /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g
}, {
  base: "n",
  letters: /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
}, {
  base: "nj",
  letters: /[\u01CC]/g
}, {
  base: "o",
  letters: /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
}, {
  base: "oi",
  letters: /[\u01A3]/g
}, {
  base: "ou",
  letters: /[\u0223]/g
}, {
  base: "oo",
  letters: /[\uA74F]/g
}, {
  base: "p",
  letters: /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g
}, {
  base: "q",
  letters: /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g
}, {
  base: "r",
  letters: /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
}, {
  base: "s",
  letters: /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
}, {
  base: "t",
  letters: /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
}, {
  base: "tz",
  letters: /[\uA729]/g
}, {
  base: "u",
  letters: /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
}, {
  base: "v",
  letters: /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g
}, {
  base: "vy",
  letters: /[\uA761]/g
}, {
  base: "w",
  letters: /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g
}, {
  base: "x",
  letters: /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g
}, {
  base: "y",
  letters: /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
}, {
  base: "z",
  letters: /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
}];

String.prototype.removeDiacritics = function () {
  return defaultDiacriticsRemovalMap.reduce((result, letter) => result.replace(letter.letters, letter.base), this);
};

const SPECIAL_CHARACTERS = "\\\\/ !?@#$%^&*()_+:.{},;\\-'``’‘\"";
String.prototype.removeSpecialCharacters = function () {
  return this.replace(new RegExp(`[${SPECIAL_CHARACTERS}]`, "gi"), "");
}, String.prototype.removeAllButLetters = function () {
  return this.toLowerCase().removeDiacritics().removeSpecialCharacters();
}, String.prototype.conceal = function (extra) {
  return this.replace(new RegExp(`[^${SPECIAL_CHARACTERS}${extra}]`, "gi"), "⁎");
}, String.prototype.capitalize = function () {
  return this.charAt(0).toUpperCase() + this.slice(1);
}, String.prototype.removeHTML = function () {
  return this.replace(">", "≻").replace("<", "≺");
}, Number.prototype.makeReadable = function () {
  return this.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

const sortObject = (obj, direction) => {
  let arr = [];

  for (const key in obj) arr.push([key, obj[key]]);

  arr.sort((a, b) => direction ? a[1] - b[1] : b[1] - a[1]);
  let objSorted = {};
  return arr.forEach(item => objSorted[item[0]] = item[1]), objSorted;
};

angular.module("app", ["ui.router", "ui.bootstrap", "ngAnimate", "ngSanitize", "ngDragDrop", "ngTagsInput", "vcRecaptcha", "chart.js", "tc.chartjs"]), angular.module("app").config(["$stateProvider", "$urlRouterProvider", "$urlServiceProvider", "$locationProvider", function ($stateProvider, $urlRouterProvider, $urlServiceProvider, $locationProvider) {
  $urlRouterProvider.otherwise("/home"), $urlServiceProvider.config.strictMode(!1), $stateProvider.state("home", {
    url: "/home",
    templateUrl: "/home.html"
  }).state("policy", {
    url: "/policy",
    templateUrl: "/policy.html"
  }).state("print", {
    url: "/print",
    templateUrl: "/print.html"
  }).state("experience", {
    url: "/experience",
    controller: "ExperienceCtrl",
    templateUrl: "/experience.html"
  }).state("skills", {
    url: "/skills",
    controller: "SkillsCtrl",
    templateUrl: "/skills.html"
  }).state("hobbies", {
    url: "/hobbies",
    controller: "HobbiesCtrl",
    templateUrl: "/hobbies.html"
  }).state("contact", {
    url: "/contact",
    controller: "ContactCtrl",
    templateUrl: "/contact.html"
  }).state("workout", {
    url: "/workout",
    controller: "WorkoutCtrl",
    templateUrl: "/workout.html"
  }).state("posts", {
    url: "/posts",
    controller: "PostsCtrl",
    templateUrl: "/posts.html"
  }).state("profile", {
    url: "/profile",
    controller: "ProfileCtrl",
    templateUrl: "/profile.html"
  }).state("lists", {
    url: "/lists",
    controller: "ListsCtrl",
    templateUrl: "lists.html"
  }).state("prioritize", {
    url: "/prioritize",
    controller: "PrioritizeCtrl",
    templateUrl: "prioritize.html"
  }).state("bubbles", {
    url: "/bubbles",
    controller: "BubblesCtrl",
    templateUrl: "bubbles.html"
  }).state("asteroids", {
    url: "/asteroids",
    controller: "AsteroidsCtrl",
    templateUrl: "asteroids.html"
  }).state("lemmings", {
    url: "/lemmings",
    controller: "LemmingsCtrl",
    templateUrl: "lemmings.html"
  }).state("bots", {
    url: "/bots",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("tenthings", {
    url: "/tenthings",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("tenthings-admin", {
    url: "/tenthings-admin",
    controller: "TenThingsAdminCtrl",
    templateUrl: "tenthings-admin.html"
  }).state("quiz-google", {
    url: "/google",
    controller: "QuizGoogleCtrl",
    templateUrl: "quizzes/google.html"
  }).state("quiz-logos", {
    url: "/logos",
    controller: "QuizLogosCtrl",
    templateUrl: "quizzes/logos.html"
  }).state("quiz-animals", {
    url: "/animals",
    controller: "QuizAnimalsCtrl",
    templateUrl: "quizzes/animals.html"
  }), $locationProvider.html5Mode({
    enabled: !0,
    requireBase: !1
  });
}]), angular.module("app").service("WebSocketSvc", ["$rootScope", "$timeout", function ($rootScope, $timeout) {
  var connection,
      connect = function () {
    (connection = new WebSocket("https:" === window.location.protocol ? "wss://" + window.location.host : "ws://" + window.location.host)).onopen = function () {
      console.log("Websocket connected");
    }, connection.onclose = function (e) {
      console.log("Websocket closed. Reconnecting..."), $timeout(connect, 1e3);
    }, connection.onerror = function (e) {
      console.log("Error: " + e + " - State: " + connection.readyState);
    }, connection.onmessage = function (e) {
      var payload = JSON.parse(e.data);
      $rootScope.$broadcast("ws:" + payload.topic, payload.data);
    };
  };

  this.send = function (topic, data) {
    var json = JSON.stringify({
      topic,
      data
    });
    connection.send(json);
  }, this.connect = connect;
}]).run(["WebSocketSvc", function (WebSocketSvc) {
  WebSocketSvc.connect();
}]), angular.module("app").controller("AppCtrl", ["$scope", "$location", "LanguageSvc", "UserSvc", function ($scope, $location, LanguageSvc, UserSvc) {
  function login(user) {
    $scope.loggedIn || (window.localStorage.user = user._id, $scope.loggedIn = !0, $scope.currentUser = user, $scope.$broadcast("login"));
  }

  console.log("%cYou sneaky bugger!", "font: 2em sans-serif; color: DodgerBlue; text-shadow: 2px 0 0 #444, -2px 0 0 #444, 0 2px 0 #444, 0 -2px 0 #444, 1px 1px #444, -1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444;"), console.log("I'm glad you're curious whether something is popping up in here. I'm a bit of a stickler when it comes to messages in the console so I try to make sure only things I want are visible. That being said, if there is a big error here, I would really appreciate you telling me so I can get rid of it!"), console.log("The code for my resume is hosted on Github if you really want to go into all this! => https://github.com/FlandersBurger/resume"), $(window).load(function () {
    $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
  }), $scope.themeCounter = 6, $scope.today = new Date(), $scope.year = $scope.today.getFullYear(), $scope.random = Math.floor(1e6 * Math.random()), $scope.flipTheme = function () {
    $(".loading").show(), $(".content").hide(), setTimeout(function () {
      $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
    }, 800), $scope.themeCounter = $scope.themeCounter < 6 ? $scope.themeCounter + 1 : $scope.themeCounter = 1;
  }, $.getJSON("/skills.json", function (data) {
    $scope.skills = data.filter(function (skill) {
      return skill.enabled;
    });
  }), $.getJSON("/hobbies.json", function (data) {
    $scope.hobbies = data;
  }), $.getJSON("/experience.json", function (data) {
    $scope.jobs = data, $scope.jobs.forEach(function (job) {
      job.startDate = new Date(job.startDate), job.endDate && (job.endDate = new Date(job.endDate));
    });
  }), $scope.getTimeSpan = function (job) {
    return job.startDate.getFullYear() + (job.endDate ? " - " + job.endDate.getFullYear() : " - Today");
  }, $scope.languages = LanguageSvc.languages, $scope.selectedLanguage = LanguageSvc.getLanguage(), $scope.selectLanguage = function (language) {
    $scope.selectedLanguage = LanguageSvc.setLanguage(language);
  }, $scope.hoverdiv = function (e, divid) {
    var left = e.clientX + "px",
        top = e.clientY + 20 + "px";
    document.getElementById(divid);
    return $("#" + divid).css("left", left), $("#" + divid).css("top", top), $("#" + divid).toggle(), !1;
  }, $scope.socialMedia = [{
    name: "linkedin",
    url: "https://www.linkedin.com/in/laurent-debacker-1633a916",
    icon: "fa-linkedin"
  }, {
    name: "github",
    url: "https://github.com/FlandersBurger",
    icon: "fa-github"
  }, {
    name: "jsfiddle",
    url: "https://jsfiddle.net/user/BelgoCanadian/fiddles/",
    icon: "fa-jsfiddle"
  }, {
    name: "stackoverflow",
    url: "http://stackoverflow.com/users/1083923/belgocanadian",
    icon: "fa-stack-overflow"
  }], window.localStorage.user && UserSvc.login(window.localStorage.user).then(function (response) {
    login(response.data);
  }), $scope.$on("login", function (_, user) {
    login(user);
  }), $scope.$on("update", function (_, user) {
    $scope.currentUser = user, $scope.currentUser.birthDate = new Date($scope.currentUser.birthDate), $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.$on("loading", function (_, user) {
    $scope.loading = !0, $("#loading-icon").show();
  }), $scope.$on("loaded", function (_, user) {
    $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.logout = function () {
    firebase.auth().signOut().then(function () {
      $scope.loggedIn = !1, window.localStorage.clear(), $scope.$broadcast("logout");
    }).catch(function (error) {});
  }, $scope.formatDate = function (date) {
    return (date = new Date(date)).getDate() + "-" + ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][date.getMonth()] + "-" + date.getFullYear();
  }, String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };
}]), angular.module("app").controller("AsteroidsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  $scope.announce = !1;
  var canvas = document.getElementById("asteroids-page"),
      ctx = canvas.getContext("2d");
  ctx.font = "30px Comic Sans MS", ctx.fillStyle = "red", ctx.textAlign = "center";
  var shots = {},
      asteroids = {},
      powerups = {},
      explosions = {},
      map = {},
      space = Math.floor(10 * Math.random()),
      powerupTypes = [{
    name: "speed",
    announcement: "Max Speed ⇧",
    cycle: {
      rows: 1,
      columns: 4,
      size: [14, 35],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.maxSpeed += 100;
    }
  }, {
    name: "cooldown",
    announcement: "Cooldown ⇩",
    cycle: {
      rows: 1,
      columns: 3,
      size: [17, 17],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.cooldown > 0 && (spaceship.cooldownTime -= 1);
    }
  }, {
    name: "range",
    announcement: "Firing Range ⇧",
    cycle: {
      rows: 4,
      columns: 1,
      size: [30, 8],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.range += 5;
    }
  }, {
    name: "shield",
    announcement: "Shield",
    cycle: {
      rows: 5,
      columns: 1,
      size: [19, 19],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.shield = !0;
    }
  }, {
    name: "nuke",
    announcement: "Nuke",
    cycle: {
      rows: 1,
      columns: 8,
      size: [15, 15],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      for (var i in asteroids) asteroids[i].explode();

      spawnAsteroids(5);
    }
  }];
  powerupTypes.forEach(function (powerup, i, array) {
    array[i].img.src = "asteroids/" + powerup.name + ".png";
  });
  var spaceship,
      explosionImage = new Image();

  function evaluateKeys() {
    $scope.playing ? (map[32] && 0 === spaceship.cooldown && spaceship.shoot(), map[37] && (0 === spaceship.rotation ? spaceship.rotation = 360 : spaceship.rotation -= 3), map[39] && (360 === spaceship.rotation ? spaceship.rotation = 0 : spaceship.rotation += 3), map[38] ? spaceship.speed <= spaceship.maxSpeed && (spaceship.speed += 5) : spaceship.speed > 0 && spaceship.speed--, map[40] && spaceship.speed > 0 && (spaceship.speed -= 2)) : map[32] && ($scope.playing = !0, $scope.score = 0, space = Math.floor(10 * Math.random()), $scope.$apply(), spaceship = new Spaceship(), $scope.score = 0, spawnAsteroids(5), function autoSpawn() {
      if (Object.keys(asteroids).length < 200) {
        var id = Math.round(1e8 * Math.random());
        asteroids[id] = new Asteroid(id);
      }

      $scope.playing && setTimeout(function () {
        autoSpawn();
      }, $scope.score < 1e3 ? 1e3 : $scope.score < 2e3 ? 900 : $scope.score < 3e3 ? 800 : $scope.score < 4e3 ? 700 : $scope.score < 5e3 ? 600 : $scope.score < 6e3 ? 500 : $scope.score < 7e3 ? 400 : $scope.score < 8e3 ? 300 : 200);
    }());
  }

  function Spaceship() {
    this.width = 50, this.height = 50, this.shield = !1, this.range = 80, this.cannon = {
      x: this.width / 2 - 4.5,
      y: this.height / 2 - .078125 * this.height
    }, this.cooldown = 0, this.cooldownTime = 20, this.position = [canvas.width / 2 - this.width / 2, canvas.height / 2 - this.height / 2], this.img = new Image(), this.img.src = "asteroids/spaceship.png", this.speed = 0, this.maxSpeed = 1e3, this.angle = 0, this.rotation = 0, this.shoot = function () {
      this.cooldown = this.cooldownTime;
      var id = Math.round(1e8 * Math.random());
      shots[id] = new Shot(id, this);
    }, this.move = function () {
      for (var i in this.shield && (ctx.beginPath(), ctx.arc(this.position[0] + this.width / 2, this.position[1] + this.height / 2, 30, 0, 2 * Math.PI), ctx.fillStyle = "rgb(35, 237, 86, 0.5)", ctx.strokeStyle = "rgb(66, 168, 36, 0.8)", ctx.lineWidth = 5, ctx.stroke(), ctx.fill()), asteroids) {
        var asteroid = asteroids[i];

        if (hit(asteroid, this)) {
          if (!this.shield) return gameOver();
          this.shield = !1, asteroid.explode();
        }
      }

      this.angle = this.rotation, this.cooldown > 0 && this.cooldown--, move(this);
    };
  }

  function Shot(id, spaceship) {
    this.id = id, this.position = [spaceship.position[0] + spaceship.cannon.x + spaceship.cannon.x * Math.cos((spaceship.rotation - 90) * Math.PI / 180), spaceship.position[1] + spaceship.cannon.y + spaceship.cannon.y * Math.sin((spaceship.rotation - 90) * Math.PI / 180)], this.width = 9, this.height = 15, this.angle = spaceship.angle, this.rotation = spaceship.rotation, this.speed = spaceship.speed + 500, this.lifespan = spaceship.range, this.img = new Image(), this.img.src = "asteroids/shot.png", this.move = function () {
      this.lifespan--, move(this);
    };
  }

  function Asteroid(id) {
    this.id = id, this.width = 50 * Math.random() + 20, this.height = this.width, this.position = getEntryPosition(this.width, this.height), this.angle = 360 * Math.random(), this.rotation = 360 * Math.random(), this.rotationSpeed = 6 * Math.random() - 3, this.speed = 300 * Math.random() + 2, this.img = new Image(), this.img.src = "asteroids/asteroid" + (Math.round(6 * Math.random()) + 1) + ".png", this.explode = function () {
      return explosions[this.id] = new Explosion(this), delete asteroids[this.id];
    }, this.move = function () {
      for (var i in this.rotation += this.rotationSpeed, this.rotation > 360 ? this.rotation = this.rotation - 360 : this.rotation < 0 && (this.rotation = 360 + this.rotation), shots) {
        var shot = shots[i];

        if (hit(shot, this)) {
          this.explode();
          var points = Math.floor((shot.speed - 500) / 10 + 70 - this.width);
          Math.floor((points + $scope.score) / 100) > Math.floor($scope.score / 100) && spawnPowerup(), $scope.score += points, $scope.$apply(), delete shots[i];
        }
      }

      move(this);
    };
  }

  function Explosion(object) {
    this.position = [object.position[0], object.position[1]], this.width = object.width, this.height = object.height, this.speed = 0, this.angle = 360 * Math.random(), this.cycle = {
      rows: 6,
      columns: 8,
      size: [256, 256],
      i: 0,
      direction: !0
    }, this.lifespan = 47, this.img = explosionImage, this.move = function () {
      this.lifespan--, move(this), this.cycle.direction ? this.cycle.i++ : this.cycle.i--;
    };
  }

  function Powerup(id) {
    this.id = id, this.powerup = powerupTypes[Math.floor(Math.random() * powerupTypes.length)], this.cycle = this.powerup.cycle, this.lifespan = 1e3, this.cycle.size[1] > this.cycle.size[0] ? (this.height = 40, this.width = Math.round(this.height / this.cycle.size[1] * this.cycle.size[0])) : (this.width = 40, this.height = Math.round(this.width / this.cycle.size[0] * this.cycle.size[1])), this.position = getEntryPosition(this.width, this.height), this.img = this.powerup.img, this.angle = 360 * Math.random(), this.speed = 150 * Math.random() + 50;
    var delay = 5;

    this.move = function () {
      return this.lifespan <= 0 ? delete powerups[this.id] : hit(spaceship, this) ? ($scope.announce = !0, $scope.announcement = this.powerup.announcement, $scope.$apply(), setTimeout(function () {
        $scope.announce = !1, $scope.$apply();
      }, 1e3), this.powerup.activate(spaceship), delete powerups[this.id]) : (this.lifespan--, move(this), void (delay <= 0 ? (this.cycle.direction ? this.cycle.i++ : this.cycle.i--, delay = 5) : delay--));
    };
  }

  function move(object) {
    if (object.position[0] += object.speed / 100 * Math.cos((object.angle - 90) * Math.PI / 180), object.position[1] += object.speed / 100 * Math.sin((object.angle - 90) * Math.PI / 180), object.position[0] > canvas.width ? object.position[0] = -object.width : object.position[0] < -object.width && (object.position[0] = canvas.width), object.position[1] > canvas.height ? object.position[1] = -object.height : object.position[1] < -object.height && (object.position[1] = canvas.height), ctx.save(), ctx.translate(object.position[0], object.position[1]), ctx.translate(object.width / 2, object.height / 2), ctx.rotate(object.rotation * Math.PI / 180), object.cycle) {
      var column = object.cycle.i % object.cycle.columns,
          row = Math.floor(object.cycle.i / object.cycle.columns);
      ctx.drawImage(object.img, object.cycle.size[0] * column, object.cycle.size[1] * row, object.cycle.size[0], object.cycle.size[1], -object.width / 2, -object.height / 2, object.width, object.height), object.cycle.i <= 0 ? (object.cycle.i = 0, object.cycle.direction = !0) : object.cycle.i >= object.cycle.columns * object.cycle.rows && (object.cycle.i = object.cycle.columns * object.cycle.rows - 1, object.cycle.direction = !1);
    } else ctx.drawImage(object.img, -object.width / 2, -object.height / 2, object.width, object.height);

    ctx.restore();
  }

  function getEntryPosition(width, height) {
    var x,
        gridX = 2 * Math.random(),
        gridY = 2 * Math.random(),
        y = 0;
    return gridX >= 1 ? (x = Math.random() * canvas.width, y = y >= 1 ? 0 - height : canvas.height) : (y = Math.random() * canvas.height, x = gridY >= 1 ? 0 - width : canvas.width), [x, y];
  }

  function hit(object1, object2) {
    return object1.position[0] < object2.position[0] + object2.width && object2.position[0] < object1.position[0] + object1.width && object1.position[1] < object2.position[1] + object2.height && object2.position[1] < object1.position[1] + object1.height;
  }

  function spawnAsteroids(amount) {
    var i = 0;

    do {
      var id = Math.round(1e8 * Math.random());
      asteroids[id] = new Asteroid(id);
    } while (i++ <= amount);
  }

  function spawnPowerup() {
    if (Object.keys(powerups).length < 3) {
      var id = Math.round(1e8 * Math.random());
      powerups[id] = new Powerup(id);
    }
  }

  function gameOver() {
    for (var i in $scope.playing = !1, asteroids) asteroids[i].explode();

    shots = {}, $scope.loggedIn ? $scope.currentUser.highscore.asteroids < $scope.score && ($scope.currentUser.highscore.asteroids = $scope.score, GameSvc.setHighscore("asteroids", $scope.currentUser._id, $scope.score)) : $scope.highscore < $scope.score && ($scope.highscore = $scope.score);
  }

  function resizeCanvas() {
    console.log(window.innerWidth), canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }

  explosionImage.src = "asteroids/explosion.png", window.addEventListener("keydown", function (e) {
    map[e.keyCode || e.which] = !0;
  }, !0), window.addEventListener("keyup", function (e) {
    map[e.keyCode || e.which] = !1;
  }, !0), $scope.highscore = 0, window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), requestAnimationFrame(function draw() {
    for (var i in ctx.clearRect(0, 0, canvas.width, canvas.height), shots) shots[i].lifespan <= 0 ? delete shots[i] : shots[i].move();

    for (i in asteroids) asteroids[i].move();

    for (i in powerups) powerups[i].move();

    for (i in explosions) explosions[i].lifespan <= 0 ? delete explosions[i] : explosions[i].move();

    if (evaluateKeys(), $scope.playing) spaceship.move();else {
      var gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
      gradient.addColorStop("0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.25", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.5", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + ")"), gradient.addColorStop("0.75", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("1.0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), ctx.fillStyle = gradient, ctx.font = "60px Monoton", ctx.fillText("Asteroids", canvas.width / 2 - ctx.measureText("Asteroids").width / 2, canvas.height / 2), ctx.font = "20px Aldrich", ctx.fillText("Press space to start", canvas.width / 2 - ctx.measureText("Press space to start").width / 2, canvas.height / 2 + 20), ctx.fillText("Designed and developed by Laurent Debacker", canvas.width / 2 - ctx.measureText("Designed and developed by Laurent Debacker").width / 2, canvas.height - 30);
    }
    (tally += direction ? 1 : -1) > 100 ? (tally = 100, direction = !1) : tally < 0 && (tally = 0, direction = !0);
    requestAnimationFrame(draw);
  });
  var tally = 0,
      direction = !0;

  $scope.space = function () {
    return {
      backgroundImage: 'url("asteroids/space' + space + '.jpg")'
    };
  };
}]), angular.module("app").controller("BubblesCtrl", ["$scope", function ($scope) {
  var canvas = document.getElementById("bubbles-page"),
      ctx = canvas.getContext("2d"),
      bubbles = [],
      colors = ["#ffc300", "#ff5733", "#c70039", "#900c3e", "#571845"];

  function Bubble() {
    this.lifespan = 0, this.radius = 1, this.expanding = !0, this.speed = Math.round(3 * Math.random()), this.circumference = Math.round(50 * Math.random()) + 5, this.maxRadius = Math.round(200 * Math.random()) + 20, this.x = Math.round(Math.random() * canvas.width), this.y = Math.round(Math.random() * canvas.height), this.vx = Math.random() >= .5 ? 1 : -1, this.vy = Math.random() >= .5 ? 1 : -1;
  }

  requestAnimationFrame(function filterBubbles() {
    bubbles.push(new Bubble()), bubbles = bubbles.filter(function (bubble) {
      return bubble.radius === bubble.maxRadius && (bubble.expanding = !1), bubble.x += bubble.vx * bubble.speed, bubble.y += bubble.vy * bubble.speed, bubble.radius += bubble.expanding ? 1 : -1, bubble.radius > 0;
    }), ctx.clearRect(0, 0, canvas.width, canvas.height), bubbles.forEach(function (bubble) {
      Math.round(colors.length * bubble.radius / bubble.maxRadius), ctx.beginPath(), ctx.arc(bubble.x, bubble.y, bubble.radius, 0, 2 * Math.PI), ctx.fillStyle = colors[Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.fill(), ctx.strokeStyle = colors[colors.length - Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.lineWidth = bubble.circumference * bubble.radius / bubble.maxRadius, ctx.stroke();
    }), requestAnimationFrame(filterBubbles);
  }), function () {
    function resizeCanvas() {
      canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 55 : 111);
    }

    window.addEventListener("resize", resizeCanvas, !1), resizeCanvas();
  }();
}]), angular.module("app").controller("ContactCtrl", ["$scope", "EmailSvc", function ($scope, EmailSvc) {
  $scope.options = [{
    name: "Spam",
    text: "I am a spam bot and automatically check the first option I find!"
  }, {
    name: "Opportunitiy",
    text: "You seem to have the skills I seek, I'd like to talk about some opportunities."
  }, {
    name: "Resume",
    text: "I dig the resume, how did you make it?"
  }, {
    name: "Other",
    text: "Sumtin else!"
  }], $scope.contact = {
    email: "",
    name: "",
    phone: "",
    about: "",
    message: ""
  }, $scope.send = function () {
    $scope.sending = !0, console.log("here"), EmailSvc.send({
      email: $scope.contact.email,
      name: $scope.contact.name,
      phone: $scope.contact.phone,
      about: $scope.contact.about,
      message: $scope.contact.message
    }).then(function (response) {
      $scope.sent = !0, console.log("SUCCESS. status=%d, text=%s", response.status, response.text), console.log(response);
    }, function (err) {
      $scope.sending = !1, console.log("FAILED. error=", err);
    });
  };
}]), angular.module("app").controller("ExperienceCtrl", ["$scope", function ($scope) {
  $scope.getSkill = function (skillCode) {
    if ($scope.skills) return $scope.skills.find(function (skill) {
      return skill.code === skillCode;
    });
  };
}]), angular.module("app").controller("HobbiesCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.hobbySelectorVisible = !1, $.getJSON("https://www.reddit.com/user/belgocanadian/about/.json", function (response) {}), $scope.selectedHobby = $scope.hobbies[0], $scope.selectHobby = function (hobby) {
    $scope.selectedHobby = hobby, $scope.hobbySelectorVisible = !1;
  }, $scope.showHobby = function (value, index, array) {
    return !!value.images && value.images.length > 0;
  };
}]), angular.module("app").controller("LemmingsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  var canvas = document.getElementById("lemmings-page"),
      ctx = canvas.getContext("2d"),
      lemmingsImage = new Image();
  lemmingsImage.src = "lemmings/lemmings.png";
  var decorImage = new Image();
  decorImage.src = "lemmings/decor.png";
  var lemmings = {},
      started = !1,
      actions = {
    walk: {
      start: [0, 0],
      end: [320, 20],
      columns: 8,
      rows: 1,
      reverse: !1
    },
    huh: {
      start: [320, 0],
      end: [640, 20],
      columns: 8,
      rows: 1,
      reverse: !0
    },
    fall: {
      start: [0, 80],
      end: [160, 100],
      columns: 4,
      rows: 1,
      reverse: !1
    },
    fly: {
      start: [160, 80],
      end: [480, 110],
      columns: 8,
      rows: 1,
      reverse: !1
    },
    stop: {
      start: [0, 120],
      end: [640, 140],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    climb: {
      start: [0, 160],
      end: [640, 185],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    build: {
      start: [0, 200],
      end: [640, 225],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    punch: {
      start: [0, 240],
      end: [640, 300],
      columns: 16,
      rows: 2,
      reverse: !1
    },
    dig: {
      start: [0, 320],
      end: [320, 345],
      columns: 8,
      rows: 1,
      reverse: !1
    }
  };

  function Lemming(init) {
    this.position = [Math.floor(Math.random() * (canvas.width - 200)) + 100, Math.floor(Math.random() * (canvas.height - 200)) + 100], this.direction = 2 * Math.random() > 1 ? 0 : 1, this.act = function (action) {
      this.action = actions[action], this.cycle = 0, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1] - 20 * (this.action.rows - 1)) / this.action.rows, this.animation = !0;
    }, this.act(init), this.move = function () {
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), 0 === this.direction && ctx.scale(-1, 1);
      var column = this.cycle % this.action.columns,
          row = Math.floor(this.cycle / this.action.columns);
      ctx.drawImage(lemmingsImage, this.width * column + this.action.start[0], (this.height + 20) * row + this.action.start[1], this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore(), this.action.reverse ? this.animation ? (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.animation = !this.animation, this.cycle--)) : (this.cycle--, this.cycle < 0 && (this.animation = !this.animation, this.cycle = 0)) : (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.cycle = 0));
    };
  }

  function resizeCanvas() {
    canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }

  window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), Object.keys(actions).forEach(function (action) {
    lemmings[Math.round(1e8 * Math.random())] = new Lemming(action);
  });
  let hatch = new function () {
    this.position = [20, 20], this.action = {
      start: [0, 0],
      end: [82, 500],
      columns: 1,
      rows: 10
    }, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1]) / this.action.rows, this.cycle = 0, this.open = function () {
      var column, row;
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), started ? (column = this.cycle % this.action.columns, row = Math.floor(this.cycle / this.action.columns), this.cycle < 9 && this.cycle++) : (column = 0, row = 0), ctx.drawImage(decorImage, this.width * column + this.action.start[0], this.height * row + this.action.start[1] - 1, this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore();
    };
  }();
  !function draw() {
    if (ctx.clearRect(0, 0, canvas.width, canvas.height), started) for (var i in lemmings) lemmings[i].move();else ctx.beginPath(), ctx.font = "40px Monoton", ctx.lineWidth = "10", ctx.strokeStyle = "blue", ctx.rect(15, canvas.height - 45, ctx.measureText("Start").width + 20, ctx.measureText("Start").height + canvas.height - 45), ctx.fill(), ctx.fillText("Start", 20, canvas.height - 50);
    hatch.open(), started = !0, setTimeout(function () {
      draw();
    }, 150);
  }();
}]), angular.module("app").controller("ListsCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.showCategory = !0, $scope.init = function () {
    CategoriesSvc.getCategories().then(function (response) {
      for (var i in $scope.categories = response.data, $scope.tasks = [], $scope.categories) for (var j in $scope.categories[i].tasks) $scope.tasks.push({
        category: $scope.categories[i].name,
        task: $scope.categories[i].tasks[j].name
      });
    });
  }, $scope.selectCategory = function (category) {
    for (var i in $scope.selectedCategory = category, $scope.selectedTasks = [], $scope.selectableTasks = [], $scope.selectedCategory.tasks) $scope.selectableTasks.push($scope.selectedCategory.tasks[i]);

    $scope.showCategory = !1, $scope.enteredCategory = "";
  }, $scope.newCategory = function (category) {
    for (var found = !1, i = 0; i < $scope.categories.length; i++) $scope.categories[i].name === category && ($scope.selectCategory($scope.categories[i]), found = !0);

    found || CategoriesSvc.addCategory({
      category
    }).then(function (category) {
      $scope.init(), $scope.selectCategory(category);
    }), $scope.enteredCategory = "";
  }, $scope.newTask = function (task) {
    var found = !1;

    for (var i in $scope.selectedCategory.tasks) $scope.selectedCategory.tasks[i].name === task && (found = !0, $scope.selectTask($scope.selectedCategory.tasks[i]));

    found || CategoriesSvc.addTask($scope.selectedCategory.name, {
      task
    }).then(function () {
      $scope.selectedCategory.tasks.push({
        name: task
      }), $scope.addTask($scope.selectedTasks, $scope.selectedCategory.tasks[$scope.selectedCategory.tasks.length - 1]);
    }), $scope.enteredTask = "";
  }, $scope.selectTask = function (task) {
    $scope.addTask($scope.selectedTasks, task), $scope.removeTask($scope.selectableTasks, task), $scope.enteredTask = "";
  }, $scope.unselectTask = function (task) {
    $scope.addTask($scope.selectableTasks, task), $scope.removeTask($scope.selectedTasks, task);
  }, $scope.addTask = function (taskList, task) {
    taskList.push(task);
  }, $scope.removeTask = function (taskList, task) {
    taskList.splice(taskList.indexOf(task), 1);
  }, $scope.startPrioritizing = function () {
    CategoriesSvc.setPriorityList($scope.selectedTasks), $location.path("/prioritize");
  }, $scope.getQuestions = function () {
    if (!$scope.selectedTasks) return "";

    for (var counter = 0, i = $scope.selectedTasks.length - 1; i > 0; i--) counter += i;

    return counter;
  };
}]), angular.module("app").controller("LoginCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  var ui = new firebaseui.auth.AuthUI(firebase.auth());

  function startUI() {
    ui.start("#firebaseui-auth-container", {
      callbacks: {
        signInSuccess: function (currentUser, credential, redirectUrl) {
          return firebase.auth().currentUser.getIdToken(!0).then(function (idToken) {
            UserSvc.authenticate({
              displayName: currentUser.displayName,
              email: currentUser.email,
              photoURL: currentUser.photoURL,
              emailVerified: currentUser.emailVerified,
              idToken
            }).then(function (response) {
              $scope.$emit("login", response.data), $("#modal-login").modal("hide");
            }, function () {
              $scope.$emit("popup", {
                message: "Login Failed",
                type: "alert-danger"
              });
            });
          }).catch(function (error) {}), !1;
        },
        signInFailure: function (error) {
          if ("firebaseui/anonymous-upgrade-merge-conflict" != error.code) return Promise.resolve();
          var cred = error.credential;
          return firebase.auth().signInWithCredential(cred);
        },
        uiShown: function () {
          document.getElementById("loader").style.display = "none";
        }
      },
      signInSuccessUrl: "/home",
      signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID],
      signInFlow: "popup"
    });
  }

  $scope.$on("logout", function (event) {
    ui.reset(), startUI();
  }), startUI();
}]), angular.module("app").controller("PostsCtrl", ["$scope", "$filter", "PostsSvc", function ($scope, $filter, PostsSvc) {
  $scope.addPost = function () {
    $scope.postBody && PostsSvc.create({
      body: $scope.postBody
    }).then(function (post) {
      $scope.postBody = null;
    });
  }, PostsSvc.fetch().then(function (response) {
    $scope.posts = response.data;
  }), $scope.$on("ws:new_post", function (_, post) {
    $scope.$apply(function () {
      PostsSvc.getPost(post).then(function (response) {
        $scope.posts.unshift(response.data);
      });
    });
  });
}]), angular.module("app").controller("PrioritizeCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.priorityList = CategoriesSvc.getPriorityList(), $scope.priorityList ? ($scope.selectedQuestion = 1, $scope.currentQuestion = 1, $scope.done = !1) : $location.path("/lists"), $scope.makeChoice = function (choice) {
    for (var i in $scope.priorityList) $scope.priorityList[i].id === $scope.selectedQuestion && ($scope.priorityList[i].choice = 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice);

    $scope.selectedQuestion === $scope.currentQuestion && ($scope.currentQuestion = $scope.currentQuestion === $scope.priorityList.length ? 1 : $scope.currentQuestion + 1), $scope.selectedQuestion = $scope.currentQuestion;
    var found = !1;

    for (i in $scope.priorityList) if ("" === $scope.priorityList[i].choice) {
      found = !0;
      break;
    }

    found || ($("#prioritizeChoices").hide(300), $scope.done = !0);
  }, $scope.getButtonValue = function (choice) {
    if (!$scope.priorityList) return "";

    for (var i = 0; i < $scope.priorityList.length; i++) if ($scope.priorityList[i].id === $scope.selectedQuestion) return 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice;
  }, $scope.selectQuestion = function (question) {
    $scope.selectedQuestion = question;
  }, $scope.getFilteredPriorityList = function () {
    return $scope.priorityList ? $scope.priorityList.sort(function (a, b) {
      return a.id - b.id;
    }).filter(function (question) {
      return "" !== question.choice || question.id === $scope.currentQuestion;
    }) : [];
  }, $scope.getChoicesMade = function () {
    if (!$scope.priorityList) return "";
    var choicesMade = 0;

    for (var i in $scope.priorityList) "" !== $scope.priorityList[i].choice && choicesMade++;

    return choicesMade;
  }, $scope.getButtonClass = function (choice) {
    if (!$scope.priorityList) return "";

    for (var i in $scope.priorityList) if ($scope.priorityList[i].id === $scope.selectedQuestion) return "" === $scope.priorityList[i].choice ? "btn-primary" : 1 === choice ? $scope.priorityList[i].firstChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger" : $scope.priorityList[i].secondChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger";
  }, $scope.showChoices = function () {
    $("#prioritizeChoices").show(1e3), $("#reviewChoices").hide();
  }, $scope.chartClick = function (event) {
    $scope.chart && console.log($scope.chart.getSegmentsAtEvent(event));
  }, $scope.showResults = function () {
    for (var i in $scope.data = [], $scope.options = {
      responsive: !0,
      segmentShowStroke: !0,
      segmentStrokeColor: "#fff",
      segmentStrokeWidth: 2,
      percentageInnerCutout: 0,
      animationSteps: 100,
      animationEasing: "easeOutBounce",
      animateRotate: !0,
      animateScale: !1,
      legendTemplate: '<h3 class="tc-chart-js-legend" style="padding:5px"><% for (var i=0; i<segments.length; i++){%><div class="label" style="float:left;margin:5px;background-color:<%=segments[i].fillColor%>"><%if(segments[i].label){%><%=segments[i].label%><%}%></div><%}%></h3>'
    }, CategoriesSvc.choices) for (var j in CategoriesSvc.choices[i].votes = 0, $scope.priorityList) CategoriesSvc.choices[i].name === $scope.priorityList[j].choice && CategoriesSvc.choices[i].votes++;

    for (i in CategoriesSvc.choices.sort(function (a, b) {
      return a.votes < b.votes;
    }), CategoriesSvc.choices) $scope.data.push({
      value: CategoriesSvc.choices[i].votes,
      label: CategoriesSvc.choices[i].name
    });

    $("#prioritizeResult").hide(), $("#prioritizeChoices").hide(), $("#priorityResults").show(1e3);
  };
}]), angular.module("app").controller("ProfileCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  $scope.currentUser ? ($("#sex-indicator").offset({
    left: $scope.currentUser.gender.sex / 200 * $("#sex").width() + $("#sex").offset().left
  }), $("#identity-indicator").offset({
    left: $scope.currentUser.gender.identity / 200 * $("#identity").width() + $("#identity").offset().left
  })) : $location.path("/"), $scope.sexes = ["Male", "FtM Male", "Intersex", "MtF Female", "Female"], $scope.identities = ["Man", "Bigender", "Pangender", "Agender", "Polygender", "Genderfluid", "Genderqueer", "Queer", "Woman"], $scope.dateOptions = {
    maxDate: new Date(),
    minDate: new Date(1900, 1, 1),
    initDate: new Date(2e3, 1, 1),
    datepickerMode: "year"
  }, $scope.gender = function (array, percentage) {
    return array[Math.round(percentage / 200 * (array.length - 1))];
  }, $scope.startSlider = function () {}, $scope.dragSlider = function (event, ui, type) {
    $scope.currentUser.gender[type] = Math.round(($("#" + type + "-indicator").offset().left - $("#" + type).offset().left) / ($("#" + type).width() - $("#" + type + "-indicator").width()) * 200), $scope.$apply();
  }, $scope.stopSlider = function () {}, $scope.usernameToggle = !0, $scope.passwordToggle = !0, $scope.toggleUsername = function () {
    $scope.usernameToggle = !$scope.usernameToggle, $scope.newUsername = $scope.currentUser.username;
  }, $scope.togglePassword = function () {
    $scope.newPassword = null, $scope.confirmPassword = null, $scope.passwordToggle = !$scope.passwordToggle;
  }, $scope.checkPassword = function (password) {
    if (password) {
      var user = $scope.currentUser._id;
      UserSvc.checkPassword(user, password).then(function (response) {
        $scope.togglePassword();
      }, function () {
        var originalBg = $(".password").css("backgroundColor");
        $(".password").animate({
          backgroundColor: "#FFB6C1"
        }, 200).animate({
          backgroundColor: originalBg
        }, 200);
      });
    }
  }, $scope.changePassword = function (oldPassword, newPassword, confirmPassword) {
    if (newPassword) if (newPassword == confirmPassword) {
      var user = $scope.currentUser._id;
      UserSvc.changePassword(user, oldPassword, newPassword).then(function (response) {
        $scope.$emit("popup", {
          message: "Password Changed",
          type: "alert-success"
        }), $scope.oldPassword = null, $scope.togglePassword();
      }, function () {
        $scope.$emit("popup", {
          message: "Password Change Failed",
          type: "alert-danger"
        });
      });
    } else {
      var originalBg = $(".password").css("backgroundColor");
      $(".password").animate({
        backgroundColor: "#FFB6C1"
      }, 200).animate({
        backgroundColor: originalBg
      }, 200);
    }
  }, $scope.changeUsername = function (username) {
    $scope.$emit("loading"), UserSvc.changeUsername($scope.currentUser._id, username).then(function (response) {
      $scope.$emit("update", response.data);
    }, function (response) {
      $scope.$emit("popup", {
        message: username + " already in use",
        type: "alert-danger"
      });
    });
  }, $scope.updateUser = function () {
    $scope.currentUser && ($scope.$emit("loading"), UserSvc.updateUser($scope.currentUser).then(function (response) {
      $scope.$emit("update", response.data);
    }));
  }, $scope.$watch("currentUser.flags.length", function (length) {
    $scope.updateUser();
  }), $scope.loadCountries = function ($query) {
    return [{
      name: "Andorra",
      flag: "flag-ad",
      tidbit: ""
    }, {
      name: "United Arab Emirates",
      flag: "flag-ae"
    }, {
      name: "Afghanistan",
      flag: "flag-af"
    }, {
      name: "Antigua and Barbuda",
      flag: "flag-ag"
    }, {
      name: "Anguilla",
      flag: "flag-ai"
    }, {
      name: "Albania",
      flag: "flag-al"
    }, {
      name: "Armenia",
      flag: "flag-am"
    }, {
      name: "Angola",
      flag: "flag-ao"
    }, {
      name: "Antarctica",
      flag: "flag-aq"
    }, {
      name: "Argentina",
      flag: "flag-ar"
    }, {
      name: "American Somoa",
      flag: "flag-as"
    }, {
      name: "Austria",
      flag: "flag-at"
    }, {
      name: "Australia",
      flag: "flag-au"
    }, {
      name: "Aruba",
      flag: "flag-aw"
    }, {
      name: "Åland Islands",
      flag: "flag-ax"
    }, {
      name: "Azerbaijan",
      flag: "flag-az"
    }, {
      name: "Bosnia and Herzegovina",
      flag: "flag-ba"
    }, {
      name: "Barbados",
      flag: "flag-bb"
    }, {
      name: "Bangladesh",
      flag: "flag-bd"
    }, {
      name: "Belgium",
      flag: "flag-be"
    }, {
      name: "Burkina Faso",
      flag: "flag-bf"
    }, {
      name: "Bulgaria",
      flag: "flag-bg"
    }, {
      name: "Bahrain",
      flag: "flag-bh"
    }, {
      name: "Burundi",
      flag: "flag-bi"
    }, {
      name: "Benin",
      flag: "flag-bj"
    }, {
      name: "Saint Barthélemy",
      flag: "flag-bl"
    }, {
      name: "Bermuda",
      flag: "flag-bm"
    }, {
      name: "Brunei ",
      flag: "flag-bn"
    }, {
      name: "Bolivia, Plurinational State of",
      flag: "flag-bo"
    }, {
      name: "Bonaire, Sint Eustatius and Saba",
      flag: "flag-bq"
    }, {
      name: "Brazil",
      flag: "flag-br"
    }, {
      name: "Bahamas",
      flag: "flag-bs"
    }, {
      name: "Bhutan",
      flag: "flag-bt"
    }, {
      name: "Bouvet Island",
      flag: "flag-bv"
    }, {
      name: "Botswana",
      flag: "flag-bw"
    }, {
      name: "Belarus",
      flag: "flag-by"
    }, {
      name: "Belize",
      flag: "flag-bz"
    }, {
      name: "Canada",
      flag: "flag-ca"
    }, {
      name: "Cocos (Keeling) Islands",
      flag: "flag-cc"
    }, {
      name: "Congo, the Democratic Republic of the",
      flag: "flag-cd"
    }, {
      name: "Central African Republic",
      flag: "flag-cf"
    }, {
      name: "Congo",
      flag: "flag-cg"
    }, {
      name: "Switzerland",
      flag: "flag-ch"
    }, {
      name: "Côte d'Ivoire",
      flag: "flag-ci"
    }, {
      name: "Cook Islands",
      flag: "flag-ck"
    }, {
      name: "Chile",
      flag: "flag-cl"
    }, {
      name: "Cameroon",
      flag: "flag-cm"
    }, {
      name: "China",
      flag: "flag-cn"
    }, {
      name: "Colombia",
      flag: "flag-co"
    }, {
      name: "Costa Rica",
      flag: "flag-cr"
    }, {
      name: "Cuba",
      flag: "flag-cu"
    }, {
      name: "Cabo Verde",
      flag: "flag-cv"
    }, {
      name: "Curaçao",
      flag: "flag-cw"
    }, {
      name: "Christmas Island",
      flag: "flag-cx"
    }, {
      name: "Cyprus",
      flag: "flag-cy"
    }, {
      name: "Czech Republic",
      flag: "flag-cz"
    }, {
      name: "Germany",
      flag: "flag-de"
    }, {
      name: "Djibouti",
      flag: "flag-dj"
    }, {
      name: "Denmark",
      flag: "flag-dk"
    }, {
      name: "Dominica",
      flag: "flag-dm"
    }, {
      name: "Dominican Republic",
      flag: "flag-do"
    }, {
      name: "Algeria",
      flag: "flag-dz"
    }, {
      name: "Ecuador",
      flag: "flag-ec"
    }, {
      name: "Estonia",
      flag: "flag-ee"
    }, {
      name: "Egypt",
      flag: "flag-eg"
    }, {
      name: "Western Sahara",
      flag: "flag-eh"
    }, {
      name: "Eritrea",
      flag: "flag-er"
    }, {
      name: "Spain",
      flag: "flag-es"
    }, {
      name: "Ethiopia",
      flag: "flag-et"
    }, {
      name: "Finland",
      flag: "flag-fi"
    }, {
      name: "Fiji",
      flag: "flag-fj"
    }, {
      name: "Falkland Islands (Malvinas)",
      flag: "flag-fk"
    }, {
      name: "Micronesia, Federated States of",
      flag: "flag-fm"
    }, {
      name: "Faroe Islands",
      flag: "flag-fo"
    }, {
      name: "France",
      flag: "flag-fr"
    }, {
      name: "Gabon",
      flag: "flag-ga"
    }, {
      name: "United Kingdom of Great Britain and Northern Ireland",
      flag: "flag-gb"
    }, {
      name: "Grenada",
      flag: "flag-gd"
    }, {
      name: "Georgia",
      flag: "flag-ge"
    }, {
      name: "French Guiana",
      flag: "flag-gf"
    }, {
      name: "Guernsey",
      flag: "flag-gg"
    }, {
      name: "Ghana",
      flag: "flag-gh"
    }, {
      name: "Gibraltar",
      flag: "flag-gi"
    }, {
      name: "Greenland",
      flag: "flag-gl"
    }, {
      name: "Gambia",
      flag: "flag-gm"
    }, {
      name: "Guinea",
      flag: "flag-gn"
    }, {
      name: "Guadeloupe",
      flag: "flag-gp"
    }, {
      name: "Equatorial Guinea",
      flag: "flag-gq"
    }, {
      name: "Greece",
      flag: "flag-gr"
    }, {
      name: "South Georgia and the South Sandwich Islands",
      flag: "flag-gs"
    }, {
      name: "Guatemala",
      flag: "flag-gt"
    }, {
      name: "Guam",
      flag: "flag-gu"
    }, {
      name: "Guinea-Bissau",
      flag: "flag-gw"
    }, {
      name: "Guyana",
      flag: "flag-gy"
    }, {
      name: "Hong Kong",
      flag: "flag-hk"
    }, {
      name: "Heard Island and McDonald Islands",
      flag: "flag-hm"
    }, {
      name: "Honduras",
      flag: "flag-hn"
    }, {
      name: "Croatia",
      flag: "flag-hr"
    }, {
      name: "Haiti",
      flag: "flag-ht"
    }, {
      name: "Hungary",
      flag: "flag-hu"
    }, {
      name: "Indonesia",
      flag: "flag-id"
    }, {
      name: "Ireland",
      flag: "flag-ie"
    }, {
      name: "Israel",
      flag: "flag-il"
    }, {
      name: "Isle of Man",
      flag: "flag-im"
    }, {
      name: "India",
      flag: "flag-in"
    }, {
      name: "British Indian Ocean Territory",
      flag: "flag-io"
    }, {
      name: "Iraq",
      flag: "flag-iq"
    }, {
      name: "Iran, Islamic Republic of",
      flag: "flag-ir"
    }, {
      name: "Iceland",
      flag: "flag-is"
    }, {
      name: "Italy",
      flag: "flag-it"
    }, {
      name: "Jersey",
      flag: "flag-je"
    }, {
      name: "Jamaica",
      flag: "flag-jm"
    }, {
      name: "Jordan",
      flag: "flag-jo"
    }, {
      name: "Japan",
      flag: "flag-jp"
    }, {
      name: "Kenya",
      flag: "flag-ke"
    }, {
      name: "Kyrgyzstan",
      flag: "flag-kg"
    }, {
      name: "Cambodia",
      flag: "flag-kh"
    }, {
      name: "Kiribati",
      flag: "flag-ki"
    }, {
      name: "Comoros",
      flag: "flag-km"
    }, {
      name: "Saint Kitts and Nevis",
      flag: "flag-kn"
    }, {
      name: "Korea, Democratic People's Republic of",
      flag: "flag-kp"
    }, {
      name: "Korea, Republic of",
      flag: "flag-kr"
    }, {
      name: "Kuwait",
      flag: "flag-kw"
    }, {
      name: "Cayman Islands",
      flag: "flag-ky"
    }, {
      name: "Kazakhstan",
      flag: "flag-kz"
    }, {
      name: "Lao People's Democratic Republic",
      flag: "flag-la"
    }, {
      name: "Lebanon",
      flag: "flag-lb"
    }, {
      name: "Saint Lucia",
      flag: "flag-lc"
    }, {
      name: "Liechtenstein",
      flag: "flag-li"
    }, {
      name: "Sri Lanka",
      flag: "flag-lk"
    }, {
      name: "Liberia",
      flag: "flag-lr"
    }, {
      name: "Lesotho",
      flag: "flag-ls"
    }, {
      name: "Lithuania",
      flag: "flag-lt"
    }, {
      name: "Luxembourg",
      flag: "flag-lu"
    }, {
      name: "Latvia",
      flag: "flag-lv"
    }, {
      name: "Libya",
      flag: "flag-ly"
    }, {
      name: "Morocco",
      flag: "flag-ma"
    }, {
      name: "Monaco",
      flag: "flag-mc"
    }, {
      name: "Moldova, Republic of",
      flag: "flag-md"
    }, {
      name: "Montenegro",
      flag: "flag-me"
    }, {
      name: "Saint Martin (French part)",
      flag: "flag-mf"
    }, {
      name: "Madagascar",
      flag: "flag-mg"
    }, {
      name: "Marshall Islands",
      flag: "flag-mh"
    }, {
      name: "Macedonia, the former Yugoslav Republic of",
      flag: "flag-mk"
    }, {
      name: "Mali",
      flag: "flag-ml"
    }, {
      name: "Myanmar",
      flag: "flag-mm"
    }, {
      name: "Mongolia",
      flag: "flag-mn"
    }, {
      name: "Macao",
      flag: "flag-mo"
    }, {
      name: "Northern Mariana Islands",
      flag: "flag-mp"
    }, {
      name: "Martinique",
      flag: "flag-mq"
    }, {
      name: "Mauritania",
      flag: "flag-mr"
    }, {
      name: "Montserrat",
      flag: "flag-ms"
    }, {
      name: "Malta",
      flag: "flag-mt"
    }, {
      name: "Mauritius",
      flag: "flag-mu"
    }, {
      name: "Maldives",
      flag: "flag-mv"
    }, {
      name: "Malawi",
      flag: "flag-mw"
    }, {
      name: "Mexico",
      flag: "flag-mx"
    }, {
      name: "Malaysia",
      flag: "flag-my"
    }, {
      name: "Mozambique",
      flag: "flag-mz"
    }, {
      name: "Namibia",
      flag: "flag-na"
    }, {
      name: "New Caledonia",
      flag: "flag-nc"
    }, {
      name: "Niger",
      flag: "flag-ne"
    }, {
      name: "Norfolk Island",
      flag: "flag-nf"
    }, {
      name: "Nigeria",
      flag: "flag-ng"
    }, {
      name: "Nicaragua",
      flag: "flag-ni"
    }, {
      name: "Netherlands",
      flag: "flag-nl"
    }, {
      name: "Norway",
      flag: "flag-no"
    }, {
      name: "Nepal",
      flag: "flag-np"
    }, {
      name: "Nauru",
      flag: "flag-nr"
    }, {
      name: "Niue",
      flag: "flag-nu"
    }, {
      name: "New Zealand",
      flag: "flag-nz"
    }, {
      name: "Oman",
      flag: "flag-om"
    }, {
      name: "Panama",
      flag: "flag-pa"
    }, {
      name: "Peru",
      flag: "flag-pe"
    }, {
      name: "French Polynesia",
      flag: "flag-pf"
    }, {
      name: "Papua New Guinea",
      flag: "flag-pg"
    }, {
      name: "Philippines",
      flag: "flag-ph"
    }, {
      name: "Pakistan",
      flag: "flag-pk"
    }, {
      name: "Poland",
      flag: "flag-pl"
    }, {
      name: "Saint Pierre and Miquelon",
      flag: "flag-pm"
    }, {
      name: "Pitcairn",
      flag: "flag-pn"
    }, {
      name: "Puerto Rico",
      flag: "flag-pr"
    }, {
      name: "Palestine, State of",
      flag: "flag-ps"
    }, {
      name: "Portugal",
      flag: "flag-pt"
    }, {
      name: "Palau",
      flag: "flag-pw"
    }, {
      name: "Paraguay",
      flag: "flag-py"
    }, {
      name: "Qatar",
      flag: "flag-qa"
    }, {
      name: "Réunion",
      flag: "flag-re"
    }, {
      name: "Romania",
      flag: "flag-ro"
    }, {
      name: "Serbia",
      flag: "flag-rs"
    }, {
      name: "Russian Federation",
      flag: "flag-ru"
    }, {
      name: "Rwanda",
      flag: "flag-rw"
    }, {
      name: "Saudi Arabia",
      flag: "flag-sa"
    }, {
      name: "Solomon Islands",
      flag: "flag-sb"
    }, {
      name: "Seychelles",
      flag: "flag-sc"
    }, {
      name: "Sudan",
      flag: "flag-sd"
    }, {
      name: "Sweden",
      flag: "flag-se"
    }, {
      name: "Singapore",
      flag: "flag-sg"
    }, {
      name: "Saint Helena, Ascension and Tristan da Cunha",
      flag: "flag-sh"
    }, {
      name: "Slovenia",
      flag: "flag-si"
    }, {
      name: "Svalbard and Jan Mayen",
      flag: "flag-sj"
    }, {
      name: "Slovakia",
      flag: "flag-sk"
    }, {
      name: "Sierra Leone",
      flag: "flag-sl"
    }, {
      name: "San Marino",
      flag: "flag-sm"
    }, {
      name: "Senegal",
      flag: "flag-sn"
    }, {
      name: "Somalia",
      flag: "flag-so"
    }, {
      name: "Suriname",
      flag: "flag-sr"
    }, {
      name: "South Sudan",
      flag: "flag-ss"
    }, {
      name: "Sao Tome and Principe",
      flag: "flag-st"
    }, {
      name: "El Salvador",
      flag: "flag-sv"
    }, {
      name: "Sint Maarten (Dutch part)",
      flag: "flag-sx"
    }, {
      name: "Syrian Arab Republic",
      flag: "flag-sy"
    }, {
      name: "Swaziland",
      flag: "flag-sz"
    }, {
      name: "Turks and Caicos Islands",
      flag: "flag-tc"
    }, {
      name: "Chad",
      flag: "flag-td"
    }, {
      name: "French Southern Territories",
      flag: "flag-tf"
    }, {
      name: "Togo",
      flag: "flag-tg"
    }, {
      name: "Thailand",
      flag: "flag-th"
    }, {
      name: "Tajikistan",
      flag: "flag-tj"
    }, {
      name: "Tokelau",
      flag: "flag-tk"
    }, {
      name: "Timor-Leste",
      flag: "flag-tl"
    }, {
      name: "Turkmenistan",
      flag: "flag-tm"
    }, {
      name: "Tunisia",
      flag: "flag-tn"
    }, {
      name: "Tonga",
      flag: "flag-to"
    }, {
      name: "Turkey",
      flag: "flag-tr"
    }, {
      name: "Trinidad and Tobago",
      flag: "flag-tt"
    }, {
      name: "Tuvalu",
      flag: "flag-tv"
    }, {
      name: "Taiwan, Province of China",
      flag: "flag-tw"
    }, {
      name: "Tanzania, United Republic of",
      flag: "flag-tz"
    }, {
      name: "Ukraine",
      flag: "flag-ua"
    }, {
      name: "Uganda",
      flag: "flag-ug"
    }, {
      name: "United States Minor Outlying Islands",
      flag: "flag-um"
    }, {
      name: "United States of America",
      flag: "flag-us"
    }, {
      name: "Uruguay",
      flag: "flag-uy"
    }, {
      name: "Uzbekistan",
      flag: "flag-uz"
    }, {
      name: "Holy See",
      flag: "flag-va"
    }, {
      name: "Saint Vincent and the Grenadines",
      flag: "flag-vc"
    }, {
      name: "Venezuela, Bolivarian Republic of",
      flag: "flag-ve"
    }, {
      name: "Virgin Islands, British",
      flag: "flag-vg"
    }, {
      name: "Virgin Islands, U.S.",
      flag: "flag-vi"
    }, {
      name: "Viet Nam",
      flag: "flag-vn"
    }, {
      name: "Vanuatu",
      flag: "flag-vu"
    }, {
      name: "Wallis and Futuna",
      flag: "flag-wf"
    }, {
      name: "Samoa",
      flag: "flag-ws"
    }, {
      name: "Yemen",
      flag: "flag-ye"
    }, {
      name: "Mayotte",
      flag: "flag-yt"
    }, {
      name: "South Africa",
      flag: "flag-za"
    }, {
      name: "Zambia",
      flag: "flag-zm"
    }, {
      name: "Zimbabwe",
      flag: "flag-zw"
    }].filter(function (country) {
      return -1 != country.name.toLowerCase().indexOf($query.toLowerCase());
    });
  };
}]), angular.module("app").controller("SkillsCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.selectedSkill = 0, $scope.skillsVisible = !1, $scope.labels = ["Download Sales", "In-Store Sales", "Mail-Order Sales"], $scope.data = [300, 500, 100], $.getJSON("/skills.json", function (data) {
    $scope.skills = data.filter(function (skill) {
      return skill.enabled;
    }), $scope.setSelectedSkill = function (skill) {
      $scope.selectedSkill = skill, $scope.selectedSkill.chartOptions = {
        cutoutPercentage: 80,
        circumference: 2 * Math.PI,
        maintainAspectRatio: !0,
        tooltips: {
          enabled: !1
        }
      }, $scope.selectedSkill.chartStyle = {
        "background-image": "url(/skills/" + $scope.selectedSkill.image + ")",
        "background-repeat": "no-repeat",
        "background-size": "60%",
        "background-position": "50% 50%"
      };
    }, $scope.setSelectedSkill($scope.skills[0]), $scope.$apply();
  });
}]), angular.module("app").controller("TenThingsCtrl", ["$scope", "BotSvc", function ($scope, BotSvc) {
  function flash(element) {
    const color = $(element).css("background-color");
    $(element).animate({
      backgroundColor: "#FA8072"
    }, 100, () => {
      $(element).animate({
        backgroundColor: color
      }, 100);
    });
  }

  $scope.search = {
    name: "",
    values: ""
  }, BotSvc.getCategories().then(response => {
    $scope.categories = response.data, $scope.categoryFilters = $scope.categories.map(category => category), $scope.categoryFilters.push("All"), $scope.categoryFilters.push("Blank"), $scope.categoryFilter = "All", $scope.updateFilter = "all";
  }), BotSvc.getLanguages().then(response => {
    $scope.languages = response.data;
  }), $scope.keyDown = e => {
    switch ((e = e || window.event).keyCode) {
      case 9:
        $("#new-blurb").is(":focus") && setTimeout(() => {
          $scope.addValue();
        }, 100);
        break;

      case 13:
        $("#new-blurb").is(":focus") ? $scope.addValue() : $("#new-value").is(":focus") && $("#new-blurb").focus();
    }
  }, $scope.searchName = "", $scope.newItem = {}, $scope.setCategoryFilter = category => $scope.categoryFilter = category, $scope.setUserFilter = user => $scope.userFilter = user, $scope.setUpdateFilter = type => $scope.updateFilter = type, $scope.filteredLists = () => $scope.lists ? $scope.lists.filter(({
    categories,
    isDynamic,
    creator
  }) => ("all" === $scope.updateFilter || !("static" === $scope.updateFilter && !0 === isDynamic || "dynamic" === $scope.updateFilter && !1 === isDynamic)) && ("All" === $scope.categoryFilter && "All" === $scope.userFilter || ("All" !== $scope.categoryFilter && "All" === $scope.userFilter ? categories.length > 0 ? categories.indexOf($scope.categoryFilter) >= 0 : "Blank" === $scope.categoryFilter : "All" === $scope.categoryFilter && "All" !== $scope.userFilter ? creator === $scope.userFilter : categories.length > 0 ? categories.indexOf($scope.categoryFilter) >= 0 && creator === $scope.userFilter : "Blank" === $scope.categoryFilter && creator === $scope.userFilter))) : [], $scope.$on("login", _ => {
    $scope.getLists();
  }), $scope.sort = (sortValue, sortLabel) => {
    $scope.sortLabel = sortLabel, $scope.sortValue === sortValue ? $scope.sortDirection = !$scope.sortDirection : ($scope.sortValue = sortValue, $scope.sortDirection = !0), $scope.sorter = ($scope.sortDirection ? "+" : "-") + $scope.sortValue;
  }, $scope.sortList = "value", $scope.sortValue = "date", $scope.sortDirection = !0, $scope.sort("date", "Creation Date"), $scope.getCategoryCount = category => $scope.lists ? $scope.lists.filter(list => ("All" === category || list.categories.indexOf(category) >= 0) && ("All" === $scope.userFilter || list.creator === $scope.userFilter) && ("all" === $scope.updateFilter || list.isDynamic === ("dynamic" === $scope.updateFilter))).length : 0, $scope.getUpdateCount = type => $scope.lists ? $scope.lists.filter(list => "all" === type || list.isDynamic && "dynamic" === type || !list.isDynamic && "static" === type).length : 0, $scope.getLists = () => {
    $scope.loading || ($scope.loading = !0, BotSvc.getLists($scope.currentUser).then(({
      data
    }) => {
      $scope.lists = data, $scope.userFilters = {}, $scope.userFilters.All = $scope.lists.length, $scope.userFilters = $scope.lists.sort((list1, list2) => list1.creator > list2.creator).reduce((users, {
        creator
      }) => (users[creator] || (users[creator] = 0), users[creator]++, users), $scope.userFilters), $scope.userCount = Object.keys($scope.userFilters).length, $scope.userFilters = sortObject($scope.userFilters, !1), $scope.userFilter = "All", $scope.loading = !1;
    }));
  }, $scope.selectList = list => {
    BotSvc.getList(list).then(({
      data
    }) => {
      $scope.selectedList = data;
    });
  }, $scope.selectCategory = category => {
    $scope.selectedList.category = category, $("#category-select").hide();
  }, $scope.getCategoryClass = category => $scope.selectedList && $scope.selectedList.categories.indexOf(category) >= 0 ? "btn-success" : "btn-default", $scope.toggleCategory = category => {
    const categoryIndex = $scope.selectedList.categories.indexOf(category);
    categoryIndex >= 0 ? $scope.selectedList.categories.splice(categoryIndex, 1) : $scope.selectedList.categories.push(category);
  }, $scope.selectLanguage = language => {
    $scope.selectedList.language = language.code;
    const nonEnglishIndex = $scope.selectedList.categories.indexOf("Non-English");
    "EN" !== language.code && nonEnglishIndex < 0 ? $scope.selectedList.categories.push("Non-English") : "EN" === language.code && nonEnglishIndex >= 0 && $scope.selectedList.categories.splice(nonEnglishIndex, 1);
  }, $scope.addList = () => {
    const currentLanguage = $scope.selectedList ? $scope.selectedList.language : "EN";
    $scope.selectedList = {
      name: "",
      creator: $scope.currentUser._id,
      date: new Date(),
      values: [],
      answers: 0,
      isDynamic: !0,
      category: "",
      categories: [],
      language: currentLanguage
    };
  }, $scope.addValue = () => {
    $scope.newItem.value && (_.some($scope.selectedList.values, value => value == $scope.newItem.value) ? alert($scope.newItem.value + " is already in the list") : ($scope.newItem.creator = $scope.currentUser._id, $scope.selectedList.values.unshift(JSON.parse(JSON.stringify($scope.newItem))), $scope.selectedList.answers++, $scope.newItem.value = "", $scope.newItem.blurb = "", $scope.selectedList.values.length >= 10 && $scope.selectedList.name && $scope.selectedList.categories.length > 0 && $scope.saveList($scope.selectedList))), $("#new-value").focus();
  }, $scope.reportList = list => {
    list.reported = !0, BotSvc.reportList($scope.currentUser, list);
  }, $scope.saveList = list => {
    $scope.saving || (list.values = list.values.filter(({
      value
    }) => value), list.values.length >= 10 && list.name && list.categories.length > 0 ? ($scope.saving = !0, BotSvc.saveList($scope.currentUser, list).then(({
      data
    }) => {
      if ($scope.selectedList._id) {
        for (let i = 0; i < $scope.lists.length; i++) if ($scope.lists[i]._id === data._id) {
          $scope.lists[i] = data;
          break;
        }

        $scope.selectList(list);
      } else $scope.lists.unshift(data), $scope.selectList(data);

      $scope.saving = !1;
    }, err => {
      console.error(err), $scope.saving = !1;
    })) : list.values.length < 10 ? alert("Lists must contain 10 or more values!") : list.name ? flash(".list-category") : flash("#list-name"));
  }, $scope.deleteList = list => {
    list._id ? confirm("Are you sure you want to delete this list?") && BotSvc.deleteList(list).then(response => {
      $scope.getLists(), $scope.selectedList = null;
    }) : ($scope.lists = $scope.lists.filter(({
      _id
    }) => _id), $scope.selectedList = null);
  }, $scope.listButtonClass = list => {
    const values = list.values,
          blurbs = list.blurbs;
    return values === blurbs && list.description ? "btn-default" : 0 !== blurbs || list.description ? 0 === blurbs && list.description ? "btn-info" : "btn-primary" : "btn-warning";
  }, $scope.getMoviePics = () => {
    BotSvc.getMoviePics($scope.selectedList).then(response => $scope.selectList($scope.selectedList));
  }, $scope.getActorPics = () => {
    BotSvc.getActorPics($scope.selectedList).then(response => $scope.selectList($scope.selectedList));
  }, $scope.getBookPics = () => {
    BotSvc.getBookPics($scope.selectedList).then(response => $scope.selectList($scope.selectedList));
  }, $scope.getMusicVideos = () => {
    BotSvc.getMusicVideos($scope.selectedList).then(response => $scope.selectList($scope.selectedList));
  };
}]), angular.module("app").controller("TenThingsAdminCtrl", ["$scope", "BotSvc", "UserSvc", function ($scope, BotSvc, UserSvc) {
  $scope.$on("login", _ => {
    $scope.currentUser.admin && getUsers();
  }), $scope.getQueue = () => {
    $scope.loading = !0, BotSvc.getQueue().then(response => {
      $scope.queue = response.data.replace("/n", "<br/>"), $scope.loading = !1;
    });
  }, $scope.getQueue(), BotSvc.getPause().then(response => {
    $scope.paused = response.data, console.log($scope.paused);
  });

  const getUsers = () => {
    $scope.loading = !0, UserSvc.getUsers().then(response => {
      $scope.users = response.data.filter(user => !user.admin), $scope.loading = !1;
    });
  };

  $scope.toggleBan = user => {
    $scope.loading = !0, UserSvc.toggleBan(user._id).then(response => {
      getUsers();
    });
  }, $scope.togglePause = user => {
    BotSvc.togglePause().then(response => {
      $scope.paused = response.data, console.log($scope.paused);
    });
  };
}]), angular.module("app").controller("WorkoutCtrl", ["$scope", function ($scope) {
  $scope.timeRemaining = 0, $scope.timeExercising = 30, $scope.timeResting = 10, $scope.rest = !1;
  var exercising,
      sounds = {
    on: new Audio("on.wav"),
    off: new Audio("off.wav"),
    switch: new Audio("switch.wav")
  },
      exercises = [{
    name: "Jumping Jacks",
    split: !1
  }, {
    name: "Wall Sit",
    split: !1
  }, {
    name: "Push-Up",
    split: !1
  }, {
    name: "Crunch",
    split: !1
  }, {
    name: "Step-Up",
    split: !0
  }, {
    name: "Squat",
    split: !1
  }, {
    name: "Triceps Dip",
    split: !1
  }, {
    name: "Plank",
    split: !1
  }, {
    name: "High Knees",
    split: !1
  }, {
    name: "Lunge",
    split: !1
  }, {
    name: "Push-Up with Rotation",
    split: !1
  }, {
    name: "Side Plank",
    split: !0
  }];
  $scope.progress = function () {
    return exercises.length - Math.floor($scope.timeRemaining / ($scope.timeExercising + $scope.timeResting)) + "/" + exercises.length;
  }, $scope.workout = function () {
    var excerciseTime = $scope.timeExercising + $scope.timeResting;
    $scope.timeRemaining ? (clearInterval(exercising), $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.exercise = {
      name: "",
      split: !1
    }) : ($scope.timeRemaining = exercises.length * excerciseTime, exercising = setInterval(function () {
      if ($scope.timeRemaining--, 0 === $scope.timeRemaining) return $scope.exercise = {
        name: "Finished! Congrats!",
        split: !1
      }, $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.$apply(), clearInterval(exercising);
      var currentExercise = Math.floor($scope.timeRemaining / excerciseTime),
          timer = $scope.timeRemaining - currentExercise * excerciseTime;
      $scope.timer = timer > $scope.timeExercising ? timer - $scope.timeExercising : timer, timer > $scope.timeExercising ? $scope.rest = !0 : $scope.rest = !1, $scope.exercise = exercises[exercises.length - currentExercise - 1], timer === $scope.timeExercising ? sounds.on.play() : 0 === timer ? sounds.off.play() : $scope.exercise.split && timer === Math.floor($scope.timeExercising / 2) && sounds.switch.play(), $scope.$apply();
    }, 1e3));
  };
}]), angular.module("app").directive("head", ["$rootScope", "$state", "$compile", "$interpolate", function ($rootScope, $state, $compile, $interpolate) {
  var getStyle = function (templateStyleUrl) {
    var style = {
      href: templateStyleUrl,
      rel: "stylesheet"
    };
    return style.href.match(/\.less$/) && (style.rel = "stylesheet/less"), style;
  };

  return {
    restrict: "E",
    link: function (scope, elem) {
      scope.templateStyles = [];
      var html = '<link ng-attr-rel="{{style.rel}}" ng-repeat="style in templateStyles" ng-href="{{style.href}}">';
      html = (html = html.replace(/\{\{/g, $interpolate.startSymbol())).replace(/\}\}/g, $interpolate.endSymbol()), elem.append($compile(html)(scope)), $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
        scope.templateStyles = function (state) {
          for (var states = {}; "" !== state.name;) {
            var parent = $state.get("^", state);
            states[parent.name] || (states[parent.name] = {}), state.templateStyleUrl && (states[parent.name][""] || (states[parent.name][""] = getStyle(state.templateStyleUrl))), state.views && _.forEach(state.views, function (view, key) {
              if (view.templateStyleUrl) return (key = key.split("@"))[1] ? (states[key[1]] || (states[key[1]] = {}), void (states[key[1]][key[0]] || (states[key[1]][key[0]] = getStyle(view.templateStyleUrl)))) : void (states[parent.name][key[0]] = getStyle(view.templateStyleUrl));
            }), state = parent;
          }

          var flat = [];
          return _.forEach(states, function (views) {
            _.forEach(views, function (style) {
              _.includes(flat, style) || flat.push(style);
            });
          }), flat.reverse(), flat;
        }(toState);
      });
    }
  };
}]), angular.module("app").service("BotSvc", ["$http", function ($http) {
  var svc = this;
  svc.getQueue = function () {
    return $http.get("/bots/tenthings/queue");
  }, svc.getLists = function (user) {
    return $http.get("/api/bots/lists");
  }, svc.getCategories = () => $http.get("/api/bots/categories"), svc.getLanguages = () => $http.get("/api/bots/languages"), svc.getList = function (list) {
    return $http.get("/api/bots/lists/" + list._id);
  }, svc.saveList = function (user, list) {
    return $http.put("/api/bots/lists", {
      user,
      list
    });
  }, svc.reportList = function (user, list) {
    $http.get("/api/bots/lists/" + list._id + "/report/" + user._id);
  }, svc.deleteList = function (list) {
    return $http.delete("/api/bots/lists/" + list._id);
  }, svc.getMoviePics = function (list) {
    return $http.get(`/api/bots/lists/${list._id}/movies`);
  }, svc.getActorPics = function (list) {
    return $http.get(`/api/bots/lists/${list._id}/actors`);
  }, svc.getBookPics = function (list) {
    return $http.get(`/api/bots/lists/${list._id}/books`);
  }, svc.getMusicVideos = function (list) {
    return $http.get(`/api/bots/lists/${list._id}/musicvideos`);
  }, svc.getPause = function () {
    return $http.get("/api/bots/pause");
  }, svc.togglePause = function () {
    return $http.post("/api/bots/pause");
  };
}]), angular.module("app").service("CategoriesSvc", ["$http", function ($http) {
  var svc = this;
  svc.getCategories = function () {
    return $http.get("/api/categories");
  }, svc.getTasks = function (category) {
    return $http.get("/api/categories/" + category);
  }, svc.addCategory = function (category) {
    return $http.post("/api/categories/", category);
  }, svc.addTask = function (category, task) {
    return $http.post("/api/categories/" + category + "/tasks", task);
  }, svc.setPriorityList = function (list) {
    svc.choices = list, svc.priorityList = [];

    for (var i = 0; i < list.length; i++) for (var j = i + 1; j < list.length; j++) {
      var random = Math.round(Math.random());
      svc.priorityList.push({
        id: 0,
        firstChoice: list[0 === random ? i : j].name,
        secondChoice: list[0 === random ? j : i].name,
        choice: ""
      });
    }

    for (i in function (array) {
      var t,
          i,
          m = array.length;

      for (; m;) i = Math.floor(Math.random() * m--), t = array[m], array[m] = array[i], array[i] = t;
    }(svc.priorityList), svc.priorityList) svc.priorityList[i].id = i + 1;
  }, svc.getPriorityList = function (list) {
    return svc.priorityList;
  };
}]), angular.module("app").service("EmailSvc", ["$http", function ($http) {
  this.send = function (email) {
    return console.log(email), $http.post("/api/email", email);
  };
}]), angular.module("app").service("FileSvc", ["$http", function ($http) {
  this.getImages = function (folder) {
    return $http.get("/api/files/images/" + folder);
  }, this.getSounds = function (folder) {
    return $http.get("/api/files/sounds/" + folder);
  };
}]), angular.module("app").service("GameSvc", ["$http", function ($http) {
  this.getHighscore = function (game, user) {
    return $http.get("/api/games/" + game + "/" + user + "/highscore");
  }, this.setHighscore = function (game, user, score) {
    return $http.post("/api/games/" + game + "/" + user + "/highscore", {
      score
    });
  };
}]), angular.module("app").service("LanguageSvc", function () {
  var svc = this;
  svc.languages = [{
    code: "EN",
    name: "English",
    flag: "flag-icon-gb"
  }, {
    code: "NL",
    name: "Nederlands",
    flag: "flag-icon-nl"
  }, {
    code: "FR",
    name: "Français",
    flag: "flag-icon-fr"
  }], svc.text = [{
    code: "EN"
  }, {
    code: "NL"
  }, {
    code: "FR"
  }], svc.selectedLanguage = svc.languages[0], svc.setLanguage = function (language) {
    return svc.selectedLanguage = language, language;
  }, svc.getLanguage = function () {
    return svc.selectedLanguage;
  };
}), angular.module("app").service("PostsSvc", ["$http", function ($http) {
  this.fetch = function () {
    return $http.get("/api/posts");
  }, this.create = function (post) {
    return $http.post("/api/posts", post);
  }, this.getPost = function (post) {
    return $http.get("/api/posts/" + post._id);
  };
}]), angular.module("app").service("UserSvc", ["$http", function ($http) {
  var svc = this;
  svc.getUser = function () {
    return $http.get("/api/users");
  }, svc.getUsers = function () {
    return $http.get("/api/users/all");
  }, svc.toggleBan = function (id) {
    return $http.get("/api/users/ban/" + id);
  }, svc.setToken = function (token) {
    return $http.defaults.headers.common["X-Auth"] = token, svc.getUser();
  }, svc.authenticate = function (user) {
    return $http.post("/api/users/authenticate", {
      user
    }).then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.login = function (user) {
    return $http.get("/api/users/" + user + "/login").then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.updateUser = function (user) {
    return $http.post("/api/users/" + user._id, {
      user
    }).then(function () {
      return svc.getUser();
    });
  }, svc.checkPassword = function (user, password) {
    return $http.post("/api/users/" + user + "/verification", {
      password
    });
  }, svc.changePassword = function (user, oldPassword, newPassword) {
    return $http.post("/api/users/" + user + "/password", {
      oldPassword,
      newPassword
    });
  }, svc.changeUsername = function (user, newUsername) {
    return $http.post("/api/users/" + user + "/username", {
      newUsername
    }).then(function () {
      return svc.getUser();
    });
  }, svc.logout = function () {
    window.localStorage.clear(), $http.defaults.headers.common["X-Auth"] = "";
  }, svc.createUser = function (username, password) {
    return $http.post("/api/users", {
      username,
      password
    }).then(function () {
      return svc.login(username, password);
    });
  };
}]), angular.module("app").controller("QuizAnimalsCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getSounds("animals").then(function (response) {
    $scope.animals = _.shuffle(response.data.map(animal => ({
      sound: animal,
      name: animal.substring(0, animal.indexOf(".")).replace("_", " ").capitalize()
    })));

    for (let animal of $scope.animals) animal.answers = _.shuffle([animal.name, ...getRandomAnimals(animal.name)]);

    console.log($scope.animals);
  }), $scope.guess = (animal, guess) => {
    animal.guess = guess;
  };

  const getRandomAnimals = name => _.shuffle($scope.animals.filter(animal => name !== animal.name).map(animal => animal.name)).slice(0, 5);

  $scope.getScore = () => `${$scope.animals.filter(animal => animal.name === animal.guess).length}/${$scope.animals.length}`, $scope.isScoreVisible = () => $scope.animals.filter(animal => animal.guess).length === $scope.animals.length;
}]), angular.module("app").controller("QuizGoogleCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("google").then(function (response) {
    $scope.images = response.data;
  });
}]), angular.module("app").controller("QuizLogosCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("logos").then(function (response) {
    $scope.images = response.data;
  });
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3RvdHlwZXMuanMiLCJhcHAuanMiLCJtb2R1bGUuanMiLCJyb3V0ZXMuanMiLCJ3ZWJzb2NrZXRzLmpzIiwiY29udHJvbGxlcnMvYXBwLmN0cmwuanMiLCJjb250cm9sbGVycy9hc3Rlcm9pZHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2J1YmJsZXMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2NvbnRhY3QuY3RybC5qcyIsImNvbnRyb2xsZXJzL2V4cGVyaWVuY2UuY3RybC5qcyIsImNvbnRyb2xsZXJzL2hvYmJpZXMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2xlbW1pbmdzLmN0cmwuanMiLCJjb250cm9sbGVycy9saXN0cy5jdHJsLmpzIiwiY29udHJvbGxlcnMvbG9naW4uY3RybC5qcyIsImNvbnRyb2xsZXJzL3Bvc3RzLmN0cmwuanMiLCJjb250cm9sbGVycy9wcmlvcml0aXplLmN0cmwuanMiLCJjb250cm9sbGVycy9wcm9maWxlLmN0cmwuanMiLCJjb250cm9sbGVycy9za2lsbHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL3RlbnRoaW5ncy5jdHJsLmpzIiwiY29udHJvbGxlcnMvdGVudGhpbmdzYWRtaW4uY3RybC5qcyIsImNvbnRyb2xsZXJzL3dvcmtvdXQuY3RybC5qcyIsImRpcmVjdGl2ZXMvdWktcm91dGVyLXN0eWxlcy5kaXIuanMiLCJzZXJ2aWNlcy9ib3RzLnN2Yy5qcyIsInNlcnZpY2VzL2NhdGVnb3JpZXMuc3ZjLmpzIiwic2VydmljZXMvZW1haWwuc3ZjLmpzIiwic2VydmljZXMvZmlsZS5zdmMuanMiLCJzZXJ2aWNlcy9nYW1lLnN2Yy5qcyIsInNlcnZpY2VzL2xhbmd1YWdlLnN2Yy5qcyIsInNlcnZpY2VzL3Bvc3RzLnN2Yy5qcyIsInNlcnZpY2VzL3VzZXIuc3ZjLmpzIiwiY29udHJvbGxlcnMvcXVpenplcy9hbmltYWxzLmN0cmwuanMiLCJjb250cm9sbGVycy9xdWl6emVzL2dvb2dsZS5jdHJsLmpzIiwiY29udHJvbGxlcnMvcXVpenplcy9sb2dvcy5jdHJsLmpzIl0sIm5hbWVzIjpbImRlZmF1bHREaWFjcml0aWNzUmVtb3ZhbE1hcCIsImJhc2UiLCJsZXR0ZXJzIiwiU3RyaW5nIiwicHJvdG90eXBlIiwicmVtb3ZlRGlhY3JpdGljcyIsInJlZHVjZSIsInJlc3VsdCIsImxldHRlciIsInJlcGxhY2UiLCJ0aGlzIiwiU1BFQ0lBTF9DSEFSQUNURVJTIiwicmVtb3ZlU3BlY2lhbENoYXJhY3RlcnMiLCJSZWdFeHAiLCJyZW1vdmVBbGxCdXRMZXR0ZXJzIiwidG9Mb3dlckNhc2UiLCJjb25jZWFsIiwiZXh0cmEiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsInJlbW92ZUhUTUwiLCJOdW1iZXIiLCJtYWtlUmVhZGFibGUiLCJ0b1N0cmluZyIsInNvcnRPYmplY3QiLCJvYmoiLCJkaXJlY3Rpb24iLCJhcnIiLCJrZXkiLCJwdXNoIiwic29ydCIsImEiLCJiIiwib2JqU29ydGVkIiwiZm9yRWFjaCIsIml0ZW0iLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkdXJsU2VydmljZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJzdHJpY3RNb2RlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJodG1sNU1vZGUiLCJlbmFibGVkIiwicmVxdWlyZUJhc2UiLCJzZXJ2aWNlIiwiJHJvb3RTY29wZSIsIiR0aW1lb3V0IiwiY29ubmVjdGlvbiIsImNvbm5lY3QiLCJXZWJTb2NrZXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdCIsIm9ub3BlbiIsImNvbnNvbGUiLCJsb2ciLCJvbmNsb3NlIiwiZSIsIm9uZXJyb3IiLCJyZWFkeVN0YXRlIiwib25tZXNzYWdlIiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCIkYnJvYWRjYXN0IiwidG9waWMiLCJzZW5kIiwianNvbiIsInN0cmluZ2lmeSIsInJ1biIsIldlYlNvY2tldFN2YyIsIiRzY29wZSIsIiRsb2NhdGlvbiIsIkxhbmd1YWdlU3ZjIiwiVXNlclN2YyIsImxvZ2luIiwidXNlciIsImxvZ2dlZEluIiwibG9jYWxTdG9yYWdlIiwiX2lkIiwiY3VycmVudFVzZXIiLCIkIiwibG9hZCIsImZhZGVPdXQiLCJmYWRlSW4iLCJ0aGVtZUNvdW50ZXIiLCJ0b2RheSIsIkRhdGUiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJyYW5kb20iLCJNYXRoIiwiZmxvb3IiLCJmbGlwVGhlbWUiLCJzaG93IiwiaGlkZSIsInNldFRpbWVvdXQiLCJnZXRKU09OIiwic2tpbGxzIiwiZmlsdGVyIiwic2tpbGwiLCJob2JiaWVzIiwiam9icyIsImpvYiIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJnZXRUaW1lU3BhbiIsImxhbmd1YWdlcyIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJnZXRMYW5ndWFnZSIsInNlbGVjdExhbmd1YWdlIiwibGFuZ3VhZ2UiLCJzZXRMYW5ndWFnZSIsImhvdmVyZGl2IiwiZGl2aWQiLCJsZWZ0IiwiY2xpZW50WCIsInRvcCIsImNsaWVudFkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3NzIiwidG9nZ2xlIiwic29jaWFsTWVkaWEiLCJuYW1lIiwiaWNvbiIsInRoZW4iLCJyZXNwb25zZSIsIiRvbiIsIl8iLCJiaXJ0aERhdGUiLCJsb2FkaW5nIiwibG9nb3V0IiwiZmlyZWJhc2UiLCJhdXRoIiwic2lnbk91dCIsImNsZWFyIiwiY2F0Y2giLCJlcnJvciIsImZvcm1hdERhdGUiLCJkYXRlIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwiR2FtZVN2YyIsImFubm91bmNlIiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImZvbnQiLCJmaWxsU3R5bGUiLCJ0ZXh0QWxpZ24iLCJzaG90cyIsImFzdGVyb2lkcyIsInBvd2VydXBzIiwiZXhwbG9zaW9ucyIsIm1hcCIsInNwYWNlIiwicG93ZXJ1cFR5cGVzIiwiYW5ub3VuY2VtZW50IiwiY3ljbGUiLCJyb3dzIiwiY29sdW1ucyIsInNpemUiLCJpIiwiaW1nIiwiSW1hZ2UiLCJhY3RpdmF0ZSIsInNwYWNlc2hpcCIsIm1heFNwZWVkIiwiY29vbGRvd24iLCJjb29sZG93blRpbWUiLCJyYW5nZSIsInNoaWVsZCIsImV4cGxvZGUiLCJzcGF3bkFzdGVyb2lkcyIsInBvd2VydXAiLCJhcnJheSIsInNyYyIsImV4cGxvc2lvbkltYWdlIiwiZXZhbHVhdGVLZXlzIiwicGxheWluZyIsInNob290Iiwicm90YXRpb24iLCJzcGVlZCIsInNjb3JlIiwiJGFwcGx5IiwiU3BhY2VzaGlwIiwiYXV0b1NwYXduIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImlkIiwicm91bmQiLCJBc3Rlcm9pZCIsIndpZHRoIiwiaGVpZ2h0IiwiY2Fubm9uIiwieCIsInkiLCJwb3NpdGlvbiIsImFuZ2xlIiwiU2hvdCIsIm1vdmUiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiZmlsbCIsImFzdGVyb2lkIiwiaGl0IiwiZ2FtZU92ZXIiLCJjb3MiLCJzaW4iLCJsaWZlc3BhbiIsImdldEVudHJ5UG9zaXRpb24iLCJyb3RhdGlvblNwZWVkIiwiRXhwbG9zaW9uIiwic2hvdCIsInBvaW50cyIsInNwYXduUG93ZXJ1cCIsIm9iamVjdCIsIlBvd2VydXAiLCJkZWxheSIsInNhdmUiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJjb2x1bW4iLCJyb3ciLCJkcmF3SW1hZ2UiLCJyZXN0b3JlIiwiZ3JpZFgiLCJncmlkWSIsIm9iamVjdDEiLCJvYmplY3QyIiwiYW1vdW50IiwiaGlnaHNjb3JlIiwic2V0SGlnaHNjb3JlIiwicmVzaXplQ2FudmFzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImtleUNvZGUiLCJ3aGljaCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRyYXciLCJjbGVhclJlY3QiLCJncmFkaWVudCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwidGFsbHkiLCJmaWxsVGV4dCIsIm1lYXN1cmVUZXh0IiwiYmFja2dyb3VuZEltYWdlIiwiYnViYmxlcyIsImNvbG9ycyIsIkJ1YmJsZSIsInJhZGl1cyIsImV4cGFuZGluZyIsImNpcmN1bWZlcmVuY2UiLCJtYXhSYWRpdXMiLCJ2eCIsInZ5IiwiZmlsdGVyQnViYmxlcyIsImJ1YmJsZSIsIkVtYWlsU3ZjIiwib3B0aW9ucyIsInRleHQiLCJjb250YWN0IiwiZW1haWwiLCJwaG9uZSIsImFib3V0IiwibWVzc2FnZSIsInNlbmRpbmciLCJzZW50Iiwic3RhdHVzIiwiZXJyIiwiZ2V0U2tpbGwiLCJza2lsbENvZGUiLCJmaW5kIiwiY29kZSIsIiR3aW5kb3ciLCJob2JieVNlbGVjdG9yVmlzaWJsZSIsInNlbGVjdGVkSG9iYnkiLCJzZWxlY3RIb2JieSIsImhvYmJ5Iiwic2hvd0hvYmJ5IiwidmFsdWUiLCJpbmRleCIsImltYWdlcyIsImxlbW1pbmdzSW1hZ2UiLCJkZWNvckltYWdlIiwibGVtbWluZ3MiLCJzdGFydGVkIiwiYWN0aW9ucyIsIndhbGsiLCJzdGFydCIsImVuZCIsInJldmVyc2UiLCJodWgiLCJmYWxsIiwiZmx5Iiwic3RvcCIsImNsaW1iIiwiYnVpbGQiLCJwdW5jaCIsImRpZyIsIkxlbW1pbmciLCJpbml0IiwiYWN0IiwiYWN0aW9uIiwiYW5pbWF0aW9uIiwic2NhbGUiLCJoYXRjaCIsIm9wZW4iLCJyZWN0IiwiQ2F0ZWdvcmllc1N2YyIsInNob3dDYXRlZ29yeSIsImdldENhdGVnb3JpZXMiLCJjYXRlZ29yaWVzIiwidGFza3MiLCJqIiwiY2F0ZWdvcnkiLCJ0YXNrIiwic2VsZWN0Q2F0ZWdvcnkiLCJzZWxlY3RlZENhdGVnb3J5Iiwic2VsZWN0ZWRUYXNrcyIsInNlbGVjdGFibGVUYXNrcyIsImVudGVyZWRDYXRlZ29yeSIsIm5ld0NhdGVnb3J5IiwiZm91bmQiLCJhZGRDYXRlZ29yeSIsIm5ld1Rhc2siLCJzZWxlY3RUYXNrIiwiYWRkVGFzayIsImVudGVyZWRUYXNrIiwicmVtb3ZlVGFzayIsInVuc2VsZWN0VGFzayIsInRhc2tMaXN0Iiwic3BsaWNlIiwiaW5kZXhPZiIsInN0YXJ0UHJpb3JpdGl6aW5nIiwic2V0UHJpb3JpdHlMaXN0IiwicGF0aCIsImdldFF1ZXN0aW9ucyIsImNvdW50ZXIiLCJ1aSIsImZpcmViYXNldWkiLCJBdXRoVUkiLCJzdGFydFVJIiwiY2FsbGJhY2tzIiwic2lnbkluU3VjY2VzcyIsImNyZWRlbnRpYWwiLCJyZWRpcmVjdFVybCIsImdldElkVG9rZW4iLCJpZFRva2VuIiwiYXV0aGVudGljYXRlIiwiZGlzcGxheU5hbWUiLCJwaG90b1VSTCIsImVtYWlsVmVyaWZpZWQiLCIkZW1pdCIsIm1vZGFsIiwidHlwZSIsInNpZ25JbkZhaWx1cmUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNyZWQiLCJzaWduSW5XaXRoQ3JlZGVudGlhbCIsInVpU2hvd24iLCJzdHlsZSIsImRpc3BsYXkiLCJzaWduSW5TdWNjZXNzVXJsIiwic2lnbkluT3B0aW9ucyIsIkdvb2dsZUF1dGhQcm92aWRlciIsIlBST1ZJREVSX0lEIiwiRmFjZWJvb2tBdXRoUHJvdmlkZXIiLCJzaWduSW5GbG93IiwiZXZlbnQiLCJyZXNldCIsIiRmaWx0ZXIiLCJQb3N0c1N2YyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJwb3N0IiwiZmV0Y2giLCJwb3N0cyIsImdldFBvc3QiLCJ1bnNoaWZ0IiwicHJpb3JpdHlMaXN0IiwiZ2V0UHJpb3JpdHlMaXN0Iiwic2VsZWN0ZWRRdWVzdGlvbiIsImN1cnJlbnRRdWVzdGlvbiIsImRvbmUiLCJtYWtlQ2hvaWNlIiwiY2hvaWNlIiwiZmlyc3RDaG9pY2UiLCJzZWNvbmRDaG9pY2UiLCJnZXRCdXR0b25WYWx1ZSIsInNlbGVjdFF1ZXN0aW9uIiwicXVlc3Rpb24iLCJnZXRGaWx0ZXJlZFByaW9yaXR5TGlzdCIsImdldENob2ljZXNNYWRlIiwiY2hvaWNlc01hZGUiLCJnZXRCdXR0b25DbGFzcyIsInNob3dDaG9pY2VzIiwiY2hhcnRDbGljayIsImNoYXJ0IiwiZ2V0U2VnbWVudHNBdEV2ZW50Iiwic2hvd1Jlc3VsdHMiLCJyZXNwb25zaXZlIiwic2VnbWVudFNob3dTdHJva2UiLCJzZWdtZW50U3Ryb2tlQ29sb3IiLCJzZWdtZW50U3Ryb2tlV2lkdGgiLCJwZXJjZW50YWdlSW5uZXJDdXRvdXQiLCJhbmltYXRpb25TdGVwcyIsImFuaW1hdGlvbkVhc2luZyIsImFuaW1hdGVSb3RhdGUiLCJhbmltYXRlU2NhbGUiLCJsZWdlbmRUZW1wbGF0ZSIsImNob2ljZXMiLCJ2b3RlcyIsImxhYmVsIiwib2Zmc2V0IiwiZ2VuZGVyIiwic2V4IiwiaWRlbnRpdHkiLCJzZXhlcyIsImlkZW50aXRpZXMiLCJkYXRlT3B0aW9ucyIsIm1heERhdGUiLCJtaW5EYXRlIiwiaW5pdERhdGUiLCJkYXRlcGlja2VyTW9kZSIsInBlcmNlbnRhZ2UiLCJzdGFydFNsaWRlciIsImRyYWdTbGlkZXIiLCJzdG9wU2xpZGVyIiwidXNlcm5hbWVUb2dnbGUiLCJwYXNzd29yZFRvZ2dsZSIsInRvZ2dsZVVzZXJuYW1lIiwibmV3VXNlcm5hbWUiLCJ1c2VybmFtZSIsInRvZ2dsZVBhc3N3b3JkIiwibmV3UGFzc3dvcmQiLCJjb25maXJtUGFzc3dvcmQiLCJjaGVja1Bhc3N3b3JkIiwicGFzc3dvcmQiLCJvcmlnaW5hbEJnIiwiYW5pbWF0ZSIsImJhY2tncm91bmRDb2xvciIsImNoYW5nZVBhc3N3b3JkIiwib2xkUGFzc3dvcmQiLCJjaGFuZ2VVc2VybmFtZSIsInVwZGF0ZVVzZXIiLCIkd2F0Y2giLCJsb2FkQ291bnRyaWVzIiwiJHF1ZXJ5IiwiZmxhZyIsInRpZGJpdCIsImNvdW50cnkiLCJzZWxlY3RlZFNraWxsIiwic2tpbGxzVmlzaWJsZSIsImxhYmVscyIsInNldFNlbGVjdGVkU2tpbGwiLCJjaGFydE9wdGlvbnMiLCJjdXRvdXRQZXJjZW50YWdlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsInRvb2x0aXBzIiwiY2hhcnRTdHlsZSIsImJhY2tncm91bmQtaW1hZ2UiLCJpbWFnZSIsImJhY2tncm91bmQtcmVwZWF0IiwiYmFja2dyb3VuZC1zaXplIiwiYmFja2dyb3VuZC1wb3NpdGlvbiIsIkJvdFN2YyIsImZsYXNoIiwiZWxlbWVudCIsImNvbG9yIiwic2VhcmNoIiwidmFsdWVzIiwiY2F0ZWdvcnlGaWx0ZXJzIiwiY2F0ZWdvcnlGaWx0ZXIiLCJ1cGRhdGVGaWx0ZXIiLCJnZXRMYW5ndWFnZXMiLCJrZXlEb3duIiwiaXMiLCJhZGRWYWx1ZSIsImZvY3VzIiwic2VhcmNoTmFtZSIsIm5ld0l0ZW0iLCJzZXRDYXRlZ29yeUZpbHRlciIsInNldFVzZXJGaWx0ZXIiLCJ1c2VyRmlsdGVyIiwic2V0VXBkYXRlRmlsdGVyIiwiZmlsdGVyZWRMaXN0cyIsImxpc3RzIiwiaXNEeW5hbWljIiwiY3JlYXRvciIsImdldExpc3RzIiwic29ydFZhbHVlIiwic29ydExhYmVsIiwic29ydERpcmVjdGlvbiIsInNvcnRlciIsInNvcnRMaXN0IiwiZ2V0Q2F0ZWdvcnlDb3VudCIsImxpc3QiLCJnZXRVcGRhdGVDb3VudCIsInVzZXJGaWx0ZXJzIiwiQWxsIiwibGlzdDEiLCJsaXN0MiIsInVzZXJzIiwidXNlckNvdW50Iiwic2VsZWN0TGlzdCIsImdldExpc3QiLCJzZWxlY3RlZExpc3QiLCJnZXRDYXRlZ29yeUNsYXNzIiwidG9nZ2xlQ2F0ZWdvcnkiLCJjYXRlZ29yeUluZGV4Iiwibm9uRW5nbGlzaEluZGV4IiwiYWRkTGlzdCIsImN1cnJlbnRMYW5ndWFnZSIsImFuc3dlcnMiLCJzb21lIiwiYWxlcnQiLCJibHVyYiIsInNhdmVMaXN0IiwicmVwb3J0TGlzdCIsInJlcG9ydGVkIiwic2F2aW5nIiwiZGVsZXRlTGlzdCIsImNvbmZpcm0iLCJsaXN0QnV0dG9uQ2xhc3MiLCJibHVyYnMiLCJkZXNjcmlwdGlvbiIsImdldE1vdmllUGljcyIsImdldEFjdG9yUGljcyIsImdldEJvb2tQaWNzIiwiZ2V0TXVzaWNWaWRlb3MiLCJhZG1pbiIsImdldFVzZXJzIiwiZ2V0UXVldWUiLCJxdWV1ZSIsImdldFBhdXNlIiwicGF1c2VkIiwidG9nZ2xlQmFuIiwidG9nZ2xlUGF1c2UiLCJ0aW1lUmVtYWluaW5nIiwidGltZUV4ZXJjaXNpbmciLCJ0aW1lUmVzdGluZyIsInJlc3QiLCJleGVyY2lzaW5nIiwic291bmRzIiwib24iLCJBdWRpbyIsIm9mZiIsInN3aXRjaCIsImV4ZXJjaXNlcyIsInNwbGl0IiwicHJvZ3Jlc3MiLCJ3b3Jrb3V0IiwiZXhjZXJjaXNlVGltZSIsImNsZWFySW50ZXJ2YWwiLCJ0aW1lciIsImV4ZXJjaXNlIiwic2V0SW50ZXJ2YWwiLCJjdXJyZW50RXhlcmNpc2UiLCJwbGF5IiwiZGlyZWN0aXZlIiwiJHN0YXRlIiwiJGNvbXBpbGUiLCIkaW50ZXJwb2xhdGUiLCJnZXRTdHlsZSIsInRlbXBsYXRlU3R5bGVVcmwiLCJocmVmIiwicmVsIiwibWF0Y2giLCJyZXN0cmljdCIsImxpbmsiLCJzY29wZSIsImVsZW0iLCJ0ZW1wbGF0ZVN0eWxlcyIsImh0bWwiLCJzdGFydFN5bWJvbCIsImVuZFN5bWJvbCIsImFwcGVuZCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJzdGF0ZXMiLCJwYXJlbnQiLCJnZXQiLCJ2aWV3cyIsInZpZXciLCJmbGF0IiwiaW5jbHVkZXMiLCJnZXRTdHlsZXMiLCIkaHR0cCIsInN2YyIsInB1dCIsImRlbGV0ZSIsImdldFRhc2tzIiwidCIsIm0iLCJzaHVmZmxlIiwiZ2V0SW1hZ2VzIiwiZm9sZGVyIiwiZ2V0U291bmRzIiwiZ2V0SGlnaHNjb3JlIiwiZ2FtZSIsImdldFVzZXIiLCJzZXRUb2tlbiIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiY3JlYXRlVXNlciIsIkZpbGVTdmMiLCJhbmltYWxzIiwiYW5pbWFsIiwic291bmQiLCJzdWJzdHJpbmciLCJnZXRSYW5kb21BbmltYWxzIiwi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QUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsZUFEQUEsRUFDQSxDQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQTZDLE1BQUEsRUFBQXNpQixPQUFBLEVBQUFBO0FBQ0FBLEVBQUFBLE9BQUFBLENBQUFaLFNBQUFZLENBQUEsT0FBQUEsRUFDQS9lLElBREErZSxDQUNBLFVBQUE5ZSxRQUFBLEVBQUFBO0FBQ0F4RCxJQUFBQSxNQUFBQSxDQUFBMk4sTUFBQTNOLEdBQUF3RCxRQUFBQSxDQUFBaEUsSUFBQVE7QUFBQVIsR0FGQThpQjtBQUVBOWlCLENBSEEsQ0FEQXJDLEM5Qk9BQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmYXVsdERpYWNyaXRpY3NSZW1vdmFsTWFwID0gW3tcclxuICAgICdiYXNlJzogJ0EnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNDFcXHUyNEI2XFx1RkYyMVxcdTAwQzBcXHUwMEMxXFx1MDBDMlxcdTFFQTZcXHUxRUE0XFx1MUVBQVxcdTFFQThcXHUwMEMzXFx1MDEwMFxcdTAxMDJcXHUxRUIwXFx1MUVBRVxcdTFFQjRcXHUxRUIyXFx1MDIyNlxcdTAxRTBcXHUwMEM0XFx1MDFERVxcdTFFQTJcXHUwMEM1XFx1MDFGQVxcdTAxQ0RcXHUwMjAwXFx1MDIwMlxcdTFFQTBcXHUxRUFDXFx1MUVCNlxcdTFFMDBcXHUwMTA0XFx1MDIzQVxcdTJDNkZdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0FBJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHVBNzMyXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdBRScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDBDNlxcdTAxRkNcXHUwMUUyXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdBTycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1QTczNF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnQVUnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdUE3MzZdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0FWJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHVBNzM4XFx1QTczQV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnQVknLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdUE3M0NdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0InLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNDJcXHUyNEI3XFx1RkYyMlxcdTFFMDJcXHUxRTA0XFx1MUUwNlxcdTAyNDNcXHUwMTgyXFx1MDE4MV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnQycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA0M1xcdTI0QjhcXHVGRjIzXFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAwQzdcXHUxRTA4XFx1MDE4N1xcdTAyM0JcXHVBNzNFXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdEJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDQ0XFx1MjRCOVxcdUZGMjRcXHUxRTBBXFx1MDEwRVxcdTFFMENcXHUxRTEwXFx1MUUxMlxcdTFFMEVcXHUwMTEwXFx1MDE4QlxcdTAxOEFcXHUwMTg5XFx1QTc3OV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnRFonLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAxRjFcXHUwMUM0XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdEeicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDFGMlxcdTAxQzVdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0UnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNDVcXHUyNEJBXFx1RkYyNVxcdTAwQzhcXHUwMEM5XFx1MDBDQVxcdTFFQzBcXHUxRUJFXFx1MUVDNFxcdTFFQzJcXHUxRUJDXFx1MDExMlxcdTFFMTRcXHUxRTE2XFx1MDExNFxcdTAxMTZcXHUwMENCXFx1MUVCQVxcdTAxMUFcXHUwMjA0XFx1MDIwNlxcdTFFQjhcXHUxRUM2XFx1MDIyOFxcdTFFMUNcXHUwMTE4XFx1MUUxOFxcdTFFMUFcXHUwMTkwXFx1MDE4RV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnRicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA0NlxcdTI0QkJcXHVGRjI2XFx1MUUxRVxcdTAxOTFcXHVBNzdCXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdHJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDQ3XFx1MjRCQ1xcdUZGMjdcXHUwMUY0XFx1MDExQ1xcdTFFMjBcXHUwMTFFXFx1MDEyMFxcdTAxRTZcXHUwMTIyXFx1MDFFNFxcdTAxOTNcXHVBN0EwXFx1QTc3RFxcdUE3N0VdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0gnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNDhcXHUyNEJEXFx1RkYyOFxcdTAxMjRcXHUxRTIyXFx1MUUyNlxcdTAyMUVcXHUxRTI0XFx1MUUyOFxcdTFFMkFcXHUwMTI2XFx1MkM2N1xcdTJDNzVcXHVBNzhEXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdJJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDQ5XFx1MjRCRVxcdUZGMjlcXHUwMENDXFx1MDBDRFxcdTAwQ0VcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTMwXFx1MDBDRlxcdTFFMkVcXHUxRUM4XFx1MDFDRlxcdTAyMDhcXHUwMjBBXFx1MUVDQVxcdTAxMkVcXHUxRTJDXFx1MDE5N10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnSicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA0QVxcdTI0QkZcXHVGRjJBXFx1MDEzNFxcdTAyNDhdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0snLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNEJcXHUyNEMwXFx1RkYyQlxcdTFFMzBcXHUwMUU4XFx1MUUzMlxcdTAxMzZcXHUxRTM0XFx1MDE5OFxcdTJDNjlcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBN0EyXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdMJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDRDXFx1MjRDMVxcdUZGMkNcXHUwMTNGXFx1MDEzOVxcdTAxM0RcXHUxRTM2XFx1MUUzOFxcdTAxM0JcXHUxRTNDXFx1MUUzQVxcdTAxNDFcXHUwMjNEXFx1MkM2MlxcdTJDNjBcXHVBNzQ4XFx1QTc0NlxcdUE3ODBdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ0xKJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMUM3XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdMaicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDFDOF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnTScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA0RFxcdTI0QzJcXHVGRjJEXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MkM2RVxcdTAxOUNdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ04nLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNEVcXHUyNEMzXFx1RkYyRVxcdTAxRjhcXHUwMTQzXFx1MDBEMVxcdTFFNDRcXHUwMTQ3XFx1MUU0NlxcdTAxNDVcXHUxRTRBXFx1MUU0OFxcdTAyMjBcXHUwMTlEXFx1QTc5MFxcdUE3QTRdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ05KJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMUNBXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdOaicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDFDQl0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnTycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA0RlxcdTI0QzRcXHVGRjJGXFx1MDBEMlxcdTAwRDNcXHUwMEQ0XFx1MUVEMlxcdTFFRDBcXHUxRUQ2XFx1MUVENFxcdTAwRDVcXHUxRTRDXFx1MDIyQ1xcdTFFNEVcXHUwMTRDXFx1MUU1MFxcdTFFNTJcXHUwMTRFXFx1MDIyRVxcdTAyMzBcXHUwMEQ2XFx1MDIyQVxcdTFFQ0VcXHUwMTUwXFx1MDFEMVxcdTAyMENcXHUwMjBFXFx1MDFBMFxcdTFFRENcXHUxRURBXFx1MUVFMFxcdTFFREVcXHUxRUUyXFx1MUVDQ1xcdTFFRDhcXHUwMUVBXFx1MDFFQ1xcdTAwRDhcXHUwMUZFXFx1MDE4NlxcdTAxOUZcXHVBNzRBXFx1QTc0Q10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnT0knLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAxQTJdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ09PJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHVBNzRFXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdPVScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDIyMl0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnUCcsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA1MFxcdTI0QzVcXHVGRjMwXFx1MUU1NFxcdTFFNTZcXHUwMUE0XFx1MkM2M1xcdUE3NTBcXHVBNzUyXFx1QTc1NF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnUScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA1MVxcdTI0QzZcXHVGRjMxXFx1QTc1NlxcdUE3NThcXHUwMjRBXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdSJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDUyXFx1MjRDN1xcdUZGMzJcXHUwMTU0XFx1MUU1OFxcdTAxNThcXHUwMjEwXFx1MDIxMlxcdTFFNUFcXHUxRTVDXFx1MDE1NlxcdTFFNUVcXHUwMjRDXFx1MkM2NFxcdUE3NUFcXHVBN0E2XFx1QTc4Ml0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnUycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA1M1xcdTI0QzhcXHVGRjMzXFx1MUU5RVxcdTAxNUFcXHUxRTY0XFx1MDE1Q1xcdTFFNjBcXHUwMTYwXFx1MUU2NlxcdTFFNjJcXHUxRTY4XFx1MDIxOFxcdTAxNUVcXHUyQzdFXFx1QTdBOFxcdUE3ODRdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ1QnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNTRcXHUyNEM5XFx1RkYzNFxcdTFFNkFcXHUwMTY0XFx1MUU2Q1xcdTAyMUFcXHUwMTYyXFx1MUU3MFxcdTFFNkVcXHUwMTY2XFx1MDFBQ1xcdTAxQUVcXHUwMjNFXFx1QTc4Nl0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnVFonLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdUE3MjhdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ1UnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNTVcXHUyNENBXFx1RkYzNVxcdTAwRDlcXHUwMERBXFx1MDBEQlxcdTAxNjhcXHUxRTc4XFx1MDE2QVxcdTFFN0FcXHUwMTZDXFx1MDBEQ1xcdTAxREJcXHUwMUQ3XFx1MDFENVxcdTAxRDlcXHUxRUU2XFx1MDE2RVxcdTAxNzBcXHUwMUQzXFx1MDIxNFxcdTAyMTZcXHUwMUFGXFx1MUVFQVxcdTFFRThcXHUxRUVFXFx1MUVFQ1xcdTFFRjBcXHUxRUU0XFx1MUU3MlxcdTAxNzJcXHUxRTc2XFx1MUU3NFxcdTAyNDRdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ1YnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNTZcXHUyNENCXFx1RkYzNlxcdTFFN0NcXHUxRTdFXFx1MDFCMlxcdUE3NUVcXHUwMjQ1XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdWWScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1QTc2MF0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnVycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA1N1xcdTI0Q0NcXHVGRjM3XFx1MUU4MFxcdTFFODJcXHUwMTc0XFx1MUU4NlxcdTFFODRcXHUxRTg4XFx1MkM3Ml0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnWCcsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA1OFxcdTI0Q0RcXHVGRjM4XFx1MUU4QVxcdTFFOENdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ1knLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNTlcXHUyNENFXFx1RkYzOVxcdTFFRjJcXHUwMEREXFx1MDE3NlxcdTFFRjhcXHUwMjMyXFx1MUU4RVxcdTAxNzhcXHUxRUY2XFx1MUVGNFxcdTAxQjNcXHUwMjRFXFx1MUVGRV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnWicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA1QVxcdTI0Q0ZcXHVGRjNBXFx1MDE3OVxcdTFFOTBcXHUwMTdCXFx1MDE3RFxcdTFFOTJcXHUxRTk0XFx1MDFCNVxcdTAyMjRcXHUyQzdGXFx1MkM2QlxcdUE3NjJdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2EnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNjFcXHUyNEQwXFx1RkY0MVxcdTFFOUFcXHUwMEUwXFx1MDBFMVxcdTAwRTJcXHUxRUE3XFx1MUVBNVxcdTFFQUJcXHUxRUE5XFx1MDBFM1xcdTAxMDFcXHUwMTAzXFx1MUVCMVxcdTFFQUZcXHUxRUI1XFx1MUVCM1xcdTAyMjdcXHUwMUUxXFx1MDBFNFxcdTAxREZcXHUxRUEzXFx1MDBFNVxcdTAxRkJcXHUwMUNFXFx1MDIwMVxcdTAyMDNcXHUxRUExXFx1MUVBRFxcdTFFQjdcXHUxRTAxXFx1MDEwNVxcdTJDNjVcXHUwMjUwXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdhYScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1QTczM10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnYWUnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwRTZcXHUwMUZEXFx1MDFFM10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnYW8nLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdUE3MzVdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2F1JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHVBNzM3XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdhdicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1QTczOVxcdUE3M0JdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2F5JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHVBNzNEXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdiJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDYyXFx1MjREMVxcdUZGNDJcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUwMTgwXFx1MDE4M1xcdTAyNTNdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2MnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNjNcXHUyNEQyXFx1RkY0M1xcdTAxMDdcXHUwMTA5XFx1MDEwQlxcdTAxMERcXHUwMEU3XFx1MUUwOVxcdTAxODhcXHUwMjNDXFx1QTczRlxcdTIxODRdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2QnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNjRcXHUyNEQzXFx1RkY0NFxcdTFFMEJcXHUwMTBGXFx1MUUwRFxcdTFFMTFcXHUxRTEzXFx1MUUwRlxcdTAxMTFcXHUwMThDXFx1MDI1NlxcdTAyNTdcXHVBNzdBXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdkeicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDFGM1xcdTAxQzZdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2UnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNjVcXHUyNEQ0XFx1RkY0NVxcdTAwRThcXHUwMEU5XFx1MDBFQVxcdTFFQzFcXHUxRUJGXFx1MUVDNVxcdTFFQzNcXHUxRUJEXFx1MDExM1xcdTFFMTVcXHUxRTE3XFx1MDExNVxcdTAxMTdcXHUwMEVCXFx1MUVCQlxcdTAxMUJcXHUwMjA1XFx1MDIwN1xcdTFFQjlcXHUxRUM3XFx1MDIyOVxcdTFFMURcXHUwMTE5XFx1MUUxOVxcdTFFMUJcXHUwMjQ3XFx1MDI1QlxcdTAxRERdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2YnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNjZcXHUyNEQ1XFx1RkY0NlxcdTFFMUZcXHUwMTkyXFx1QTc3Q10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnZycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA2N1xcdTI0RDZcXHVGRjQ3XFx1MDFGNVxcdTAxMURcXHUxRTIxXFx1MDExRlxcdTAxMjFcXHUwMUU3XFx1MDEyM1xcdTAxRTVcXHUwMjYwXFx1QTdBMVxcdTFENzlcXHVBNzdGXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdoJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDY4XFx1MjREN1xcdUZGNDhcXHUwMTI1XFx1MUUyM1xcdTFFMjdcXHUwMjFGXFx1MUUyNVxcdTFFMjlcXHUxRTJCXFx1MUU5NlxcdTAxMjdcXHUyQzY4XFx1MkM3NlxcdTAyNjVdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ2h2JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMTk1XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdpJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDY5XFx1MjREOFxcdUZGNDlcXHUwMEVDXFx1MDBFRFxcdTAwRUVcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMEVGXFx1MUUyRlxcdTFFQzlcXHUwMUQwXFx1MDIwOVxcdTAyMEJcXHUxRUNCXFx1MDEyRlxcdTFFMkRcXHUwMjY4XFx1MDEzMV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnaicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA2QVxcdTI0RDlcXHVGRjRBXFx1MDEzNVxcdTAxRjBcXHUwMjQ5XS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdrJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDZCXFx1MjREQVxcdUZGNEJcXHUxRTMxXFx1MDFFOVxcdTFFMzNcXHUwMTM3XFx1MUUzNVxcdTAxOTlcXHUyQzZBXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTdBM10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnbCcsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA2Q1xcdTI0REJcXHVGRjRDXFx1MDE0MFxcdTAxM0FcXHUwMTNFXFx1MUUzN1xcdTFFMzlcXHUwMTNDXFx1MUUzRFxcdTFFM0JcXHUwMTdGXFx1MDE0MlxcdTAxOUFcXHUwMjZCXFx1MkM2MVxcdUE3NDlcXHVBNzgxXFx1QTc0N10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnbGonLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAxQzldL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ20nLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNkRcXHUyNERDXFx1RkY0RFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTAyNzFcXHUwMjZGXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICduJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDZFXFx1MjRERFxcdUZGNEVcXHUwMUY5XFx1MDE0NFxcdTAwRjFcXHUxRTQ1XFx1MDE0OFxcdTFFNDdcXHUwMTQ2XFx1MUU0QlxcdTFFNDlcXHUwMTlFXFx1MDI3MlxcdTAxNDlcXHVBNzkxXFx1QTdBNV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnbmonLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAxQ0NdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ28nLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNkZcXHUyNERFXFx1RkY0RlxcdTAwRjJcXHUwMEYzXFx1MDBGNFxcdTFFRDNcXHUxRUQxXFx1MUVEN1xcdTFFRDVcXHUwMEY1XFx1MUU0RFxcdTAyMkRcXHUxRTRGXFx1MDE0RFxcdTFFNTFcXHUxRTUzXFx1MDE0RlxcdTAyMkZcXHUwMjMxXFx1MDBGNlxcdTAyMkJcXHUxRUNGXFx1MDE1MVxcdTAxRDJcXHUwMjBEXFx1MDIwRlxcdTAxQTFcXHUxRUREXFx1MUVEQlxcdTFFRTFcXHUxRURGXFx1MUVFM1xcdTFFQ0RcXHUxRUQ5XFx1MDFFQlxcdTAxRURcXHUwMEY4XFx1MDFGRlxcdTAyNTRcXHVBNzRCXFx1QTc0RFxcdTAyNzVdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ29pJyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMUEzXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICdvdScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDIyM10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAnb28nLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdUE3NEZdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ3AnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNzBcXHUyNERGXFx1RkY1MFxcdTFFNTVcXHUxRTU3XFx1MDFBNVxcdTFEN0RcXHVBNzUxXFx1QTc1M1xcdUE3NTVdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ3EnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNzFcXHUyNEUwXFx1RkY1MVxcdTAyNEJcXHVBNzU3XFx1QTc1OV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAncicsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA3MlxcdTI0RTFcXHVGRjUyXFx1MDE1NVxcdTFFNTlcXHUwMTU5XFx1MDIxMVxcdTAyMTNcXHUxRTVCXFx1MUU1RFxcdTAxNTdcXHUxRTVGXFx1MDI0RFxcdTAyN0RcXHVBNzVCXFx1QTdBN1xcdUE3ODNdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ3MnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNzNcXHUyNEUyXFx1RkY1M1xcdTAwREZcXHUwMTVCXFx1MUU2NVxcdTAxNURcXHUxRTYxXFx1MDE2MVxcdTFFNjdcXHUxRTYzXFx1MUU2OVxcdTAyMTlcXHUwMTVGXFx1MDIzRlxcdUE3QTlcXHVBNzg1XFx1MUU5Ql0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAndCcsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA3NFxcdTI0RTNcXHVGRjU0XFx1MUU2QlxcdTFFOTdcXHUwMTY1XFx1MUU2RFxcdTAyMUJcXHUwMTYzXFx1MUU3MVxcdTFFNkZcXHUwMTY3XFx1MDFBRFxcdTAyODhcXHUyQzY2XFx1QTc4N10vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAndHonLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdUE3MjldL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ3UnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNzVcXHUyNEU0XFx1RkY1NVxcdTAwRjlcXHUwMEZBXFx1MDBGQlxcdTAxNjlcXHUxRTc5XFx1MDE2QlxcdTFFN0JcXHUwMTZEXFx1MDBGQ1xcdTAxRENcXHUwMUQ4XFx1MDFENlxcdTAxREFcXHUxRUU3XFx1MDE2RlxcdTAxNzFcXHUwMUQ0XFx1MDIxNVxcdTAyMTdcXHUwMUIwXFx1MUVFQlxcdTFFRTlcXHUxRUVGXFx1MUVFRFxcdTFFRjFcXHUxRUU1XFx1MUU3M1xcdTAxNzNcXHUxRTc3XFx1MUU3NVxcdTAyODldL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ3YnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNzZcXHUyNEU1XFx1RkY1NlxcdTFFN0RcXHUxRTdGXFx1MDI4QlxcdUE3NUZcXHUwMjhDXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICd2eScsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1QTc2MV0vZ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgJ2Jhc2UnOiAndycsXHJcbiAgICAnbGV0dGVycyc6IC9bXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzNdL2dcclxuICB9LFxyXG4gIHtcclxuICAgICdiYXNlJzogJ3gnLFxyXG4gICAgJ2xldHRlcnMnOiAvW1xcdTAwNzhcXHUyNEU3XFx1RkY1OFxcdTFFOEJcXHUxRThEXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICd5JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDc5XFx1MjRFOFxcdUZGNTlcXHUxRUYzXFx1MDBGRFxcdTAxNzdcXHUxRUY5XFx1MDIzM1xcdTFFOEZcXHUwMEZGXFx1MUVGN1xcdTFFOTlcXHUxRUY1XFx1MDFCNFxcdTAyNEZcXHUxRUZGXS9nXHJcbiAgfSxcclxuICB7XHJcbiAgICAnYmFzZSc6ICd6JyxcclxuICAgICdsZXR0ZXJzJzogL1tcXHUwMDdBXFx1MjRFOVxcdUZGNUFcXHUwMTdBXFx1MUU5MVxcdTAxN0NcXHUwMTdFXFx1MUU5M1xcdTFFOTVcXHUwMUI2XFx1MDIyNVxcdTAyNDBcXHUyQzZDXFx1QTc2M10vZ1xyXG4gIH1cclxuXTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUucmVtb3ZlRGlhY3JpdGljcyA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxNYXAucmVkdWNlKChyZXN1bHQsIGxldHRlcikgPT4ge1xyXG4gICAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKGxldHRlci5sZXR0ZXJzLCBsZXR0ZXIuYmFzZSk7XHJcbiAgfSwgdGhpcyk7XHJcbn07XHJcblxyXG5jb25zdCBTUEVDSUFMX0NIQVJBQ1RFUlMgPSBcIlxcXFxcXFxcLyAhP0AjJCVeJiooKV8rOi57fSw7XFxcXC0nYGDigJnigJhcXFwiXCI7XHJcblN0cmluZy5wcm90b3R5cGUucmVtb3ZlU3BlY2lhbENoYXJhY3RlcnMgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5yZXBsYWNlKG5ldyBSZWdFeHAoYFske1NQRUNJQUxfQ0hBUkFDVEVSU31dYCwgJ2dpJyksICcnKTtcclxufTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUucmVtb3ZlQWxsQnV0TGV0dGVycyA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnRvTG93ZXJDYXNlKCkucmVtb3ZlRGlhY3JpdGljcygpLnJlbW92ZVNwZWNpYWxDaGFyYWN0ZXJzKCk7XHJcbn07XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLmNvbmNlYWwgPSBmdW5jdGlvbihleHRyYSkge1xyXG4gIHJldHVybiB0aGlzLnJlcGxhY2UobmV3IFJlZ0V4cChgW14ke1NQRUNJQUxfQ0hBUkFDVEVSU30ke2V4dHJhfV1gLCAnZ2knKSwgJ+KBjicpO1xyXG59O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5jYXBpdGFsaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnNsaWNlKDEpO1xyXG59O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVIVE1MID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMucmVwbGFjZSgnPicsICdcXHUyMjdCJykucmVwbGFjZSgnPCcsICdcXHUyMjdBJyk7XHJcbn07XHJcblxyXG5OdW1iZXIucHJvdG90eXBlLm1ha2VSZWFkYWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIsXCIpO1xyXG59O1xyXG5cclxuY29uc3Qgc29ydE9iamVjdCA9IChvYmosIGRpcmVjdGlvbikgPT4ge1xyXG4gIGxldCBhcnIgPSBbXTtcclxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcclxuICAgIGFyci5wdXNoKFtrZXksIG9ialtrZXldXSk7XHJcbiAgfVxyXG4gIGFyci5zb3J0KChhLCBiKSA9PiBkaXJlY3Rpb24gPyBhWzFdIC0gYlsxXSA6IGJbMV0gLSBhWzFdKTtcclxuICBsZXQgb2JqU29ydGVkID0ge307XHJcbiAgYXJyLmZvckVhY2goaXRlbSA9PiBvYmpTb3J0ZWRbaXRlbVswXV0gPSBpdGVtWzFdKTtcclxuICAvL2Fyci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgYS52YWx1ZS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi52YWx1ZS50b0xvd2VyQ2FzZSgpKTsgfSk7IC8vdXNlIHRoaXMgdG8gc29ydCBhcyBzdHJpbmdzXHJcbiAgcmV0dXJuIG9ialNvcnRlZDsgLy8gcmV0dXJucyBhcnJheVxyXG59OyIsInZhciBkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxNYXA9W3tiYXNlOlwiQVwiLGxldHRlcnM6L1tcXHUwMDQxXFx1MjRCNlxcdUZGMjFcXHUwMEMwXFx1MDBDMVxcdTAwQzJcXHUxRUE2XFx1MUVBNFxcdTFFQUFcXHUxRUE4XFx1MDBDM1xcdTAxMDBcXHUwMTAyXFx1MUVCMFxcdTFFQUVcXHUxRUI0XFx1MUVCMlxcdTAyMjZcXHUwMUUwXFx1MDBDNFxcdTAxREVcXHUxRUEyXFx1MDBDNVxcdTAxRkFcXHUwMUNEXFx1MDIwMFxcdTAyMDJcXHUxRUEwXFx1MUVBQ1xcdTFFQjZcXHUxRTAwXFx1MDEwNFxcdTAyM0FcXHUyQzZGXS9nfSx7YmFzZTpcIkFBXCIsbGV0dGVyczovW1xcdUE3MzJdL2d9LHtiYXNlOlwiQUVcIixsZXR0ZXJzOi9bXFx1MDBDNlxcdTAxRkNcXHUwMUUyXS9nfSx7YmFzZTpcIkFPXCIsbGV0dGVyczovW1xcdUE3MzRdL2d9LHtiYXNlOlwiQVVcIixsZXR0ZXJzOi9bXFx1QTczNl0vZ30se2Jhc2U6XCJBVlwiLGxldHRlcnM6L1tcXHVBNzM4XFx1QTczQV0vZ30se2Jhc2U6XCJBWVwiLGxldHRlcnM6L1tcXHVBNzNDXS9nfSx7YmFzZTpcIkJcIixsZXR0ZXJzOi9bXFx1MDA0MlxcdTI0QjdcXHVGRjIyXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MDI0M1xcdTAxODJcXHUwMTgxXS9nfSx7YmFzZTpcIkNcIixsZXR0ZXJzOi9bXFx1MDA0M1xcdTI0QjhcXHVGRjIzXFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAwQzdcXHUxRTA4XFx1MDE4N1xcdTAyM0JcXHVBNzNFXS9nfSx7YmFzZTpcIkRcIixsZXR0ZXJzOi9bXFx1MDA0NFxcdTI0QjlcXHVGRjI0XFx1MUUwQVxcdTAxMEVcXHUxRTBDXFx1MUUxMFxcdTFFMTJcXHUxRTBFXFx1MDExMFxcdTAxOEJcXHUwMThBXFx1MDE4OVxcdUE3NzldL2d9LHtiYXNlOlwiRFpcIixsZXR0ZXJzOi9bXFx1MDFGMVxcdTAxQzRdL2d9LHtiYXNlOlwiRHpcIixsZXR0ZXJzOi9bXFx1MDFGMlxcdTAxQzVdL2d9LHtiYXNlOlwiRVwiLGxldHRlcnM6L1tcXHUwMDQ1XFx1MjRCQVxcdUZGMjVcXHUwMEM4XFx1MDBDOVxcdTAwQ0FcXHUxRUMwXFx1MUVCRVxcdTFFQzRcXHUxRUMyXFx1MUVCQ1xcdTAxMTJcXHUxRTE0XFx1MUUxNlxcdTAxMTRcXHUwMTE2XFx1MDBDQlxcdTFFQkFcXHUwMTFBXFx1MDIwNFxcdTAyMDZcXHUxRUI4XFx1MUVDNlxcdTAyMjhcXHUxRTFDXFx1MDExOFxcdTFFMThcXHUxRTFBXFx1MDE5MFxcdTAxOEVdL2d9LHtiYXNlOlwiRlwiLGxldHRlcnM6L1tcXHUwMDQ2XFx1MjRCQlxcdUZGMjZcXHUxRTFFXFx1MDE5MVxcdUE3N0JdL2d9LHtiYXNlOlwiR1wiLGxldHRlcnM6L1tcXHUwMDQ3XFx1MjRCQ1xcdUZGMjdcXHUwMUY0XFx1MDExQ1xcdTFFMjBcXHUwMTFFXFx1MDEyMFxcdTAxRTZcXHUwMTIyXFx1MDFFNFxcdTAxOTNcXHVBN0EwXFx1QTc3RFxcdUE3N0VdL2d9LHtiYXNlOlwiSFwiLGxldHRlcnM6L1tcXHUwMDQ4XFx1MjRCRFxcdUZGMjhcXHUwMTI0XFx1MUUyMlxcdTFFMjZcXHUwMjFFXFx1MUUyNFxcdTFFMjhcXHUxRTJBXFx1MDEyNlxcdTJDNjdcXHUyQzc1XFx1QTc4RF0vZ30se2Jhc2U6XCJJXCIsbGV0dGVyczovW1xcdTAwNDlcXHUyNEJFXFx1RkYyOVxcdTAwQ0NcXHUwMENEXFx1MDBDRVxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMzBcXHUwMENGXFx1MUUyRVxcdTFFQzhcXHUwMUNGXFx1MDIwOFxcdTAyMEFcXHUxRUNBXFx1MDEyRVxcdTFFMkNcXHUwMTk3XS9nfSx7YmFzZTpcIkpcIixsZXR0ZXJzOi9bXFx1MDA0QVxcdTI0QkZcXHVGRjJBXFx1MDEzNFxcdTAyNDhdL2d9LHtiYXNlOlwiS1wiLGxldHRlcnM6L1tcXHUwMDRCXFx1MjRDMFxcdUZGMkJcXHUxRTMwXFx1MDFFOFxcdTFFMzJcXHUwMTM2XFx1MUUzNFxcdTAxOThcXHUyQzY5XFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTdBMl0vZ30se2Jhc2U6XCJMXCIsbGV0dGVyczovW1xcdTAwNENcXHUyNEMxXFx1RkYyQ1xcdTAxM0ZcXHUwMTM5XFx1MDEzRFxcdTFFMzZcXHUxRTM4XFx1MDEzQlxcdTFFM0NcXHUxRTNBXFx1MDE0MVxcdTAyM0RcXHUyQzYyXFx1MkM2MFxcdUE3NDhcXHVBNzQ2XFx1QTc4MF0vZ30se2Jhc2U6XCJMSlwiLGxldHRlcnM6L1tcXHUwMUM3XS9nfSx7YmFzZTpcIkxqXCIsbGV0dGVyczovW1xcdTAxQzhdL2d9LHtiYXNlOlwiTVwiLGxldHRlcnM6L1tcXHUwMDREXFx1MjRDMlxcdUZGMkRcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUyQzZFXFx1MDE5Q10vZ30se2Jhc2U6XCJOXCIsbGV0dGVyczovW1xcdTAwNEVcXHUyNEMzXFx1RkYyRVxcdTAxRjhcXHUwMTQzXFx1MDBEMVxcdTFFNDRcXHUwMTQ3XFx1MUU0NlxcdTAxNDVcXHUxRTRBXFx1MUU0OFxcdTAyMjBcXHUwMTlEXFx1QTc5MFxcdUE3QTRdL2d9LHtiYXNlOlwiTkpcIixsZXR0ZXJzOi9bXFx1MDFDQV0vZ30se2Jhc2U6XCJOalwiLGxldHRlcnM6L1tcXHUwMUNCXS9nfSx7YmFzZTpcIk9cIixsZXR0ZXJzOi9bXFx1MDA0RlxcdTI0QzRcXHVGRjJGXFx1MDBEMlxcdTAwRDNcXHUwMEQ0XFx1MUVEMlxcdTFFRDBcXHUxRUQ2XFx1MUVENFxcdTAwRDVcXHUxRTRDXFx1MDIyQ1xcdTFFNEVcXHUwMTRDXFx1MUU1MFxcdTFFNTJcXHUwMTRFXFx1MDIyRVxcdTAyMzBcXHUwMEQ2XFx1MDIyQVxcdTFFQ0VcXHUwMTUwXFx1MDFEMVxcdTAyMENcXHUwMjBFXFx1MDFBMFxcdTFFRENcXHUxRURBXFx1MUVFMFxcdTFFREVcXHUxRUUyXFx1MUVDQ1xcdTFFRDhcXHUwMUVBXFx1MDFFQ1xcdTAwRDhcXHUwMUZFXFx1MDE4NlxcdTAxOUZcXHVBNzRBXFx1QTc0Q10vZ30se2Jhc2U6XCJPSVwiLGxldHRlcnM6L1tcXHUwMUEyXS9nfSx7YmFzZTpcIk9PXCIsbGV0dGVyczovW1xcdUE3NEVdL2d9LHtiYXNlOlwiT1VcIixsZXR0ZXJzOi9bXFx1MDIyMl0vZ30se2Jhc2U6XCJQXCIsbGV0dGVyczovW1xcdTAwNTBcXHUyNEM1XFx1RkYzMFxcdTFFNTRcXHUxRTU2XFx1MDFBNFxcdTJDNjNcXHVBNzUwXFx1QTc1MlxcdUE3NTRdL2d9LHtiYXNlOlwiUVwiLGxldHRlcnM6L1tcXHUwMDUxXFx1MjRDNlxcdUZGMzFcXHVBNzU2XFx1QTc1OFxcdTAyNEFdL2d9LHtiYXNlOlwiUlwiLGxldHRlcnM6L1tcXHUwMDUyXFx1MjRDN1xcdUZGMzJcXHUwMTU0XFx1MUU1OFxcdTAxNThcXHUwMjEwXFx1MDIxMlxcdTFFNUFcXHUxRTVDXFx1MDE1NlxcdTFFNUVcXHUwMjRDXFx1MkM2NFxcdUE3NUFcXHVBN0E2XFx1QTc4Ml0vZ30se2Jhc2U6XCJTXCIsbGV0dGVyczovW1xcdTAwNTNcXHUyNEM4XFx1RkYzM1xcdTFFOUVcXHUwMTVBXFx1MUU2NFxcdTAxNUNcXHUxRTYwXFx1MDE2MFxcdTFFNjZcXHUxRTYyXFx1MUU2OFxcdTAyMThcXHUwMTVFXFx1MkM3RVxcdUE3QThcXHVBNzg0XS9nfSx7YmFzZTpcIlRcIixsZXR0ZXJzOi9bXFx1MDA1NFxcdTI0QzlcXHVGRjM0XFx1MUU2QVxcdTAxNjRcXHUxRTZDXFx1MDIxQVxcdTAxNjJcXHUxRTcwXFx1MUU2RVxcdTAxNjZcXHUwMUFDXFx1MDFBRVxcdTAyM0VcXHVBNzg2XS9nfSx7YmFzZTpcIlRaXCIsbGV0dGVyczovW1xcdUE3MjhdL2d9LHtiYXNlOlwiVVwiLGxldHRlcnM6L1tcXHUwMDU1XFx1MjRDQVxcdUZGMzVcXHUwMEQ5XFx1MDBEQVxcdTAwREJcXHUwMTY4XFx1MUU3OFxcdTAxNkFcXHUxRTdBXFx1MDE2Q1xcdTAwRENcXHUwMURCXFx1MDFEN1xcdTAxRDVcXHUwMUQ5XFx1MUVFNlxcdTAxNkVcXHUwMTcwXFx1MDFEM1xcdTAyMTRcXHUwMjE2XFx1MDFBRlxcdTFFRUFcXHUxRUU4XFx1MUVFRVxcdTFFRUNcXHUxRUYwXFx1MUVFNFxcdTFFNzJcXHUwMTcyXFx1MUU3NlxcdTFFNzRcXHUwMjQ0XS9nfSx7YmFzZTpcIlZcIixsZXR0ZXJzOi9bXFx1MDA1NlxcdTI0Q0JcXHVGRjM2XFx1MUU3Q1xcdTFFN0VcXHUwMUIyXFx1QTc1RVxcdTAyNDVdL2d9LHtiYXNlOlwiVllcIixsZXR0ZXJzOi9bXFx1QTc2MF0vZ30se2Jhc2U6XCJXXCIsbGV0dGVyczovW1xcdTAwNTdcXHUyNENDXFx1RkYzN1xcdTFFODBcXHUxRTgyXFx1MDE3NFxcdTFFODZcXHUxRTg0XFx1MUU4OFxcdTJDNzJdL2d9LHtiYXNlOlwiWFwiLGxldHRlcnM6L1tcXHUwMDU4XFx1MjRDRFxcdUZGMzhcXHUxRThBXFx1MUU4Q10vZ30se2Jhc2U6XCJZXCIsbGV0dGVyczovW1xcdTAwNTlcXHUyNENFXFx1RkYzOVxcdTFFRjJcXHUwMEREXFx1MDE3NlxcdTFFRjhcXHUwMjMyXFx1MUU4RVxcdTAxNzhcXHUxRUY2XFx1MUVGNFxcdTAxQjNcXHUwMjRFXFx1MUVGRV0vZ30se2Jhc2U6XCJaXCIsbGV0dGVyczovW1xcdTAwNUFcXHUyNENGXFx1RkYzQVxcdTAxNzlcXHUxRTkwXFx1MDE3QlxcdTAxN0RcXHUxRTkyXFx1MUU5NFxcdTAxQjVcXHUwMjI0XFx1MkM3RlxcdTJDNkJcXHVBNzYyXS9nfSx7YmFzZTpcImFcIixsZXR0ZXJzOi9bXFx1MDA2MVxcdTI0RDBcXHVGRjQxXFx1MUU5QVxcdTAwRTBcXHUwMEUxXFx1MDBFMlxcdTFFQTdcXHUxRUE1XFx1MUVBQlxcdTFFQTlcXHUwMEUzXFx1MDEwMVxcdTAxMDNcXHUxRUIxXFx1MUVBRlxcdTFFQjVcXHUxRUIzXFx1MDIyN1xcdTAxRTFcXHUwMEU0XFx1MDFERlxcdTFFQTNcXHUwMEU1XFx1MDFGQlxcdTAxQ0VcXHUwMjAxXFx1MDIwM1xcdTFFQTFcXHUxRUFEXFx1MUVCN1xcdTFFMDFcXHUwMTA1XFx1MkM2NVxcdTAyNTBdL2d9LHtiYXNlOlwiYWFcIixsZXR0ZXJzOi9bXFx1QTczM10vZ30se2Jhc2U6XCJhZVwiLGxldHRlcnM6L1tcXHUwMEU2XFx1MDFGRFxcdTAxRTNdL2d9LHtiYXNlOlwiYW9cIixsZXR0ZXJzOi9bXFx1QTczNV0vZ30se2Jhc2U6XCJhdVwiLGxldHRlcnM6L1tcXHVBNzM3XS9nfSx7YmFzZTpcImF2XCIsbGV0dGVyczovW1xcdUE3MzlcXHVBNzNCXS9nfSx7YmFzZTpcImF5XCIsbGV0dGVyczovW1xcdUE3M0RdL2d9LHtiYXNlOlwiYlwiLGxldHRlcnM6L1tcXHUwMDYyXFx1MjREMVxcdUZGNDJcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUwMTgwXFx1MDE4M1xcdTAyNTNdL2d9LHtiYXNlOlwiY1wiLGxldHRlcnM6L1tcXHUwMDYzXFx1MjREMlxcdUZGNDNcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDBFN1xcdTFFMDlcXHUwMTg4XFx1MDIzQ1xcdUE3M0ZcXHUyMTg0XS9nfSx7YmFzZTpcImRcIixsZXR0ZXJzOi9bXFx1MDA2NFxcdTI0RDNcXHVGRjQ0XFx1MUUwQlxcdTAxMEZcXHUxRTBEXFx1MUUxMVxcdTFFMTNcXHUxRTBGXFx1MDExMVxcdTAxOENcXHUwMjU2XFx1MDI1N1xcdUE3N0FdL2d9LHtiYXNlOlwiZHpcIixsZXR0ZXJzOi9bXFx1MDFGM1xcdTAxQzZdL2d9LHtiYXNlOlwiZVwiLGxldHRlcnM6L1tcXHUwMDY1XFx1MjRENFxcdUZGNDVcXHUwMEU4XFx1MDBFOVxcdTAwRUFcXHUxRUMxXFx1MUVCRlxcdTFFQzVcXHUxRUMzXFx1MUVCRFxcdTAxMTNcXHUxRTE1XFx1MUUxN1xcdTAxMTVcXHUwMTE3XFx1MDBFQlxcdTFFQkJcXHUwMTFCXFx1MDIwNVxcdTAyMDdcXHUxRUI5XFx1MUVDN1xcdTAyMjlcXHUxRTFEXFx1MDExOVxcdTFFMTlcXHUxRTFCXFx1MDI0N1xcdTAyNUJcXHUwMUREXS9nfSx7YmFzZTpcImZcIixsZXR0ZXJzOi9bXFx1MDA2NlxcdTI0RDVcXHVGRjQ2XFx1MUUxRlxcdTAxOTJcXHVBNzdDXS9nfSx7YmFzZTpcImdcIixsZXR0ZXJzOi9bXFx1MDA2N1xcdTI0RDZcXHVGRjQ3XFx1MDFGNVxcdTAxMURcXHUxRTIxXFx1MDExRlxcdTAxMjFcXHUwMUU3XFx1MDEyM1xcdTAxRTVcXHUwMjYwXFx1QTdBMVxcdTFENzlcXHVBNzdGXS9nfSx7YmFzZTpcImhcIixsZXR0ZXJzOi9bXFx1MDA2OFxcdTI0RDdcXHVGRjQ4XFx1MDEyNVxcdTFFMjNcXHUxRTI3XFx1MDIxRlxcdTFFMjVcXHUxRTI5XFx1MUUyQlxcdTFFOTZcXHUwMTI3XFx1MkM2OFxcdTJDNzZcXHUwMjY1XS9nfSx7YmFzZTpcImh2XCIsbGV0dGVyczovW1xcdTAxOTVdL2d9LHtiYXNlOlwiaVwiLGxldHRlcnM6L1tcXHUwMDY5XFx1MjREOFxcdUZGNDlcXHUwMEVDXFx1MDBFRFxcdTAwRUVcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMEVGXFx1MUUyRlxcdTFFQzlcXHUwMUQwXFx1MDIwOVxcdTAyMEJcXHUxRUNCXFx1MDEyRlxcdTFFMkRcXHUwMjY4XFx1MDEzMV0vZ30se2Jhc2U6XCJqXCIsbGV0dGVyczovW1xcdTAwNkFcXHUyNEQ5XFx1RkY0QVxcdTAxMzVcXHUwMUYwXFx1MDI0OV0vZ30se2Jhc2U6XCJrXCIsbGV0dGVyczovW1xcdTAwNkJcXHUyNERBXFx1RkY0QlxcdTFFMzFcXHUwMUU5XFx1MUUzM1xcdTAxMzdcXHUxRTM1XFx1MDE5OVxcdTJDNkFcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBN0EzXS9nfSx7YmFzZTpcImxcIixsZXR0ZXJzOi9bXFx1MDA2Q1xcdTI0REJcXHVGRjRDXFx1MDE0MFxcdTAxM0FcXHUwMTNFXFx1MUUzN1xcdTFFMzlcXHUwMTNDXFx1MUUzRFxcdTFFM0JcXHUwMTdGXFx1MDE0MlxcdTAxOUFcXHUwMjZCXFx1MkM2MVxcdUE3NDlcXHVBNzgxXFx1QTc0N10vZ30se2Jhc2U6XCJsalwiLGxldHRlcnM6L1tcXHUwMUM5XS9nfSx7YmFzZTpcIm1cIixsZXR0ZXJzOi9bXFx1MDA2RFxcdTI0RENcXHVGRjREXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MDI3MVxcdTAyNkZdL2d9LHtiYXNlOlwiblwiLGxldHRlcnM6L1tcXHUwMDZFXFx1MjRERFxcdUZGNEVcXHUwMUY5XFx1MDE0NFxcdTAwRjFcXHUxRTQ1XFx1MDE0OFxcdTFFNDdcXHUwMTQ2XFx1MUU0QlxcdTFFNDlcXHUwMTlFXFx1MDI3MlxcdTAxNDlcXHVBNzkxXFx1QTdBNV0vZ30se2Jhc2U6XCJualwiLGxldHRlcnM6L1tcXHUwMUNDXS9nfSx7YmFzZTpcIm9cIixsZXR0ZXJzOi9bXFx1MDA2RlxcdTI0REVcXHVGRjRGXFx1MDBGMlxcdTAwRjNcXHUwMEY0XFx1MUVEM1xcdTFFRDFcXHUxRUQ3XFx1MUVENVxcdTAwRjVcXHUxRTREXFx1MDIyRFxcdTFFNEZcXHUwMTREXFx1MUU1MVxcdTFFNTNcXHUwMTRGXFx1MDIyRlxcdTAyMzFcXHUwMEY2XFx1MDIyQlxcdTFFQ0ZcXHUwMTUxXFx1MDFEMlxcdTAyMERcXHUwMjBGXFx1MDFBMVxcdTFFRERcXHUxRURCXFx1MUVFMVxcdTFFREZcXHUxRUUzXFx1MUVDRFxcdTFFRDlcXHUwMUVCXFx1MDFFRFxcdTAwRjhcXHUwMUZGXFx1MDI1NFxcdUE3NEJcXHVBNzREXFx1MDI3NV0vZ30se2Jhc2U6XCJvaVwiLGxldHRlcnM6L1tcXHUwMUEzXS9nfSx7YmFzZTpcIm91XCIsbGV0dGVyczovW1xcdTAyMjNdL2d9LHtiYXNlOlwib29cIixsZXR0ZXJzOi9bXFx1QTc0Rl0vZ30se2Jhc2U6XCJwXCIsbGV0dGVyczovW1xcdTAwNzBcXHUyNERGXFx1RkY1MFxcdTFFNTVcXHUxRTU3XFx1MDFBNVxcdTFEN0RcXHVBNzUxXFx1QTc1M1xcdUE3NTVdL2d9LHtiYXNlOlwicVwiLGxldHRlcnM6L1tcXHUwMDcxXFx1MjRFMFxcdUZGNTFcXHUwMjRCXFx1QTc1N1xcdUE3NTldL2d9LHtiYXNlOlwiclwiLGxldHRlcnM6L1tcXHUwMDcyXFx1MjRFMVxcdUZGNTJcXHUwMTU1XFx1MUU1OVxcdTAxNTlcXHUwMjExXFx1MDIxM1xcdTFFNUJcXHUxRTVEXFx1MDE1N1xcdTFFNUZcXHUwMjREXFx1MDI3RFxcdUE3NUJcXHVBN0E3XFx1QTc4M10vZ30se2Jhc2U6XCJzXCIsbGV0dGVyczovW1xcdTAwNzNcXHUyNEUyXFx1RkY1M1xcdTAwREZcXHUwMTVCXFx1MUU2NVxcdTAxNURcXHUxRTYxXFx1MDE2MVxcdTFFNjdcXHUxRTYzXFx1MUU2OVxcdTAyMTlcXHUwMTVGXFx1MDIzRlxcdUE3QTlcXHVBNzg1XFx1MUU5Ql0vZ30se2Jhc2U6XCJ0XCIsbGV0dGVyczovW1xcdTAwNzRcXHUyNEUzXFx1RkY1NFxcdTFFNkJcXHUxRTk3XFx1MDE2NVxcdTFFNkRcXHUwMjFCXFx1MDE2M1xcdTFFNzFcXHUxRTZGXFx1MDE2N1xcdTAxQURcXHUwMjg4XFx1MkM2NlxcdUE3ODddL2d9LHtiYXNlOlwidHpcIixsZXR0ZXJzOi9bXFx1QTcyOV0vZ30se2Jhc2U6XCJ1XCIsbGV0dGVyczovW1xcdTAwNzVcXHUyNEU0XFx1RkY1NVxcdTAwRjlcXHUwMEZBXFx1MDBGQlxcdTAxNjlcXHUxRTc5XFx1MDE2QlxcdTFFN0JcXHUwMTZEXFx1MDBGQ1xcdTAxRENcXHUwMUQ4XFx1MDFENlxcdTAxREFcXHUxRUU3XFx1MDE2RlxcdTAxNzFcXHUwMUQ0XFx1MDIxNVxcdTAyMTdcXHUwMUIwXFx1MUVFQlxcdTFFRTlcXHUxRUVGXFx1MUVFRFxcdTFFRjFcXHUxRUU1XFx1MUU3M1xcdTAxNzNcXHUxRTc3XFx1MUU3NVxcdTAyODldL2d9LHtiYXNlOlwidlwiLGxldHRlcnM6L1tcXHUwMDc2XFx1MjRFNVxcdUZGNTZcXHUxRTdEXFx1MUU3RlxcdTAyOEJcXHVBNzVGXFx1MDI4Q10vZ30se2Jhc2U6XCJ2eVwiLGxldHRlcnM6L1tcXHVBNzYxXS9nfSx7YmFzZTpcIndcIixsZXR0ZXJzOi9bXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzNdL2d9LHtiYXNlOlwieFwiLGxldHRlcnM6L1tcXHUwMDc4XFx1MjRFN1xcdUZGNThcXHUxRThCXFx1MUU4RF0vZ30se2Jhc2U6XCJ5XCIsbGV0dGVyczovW1xcdTAwNzlcXHUyNEU4XFx1RkY1OVxcdTFFRjNcXHUwMEZEXFx1MDE3N1xcdTFFRjlcXHUwMjMzXFx1MUU4RlxcdTAwRkZcXHUxRUY3XFx1MUU5OVxcdTFFRjVcXHUwMUI0XFx1MDI0RlxcdTFFRkZdL2d9LHtiYXNlOlwielwiLGxldHRlcnM6L1tcXHUwMDdBXFx1MjRFOVxcdUZGNUFcXHUwMTdBXFx1MUU5MVxcdTAxN0NcXHUwMTdFXFx1MUU5M1xcdTFFOTVcXHUwMUI2XFx1MDIyNVxcdTAyNDBcXHUyQzZDXFx1QTc2M10vZ31dO1N0cmluZy5wcm90b3R5cGUucmVtb3ZlRGlhY3JpdGljcz1mdW5jdGlvbigpe3JldHVybiBkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxNYXAucmVkdWNlKChyZXN1bHQsbGV0dGVyKT0+cmVzdWx0LnJlcGxhY2UobGV0dGVyLmxldHRlcnMsbGV0dGVyLmJhc2UpLHRoaXMpfTtjb25zdCBTUEVDSUFMX0NIQVJBQ1RFUlM9XCJcXFxcXFxcXC8gIT9AIyQlXiYqKClfKzoue30sO1xcXFwtJ2Bg4oCZ4oCYXFxcIlwiO1N0cmluZy5wcm90b3R5cGUucmVtb3ZlU3BlY2lhbENoYXJhY3RlcnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXBsYWNlKG5ldyBSZWdFeHAoYFske1NQRUNJQUxfQ0hBUkFDVEVSU31dYCxcImdpXCIpLFwiXCIpfSxTdHJpbmcucHJvdG90eXBlLnJlbW92ZUFsbEJ1dExldHRlcnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b0xvd2VyQ2FzZSgpLnJlbW92ZURpYWNyaXRpY3MoKS5yZW1vdmVTcGVjaWFsQ2hhcmFjdGVycygpfSxTdHJpbmcucHJvdG90eXBlLmNvbmNlYWw9ZnVuY3Rpb24oZXh0cmEpe3JldHVybiB0aGlzLnJlcGxhY2UobmV3IFJlZ0V4cChgW14ke1NQRUNJQUxfQ0hBUkFDVEVSU30ke2V4dHJhfV1gLFwiZ2lcIiksXCLigY5cIil9LFN0cmluZy5wcm90b3R5cGUuY2FwaXRhbGl6ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3RoaXMuc2xpY2UoMSl9LFN0cmluZy5wcm90b3R5cGUucmVtb3ZlSFRNTD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcGxhY2UoXCI+XCIsXCLiibtcIikucmVwbGFjZShcIjxcIixcIuKJulwiKX0sTnVtYmVyLnByb3RvdHlwZS5tYWtlUmVhZGFibGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csXCIsXCIpfTtjb25zdCBzb3J0T2JqZWN0PShvYmosZGlyZWN0aW9uKT0+e2xldCBhcnI9W107Zm9yKGNvbnN0IGtleSBpbiBvYmopYXJyLnB1c2goW2tleSxvYmpba2V5XV0pO2Fyci5zb3J0KChhLGIpPT5kaXJlY3Rpb24/YVsxXS1iWzFdOmJbMV0tYVsxXSk7bGV0IG9ialNvcnRlZD17fTtyZXR1cm4gYXJyLmZvckVhY2goaXRlbT0+b2JqU29ydGVkW2l0ZW1bMF1dPWl0ZW1bMV0pLG9ialNvcnRlZH07YW5ndWxhci5tb2R1bGUoXCJhcHBcIixbXCJ1aS5yb3V0ZXJcIixcInVpLmJvb3RzdHJhcFwiLFwibmdBbmltYXRlXCIsXCJuZ1Nhbml0aXplXCIsXCJuZ0RyYWdEcm9wXCIsXCJuZ1RhZ3NJbnB1dFwiLFwidmNSZWNhcHRjaGFcIixcImNoYXJ0LmpzXCIsXCJ0Yy5jaGFydGpzXCJdKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb25maWcoW1wiJHN0YXRlUHJvdmlkZXJcIixcIiR1cmxSb3V0ZXJQcm92aWRlclwiLFwiJHVybFNlcnZpY2VQcm92aWRlclwiLFwiJGxvY2F0aW9uUHJvdmlkZXJcIixmdW5jdGlvbigkc3RhdGVQcm92aWRlciwkdXJsUm91dGVyUHJvdmlkZXIsJHVybFNlcnZpY2VQcm92aWRlciwkbG9jYXRpb25Qcm92aWRlcil7JHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9ob21lXCIpLCR1cmxTZXJ2aWNlUHJvdmlkZXIuY29uZmlnLnN0cmljdE1vZGUoITEpLCRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLHt1cmw6XCIvaG9tZVwiLHRlbXBsYXRlVXJsOlwiL2hvbWUuaHRtbFwifSkuc3RhdGUoXCJwb2xpY3lcIix7dXJsOlwiL3BvbGljeVwiLHRlbXBsYXRlVXJsOlwiL3BvbGljeS5odG1sXCJ9KS5zdGF0ZShcInByaW50XCIse3VybDpcIi9wcmludFwiLHRlbXBsYXRlVXJsOlwiL3ByaW50Lmh0bWxcIn0pLnN0YXRlKFwiZXhwZXJpZW5jZVwiLHt1cmw6XCIvZXhwZXJpZW5jZVwiLGNvbnRyb2xsZXI6XCJFeHBlcmllbmNlQ3RybFwiLHRlbXBsYXRlVXJsOlwiL2V4cGVyaWVuY2UuaHRtbFwifSkuc3RhdGUoXCJza2lsbHNcIix7dXJsOlwiL3NraWxsc1wiLGNvbnRyb2xsZXI6XCJTa2lsbHNDdHJsXCIsdGVtcGxhdGVVcmw6XCIvc2tpbGxzLmh0bWxcIn0pLnN0YXRlKFwiaG9iYmllc1wiLHt1cmw6XCIvaG9iYmllc1wiLGNvbnRyb2xsZXI6XCJIb2JiaWVzQ3RybFwiLHRlbXBsYXRlVXJsOlwiL2hvYmJpZXMuaHRtbFwifSkuc3RhdGUoXCJjb250YWN0XCIse3VybDpcIi9jb250YWN0XCIsY29udHJvbGxlcjpcIkNvbnRhY3RDdHJsXCIsdGVtcGxhdGVVcmw6XCIvY29udGFjdC5odG1sXCJ9KS5zdGF0ZShcIndvcmtvdXRcIix7dXJsOlwiL3dvcmtvdXRcIixjb250cm9sbGVyOlwiV29ya291dEN0cmxcIix0ZW1wbGF0ZVVybDpcIi93b3Jrb3V0Lmh0bWxcIn0pLnN0YXRlKFwicG9zdHNcIix7dXJsOlwiL3Bvc3RzXCIsY29udHJvbGxlcjpcIlBvc3RzQ3RybFwiLHRlbXBsYXRlVXJsOlwiL3Bvc3RzLmh0bWxcIn0pLnN0YXRlKFwicHJvZmlsZVwiLHt1cmw6XCIvcHJvZmlsZVwiLGNvbnRyb2xsZXI6XCJQcm9maWxlQ3RybFwiLHRlbXBsYXRlVXJsOlwiL3Byb2ZpbGUuaHRtbFwifSkuc3RhdGUoXCJsaXN0c1wiLHt1cmw6XCIvbGlzdHNcIixjb250cm9sbGVyOlwiTGlzdHNDdHJsXCIsdGVtcGxhdGVVcmw6XCJsaXN0cy5odG1sXCJ9KS5zdGF0ZShcInByaW9yaXRpemVcIix7dXJsOlwiL3ByaW9yaXRpemVcIixjb250cm9sbGVyOlwiUHJpb3JpdGl6ZUN0cmxcIix0ZW1wbGF0ZVVybDpcInByaW9yaXRpemUuaHRtbFwifSkuc3RhdGUoXCJidWJibGVzXCIse3VybDpcIi9idWJibGVzXCIsY29udHJvbGxlcjpcIkJ1YmJsZXNDdHJsXCIsdGVtcGxhdGVVcmw6XCJidWJibGVzLmh0bWxcIn0pLnN0YXRlKFwiYXN0ZXJvaWRzXCIse3VybDpcIi9hc3Rlcm9pZHNcIixjb250cm9sbGVyOlwiQXN0ZXJvaWRzQ3RybFwiLHRlbXBsYXRlVXJsOlwiYXN0ZXJvaWRzLmh0bWxcIn0pLnN0YXRlKFwibGVtbWluZ3NcIix7dXJsOlwiL2xlbW1pbmdzXCIsY29udHJvbGxlcjpcIkxlbW1pbmdzQ3RybFwiLHRlbXBsYXRlVXJsOlwibGVtbWluZ3MuaHRtbFwifSkuc3RhdGUoXCJib3RzXCIse3VybDpcIi9ib3RzXCIsY29udHJvbGxlcjpcIlRlblRoaW5nc0N0cmxcIix0ZW1wbGF0ZVVybDpcInRlbnRoaW5ncy5odG1sXCJ9KS5zdGF0ZShcInRlbnRoaW5nc1wiLHt1cmw6XCIvdGVudGhpbmdzXCIsY29udHJvbGxlcjpcIlRlblRoaW5nc0N0cmxcIix0ZW1wbGF0ZVVybDpcInRlbnRoaW5ncy5odG1sXCJ9KS5zdGF0ZShcInRlbnRoaW5ncy1hZG1pblwiLHt1cmw6XCIvdGVudGhpbmdzLWFkbWluXCIsY29udHJvbGxlcjpcIlRlblRoaW5nc0FkbWluQ3RybFwiLHRlbXBsYXRlVXJsOlwidGVudGhpbmdzLWFkbWluLmh0bWxcIn0pLnN0YXRlKFwicXVpei1nb29nbGVcIix7dXJsOlwiL2dvb2dsZVwiLGNvbnRyb2xsZXI6XCJRdWl6R29vZ2xlQ3RybFwiLHRlbXBsYXRlVXJsOlwicXVpenplcy9nb29nbGUuaHRtbFwifSkuc3RhdGUoXCJxdWl6LWxvZ29zXCIse3VybDpcIi9sb2dvc1wiLGNvbnRyb2xsZXI6XCJRdWl6TG9nb3NDdHJsXCIsdGVtcGxhdGVVcmw6XCJxdWl6emVzL2xvZ29zLmh0bWxcIn0pLnN0YXRlKFwicXVpei1hbmltYWxzXCIse3VybDpcIi9hbmltYWxzXCIsY29udHJvbGxlcjpcIlF1aXpBbmltYWxzQ3RybFwiLHRlbXBsYXRlVXJsOlwicXVpenplcy9hbmltYWxzLmh0bWxcIn0pLCRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh7ZW5hYmxlZDohMCxyZXF1aXJlQmFzZTohMX0pfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJXZWJTb2NrZXRTdmNcIixbXCIkcm9vdFNjb3BlXCIsXCIkdGltZW91dFwiLGZ1bmN0aW9uKCRyb290U2NvcGUsJHRpbWVvdXQpe3ZhciBjb25uZWN0aW9uLGNvbm5lY3Q9ZnVuY3Rpb24oKXsoY29ubmVjdGlvbj1uZXcgV2ViU29ja2V0KFwiaHR0cHM6XCI9PT13aW5kb3cubG9jYXRpb24ucHJvdG9jb2w/XCJ3c3M6Ly9cIit3aW5kb3cubG9jYXRpb24uaG9zdDpcIndzOi8vXCIrd2luZG93LmxvY2F0aW9uLmhvc3QpKS5vbm9wZW49ZnVuY3Rpb24oKXtjb25zb2xlLmxvZyhcIldlYnNvY2tldCBjb25uZWN0ZWRcIil9LGNvbm5lY3Rpb24ub25jbG9zZT1mdW5jdGlvbihlKXtjb25zb2xlLmxvZyhcIldlYnNvY2tldCBjbG9zZWQuIFJlY29ubmVjdGluZy4uLlwiKSwkdGltZW91dChjb25uZWN0LDFlMyl9LGNvbm5lY3Rpb24ub25lcnJvcj1mdW5jdGlvbihlKXtjb25zb2xlLmxvZyhcIkVycm9yOiBcIitlK1wiIC0gU3RhdGU6IFwiK2Nvbm5lY3Rpb24ucmVhZHlTdGF0ZSl9LGNvbm5lY3Rpb24ub25tZXNzYWdlPWZ1bmN0aW9uKGUpe3ZhciBwYXlsb2FkPUpTT04ucGFyc2UoZS5kYXRhKTskcm9vdFNjb3BlLiRicm9hZGNhc3QoXCJ3czpcIitwYXlsb2FkLnRvcGljLHBheWxvYWQuZGF0YSl9fTt0aGlzLnNlbmQ9ZnVuY3Rpb24odG9waWMsZGF0YSl7dmFyIGpzb249SlNPTi5zdHJpbmdpZnkoe3RvcGljLGRhdGF9KTtjb25uZWN0aW9uLnNlbmQoanNvbil9LHRoaXMuY29ubmVjdD1jb25uZWN0fV0pLnJ1bihbXCJXZWJTb2NrZXRTdmNcIixmdW5jdGlvbihXZWJTb2NrZXRTdmMpe1dlYlNvY2tldFN2Yy5jb25uZWN0KCl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkFwcEN0cmxcIixbXCIkc2NvcGVcIixcIiRsb2NhdGlvblwiLFwiTGFuZ3VhZ2VTdmNcIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLExhbmd1YWdlU3ZjLFVzZXJTdmMpe2Z1bmN0aW9uIGxvZ2luKHVzZXIpeyRzY29wZS5sb2dnZWRJbnx8KHdpbmRvdy5sb2NhbFN0b3JhZ2UudXNlcj11c2VyLl9pZCwkc2NvcGUubG9nZ2VkSW49ITAsJHNjb3BlLmN1cnJlbnRVc2VyPXVzZXIsJHNjb3BlLiRicm9hZGNhc3QoXCJsb2dpblwiKSl9Y29uc29sZS5sb2coXCIlY1lvdSBzbmVha3kgYnVnZ2VyIVwiLFwiZm9udDogMmVtIHNhbnMtc2VyaWY7IGNvbG9yOiBEb2RnZXJCbHVlOyB0ZXh0LXNoYWRvdzogMnB4IDAgMCAjNDQ0LCAtMnB4IDAgMCAjNDQ0LCAwIDJweCAwICM0NDQsIDAgLTJweCAwICM0NDQsIDFweCAxcHggIzQ0NCwgLTFweCAtMXB4IDAgIzQ0NCwgMXB4IC0xcHggMCAjNDQ0LCAtMXB4IDFweCAwICM0NDQ7XCIpLGNvbnNvbGUubG9nKFwiSSdtIGdsYWQgeW91J3JlIGN1cmlvdXMgd2hldGhlciBzb21ldGhpbmcgaXMgcG9wcGluZyB1cCBpbiBoZXJlLiBJJ20gYSBiaXQgb2YgYSBzdGlja2xlciB3aGVuIGl0IGNvbWVzIHRvIG1lc3NhZ2VzIGluIHRoZSBjb25zb2xlIHNvIEkgdHJ5IHRvIG1ha2Ugc3VyZSBvbmx5IHRoaW5ncyBJIHdhbnQgYXJlIHZpc2libGUuIFRoYXQgYmVpbmcgc2FpZCwgaWYgdGhlcmUgaXMgYSBiaWcgZXJyb3IgaGVyZSwgSSB3b3VsZCByZWFsbHkgYXBwcmVjaWF0ZSB5b3UgdGVsbGluZyBtZSBzbyBJIGNhbiBnZXQgcmlkIG9mIGl0IVwiKSxjb25zb2xlLmxvZyhcIlRoZSBjb2RlIGZvciBteSByZXN1bWUgaXMgaG9zdGVkIG9uIEdpdGh1YiBpZiB5b3UgcmVhbGx5IHdhbnQgdG8gZ28gaW50byBhbGwgdGhpcyEgPT4gaHR0cHM6Ly9naXRodWIuY29tL0ZsYW5kZXJzQnVyZ2VyL3Jlc3VtZVwiKSwkKHdpbmRvdykubG9hZCgoZnVuY3Rpb24oKXskKFwiLmxvYWRpbmdcIikuZmFkZU91dChcInNsb3dcIiksJChcIi5jb250ZW50XCIpLmZhZGVJbihcInNsb3dcIil9KSksJHNjb3BlLnRoZW1lQ291bnRlcj02LCRzY29wZS50b2RheT1uZXcgRGF0ZSwkc2NvcGUueWVhcj0kc2NvcGUudG9kYXkuZ2V0RnVsbFllYXIoKSwkc2NvcGUucmFuZG9tPU1hdGguZmxvb3IoMWU2Kk1hdGgucmFuZG9tKCkpLCRzY29wZS5mbGlwVGhlbWU9ZnVuY3Rpb24oKXskKFwiLmxvYWRpbmdcIikuc2hvdygpLCQoXCIuY29udGVudFwiKS5oaWRlKCksc2V0VGltZW91dCgoZnVuY3Rpb24oKXskKFwiLmxvYWRpbmdcIikuZmFkZU91dChcInNsb3dcIiksJChcIi5jb250ZW50XCIpLmZhZGVJbihcInNsb3dcIil9KSw4MDApLCRzY29wZS50aGVtZUNvdW50ZXI9JHNjb3BlLnRoZW1lQ291bnRlcjw2PyRzY29wZS50aGVtZUNvdW50ZXIrMTokc2NvcGUudGhlbWVDb3VudGVyPTF9LCQuZ2V0SlNPTihcIi9za2lsbHMuanNvblwiLChmdW5jdGlvbihkYXRhKXskc2NvcGUuc2tpbGxzPWRhdGEuZmlsdGVyKChmdW5jdGlvbihza2lsbCl7cmV0dXJuIHNraWxsLmVuYWJsZWR9KSl9KSksJC5nZXRKU09OKFwiL2hvYmJpZXMuanNvblwiLChmdW5jdGlvbihkYXRhKXskc2NvcGUuaG9iYmllcz1kYXRhfSkpLCQuZ2V0SlNPTihcIi9leHBlcmllbmNlLmpzb25cIiwoZnVuY3Rpb24oZGF0YSl7JHNjb3BlLmpvYnM9ZGF0YSwkc2NvcGUuam9icy5mb3JFYWNoKChmdW5jdGlvbihqb2Ipe2pvYi5zdGFydERhdGU9bmV3IERhdGUoam9iLnN0YXJ0RGF0ZSksam9iLmVuZERhdGUmJihqb2IuZW5kRGF0ZT1uZXcgRGF0ZShqb2IuZW5kRGF0ZSkpfSkpfSkpLCRzY29wZS5nZXRUaW1lU3Bhbj1mdW5jdGlvbihqb2Ipe3JldHVybiBqb2Iuc3RhcnREYXRlLmdldEZ1bGxZZWFyKCkrKGpvYi5lbmREYXRlP1wiIC0gXCIram9iLmVuZERhdGUuZ2V0RnVsbFllYXIoKTpcIiAtIFRvZGF5XCIpfSwkc2NvcGUubGFuZ3VhZ2VzPUxhbmd1YWdlU3ZjLmxhbmd1YWdlcywkc2NvcGUuc2VsZWN0ZWRMYW5ndWFnZT1MYW5ndWFnZVN2Yy5nZXRMYW5ndWFnZSgpLCRzY29wZS5zZWxlY3RMYW5ndWFnZT1mdW5jdGlvbihsYW5ndWFnZSl7JHNjb3BlLnNlbGVjdGVkTGFuZ3VhZ2U9TGFuZ3VhZ2VTdmMuc2V0TGFuZ3VhZ2UobGFuZ3VhZ2UpfSwkc2NvcGUuaG92ZXJkaXY9ZnVuY3Rpb24oZSxkaXZpZCl7dmFyIGxlZnQ9ZS5jbGllbnRYK1wicHhcIix0b3A9ZS5jbGllbnRZKzIwK1wicHhcIjtkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaXZpZCk7cmV0dXJuICQoXCIjXCIrZGl2aWQpLmNzcyhcImxlZnRcIixsZWZ0KSwkKFwiI1wiK2RpdmlkKS5jc3MoXCJ0b3BcIix0b3ApLCQoXCIjXCIrZGl2aWQpLnRvZ2dsZSgpLCExfSwkc2NvcGUuc29jaWFsTWVkaWE9W3tuYW1lOlwibGlua2VkaW5cIix1cmw6XCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vbGF1cmVudC1kZWJhY2tlci0xNjMzYTkxNlwiLGljb246XCJmYS1saW5rZWRpblwifSx7bmFtZTpcImdpdGh1YlwiLHVybDpcImh0dHBzOi8vZ2l0aHViLmNvbS9GbGFuZGVyc0J1cmdlclwiLGljb246XCJmYS1naXRodWJcIn0se25hbWU6XCJqc2ZpZGRsZVwiLHVybDpcImh0dHBzOi8vanNmaWRkbGUubmV0L3VzZXIvQmVsZ29DYW5hZGlhbi9maWRkbGVzL1wiLGljb246XCJmYS1qc2ZpZGRsZVwifSx7bmFtZTpcInN0YWNrb3ZlcmZsb3dcIix1cmw6XCJodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTA4MzkyMy9iZWxnb2NhbmFkaWFuXCIsaWNvbjpcImZhLXN0YWNrLW92ZXJmbG93XCJ9XSx3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXImJlVzZXJTdmMubG9naW4od2luZG93LmxvY2FsU3RvcmFnZS51c2VyKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7bG9naW4ocmVzcG9uc2UuZGF0YSl9KSksJHNjb3BlLiRvbihcImxvZ2luXCIsKGZ1bmN0aW9uKF8sdXNlcil7bG9naW4odXNlcil9KSksJHNjb3BlLiRvbihcInVwZGF0ZVwiLChmdW5jdGlvbihfLHVzZXIpeyRzY29wZS5jdXJyZW50VXNlcj11c2VyLCRzY29wZS5jdXJyZW50VXNlci5iaXJ0aERhdGU9bmV3IERhdGUoJHNjb3BlLmN1cnJlbnRVc2VyLmJpcnRoRGF0ZSksJHNjb3BlLmxvYWRpbmc9ITEsc2V0VGltZW91dCgoZnVuY3Rpb24oKXskKFwiI2xvYWRpbmctaWNvblwiKS5mYWRlT3V0KFwic2xvd1wiKX0pLDFlMyl9KSksJHNjb3BlLiRvbihcImxvYWRpbmdcIiwoZnVuY3Rpb24oXyx1c2VyKXskc2NvcGUubG9hZGluZz0hMCwkKFwiI2xvYWRpbmctaWNvblwiKS5zaG93KCl9KSksJHNjb3BlLiRvbihcImxvYWRlZFwiLChmdW5jdGlvbihfLHVzZXIpeyRzY29wZS5sb2FkaW5nPSExLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7JChcIiNsb2FkaW5nLWljb25cIikuZmFkZU91dChcInNsb3dcIil9KSwxZTMpfSkpLCRzY29wZS5sb2dvdXQ9ZnVuY3Rpb24oKXtmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpLnRoZW4oKGZ1bmN0aW9uKCl7JHNjb3BlLmxvZ2dlZEluPSExLHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKSwkc2NvcGUuJGJyb2FkY2FzdChcImxvZ291dFwiKX0pKS5jYXRjaCgoZnVuY3Rpb24oZXJyb3Ipe30pKX0sJHNjb3BlLmZvcm1hdERhdGU9ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuKGRhdGU9bmV3IERhdGUoZGF0ZSkpLmdldERhdGUoKStcIi1cIitbXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCJdW2RhdGUuZ2V0TW9udGgoKV0rXCItXCIrZGF0ZS5nZXRGdWxsWWVhcigpfSxTdHJpbmcucHJvdG90eXBlLmNhcGl0YWxpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0aGlzLnNsaWNlKDEpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQXN0ZXJvaWRzQ3RybFwiLFtcIiRzY29wZVwiLFwiR2FtZVN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxHYW1lU3ZjKXskc2NvcGUuYW5ub3VuY2U9ITE7dmFyIGNhbnZhcz1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFzdGVyb2lkcy1wYWdlXCIpLGN0eD1jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO2N0eC5mb250PVwiMzBweCBDb21pYyBTYW5zIE1TXCIsY3R4LmZpbGxTdHlsZT1cInJlZFwiLGN0eC50ZXh0QWxpZ249XCJjZW50ZXJcIjt2YXIgc2hvdHM9e30sYXN0ZXJvaWRzPXt9LHBvd2VydXBzPXt9LGV4cGxvc2lvbnM9e30sbWFwPXt9LHNwYWNlPU1hdGguZmxvb3IoMTAqTWF0aC5yYW5kb20oKSkscG93ZXJ1cFR5cGVzPVt7bmFtZTpcInNwZWVkXCIsYW5ub3VuY2VtZW50OlwiTWF4IFNwZWVkIOKHp1wiLGN5Y2xlOntyb3dzOjEsY29sdW1uczo0LHNpemU6WzE0LDM1XSxpOjAsZGlyZWN0aW9uOiEwfSxpbWc6bmV3IEltYWdlLGFjdGl2YXRlOmZ1bmN0aW9uKHNwYWNlc2hpcCl7c3BhY2VzaGlwLm1heFNwZWVkKz0xMDB9fSx7bmFtZTpcImNvb2xkb3duXCIsYW5ub3VuY2VtZW50OlwiQ29vbGRvd24g4oepXCIsY3ljbGU6e3Jvd3M6MSxjb2x1bW5zOjMsc2l6ZTpbMTcsMTddLGk6MCxkaXJlY3Rpb246ITB9LGltZzpuZXcgSW1hZ2UsYWN0aXZhdGU6ZnVuY3Rpb24oc3BhY2VzaGlwKXtzcGFjZXNoaXAuY29vbGRvd24+MCYmKHNwYWNlc2hpcC5jb29sZG93blRpbWUtPTEpfX0se25hbWU6XCJyYW5nZVwiLGFubm91bmNlbWVudDpcIkZpcmluZyBSYW5nZSDih6dcIixjeWNsZTp7cm93czo0LGNvbHVtbnM6MSxzaXplOlszMCw4XSxpOjAsZGlyZWN0aW9uOiEwfSxpbWc6bmV3IEltYWdlLGFjdGl2YXRlOmZ1bmN0aW9uKHNwYWNlc2hpcCl7c3BhY2VzaGlwLnJhbmdlKz01fX0se25hbWU6XCJzaGllbGRcIixhbm5vdW5jZW1lbnQ6XCJTaGllbGRcIixjeWNsZTp7cm93czo1LGNvbHVtbnM6MSxzaXplOlsxOSwxOV0saTowLGRpcmVjdGlvbjohMH0saW1nOm5ldyBJbWFnZSxhY3RpdmF0ZTpmdW5jdGlvbihzcGFjZXNoaXApe3NwYWNlc2hpcC5zaGllbGQ9ITB9fSx7bmFtZTpcIm51a2VcIixhbm5vdW5jZW1lbnQ6XCJOdWtlXCIsY3ljbGU6e3Jvd3M6MSxjb2x1bW5zOjgsc2l6ZTpbMTUsMTVdLGk6MCxkaXJlY3Rpb246ITB9LGltZzpuZXcgSW1hZ2UsYWN0aXZhdGU6ZnVuY3Rpb24oc3BhY2VzaGlwKXtmb3IodmFyIGkgaW4gYXN0ZXJvaWRzKWFzdGVyb2lkc1tpXS5leHBsb2RlKCk7c3Bhd25Bc3Rlcm9pZHMoNSl9fV07cG93ZXJ1cFR5cGVzLmZvckVhY2goKGZ1bmN0aW9uKHBvd2VydXAsaSxhcnJheSl7YXJyYXlbaV0uaW1nLnNyYz1cImFzdGVyb2lkcy9cIitwb3dlcnVwLm5hbWUrXCIucG5nXCJ9KSk7dmFyIHNwYWNlc2hpcCxleHBsb3Npb25JbWFnZT1uZXcgSW1hZ2U7ZnVuY3Rpb24gZXZhbHVhdGVLZXlzKCl7JHNjb3BlLnBsYXlpbmc/KG1hcFszMl0mJjA9PT1zcGFjZXNoaXAuY29vbGRvd24mJnNwYWNlc2hpcC5zaG9vdCgpLG1hcFszN10mJigwPT09c3BhY2VzaGlwLnJvdGF0aW9uP3NwYWNlc2hpcC5yb3RhdGlvbj0zNjA6c3BhY2VzaGlwLnJvdGF0aW9uLT0zKSxtYXBbMzldJiYoMzYwPT09c3BhY2VzaGlwLnJvdGF0aW9uP3NwYWNlc2hpcC5yb3RhdGlvbj0wOnNwYWNlc2hpcC5yb3RhdGlvbis9MyksbWFwWzM4XT9zcGFjZXNoaXAuc3BlZWQ8PXNwYWNlc2hpcC5tYXhTcGVlZCYmKHNwYWNlc2hpcC5zcGVlZCs9NSk6c3BhY2VzaGlwLnNwZWVkPjAmJnNwYWNlc2hpcC5zcGVlZC0tLG1hcFs0MF0mJnNwYWNlc2hpcC5zcGVlZD4wJiYoc3BhY2VzaGlwLnNwZWVkLT0yKSk6bWFwWzMyXSYmKCRzY29wZS5wbGF5aW5nPSEwLCRzY29wZS5zY29yZT0wLHNwYWNlPU1hdGguZmxvb3IoMTAqTWF0aC5yYW5kb20oKSksJHNjb3BlLiRhcHBseSgpLHNwYWNlc2hpcD1uZXcgU3BhY2VzaGlwLCRzY29wZS5zY29yZT0wLHNwYXduQXN0ZXJvaWRzKDUpLGZ1bmN0aW9uIGF1dG9TcGF3bigpe2lmKE9iamVjdC5rZXlzKGFzdGVyb2lkcykubGVuZ3RoPDIwMCl7dmFyIGlkPU1hdGgucm91bmQoMWU4Kk1hdGgucmFuZG9tKCkpO2FzdGVyb2lkc1tpZF09bmV3IEFzdGVyb2lkKGlkKX0kc2NvcGUucGxheWluZyYmc2V0VGltZW91dCgoZnVuY3Rpb24oKXthdXRvU3Bhd24oKX0pLCRzY29wZS5zY29yZTwxZTM/MWUzOiRzY29wZS5zY29yZTwyZTM/OTAwOiRzY29wZS5zY29yZTwzZTM/ODAwOiRzY29wZS5zY29yZTw0ZTM/NzAwOiRzY29wZS5zY29yZTw1ZTM/NjAwOiRzY29wZS5zY29yZTw2ZTM/NTAwOiRzY29wZS5zY29yZTw3ZTM/NDAwOiRzY29wZS5zY29yZTw4ZTM/MzAwOjIwMCl9KCkpfWZ1bmN0aW9uIFNwYWNlc2hpcCgpe3RoaXMud2lkdGg9NTAsdGhpcy5oZWlnaHQ9NTAsdGhpcy5zaGllbGQ9ITEsdGhpcy5yYW5nZT04MCx0aGlzLmNhbm5vbj17eDp0aGlzLndpZHRoLzItNC41LHk6dGhpcy5oZWlnaHQvMi0uMDc4MTI1KnRoaXMuaGVpZ2h0fSx0aGlzLmNvb2xkb3duPTAsdGhpcy5jb29sZG93blRpbWU9MjAsdGhpcy5wb3NpdGlvbj1bY2FudmFzLndpZHRoLzItdGhpcy53aWR0aC8yLGNhbnZhcy5oZWlnaHQvMi10aGlzLmhlaWdodC8yXSx0aGlzLmltZz1uZXcgSW1hZ2UsdGhpcy5pbWcuc3JjPVwiYXN0ZXJvaWRzL3NwYWNlc2hpcC5wbmdcIix0aGlzLnNwZWVkPTAsdGhpcy5tYXhTcGVlZD0xZTMsdGhpcy5hbmdsZT0wLHRoaXMucm90YXRpb249MCx0aGlzLnNob290PWZ1bmN0aW9uKCl7dGhpcy5jb29sZG93bj10aGlzLmNvb2xkb3duVGltZTt2YXIgaWQ9TWF0aC5yb3VuZCgxZTgqTWF0aC5yYW5kb20oKSk7c2hvdHNbaWRdPW5ldyBTaG90KGlkLHRoaXMpfSx0aGlzLm1vdmU9ZnVuY3Rpb24oKXtmb3IodmFyIGkgaW4gdGhpcy5zaGllbGQmJihjdHguYmVnaW5QYXRoKCksY3R4LmFyYyh0aGlzLnBvc2l0aW9uWzBdK3RoaXMud2lkdGgvMix0aGlzLnBvc2l0aW9uWzFdK3RoaXMuaGVpZ2h0LzIsMzAsMCwyKk1hdGguUEkpLGN0eC5maWxsU3R5bGU9XCJyZ2IoMzUsIDIzNywgODYsIDAuNSlcIixjdHguc3Ryb2tlU3R5bGU9XCJyZ2IoNjYsIDE2OCwgMzYsIDAuOClcIixjdHgubGluZVdpZHRoPTUsY3R4LnN0cm9rZSgpLGN0eC5maWxsKCkpLGFzdGVyb2lkcyl7dmFyIGFzdGVyb2lkPWFzdGVyb2lkc1tpXTtpZihoaXQoYXN0ZXJvaWQsdGhpcykpe2lmKCF0aGlzLnNoaWVsZClyZXR1cm4gZ2FtZU92ZXIoKTt0aGlzLnNoaWVsZD0hMSxhc3Rlcm9pZC5leHBsb2RlKCl9fXRoaXMuYW5nbGU9dGhpcy5yb3RhdGlvbix0aGlzLmNvb2xkb3duPjAmJnRoaXMuY29vbGRvd24tLSxtb3ZlKHRoaXMpfX1mdW5jdGlvbiBTaG90KGlkLHNwYWNlc2hpcCl7dGhpcy5pZD1pZCx0aGlzLnBvc2l0aW9uPVtzcGFjZXNoaXAucG9zaXRpb25bMF0rc3BhY2VzaGlwLmNhbm5vbi54K3NwYWNlc2hpcC5jYW5ub24ueCpNYXRoLmNvcygoc3BhY2VzaGlwLnJvdGF0aW9uLTkwKSpNYXRoLlBJLzE4MCksc3BhY2VzaGlwLnBvc2l0aW9uWzFdK3NwYWNlc2hpcC5jYW5ub24ueStzcGFjZXNoaXAuY2Fubm9uLnkqTWF0aC5zaW4oKHNwYWNlc2hpcC5yb3RhdGlvbi05MCkqTWF0aC5QSS8xODApXSx0aGlzLndpZHRoPTksdGhpcy5oZWlnaHQ9MTUsdGhpcy5hbmdsZT1zcGFjZXNoaXAuYW5nbGUsdGhpcy5yb3RhdGlvbj1zcGFjZXNoaXAucm90YXRpb24sdGhpcy5zcGVlZD1zcGFjZXNoaXAuc3BlZWQrNTAwLHRoaXMubGlmZXNwYW49c3BhY2VzaGlwLnJhbmdlLHRoaXMuaW1nPW5ldyBJbWFnZSx0aGlzLmltZy5zcmM9XCJhc3Rlcm9pZHMvc2hvdC5wbmdcIix0aGlzLm1vdmU9ZnVuY3Rpb24oKXt0aGlzLmxpZmVzcGFuLS0sbW92ZSh0aGlzKX19ZnVuY3Rpb24gQXN0ZXJvaWQoaWQpe3RoaXMuaWQ9aWQsdGhpcy53aWR0aD01MCpNYXRoLnJhbmRvbSgpKzIwLHRoaXMuaGVpZ2h0PXRoaXMud2lkdGgsdGhpcy5wb3NpdGlvbj1nZXRFbnRyeVBvc2l0aW9uKHRoaXMud2lkdGgsdGhpcy5oZWlnaHQpLHRoaXMuYW5nbGU9MzYwKk1hdGgucmFuZG9tKCksdGhpcy5yb3RhdGlvbj0zNjAqTWF0aC5yYW5kb20oKSx0aGlzLnJvdGF0aW9uU3BlZWQ9NipNYXRoLnJhbmRvbSgpLTMsdGhpcy5zcGVlZD0zMDAqTWF0aC5yYW5kb20oKSsyLHRoaXMuaW1nPW5ldyBJbWFnZSx0aGlzLmltZy5zcmM9XCJhc3Rlcm9pZHMvYXN0ZXJvaWRcIisoTWF0aC5yb3VuZCg2Kk1hdGgucmFuZG9tKCkpKzEpK1wiLnBuZ1wiLHRoaXMuZXhwbG9kZT1mdW5jdGlvbigpe3JldHVybiBleHBsb3Npb25zW3RoaXMuaWRdPW5ldyBFeHBsb3Npb24odGhpcyksZGVsZXRlIGFzdGVyb2lkc1t0aGlzLmlkXX0sdGhpcy5tb3ZlPWZ1bmN0aW9uKCl7Zm9yKHZhciBpIGluIHRoaXMucm90YXRpb24rPXRoaXMucm90YXRpb25TcGVlZCx0aGlzLnJvdGF0aW9uPjM2MD90aGlzLnJvdGF0aW9uPXRoaXMucm90YXRpb24tMzYwOnRoaXMucm90YXRpb248MCYmKHRoaXMucm90YXRpb249MzYwK3RoaXMucm90YXRpb24pLHNob3RzKXt2YXIgc2hvdD1zaG90c1tpXTtpZihoaXQoc2hvdCx0aGlzKSl7dGhpcy5leHBsb2RlKCk7dmFyIHBvaW50cz1NYXRoLmZsb29yKChzaG90LnNwZWVkLTUwMCkvMTArNzAtdGhpcy53aWR0aCk7TWF0aC5mbG9vcigocG9pbnRzKyRzY29wZS5zY29yZSkvMTAwKT5NYXRoLmZsb29yKCRzY29wZS5zY29yZS8xMDApJiZzcGF3blBvd2VydXAoKSwkc2NvcGUuc2NvcmUrPXBvaW50cywkc2NvcGUuJGFwcGx5KCksZGVsZXRlIHNob3RzW2ldfX1tb3ZlKHRoaXMpfX1mdW5jdGlvbiBFeHBsb3Npb24ob2JqZWN0KXt0aGlzLnBvc2l0aW9uPVtvYmplY3QucG9zaXRpb25bMF0sb2JqZWN0LnBvc2l0aW9uWzFdXSx0aGlzLndpZHRoPW9iamVjdC53aWR0aCx0aGlzLmhlaWdodD1vYmplY3QuaGVpZ2h0LHRoaXMuc3BlZWQ9MCx0aGlzLmFuZ2xlPTM2MCpNYXRoLnJhbmRvbSgpLHRoaXMuY3ljbGU9e3Jvd3M6Nixjb2x1bW5zOjgsc2l6ZTpbMjU2LDI1Nl0saTowLGRpcmVjdGlvbjohMH0sdGhpcy5saWZlc3Bhbj00Nyx0aGlzLmltZz1leHBsb3Npb25JbWFnZSx0aGlzLm1vdmU9ZnVuY3Rpb24oKXt0aGlzLmxpZmVzcGFuLS0sbW92ZSh0aGlzKSx0aGlzLmN5Y2xlLmRpcmVjdGlvbj90aGlzLmN5Y2xlLmkrKzp0aGlzLmN5Y2xlLmktLX19ZnVuY3Rpb24gUG93ZXJ1cChpZCl7dGhpcy5pZD1pZCx0aGlzLnBvd2VydXA9cG93ZXJ1cFR5cGVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpwb3dlcnVwVHlwZXMubGVuZ3RoKV0sdGhpcy5jeWNsZT10aGlzLnBvd2VydXAuY3ljbGUsdGhpcy5saWZlc3Bhbj0xZTMsdGhpcy5jeWNsZS5zaXplWzFdPnRoaXMuY3ljbGUuc2l6ZVswXT8odGhpcy5oZWlnaHQ9NDAsdGhpcy53aWR0aD1NYXRoLnJvdW5kKHRoaXMuaGVpZ2h0L3RoaXMuY3ljbGUuc2l6ZVsxXSp0aGlzLmN5Y2xlLnNpemVbMF0pKToodGhpcy53aWR0aD00MCx0aGlzLmhlaWdodD1NYXRoLnJvdW5kKHRoaXMud2lkdGgvdGhpcy5jeWNsZS5zaXplWzBdKnRoaXMuY3ljbGUuc2l6ZVsxXSkpLHRoaXMucG9zaXRpb249Z2V0RW50cnlQb3NpdGlvbih0aGlzLndpZHRoLHRoaXMuaGVpZ2h0KSx0aGlzLmltZz10aGlzLnBvd2VydXAuaW1nLHRoaXMuYW5nbGU9MzYwKk1hdGgucmFuZG9tKCksdGhpcy5zcGVlZD0xNTAqTWF0aC5yYW5kb20oKSs1MDt2YXIgZGVsYXk9NTt0aGlzLm1vdmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5saWZlc3Bhbjw9MD9kZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF06aGl0KHNwYWNlc2hpcCx0aGlzKT8oJHNjb3BlLmFubm91bmNlPSEwLCRzY29wZS5hbm5vdW5jZW1lbnQ9dGhpcy5wb3dlcnVwLmFubm91bmNlbWVudCwkc2NvcGUuJGFwcGx5KCksc2V0VGltZW91dCgoZnVuY3Rpb24oKXskc2NvcGUuYW5ub3VuY2U9ITEsJHNjb3BlLiRhcHBseSgpfSksMWUzKSx0aGlzLnBvd2VydXAuYWN0aXZhdGUoc3BhY2VzaGlwKSxkZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF0pOih0aGlzLmxpZmVzcGFuLS0sbW92ZSh0aGlzKSx2b2lkKGRlbGF5PD0wPyh0aGlzLmN5Y2xlLmRpcmVjdGlvbj90aGlzLmN5Y2xlLmkrKzp0aGlzLmN5Y2xlLmktLSxkZWxheT01KTpkZWxheS0tKSl9fWZ1bmN0aW9uIG1vdmUob2JqZWN0KXtpZihvYmplY3QucG9zaXRpb25bMF0rPW9iamVjdC5zcGVlZC8xMDAqTWF0aC5jb3MoKG9iamVjdC5hbmdsZS05MCkqTWF0aC5QSS8xODApLG9iamVjdC5wb3NpdGlvblsxXSs9b2JqZWN0LnNwZWVkLzEwMCpNYXRoLnNpbigob2JqZWN0LmFuZ2xlLTkwKSpNYXRoLlBJLzE4MCksb2JqZWN0LnBvc2l0aW9uWzBdPmNhbnZhcy53aWR0aD9vYmplY3QucG9zaXRpb25bMF09LW9iamVjdC53aWR0aDpvYmplY3QucG9zaXRpb25bMF08LW9iamVjdC53aWR0aCYmKG9iamVjdC5wb3NpdGlvblswXT1jYW52YXMud2lkdGgpLG9iamVjdC5wb3NpdGlvblsxXT5jYW52YXMuaGVpZ2h0P29iamVjdC5wb3NpdGlvblsxXT0tb2JqZWN0LmhlaWdodDpvYmplY3QucG9zaXRpb25bMV08LW9iamVjdC5oZWlnaHQmJihvYmplY3QucG9zaXRpb25bMV09Y2FudmFzLmhlaWdodCksY3R4LnNhdmUoKSxjdHgudHJhbnNsYXRlKG9iamVjdC5wb3NpdGlvblswXSxvYmplY3QucG9zaXRpb25bMV0pLGN0eC50cmFuc2xhdGUob2JqZWN0LndpZHRoLzIsb2JqZWN0LmhlaWdodC8yKSxjdHgucm90YXRlKG9iamVjdC5yb3RhdGlvbipNYXRoLlBJLzE4MCksb2JqZWN0LmN5Y2xlKXt2YXIgY29sdW1uPW9iamVjdC5jeWNsZS5pJW9iamVjdC5jeWNsZS5jb2x1bW5zLHJvdz1NYXRoLmZsb29yKG9iamVjdC5jeWNsZS5pL29iamVjdC5jeWNsZS5jb2x1bW5zKTtjdHguZHJhd0ltYWdlKG9iamVjdC5pbWcsb2JqZWN0LmN5Y2xlLnNpemVbMF0qY29sdW1uLG9iamVjdC5jeWNsZS5zaXplWzFdKnJvdyxvYmplY3QuY3ljbGUuc2l6ZVswXSxvYmplY3QuY3ljbGUuc2l6ZVsxXSwtb2JqZWN0LndpZHRoLzIsLW9iamVjdC5oZWlnaHQvMixvYmplY3Qud2lkdGgsb2JqZWN0LmhlaWdodCksb2JqZWN0LmN5Y2xlLmk8PTA/KG9iamVjdC5jeWNsZS5pPTAsb2JqZWN0LmN5Y2xlLmRpcmVjdGlvbj0hMCk6b2JqZWN0LmN5Y2xlLmk+PW9iamVjdC5jeWNsZS5jb2x1bW5zKm9iamVjdC5jeWNsZS5yb3dzJiYob2JqZWN0LmN5Y2xlLmk9b2JqZWN0LmN5Y2xlLmNvbHVtbnMqb2JqZWN0LmN5Y2xlLnJvd3MtMSxvYmplY3QuY3ljbGUuZGlyZWN0aW9uPSExKX1lbHNlIGN0eC5kcmF3SW1hZ2Uob2JqZWN0LmltZywtb2JqZWN0LndpZHRoLzIsLW9iamVjdC5oZWlnaHQvMixvYmplY3Qud2lkdGgsb2JqZWN0LmhlaWdodCk7Y3R4LnJlc3RvcmUoKX1mdW5jdGlvbiBnZXRFbnRyeVBvc2l0aW9uKHdpZHRoLGhlaWdodCl7dmFyIHgsZ3JpZFg9MipNYXRoLnJhbmRvbSgpLGdyaWRZPTIqTWF0aC5yYW5kb20oKSx5PTA7cmV0dXJuIGdyaWRYPj0xPyh4PU1hdGgucmFuZG9tKCkqY2FudmFzLndpZHRoLHk9eT49MT8wLWhlaWdodDpjYW52YXMuaGVpZ2h0KTooeT1NYXRoLnJhbmRvbSgpKmNhbnZhcy5oZWlnaHQseD1ncmlkWT49MT8wLXdpZHRoOmNhbnZhcy53aWR0aCksW3gseV19ZnVuY3Rpb24gaGl0KG9iamVjdDEsb2JqZWN0Mil7cmV0dXJuIG9iamVjdDEucG9zaXRpb25bMF08b2JqZWN0Mi5wb3NpdGlvblswXStvYmplY3QyLndpZHRoJiZvYmplY3QyLnBvc2l0aW9uWzBdPG9iamVjdDEucG9zaXRpb25bMF0rb2JqZWN0MS53aWR0aCYmb2JqZWN0MS5wb3NpdGlvblsxXTxvYmplY3QyLnBvc2l0aW9uWzFdK29iamVjdDIuaGVpZ2h0JiZvYmplY3QyLnBvc2l0aW9uWzFdPG9iamVjdDEucG9zaXRpb25bMV0rb2JqZWN0MS5oZWlnaHR9ZnVuY3Rpb24gc3Bhd25Bc3Rlcm9pZHMoYW1vdW50KXt2YXIgaT0wO2Rve3ZhciBpZD1NYXRoLnJvdW5kKDFlOCpNYXRoLnJhbmRvbSgpKTthc3Rlcm9pZHNbaWRdPW5ldyBBc3Rlcm9pZChpZCl9d2hpbGUoaSsrPD1hbW91bnQpfWZ1bmN0aW9uIHNwYXduUG93ZXJ1cCgpe2lmKE9iamVjdC5rZXlzKHBvd2VydXBzKS5sZW5ndGg8Myl7dmFyIGlkPU1hdGgucm91bmQoMWU4Kk1hdGgucmFuZG9tKCkpO3Bvd2VydXBzW2lkXT1uZXcgUG93ZXJ1cChpZCl9fWZ1bmN0aW9uIGdhbWVPdmVyKCl7Zm9yKHZhciBpIGluICRzY29wZS5wbGF5aW5nPSExLGFzdGVyb2lkcylhc3Rlcm9pZHNbaV0uZXhwbG9kZSgpO3Nob3RzPXt9LCRzY29wZS5sb2dnZWRJbj8kc2NvcGUuY3VycmVudFVzZXIuaGlnaHNjb3JlLmFzdGVyb2lkczwkc2NvcGUuc2NvcmUmJigkc2NvcGUuY3VycmVudFVzZXIuaGlnaHNjb3JlLmFzdGVyb2lkcz0kc2NvcGUuc2NvcmUsR2FtZVN2Yy5zZXRIaWdoc2NvcmUoXCJhc3Rlcm9pZHNcIiwkc2NvcGUuY3VycmVudFVzZXIuX2lkLCRzY29wZS5zY29yZSkpOiRzY29wZS5oaWdoc2NvcmU8JHNjb3BlLnNjb3JlJiYoJHNjb3BlLmhpZ2hzY29yZT0kc2NvcGUuc2NvcmUpfWZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpe2NvbnNvbGUubG9nKHdpbmRvdy5pbm5lcldpZHRoKSxjYW52YXMud2lkdGg9d2luZG93LmlubmVyV2lkdGgsY2FudmFzLmhlaWdodD13aW5kb3cuaW5uZXJIZWlnaHQtKGNhbnZhcy53aWR0aDw9NzY4PzUwOjEwNSl9ZXhwbG9zaW9uSW1hZ2Uuc3JjPVwiYXN0ZXJvaWRzL2V4cGxvc2lvbi5wbmdcIix3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwoZnVuY3Rpb24oZSl7bWFwW2Uua2V5Q29kZXx8ZS53aGljaF09ITB9KSwhMCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLChmdW5jdGlvbihlKXttYXBbZS5rZXlDb2RlfHxlLndoaWNoXT0hMX0pLCEwKSwkc2NvcGUuaGlnaHNjb3JlPTAsd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixyZXNpemVDYW52YXMsITEpLHJlc2l6ZUNhbnZhcygpLHJlcXVlc3RBbmltYXRpb25GcmFtZSgoZnVuY3Rpb24gZHJhdygpe2Zvcih2YXIgaSBpbiBjdHguY2xlYXJSZWN0KDAsMCxjYW52YXMud2lkdGgsY2FudmFzLmhlaWdodCksc2hvdHMpc2hvdHNbaV0ubGlmZXNwYW48PTA/ZGVsZXRlIHNob3RzW2ldOnNob3RzW2ldLm1vdmUoKTtmb3IoaSBpbiBhc3Rlcm9pZHMpYXN0ZXJvaWRzW2ldLm1vdmUoKTtmb3IoaSBpbiBwb3dlcnVwcylwb3dlcnVwc1tpXS5tb3ZlKCk7Zm9yKGkgaW4gZXhwbG9zaW9ucylleHBsb3Npb25zW2ldLmxpZmVzcGFuPD0wP2RlbGV0ZSBleHBsb3Npb25zW2ldOmV4cGxvc2lvbnNbaV0ubW92ZSgpO2lmKGV2YWx1YXRlS2V5cygpLCRzY29wZS5wbGF5aW5nKXNwYWNlc2hpcC5tb3ZlKCk7ZWxzZXt2YXIgZ3JhZGllbnQ9Y3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsMCxjYW52YXMud2lkdGgsMCk7Z3JhZGllbnQuYWRkQ29sb3JTdG9wKFwiMFwiLFwicmdiKFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIpXCIpLGdyYWRpZW50LmFkZENvbG9yU3RvcChcIjAuMjVcIixcInJnYihcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigyNTYtMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiKVwiKSxncmFkaWVudC5hZGRDb2xvclN0b3AoXCIwLjVcIixcInJnYihcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiKVwiKSxncmFkaWVudC5hZGRDb2xvclN0b3AoXCIwLjc1XCIsXCJyZ2IoXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIilcIiksZ3JhZGllbnQuYWRkQ29sb3JTdG9wKFwiMS4wXCIsXCJyZ2IoXCIrTWF0aC5mbG9vcigyNTYtMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIilcIiksY3R4LmZpbGxTdHlsZT1ncmFkaWVudCxjdHguZm9udD1cIjYwcHggTW9ub3RvblwiLGN0eC5maWxsVGV4dChcIkFzdGVyb2lkc1wiLGNhbnZhcy53aWR0aC8yLWN0eC5tZWFzdXJlVGV4dChcIkFzdGVyb2lkc1wiKS53aWR0aC8yLGNhbnZhcy5oZWlnaHQvMiksY3R4LmZvbnQ9XCIyMHB4IEFsZHJpY2hcIixjdHguZmlsbFRleHQoXCJQcmVzcyBzcGFjZSB0byBzdGFydFwiLGNhbnZhcy53aWR0aC8yLWN0eC5tZWFzdXJlVGV4dChcIlByZXNzIHNwYWNlIHRvIHN0YXJ0XCIpLndpZHRoLzIsY2FudmFzLmhlaWdodC8yKzIwKSxjdHguZmlsbFRleHQoXCJEZXNpZ25lZCBhbmQgZGV2ZWxvcGVkIGJ5IExhdXJlbnQgRGViYWNrZXJcIixjYW52YXMud2lkdGgvMi1jdHgubWVhc3VyZVRleHQoXCJEZXNpZ25lZCBhbmQgZGV2ZWxvcGVkIGJ5IExhdXJlbnQgRGViYWNrZXJcIikud2lkdGgvMixjYW52YXMuaGVpZ2h0LTMwKX0odGFsbHkrPWRpcmVjdGlvbj8xOi0xKT4xMDA/KHRhbGx5PTEwMCxkaXJlY3Rpb249ITEpOnRhbGx5PDAmJih0YWxseT0wLGRpcmVjdGlvbj0hMCk7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpfSkpO3ZhciB0YWxseT0wLGRpcmVjdGlvbj0hMDskc2NvcGUuc3BhY2U9ZnVuY3Rpb24oKXtyZXR1cm57YmFja2dyb3VuZEltYWdlOid1cmwoXCJhc3Rlcm9pZHMvc3BhY2UnK3NwYWNlKycuanBnXCIpJ319fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJCdWJibGVzQ3RybFwiLFtcIiRzY29wZVwiLGZ1bmN0aW9uKCRzY29wZSl7dmFyIGNhbnZhcz1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1YmJsZXMtcGFnZVwiKSxjdHg9Y2FudmFzLmdldENvbnRleHQoXCIyZFwiKSxidWJibGVzPVtdLGNvbG9ycz1bXCIjZmZjMzAwXCIsXCIjZmY1NzMzXCIsXCIjYzcwMDM5XCIsXCIjOTAwYzNlXCIsXCIjNTcxODQ1XCJdO2Z1bmN0aW9uIEJ1YmJsZSgpe3RoaXMubGlmZXNwYW49MCx0aGlzLnJhZGl1cz0xLHRoaXMuZXhwYW5kaW5nPSEwLHRoaXMuc3BlZWQ9TWF0aC5yb3VuZCgzKk1hdGgucmFuZG9tKCkpLHRoaXMuY2lyY3VtZmVyZW5jZT1NYXRoLnJvdW5kKDUwKk1hdGgucmFuZG9tKCkpKzUsdGhpcy5tYXhSYWRpdXM9TWF0aC5yb3VuZCgyMDAqTWF0aC5yYW5kb20oKSkrMjAsdGhpcy54PU1hdGgucm91bmQoTWF0aC5yYW5kb20oKSpjYW52YXMud2lkdGgpLHRoaXMueT1NYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkqY2FudmFzLmhlaWdodCksdGhpcy52eD1NYXRoLnJhbmRvbSgpPj0uNT8xOi0xLHRoaXMudnk9TWF0aC5yYW5kb20oKT49LjU/MTotMX1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uIGZpbHRlckJ1YmJsZXMoKXtidWJibGVzLnB1c2gobmV3IEJ1YmJsZSksYnViYmxlcz1idWJibGVzLmZpbHRlcigoZnVuY3Rpb24oYnViYmxlKXtyZXR1cm4gYnViYmxlLnJhZGl1cz09PWJ1YmJsZS5tYXhSYWRpdXMmJihidWJibGUuZXhwYW5kaW5nPSExKSxidWJibGUueCs9YnViYmxlLnZ4KmJ1YmJsZS5zcGVlZCxidWJibGUueSs9YnViYmxlLnZ5KmJ1YmJsZS5zcGVlZCxidWJibGUucmFkaXVzKz1idWJibGUuZXhwYW5kaW5nPzE6LTEsYnViYmxlLnJhZGl1cz4wfSkpLGN0eC5jbGVhclJlY3QoMCwwLGNhbnZhcy53aWR0aCxjYW52YXMuaGVpZ2h0KSxidWJibGVzLmZvckVhY2goKGZ1bmN0aW9uKGJ1YmJsZSl7TWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoKmJ1YmJsZS5yYWRpdXMvYnViYmxlLm1heFJhZGl1cyksY3R4LmJlZ2luUGF0aCgpLGN0eC5hcmMoYnViYmxlLngsYnViYmxlLnksYnViYmxlLnJhZGl1cywwLDIqTWF0aC5QSSksY3R4LmZpbGxTdHlsZT1jb2xvcnNbTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoKmJ1YmJsZS5yYWRpdXMvYnViYmxlLm1heFJhZGl1cyldLGN0eC5maWxsKCksY3R4LnN0cm9rZVN0eWxlPWNvbG9yc1tjb2xvcnMubGVuZ3RoLU1hdGgucm91bmQoY29sb3JzLmxlbmd0aCpidWJibGUucmFkaXVzL2J1YmJsZS5tYXhSYWRpdXMpXSxjdHgubGluZVdpZHRoPWJ1YmJsZS5jaXJjdW1mZXJlbmNlKmJ1YmJsZS5yYWRpdXMvYnViYmxlLm1heFJhZGl1cyxjdHguc3Ryb2tlKCl9KSkscmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZpbHRlckJ1YmJsZXMpfSkpLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcmVzaXplQ2FudmFzKCl7Y2FudmFzLndpZHRoPXdpbmRvdy5pbm5lcldpZHRoLGNhbnZhcy5oZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0LShjYW52YXMud2lkdGg8PTc2OD81NToxMTEpfXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIscmVzaXplQ2FudmFzLCExKSxyZXNpemVDYW52YXMoKX0oKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQ29udGFjdEN0cmxcIixbXCIkc2NvcGVcIixcIkVtYWlsU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEVtYWlsU3ZjKXskc2NvcGUub3B0aW9ucz1be25hbWU6XCJTcGFtXCIsdGV4dDpcIkkgYW0gYSBzcGFtIGJvdCBhbmQgYXV0b21hdGljYWxseSBjaGVjayB0aGUgZmlyc3Qgb3B0aW9uIEkgZmluZCFcIn0se25hbWU6XCJPcHBvcnR1bml0aXlcIix0ZXh0OlwiWW91IHNlZW0gdG8gaGF2ZSB0aGUgc2tpbGxzIEkgc2VlaywgSSdkIGxpa2UgdG8gdGFsayBhYm91dCBzb21lIG9wcG9ydHVuaXRpZXMuXCJ9LHtuYW1lOlwiUmVzdW1lXCIsdGV4dDpcIkkgZGlnIHRoZSByZXN1bWUsIGhvdyBkaWQgeW91IG1ha2UgaXQ/XCJ9LHtuYW1lOlwiT3RoZXJcIix0ZXh0OlwiU3VtdGluIGVsc2UhXCJ9XSwkc2NvcGUuY29udGFjdD17ZW1haWw6XCJcIixuYW1lOlwiXCIscGhvbmU6XCJcIixhYm91dDpcIlwiLG1lc3NhZ2U6XCJcIn0sJHNjb3BlLnNlbmQ9ZnVuY3Rpb24oKXskc2NvcGUuc2VuZGluZz0hMCxjb25zb2xlLmxvZyhcImhlcmVcIiksRW1haWxTdmMuc2VuZCh7ZW1haWw6JHNjb3BlLmNvbnRhY3QuZW1haWwsbmFtZTokc2NvcGUuY29udGFjdC5uYW1lLHBob25lOiRzY29wZS5jb250YWN0LnBob25lLGFib3V0OiRzY29wZS5jb250YWN0LmFib3V0LG1lc3NhZ2U6JHNjb3BlLmNvbnRhY3QubWVzc2FnZX0pLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuc2VudD0hMCxjb25zb2xlLmxvZyhcIlNVQ0NFU1MuIHN0YXR1cz0lZCwgdGV4dD0lc1wiLHJlc3BvbnNlLnN0YXR1cyxyZXNwb25zZS50ZXh0KSxjb25zb2xlLmxvZyhyZXNwb25zZSl9KSwoZnVuY3Rpb24oZXJyKXskc2NvcGUuc2VuZGluZz0hMSxjb25zb2xlLmxvZyhcIkZBSUxFRC4gZXJyb3I9XCIsZXJyKX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkV4cGVyaWVuY2VDdHJsXCIsW1wiJHNjb3BlXCIsZnVuY3Rpb24oJHNjb3BlKXskc2NvcGUuZ2V0U2tpbGw9ZnVuY3Rpb24oc2tpbGxDb2RlKXtpZigkc2NvcGUuc2tpbGxzKXJldHVybiAkc2NvcGUuc2tpbGxzLmZpbmQoKGZ1bmN0aW9uKHNraWxsKXtyZXR1cm4gc2tpbGwuY29kZT09PXNraWxsQ29kZX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkhvYmJpZXNDdHJsXCIsW1wiJHNjb3BlXCIsXCIkd2luZG93XCIsZnVuY3Rpb24oJHNjb3BlLCR3aW5kb3cpeyRzY29wZS5ob2JieVNlbGVjdG9yVmlzaWJsZT0hMSwkLmdldEpTT04oXCJodHRwczovL3d3dy5yZWRkaXQuY29tL3VzZXIvYmVsZ29jYW5hZGlhbi9hYm91dC8uanNvblwiLChmdW5jdGlvbihyZXNwb25zZSl7fSkpLCRzY29wZS5zZWxlY3RlZEhvYmJ5PSRzY29wZS5ob2JiaWVzWzBdLCRzY29wZS5zZWxlY3RIb2JieT1mdW5jdGlvbihob2JieSl7JHNjb3BlLnNlbGVjdGVkSG9iYnk9aG9iYnksJHNjb3BlLmhvYmJ5U2VsZWN0b3JWaXNpYmxlPSExfSwkc2NvcGUuc2hvd0hvYmJ5PWZ1bmN0aW9uKHZhbHVlLGluZGV4LGFycmF5KXtyZXR1cm4hIXZhbHVlLmltYWdlcyYmdmFsdWUuaW1hZ2VzLmxlbmd0aD4wfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiTGVtbWluZ3NDdHJsXCIsW1wiJHNjb3BlXCIsXCJHYW1lU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEdhbWVTdmMpe3ZhciBjYW52YXM9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsZW1taW5ncy1wYWdlXCIpLGN0eD1jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLGxlbW1pbmdzSW1hZ2U9bmV3IEltYWdlO2xlbW1pbmdzSW1hZ2Uuc3JjPVwibGVtbWluZ3MvbGVtbWluZ3MucG5nXCI7dmFyIGRlY29ySW1hZ2U9bmV3IEltYWdlO2RlY29ySW1hZ2Uuc3JjPVwibGVtbWluZ3MvZGVjb3IucG5nXCI7dmFyIGxlbW1pbmdzPXt9LHN0YXJ0ZWQ9ITEsYWN0aW9ucz17d2Fsazp7c3RhcnQ6WzAsMF0sZW5kOlszMjAsMjBdLGNvbHVtbnM6OCxyb3dzOjEscmV2ZXJzZTohMX0saHVoOntzdGFydDpbMzIwLDBdLGVuZDpbNjQwLDIwXSxjb2x1bW5zOjgscm93czoxLHJldmVyc2U6ITB9LGZhbGw6e3N0YXJ0OlswLDgwXSxlbmQ6WzE2MCwxMDBdLGNvbHVtbnM6NCxyb3dzOjEscmV2ZXJzZTohMX0sZmx5OntzdGFydDpbMTYwLDgwXSxlbmQ6WzQ4MCwxMTBdLGNvbHVtbnM6OCxyb3dzOjEscmV2ZXJzZTohMX0sc3RvcDp7c3RhcnQ6WzAsMTIwXSxlbmQ6WzY0MCwxNDBdLGNvbHVtbnM6MTYscm93czoxLHJldmVyc2U6ITF9LGNsaW1iOntzdGFydDpbMCwxNjBdLGVuZDpbNjQwLDE4NV0sY29sdW1uczoxNixyb3dzOjEscmV2ZXJzZTohMX0sYnVpbGQ6e3N0YXJ0OlswLDIwMF0sZW5kOls2NDAsMjI1XSxjb2x1bW5zOjE2LHJvd3M6MSxyZXZlcnNlOiExfSxwdW5jaDp7c3RhcnQ6WzAsMjQwXSxlbmQ6WzY0MCwzMDBdLGNvbHVtbnM6MTYscm93czoyLHJldmVyc2U6ITF9LGRpZzp7c3RhcnQ6WzAsMzIwXSxlbmQ6WzMyMCwzNDVdLGNvbHVtbnM6OCxyb3dzOjEscmV2ZXJzZTohMX19O2Z1bmN0aW9uIExlbW1pbmcoaW5pdCl7dGhpcy5wb3NpdGlvbj1bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihjYW52YXMud2lkdGgtMjAwKSkrMTAwLE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooY2FudmFzLmhlaWdodC0yMDApKSsxMDBdLHRoaXMuZGlyZWN0aW9uPTIqTWF0aC5yYW5kb20oKT4xPzA6MSx0aGlzLmFjdD1mdW5jdGlvbihhY3Rpb24pe3RoaXMuYWN0aW9uPWFjdGlvbnNbYWN0aW9uXSx0aGlzLmN5Y2xlPTAsdGhpcy53aWR0aD0odGhpcy5hY3Rpb24uZW5kWzBdLXRoaXMuYWN0aW9uLnN0YXJ0WzBdKS90aGlzLmFjdGlvbi5jb2x1bW5zLHRoaXMuaGVpZ2h0PSh0aGlzLmFjdGlvbi5lbmRbMV0tdGhpcy5hY3Rpb24uc3RhcnRbMV0tMjAqKHRoaXMuYWN0aW9uLnJvd3MtMSkpL3RoaXMuYWN0aW9uLnJvd3MsdGhpcy5hbmltYXRpb249ITB9LHRoaXMuYWN0KGluaXQpLHRoaXMubW92ZT1mdW5jdGlvbigpe2N0eC5zYXZlKCksY3R4LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uWzBdLHRoaXMucG9zaXRpb25bMV0pLGN0eC50cmFuc2xhdGUodGhpcy53aWR0aC8yLHRoaXMuaGVpZ2h0LzIpLDA9PT10aGlzLmRpcmVjdGlvbiYmY3R4LnNjYWxlKC0xLDEpO3ZhciBjb2x1bW49dGhpcy5jeWNsZSV0aGlzLmFjdGlvbi5jb2x1bW5zLHJvdz1NYXRoLmZsb29yKHRoaXMuY3ljbGUvdGhpcy5hY3Rpb24uY29sdW1ucyk7Y3R4LmRyYXdJbWFnZShsZW1taW5nc0ltYWdlLHRoaXMud2lkdGgqY29sdW1uK3RoaXMuYWN0aW9uLnN0YXJ0WzBdLCh0aGlzLmhlaWdodCsyMCkqcm93K3RoaXMuYWN0aW9uLnN0YXJ0WzFdLHRoaXMud2lkdGgsdGhpcy5oZWlnaHQsMCwwLDIqdGhpcy53aWR0aCwyKnRoaXMuaGVpZ2h0KSxjdHgucmVzdG9yZSgpLHRoaXMuYWN0aW9uLnJldmVyc2U/dGhpcy5hbmltYXRpb24/KHRoaXMuY3ljbGUrKyx0aGlzLmN5Y2xlPj10aGlzLmFjdGlvbi5jb2x1bW5zKnRoaXMuYWN0aW9uLnJvd3MmJih0aGlzLmFuaW1hdGlvbj0hdGhpcy5hbmltYXRpb24sdGhpcy5jeWNsZS0tKSk6KHRoaXMuY3ljbGUtLSx0aGlzLmN5Y2xlPDAmJih0aGlzLmFuaW1hdGlvbj0hdGhpcy5hbmltYXRpb24sdGhpcy5jeWNsZT0wKSk6KHRoaXMuY3ljbGUrKyx0aGlzLmN5Y2xlPj10aGlzLmFjdGlvbi5jb2x1bW5zKnRoaXMuYWN0aW9uLnJvd3MmJih0aGlzLmN5Y2xlPTApKX19ZnVuY3Rpb24gcmVzaXplQ2FudmFzKCl7Y2FudmFzLndpZHRoPXdpbmRvdy5pbm5lcldpZHRoLGNhbnZhcy5oZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0LShjYW52YXMud2lkdGg8PTc2OD81MDoxMDUpfXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIscmVzaXplQ2FudmFzLCExKSxyZXNpemVDYW52YXMoKSxPYmplY3Qua2V5cyhhY3Rpb25zKS5mb3JFYWNoKChmdW5jdGlvbihhY3Rpb24pe2xlbW1pbmdzW01hdGgucm91bmQoMWU4Kk1hdGgucmFuZG9tKCkpXT1uZXcgTGVtbWluZyhhY3Rpb24pfSkpO2xldCBoYXRjaD1uZXcgZnVuY3Rpb24oKXt0aGlzLnBvc2l0aW9uPVsyMCwyMF0sdGhpcy5hY3Rpb249e3N0YXJ0OlswLDBdLGVuZDpbODIsNTAwXSxjb2x1bW5zOjEscm93czoxMH0sdGhpcy53aWR0aD0odGhpcy5hY3Rpb24uZW5kWzBdLXRoaXMuYWN0aW9uLnN0YXJ0WzBdKS90aGlzLmFjdGlvbi5jb2x1bW5zLHRoaXMuaGVpZ2h0PSh0aGlzLmFjdGlvbi5lbmRbMV0tdGhpcy5hY3Rpb24uc3RhcnRbMV0pL3RoaXMuYWN0aW9uLnJvd3MsdGhpcy5jeWNsZT0wLHRoaXMub3Blbj1mdW5jdGlvbigpe3ZhciBjb2x1bW4scm93O2N0eC5zYXZlKCksY3R4LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uWzBdLHRoaXMucG9zaXRpb25bMV0pLGN0eC50cmFuc2xhdGUodGhpcy53aWR0aC8yLHRoaXMuaGVpZ2h0LzIpLHN0YXJ0ZWQ/KGNvbHVtbj10aGlzLmN5Y2xlJXRoaXMuYWN0aW9uLmNvbHVtbnMscm93PU1hdGguZmxvb3IodGhpcy5jeWNsZS90aGlzLmFjdGlvbi5jb2x1bW5zKSx0aGlzLmN5Y2xlPDkmJnRoaXMuY3ljbGUrKyk6KGNvbHVtbj0wLHJvdz0wKSxjdHguZHJhd0ltYWdlKGRlY29ySW1hZ2UsdGhpcy53aWR0aCpjb2x1bW4rdGhpcy5hY3Rpb24uc3RhcnRbMF0sdGhpcy5oZWlnaHQqcm93K3RoaXMuYWN0aW9uLnN0YXJ0WzFdLTEsdGhpcy53aWR0aCx0aGlzLmhlaWdodCwwLDAsMip0aGlzLndpZHRoLDIqdGhpcy5oZWlnaHQpLGN0eC5yZXN0b3JlKCl9fTshZnVuY3Rpb24gZHJhdygpe2lmKGN0eC5jbGVhclJlY3QoMCwwLGNhbnZhcy53aWR0aCxjYW52YXMuaGVpZ2h0KSxzdGFydGVkKWZvcih2YXIgaSBpbiBsZW1taW5ncylsZW1taW5nc1tpXS5tb3ZlKCk7ZWxzZSBjdHguYmVnaW5QYXRoKCksY3R4LmZvbnQ9XCI0MHB4IE1vbm90b25cIixjdHgubGluZVdpZHRoPVwiMTBcIixjdHguc3Ryb2tlU3R5bGU9XCJibHVlXCIsY3R4LnJlY3QoMTUsY2FudmFzLmhlaWdodC00NSxjdHgubWVhc3VyZVRleHQoXCJTdGFydFwiKS53aWR0aCsyMCxjdHgubWVhc3VyZVRleHQoXCJTdGFydFwiKS5oZWlnaHQrY2FudmFzLmhlaWdodC00NSksY3R4LmZpbGwoKSxjdHguZmlsbFRleHQoXCJTdGFydFwiLDIwLGNhbnZhcy5oZWlnaHQtNTApO2hhdGNoLm9wZW4oKSxzdGFydGVkPSEwLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZHJhdygpfSksMTUwKX0oKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiTGlzdHNDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIkNhdGVnb3JpZXNTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLENhdGVnb3JpZXNTdmMpeyRzY29wZS5zaG93Q2F0ZWdvcnk9ITAsJHNjb3BlLmluaXQ9ZnVuY3Rpb24oKXtDYXRlZ29yaWVzU3ZjLmdldENhdGVnb3JpZXMoKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7Zm9yKHZhciBpIGluICRzY29wZS5jYXRlZ29yaWVzPXJlc3BvbnNlLmRhdGEsJHNjb3BlLnRhc2tzPVtdLCRzY29wZS5jYXRlZ29yaWVzKWZvcih2YXIgaiBpbiAkc2NvcGUuY2F0ZWdvcmllc1tpXS50YXNrcykkc2NvcGUudGFza3MucHVzaCh7Y2F0ZWdvcnk6JHNjb3BlLmNhdGVnb3JpZXNbaV0ubmFtZSx0YXNrOiRzY29wZS5jYXRlZ29yaWVzW2ldLnRhc2tzW2pdLm5hbWV9KX0pKX0sJHNjb3BlLnNlbGVjdENhdGVnb3J5PWZ1bmN0aW9uKGNhdGVnb3J5KXtmb3IodmFyIGkgaW4gJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnk9Y2F0ZWdvcnksJHNjb3BlLnNlbGVjdGVkVGFza3M9W10sJHNjb3BlLnNlbGVjdGFibGVUYXNrcz1bXSwkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcykkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLnB1c2goJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0pOyRzY29wZS5zaG93Q2F0ZWdvcnk9ITEsJHNjb3BlLmVudGVyZWRDYXRlZ29yeT1cIlwifSwkc2NvcGUubmV3Q2F0ZWdvcnk9ZnVuY3Rpb24oY2F0ZWdvcnkpe2Zvcih2YXIgZm91bmQ9ITEsaT0wO2k8JHNjb3BlLmNhdGVnb3JpZXMubGVuZ3RoO2krKykkc2NvcGUuY2F0ZWdvcmllc1tpXS5uYW1lPT09Y2F0ZWdvcnkmJigkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkoJHNjb3BlLmNhdGVnb3JpZXNbaV0pLGZvdW5kPSEwKTtmb3VuZHx8Q2F0ZWdvcmllc1N2Yy5hZGRDYXRlZ29yeSh7Y2F0ZWdvcnl9KS50aGVuKChmdW5jdGlvbihjYXRlZ29yeSl7JHNjb3BlLmluaXQoKSwkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnkpfSkpLCRzY29wZS5lbnRlcmVkQ2F0ZWdvcnk9XCJcIn0sJHNjb3BlLm5ld1Rhc2s9ZnVuY3Rpb24odGFzayl7dmFyIGZvdW5kPSExO2Zvcih2YXIgaSBpbiAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcykkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXS5uYW1lPT09dGFzayYmKGZvdW5kPSEwLCRzY29wZS5zZWxlY3RUYXNrKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldKSk7Zm91bmR8fENhdGVnb3JpZXNTdmMuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS5uYW1lLHt0YXNrfSkudGhlbigoZnVuY3Rpb24oKXskc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcy5wdXNoKHtuYW1lOnRhc2t9KSwkc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcywkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1skc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcy5sZW5ndGgtMV0pfSkpLCRzY29wZS5lbnRlcmVkVGFzaz1cIlwifSwkc2NvcGUuc2VsZWN0VGFzaz1mdW5jdGlvbih0YXNrKXskc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcyx0YXNrKSwkc2NvcGUucmVtb3ZlVGFzaygkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLHRhc2spLCRzY29wZS5lbnRlcmVkVGFzaz1cIlwifSwkc2NvcGUudW5zZWxlY3RUYXNrPWZ1bmN0aW9uKHRhc2speyRzY29wZS5hZGRUYXNrKCRzY29wZS5zZWxlY3RhYmxlVGFza3MsdGFzayksJHNjb3BlLnJlbW92ZVRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsdGFzayl9LCRzY29wZS5hZGRUYXNrPWZ1bmN0aW9uKHRhc2tMaXN0LHRhc2spe3Rhc2tMaXN0LnB1c2godGFzayl9LCRzY29wZS5yZW1vdmVUYXNrPWZ1bmN0aW9uKHRhc2tMaXN0LHRhc2spe3Rhc2tMaXN0LnNwbGljZSh0YXNrTGlzdC5pbmRleE9mKHRhc2spLDEpfSwkc2NvcGUuc3RhcnRQcmlvcml0aXppbmc9ZnVuY3Rpb24oKXtDYXRlZ29yaWVzU3ZjLnNldFByaW9yaXR5TGlzdCgkc2NvcGUuc2VsZWN0ZWRUYXNrcyksJGxvY2F0aW9uLnBhdGgoXCIvcHJpb3JpdGl6ZVwiKX0sJHNjb3BlLmdldFF1ZXN0aW9ucz1mdW5jdGlvbigpe2lmKCEkc2NvcGUuc2VsZWN0ZWRUYXNrcylyZXR1cm5cIlwiO2Zvcih2YXIgY291bnRlcj0wLGk9JHNjb3BlLnNlbGVjdGVkVGFza3MubGVuZ3RoLTE7aT4wO2ktLSljb3VudGVyKz1pO3JldHVybiBjb3VudGVyfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiTG9naW5DdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLFVzZXJTdmMpe3ZhciB1aT1uZXcgZmlyZWJhc2V1aS5hdXRoLkF1dGhVSShmaXJlYmFzZS5hdXRoKCkpO2Z1bmN0aW9uIHN0YXJ0VUkoKXt1aS5zdGFydChcIiNmaXJlYmFzZXVpLWF1dGgtY29udGFpbmVyXCIse2NhbGxiYWNrczp7c2lnbkluU3VjY2VzczpmdW5jdGlvbihjdXJyZW50VXNlcixjcmVkZW50aWFsLHJlZGlyZWN0VXJsKXtyZXR1cm4gZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLmdldElkVG9rZW4oITApLnRoZW4oKGZ1bmN0aW9uKGlkVG9rZW4pe1VzZXJTdmMuYXV0aGVudGljYXRlKHtkaXNwbGF5TmFtZTpjdXJyZW50VXNlci5kaXNwbGF5TmFtZSxlbWFpbDpjdXJyZW50VXNlci5lbWFpbCxwaG90b1VSTDpjdXJyZW50VXNlci5waG90b1VSTCxlbWFpbFZlcmlmaWVkOmN1cnJlbnRVc2VyLmVtYWlsVmVyaWZpZWQsaWRUb2tlbn0pLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuJGVtaXQoXCJsb2dpblwiLHJlc3BvbnNlLmRhdGEpLCQoXCIjbW9kYWwtbG9naW5cIikubW9kYWwoXCJoaWRlXCIpfSksKGZ1bmN0aW9uKCl7JHNjb3BlLiRlbWl0KFwicG9wdXBcIix7bWVzc2FnZTpcIkxvZ2luIEZhaWxlZFwiLHR5cGU6XCJhbGVydC1kYW5nZXJcIn0pfSkpfSkpLmNhdGNoKChmdW5jdGlvbihlcnJvcil7fSkpLCExfSxzaWduSW5GYWlsdXJlOmZ1bmN0aW9uKGVycm9yKXtpZihcImZpcmViYXNldWkvYW5vbnltb3VzLXVwZ3JhZGUtbWVyZ2UtY29uZmxpY3RcIiE9ZXJyb3IuY29kZSlyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7dmFyIGNyZWQ9ZXJyb3IuY3JlZGVudGlhbDtyZXR1cm4gZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDcmVkZW50aWFsKGNyZWQpfSx1aVNob3duOmZ1bmN0aW9uKCl7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2FkZXJcIikuc3R5bGUuZGlzcGxheT1cIm5vbmVcIn19LHNpZ25JblN1Y2Nlc3NVcmw6XCIvaG9tZVwiLHNpZ25Jbk9wdGlvbnM6W2ZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIuUFJPVklERVJfSURdLHNpZ25JbkZsb3c6XCJwb3B1cFwifSl9JHNjb3BlLiRvbihcImxvZ291dFwiLChmdW5jdGlvbihldmVudCl7dWkucmVzZXQoKSxzdGFydFVJKCl9KSksc3RhcnRVSSgpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJQb3N0c0N0cmxcIixbXCIkc2NvcGVcIixcIiRmaWx0ZXJcIixcIlBvc3RzU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRmaWx0ZXIsUG9zdHNTdmMpeyRzY29wZS5hZGRQb3N0PWZ1bmN0aW9uKCl7JHNjb3BlLnBvc3RCb2R5JiZQb3N0c1N2Yy5jcmVhdGUoe2JvZHk6JHNjb3BlLnBvc3RCb2R5fSkudGhlbigoZnVuY3Rpb24ocG9zdCl7JHNjb3BlLnBvc3RCb2R5PW51bGx9KSl9LFBvc3RzU3ZjLmZldGNoKCkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5wb3N0cz1yZXNwb25zZS5kYXRhfSkpLCRzY29wZS4kb24oXCJ3czpuZXdfcG9zdFwiLChmdW5jdGlvbihfLHBvc3QpeyRzY29wZS4kYXBwbHkoKGZ1bmN0aW9uKCl7UG9zdHNTdmMuZ2V0UG9zdChwb3N0KS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLnBvc3RzLnVuc2hpZnQocmVzcG9uc2UuZGF0YSl9KSl9KSl9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlByaW9yaXRpemVDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIkNhdGVnb3JpZXNTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLENhdGVnb3JpZXNTdmMpeyRzY29wZS5wcmlvcml0eUxpc3Q9Q2F0ZWdvcmllc1N2Yy5nZXRQcmlvcml0eUxpc3QoKSwkc2NvcGUucHJpb3JpdHlMaXN0Pygkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbj0xLCRzY29wZS5jdXJyZW50UXVlc3Rpb249MSwkc2NvcGUuZG9uZT0hMSk6JGxvY2F0aW9uLnBhdGgoXCIvbGlzdHNcIiksJHNjb3BlLm1ha2VDaG9pY2U9ZnVuY3Rpb24oY2hvaWNlKXtmb3IodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkPT09JHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24mJigkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZT0xPT09Y2hvaWNlPyRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2U6JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2UpOyRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uPT09JHNjb3BlLmN1cnJlbnRRdWVzdGlvbiYmKCRzY29wZS5jdXJyZW50UXVlc3Rpb249JHNjb3BlLmN1cnJlbnRRdWVzdGlvbj09PSRzY29wZS5wcmlvcml0eUxpc3QubGVuZ3RoPzE6JHNjb3BlLmN1cnJlbnRRdWVzdGlvbisxKSwkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbj0kc2NvcGUuY3VycmVudFF1ZXN0aW9uO3ZhciBmb3VuZD0hMTtmb3IoaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KWlmKFwiXCI9PT0kc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSl7Zm91bmQ9ITA7YnJlYWt9Zm91bmR8fCgkKFwiI3ByaW9yaXRpemVDaG9pY2VzXCIpLmhpZGUoMzAwKSwkc2NvcGUuZG9uZT0hMCl9LCRzY29wZS5nZXRCdXR0b25WYWx1ZT1mdW5jdGlvbihjaG9pY2Upe2lmKCEkc2NvcGUucHJpb3JpdHlMaXN0KXJldHVyblwiXCI7Zm9yKHZhciBpPTA7aTwkc2NvcGUucHJpb3JpdHlMaXN0Lmxlbmd0aDtpKyspaWYoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZD09PSRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uKXJldHVybiAxPT09Y2hvaWNlPyRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2U6JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2V9LCRzY29wZS5zZWxlY3RRdWVzdGlvbj1mdW5jdGlvbihxdWVzdGlvbil7JHNjb3BlLnNlbGVjdGVkUXVlc3Rpb249cXVlc3Rpb259LCRzY29wZS5nZXRGaWx0ZXJlZFByaW9yaXR5TGlzdD1mdW5jdGlvbigpe3JldHVybiAkc2NvcGUucHJpb3JpdHlMaXN0PyRzY29wZS5wcmlvcml0eUxpc3Quc29ydCgoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5pZC1iLmlkfSkpLmZpbHRlcigoZnVuY3Rpb24ocXVlc3Rpb24pe3JldHVyblwiXCIhPT1xdWVzdGlvbi5jaG9pY2V8fHF1ZXN0aW9uLmlkPT09JHNjb3BlLmN1cnJlbnRRdWVzdGlvbn0pKTpbXX0sJHNjb3BlLmdldENob2ljZXNNYWRlPWZ1bmN0aW9uKCl7aWYoISRzY29wZS5wcmlvcml0eUxpc3QpcmV0dXJuXCJcIjt2YXIgY2hvaWNlc01hZGU9MDtmb3IodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdClcIlwiIT09JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UmJmNob2ljZXNNYWRlKys7cmV0dXJuIGNob2ljZXNNYWRlfSwkc2NvcGUuZ2V0QnV0dG9uQ2xhc3M9ZnVuY3Rpb24oY2hvaWNlKXtpZighJHNjb3BlLnByaW9yaXR5TGlzdClyZXR1cm5cIlwiO2Zvcih2YXIgaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KWlmKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQ9PT0kc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbilyZXR1cm5cIlwiPT09JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2U/XCJidG4tcHJpbWFyeVwiOjE9PT1jaG9pY2U/JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZT09PSRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlP1wiYnRuLXN1Y2Nlc3NcIjpcImJ0bi1kYW5nZXJcIjokc2NvcGUucHJpb3JpdHlMaXN0W2ldLnNlY29uZENob2ljZT09PSRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlP1wiYnRuLXN1Y2Nlc3NcIjpcImJ0bi1kYW5nZXJcIn0sJHNjb3BlLnNob3dDaG9pY2VzPWZ1bmN0aW9uKCl7JChcIiNwcmlvcml0aXplQ2hvaWNlc1wiKS5zaG93KDFlMyksJChcIiNyZXZpZXdDaG9pY2VzXCIpLmhpZGUoKX0sJHNjb3BlLmNoYXJ0Q2xpY2s9ZnVuY3Rpb24oZXZlbnQpeyRzY29wZS5jaGFydCYmY29uc29sZS5sb2coJHNjb3BlLmNoYXJ0LmdldFNlZ21lbnRzQXRFdmVudChldmVudCkpfSwkc2NvcGUuc2hvd1Jlc3VsdHM9ZnVuY3Rpb24oKXtmb3IodmFyIGkgaW4gJHNjb3BlLmRhdGE9W10sJHNjb3BlLm9wdGlvbnM9e3Jlc3BvbnNpdmU6ITAsc2VnbWVudFNob3dTdHJva2U6ITAsc2VnbWVudFN0cm9rZUNvbG9yOlwiI2ZmZlwiLHNlZ21lbnRTdHJva2VXaWR0aDoyLHBlcmNlbnRhZ2VJbm5lckN1dG91dDowLGFuaW1hdGlvblN0ZXBzOjEwMCxhbmltYXRpb25FYXNpbmc6XCJlYXNlT3V0Qm91bmNlXCIsYW5pbWF0ZVJvdGF0ZTohMCxhbmltYXRlU2NhbGU6ITEsbGVnZW5kVGVtcGxhdGU6JzxoMyBjbGFzcz1cInRjLWNoYXJ0LWpzLWxlZ2VuZFwiIHN0eWxlPVwicGFkZGluZzo1cHhcIj48JSBmb3IgKHZhciBpPTA7IGk8c2VnbWVudHMubGVuZ3RoOyBpKyspeyU+PGRpdiBjbGFzcz1cImxhYmVsXCIgc3R5bGU9XCJmbG9hdDpsZWZ0O21hcmdpbjo1cHg7YmFja2dyb3VuZC1jb2xvcjo8JT1zZWdtZW50c1tpXS5maWxsQ29sb3IlPlwiPjwlaWYoc2VnbWVudHNbaV0ubGFiZWwpeyU+PCU9c2VnbWVudHNbaV0ubGFiZWwlPjwlfSU+PC9kaXY+PCV9JT48L2gzPid9LENhdGVnb3JpZXNTdmMuY2hvaWNlcylmb3IodmFyIGogaW4gQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzPTAsJHNjb3BlLnByaW9yaXR5TGlzdClDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0ubmFtZT09PSRzY29wZS5wcmlvcml0eUxpc3Rbal0uY2hvaWNlJiZDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMrKztmb3IoaSBpbiBDYXRlZ29yaWVzU3ZjLmNob2ljZXMuc29ydCgoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS52b3RlczxiLnZvdGVzfSkpLENhdGVnb3JpZXNTdmMuY2hvaWNlcykkc2NvcGUuZGF0YS5wdXNoKHt2YWx1ZTpDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMsbGFiZWw6Q2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLm5hbWV9KTskKFwiI3ByaW9yaXRpemVSZXN1bHRcIikuaGlkZSgpLCQoXCIjcHJpb3JpdGl6ZUNob2ljZXNcIikuaGlkZSgpLCQoXCIjcHJpb3JpdHlSZXN1bHRzXCIpLnNob3coMWUzKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlByb2ZpbGVDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLFVzZXJTdmMpeyRzY29wZS5jdXJyZW50VXNlcj8oJChcIiNzZXgtaW5kaWNhdG9yXCIpLm9mZnNldCh7bGVmdDokc2NvcGUuY3VycmVudFVzZXIuZ2VuZGVyLnNleC8yMDAqJChcIiNzZXhcIikud2lkdGgoKSskKFwiI3NleFwiKS5vZmZzZXQoKS5sZWZ0fSksJChcIiNpZGVudGl0eS1pbmRpY2F0b3JcIikub2Zmc2V0KHtsZWZ0OiRzY29wZS5jdXJyZW50VXNlci5nZW5kZXIuaWRlbnRpdHkvMjAwKiQoXCIjaWRlbnRpdHlcIikud2lkdGgoKSskKFwiI2lkZW50aXR5XCIpLm9mZnNldCgpLmxlZnR9KSk6JGxvY2F0aW9uLnBhdGgoXCIvXCIpLCRzY29wZS5zZXhlcz1bXCJNYWxlXCIsXCJGdE0gTWFsZVwiLFwiSW50ZXJzZXhcIixcIk10RiBGZW1hbGVcIixcIkZlbWFsZVwiXSwkc2NvcGUuaWRlbnRpdGllcz1bXCJNYW5cIixcIkJpZ2VuZGVyXCIsXCJQYW5nZW5kZXJcIixcIkFnZW5kZXJcIixcIlBvbHlnZW5kZXJcIixcIkdlbmRlcmZsdWlkXCIsXCJHZW5kZXJxdWVlclwiLFwiUXVlZXJcIixcIldvbWFuXCJdLCRzY29wZS5kYXRlT3B0aW9ucz17bWF4RGF0ZTpuZXcgRGF0ZSxtaW5EYXRlOm5ldyBEYXRlKDE5MDAsMSwxKSxpbml0RGF0ZTpuZXcgRGF0ZSgyZTMsMSwxKSxkYXRlcGlja2VyTW9kZTpcInllYXJcIn0sJHNjb3BlLmdlbmRlcj1mdW5jdGlvbihhcnJheSxwZXJjZW50YWdlKXtyZXR1cm4gYXJyYXlbTWF0aC5yb3VuZChwZXJjZW50YWdlLzIwMCooYXJyYXkubGVuZ3RoLTEpKV19LCRzY29wZS5zdGFydFNsaWRlcj1mdW5jdGlvbigpe30sJHNjb3BlLmRyYWdTbGlkZXI9ZnVuY3Rpb24oZXZlbnQsdWksdHlwZSl7JHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlclt0eXBlXT1NYXRoLnJvdW5kKCgkKFwiI1wiK3R5cGUrXCItaW5kaWNhdG9yXCIpLm9mZnNldCgpLmxlZnQtJChcIiNcIit0eXBlKS5vZmZzZXQoKS5sZWZ0KS8oJChcIiNcIit0eXBlKS53aWR0aCgpLSQoXCIjXCIrdHlwZStcIi1pbmRpY2F0b3JcIikud2lkdGgoKSkqMjAwKSwkc2NvcGUuJGFwcGx5KCl9LCRzY29wZS5zdG9wU2xpZGVyPWZ1bmN0aW9uKCl7fSwkc2NvcGUudXNlcm5hbWVUb2dnbGU9ITAsJHNjb3BlLnBhc3N3b3JkVG9nZ2xlPSEwLCRzY29wZS50b2dnbGVVc2VybmFtZT1mdW5jdGlvbigpeyRzY29wZS51c2VybmFtZVRvZ2dsZT0hJHNjb3BlLnVzZXJuYW1lVG9nZ2xlLCRzY29wZS5uZXdVc2VybmFtZT0kc2NvcGUuY3VycmVudFVzZXIudXNlcm5hbWV9LCRzY29wZS50b2dnbGVQYXNzd29yZD1mdW5jdGlvbigpeyRzY29wZS5uZXdQYXNzd29yZD1udWxsLCRzY29wZS5jb25maXJtUGFzc3dvcmQ9bnVsbCwkc2NvcGUucGFzc3dvcmRUb2dnbGU9ISRzY29wZS5wYXNzd29yZFRvZ2dsZX0sJHNjb3BlLmNoZWNrUGFzc3dvcmQ9ZnVuY3Rpb24ocGFzc3dvcmQpe2lmKHBhc3N3b3JkKXt2YXIgdXNlcj0kc2NvcGUuY3VycmVudFVzZXIuX2lkO1VzZXJTdmMuY2hlY2tQYXNzd29yZCh1c2VyLHBhc3N3b3JkKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCl9KSwoZnVuY3Rpb24oKXt2YXIgb3JpZ2luYWxCZz0kKFwiLnBhc3N3b3JkXCIpLmNzcyhcImJhY2tncm91bmRDb2xvclwiKTskKFwiLnBhc3N3b3JkXCIpLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjpcIiNGRkI2QzFcIn0sMjAwKS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6b3JpZ2luYWxCZ30sMjAwKX0pKX19LCRzY29wZS5jaGFuZ2VQYXNzd29yZD1mdW5jdGlvbihvbGRQYXNzd29yZCxuZXdQYXNzd29yZCxjb25maXJtUGFzc3dvcmQpe2lmKG5ld1Bhc3N3b3JkKWlmKG5ld1Bhc3N3b3JkPT1jb25maXJtUGFzc3dvcmQpe3ZhciB1c2VyPSRzY29wZS5jdXJyZW50VXNlci5faWQ7VXNlclN2Yy5jaGFuZ2VQYXNzd29yZCh1c2VyLG9sZFBhc3N3b3JkLG5ld1Bhc3N3b3JkKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwicG9wdXBcIix7bWVzc2FnZTpcIlBhc3N3b3JkIENoYW5nZWRcIix0eXBlOlwiYWxlcnQtc3VjY2Vzc1wifSksJHNjb3BlLm9sZFBhc3N3b3JkPW51bGwsJHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCl9KSwoZnVuY3Rpb24oKXskc2NvcGUuJGVtaXQoXCJwb3B1cFwiLHttZXNzYWdlOlwiUGFzc3dvcmQgQ2hhbmdlIEZhaWxlZFwiLHR5cGU6XCJhbGVydC1kYW5nZXJcIn0pfSkpfWVsc2V7dmFyIG9yaWdpbmFsQmc9JChcIi5wYXNzd29yZFwiKS5jc3MoXCJiYWNrZ3JvdW5kQ29sb3JcIik7JChcIi5wYXNzd29yZFwiKS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6XCIjRkZCNkMxXCJ9LDIwMCkuYW5pbWF0ZSh7YmFja2dyb3VuZENvbG9yOm9yaWdpbmFsQmd9LDIwMCl9fSwkc2NvcGUuY2hhbmdlVXNlcm5hbWU9ZnVuY3Rpb24odXNlcm5hbWUpeyRzY29wZS4kZW1pdChcImxvYWRpbmdcIiksVXNlclN2Yy5jaGFuZ2VVc2VybmFtZSgkc2NvcGUuY3VycmVudFVzZXIuX2lkLHVzZXJuYW1lKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwidXBkYXRlXCIscmVzcG9uc2UuZGF0YSl9KSwoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS4kZW1pdChcInBvcHVwXCIse21lc3NhZ2U6dXNlcm5hbWUrXCIgYWxyZWFkeSBpbiB1c2VcIix0eXBlOlwiYWxlcnQtZGFuZ2VyXCJ9KX0pKX0sJHNjb3BlLnVwZGF0ZVVzZXI9ZnVuY3Rpb24oKXskc2NvcGUuY3VycmVudFVzZXImJigkc2NvcGUuJGVtaXQoXCJsb2FkaW5nXCIpLFVzZXJTdmMudXBkYXRlVXNlcigkc2NvcGUuY3VycmVudFVzZXIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuJGVtaXQoXCJ1cGRhdGVcIixyZXNwb25zZS5kYXRhKX0pKSl9LCRzY29wZS4kd2F0Y2goXCJjdXJyZW50VXNlci5mbGFncy5sZW5ndGhcIiwoZnVuY3Rpb24obGVuZ3RoKXskc2NvcGUudXBkYXRlVXNlcigpfSkpLCRzY29wZS5sb2FkQ291bnRyaWVzPWZ1bmN0aW9uKCRxdWVyeSl7cmV0dXJuW3tuYW1lOlwiQW5kb3JyYVwiLGZsYWc6XCJmbGFnLWFkXCIsdGlkYml0OlwiXCJ9LHtuYW1lOlwiVW5pdGVkIEFyYWIgRW1pcmF0ZXNcIixmbGFnOlwiZmxhZy1hZVwifSx7bmFtZTpcIkFmZ2hhbmlzdGFuXCIsZmxhZzpcImZsYWctYWZcIn0se25hbWU6XCJBbnRpZ3VhIGFuZCBCYXJidWRhXCIsZmxhZzpcImZsYWctYWdcIn0se25hbWU6XCJBbmd1aWxsYVwiLGZsYWc6XCJmbGFnLWFpXCJ9LHtuYW1lOlwiQWxiYW5pYVwiLGZsYWc6XCJmbGFnLWFsXCJ9LHtuYW1lOlwiQXJtZW5pYVwiLGZsYWc6XCJmbGFnLWFtXCJ9LHtuYW1lOlwiQW5nb2xhXCIsZmxhZzpcImZsYWctYW9cIn0se25hbWU6XCJBbnRhcmN0aWNhXCIsZmxhZzpcImZsYWctYXFcIn0se25hbWU6XCJBcmdlbnRpbmFcIixmbGFnOlwiZmxhZy1hclwifSx7bmFtZTpcIkFtZXJpY2FuIFNvbW9hXCIsZmxhZzpcImZsYWctYXNcIn0se25hbWU6XCJBdXN0cmlhXCIsZmxhZzpcImZsYWctYXRcIn0se25hbWU6XCJBdXN0cmFsaWFcIixmbGFnOlwiZmxhZy1hdVwifSx7bmFtZTpcIkFydWJhXCIsZmxhZzpcImZsYWctYXdcIn0se25hbWU6XCLDhWxhbmQgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWF4XCJ9LHtuYW1lOlwiQXplcmJhaWphblwiLGZsYWc6XCJmbGFnLWF6XCJ9LHtuYW1lOlwiQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYVwiLGZsYWc6XCJmbGFnLWJhXCJ9LHtuYW1lOlwiQmFyYmFkb3NcIixmbGFnOlwiZmxhZy1iYlwifSx7bmFtZTpcIkJhbmdsYWRlc2hcIixmbGFnOlwiZmxhZy1iZFwifSx7bmFtZTpcIkJlbGdpdW1cIixmbGFnOlwiZmxhZy1iZVwifSx7bmFtZTpcIkJ1cmtpbmEgRmFzb1wiLGZsYWc6XCJmbGFnLWJmXCJ9LHtuYW1lOlwiQnVsZ2FyaWFcIixmbGFnOlwiZmxhZy1iZ1wifSx7bmFtZTpcIkJhaHJhaW5cIixmbGFnOlwiZmxhZy1iaFwifSx7bmFtZTpcIkJ1cnVuZGlcIixmbGFnOlwiZmxhZy1iaVwifSx7bmFtZTpcIkJlbmluXCIsZmxhZzpcImZsYWctYmpcIn0se25hbWU6XCJTYWludCBCYXJ0aMOpbGVteVwiLGZsYWc6XCJmbGFnLWJsXCJ9LHtuYW1lOlwiQmVybXVkYVwiLGZsYWc6XCJmbGFnLWJtXCJ9LHtuYW1lOlwiQnJ1bmVpIFwiLGZsYWc6XCJmbGFnLWJuXCJ9LHtuYW1lOlwiQm9saXZpYSwgUGx1cmluYXRpb25hbCBTdGF0ZSBvZlwiLGZsYWc6XCJmbGFnLWJvXCJ9LHtuYW1lOlwiQm9uYWlyZSwgU2ludCBFdXN0YXRpdXMgYW5kIFNhYmFcIixmbGFnOlwiZmxhZy1icVwifSx7bmFtZTpcIkJyYXppbFwiLGZsYWc6XCJmbGFnLWJyXCJ9LHtuYW1lOlwiQmFoYW1hc1wiLGZsYWc6XCJmbGFnLWJzXCJ9LHtuYW1lOlwiQmh1dGFuXCIsZmxhZzpcImZsYWctYnRcIn0se25hbWU6XCJCb3V2ZXQgSXNsYW5kXCIsZmxhZzpcImZsYWctYnZcIn0se25hbWU6XCJCb3Rzd2FuYVwiLGZsYWc6XCJmbGFnLWJ3XCJ9LHtuYW1lOlwiQmVsYXJ1c1wiLGZsYWc6XCJmbGFnLWJ5XCJ9LHtuYW1lOlwiQmVsaXplXCIsZmxhZzpcImZsYWctYnpcIn0se25hbWU6XCJDYW5hZGFcIixmbGFnOlwiZmxhZy1jYVwifSx7bmFtZTpcIkNvY29zIChLZWVsaW5nKSBJc2xhbmRzXCIsZmxhZzpcImZsYWctY2NcIn0se25hbWU6XCJDb25nbywgdGhlIERlbW9jcmF0aWMgUmVwdWJsaWMgb2YgdGhlXCIsZmxhZzpcImZsYWctY2RcIn0se25hbWU6XCJDZW50cmFsIEFmcmljYW4gUmVwdWJsaWNcIixmbGFnOlwiZmxhZy1jZlwifSx7bmFtZTpcIkNvbmdvXCIsZmxhZzpcImZsYWctY2dcIn0se25hbWU6XCJTd2l0emVybGFuZFwiLGZsYWc6XCJmbGFnLWNoXCJ9LHtuYW1lOlwiQ8O0dGUgZCdJdm9pcmVcIixmbGFnOlwiZmxhZy1jaVwifSx7bmFtZTpcIkNvb2sgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWNrXCJ9LHtuYW1lOlwiQ2hpbGVcIixmbGFnOlwiZmxhZy1jbFwifSx7bmFtZTpcIkNhbWVyb29uXCIsZmxhZzpcImZsYWctY21cIn0se25hbWU6XCJDaGluYVwiLGZsYWc6XCJmbGFnLWNuXCJ9LHtuYW1lOlwiQ29sb21iaWFcIixmbGFnOlwiZmxhZy1jb1wifSx7bmFtZTpcIkNvc3RhIFJpY2FcIixmbGFnOlwiZmxhZy1jclwifSx7bmFtZTpcIkN1YmFcIixmbGFnOlwiZmxhZy1jdVwifSx7bmFtZTpcIkNhYm8gVmVyZGVcIixmbGFnOlwiZmxhZy1jdlwifSx7bmFtZTpcIkN1cmHDp2FvXCIsZmxhZzpcImZsYWctY3dcIn0se25hbWU6XCJDaHJpc3RtYXMgSXNsYW5kXCIsZmxhZzpcImZsYWctY3hcIn0se25hbWU6XCJDeXBydXNcIixmbGFnOlwiZmxhZy1jeVwifSx7bmFtZTpcIkN6ZWNoIFJlcHVibGljXCIsZmxhZzpcImZsYWctY3pcIn0se25hbWU6XCJHZXJtYW55XCIsZmxhZzpcImZsYWctZGVcIn0se25hbWU6XCJEamlib3V0aVwiLGZsYWc6XCJmbGFnLWRqXCJ9LHtuYW1lOlwiRGVubWFya1wiLGZsYWc6XCJmbGFnLWRrXCJ9LHtuYW1lOlwiRG9taW5pY2FcIixmbGFnOlwiZmxhZy1kbVwifSx7bmFtZTpcIkRvbWluaWNhbiBSZXB1YmxpY1wiLGZsYWc6XCJmbGFnLWRvXCJ9LHtuYW1lOlwiQWxnZXJpYVwiLGZsYWc6XCJmbGFnLWR6XCJ9LHtuYW1lOlwiRWN1YWRvclwiLGZsYWc6XCJmbGFnLWVjXCJ9LHtuYW1lOlwiRXN0b25pYVwiLGZsYWc6XCJmbGFnLWVlXCJ9LHtuYW1lOlwiRWd5cHRcIixmbGFnOlwiZmxhZy1lZ1wifSx7bmFtZTpcIldlc3Rlcm4gU2FoYXJhXCIsZmxhZzpcImZsYWctZWhcIn0se25hbWU6XCJFcml0cmVhXCIsZmxhZzpcImZsYWctZXJcIn0se25hbWU6XCJTcGFpblwiLGZsYWc6XCJmbGFnLWVzXCJ9LHtuYW1lOlwiRXRoaW9waWFcIixmbGFnOlwiZmxhZy1ldFwifSx7bmFtZTpcIkZpbmxhbmRcIixmbGFnOlwiZmxhZy1maVwifSx7bmFtZTpcIkZpamlcIixmbGFnOlwiZmxhZy1malwifSx7bmFtZTpcIkZhbGtsYW5kIElzbGFuZHMgKE1hbHZpbmFzKVwiLGZsYWc6XCJmbGFnLWZrXCJ9LHtuYW1lOlwiTWljcm9uZXNpYSwgRmVkZXJhdGVkIFN0YXRlcyBvZlwiLGZsYWc6XCJmbGFnLWZtXCJ9LHtuYW1lOlwiRmFyb2UgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWZvXCJ9LHtuYW1lOlwiRnJhbmNlXCIsZmxhZzpcImZsYWctZnJcIn0se25hbWU6XCJHYWJvblwiLGZsYWc6XCJmbGFnLWdhXCJ9LHtuYW1lOlwiVW5pdGVkIEtpbmdkb20gb2YgR3JlYXQgQnJpdGFpbiBhbmQgTm9ydGhlcm4gSXJlbGFuZFwiLGZsYWc6XCJmbGFnLWdiXCJ9LHtuYW1lOlwiR3JlbmFkYVwiLGZsYWc6XCJmbGFnLWdkXCJ9LHtuYW1lOlwiR2VvcmdpYVwiLGZsYWc6XCJmbGFnLWdlXCJ9LHtuYW1lOlwiRnJlbmNoIEd1aWFuYVwiLGZsYWc6XCJmbGFnLWdmXCJ9LHtuYW1lOlwiR3Vlcm5zZXlcIixmbGFnOlwiZmxhZy1nZ1wifSx7bmFtZTpcIkdoYW5hXCIsZmxhZzpcImZsYWctZ2hcIn0se25hbWU6XCJHaWJyYWx0YXJcIixmbGFnOlwiZmxhZy1naVwifSx7bmFtZTpcIkdyZWVubGFuZFwiLGZsYWc6XCJmbGFnLWdsXCJ9LHtuYW1lOlwiR2FtYmlhXCIsZmxhZzpcImZsYWctZ21cIn0se25hbWU6XCJHdWluZWFcIixmbGFnOlwiZmxhZy1nblwifSx7bmFtZTpcIkd1YWRlbG91cGVcIixmbGFnOlwiZmxhZy1ncFwifSx7bmFtZTpcIkVxdWF0b3JpYWwgR3VpbmVhXCIsZmxhZzpcImZsYWctZ3FcIn0se25hbWU6XCJHcmVlY2VcIixmbGFnOlwiZmxhZy1nclwifSx7bmFtZTpcIlNvdXRoIEdlb3JnaWEgYW5kIHRoZSBTb3V0aCBTYW5kd2ljaCBJc2xhbmRzXCIsZmxhZzpcImZsYWctZ3NcIn0se25hbWU6XCJHdWF0ZW1hbGFcIixmbGFnOlwiZmxhZy1ndFwifSx7bmFtZTpcIkd1YW1cIixmbGFnOlwiZmxhZy1ndVwifSx7bmFtZTpcIkd1aW5lYS1CaXNzYXVcIixmbGFnOlwiZmxhZy1nd1wifSx7bmFtZTpcIkd1eWFuYVwiLGZsYWc6XCJmbGFnLWd5XCJ9LHtuYW1lOlwiSG9uZyBLb25nXCIsZmxhZzpcImZsYWctaGtcIn0se25hbWU6XCJIZWFyZCBJc2xhbmQgYW5kIE1jRG9uYWxkIElzbGFuZHNcIixmbGFnOlwiZmxhZy1obVwifSx7bmFtZTpcIkhvbmR1cmFzXCIsZmxhZzpcImZsYWctaG5cIn0se25hbWU6XCJDcm9hdGlhXCIsZmxhZzpcImZsYWctaHJcIn0se25hbWU6XCJIYWl0aVwiLGZsYWc6XCJmbGFnLWh0XCJ9LHtuYW1lOlwiSHVuZ2FyeVwiLGZsYWc6XCJmbGFnLWh1XCJ9LHtuYW1lOlwiSW5kb25lc2lhXCIsZmxhZzpcImZsYWctaWRcIn0se25hbWU6XCJJcmVsYW5kXCIsZmxhZzpcImZsYWctaWVcIn0se25hbWU6XCJJc3JhZWxcIixmbGFnOlwiZmxhZy1pbFwifSx7bmFtZTpcIklzbGUgb2YgTWFuXCIsZmxhZzpcImZsYWctaW1cIn0se25hbWU6XCJJbmRpYVwiLGZsYWc6XCJmbGFnLWluXCJ9LHtuYW1lOlwiQnJpdGlzaCBJbmRpYW4gT2NlYW4gVGVycml0b3J5XCIsZmxhZzpcImZsYWctaW9cIn0se25hbWU6XCJJcmFxXCIsZmxhZzpcImZsYWctaXFcIn0se25hbWU6XCJJcmFuLCBJc2xhbWljIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWctaXJcIn0se25hbWU6XCJJY2VsYW5kXCIsZmxhZzpcImZsYWctaXNcIn0se25hbWU6XCJJdGFseVwiLGZsYWc6XCJmbGFnLWl0XCJ9LHtuYW1lOlwiSmVyc2V5XCIsZmxhZzpcImZsYWctamVcIn0se25hbWU6XCJKYW1haWNhXCIsZmxhZzpcImZsYWctam1cIn0se25hbWU6XCJKb3JkYW5cIixmbGFnOlwiZmxhZy1qb1wifSx7bmFtZTpcIkphcGFuXCIsZmxhZzpcImZsYWctanBcIn0se25hbWU6XCJLZW55YVwiLGZsYWc6XCJmbGFnLWtlXCJ9LHtuYW1lOlwiS3lyZ3l6c3RhblwiLGZsYWc6XCJmbGFnLWtnXCJ9LHtuYW1lOlwiQ2FtYm9kaWFcIixmbGFnOlwiZmxhZy1raFwifSx7bmFtZTpcIktpcmliYXRpXCIsZmxhZzpcImZsYWcta2lcIn0se25hbWU6XCJDb21vcm9zXCIsZmxhZzpcImZsYWcta21cIn0se25hbWU6XCJTYWludCBLaXR0cyBhbmQgTmV2aXNcIixmbGFnOlwiZmxhZy1rblwifSx7bmFtZTpcIktvcmVhLCBEZW1vY3JhdGljIFBlb3BsZSdzIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWcta3BcIn0se25hbWU6XCJLb3JlYSwgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1rclwifSx7bmFtZTpcIkt1d2FpdFwiLGZsYWc6XCJmbGFnLWt3XCJ9LHtuYW1lOlwiQ2F5bWFuIElzbGFuZHNcIixmbGFnOlwiZmxhZy1reVwifSx7bmFtZTpcIkthemFraHN0YW5cIixmbGFnOlwiZmxhZy1relwifSx7bmFtZTpcIkxhbyBQZW9wbGUncyBEZW1vY3JhdGljIFJlcHVibGljXCIsZmxhZzpcImZsYWctbGFcIn0se25hbWU6XCJMZWJhbm9uXCIsZmxhZzpcImZsYWctbGJcIn0se25hbWU6XCJTYWludCBMdWNpYVwiLGZsYWc6XCJmbGFnLWxjXCJ9LHtuYW1lOlwiTGllY2h0ZW5zdGVpblwiLGZsYWc6XCJmbGFnLWxpXCJ9LHtuYW1lOlwiU3JpIExhbmthXCIsZmxhZzpcImZsYWctbGtcIn0se25hbWU6XCJMaWJlcmlhXCIsZmxhZzpcImZsYWctbHJcIn0se25hbWU6XCJMZXNvdGhvXCIsZmxhZzpcImZsYWctbHNcIn0se25hbWU6XCJMaXRodWFuaWFcIixmbGFnOlwiZmxhZy1sdFwifSx7bmFtZTpcIkx1eGVtYm91cmdcIixmbGFnOlwiZmxhZy1sdVwifSx7bmFtZTpcIkxhdHZpYVwiLGZsYWc6XCJmbGFnLWx2XCJ9LHtuYW1lOlwiTGlieWFcIixmbGFnOlwiZmxhZy1seVwifSx7bmFtZTpcIk1vcm9jY29cIixmbGFnOlwiZmxhZy1tYVwifSx7bmFtZTpcIk1vbmFjb1wiLGZsYWc6XCJmbGFnLW1jXCJ9LHtuYW1lOlwiTW9sZG92YSwgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1tZFwifSx7bmFtZTpcIk1vbnRlbmVncm9cIixmbGFnOlwiZmxhZy1tZVwifSx7bmFtZTpcIlNhaW50IE1hcnRpbiAoRnJlbmNoIHBhcnQpXCIsZmxhZzpcImZsYWctbWZcIn0se25hbWU6XCJNYWRhZ2FzY2FyXCIsZmxhZzpcImZsYWctbWdcIn0se25hbWU6XCJNYXJzaGFsbCBJc2xhbmRzXCIsZmxhZzpcImZsYWctbWhcIn0se25hbWU6XCJNYWNlZG9uaWEsIHRoZSBmb3JtZXIgWXVnb3NsYXYgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1ta1wifSx7bmFtZTpcIk1hbGlcIixmbGFnOlwiZmxhZy1tbFwifSx7bmFtZTpcIk15YW5tYXJcIixmbGFnOlwiZmxhZy1tbVwifSx7bmFtZTpcIk1vbmdvbGlhXCIsZmxhZzpcImZsYWctbW5cIn0se25hbWU6XCJNYWNhb1wiLGZsYWc6XCJmbGFnLW1vXCJ9LHtuYW1lOlwiTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzXCIsZmxhZzpcImZsYWctbXBcIn0se25hbWU6XCJNYXJ0aW5pcXVlXCIsZmxhZzpcImZsYWctbXFcIn0se25hbWU6XCJNYXVyaXRhbmlhXCIsZmxhZzpcImZsYWctbXJcIn0se25hbWU6XCJNb250c2VycmF0XCIsZmxhZzpcImZsYWctbXNcIn0se25hbWU6XCJNYWx0YVwiLGZsYWc6XCJmbGFnLW10XCJ9LHtuYW1lOlwiTWF1cml0aXVzXCIsZmxhZzpcImZsYWctbXVcIn0se25hbWU6XCJNYWxkaXZlc1wiLGZsYWc6XCJmbGFnLW12XCJ9LHtuYW1lOlwiTWFsYXdpXCIsZmxhZzpcImZsYWctbXdcIn0se25hbWU6XCJNZXhpY29cIixmbGFnOlwiZmxhZy1teFwifSx7bmFtZTpcIk1hbGF5c2lhXCIsZmxhZzpcImZsYWctbXlcIn0se25hbWU6XCJNb3phbWJpcXVlXCIsZmxhZzpcImZsYWctbXpcIn0se25hbWU6XCJOYW1pYmlhXCIsZmxhZzpcImZsYWctbmFcIn0se25hbWU6XCJOZXcgQ2FsZWRvbmlhXCIsZmxhZzpcImZsYWctbmNcIn0se25hbWU6XCJOaWdlclwiLGZsYWc6XCJmbGFnLW5lXCJ9LHtuYW1lOlwiTm9yZm9sayBJc2xhbmRcIixmbGFnOlwiZmxhZy1uZlwifSx7bmFtZTpcIk5pZ2VyaWFcIixmbGFnOlwiZmxhZy1uZ1wifSx7bmFtZTpcIk5pY2FyYWd1YVwiLGZsYWc6XCJmbGFnLW5pXCJ9LHtuYW1lOlwiTmV0aGVybGFuZHNcIixmbGFnOlwiZmxhZy1ubFwifSx7bmFtZTpcIk5vcndheVwiLGZsYWc6XCJmbGFnLW5vXCJ9LHtuYW1lOlwiTmVwYWxcIixmbGFnOlwiZmxhZy1ucFwifSx7bmFtZTpcIk5hdXJ1XCIsZmxhZzpcImZsYWctbnJcIn0se25hbWU6XCJOaXVlXCIsZmxhZzpcImZsYWctbnVcIn0se25hbWU6XCJOZXcgWmVhbGFuZFwiLGZsYWc6XCJmbGFnLW56XCJ9LHtuYW1lOlwiT21hblwiLGZsYWc6XCJmbGFnLW9tXCJ9LHtuYW1lOlwiUGFuYW1hXCIsZmxhZzpcImZsYWctcGFcIn0se25hbWU6XCJQZXJ1XCIsZmxhZzpcImZsYWctcGVcIn0se25hbWU6XCJGcmVuY2ggUG9seW5lc2lhXCIsZmxhZzpcImZsYWctcGZcIn0se25hbWU6XCJQYXB1YSBOZXcgR3VpbmVhXCIsZmxhZzpcImZsYWctcGdcIn0se25hbWU6XCJQaGlsaXBwaW5lc1wiLGZsYWc6XCJmbGFnLXBoXCJ9LHtuYW1lOlwiUGFraXN0YW5cIixmbGFnOlwiZmxhZy1wa1wifSx7bmFtZTpcIlBvbGFuZFwiLGZsYWc6XCJmbGFnLXBsXCJ9LHtuYW1lOlwiU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvblwiLGZsYWc6XCJmbGFnLXBtXCJ9LHtuYW1lOlwiUGl0Y2Fpcm5cIixmbGFnOlwiZmxhZy1wblwifSx7bmFtZTpcIlB1ZXJ0byBSaWNvXCIsZmxhZzpcImZsYWctcHJcIn0se25hbWU6XCJQYWxlc3RpbmUsIFN0YXRlIG9mXCIsZmxhZzpcImZsYWctcHNcIn0se25hbWU6XCJQb3J0dWdhbFwiLGZsYWc6XCJmbGFnLXB0XCJ9LHtuYW1lOlwiUGFsYXVcIixmbGFnOlwiZmxhZy1wd1wifSx7bmFtZTpcIlBhcmFndWF5XCIsZmxhZzpcImZsYWctcHlcIn0se25hbWU6XCJRYXRhclwiLGZsYWc6XCJmbGFnLXFhXCJ9LHtuYW1lOlwiUsOpdW5pb25cIixmbGFnOlwiZmxhZy1yZVwifSx7bmFtZTpcIlJvbWFuaWFcIixmbGFnOlwiZmxhZy1yb1wifSx7bmFtZTpcIlNlcmJpYVwiLGZsYWc6XCJmbGFnLXJzXCJ9LHtuYW1lOlwiUnVzc2lhbiBGZWRlcmF0aW9uXCIsZmxhZzpcImZsYWctcnVcIn0se25hbWU6XCJSd2FuZGFcIixmbGFnOlwiZmxhZy1yd1wifSx7bmFtZTpcIlNhdWRpIEFyYWJpYVwiLGZsYWc6XCJmbGFnLXNhXCJ9LHtuYW1lOlwiU29sb21vbiBJc2xhbmRzXCIsZmxhZzpcImZsYWctc2JcIn0se25hbWU6XCJTZXljaGVsbGVzXCIsZmxhZzpcImZsYWctc2NcIn0se25hbWU6XCJTdWRhblwiLGZsYWc6XCJmbGFnLXNkXCJ9LHtuYW1lOlwiU3dlZGVuXCIsZmxhZzpcImZsYWctc2VcIn0se25hbWU6XCJTaW5nYXBvcmVcIixmbGFnOlwiZmxhZy1zZ1wifSx7bmFtZTpcIlNhaW50IEhlbGVuYSwgQXNjZW5zaW9uIGFuZCBUcmlzdGFuIGRhIEN1bmhhXCIsZmxhZzpcImZsYWctc2hcIn0se25hbWU6XCJTbG92ZW5pYVwiLGZsYWc6XCJmbGFnLXNpXCJ9LHtuYW1lOlwiU3ZhbGJhcmQgYW5kIEphbiBNYXllblwiLGZsYWc6XCJmbGFnLXNqXCJ9LHtuYW1lOlwiU2xvdmFraWFcIixmbGFnOlwiZmxhZy1za1wifSx7bmFtZTpcIlNpZXJyYSBMZW9uZVwiLGZsYWc6XCJmbGFnLXNsXCJ9LHtuYW1lOlwiU2FuIE1hcmlub1wiLGZsYWc6XCJmbGFnLXNtXCJ9LHtuYW1lOlwiU2VuZWdhbFwiLGZsYWc6XCJmbGFnLXNuXCJ9LHtuYW1lOlwiU29tYWxpYVwiLGZsYWc6XCJmbGFnLXNvXCJ9LHtuYW1lOlwiU3VyaW5hbWVcIixmbGFnOlwiZmxhZy1zclwifSx7bmFtZTpcIlNvdXRoIFN1ZGFuXCIsZmxhZzpcImZsYWctc3NcIn0se25hbWU6XCJTYW8gVG9tZSBhbmQgUHJpbmNpcGVcIixmbGFnOlwiZmxhZy1zdFwifSx7bmFtZTpcIkVsIFNhbHZhZG9yXCIsZmxhZzpcImZsYWctc3ZcIn0se25hbWU6XCJTaW50IE1hYXJ0ZW4gKER1dGNoIHBhcnQpXCIsZmxhZzpcImZsYWctc3hcIn0se25hbWU6XCJTeXJpYW4gQXJhYiBSZXB1YmxpY1wiLGZsYWc6XCJmbGFnLXN5XCJ9LHtuYW1lOlwiU3dhemlsYW5kXCIsZmxhZzpcImZsYWctc3pcIn0se25hbWU6XCJUdXJrcyBhbmQgQ2FpY29zIElzbGFuZHNcIixmbGFnOlwiZmxhZy10Y1wifSx7bmFtZTpcIkNoYWRcIixmbGFnOlwiZmxhZy10ZFwifSx7bmFtZTpcIkZyZW5jaCBTb3V0aGVybiBUZXJyaXRvcmllc1wiLGZsYWc6XCJmbGFnLXRmXCJ9LHtuYW1lOlwiVG9nb1wiLGZsYWc6XCJmbGFnLXRnXCJ9LHtuYW1lOlwiVGhhaWxhbmRcIixmbGFnOlwiZmxhZy10aFwifSx7bmFtZTpcIlRhamlraXN0YW5cIixmbGFnOlwiZmxhZy10alwifSx7bmFtZTpcIlRva2VsYXVcIixmbGFnOlwiZmxhZy10a1wifSx7bmFtZTpcIlRpbW9yLUxlc3RlXCIsZmxhZzpcImZsYWctdGxcIn0se25hbWU6XCJUdXJrbWVuaXN0YW5cIixmbGFnOlwiZmxhZy10bVwifSx7bmFtZTpcIlR1bmlzaWFcIixmbGFnOlwiZmxhZy10blwifSx7bmFtZTpcIlRvbmdhXCIsZmxhZzpcImZsYWctdG9cIn0se25hbWU6XCJUdXJrZXlcIixmbGFnOlwiZmxhZy10clwifSx7bmFtZTpcIlRyaW5pZGFkIGFuZCBUb2JhZ29cIixmbGFnOlwiZmxhZy10dFwifSx7bmFtZTpcIlR1dmFsdVwiLGZsYWc6XCJmbGFnLXR2XCJ9LHtuYW1lOlwiVGFpd2FuLCBQcm92aW5jZSBvZiBDaGluYVwiLGZsYWc6XCJmbGFnLXR3XCJ9LHtuYW1lOlwiVGFuemFuaWEsIFVuaXRlZCBSZXB1YmxpYyBvZlwiLGZsYWc6XCJmbGFnLXR6XCJ9LHtuYW1lOlwiVWtyYWluZVwiLGZsYWc6XCJmbGFnLXVhXCJ9LHtuYW1lOlwiVWdhbmRhXCIsZmxhZzpcImZsYWctdWdcIn0se25hbWU6XCJVbml0ZWQgU3RhdGVzIE1pbm9yIE91dGx5aW5nIElzbGFuZHNcIixmbGFnOlwiZmxhZy11bVwifSx7bmFtZTpcIlVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYVwiLGZsYWc6XCJmbGFnLXVzXCJ9LHtuYW1lOlwiVXJ1Z3VheVwiLGZsYWc6XCJmbGFnLXV5XCJ9LHtuYW1lOlwiVXpiZWtpc3RhblwiLGZsYWc6XCJmbGFnLXV6XCJ9LHtuYW1lOlwiSG9seSBTZWVcIixmbGFnOlwiZmxhZy12YVwifSx7bmFtZTpcIlNhaW50IFZpbmNlbnQgYW5kIHRoZSBHcmVuYWRpbmVzXCIsZmxhZzpcImZsYWctdmNcIn0se25hbWU6XCJWZW5lenVlbGEsIEJvbGl2YXJpYW4gUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy12ZVwifSx7bmFtZTpcIlZpcmdpbiBJc2xhbmRzLCBCcml0aXNoXCIsZmxhZzpcImZsYWctdmdcIn0se25hbWU6XCJWaXJnaW4gSXNsYW5kcywgVS5TLlwiLGZsYWc6XCJmbGFnLXZpXCJ9LHtuYW1lOlwiVmlldCBOYW1cIixmbGFnOlwiZmxhZy12blwifSx7bmFtZTpcIlZhbnVhdHVcIixmbGFnOlwiZmxhZy12dVwifSx7bmFtZTpcIldhbGxpcyBhbmQgRnV0dW5hXCIsZmxhZzpcImZsYWctd2ZcIn0se25hbWU6XCJTYW1vYVwiLGZsYWc6XCJmbGFnLXdzXCJ9LHtuYW1lOlwiWWVtZW5cIixmbGFnOlwiZmxhZy15ZVwifSx7bmFtZTpcIk1heW90dGVcIixmbGFnOlwiZmxhZy15dFwifSx7bmFtZTpcIlNvdXRoIEFmcmljYVwiLGZsYWc6XCJmbGFnLXphXCJ9LHtuYW1lOlwiWmFtYmlhXCIsZmxhZzpcImZsYWctem1cIn0se25hbWU6XCJaaW1iYWJ3ZVwiLGZsYWc6XCJmbGFnLXp3XCJ9XS5maWx0ZXIoKGZ1bmN0aW9uKGNvdW50cnkpe3JldHVybi0xIT1jb3VudHJ5Lm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCRxdWVyeS50b0xvd2VyQ2FzZSgpKX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlNraWxsc0N0cmxcIixbXCIkc2NvcGVcIixcIiR3aW5kb3dcIixmdW5jdGlvbigkc2NvcGUsJHdpbmRvdyl7JHNjb3BlLnNlbGVjdGVkU2tpbGw9MCwkc2NvcGUuc2tpbGxzVmlzaWJsZT0hMSwkc2NvcGUubGFiZWxzPVtcIkRvd25sb2FkIFNhbGVzXCIsXCJJbi1TdG9yZSBTYWxlc1wiLFwiTWFpbC1PcmRlciBTYWxlc1wiXSwkc2NvcGUuZGF0YT1bMzAwLDUwMCwxMDBdLCQuZ2V0SlNPTihcIi9za2lsbHMuanNvblwiLChmdW5jdGlvbihkYXRhKXskc2NvcGUuc2tpbGxzPWRhdGEuZmlsdGVyKChmdW5jdGlvbihza2lsbCl7cmV0dXJuIHNraWxsLmVuYWJsZWR9KSksJHNjb3BlLnNldFNlbGVjdGVkU2tpbGw9ZnVuY3Rpb24oc2tpbGwpeyRzY29wZS5zZWxlY3RlZFNraWxsPXNraWxsLCRzY29wZS5zZWxlY3RlZFNraWxsLmNoYXJ0T3B0aW9ucz17Y3V0b3V0UGVyY2VudGFnZTo4MCxjaXJjdW1mZXJlbmNlOjIqTWF0aC5QSSxtYWludGFpbkFzcGVjdFJhdGlvOiEwLHRvb2x0aXBzOntlbmFibGVkOiExfX0sJHNjb3BlLnNlbGVjdGVkU2tpbGwuY2hhcnRTdHlsZT17XCJiYWNrZ3JvdW5kLWltYWdlXCI6XCJ1cmwoL3NraWxscy9cIiskc2NvcGUuc2VsZWN0ZWRTa2lsbC5pbWFnZStcIilcIixcImJhY2tncm91bmQtcmVwZWF0XCI6XCJuby1yZXBlYXRcIixcImJhY2tncm91bmQtc2l6ZVwiOlwiNjAlXCIsXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6XCI1MCUgNTAlXCJ9fSwkc2NvcGUuc2V0U2VsZWN0ZWRTa2lsbCgkc2NvcGUuc2tpbGxzWzBdKSwkc2NvcGUuJGFwcGx5KCl9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlRlblRoaW5nc0N0cmxcIixbXCIkc2NvcGVcIixcIkJvdFN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxCb3RTdmMpe2Z1bmN0aW9uIGZsYXNoKGVsZW1lbnQpe2NvbnN0IGNvbG9yPSQoZWxlbWVudCkuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiKTskKGVsZW1lbnQpLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjpcIiNGQTgwNzJcIn0sMTAwLCgpPT57JChlbGVtZW50KS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6Y29sb3J9LDEwMCl9KX0kc2NvcGUuc2VhcmNoPXtuYW1lOlwiXCIsdmFsdWVzOlwiXCJ9LEJvdFN2Yy5nZXRDYXRlZ29yaWVzKCkudGhlbihyZXNwb25zZT0+eyRzY29wZS5jYXRlZ29yaWVzPXJlc3BvbnNlLmRhdGEsJHNjb3BlLmNhdGVnb3J5RmlsdGVycz0kc2NvcGUuY2F0ZWdvcmllcy5tYXAoY2F0ZWdvcnk9PmNhdGVnb3J5KSwkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzLnB1c2goXCJBbGxcIiksJHNjb3BlLmNhdGVnb3J5RmlsdGVycy5wdXNoKFwiQmxhbmtcIiksJHNjb3BlLmNhdGVnb3J5RmlsdGVyPVwiQWxsXCIsJHNjb3BlLnVwZGF0ZUZpbHRlcj1cImFsbFwifSksQm90U3ZjLmdldExhbmd1YWdlcygpLnRoZW4ocmVzcG9uc2U9Pnskc2NvcGUubGFuZ3VhZ2VzPXJlc3BvbnNlLmRhdGF9KSwkc2NvcGUua2V5RG93bj1lPT57c3dpdGNoKChlPWV8fHdpbmRvdy5ldmVudCkua2V5Q29kZSl7Y2FzZSA5OiQoXCIjbmV3LWJsdXJiXCIpLmlzKFwiOmZvY3VzXCIpJiZzZXRUaW1lb3V0KCgpPT57JHNjb3BlLmFkZFZhbHVlKCl9LDEwMCk7YnJlYWs7Y2FzZSAxMzokKFwiI25ldy1ibHVyYlwiKS5pcyhcIjpmb2N1c1wiKT8kc2NvcGUuYWRkVmFsdWUoKTokKFwiI25ldy12YWx1ZVwiKS5pcyhcIjpmb2N1c1wiKSYmJChcIiNuZXctYmx1cmJcIikuZm9jdXMoKX19LCRzY29wZS5zZWFyY2hOYW1lPVwiXCIsJHNjb3BlLm5ld0l0ZW09e30sJHNjb3BlLnNldENhdGVnb3J5RmlsdGVyPWNhdGVnb3J5PT4kc2NvcGUuY2F0ZWdvcnlGaWx0ZXI9Y2F0ZWdvcnksJHNjb3BlLnNldFVzZXJGaWx0ZXI9dXNlcj0+JHNjb3BlLnVzZXJGaWx0ZXI9dXNlciwkc2NvcGUuc2V0VXBkYXRlRmlsdGVyPXR5cGU9PiRzY29wZS51cGRhdGVGaWx0ZXI9dHlwZSwkc2NvcGUuZmlsdGVyZWRMaXN0cz0oKT0+JHNjb3BlLmxpc3RzPyRzY29wZS5saXN0cy5maWx0ZXIoKHtjYXRlZ29yaWVzLGlzRHluYW1pYyxjcmVhdG9yfSk9PihcImFsbFwiPT09JHNjb3BlLnVwZGF0ZUZpbHRlcnx8IShcInN0YXRpY1wiPT09JHNjb3BlLnVwZGF0ZUZpbHRlciYmITA9PT1pc0R5bmFtaWN8fFwiZHluYW1pY1wiPT09JHNjb3BlLnVwZGF0ZUZpbHRlciYmITE9PT1pc0R5bmFtaWMpKSYmKFwiQWxsXCI9PT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXImJlwiQWxsXCI9PT0kc2NvcGUudXNlckZpbHRlcnx8KFwiQWxsXCIhPT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXImJlwiQWxsXCI9PT0kc2NvcGUudXNlckZpbHRlcj9jYXRlZ29yaWVzLmxlbmd0aD4wP2NhdGVnb3JpZXMuaW5kZXhPZigkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIpPj0wOlwiQmxhbmtcIj09PSRzY29wZS5jYXRlZ29yeUZpbHRlcjpcIkFsbFwiPT09JHNjb3BlLmNhdGVnb3J5RmlsdGVyJiZcIkFsbFwiIT09JHNjb3BlLnVzZXJGaWx0ZXI/Y3JlYXRvcj09PSRzY29wZS51c2VyRmlsdGVyOmNhdGVnb3JpZXMubGVuZ3RoPjA/Y2F0ZWdvcmllcy5pbmRleE9mKCRzY29wZS5jYXRlZ29yeUZpbHRlcik+PTAmJmNyZWF0b3I9PT0kc2NvcGUudXNlckZpbHRlcjpcIkJsYW5rXCI9PT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXImJmNyZWF0b3I9PT0kc2NvcGUudXNlckZpbHRlcikpKTpbXSwkc2NvcGUuJG9uKFwibG9naW5cIixfPT57JHNjb3BlLmdldExpc3RzKCl9KSwkc2NvcGUuc29ydD0oc29ydFZhbHVlLHNvcnRMYWJlbCk9Pnskc2NvcGUuc29ydExhYmVsPXNvcnRMYWJlbCwkc2NvcGUuc29ydFZhbHVlPT09c29ydFZhbHVlPyRzY29wZS5zb3J0RGlyZWN0aW9uPSEkc2NvcGUuc29ydERpcmVjdGlvbjooJHNjb3BlLnNvcnRWYWx1ZT1zb3J0VmFsdWUsJHNjb3BlLnNvcnREaXJlY3Rpb249ITApLCRzY29wZS5zb3J0ZXI9KCRzY29wZS5zb3J0RGlyZWN0aW9uP1wiK1wiOlwiLVwiKSskc2NvcGUuc29ydFZhbHVlfSwkc2NvcGUuc29ydExpc3Q9XCJ2YWx1ZVwiLCRzY29wZS5zb3J0VmFsdWU9XCJkYXRlXCIsJHNjb3BlLnNvcnREaXJlY3Rpb249ITAsJHNjb3BlLnNvcnQoXCJkYXRlXCIsXCJDcmVhdGlvbiBEYXRlXCIpLCRzY29wZS5nZXRDYXRlZ29yeUNvdW50PWNhdGVnb3J5PT4kc2NvcGUubGlzdHM/JHNjb3BlLmxpc3RzLmZpbHRlcihsaXN0PT4oXCJBbGxcIj09PWNhdGVnb3J5fHxsaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSk+PTApJiYoXCJBbGxcIj09PSRzY29wZS51c2VyRmlsdGVyfHxsaXN0LmNyZWF0b3I9PT0kc2NvcGUudXNlckZpbHRlcikmJihcImFsbFwiPT09JHNjb3BlLnVwZGF0ZUZpbHRlcnx8bGlzdC5pc0R5bmFtaWM9PT0oXCJkeW5hbWljXCI9PT0kc2NvcGUudXBkYXRlRmlsdGVyKSkpLmxlbmd0aDowLCRzY29wZS5nZXRVcGRhdGVDb3VudD10eXBlPT4kc2NvcGUubGlzdHM/JHNjb3BlLmxpc3RzLmZpbHRlcihsaXN0PT5cImFsbFwiPT09dHlwZXx8bGlzdC5pc0R5bmFtaWMmJlwiZHluYW1pY1wiPT09dHlwZXx8IWxpc3QuaXNEeW5hbWljJiZcInN0YXRpY1wiPT09dHlwZSkubGVuZ3RoOjAsJHNjb3BlLmdldExpc3RzPSgpPT57JHNjb3BlLmxvYWRpbmd8fCgkc2NvcGUubG9hZGluZz0hMCxCb3RTdmMuZ2V0TGlzdHMoJHNjb3BlLmN1cnJlbnRVc2VyKS50aGVuKCh7ZGF0YX0pPT57JHNjb3BlLmxpc3RzPWRhdGEsJHNjb3BlLnVzZXJGaWx0ZXJzPXt9LCRzY29wZS51c2VyRmlsdGVycy5BbGw9JHNjb3BlLmxpc3RzLmxlbmd0aCwkc2NvcGUudXNlckZpbHRlcnM9JHNjb3BlLmxpc3RzLnNvcnQoKGxpc3QxLGxpc3QyKT0+bGlzdDEuY3JlYXRvcj5saXN0Mi5jcmVhdG9yKS5yZWR1Y2UoKHVzZXJzLHtjcmVhdG9yfSk9Pih1c2Vyc1tjcmVhdG9yXXx8KHVzZXJzW2NyZWF0b3JdPTApLHVzZXJzW2NyZWF0b3JdKyssdXNlcnMpLCRzY29wZS51c2VyRmlsdGVycyksJHNjb3BlLnVzZXJDb3VudD1PYmplY3Qua2V5cygkc2NvcGUudXNlckZpbHRlcnMpLmxlbmd0aCwkc2NvcGUudXNlckZpbHRlcnM9c29ydE9iamVjdCgkc2NvcGUudXNlckZpbHRlcnMsITEpLCRzY29wZS51c2VyRmlsdGVyPVwiQWxsXCIsJHNjb3BlLmxvYWRpbmc9ITF9KSl9LCRzY29wZS5zZWxlY3RMaXN0PWxpc3Q9PntCb3RTdmMuZ2V0TGlzdChsaXN0KS50aGVuKCh7ZGF0YX0pPT57JHNjb3BlLnNlbGVjdGVkTGlzdD1kYXRhfSl9LCRzY29wZS5zZWxlY3RDYXRlZ29yeT1jYXRlZ29yeT0+eyRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcnk9Y2F0ZWdvcnksJChcIiNjYXRlZ29yeS1zZWxlY3RcIikuaGlkZSgpfSwkc2NvcGUuZ2V0Q2F0ZWdvcnlDbGFzcz1jYXRlZ29yeT0+JHNjb3BlLnNlbGVjdGVkTGlzdCYmJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLmluZGV4T2YoY2F0ZWdvcnkpPj0wP1wiYnRuLXN1Y2Nlc3NcIjpcImJ0bi1kZWZhdWx0XCIsJHNjb3BlLnRvZ2dsZUNhdGVnb3J5PWNhdGVnb3J5PT57Y29uc3QgY2F0ZWdvcnlJbmRleD0kc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSk7Y2F0ZWdvcnlJbmRleD49MD8kc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuc3BsaWNlKGNhdGVnb3J5SW5kZXgsMSk6JHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLnB1c2goY2F0ZWdvcnkpfSwkc2NvcGUuc2VsZWN0TGFuZ3VhZ2U9bGFuZ3VhZ2U9Pnskc2NvcGUuc2VsZWN0ZWRMaXN0Lmxhbmd1YWdlPWxhbmd1YWdlLmNvZGU7Y29uc3Qgbm9uRW5nbGlzaEluZGV4PSRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5pbmRleE9mKFwiTm9uLUVuZ2xpc2hcIik7XCJFTlwiIT09bGFuZ3VhZ2UuY29kZSYmbm9uRW5nbGlzaEluZGV4PDA/JHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLnB1c2goXCJOb24tRW5nbGlzaFwiKTpcIkVOXCI9PT1sYW5ndWFnZS5jb2RlJiZub25FbmdsaXNoSW5kZXg+PTAmJiRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5zcGxpY2Uobm9uRW5nbGlzaEluZGV4LDEpfSwkc2NvcGUuYWRkTGlzdD0oKT0+e2NvbnN0IGN1cnJlbnRMYW5ndWFnZT0kc2NvcGUuc2VsZWN0ZWRMaXN0PyRzY29wZS5zZWxlY3RlZExpc3QubGFuZ3VhZ2U6XCJFTlwiOyRzY29wZS5zZWxlY3RlZExpc3Q9e25hbWU6XCJcIixjcmVhdG9yOiRzY29wZS5jdXJyZW50VXNlci5faWQsZGF0ZTpuZXcgRGF0ZSx2YWx1ZXM6W10sYW5zd2VyczowLGlzRHluYW1pYzohMCxjYXRlZ29yeTpcIlwiLGNhdGVnb3JpZXM6W10sbGFuZ3VhZ2U6Y3VycmVudExhbmd1YWdlfX0sJHNjb3BlLmFkZFZhbHVlPSgpPT57JHNjb3BlLm5ld0l0ZW0udmFsdWUmJihfLnNvbWUoJHNjb3BlLnNlbGVjdGVkTGlzdC52YWx1ZXMsdmFsdWU9PnZhbHVlPT0kc2NvcGUubmV3SXRlbS52YWx1ZSk/YWxlcnQoJHNjb3BlLm5ld0l0ZW0udmFsdWUrXCIgaXMgYWxyZWFkeSBpbiB0aGUgbGlzdFwiKTooJHNjb3BlLm5ld0l0ZW0uY3JlYXRvcj0kc2NvcGUuY3VycmVudFVzZXIuX2lkLCRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLnVuc2hpZnQoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSgkc2NvcGUubmV3SXRlbSkpKSwkc2NvcGUuc2VsZWN0ZWRMaXN0LmFuc3dlcnMrKywkc2NvcGUubmV3SXRlbS52YWx1ZT1cIlwiLCRzY29wZS5uZXdJdGVtLmJsdXJiPVwiXCIsJHNjb3BlLnNlbGVjdGVkTGlzdC52YWx1ZXMubGVuZ3RoPj0xMCYmJHNjb3BlLnNlbGVjdGVkTGlzdC5uYW1lJiYkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMubGVuZ3RoPjAmJiRzY29wZS5zYXZlTGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KSkpLCQoXCIjbmV3LXZhbHVlXCIpLmZvY3VzKCl9LCRzY29wZS5yZXBvcnRMaXN0PWxpc3Q9PntsaXN0LnJlcG9ydGVkPSEwLEJvdFN2Yy5yZXBvcnRMaXN0KCRzY29wZS5jdXJyZW50VXNlcixsaXN0KX0sJHNjb3BlLnNhdmVMaXN0PWxpc3Q9Pnskc2NvcGUuc2F2aW5nfHwobGlzdC52YWx1ZXM9bGlzdC52YWx1ZXMuZmlsdGVyKCh7dmFsdWV9KT0+dmFsdWUpLGxpc3QudmFsdWVzLmxlbmd0aD49MTAmJmxpc3QubmFtZSYmbGlzdC5jYXRlZ29yaWVzLmxlbmd0aD4wPygkc2NvcGUuc2F2aW5nPSEwLEJvdFN2Yy5zYXZlTGlzdCgkc2NvcGUuY3VycmVudFVzZXIsbGlzdCkudGhlbigoe2RhdGF9KT0+e2lmKCRzY29wZS5zZWxlY3RlZExpc3QuX2lkKXtmb3IobGV0IGk9MDtpPCRzY29wZS5saXN0cy5sZW5ndGg7aSsrKWlmKCRzY29wZS5saXN0c1tpXS5faWQ9PT1kYXRhLl9pZCl7JHNjb3BlLmxpc3RzW2ldPWRhdGE7YnJlYWt9JHNjb3BlLnNlbGVjdExpc3QobGlzdCl9ZWxzZSAkc2NvcGUubGlzdHMudW5zaGlmdChkYXRhKSwkc2NvcGUuc2VsZWN0TGlzdChkYXRhKTskc2NvcGUuc2F2aW5nPSExfSxlcnI9Pntjb25zb2xlLmVycm9yKGVyciksJHNjb3BlLnNhdmluZz0hMX0pKTpsaXN0LnZhbHVlcy5sZW5ndGg8MTA/YWxlcnQoXCJMaXN0cyBtdXN0IGNvbnRhaW4gMTAgb3IgbW9yZSB2YWx1ZXMhXCIpOmxpc3QubmFtZT9mbGFzaChcIi5saXN0LWNhdGVnb3J5XCIpOmZsYXNoKFwiI2xpc3QtbmFtZVwiKSl9LCRzY29wZS5kZWxldGVMaXN0PWxpc3Q9PntsaXN0Ll9pZD9jb25maXJtKFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIGxpc3Q/XCIpJiZCb3RTdmMuZGVsZXRlTGlzdChsaXN0KS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLmdldExpc3RzKCksJHNjb3BlLnNlbGVjdGVkTGlzdD1udWxsfSk6KCRzY29wZS5saXN0cz0kc2NvcGUubGlzdHMuZmlsdGVyKCh7X2lkfSk9Pl9pZCksJHNjb3BlLnNlbGVjdGVkTGlzdD1udWxsKX0sJHNjb3BlLmxpc3RCdXR0b25DbGFzcz1saXN0PT57Y29uc3QgdmFsdWVzPWxpc3QudmFsdWVzLGJsdXJicz1saXN0LmJsdXJicztyZXR1cm4gdmFsdWVzPT09Ymx1cmJzJiZsaXN0LmRlc2NyaXB0aW9uP1wiYnRuLWRlZmF1bHRcIjowIT09Ymx1cmJzfHxsaXN0LmRlc2NyaXB0aW9uPzA9PT1ibHVyYnMmJmxpc3QuZGVzY3JpcHRpb24/XCJidG4taW5mb1wiOlwiYnRuLXByaW1hcnlcIjpcImJ0bi13YXJuaW5nXCJ9LCRzY29wZS5nZXRNb3ZpZVBpY3M9KCk9PntCb3RTdmMuZ2V0TW92aWVQaWNzKCRzY29wZS5zZWxlY3RlZExpc3QpLnRoZW4ocmVzcG9uc2U9PiRzY29wZS5zZWxlY3RMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpKX0sJHNjb3BlLmdldEFjdG9yUGljcz0oKT0+e0JvdFN2Yy5nZXRBY3RvclBpY3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbihyZXNwb25zZT0+JHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCkpfSwkc2NvcGUuZ2V0Qm9va1BpY3M9KCk9PntCb3RTdmMuZ2V0Qm9va1BpY3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbihyZXNwb25zZT0+JHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCkpfSwkc2NvcGUuZ2V0TXVzaWNWaWRlb3M9KCk9PntCb3RTdmMuZ2V0TXVzaWNWaWRlb3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbihyZXNwb25zZT0+JHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCkpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiVGVuVGhpbmdzQWRtaW5DdHJsXCIsW1wiJHNjb3BlXCIsXCJCb3RTdmNcIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsQm90U3ZjLFVzZXJTdmMpeyRzY29wZS4kb24oXCJsb2dpblwiLF89Pnskc2NvcGUuY3VycmVudFVzZXIuYWRtaW4mJmdldFVzZXJzKCl9KSwkc2NvcGUuZ2V0UXVldWU9KCk9Pnskc2NvcGUubG9hZGluZz0hMCxCb3RTdmMuZ2V0UXVldWUoKS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLnF1ZXVlPXJlc3BvbnNlLmRhdGEucmVwbGFjZShcIi9uXCIsXCI8YnIvPlwiKSwkc2NvcGUubG9hZGluZz0hMX0pfSwkc2NvcGUuZ2V0UXVldWUoKSxCb3RTdmMuZ2V0UGF1c2UoKS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLnBhdXNlZD1yZXNwb25zZS5kYXRhLGNvbnNvbGUubG9nKCRzY29wZS5wYXVzZWQpfSk7Y29uc3QgZ2V0VXNlcnM9KCk9Pnskc2NvcGUubG9hZGluZz0hMCxVc2VyU3ZjLmdldFVzZXJzKCkudGhlbihyZXNwb25zZT0+eyRzY29wZS51c2Vycz1yZXNwb25zZS5kYXRhLmZpbHRlcih1c2VyPT4hdXNlci5hZG1pbiksJHNjb3BlLmxvYWRpbmc9ITF9KX07JHNjb3BlLnRvZ2dsZUJhbj11c2VyPT57JHNjb3BlLmxvYWRpbmc9ITAsVXNlclN2Yy50b2dnbGVCYW4odXNlci5faWQpLnRoZW4ocmVzcG9uc2U9PntnZXRVc2VycygpfSl9LCRzY29wZS50b2dnbGVQYXVzZT11c2VyPT57Qm90U3ZjLnRvZ2dsZVBhdXNlKCkudGhlbihyZXNwb25zZT0+eyRzY29wZS5wYXVzZWQ9cmVzcG9uc2UuZGF0YSxjb25zb2xlLmxvZygkc2NvcGUucGF1c2VkKX0pfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiV29ya291dEN0cmxcIixbXCIkc2NvcGVcIixmdW5jdGlvbigkc2NvcGUpeyRzY29wZS50aW1lUmVtYWluaW5nPTAsJHNjb3BlLnRpbWVFeGVyY2lzaW5nPTMwLCRzY29wZS50aW1lUmVzdGluZz0xMCwkc2NvcGUucmVzdD0hMTt2YXIgZXhlcmNpc2luZyxzb3VuZHM9e29uOm5ldyBBdWRpbyhcIm9uLndhdlwiKSxvZmY6bmV3IEF1ZGlvKFwib2ZmLndhdlwiKSxzd2l0Y2g6bmV3IEF1ZGlvKFwic3dpdGNoLndhdlwiKX0sZXhlcmNpc2VzPVt7bmFtZTpcIkp1bXBpbmcgSmFja3NcIixzcGxpdDohMX0se25hbWU6XCJXYWxsIFNpdFwiLHNwbGl0OiExfSx7bmFtZTpcIlB1c2gtVXBcIixzcGxpdDohMX0se25hbWU6XCJDcnVuY2hcIixzcGxpdDohMX0se25hbWU6XCJTdGVwLVVwXCIsc3BsaXQ6ITB9LHtuYW1lOlwiU3F1YXRcIixzcGxpdDohMX0se25hbWU6XCJUcmljZXBzIERpcFwiLHNwbGl0OiExfSx7bmFtZTpcIlBsYW5rXCIsc3BsaXQ6ITF9LHtuYW1lOlwiSGlnaCBLbmVlc1wiLHNwbGl0OiExfSx7bmFtZTpcIkx1bmdlXCIsc3BsaXQ6ITF9LHtuYW1lOlwiUHVzaC1VcCB3aXRoIFJvdGF0aW9uXCIsc3BsaXQ6ITF9LHtuYW1lOlwiU2lkZSBQbGFua1wiLHNwbGl0OiEwfV07JHNjb3BlLnByb2dyZXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGV4ZXJjaXNlcy5sZW5ndGgtTWF0aC5mbG9vcigkc2NvcGUudGltZVJlbWFpbmluZy8oJHNjb3BlLnRpbWVFeGVyY2lzaW5nKyRzY29wZS50aW1lUmVzdGluZykpK1wiL1wiK2V4ZXJjaXNlcy5sZW5ndGh9LCRzY29wZS53b3Jrb3V0PWZ1bmN0aW9uKCl7dmFyIGV4Y2VyY2lzZVRpbWU9JHNjb3BlLnRpbWVFeGVyY2lzaW5nKyRzY29wZS50aW1lUmVzdGluZzskc2NvcGUudGltZVJlbWFpbmluZz8oY2xlYXJJbnRlcnZhbChleGVyY2lzaW5nKSwkc2NvcGUudGltZXI9XCJcIiwkc2NvcGUudGltZVJlbWFpbmluZz0wLCRzY29wZS5yZXN0PSExLCRzY29wZS5leGVyY2lzZT17bmFtZTpcIlwiLHNwbGl0OiExfSk6KCRzY29wZS50aW1lUmVtYWluaW5nPWV4ZXJjaXNlcy5sZW5ndGgqZXhjZXJjaXNlVGltZSxleGVyY2lzaW5nPXNldEludGVydmFsKChmdW5jdGlvbigpe2lmKCRzY29wZS50aW1lUmVtYWluaW5nLS0sMD09PSRzY29wZS50aW1lUmVtYWluaW5nKXJldHVybiAkc2NvcGUuZXhlcmNpc2U9e25hbWU6XCJGaW5pc2hlZCEgQ29uZ3JhdHMhXCIsc3BsaXQ6ITF9LCRzY29wZS50aW1lcj1cIlwiLCRzY29wZS50aW1lUmVtYWluaW5nPTAsJHNjb3BlLnJlc3Q9ITEsJHNjb3BlLiRhcHBseSgpLGNsZWFySW50ZXJ2YWwoZXhlcmNpc2luZyk7dmFyIGN1cnJlbnRFeGVyY2lzZT1NYXRoLmZsb29yKCRzY29wZS50aW1lUmVtYWluaW5nL2V4Y2VyY2lzZVRpbWUpLHRpbWVyPSRzY29wZS50aW1lUmVtYWluaW5nLWN1cnJlbnRFeGVyY2lzZSpleGNlcmNpc2VUaW1lOyRzY29wZS50aW1lcj10aW1lcj4kc2NvcGUudGltZUV4ZXJjaXNpbmc/dGltZXItJHNjb3BlLnRpbWVFeGVyY2lzaW5nOnRpbWVyLHRpbWVyPiRzY29wZS50aW1lRXhlcmNpc2luZz8kc2NvcGUucmVzdD0hMDokc2NvcGUucmVzdD0hMSwkc2NvcGUuZXhlcmNpc2U9ZXhlcmNpc2VzW2V4ZXJjaXNlcy5sZW5ndGgtY3VycmVudEV4ZXJjaXNlLTFdLHRpbWVyPT09JHNjb3BlLnRpbWVFeGVyY2lzaW5nP3NvdW5kcy5vbi5wbGF5KCk6MD09PXRpbWVyP3NvdW5kcy5vZmYucGxheSgpOiRzY29wZS5leGVyY2lzZS5zcGxpdCYmdGltZXI9PT1NYXRoLmZsb29yKCRzY29wZS50aW1lRXhlcmNpc2luZy8yKSYmc291bmRzLnN3aXRjaC5wbGF5KCksJHNjb3BlLiRhcHBseSgpfSksMWUzKSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmRpcmVjdGl2ZShcImhlYWRcIixbXCIkcm9vdFNjb3BlXCIsXCIkc3RhdGVcIixcIiRjb21waWxlXCIsXCIkaW50ZXJwb2xhdGVcIixmdW5jdGlvbigkcm9vdFNjb3BlLCRzdGF0ZSwkY29tcGlsZSwkaW50ZXJwb2xhdGUpe3ZhciBnZXRTdHlsZT1mdW5jdGlvbih0ZW1wbGF0ZVN0eWxlVXJsKXt2YXIgc3R5bGU9e2hyZWY6dGVtcGxhdGVTdHlsZVVybCxyZWw6XCJzdHlsZXNoZWV0XCJ9O3JldHVybiBzdHlsZS5ocmVmLm1hdGNoKC9cXC5sZXNzJC8pJiYoc3R5bGUucmVsPVwic3R5bGVzaGVldC9sZXNzXCIpLHN0eWxlfTtyZXR1cm57cmVzdHJpY3Q6XCJFXCIsbGluazpmdW5jdGlvbihzY29wZSxlbGVtKXtzY29wZS50ZW1wbGF0ZVN0eWxlcz1bXTt2YXIgaHRtbD0nPGxpbmsgbmctYXR0ci1yZWw9XCJ7e3N0eWxlLnJlbH19XCIgbmctcmVwZWF0PVwic3R5bGUgaW4gdGVtcGxhdGVTdHlsZXNcIiBuZy1ocmVmPVwie3tzdHlsZS5ocmVmfX1cIj4nO2h0bWw9KGh0bWw9aHRtbC5yZXBsYWNlKC9cXHtcXHsvZywkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSkpLnJlcGxhY2UoL1xcfVxcfS9nLCRpbnRlcnBvbGF0ZS5lbmRTeW1ib2woKSksZWxlbS5hcHBlbmQoJGNvbXBpbGUoaHRtbCkoc2NvcGUpKSwkcm9vdFNjb3BlLiRvbihcIiRzdGF0ZUNoYW5nZVN0YXJ0XCIsKGZ1bmN0aW9uKGV2ZW50LHRvU3RhdGUsdG9QYXJhbXMsZnJvbVN0YXRlLGZyb21QYXJhbXMpe3Njb3BlLnRlbXBsYXRlU3R5bGVzPWZ1bmN0aW9uKHN0YXRlKXtmb3IodmFyIHN0YXRlcz17fTtcIlwiIT09c3RhdGUubmFtZTspe3ZhciBwYXJlbnQ9JHN0YXRlLmdldChcIl5cIixzdGF0ZSk7c3RhdGVzW3BhcmVudC5uYW1lXXx8KHN0YXRlc1twYXJlbnQubmFtZV09e30pLHN0YXRlLnRlbXBsYXRlU3R5bGVVcmwmJihzdGF0ZXNbcGFyZW50Lm5hbWVdW1wiXCJdfHwoc3RhdGVzW3BhcmVudC5uYW1lXVtcIlwiXT1nZXRTdHlsZShzdGF0ZS50ZW1wbGF0ZVN0eWxlVXJsKSkpLHN0YXRlLnZpZXdzJiZfLmZvckVhY2goc3RhdGUudmlld3MsKGZ1bmN0aW9uKHZpZXcsa2V5KXtpZih2aWV3LnRlbXBsYXRlU3R5bGVVcmwpcmV0dXJuKGtleT1rZXkuc3BsaXQoXCJAXCIpKVsxXT8oc3RhdGVzW2tleVsxXV18fChzdGF0ZXNba2V5WzFdXT17fSksdm9pZChzdGF0ZXNba2V5WzFdXVtrZXlbMF1dfHwoc3RhdGVzW2tleVsxXV1ba2V5WzBdXT1nZXRTdHlsZSh2aWV3LnRlbXBsYXRlU3R5bGVVcmwpKSkpOnZvaWQoc3RhdGVzW3BhcmVudC5uYW1lXVtrZXlbMF1dPWdldFN0eWxlKHZpZXcudGVtcGxhdGVTdHlsZVVybCkpfSkpLHN0YXRlPXBhcmVudH12YXIgZmxhdD1bXTtyZXR1cm4gXy5mb3JFYWNoKHN0YXRlcywoZnVuY3Rpb24odmlld3Mpe18uZm9yRWFjaCh2aWV3cywoZnVuY3Rpb24oc3R5bGUpe18uaW5jbHVkZXMoZmxhdCxzdHlsZSl8fGZsYXQucHVzaChzdHlsZSl9KSl9KSksZmxhdC5yZXZlcnNlKCksZmxhdH0odG9TdGF0ZSl9KSl9fX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiQm90U3ZjXCIsW1wiJGh0dHBcIixmdW5jdGlvbigkaHR0cCl7dmFyIHN2Yz10aGlzO3N2Yy5nZXRRdWV1ZT1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYm90cy90ZW50aGluZ3MvcXVldWVcIil9LHN2Yy5nZXRMaXN0cz1mdW5jdGlvbih1c2VyKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9ib3RzL2xpc3RzXCIpfSxzdmMuZ2V0Q2F0ZWdvcmllcz0oKT0+JGh0dHAuZ2V0KFwiL2FwaS9ib3RzL2NhdGVnb3JpZXNcIiksc3ZjLmdldExhbmd1YWdlcz0oKT0+JGh0dHAuZ2V0KFwiL2FwaS9ib3RzL2xhbmd1YWdlc1wiKSxzdmMuZ2V0TGlzdD1mdW5jdGlvbihsaXN0KXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9ib3RzL2xpc3RzL1wiK2xpc3QuX2lkKX0sc3ZjLnNhdmVMaXN0PWZ1bmN0aW9uKHVzZXIsbGlzdCl7cmV0dXJuICRodHRwLnB1dChcIi9hcGkvYm90cy9saXN0c1wiLHt1c2VyLGxpc3R9KX0sc3ZjLnJlcG9ydExpc3Q9ZnVuY3Rpb24odXNlcixsaXN0KXskaHR0cC5nZXQoXCIvYXBpL2JvdHMvbGlzdHMvXCIrbGlzdC5faWQrXCIvcmVwb3J0L1wiK3VzZXIuX2lkKX0sc3ZjLmRlbGV0ZUxpc3Q9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLmRlbGV0ZShcIi9hcGkvYm90cy9saXN0cy9cIitsaXN0Ll9pZCl9LHN2Yy5nZXRNb3ZpZVBpY3M9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLmdldChgL2FwaS9ib3RzL2xpc3RzLyR7bGlzdC5faWR9L21vdmllc2ApfSxzdmMuZ2V0QWN0b3JQaWNzPWZ1bmN0aW9uKGxpc3Qpe3JldHVybiAkaHR0cC5nZXQoYC9hcGkvYm90cy9saXN0cy8ke2xpc3QuX2lkfS9hY3RvcnNgKX0sc3ZjLmdldEJvb2tQaWNzPWZ1bmN0aW9uKGxpc3Qpe3JldHVybiAkaHR0cC5nZXQoYC9hcGkvYm90cy9saXN0cy8ke2xpc3QuX2lkfS9ib29rc2ApfSxzdmMuZ2V0TXVzaWNWaWRlb3M9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLmdldChgL2FwaS9ib3RzL2xpc3RzLyR7bGlzdC5faWR9L211c2ljdmlkZW9zYCl9LHN2Yy5nZXRQYXVzZT1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2JvdHMvcGF1c2VcIil9LHN2Yy50b2dnbGVQYXVzZT1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS9ib3RzL3BhdXNlXCIpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiQ2F0ZWdvcmllc1N2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3ZhciBzdmM9dGhpcztzdmMuZ2V0Q2F0ZWdvcmllcz1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2NhdGVnb3JpZXNcIil9LHN2Yy5nZXRUYXNrcz1mdW5jdGlvbihjYXRlZ29yeSl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvY2F0ZWdvcmllcy9cIitjYXRlZ29yeSl9LHN2Yy5hZGRDYXRlZ29yeT1mdW5jdGlvbihjYXRlZ29yeSl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL2NhdGVnb3JpZXMvXCIsY2F0ZWdvcnkpfSxzdmMuYWRkVGFzaz1mdW5jdGlvbihjYXRlZ29yeSx0YXNrKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvY2F0ZWdvcmllcy9cIitjYXRlZ29yeStcIi90YXNrc1wiLHRhc2spfSxzdmMuc2V0UHJpb3JpdHlMaXN0PWZ1bmN0aW9uKGxpc3Qpe3N2Yy5jaG9pY2VzPWxpc3Qsc3ZjLnByaW9yaXR5TGlzdD1bXTtmb3IodmFyIGk9MDtpPGxpc3QubGVuZ3RoO2krKylmb3IodmFyIGo9aSsxO2o8bGlzdC5sZW5ndGg7aisrKXt2YXIgcmFuZG9tPU1hdGgucm91bmQoTWF0aC5yYW5kb20oKSk7c3ZjLnByaW9yaXR5TGlzdC5wdXNoKHtpZDowLGZpcnN0Q2hvaWNlOmxpc3RbMD09PXJhbmRvbT9pOmpdLm5hbWUsc2Vjb25kQ2hvaWNlOmxpc3RbMD09PXJhbmRvbT9qOmldLm5hbWUsY2hvaWNlOlwiXCJ9KX1mb3IoaSBpbiBmdW5jdGlvbihhcnJheSl7dmFyIHQsaSxtPWFycmF5Lmxlbmd0aDtmb3IoO207KWk9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKm0tLSksdD1hcnJheVttXSxhcnJheVttXT1hcnJheVtpXSxhcnJheVtpXT10fShzdmMucHJpb3JpdHlMaXN0KSxzdmMucHJpb3JpdHlMaXN0KXN2Yy5wcmlvcml0eUxpc3RbaV0uaWQ9aSsxfSxzdmMuZ2V0UHJpb3JpdHlMaXN0PWZ1bmN0aW9uKGxpc3Qpe3JldHVybiBzdmMucHJpb3JpdHlMaXN0fX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiRW1haWxTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLnNlbmQ9ZnVuY3Rpb24oZW1haWwpe3JldHVybiBjb25zb2xlLmxvZyhlbWFpbCksJGh0dHAucG9zdChcIi9hcGkvZW1haWxcIixlbWFpbCl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJGaWxlU3ZjXCIsW1wiJGh0dHBcIixmdW5jdGlvbigkaHR0cCl7dGhpcy5nZXRJbWFnZXM9ZnVuY3Rpb24oZm9sZGVyKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9maWxlcy9pbWFnZXMvXCIrZm9sZGVyKX0sdGhpcy5nZXRTb3VuZHM9ZnVuY3Rpb24oZm9sZGVyKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9maWxlcy9zb3VuZHMvXCIrZm9sZGVyKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIkdhbWVTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLmdldEhpZ2hzY29yZT1mdW5jdGlvbihnYW1lLHVzZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2dhbWVzL1wiK2dhbWUrXCIvXCIrdXNlcitcIi9oaWdoc2NvcmVcIil9LHRoaXMuc2V0SGlnaHNjb3JlPWZ1bmN0aW9uKGdhbWUsdXNlcixzY29yZSl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL2dhbWVzL1wiK2dhbWUrXCIvXCIrdXNlcitcIi9oaWdoc2NvcmVcIix7c2NvcmV9KX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIkxhbmd1YWdlU3ZjXCIsKGZ1bmN0aW9uKCl7dmFyIHN2Yz10aGlzO3N2Yy5sYW5ndWFnZXM9W3tjb2RlOlwiRU5cIixuYW1lOlwiRW5nbGlzaFwiLGZsYWc6XCJmbGFnLWljb24tZ2JcIn0se2NvZGU6XCJOTFwiLG5hbWU6XCJOZWRlcmxhbmRzXCIsZmxhZzpcImZsYWctaWNvbi1ubFwifSx7Y29kZTpcIkZSXCIsbmFtZTpcIkZyYW7Dp2Fpc1wiLGZsYWc6XCJmbGFnLWljb24tZnJcIn1dLHN2Yy50ZXh0PVt7Y29kZTpcIkVOXCJ9LHtjb2RlOlwiTkxcIn0se2NvZGU6XCJGUlwifV0sc3ZjLnNlbGVjdGVkTGFuZ3VhZ2U9c3ZjLmxhbmd1YWdlc1swXSxzdmMuc2V0TGFuZ3VhZ2U9ZnVuY3Rpb24obGFuZ3VhZ2Upe3JldHVybiBzdmMuc2VsZWN0ZWRMYW5ndWFnZT1sYW5ndWFnZSxsYW5ndWFnZX0sc3ZjLmdldExhbmd1YWdlPWZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5zZWxlY3RlZExhbmd1YWdlfX0pKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiUG9zdHNTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLmZldGNoPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvcG9zdHNcIil9LHRoaXMuY3JlYXRlPWZ1bmN0aW9uKHBvc3Qpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS9wb3N0c1wiLHBvc3QpfSx0aGlzLmdldFBvc3Q9ZnVuY3Rpb24ocG9zdCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvcG9zdHMvXCIrcG9zdC5faWQpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiVXNlclN2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3ZhciBzdmM9dGhpcztzdmMuZ2V0VXNlcj1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3VzZXJzXCIpfSxzdmMuZ2V0VXNlcnM9ZnVuY3Rpb24oKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS91c2Vycy9hbGxcIil9LHN2Yy50b2dnbGVCYW49ZnVuY3Rpb24oaWQpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3VzZXJzL2Jhbi9cIitpZCl9LHN2Yy5zZXRUb2tlbj1mdW5jdGlvbih0b2tlbil7cmV0dXJuICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uW1wiWC1BdXRoXCJdPXRva2VuLHN2Yy5nZXRVc2VyKCl9LHN2Yy5hdXRoZW50aWNhdGU9ZnVuY3Rpb24odXNlcil7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL3VzZXJzL2F1dGhlbnRpY2F0ZVwiLHt1c2VyfSkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2Upe3JldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuPXJlc3BvbnNlLmRhdGEsc3ZjLnNldFRva2VuKHJlc3BvbnNlLmRhdGEpfSkpfSxzdmMubG9naW49ZnVuY3Rpb24odXNlcil7cmV0dXJuICRodHRwLmdldChcIi9hcGkvdXNlcnMvXCIrdXNlcitcIi9sb2dpblwiKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7cmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW49cmVzcG9uc2UuZGF0YSxzdmMuc2V0VG9rZW4ocmVzcG9uc2UuZGF0YSl9KSl9LHN2Yy51cGRhdGVVc2VyPWZ1bmN0aW9uKHVzZXIpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9cIit1c2VyLl9pZCx7dXNlcn0pLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5nZXRVc2VyKCl9KSl9LHN2Yy5jaGVja1Bhc3N3b3JkPWZ1bmN0aW9uKHVzZXIscGFzc3dvcmQpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9cIit1c2VyK1wiL3ZlcmlmaWNhdGlvblwiLHtwYXNzd29yZH0pfSxzdmMuY2hhbmdlUGFzc3dvcmQ9ZnVuY3Rpb24odXNlcixvbGRQYXNzd29yZCxuZXdQYXNzd29yZCl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL3VzZXJzL1wiK3VzZXIrXCIvcGFzc3dvcmRcIix7b2xkUGFzc3dvcmQsbmV3UGFzc3dvcmR9KX0sc3ZjLmNoYW5nZVVzZXJuYW1lPWZ1bmN0aW9uKHVzZXIsbmV3VXNlcm5hbWUpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9cIit1c2VyK1wiL3VzZXJuYW1lXCIse25ld1VzZXJuYW1lfSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gc3ZjLmdldFVzZXIoKX0pKX0sc3ZjLmxvZ291dD1mdW5jdGlvbigpe3dpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKSwkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIlgtQXV0aFwiXT1cIlwifSxzdmMuY3JlYXRlVXNlcj1mdW5jdGlvbih1c2VybmFtZSxwYXNzd29yZCl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL3VzZXJzXCIse3VzZXJuYW1lLHBhc3N3b3JkfSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gc3ZjLmxvZ2luKHVzZXJuYW1lLHBhc3N3b3JkKX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlF1aXpBbmltYWxzQ3RybFwiLFtcIiRzY29wZVwiLFwiRmlsZVN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxGaWxlU3ZjKXtGaWxlU3ZjLmdldFNvdW5kcyhcImFuaW1hbHNcIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5hbmltYWxzPV8uc2h1ZmZsZShyZXNwb25zZS5kYXRhLm1hcChhbmltYWw9Pih7c291bmQ6YW5pbWFsLG5hbWU6YW5pbWFsLnN1YnN0cmluZygwLGFuaW1hbC5pbmRleE9mKFwiLlwiKSkucmVwbGFjZShcIl9cIixcIiBcIikuY2FwaXRhbGl6ZSgpfSkpKTtmb3IobGV0IGFuaW1hbCBvZiAkc2NvcGUuYW5pbWFscylhbmltYWwuYW5zd2Vycz1fLnNodWZmbGUoW2FuaW1hbC5uYW1lLC4uLmdldFJhbmRvbUFuaW1hbHMoYW5pbWFsLm5hbWUpXSk7Y29uc29sZS5sb2coJHNjb3BlLmFuaW1hbHMpfSkpLCRzY29wZS5ndWVzcz0oYW5pbWFsLGd1ZXNzKT0+e2FuaW1hbC5ndWVzcz1ndWVzc307Y29uc3QgZ2V0UmFuZG9tQW5pbWFscz1uYW1lPT5fLnNodWZmbGUoJHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbD0+bmFtZSE9PWFuaW1hbC5uYW1lKS5tYXAoYW5pbWFsPT5hbmltYWwubmFtZSkpLnNsaWNlKDAsNSk7JHNjb3BlLmdldFNjb3JlPSgpPT5gJHskc2NvcGUuYW5pbWFscy5maWx0ZXIoYW5pbWFsPT5hbmltYWwubmFtZT09PWFuaW1hbC5ndWVzcykubGVuZ3RofS8keyRzY29wZS5hbmltYWxzLmxlbmd0aH1gLCRzY29wZS5pc1Njb3JlVmlzaWJsZT0oKT0+JHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbD0+YW5pbWFsLmd1ZXNzKS5sZW5ndGg9PT0kc2NvcGUuYW5pbWFscy5sZW5ndGh9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlF1aXpHb29nbGVDdHJsXCIsW1wiJHNjb3BlXCIsXCJGaWxlU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEZpbGVTdmMpe0ZpbGVTdmMuZ2V0SW1hZ2VzKFwiZ29vZ2xlXCIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuaW1hZ2VzPXJlc3BvbnNlLmRhdGF9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlF1aXpMb2dvc0N0cmxcIixbXCIkc2NvcGVcIixcIkZpbGVTdmNcIixmdW5jdGlvbigkc2NvcGUsRmlsZVN2Yyl7RmlsZVN2Yy5nZXRJbWFnZXMoXCJsb2dvc1wiKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLmltYWdlcz1yZXNwb25zZS5kYXRhfSkpfV0pOyIsIi8qXHJcbiQgPSBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcclxudmFyIGJvb3RzdHJhcCA9IHJlcXVpcmUoJ2Jvb3RzdHJhcCcpO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIGFuZ3VsYXJTYW5pdGl6ZSA9IHJlcXVpcmUoJ2FuZ3VsYXItc2FuaXRpemUnKTtcclxudmFyIGFuZ3VsYXJBbmltYXRlID0gcmVxdWlyZSgnYW5ndWxhci1hbmltYXRlJyk7XHJcbiovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgJ3VpLnJvdXRlcicsXHJcbiAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgJ25nQW5pbWF0ZScsXHJcbiAgJ25nU2FuaXRpemUnLFxyXG4gICduZ0RyYWdEcm9wJyxcclxuICAnbmdUYWdzSW5wdXQnLFxyXG4gICd2Y1JlY2FwdGNoYScsXHJcbiAgJ2NoYXJ0LmpzJyxcclxuICAndGMuY2hhcnRqcydcclxuXSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gIC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJHVybFNlcnZpY2VQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcclxuXHJcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvaG9tZScpO1xyXG4gICAgJHVybFNlcnZpY2VQcm92aWRlci5jb25maWcuc3RyaWN0TW9kZShmYWxzZSk7XHJcblxyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgLnN0YXRlKCdob21lJywge1xyXG4gICAgICAgIHVybDogJy9ob21lJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJy9ob21lLmh0bWwnXHJcbiAgICAgIH0pXHJcbiAgICAgIC5zdGF0ZSgncG9saWN5Jywge1xyXG4gICAgICAgIHVybDogJy9wb2xpY3knLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL3BvbGljeS5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ3ByaW50Jywge1xyXG4gICAgICAgIHVybDogJy9wcmludCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvcHJpbnQuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdleHBlcmllbmNlJywge1xyXG4gICAgICAgIHVybDogJy9leHBlcmllbmNlJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnRXhwZXJpZW5jZUN0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL2V4cGVyaWVuY2UuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdza2lsbHMnLCB7XHJcbiAgICAgICAgdXJsOiAnL3NraWxscycsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ1NraWxsc0N0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL3NraWxscy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ2hvYmJpZXMnLCB7XHJcbiAgICAgICAgdXJsOiAnL2hvYmJpZXMnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdIb2JiaWVzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvaG9iYmllcy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ2NvbnRhY3QnLCB7XHJcbiAgICAgICAgdXJsOiAnL2NvbnRhY3QnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdDb250YWN0Q3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvY29udGFjdC5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ3dvcmtvdXQnLCB7XHJcbiAgICAgICAgdXJsOiAnL3dvcmtvdXQnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdXb3Jrb3V0Q3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvd29ya291dC5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ3Bvc3RzJywge1xyXG4gICAgICAgIHVybDogJy9wb3N0cycsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvcG9zdHMuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdwcm9maWxlJywge1xyXG4gICAgICAgIHVybDogJy9wcm9maWxlJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnUHJvZmlsZUN0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL3Byb2ZpbGUuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdsaXN0cycsIHtcclxuICAgICAgICB1cmw6ICcvbGlzdHMnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdMaXN0c0N0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnbGlzdHMuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdwcmlvcml0aXplJywge1xyXG4gICAgICAgIHVybDogJy9wcmlvcml0aXplJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnUHJpb3JpdGl6ZUN0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAncHJpb3JpdGl6ZS5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ2J1YmJsZXMnLCB7XHJcbiAgICAgICAgdXJsOiAnL2J1YmJsZXMnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdCdWJibGVzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdidWJibGVzLmh0bWwnXHJcbiAgICAgIH0pXHJcbiAgICAgIC5zdGF0ZSgnYXN0ZXJvaWRzJywge1xyXG4gICAgICAgIHVybDogJy9hc3Rlcm9pZHMnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdBc3Rlcm9pZHNDdHJsJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FzdGVyb2lkcy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ2xlbW1pbmdzJywge1xyXG4gICAgICAgIHVybDogJy9sZW1taW5ncycsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ0xlbW1pbmdzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdsZW1taW5ncy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ2JvdHMnLCB7XHJcbiAgICAgICAgdXJsOiAnL2JvdHMnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdUZW5UaGluZ3NDdHJsJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbnRoaW5ncy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ3RlbnRoaW5ncycsIHtcclxuICAgICAgICB1cmw6ICcvdGVudGhpbmdzJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnVGVuVGhpbmdzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW50aGluZ3MuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCd0ZW50aGluZ3MtYWRtaW4nLCB7XHJcbiAgICAgICAgdXJsOiAnL3RlbnRoaW5ncy1hZG1pbicsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ1RlblRoaW5nc0FkbWluQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW50aGluZ3MtYWRtaW4uaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdxdWl6LWdvb2dsZScsIHtcclxuICAgICAgICB1cmw6ICcvZ29vZ2xlJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnUXVpekdvb2dsZUN0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAncXVpenplcy9nb29nbGUuaHRtbCdcclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdxdWl6LWxvZ29zJywge1xyXG4gICAgICAgIHVybDogJy9sb2dvcycsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ1F1aXpMb2dvc0N0cmwnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAncXVpenplcy9sb2dvcy5odG1sJ1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ3F1aXotYW5pbWFscycsIHtcclxuICAgICAgICB1cmw6ICcvYW5pbWFscycsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ1F1aXpBbmltYWxzQ3RybCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdxdWl6emVzL2FuaW1hbHMuaHRtbCdcclxuICAgICAgfSk7XHJcblxyXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcclxuICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgcmVxdWlyZUJhc2U6IGZhbHNlXHJcbiAgICB9KTtcclxuXHJcbiAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdXZWJTb2NrZXRTdmMnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHRpbWVvdXQpIHtcclxuICBmdW5jdGlvbiB3ZWJzb2NrZXRIb3N0KCkge1xyXG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcclxuICAgICAgcmV0dXJuIFwid3NzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBcIndzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBjb25uZWN0aW9uO1xyXG4gIHZhciBjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQod2Vic29ja2V0SG9zdCgpKTtcclxuXHJcbiAgICBjb25uZWN0aW9uLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1dlYnNvY2tldCBjb25uZWN0ZWQnKTtcclxuICAgIH07XHJcblxyXG4gICAgY29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1dlYnNvY2tldCBjbG9zZWQuIFJlY29ubmVjdGluZy4uLicpO1xyXG4gICAgICAkdGltZW91dChjb25uZWN0LCAxMDAwKTtcclxuICAgIH07XHJcblxyXG4gICAgY29ubmVjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiArIGUgKyBcIiAtIFN0YXRlOiBcIiArIGNvbm5lY3Rpb24ucmVhZHlTdGF0ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgdmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGUuZGF0YSk7XHJcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnd3M6JyArIHBheWxvYWQudG9waWMsIHBheWxvYWQuZGF0YSk7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHRoaXMuc2VuZCA9IGZ1bmN0aW9uICh0b3BpYywgZGF0YSkge1xyXG4gICAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeSh7dG9waWM6IHRvcGljLCBkYXRhOiBkYXRhfSk7XHJcbiAgICBjb25uZWN0aW9uLnNlbmQoanNvbik7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5jb25uZWN0ID0gY29ubmVjdDtcclxuXHJcbn0pLnJ1bihmdW5jdGlvbiAoV2ViU29ja2V0U3ZjKSB7XHJcbiAgV2ViU29ja2V0U3ZjLmNvbm5lY3QoKTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gIC5jb250cm9sbGVyKCdBcHBDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sIExhbmd1YWdlU3ZjLCBVc2VyU3ZjKSB7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCIlY1lvdSBzbmVha3kgYnVnZ2VyIVwiLCBcImZvbnQ6IDJlbSBzYW5zLXNlcmlmOyBjb2xvcjogRG9kZ2VyQmx1ZTsgdGV4dC1zaGFkb3c6IDJweCAwIDAgIzQ0NCwgLTJweCAwIDAgIzQ0NCwgMCAycHggMCAjNDQ0LCAwIC0ycHggMCAjNDQ0LCAxcHggMXB4ICM0NDQsIC0xcHggLTFweCAwICM0NDQsIDFweCAtMXB4IDAgIzQ0NCwgLTFweCAxcHggMCAjNDQ0O1wiKTtcclxuICAgIGNvbnNvbGUubG9nKFwiSSdtIGdsYWQgeW91J3JlIGN1cmlvdXMgd2hldGhlciBzb21ldGhpbmcgaXMgcG9wcGluZyB1cCBpbiBoZXJlLiBJJ20gYSBiaXQgb2YgYSBzdGlja2xlciB3aGVuIGl0IGNvbWVzIHRvIG1lc3NhZ2VzIGluIHRoZSBjb25zb2xlIHNvIEkgdHJ5IHRvIG1ha2Ugc3VyZSBvbmx5IHRoaW5ncyBJIHdhbnQgYXJlIHZpc2libGUuIFRoYXQgYmVpbmcgc2FpZCwgaWYgdGhlcmUgaXMgYSBiaWcgZXJyb3IgaGVyZSwgSSB3b3VsZCByZWFsbHkgYXBwcmVjaWF0ZSB5b3UgdGVsbGluZyBtZSBzbyBJIGNhbiBnZXQgcmlkIG9mIGl0IVwiKTtcclxuICAgIGNvbnNvbGUubG9nKFwiVGhlIGNvZGUgZm9yIG15IHJlc3VtZSBpcyBob3N0ZWQgb24gR2l0aHViIGlmIHlvdSByZWFsbHkgd2FudCB0byBnbyBpbnRvIGFsbCB0aGlzISA9PiBodHRwczovL2dpdGh1Yi5jb20vRmxhbmRlcnNCdXJnZXIvcmVzdW1lXCIpO1xyXG5cclxuICAgIC8qXHJcbiAgICAkKGRvY3VtZW50KS5iaW5kKFwia2V5dXAga2V5ZG93blwiLCBmdW5jdGlvbihlKXtcclxuICAgICAgaWYoZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PSA4MCl7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgKi9cclxuXHJcbiAgICAkKHdpbmRvdykubG9hZChmdW5jdGlvbigpIHtcclxuICAgICAgJChcIi5sb2FkaW5nXCIpLmZhZGVPdXQoXCJzbG93XCIpO1xyXG4gICAgICAkKFwiLmNvbnRlbnRcIikuZmFkZUluKFwic2xvd1wiKTtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS50aGVtZUNvdW50ZXIgPSA2O1xyXG4gICAgJHNjb3BlLnRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgICRzY29wZS55ZWFyID0gJHNjb3BlLnRvZGF5LmdldEZ1bGxZZWFyKCk7XHJcbiAgICAkc2NvcGUucmFuZG9tID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApKTtcclxuXHJcbiAgICAkc2NvcGUuZmxpcFRoZW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICQoXCIubG9hZGluZ1wiKS5zaG93KCk7XHJcbiAgICAgICQoXCIuY29udGVudFwiKS5oaWRlKCk7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJChcIi5sb2FkaW5nXCIpLmZhZGVPdXQoXCJzbG93XCIpO1xyXG4gICAgICAgICQoXCIuY29udGVudFwiKS5mYWRlSW4oXCJzbG93XCIpO1xyXG4gICAgICB9LCA4MDApO1xyXG4gICAgICAkc2NvcGUudGhlbWVDb3VudGVyID0gJHNjb3BlLnRoZW1lQ291bnRlciA8IDYgPyAkc2NvcGUudGhlbWVDb3VudGVyICsgMSA6ICRzY29wZS50aGVtZUNvdW50ZXIgPSAxO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgJC5nZXRKU09OKCcvc2tpbGxzLmpzb24nLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICRzY29wZS5za2lsbHMgPSBkYXRhLmZpbHRlcihmdW5jdGlvbihza2lsbCkge1xyXG4gICAgICAgIHJldHVybiBza2lsbC5lbmFibGVkO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAkLmdldEpTT04oJy9ob2JiaWVzLmpzb24nLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICRzY29wZS5ob2JiaWVzID0gZGF0YTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAkLmdldEpTT04oJy9leHBlcmllbmNlLmpzb24nLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICRzY29wZS5qb2JzID0gZGF0YTtcclxuICAgICAgJHNjb3BlLmpvYnMuZm9yRWFjaChmdW5jdGlvbihqb2IpIHtcclxuICAgICAgICBqb2Iuc3RhcnREYXRlID0gbmV3IERhdGUoam9iLnN0YXJ0RGF0ZSk7XHJcbiAgICAgICAgaWYgKGpvYi5lbmREYXRlKSBqb2IuZW5kRGF0ZSA9IG5ldyBEYXRlKGpvYi5lbmREYXRlKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0VGltZVNwYW4gPSBmdW5jdGlvbihqb2IpIHtcclxuICAgICAgcmV0dXJuIGpvYi5zdGFydERhdGUuZ2V0RnVsbFllYXIoKSArIChqb2IuZW5kRGF0ZSA/ICgnIC0gJyArIGpvYi5lbmREYXRlLmdldEZ1bGxZZWFyKCkpIDogJyAtIFRvZGF5Jyk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5sYW5ndWFnZXMgPSBMYW5ndWFnZVN2Yy5sYW5ndWFnZXM7XHJcblxyXG4gICAgJHNjb3BlLnNlbGVjdGVkTGFuZ3VhZ2UgPSBMYW5ndWFnZVN2Yy5nZXRMYW5ndWFnZSgpO1xyXG5cclxuICAgICRzY29wZS5zZWxlY3RMYW5ndWFnZSA9IGZ1bmN0aW9uKGxhbmd1YWdlKSB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZExhbmd1YWdlID0gTGFuZ3VhZ2VTdmMuc2V0TGFuZ3VhZ2UobGFuZ3VhZ2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuaG92ZXJkaXYgPSBmdW5jdGlvbihlLCBkaXZpZCkge1xyXG4gICAgICB2YXIgbGVmdCA9IGUuY2xpZW50WCArIFwicHhcIjtcclxuICAgICAgdmFyIHRvcCA9IChlLmNsaWVudFkgKyAyMCkgKyBcInB4XCI7XHJcblxyXG4gICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2aWQpO1xyXG5cclxuICAgICAgJChcIiNcIiArIGRpdmlkKS5jc3MoJ2xlZnQnLCBsZWZ0KTtcclxuICAgICAgJChcIiNcIiArIGRpdmlkKS5jc3MoJ3RvcCcsIHRvcCk7XHJcblxyXG4gICAgICAkKFwiI1wiICsgZGl2aWQpLnRvZ2dsZSgpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zb2NpYWxNZWRpYSA9IFtcclxuICAgICAgLypcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZmFjZWJvb2tcIixcclxuICAgICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vZmxhbmRlcnNidXJnZXJcIixcclxuICAgICAgICAgICAgXCJpY29uXCI6IFwiZmEtZmFjZWJvb2stZlwiXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJ0d2l0dGVyXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9CZWxnb0NhbmFkaWFuXCIsXHJcbiAgICAgICAgICAgIFwiaWNvblwiOiBcImZhLXR3aXR0ZXJcIlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ29vZHJlYWRzXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cuZ29vZHJlYWRzLmNvbS91c2VyL3Nob3cvMTcwNzAwMTAtbGF1cmVudFwiLFxyXG4gICAgICAgICAgICBcImljb25cIjogXCJmYS1ib29rXCJcclxuICAgICAgICAgIH0sKi9cclxuICAgICAge1xyXG4gICAgICAgIFwibmFtZVwiOiBcImxpbmtlZGluXCIsXHJcbiAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vbGF1cmVudC1kZWJhY2tlci0xNjMzYTkxNlwiLFxyXG4gICAgICAgIFwiaWNvblwiOiBcImZhLWxpbmtlZGluXCJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwibmFtZVwiOiBcImdpdGh1YlwiLFxyXG4gICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL0ZsYW5kZXJzQnVyZ2VyXCIsXHJcbiAgICAgICAgXCJpY29uXCI6IFwiZmEtZ2l0aHViXCJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwibmFtZVwiOiBcImpzZmlkZGxlXCIsXHJcbiAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2pzZmlkZGxlLm5ldC91c2VyL0JlbGdvQ2FuYWRpYW4vZmlkZGxlcy9cIixcclxuICAgICAgICBcImljb25cIjogXCJmYS1qc2ZpZGRsZVwiXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBcIm5hbWVcIjogXCJzdGFja292ZXJmbG93XCIsXHJcbiAgICAgICAgXCJ1cmxcIjogXCJodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTA4MzkyMy9iZWxnb2NhbmFkaWFuXCIsXHJcbiAgICAgICAgXCJpY29uXCI6IFwiZmEtc3RhY2stb3ZlcmZsb3dcIlxyXG5cclxuICAgICAgfVxyXG4gICAgXTtcclxuXHJcbiAgICBpZiAod2luZG93LmxvY2FsU3RvcmFnZS51c2VyKSB7XHJcbiAgICAgIFVzZXJTdmMubG9naW4od2luZG93LmxvY2FsU3RvcmFnZS51c2VyKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICBsb2dpbihyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUuJG9uKCdsb2dpbicsIGZ1bmN0aW9uKF8sIHVzZXIpIHtcclxuICAgICAgbG9naW4odXNlcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBsb2dpbih1c2VyKSB7XHJcbiAgICAgIGlmICghJHNjb3BlLmxvZ2dlZEluKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS51c2VyID0gdXNlci5faWQ7XHJcbiAgICAgICAgJHNjb3BlLmxvZ2dlZEluID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdsb2dpbicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLiRvbigndXBkYXRlJywgZnVuY3Rpb24oXywgdXNlcikge1xyXG4gICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gICAgICAkc2NvcGUuY3VycmVudFVzZXIuYmlydGhEYXRlID0gbmV3IERhdGUoJHNjb3BlLmN1cnJlbnRVc2VyLmJpcnRoRGF0ZSk7XHJcbiAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJChcIiNsb2FkaW5nLWljb25cIikuZmFkZU91dChcInNsb3dcIik7XHJcbiAgICAgIH0sIDEwMDApO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgICRzY29wZS4kb24oJ2xvYWRpbmcnLCBmdW5jdGlvbihfLCB1c2VyKSB7XHJcbiAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgJChcIiNsb2FkaW5nLWljb25cIikuc2hvdygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLiRvbignbG9hZGVkJywgZnVuY3Rpb24oXywgdXNlcikge1xyXG4gICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoXCIjbG9hZGluZy1pY29uXCIpLmZhZGVPdXQoXCJzbG93XCIpO1xyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25PdXQoKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIFNpZ24tb3V0IHN1Y2Nlc3NmdWwuXHJcbiAgICAgICAgJHNjb3BlLmxvZ2dlZEluID0gZmFsc2U7XHJcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdsb2dvdXQnKTtcclxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAvLyBBbiBlcnJvciBoYXBwZW5lZC5cclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5mb3JtYXREYXRlID0gZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgICB2YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddO1xyXG4gICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICAgIHJldHVybiBkYXRlLmdldERhdGUoKSArIFwiLVwiICsgbW9udGhzW2RhdGUuZ2V0TW9udGgoKV0gKyBcIi1cIiArIGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgIH07XHJcblxyXG4gICAgU3RyaW5nLnByb3RvdHlwZS5jYXBpdGFsaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5zbGljZSgxKTtcclxuICAgIH07XHJcblxyXG4gIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignQXN0ZXJvaWRzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEdhbWVTdmMpIHtcclxuXHJcbiAgJHNjb3BlLmFubm91bmNlID0gZmFsc2U7XHJcbiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhc3Rlcm9pZHMtcGFnZScpO1xyXG4gIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICBjdHguZm9udCA9IFwiMzBweCBDb21pYyBTYW5zIE1TXCI7XHJcbiAgY3R4LmZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgY3R4LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgdmFyIHNob3RzID0ge307XHJcbiAgdmFyIGFzdGVyb2lkcyA9IHt9O1xyXG4gIHZhciBwb3dlcnVwcyA9IHt9O1xyXG4gIHZhciBleHBsb3Npb25zID0ge307XHJcbiAgdmFyIG1hcCA9IHt9O1xyXG4gIHZhciBzcGFjZXBpY3MgPSAxMDtcclxuICB2YXIgc3BhY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzcGFjZXBpY3MpO1xyXG4gIHZhciBwb3dlcnVwVHlwZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdzcGVlZCcsXHJcbiAgICAgIGFubm91bmNlbWVudDogJ01heCBTcGVlZCDih6cnLFxyXG4gICAgICBjeWNsZToge1xyXG4gICAgICAgIHJvd3M6IDEsXHJcbiAgICAgICAgY29sdW1uczogNCxcclxuICAgICAgICBzaXplOiBbMTQsIDM1XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgc3BhY2VzaGlwLm1heFNwZWVkICs9IDEwMDtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogJ2Nvb2xkb3duJyxcclxuICAgICAgYW5ub3VuY2VtZW50OiAnQ29vbGRvd24g4oepJyxcclxuICAgICAgY3ljbGU6IHtcclxuICAgICAgICByb3dzOiAxLFxyXG4gICAgICAgIGNvbHVtbnM6IDMsXHJcbiAgICAgICAgc2l6ZTogWzE3LCAxN10sXHJcbiAgICAgICAgaTogMCxcclxuICAgICAgICBkaXJlY3Rpb246IHRydWVcclxuICAgICAgfSxcclxuICAgICAgaW1nOiBuZXcgSW1hZ2UoKSxcclxuICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKHNwYWNlc2hpcCkge1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuY29vbGRvd24gPiAwKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAuY29vbGRvd25UaW1lIC09IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAncmFuZ2UnLFxyXG4gICAgICBhbm5vdW5jZW1lbnQ6ICdGaXJpbmcgUmFuZ2Ug4oenJyxcclxuICAgICAgY3ljbGU6IHtcclxuICAgICAgICByb3dzOiA0LFxyXG4gICAgICAgIGNvbHVtbnM6IDEsXHJcbiAgICAgICAgc2l6ZTogWzMwLCA4XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgc3BhY2VzaGlwLnJhbmdlICs9IDU7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdzaGllbGQnLFxyXG4gICAgICBhbm5vdW5jZW1lbnQ6ICdTaGllbGQnLFxyXG4gICAgICBjeWNsZToge1xyXG4gICAgICAgIHJvd3M6IDUsXHJcbiAgICAgICAgY29sdW1uczogMSxcclxuICAgICAgICBzaXplOiBbMTksIDE5XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgc3BhY2VzaGlwLnNoaWVsZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdudWtlJyxcclxuICAgICAgYW5ub3VuY2VtZW50OiAnTnVrZScsXHJcbiAgICAgIGN5Y2xlOiB7XHJcbiAgICAgICAgcm93czogMSxcclxuICAgICAgICBjb2x1bW5zOiA4LFxyXG4gICAgICAgIHNpemU6IFsxNSwgMTVdLFxyXG4gICAgICAgIGk6IDAsXHJcbiAgICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZzogbmV3IEltYWdlKCksXHJcbiAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbihzcGFjZXNoaXApIHtcclxuICAgICAgICBmb3IgKHZhciBpIGluIGFzdGVyb2lkcykge1xyXG4gICAgICAgICAgYXN0ZXJvaWRzW2ldLmV4cGxvZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3Bhd25Bc3Rlcm9pZHMoNSk7XHJcbiAgICAgIH1cclxuICAgIH0sLypcclxuICAgICdzaWRlX2Nhbm5vbnMnLFxyXG4gICAgJ2xhc2VyJyxcclxuICAgICdzaGllbGQnLFxyXG4gICAgJ2xpZmUnLFxyXG4gICAgJ21pc3NpbGVzJyxcclxuICAgICdudWtlJ1xyXG4gICAgKi9cclxuICBdO1xyXG4gIHBvd2VydXBUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHBvd2VydXAsIGksIGFycmF5KSB7XHJcbiAgICBhcnJheVtpXS5pbWcuc3JjID0gJ2FzdGVyb2lkcy8nICsgcG93ZXJ1cC5uYW1lICsgJy5wbmcnO1xyXG4gIH0pO1xyXG5cclxuICB2YXIgZXhwbG9zaW9uSW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICBleHBsb3Npb25JbWFnZS5zcmMgPSAnYXN0ZXJvaWRzL2V4cGxvc2lvbi5wbmcnO1xyXG5cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgbWFwW2Uua2V5Q29kZSB8fCBlLndoaWNoXSA9IHRydWU7XHJcbiAgfSx0cnVlKTtcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgIG1hcFtlLmtleUNvZGUgfHwgZS53aGljaF0gPSBmYWxzZTtcclxuICB9LHRydWUpO1xyXG5cclxuICAkc2NvcGUuaGlnaHNjb3JlID0gMDtcclxuXHJcbiAgZnVuY3Rpb24gZXZhbHVhdGVLZXlzKCkge1xyXG4gICAgaWYgKCRzY29wZS5wbGF5aW5nKSB7XHJcbiAgICAgIGlmIChtYXBbMzJdKSB7XHJcbiAgICAgICAgLy9TcGFjZVxyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuY29vbGRvd24gPT09IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5zaG9vdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobWFwWzM3XSkge1xyXG4gICAgICAgIC8vTGVmdCBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAucm90YXRpb24gPT09IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5yb3RhdGlvbiA9IDM2MDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnJvdGF0aW9uIC09IDM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXBbMzldKSB7XHJcbiAgICAgICAgLy9SaWdodCBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAucm90YXRpb24gPT09IDM2MCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnJvdGF0aW9uID0gMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnJvdGF0aW9uICs9IDM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXBbMzhdKSB7XHJcbiAgICAgICAgLy9VcCBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuc3BlZWQgPD0gc3BhY2VzaGlwLm1heFNwZWVkKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAuc3BlZWQgKz0gNTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5zcGVlZCA+IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5zcGVlZC0tO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobWFwWzQwXSkge1xyXG4gICAgICAgIC8vRG93biBBcnJvd1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuc3BlZWQgPiAwKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAuc3BlZWQgLT0gMjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChtYXBbMzJdKSB7XHJcbiAgICAgICAgc3RhcnQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gU3BhY2VzaGlwKCkge1xyXG4gICAgdGhpcy53aWR0aCA9IDUwO1xyXG4gICAgdGhpcy5oZWlnaHQgPSA1MDtcclxuICAgIHRoaXMuc2hpZWxkID0gZmFsc2U7XHJcbiAgICB0aGlzLnJhbmdlID0gODA7XHJcbiAgICB0aGlzLmNhbm5vbiA9IHtcclxuICAgICAgeDogdGhpcy53aWR0aCAvIDIgLSA0LjUsXHJcbiAgICAgIHk6IHRoaXMuaGVpZ2h0IC8gMiAtIHRoaXMuaGVpZ2h0ICogMC4wNzgxMjVcclxuICAgIH07XHJcbiAgICB0aGlzLmNvb2xkb3duID0gMDtcclxuICAgIHRoaXMuY29vbGRvd25UaW1lID0gMjA7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gW1xyXG4gICAgICBjYW52YXMud2lkdGggLyAyIC0gdGhpcy53aWR0aCAvIDIsXHJcbiAgICAgIGNhbnZhcy5oZWlnaHQgLyAyIC0gdGhpcy5oZWlnaHQgLyAyXHJcbiAgICBdO1xyXG4gICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHRoaXMuaW1nLnNyYyA9ICdhc3Rlcm9pZHMvc3BhY2VzaGlwLnBuZyc7XHJcbiAgICB0aGlzLnNwZWVkID0gMDtcclxuICAgIHRoaXMubWF4U3BlZWQgPSAxMDAwO1xyXG4gICAgdGhpcy5hbmdsZSA9IDA7XHJcbiAgICB0aGlzLnJvdGF0aW9uID0gMDtcclxuXHJcbiAgICB0aGlzLnNob290ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuY29vbGRvd24gPSB0aGlzLmNvb2xkb3duVGltZTtcclxuICAgICAgdmFyIGlkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcclxuICAgICAgc2hvdHNbaWRdID0gbmV3IFNob3QoaWQsIHRoaXMpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMuc2hpZWxkKSB7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5hcmModGhpcy5wb3NpdGlvblswXSArIHRoaXMud2lkdGggLyAyLCB0aGlzLnBvc2l0aW9uWzFdICsgdGhpcy5oZWlnaHQgLyAyLCAzMCwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcInJnYigzNSwgMjM3LCA4NiwgMC41KVwiO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwicmdiKDY2LCAxNjgsIDM2LCAwLjgpXCI7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDU7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgIH1cclxuICAgICAgZm9yICh2YXIgaSBpbiBhc3Rlcm9pZHMpIHtcclxuICAgICAgICB2YXIgYXN0ZXJvaWQgPSBhc3Rlcm9pZHNbaV07XHJcbiAgICAgICAgaWYgKGhpdChhc3Rlcm9pZCwgdGhpcykpIHtcclxuICAgICAgICAgIGlmICh0aGlzLnNoaWVsZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNoaWVsZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhc3Rlcm9pZC5leHBsb2RlKCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2FtZU92ZXIoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5hbmdsZSA9IHRoaXMucm90YXRpb247XHJcbiAgICAgIGlmICh0aGlzLmNvb2xkb3duID4gMCkge1xyXG4gICAgICAgIHRoaXMuY29vbGRvd24tLTtcclxuICAgICAgfVxyXG4gICAgICBtb3ZlKHRoaXMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIFNob3QoaWQsIHNwYWNlc2hpcCkge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFtcclxuICAgICAgc3BhY2VzaGlwLnBvc2l0aW9uWzBdICsgc3BhY2VzaGlwLmNhbm5vbi54ICsgc3BhY2VzaGlwLmNhbm5vbi54ICogTWF0aC5jb3MoKHNwYWNlc2hpcC5yb3RhdGlvbiAtIDkwKSAqIE1hdGguUEkgLyAxODApLFxyXG4gICAgICBzcGFjZXNoaXAucG9zaXRpb25bMV0gKyBzcGFjZXNoaXAuY2Fubm9uLnkgKyBzcGFjZXNoaXAuY2Fubm9uLnkgKiBNYXRoLnNpbigoc3BhY2VzaGlwLnJvdGF0aW9uIC0gOTApICogTWF0aC5QSSAvIDE4MClcclxuICAgIF07XHJcbiAgICB0aGlzLndpZHRoID0gOTtcclxuICAgIHRoaXMuaGVpZ2h0ID0gMTU7XHJcbiAgICB0aGlzLmFuZ2xlID0gc3BhY2VzaGlwLmFuZ2xlO1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IHNwYWNlc2hpcC5yb3RhdGlvbjtcclxuICAgIHRoaXMuc3BlZWQgPSBzcGFjZXNoaXAuc3BlZWQgKyA1MDA7XHJcbiAgICB0aGlzLmxpZmVzcGFuID0gc3BhY2VzaGlwLnJhbmdlO1xyXG4gICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHRoaXMuaW1nLnNyYyA9ICdhc3Rlcm9pZHMvc2hvdC5wbmcnO1xyXG5cclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLmxpZmVzcGFuLS07XHJcbiAgICAgIG1vdmUodGhpcyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gQXN0ZXJvaWQoaWQpIHtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMud2lkdGggPSBNYXRoLnJhbmRvbSgpICogNTAgKyAyMDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy53aWR0aDtcclxuICAgIHRoaXMucG9zaXRpb24gPSBnZXRFbnRyeVBvc2l0aW9uKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIHRoaXMuYW5nbGUgPSBNYXRoLnJhbmRvbSgpICogMzYwO1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IE1hdGgucmFuZG9tKCkgKiAzNjA7XHJcbiAgICB0aGlzLnJvdGF0aW9uU3BlZWQgPSBNYXRoLnJhbmRvbSgpICogNiAtIDM7XHJcbiAgICB0aGlzLnNwZWVkID0gTWF0aC5yYW5kb20oKSAqIDMwMCArIDI7XHJcbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgdGhpcy5pbWcuc3JjID0gJ2FzdGVyb2lkcy9hc3Rlcm9pZCcgKyAoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNikgKyAxKSArICcucG5nJztcclxuXHJcbiAgICB0aGlzLmV4cGxvZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgZXhwbG9zaW9uc1t0aGlzLmlkXSA9IG5ldyBFeHBsb3Npb24odGhpcyk7XHJcbiAgICAgIHJldHVybiBkZWxldGUgYXN0ZXJvaWRzW3RoaXMuaWRdO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5yb3RhdGlvbiArPSB0aGlzLnJvdGF0aW9uU3BlZWQ7XHJcbiAgICAgIGlmICh0aGlzLnJvdGF0aW9uID4gMzYwKSB7XHJcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IHRoaXMucm90YXRpb24gLSAzNjA7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5yb3RhdGlvbiA8IDApIHtcclxuICAgICAgICB0aGlzLnJvdGF0aW9uID0gMzYwICsgdGhpcy5yb3RhdGlvbjtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKHZhciBpIGluIHNob3RzKSB7XHJcbiAgICAgICAgdmFyIHNob3QgPSBzaG90c1tpXTtcclxuICAgICAgICBpZiAoaGl0KHNob3QsIHRoaXMpKSB7XHJcbiAgICAgICAgICB0aGlzLmV4cGxvZGUoKTtcclxuICAgICAgICAgIHZhciBwb2ludHMgPSBNYXRoLmZsb29yKChzaG90LnNwZWVkIC0gNTAwKSAvIDEwICsgNzAgLSB0aGlzLndpZHRoKTtcclxuICAgICAgICAgIGlmIChNYXRoLmZsb29yKChwb2ludHMgKyAkc2NvcGUuc2NvcmUpIC8gMTAwKSA+IE1hdGguZmxvb3IoJHNjb3BlLnNjb3JlIC8gMTAwKSkge1xyXG4gICAgICAgICAgICBzcGF3blBvd2VydXAoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICRzY29wZS5zY29yZSArPSBwb2ludHM7XHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICBkZWxldGUgc2hvdHNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIG1vdmUodGhpcyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gRXhwbG9zaW9uKG9iamVjdCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFtvYmplY3QucG9zaXRpb25bMF0sIG9iamVjdC5wb3NpdGlvblsxXV07XHJcbiAgICB0aGlzLndpZHRoID0gb2JqZWN0LndpZHRoO1xyXG4gICAgdGhpcy5oZWlnaHQgPSBvYmplY3QuaGVpZ2h0O1xyXG4gICAgdGhpcy5zcGVlZCA9IDA7XHJcbiAgICB0aGlzLmFuZ2xlID0gTWF0aC5yYW5kb20oKSAqIDM2MDtcclxuICAgIHRoaXMuY3ljbGUgPSB7XHJcbiAgICAgIHJvd3M6IDYsXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHNpemU6IFsyNTYsIDI1Nl0sXHJcbiAgICAgIGk6IDAsXHJcbiAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgfTtcclxuICAgIHRoaXMubGlmZXNwYW4gPSA0NztcclxuICAgIHRoaXMuaW1nID0gZXhwbG9zaW9uSW1hZ2U7XHJcblxyXG4gICAgdGhpcy5tb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMubGlmZXNwYW4tLTtcclxuICAgICAgbW92ZSh0aGlzKTtcclxuICAgICAgaWYgKHRoaXMuY3ljbGUuZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5jeWNsZS5pKys7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5jeWNsZS5pLS07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBQb3dlcnVwKGlkKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnBvd2VydXAgPSBwb3dlcnVwVHlwZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG93ZXJ1cFR5cGVzLmxlbmd0aCldO1xyXG4gICAgdGhpcy5jeWNsZSA9IHRoaXMucG93ZXJ1cC5jeWNsZTtcclxuICAgIHRoaXMubGlmZXNwYW4gPSAxMDAwO1xyXG4gICAgaWYgKHRoaXMuY3ljbGUuc2l6ZVsxXSA+IHRoaXMuY3ljbGUuc2l6ZVswXSkge1xyXG4gICAgICB0aGlzLmhlaWdodCA9IDQwO1xyXG4gICAgICB0aGlzLndpZHRoID0gTWF0aC5yb3VuZCh0aGlzLmhlaWdodCAvIHRoaXMuY3ljbGUuc2l6ZVsxXSAqIHRoaXMuY3ljbGUuc2l6ZVswXSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLndpZHRoID0gNDA7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5yb3VuZCh0aGlzLndpZHRoIC8gdGhpcy5jeWNsZS5zaXplWzBdICogdGhpcy5jeWNsZS5zaXplWzFdKTtcclxuICAgIH1cclxuICAgIHRoaXMucG9zaXRpb24gPSBnZXRFbnRyeVBvc2l0aW9uKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIHRoaXMuaW1nID0gdGhpcy5wb3dlcnVwLmltZztcclxuICAgIHRoaXMuYW5nbGUgPSBNYXRoLnJhbmRvbSgpICogMzYwO1xyXG4gICAgdGhpcy5zcGVlZCA9IE1hdGgucmFuZG9tKCkgKiAxNTAgKyA1MDtcclxuICAgIHZhciBkZWxheSA9IDU7XHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMubGlmZXNwYW4gPD0gMCkge1xyXG4gICAgICAgIHJldHVybiBkZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF07XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGhpdChzcGFjZXNoaXAsIHRoaXMpKSB7XHJcbiAgICAgICAgJHNjb3BlLmFubm91bmNlID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuYW5ub3VuY2VtZW50ID0gdGhpcy5wb3dlcnVwLmFubm91bmNlbWVudDtcclxuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICRzY29wZS5hbm5vdW5jZSA9IGZhbHNlO1xyXG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIHRoaXMucG93ZXJ1cC5hY3RpdmF0ZShzcGFjZXNoaXApO1xyXG4gICAgICAgIHJldHVybiBkZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF07XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5saWZlc3Bhbi0tO1xyXG4gICAgICBtb3ZlKHRoaXMpO1xyXG4gICAgICBpZiAoZGVsYXkgPD0gMCkge1xyXG4gICAgICAgIGlmICh0aGlzLmN5Y2xlLmRpcmVjdGlvbikge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZS5pKys7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuY3ljbGUuaS0tO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxheSA9IDU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGVsYXktLTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1vdmUob2JqZWN0KSB7XHJcbiAgICAgb2JqZWN0LnBvc2l0aW9uWzBdICs9IG9iamVjdC5zcGVlZCAvIDEwMCAqIE1hdGguY29zKChvYmplY3QuYW5nbGUgLSA5MCkgKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICBvYmplY3QucG9zaXRpb25bMV0gKz0gb2JqZWN0LnNwZWVkIC8gMTAwICogTWF0aC5zaW4oKG9iamVjdC5hbmdsZSAtIDkwKSAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgIGlmIChvYmplY3QucG9zaXRpb25bMF0gPiBjYW52YXMud2lkdGgpIHtcclxuICAgICAgIG9iamVjdC5wb3NpdGlvblswXSA9IC1vYmplY3Qud2lkdGg7XHJcbiAgICAgfSBlbHNlIGlmIChvYmplY3QucG9zaXRpb25bMF0gPCAtb2JqZWN0LndpZHRoKSB7XHJcbiAgICAgICBvYmplY3QucG9zaXRpb25bMF0gPSBjYW52YXMud2lkdGg7XHJcbiAgICAgfVxyXG4gICAgIGlmIChvYmplY3QucG9zaXRpb25bMV0gPiBjYW52YXMuaGVpZ2h0KSB7XHJcbiAgICAgICBvYmplY3QucG9zaXRpb25bMV0gPSAtb2JqZWN0LmhlaWdodDtcclxuICAgICB9IGVsc2UgaWYgKG9iamVjdC5wb3NpdGlvblsxXSA8IC1vYmplY3QuaGVpZ2h0KSB7XHJcbiAgICAgICBvYmplY3QucG9zaXRpb25bMV0gPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgIH1cclxuICAgICBjdHguc2F2ZSgpO1xyXG4gICAgIGN0eC50cmFuc2xhdGUob2JqZWN0LnBvc2l0aW9uWzBdLCBvYmplY3QucG9zaXRpb25bMV0pO1xyXG4gICAgIGN0eC50cmFuc2xhdGUob2JqZWN0LndpZHRoIC8gMiwgb2JqZWN0LmhlaWdodCAvIDIpO1xyXG4gICAgIGN0eC5yb3RhdGUob2JqZWN0LnJvdGF0aW9uICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgaWYgKG9iamVjdC5jeWNsZSkge1xyXG4gICAgICAgdmFyIGNvbHVtbiA9IG9iamVjdC5jeWNsZS5pICUgb2JqZWN0LmN5Y2xlLmNvbHVtbnM7XHJcbiAgICAgICB2YXIgcm93ID0gTWF0aC5mbG9vcihvYmplY3QuY3ljbGUuaSAvIG9iamVjdC5jeWNsZS5jb2x1bW5zKTtcclxuICAgICAgIGN0eC5kcmF3SW1hZ2Uob2JqZWN0LmltZywgb2JqZWN0LmN5Y2xlLnNpemVbMF0gKiBjb2x1bW4sIG9iamVjdC5jeWNsZS5zaXplWzFdICogcm93LCBvYmplY3QuY3ljbGUuc2l6ZVswXSwgb2JqZWN0LmN5Y2xlLnNpemVbMV0sIC1vYmplY3Qud2lkdGggLyAyLCAtb2JqZWN0LmhlaWdodCAvIDIsIG9iamVjdC53aWR0aCwgb2JqZWN0LmhlaWdodCk7XHJcblxyXG4gICAgICAgaWYgKG9iamVjdC5jeWNsZS5pIDw9IDApIHtcclxuICAgICAgICAgb2JqZWN0LmN5Y2xlLmkgPSAwO1xyXG4gICAgICAgICBvYmplY3QuY3ljbGUuZGlyZWN0aW9uID0gdHJ1ZTtcclxuICAgICAgIH0gZWxzZSBpZiAob2JqZWN0LmN5Y2xlLmkgPj0gb2JqZWN0LmN5Y2xlLmNvbHVtbnMgKiBvYmplY3QuY3ljbGUucm93cykge1xyXG4gICAgICAgICBvYmplY3QuY3ljbGUuaSA9IG9iamVjdC5jeWNsZS5jb2x1bW5zICogb2JqZWN0LmN5Y2xlLnJvd3MgLSAxO1xyXG4gICAgICAgICBvYmplY3QuY3ljbGUuZGlyZWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICB9XHJcbiAgICAgfSBlbHNlIHtcclxuICAgICAgIGN0eC5kcmF3SW1hZ2Uob2JqZWN0LmltZywgLW9iamVjdC53aWR0aCAvIDIsIC1vYmplY3QuaGVpZ2h0IC8gMiwgb2JqZWN0LndpZHRoLCBvYmplY3QuaGVpZ2h0KTtcclxuICAgICB9XHJcbiAgICAgY3R4LnJlc3RvcmUoKTtcclxuICB9XHJcblxyXG4gIHZhciBzcGFjZXNoaXA7XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXJ0KCkge1xyXG4gICAgJHNjb3BlLnBsYXlpbmcgPSB0cnVlO1xyXG4gICAgJHNjb3BlLnNjb3JlID0gMDtcclxuICAgIHNwYWNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc3BhY2VwaWNzKTtcclxuICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgIHNwYWNlc2hpcCA9IG5ldyBTcGFjZXNoaXAoKTtcclxuICAgICRzY29wZS5zY29yZSA9IDA7XHJcbiAgICBzcGF3bkFzdGVyb2lkcyg1KTtcclxuICAgIGF1dG9TcGF3bigpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0RW50cnlQb3NpdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICB2YXIgZ3JpZFggPSBNYXRoLnJhbmRvbSgpICogMjtcclxuICAgIHZhciBncmlkWSA9IE1hdGgucmFuZG9tKCkgKiAyO1xyXG4gICAgdmFyIHgsIHkgPSAwO1xyXG4gICAgaWYgKGdyaWRYID49IDEpIHtcclxuICAgICAgeCA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMud2lkdGg7XHJcbiAgICAgIGlmICh5ID49IDEpIHtcclxuICAgICAgICB5ID0gMCAtIGhlaWdodDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB5ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgeSA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICBpZiAoZ3JpZFkgPj0gMSkge1xyXG4gICAgICAgIHggPSAwIC0gd2lkdGg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeCA9IGNhbnZhcy53aWR0aDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFt4LCB5XTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGhpdChvYmplY3QxLCBvYmplY3QyKSB7XHJcbiAgICByZXR1cm4gKG9iamVjdDEucG9zaXRpb25bMF0gPCBvYmplY3QyLnBvc2l0aW9uWzBdICsgb2JqZWN0Mi53aWR0aCkgJiZcclxuICAgICAgICAgICAob2JqZWN0Mi5wb3NpdGlvblswXSA8IG9iamVjdDEucG9zaXRpb25bMF0gKyBvYmplY3QxLndpZHRoKSAmJlxyXG4gICAgICAgICAgIChvYmplY3QxLnBvc2l0aW9uWzFdIDwgb2JqZWN0Mi5wb3NpdGlvblsxXSArIG9iamVjdDIuaGVpZ2h0KSAmJlxyXG4gICAgICAgICAgIChvYmplY3QyLnBvc2l0aW9uWzFdIDwgb2JqZWN0MS5wb3NpdGlvblsxXSArIG9iamVjdDEuaGVpZ2h0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGF1dG9TcGF3bigpIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhhc3Rlcm9pZHMpLmxlbmd0aCA8IDIwMCkge1xyXG4gICAgICB2YXIgaWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDApO1xyXG4gICAgICBhc3Rlcm9pZHNbaWRdID0gbmV3IEFzdGVyb2lkKGlkKTtcclxuICAgIH1cclxuICAgIGlmICgkc2NvcGUucGxheWluZykge1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGF1dG9TcGF3bigpO1xyXG4gICAgICB9LCBzcGF3bkludGVydmFsKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3Bhd25JbnRlcnZhbCgpIHtcclxuICAgIGlmICgkc2NvcGUuc2NvcmUgPCAxMDAwKSB7XHJcbiAgICAgIHJldHVybiAxMDAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCAyMDAwKSB7XHJcbiAgICAgIHJldHVybiA5MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDMwMDApIHtcclxuICAgICAgcmV0dXJuIDgwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgNDAwMCkge1xyXG4gICAgICByZXR1cm4gNzAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCA1MDAwKSB7XHJcbiAgICAgIHJldHVybiA2MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDYwMDApIHtcclxuICAgICAgcmV0dXJuIDUwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgNzAwMCkge1xyXG4gICAgICByZXR1cm4gNDAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCA4MDAwKSB7XHJcbiAgICAgIHJldHVybiAzMDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gMjAwO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3Bhd25Bc3Rlcm9pZHMoYW1vdW50KSB7XHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICBkbyB7XHJcbiAgICAgIHZhciBpZCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XHJcbiAgICAgIGFzdGVyb2lkc1tpZF0gPSBuZXcgQXN0ZXJvaWQoaWQpO1xyXG4gICAgfSB3aGlsZSAoaSsrIDw9IGFtb3VudCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzcGF3blBvd2VydXAoKSB7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMocG93ZXJ1cHMpLmxlbmd0aCA8IDMpIHtcclxuICAgICAgdmFyIGlkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcclxuICAgICAgcG93ZXJ1cHNbaWRdID0gbmV3IFBvd2VydXAoaWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2FtZU92ZXIoKSB7XHJcbiAgICAkc2NvcGUucGxheWluZyA9IGZhbHNlO1xyXG4gICAgZm9yICh2YXIgaSBpbiBhc3Rlcm9pZHMpIHtcclxuICAgICAgYXN0ZXJvaWRzW2ldLmV4cGxvZGUoKTtcclxuICAgIH1cclxuICAgIHNob3RzID0ge307XHJcbiAgICBpZiAoJHNjb3BlLmxvZ2dlZEluKSB7XHJcbiAgICAgIGlmICgkc2NvcGUuY3VycmVudFVzZXIuaGlnaHNjb3JlLmFzdGVyb2lkcyA8ICRzY29wZS5zY29yZSkge1xyXG4gICAgICAgICRzY29wZS5jdXJyZW50VXNlci5oaWdoc2NvcmUuYXN0ZXJvaWRzID0gJHNjb3BlLnNjb3JlO1xyXG4gICAgICAgIEdhbWVTdmMuc2V0SGlnaHNjb3JlKCdhc3Rlcm9pZHMnLCAkc2NvcGUuY3VycmVudFVzZXIuX2lkLCAkc2NvcGUuc2NvcmUpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoJHNjb3BlLmhpZ2hzY29yZSA8ICRzY29wZS5zY29yZSkge1xyXG4gICAgICAgICRzY29wZS5oaWdoc2NvcmUgPSAkc2NvcGUuc2NvcmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG5cdC8vIFN0YXJ0IGxpc3RlbmluZyB0byByZXNpemUgZXZlbnRzIGFuZFxyXG5cdC8vIGRyYXcgY2FudmFzLlxyXG5cclxuXHRmdW5jdGlvbiBpbml0aWFsaXplKCkge1xyXG5cdFx0Ly8gUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXIgdG9cclxuXHRcdC8vIGNhbGwgdGhlIHJlc2l6ZUNhbnZhcygpIGZ1bmN0aW9uIGVhY2ggdGltZVxyXG5cdFx0Ly8gdGhlIHdpbmRvdyBpcyByZXNpemVkLlxyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUNhbnZhcywgZmFsc2UpO1xyXG5cclxuXHJcblx0XHQvLyBEcmF3IGNhbnZhcyBib3JkZXIgZm9yIHRoZSBmaXJzdCB0aW1lLlxyXG5cdFx0cmVzaXplQ2FudmFzKCk7XHJcblx0fVxyXG5cdC8vIFJ1bnMgZWFjaCB0aW1lIHRoZSBET00gd2luZG93IHJlc2l6ZSBldmVudCBmaXJlcy5cclxuXHQvLyBSZXNldHMgdGhlIGNhbnZhcyBkaW1lbnNpb25zIHRvIG1hdGNoIHdpbmRvdyxcclxuXHQvLyB0aGVuIGRyYXdzIHRoZSBuZXcgYm9yZGVycyBhY2NvcmRpbmdseS5cclxuXHRmdW5jdGlvbiByZXNpemVDYW52YXMoKSB7XHJcbiAgICBjb25zb2xlLmxvZyh3aW5kb3cuaW5uZXJXaWR0aCk7XHJcblx0XHRjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHRcdGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAoY2FudmFzLndpZHRoIDw9IDc2OCA/IDUwIDogMTA1KTtcclxuXHR9XHJcblxyXG5cdGluaXRpYWxpemUoKTtcclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XHJcblxyXG4gIHZhciB0YWxseSA9IDA7XHJcbiAgdmFyIGRpcmVjdGlvbiA9IHRydWU7XHJcblxyXG4gIGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICBmb3IgKHZhciBpIGluIHNob3RzKSB7XHJcbiAgICAgIGlmIChzaG90c1tpXS5saWZlc3BhbiA8PSAwKSB7XHJcbiAgICAgICAgZGVsZXRlIHNob3RzW2ldO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNob3RzW2ldLm1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChpIGluIGFzdGVyb2lkcykge1xyXG4gICAgICBhc3Rlcm9pZHNbaV0ubW92ZSgpO1xyXG4gICAgfVxyXG4gICAgZm9yIChpIGluIHBvd2VydXBzKSB7XHJcbiAgICAgIHBvd2VydXBzW2ldLm1vdmUoKTtcclxuICAgIH1cclxuICAgIGZvciAoaSBpbiBleHBsb3Npb25zKSB7XHJcbiAgICAgIGlmIChleHBsb3Npb25zW2ldLmxpZmVzcGFuIDw9IDApIHtcclxuICAgICAgICBkZWxldGUgZXhwbG9zaW9uc1tpXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBleHBsb3Npb25zW2ldLm1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXZhbHVhdGVLZXlzKCk7XHJcbiAgICBpZiAoJHNjb3BlLnBsYXlpbmcpIHtcclxuICAgICAgc3BhY2VzaGlwLm1vdmUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBncmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCBjYW52YXMud2lkdGgsIDApO1xyXG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoJzAnLCAncmdiKCcgKyBNYXRoLmZsb29yKDI1NiAtIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcpJyk7XHJcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMC4yNScsICdyZ2IoJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCcwLjUnLCAncmdiKCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDI1NiAtIDI1NiAqIHRhbGx5IC8gMTAwKSArICcpJyk7XHJcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMC43NScsICdyZ2IoJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCcxLjAnLCAncmdiKCcgKyBNYXRoLmZsb29yKDI1NiAtIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcpJyk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBncmFkaWVudDtcclxuICAgICAgY3R4LmZvbnQ9JzYwcHggTW9ub3Rvbic7XHJcbiAgICAgIGN0eC5maWxsVGV4dCgnQXN0ZXJvaWRzJywgY2FudmFzLndpZHRoIC8gMiAtIGN0eC5tZWFzdXJlVGV4dCgnQXN0ZXJvaWRzJykud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgIGN0eC5mb250PScyMHB4IEFsZHJpY2gnO1xyXG4gICAgICBjdHguZmlsbFRleHQoJ1ByZXNzIHNwYWNlIHRvIHN0YXJ0JywgY2FudmFzLndpZHRoIC8gMiAtIGN0eC5tZWFzdXJlVGV4dCgnUHJlc3Mgc3BhY2UgdG8gc3RhcnQnKS53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyICsgMjApO1xyXG4gICAgICBjdHguZmlsbFRleHQoJ0Rlc2lnbmVkIGFuZCBkZXZlbG9wZWQgYnkgTGF1cmVudCBEZWJhY2tlcicsIGNhbnZhcy53aWR0aCAvIDIgLSBjdHgubWVhc3VyZVRleHQoJ0Rlc2lnbmVkIGFuZCBkZXZlbG9wZWQgYnkgTGF1cmVudCBEZWJhY2tlcicpLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAtIDMwKTtcclxuICAgIH1cclxuICAgIHRhbGx5ICs9IGRpcmVjdGlvbiA/IDEgOiAtMTtcclxuICAgIGlmICh0YWxseSA+IDEwMCkge1xyXG4gICAgICB0YWxseSA9IDEwMDtcclxuICAgICAgZGlyZWN0aW9uID0gZmFsc2U7XHJcbiAgICB9IGVsc2UgaWYgKHRhbGx5IDwgMCkge1xyXG4gICAgICB0YWxseSA9IDA7XHJcbiAgICAgIGRpcmVjdGlvbiA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XHJcbiAgfVxyXG5cclxuICAkc2NvcGUuc3BhY2UgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGJhY2tncm91bmRJbWFnZTogJ3VybChcImFzdGVyb2lkcy9zcGFjZScgKyBzcGFjZSArICcuanBnXCIpJ1xyXG4gICAgfTtcclxuICB9O1xyXG5cclxuXHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdCdWJibGVzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuXHJcbiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWJibGVzLXBhZ2UnKTtcclxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgdmFyIGJ1YmJsZXMgPSBbXTtcclxuICB2YXIgY29sb3JzID0gWycjZmZjMzAwJywnI2ZmNTczMycsJyNjNzAwMzknLCcjOTAwYzNlJywnIzU3MTg0NSddO1xyXG5cclxuICBmdW5jdGlvbiBCdWJibGUoKSB7XHJcbiAgICB0aGlzLmxpZmVzcGFuID0gMDtcclxuICAgIHRoaXMucmFkaXVzID0gMTtcclxuICAgIHRoaXMuZXhwYW5kaW5nID0gdHJ1ZTtcclxuICAgIHRoaXMuc3BlZWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAzKTtcclxuICAgIHRoaXMuY2lyY3VtZmVyZW5jZSA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDUwKSArIDU7XHJcbiAgICB0aGlzLm1heFJhZGl1cyA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDIwMCkgKyAyMDtcclxuICAgIHRoaXMueCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aCk7XHJcbiAgICB0aGlzLnkgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0KTtcclxuICAgIHRoaXMudnggPSAoTWF0aC5yYW5kb20oKSA+PSAwLjUgPyAxIDogLTEpO1xyXG4gICAgdGhpcy52eSA9IChNYXRoLnJhbmRvbSgpID49IDAuNSA/IDEgOiAtMSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkcmF3KCkge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgYnViYmxlcy5mb3JFYWNoKGZ1bmN0aW9uKGJ1YmJsZSkge1xyXG4gICAgICB2YXIgY29sb3IgPSBjb2xvcnNbTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoICogYnViYmxlLnJhZGl1cyAvIGJ1YmJsZS5tYXhSYWRpdXMpXTtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguYXJjKGJ1YmJsZS54LCBidWJibGUueSwgYnViYmxlLnJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gY29sb3JzW01hdGgucm91bmQoY29sb3JzLmxlbmd0aCAqIGJ1YmJsZS5yYWRpdXMgLyBidWJibGUubWF4UmFkaXVzKV07XHJcbiAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yc1tjb2xvcnMubGVuZ3RoIC0gTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoICogYnViYmxlLnJhZGl1cyAvIGJ1YmJsZS5tYXhSYWRpdXMpXTtcclxuICAgICAgY3R4LmxpbmVXaWR0aCA9IGJ1YmJsZS5jaXJjdW1mZXJlbmNlICogYnViYmxlLnJhZGl1cyAvIGJ1YmJsZS5tYXhSYWRpdXM7XHJcbiAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZmlsdGVyQnViYmxlcygpIHtcclxuICAgIGJ1YmJsZXMucHVzaChuZXcgQnViYmxlKCkpO1xyXG4gICAgYnViYmxlcyA9IGJ1YmJsZXMuZmlsdGVyKGZ1bmN0aW9uIChidWJibGUpIHtcclxuICAgICAgaWYgKGJ1YmJsZS5yYWRpdXMgPT09IGJ1YmJsZS5tYXhSYWRpdXMpIHtcclxuICAgICAgICBidWJibGUuZXhwYW5kaW5nID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgYnViYmxlLnggKz0gYnViYmxlLnZ4ICogYnViYmxlLnNwZWVkO1xyXG4gICAgICBidWJibGUueSArPSBidWJibGUudnkgKiBidWJibGUuc3BlZWQ7XHJcbiAgICAgIGJ1YmJsZS5yYWRpdXMgKz0gKGJ1YmJsZS5leHBhbmRpbmcgPyAxIDogLTEpO1xyXG4gICAgICByZXR1cm4gYnViYmxlLnJhZGl1cyA+IDA7XHJcbiAgICB9KTtcclxuICAgIGRyYXcoKTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmaWx0ZXJCdWJibGVzKTtcclxuICB9XHJcblxyXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShmaWx0ZXJCdWJibGVzKTtcclxuXHJcblxyXG5cdChmdW5jdGlvbigpIHtcclxuXHJcblx0XHQvLyBTdGFydCBsaXN0ZW5pbmcgdG8gcmVzaXplIGV2ZW50cyBhbmRcclxuXHRcdC8vIGRyYXcgY2FudmFzLlxyXG5cdFx0aW5pdGlhbGl6ZSgpO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcblx0XHRcdC8vIFJlZ2lzdGVyIGFuIGV2ZW50IGxpc3RlbmVyIHRvXHJcblx0XHRcdC8vIGNhbGwgdGhlIHJlc2l6ZUNhbnZhcygpIGZ1bmN0aW9uIGVhY2ggdGltZVxyXG5cdFx0XHQvLyB0aGUgd2luZG93IGlzIHJlc2l6ZWQuXHJcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVDYW52YXMsIGZhbHNlKTtcclxuXHJcblx0XHRcdC8vIERyYXcgY2FudmFzIGJvcmRlciBmb3IgdGhlIGZpcnN0IHRpbWUuXHJcblx0XHRcdHJlc2l6ZUNhbnZhcygpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gUnVucyBlYWNoIHRpbWUgdGhlIERPTSB3aW5kb3cgcmVzaXplIGV2ZW50IGZpcmVzLlxyXG5cdFx0Ly8gUmVzZXRzIHRoZSBjYW52YXMgZGltZW5zaW9ucyB0byBtYXRjaCB3aW5kb3csXHJcblx0XHQvLyB0aGVuIGRyYXdzIHRoZSBuZXcgYm9yZGVycyBhY2NvcmRpbmdseS5cclxuXHRcdGZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpIHtcclxuXHRcdFx0Y2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAoY2FudmFzLndpZHRoIDw9IDc2OCA/IDU1IDogMTExKTtcclxuXHRcdH1cclxuXHJcblx0fSkoKTtcclxuXHJcblxyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignQ29udGFjdEN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBFbWFpbFN2Yykge1xyXG5cclxuICAkc2NvcGUub3B0aW9ucyA9IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJTcGFtXCIsXHJcbiAgICAgIHRleHQ6IFwiSSBhbSBhIHNwYW0gYm90IGFuZCBhdXRvbWF0aWNhbGx5IGNoZWNrIHRoZSBmaXJzdCBvcHRpb24gSSBmaW5kIVwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIk9wcG9ydHVuaXRpeVwiLFxyXG4gICAgICB0ZXh0OiBcIllvdSBzZWVtIHRvIGhhdmUgdGhlIHNraWxscyBJIHNlZWssIEknZCBsaWtlIHRvIHRhbGsgYWJvdXQgc29tZSBvcHBvcnR1bml0aWVzLlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIlJlc3VtZVwiLFxyXG4gICAgICB0ZXh0OiBcIkkgZGlnIHRoZSByZXN1bWUsIGhvdyBkaWQgeW91IG1ha2UgaXQ/XCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiT3RoZXJcIixcclxuICAgICAgdGV4dDogXCJTdW10aW4gZWxzZSFcIlxyXG4gICAgfVxyXG5cclxuICBdO1xyXG5cclxuICAkc2NvcGUuY29udGFjdCA9IHtcclxuICAgIGVtYWlsOiBcIlwiLFxyXG4gICAgbmFtZTogXCJcIixcclxuICAgIHBob25lOiBcIlwiLFxyXG4gICAgYWJvdXQ6IFwiXCIsXHJcbiAgICBtZXNzYWdlOiBcIlwiXHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbmQgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5zZW5kaW5nID0gdHJ1ZTtcclxuICAgIGNvbnNvbGUubG9nKCdoZXJlJyk7XHJcbiAgICBFbWFpbFN2Yy5zZW5kKHtcclxuICAgICAgXCJlbWFpbFwiOiAkc2NvcGUuY29udGFjdC5lbWFpbCxcclxuICAgICAgXCJuYW1lXCI6ICRzY29wZS5jb250YWN0Lm5hbWUsXHJcbiAgICAgIFwicGhvbmVcIjogICRzY29wZS5jb250YWN0LnBob25lLFxyXG4gICAgICBcImFib3V0XCI6ICRzY29wZS5jb250YWN0LmFib3V0LFxyXG4gICAgICBcIm1lc3NhZ2VcIjogJHNjb3BlLmNvbnRhY3QubWVzc2FnZVxyXG4gICAgfSlcclxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICRzY29wZS5zZW50ID0gdHJ1ZTtcclxuICAgICAgY29uc29sZS5sb2coXCJTVUNDRVNTLiBzdGF0dXM9JWQsIHRleHQ9JXNcIiwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS50ZXh0KTtcclxuICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICRzY29wZS5zZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRkFJTEVELiBlcnJvcj1cIiwgZXJyKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdFeHBlcmllbmNlQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuXHJcbiAgJHNjb3BlLmdldFNraWxsID0gZnVuY3Rpb24oc2tpbGxDb2RlKSB7XHJcbiAgICBpZiAoISRzY29wZS5za2lsbHMpIHJldHVybjtcclxuICAgIHJldHVybiAkc2NvcGUuc2tpbGxzLmZpbmQoZnVuY3Rpb24oc2tpbGwpIHtcclxuICAgICAgcmV0dXJuIHNraWxsLmNvZGUgPT09IHNraWxsQ29kZTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdIb2JiaWVzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICR3aW5kb3cpIHtcclxuXHJcbiAgJHNjb3BlLmhvYmJ5U2VsZWN0b3JWaXNpYmxlID0gZmFsc2U7XHJcblxyXG4gICQuZ2V0SlNPTignaHR0cHM6Ly93d3cucmVkZGl0LmNvbS91c2VyL2JlbGdvY2FuYWRpYW4vYWJvdXQvLmpzb24nLCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgIC8vY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS5zZWxlY3RlZEhvYmJ5ID0gJHNjb3BlLmhvYmJpZXNbMF07XHJcblxyXG4gICRzY29wZS5zZWxlY3RIb2JieSA9IGZ1bmN0aW9uIChob2JieSkge1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkSG9iYnkgPSBob2JieTtcclxuICAgICRzY29wZS5ob2JieVNlbGVjdG9yVmlzaWJsZSA9IGZhbHNlO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zaG93SG9iYnkgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xyXG4gICAgaWYgKCF2YWx1ZS5pbWFnZXMpIHJldHVybiBmYWxzZTtcclxuICAgIHJldHVybiB2YWx1ZS5pbWFnZXMubGVuZ3RoID4gMDtcclxuICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdMZW1taW5nc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBHYW1lU3ZjKSB7XHJcblxyXG4gIHZhciBMRUZUID0gMDtcclxuICB2YXIgUklHSFQgPSAxO1xyXG5cclxuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xlbW1pbmdzLXBhZ2UnKTtcclxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgdmFyIGxlbW1pbmdzSW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICBsZW1taW5nc0ltYWdlLnNyYyA9ICdsZW1taW5ncy9sZW1taW5ncy5wbmcnO1xyXG4gIHZhciBkZWNvckltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgZGVjb3JJbWFnZS5zcmMgPSAnbGVtbWluZ3MvZGVjb3IucG5nJztcclxuICB2YXIgbGVtbWluZ3MgPSB7fTtcclxuICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xyXG5cclxuICB2YXIgYWN0aW9ucyA9IHtcclxuICAgIHdhbGs6IHtcclxuICAgICAgc3RhcnQ6IFswLCAwXSxcclxuICAgICAgZW5kOiBbMzIwLCAyMF0sXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgaHVoOiB7XHJcbiAgICAgIHN0YXJ0OiBbMzIwLCAwXSxcclxuICAgICAgZW5kOiBbNjQwLCAyMF0sXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IHRydWVcclxuICAgIH0sXHJcbiAgICBmYWxsOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgODBdLFxyXG4gICAgICBlbmQ6IFsxNjAsIDEwMF0sXHJcbiAgICAgIGNvbHVtbnM6IDQsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZmx5OiB7XHJcbiAgICAgIHN0YXJ0OiBbMTYwLCA4MF0sXHJcbiAgICAgIGVuZDogWzQ4MCwgMTEwXSxcclxuICAgICAgY29sdW1uczogOCxcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBzdG9wOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMTIwXSxcclxuICAgICAgZW5kOiBbNjQwLCAxNDBdLFxyXG4gICAgICBjb2x1bW5zOiAxNixcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBjbGltYjoge1xyXG4gICAgICBzdGFydDogWzAsIDE2MF0sXHJcbiAgICAgIGVuZDogWzY0MCwgMTg1XSxcclxuICAgICAgY29sdW1uczogMTYsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgYnVpbGQ6IHtcclxuICAgICAgc3RhcnQ6IFswLCAyMDBdLFxyXG4gICAgICBlbmQ6IFs2NDAsIDIyNV0sXHJcbiAgICAgIGNvbHVtbnM6IDE2LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHB1bmNoOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMjQwXSxcclxuICAgICAgZW5kOiBbNjQwLCAzMDBdLFxyXG4gICAgICBjb2x1bW5zOiAxNixcclxuICAgICAgcm93czogMixcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBkaWc6IHtcclxuICAgICAgc3RhcnQ6IFswLCAzMjBdLFxyXG4gICAgICBlbmQ6IFszMjAsIDM0NV0sXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIExlbW1pbmcoaW5pdCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoY2FudmFzLndpZHRoIC0gMjAwKSkgKyAxMDAsIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChjYW52YXMuaGVpZ2h0IC0gMjAwKSkgKyAxMDBdO1xyXG4gICAgdGhpcy5kaXJlY3Rpb24gPSBNYXRoLnJhbmRvbSgpICogMiA+IDEgPyBMRUZUIDogUklHSFQ7XHJcbiAgICB0aGlzLmFjdCA9IGZ1bmN0aW9uKGFjdGlvbikge1xyXG4gICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbnNbYWN0aW9uXTtcclxuICAgICAgdGhpcy5jeWNsZSA9IDA7XHJcbiAgICAgIHRoaXMud2lkdGggPSAodGhpcy5hY3Rpb24uZW5kWzBdIC0gdGhpcy5hY3Rpb24uc3RhcnRbMF0pIC8gdGhpcy5hY3Rpb24uY29sdW1ucztcclxuICAgICAgdGhpcy5oZWlnaHQgPSAodGhpcy5hY3Rpb24uZW5kWzFdIC0gdGhpcy5hY3Rpb24uc3RhcnRbMV0gLSAoMjAgKiAodGhpcy5hY3Rpb24ucm93cyAtIDEpKSkgLyB0aGlzLmFjdGlvbi5yb3dzO1xyXG4gICAgICB0aGlzLmFuaW1hdGlvbiA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5hY3QoaW5pdCk7XHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uWzBdLCB0aGlzLnBvc2l0aW9uWzFdKTtcclxuICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSBMRUZUKSB7XHJcbiAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgY29sdW1uID0gdGhpcy5jeWNsZSAlIHRoaXMuYWN0aW9uLmNvbHVtbnM7XHJcbiAgICAgIHZhciByb3cgPSBNYXRoLmZsb29yKHRoaXMuY3ljbGUgLyB0aGlzLmFjdGlvbi5jb2x1bW5zKTtcclxuICAgICAgY3R4LmRyYXdJbWFnZShsZW1taW5nc0ltYWdlLCAodGhpcy53aWR0aCAqIGNvbHVtbikgKyB0aGlzLmFjdGlvbi5zdGFydFswXSwgKCh0aGlzLmhlaWdodCArIDIwKSAqIHJvdykgKyB0aGlzLmFjdGlvbi5zdGFydFsxXSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIDAsIHRoaXMud2lkdGggKiAyLCB0aGlzLmhlaWdodCAqIDIpO1xyXG4gICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICBpZiAodGhpcy5hY3Rpb24ucmV2ZXJzZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZSsrO1xyXG4gICAgICAgICAgaWYgKHRoaXMuY3ljbGUgPj0gdGhpcy5hY3Rpb24uY29sdW1ucyAqIHRoaXMuYWN0aW9uLnJvd3MpIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSAhdGhpcy5hbmltYXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuY3ljbGUtLTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZS0tO1xyXG4gICAgICAgICAgaWYgKHRoaXMuY3ljbGUgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gIXRoaXMuYW5pbWF0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLmN5Y2xlID0gMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5jeWNsZSsrO1xyXG4gICAgICAgIGlmICh0aGlzLmN5Y2xlID49IHRoaXMuYWN0aW9uLmNvbHVtbnMgKiB0aGlzLmFjdGlvbi5yb3dzKSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBIYXRjaCgpIHtcclxuICAgIHRoaXMucG9zaXRpb24gPSBbMjAsIDIwXTtcclxuICAgIHRoaXMuYWN0aW9uID0ge1xyXG4gICAgICBzdGFydDogWzAsIDBdLFxyXG4gICAgICBlbmQ6IFs4MiwgNTAwXSxcclxuICAgICAgY29sdW1uczogMSxcclxuICAgICAgcm93czogMTBcclxuICAgIH1cclxuICAgIHRoaXMud2lkdGggPSAodGhpcy5hY3Rpb24uZW5kWzBdIC0gdGhpcy5hY3Rpb24uc3RhcnRbMF0pIC8gdGhpcy5hY3Rpb24uY29sdW1ucztcclxuICAgIHRoaXMuaGVpZ2h0ID0gKHRoaXMuYWN0aW9uLmVuZFsxXSAtIHRoaXMuYWN0aW9uLnN0YXJ0WzFdKSAvIHRoaXMuYWN0aW9uLnJvd3M7XHJcbiAgICB0aGlzLmN5Y2xlID0gMDtcclxuICAgIHRoaXMub3BlbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMucG9zaXRpb25bMF0sIHRoaXMucG9zaXRpb25bMV0pO1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMud2lkdGggLyAyLCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICB2YXIgY29sdW1uLCByb3c7XHJcbiAgICAgIGlmIChzdGFydGVkKSB7XHJcbiAgICAgICAgY29sdW1uID0gdGhpcy5jeWNsZSAlIHRoaXMuYWN0aW9uLmNvbHVtbnM7XHJcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcih0aGlzLmN5Y2xlIC8gdGhpcy5hY3Rpb24uY29sdW1ucyk7XHJcbiAgICAgICAgaWYgKHRoaXMuY3ljbGUgPCA5KSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlKys7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbHVtbiA9IDA7XHJcbiAgICAgICAgcm93ID0gMDtcclxuICAgICAgfVxyXG4gICAgICBjdHguZHJhd0ltYWdlKGRlY29ySW1hZ2UsICh0aGlzLndpZHRoICogY29sdW1uKSArIHRoaXMuYWN0aW9uLnN0YXJ0WzBdLCAodGhpcy5oZWlnaHQgKiByb3cpICsgdGhpcy5hY3Rpb24uc3RhcnRbMV0gLSAxLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgMCwgMCwgdGhpcy53aWR0aCAqIDIsIHRoaXMuaGVpZ2h0ICogMik7XHJcbiAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzcGF3bkxlbW1pbmcoKSB7XHJcbiAgICBPYmplY3Qua2V5cyhhY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGFjdGlvbikge1xyXG4gICAgICBsZW1taW5nc1tNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDApXSA9IG5ldyBMZW1taW5nKGFjdGlvbik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG5cdGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcblx0XHQvLyBSZWdpc3RlciBhbiBldmVudCBsaXN0ZW5lciB0b1xyXG5cdFx0Ly8gY2FsbCB0aGUgcmVzaXplQ2FudmFzKCkgZnVuY3Rpb24gZWFjaCB0aW1lXHJcblx0XHQvLyB0aGUgd2luZG93IGlzIHJlc2l6ZWQuXHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplQ2FudmFzLCBmYWxzZSk7XHJcblx0XHQvLyBEcmF3IGNhbnZhcyBib3JkZXIgZm9yIHRoZSBmaXJzdCB0aW1lLlxyXG5cdFx0cmVzaXplQ2FudmFzKCk7XHJcblx0fVxyXG5cdC8vIFJ1bnMgZWFjaCB0aW1lIHRoZSBET00gd2luZG93IHJlc2l6ZSBldmVudCBmaXJlcy5cclxuXHQvLyBSZXNldHMgdGhlIGNhbnZhcyBkaW1lbnNpb25zIHRvIG1hdGNoIHdpbmRvdyxcclxuXHQvLyB0aGVuIGRyYXdzIHRoZSBuZXcgYm9yZGVycyBhY2NvcmRpbmdseS5cclxuXHRmdW5jdGlvbiByZXNpemVDYW52YXMoKSB7XHJcblx0XHRjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHRcdGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAoY2FudmFzLndpZHRoIDw9IDc2OCA/IDUwIDogMTA1KTtcclxuXHR9XHJcblxyXG5cdGluaXRpYWxpemUoKTtcclxuICBzcGF3bkxlbW1pbmcoKTtcclxuICBsZXQgaGF0Y2ggPSBuZXcgSGF0Y2goKVxyXG4gIGRyYXcoKTtcclxuXHJcbiAgZnVuY3Rpb24gZHJhdygpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIGlmICghc3RhcnRlZCkge1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5mb250PSc0MHB4IE1vbm90b24nO1xyXG4gICAgICBjdHgubGluZVdpZHRoID0gJzEwJztcclxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ2JsdWUnO1xyXG4gICAgICBjdHgucmVjdCgxNSwgY2FudmFzLmhlaWdodCAtIDQ1LCBjdHgubWVhc3VyZVRleHQoJ1N0YXJ0Jykud2lkdGggKyAyMCwgY3R4Lm1lYXN1cmVUZXh0KCdTdGFydCcpLmhlaWdodCArIGNhbnZhcy5oZWlnaHQgLSA0NSk7XHJcbiAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgIGN0eC5maWxsVGV4dCgnU3RhcnQnLCAyMCwgY2FudmFzLmhlaWdodCAtIDUwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gbGVtbWluZ3MpIHtcclxuICAgICAgICBsZW1taW5nc1tpXS5tb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGhhdGNoLm9wZW4oKTtcclxuICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgZHJhdygpO1xyXG4gICAgfSwgMTUwKTtcclxuICB9XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0xpc3RzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgQ2F0ZWdvcmllc1N2Yykge1xyXG5cclxuICAkc2NvcGUuc2hvd0NhdGVnb3J5ID0gdHJ1ZTtcclxuXHJcbiAgJHNjb3BlLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBDYXRlZ29yaWVzU3ZjLmdldENhdGVnb3JpZXMoKVxyXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgJHNjb3BlLnRhc2tzID0gW107XHJcbiAgICAgIGZvciAodmFyIGkgaW4gJHNjb3BlLmNhdGVnb3JpZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBqIGluICRzY29wZS5jYXRlZ29yaWVzW2ldLnRhc2tzKSB7XHJcbiAgICAgICAgICAkc2NvcGUudGFza3MucHVzaCh7XHJcbiAgICAgICAgICAgIFwiY2F0ZWdvcnlcIjogJHNjb3BlLmNhdGVnb3JpZXNbaV0ubmFtZSxcclxuICAgICAgICAgICAgXCJ0YXNrXCI6ICRzY29wZS5jYXRlZ29yaWVzW2ldLnRhc2tzW2pdLm5hbWVcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdENhdGVnb3J5ID0gZnVuY3Rpb24oY2F0ZWdvcnkpIHtcclxuICAgICRzY29wZS5zZWxlY3RlZENhdGVnb3J5ID0gY2F0ZWdvcnk7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRUYXNrcyA9IFtdO1xyXG4gICAgJHNjb3BlLnNlbGVjdGFibGVUYXNrcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSBpbiAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcykge1xyXG4gICAgICAkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLnB1c2goJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0pO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLnNob3dDYXRlZ29yeSA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmVudGVyZWRDYXRlZ29yeSA9ICcnO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5uZXdDYXRlZ29yeSA9IGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5jYXRlZ29yaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICgkc2NvcGUuY2F0ZWdvcmllc1tpXS5uYW1lID09PSBjYXRlZ29yeSkge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RDYXRlZ29yeSgkc2NvcGUuY2F0ZWdvcmllc1tpXSk7XHJcbiAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWZvdW5kKSB7XHJcbiAgICAgIENhdGVnb3JpZXNTdmMuYWRkQ2F0ZWdvcnkoe1xyXG4gICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeVxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgICAgICRzY29wZS5pbml0KCk7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdENhdGVnb3J5KGNhdGVnb3J5KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuZW50ZXJlZENhdGVnb3J5ID0gJyc7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLm5ld1Rhc2sgPSBmdW5jdGlvbiAodGFzaykge1xyXG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzKSB7XHJcbiAgICAgIGlmICgkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXS5uYW1lID09PSB0YXNrKSB7XHJcbiAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RUYXNrKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFmb3VuZCkge1xyXG4gICAgICBDYXRlZ29yaWVzU3ZjLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkubmFtZSwge1xyXG4gICAgICAgIHRhc2s6IHRhc2tcclxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MucHVzaCh7IG5hbWU6IHRhc2sgfSk7XHJcbiAgICAgICAgJHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsICRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzWyRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzLmxlbmd0aCAtIDFdKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuZW50ZXJlZFRhc2sgPSAnJztcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VsZWN0VGFzayA9IGZ1bmN0aW9uICh0YXNrKSB7XHJcbiAgICAkc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcywgdGFzayk7XHJcbiAgICAkc2NvcGUucmVtb3ZlVGFzaygkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLCB0YXNrKTtcclxuICAgICRzY29wZS5lbnRlcmVkVGFzayA9ICcnO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS51bnNlbGVjdFRhc2sgPSBmdW5jdGlvbiAodGFzaykge1xyXG4gICAgJHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGFibGVUYXNrcywgdGFzayk7XHJcbiAgICAkc2NvcGUucmVtb3ZlVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcywgdGFzayk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmFkZFRhc2sgPSBmdW5jdGlvbih0YXNrTGlzdCwgdGFzaykge1xyXG4gICAgdGFza0xpc3QucHVzaCh0YXNrKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUucmVtb3ZlVGFzayA9IGZ1bmN0aW9uKHRhc2tMaXN0LCB0YXNrKSB7XHJcbiAgICB0YXNrTGlzdC5zcGxpY2UodGFza0xpc3QuaW5kZXhPZih0YXNrKSwgMSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnN0YXJ0UHJpb3JpdGl6aW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICBDYXRlZ29yaWVzU3ZjLnNldFByaW9yaXR5TGlzdCgkc2NvcGUuc2VsZWN0ZWRUYXNrcyk7XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL3ByaW9yaXRpemUnKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0UXVlc3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoISRzY29wZS5zZWxlY3RlZFRhc2tzKSByZXR1cm4gJyc7XHJcbiAgICB2YXIgY291bnRlciA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gJHNjb3BlLnNlbGVjdGVkVGFza3MubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xyXG4gICAgICBjb3VudGVyICs9IGk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY291bnRlcjtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBVc2VyU3ZjKSB7XHJcblxyXG4gIC8vIEluaXRpYWxpemUgdGhlIEZpcmViYXNlVUkgV2lkZ2V0IHVzaW5nIEZpcmViYXNlLlxyXG4gIHZhciB1aSA9IG5ldyBmaXJlYmFzZXVpLmF1dGguQXV0aFVJKGZpcmViYXNlLmF1dGgoKSk7XHJcblxyXG4gICRzY29wZS4kb24oJ2xvZ291dCcsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICB1aS5yZXNldCgpO1xyXG4gICAgc3RhcnRVSSgpO1xyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBzdGFydFVJKCkge1xyXG4gICAgdWkuc3RhcnQoJyNmaXJlYmFzZXVpLWF1dGgtY29udGFpbmVyJywge1xyXG5cclxuICAgICAgY2FsbGJhY2tzOiB7XHJcbiAgICAgICAgc2lnbkluU3VjY2VzczogZnVuY3Rpb24oY3VycmVudFVzZXIsIGNyZWRlbnRpYWwsIHJlZGlyZWN0VXJsKSB7XHJcbiAgICAgICAgICAvLyBObyByZWRpcmVjdC5cclxuICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlci5nZXRJZFRva2VuKHRydWUpLnRoZW4oZnVuY3Rpb24oaWRUb2tlbikge1xyXG4gICAgICAgICAgICBVc2VyU3ZjLmF1dGhlbnRpY2F0ZSh7XHJcbiAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IGN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgIGVtYWlsOiBjdXJyZW50VXNlci5lbWFpbCxcclxuICAgICAgICAgICAgICBwaG90b1VSTDogY3VycmVudFVzZXIucGhvdG9VUkwsXHJcbiAgICAgICAgICAgICAgZW1haWxWZXJpZmllZDogY3VycmVudFVzZXIuZW1haWxWZXJpZmllZCxcclxuICAgICAgICAgICAgICBpZFRva2VuOiBpZFRva2VuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAkKCcjbW9kYWwtbG9naW4nKS5tb2RhbCgnaGlkZScpO1xyXG4gICAgICAgICAgICAgIC8vJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICRzY29wZS4kZW1pdCgncG9wdXAnLCB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTG9naW4gRmFpbGVkJyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdhbGVydC1kYW5nZXInXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyAuLi5cclxuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBlcnJvclxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gc2lnbkluRmFpbHVyZSBjYWxsYmFjayBtdXN0IGJlIHByb3ZpZGVkIHRvIGhhbmRsZSBtZXJnZSBjb25mbGljdHMgd2hpY2hcclxuICAgICAgICAvLyBvY2N1ciB3aGVuIGFuIGV4aXN0aW5nIGNyZWRlbnRpYWwgaXMgbGlua2VkIHRvIGFuIGFub255bW91cyB1c2VyLlxyXG4gICAgICAgIHNpZ25JbkZhaWx1cmU6IGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgICAvLyBGb3IgbWVyZ2UgY29uZmxpY3RzLCB0aGUgZXJyb3IuY29kZSB3aWxsIGJlXHJcbiAgICAgICAgICAvLyAnZmlyZWJhc2V1aS9hbm9ueW1vdXMtdXBncmFkZS1tZXJnZS1jb25mbGljdCcuXHJcbiAgICAgICAgICBpZiAoZXJyb3IuY29kZSAhPSAnZmlyZWJhc2V1aS9hbm9ueW1vdXMtdXBncmFkZS1tZXJnZS1jb25mbGljdCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gVGhlIGNyZWRlbnRpYWwgdGhlIHVzZXIgdHJpZWQgdG8gc2lnbiBpbiB3aXRoLlxyXG4gICAgICAgICAgdmFyIGNyZWQgPSBlcnJvci5jcmVkZW50aWFsO1xyXG4gICAgICAgICAgLy8gQ29weSBkYXRhIGZyb20gYW5vbnltb3VzIHVzZXIgdG8gcGVybWFuZW50IHVzZXIgYW5kIGRlbGV0ZSBhbm9ueW1vdXNcclxuICAgICAgICAgIC8vIHVzZXIuXHJcbiAgICAgICAgICAvLyAuLi5cclxuICAgICAgICAgIC8vIEZpbmlzaCBzaWduLWluIGFmdGVyIGRhdGEgaXMgY29waWVkLlxyXG4gICAgICAgICAgcmV0dXJuIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoQ3JlZGVudGlhbChjcmVkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVpU2hvd246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgLy8gVGhlIHdpZGdldCBpcyByZW5kZXJlZC5cclxuICAgICAgICAgIC8vIEhpZGUgdGhlIGxvYWRlci5cclxuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkZXInKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgc2lnbkluU3VjY2Vzc1VybDogJy9ob21lJyxcclxuICAgICAgc2lnbkluT3B0aW9uczogW1xyXG4gICAgICAgIC8vZmlyZWJhc2UuYXV0aC5FbWFpbEF1dGhQcm92aWRlci5QUk9WSURFUl9JRCxcclxuICAgICAgICBmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRCxcclxuICAgICAgICBmaXJlYmFzZS5hdXRoLkZhY2Vib29rQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICBdLFxyXG5cclxuICAgICAgLy8gV2lsbCB1c2UgcG9wdXAgZm9yIElEUCBQcm92aWRlcnMgc2lnbi1pbiBmbG93IGluc3RlYWQgb2YgdGhlIGRlZmF1bHQsIHJlZGlyZWN0LlxyXG4gICAgICBzaWduSW5GbG93OiAncG9wdXAnLFxyXG4gICAgICAvLyBPdGhlciBjb25maWcgb3B0aW9ucy4uLlxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGFydFVJKCk7XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkZmlsdGVyLCBQb3N0c1N2Yykge1xyXG5cclxuICAkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICgkc2NvcGUucG9zdEJvZHkpIHtcclxuICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcclxuICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHlcclxuICAgICAgfSkudGhlbihmdW5jdGlvbiAocG9zdCkge1xyXG4gICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGw7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIFBvc3RzU3ZjLmZldGNoKClcclxuICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICRzY29wZS5wb3N0cyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS4kb24oJ3dzOm5ld19wb3N0JywgZnVuY3Rpb24gKF8sIHBvc3QpIHtcclxuICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICBQb3N0c1N2Yy5nZXRQb3N0KHBvc3QpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUHJpb3JpdGl6ZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIENhdGVnb3JpZXNTdmMpIHtcclxuXHJcbiAgJHNjb3BlLnByaW9yaXR5TGlzdCA9IENhdGVnb3JpZXNTdmMuZ2V0UHJpb3JpdHlMaXN0KCk7XHJcblxyXG4gIGlmICghJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgJGxvY2F0aW9uLnBhdGgoJy9saXN0cycpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbiA9IDE7XHJcbiAgICAkc2NvcGUuY3VycmVudFF1ZXN0aW9uID0gMTtcclxuICAgICRzY29wZS5kb25lID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAkc2NvcGUubWFrZUNob2ljZSA9IGZ1bmN0aW9uKGNob2ljZSkge1xyXG4gICAgZm9yICh2YXIgaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIGlmICgkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkID09PSAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbikge1xyXG4gICAgICAgICRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlID0gY2hvaWNlID09PSAxID8gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZSA6ICRzY29wZS5wcmlvcml0eUxpc3RbaV0uc2Vjb25kQ2hvaWNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24gPT09ICRzY29wZS5jdXJyZW50UXVlc3Rpb24pIHtcclxuICAgICAgJHNjb3BlLmN1cnJlbnRRdWVzdGlvbiA9ICRzY29wZS5jdXJyZW50UXVlc3Rpb24gPT09ICRzY29wZS5wcmlvcml0eUxpc3QubGVuZ3RoID8gMSA6ICRzY29wZS5jdXJyZW50UXVlc3Rpb24gKyAxO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24gPSAkc2NvcGUuY3VycmVudFF1ZXN0aW9uO1xyXG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICBmb3IgKGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgPT09ICcnKSB7XHJcbiAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWZvdW5kKSB7XHJcbiAgICAgICQoJyNwcmlvcml0aXplQ2hvaWNlcycpLmhpZGUoMzAwKTtcclxuICAgICAgJHNjb3BlLmRvbmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZXRCdXR0b25WYWx1ZSA9IGZ1bmN0aW9uKGNob2ljZSkge1xyXG4gICAgaWYgKCEkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLnByaW9yaXR5TGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZCA9PT0gJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gY2hvaWNlID09PSAxID8gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZSA6ICRzY29wZS5wcmlvcml0eUxpc3RbaV0uc2Vjb25kQ2hvaWNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdFF1ZXN0aW9uID0gZnVuY3Rpb24ocXVlc3Rpb24pIHtcclxuICAgICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uID0gcXVlc3Rpb247XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmdldEZpbHRlcmVkUHJpb3JpdHlMaXN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoISRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICRzY29wZS5wcmlvcml0eUxpc3RcclxuICAgICAgLnNvcnQoZnVuY3Rpb24oYSwgYil7IHJldHVybiBhLmlkLWIuaWQ7IH0pXHJcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24ocXVlc3Rpb24pIHsgcmV0dXJuIHF1ZXN0aW9uLmNob2ljZSAhPT0gJycgfHwgcXVlc3Rpb24uaWQgPT09ICRzY29wZS5jdXJyZW50UXVlc3Rpb247IH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZXRDaG9pY2VzTWFkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCEkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHZhciBjaG9pY2VzTWFkZSA9IDA7XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlICE9PSAnJykge1xyXG4gICAgICAgIGNob2ljZXNNYWRlKys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjaG9pY2VzTWFkZTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0QnV0dG9uQ2xhc3MgPSBmdW5jdGlvbihjaG9pY2UpIHtcclxuICAgIGlmICghJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQgPT09ICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uKSB7XHJcbiAgICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlID09PSAnJykge1xyXG4gICAgICAgICAgcmV0dXJuICdidG4tcHJpbWFyeSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaG9pY2UgPT09IDEpIHtcclxuICAgICAgICAgIHJldHVybiAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmZpcnN0Q2hvaWNlID09PSAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSA/ICdidG4tc3VjY2VzcycgOiAnYnRuLWRhbmdlcic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLnNlY29uZENob2ljZSA9PT0gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgPyAnYnRuLXN1Y2Nlc3MnIDogJ2J0bi1kYW5nZXInO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5zaG93Q2hvaWNlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJCgnI3ByaW9yaXRpemVDaG9pY2VzJykuc2hvdygxMDAwKTtcclxuICAgICQoJyNyZXZpZXdDaG9pY2VzJykuaGlkZSgpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5jaGFydENsaWNrID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gICAgaWYgKCAkc2NvcGUuY2hhcnQgKSB7XHJcbiAgICAgIC8vIERpZmZlcmVudCBtZXRob2RzIGRlcGVuZGluZyBvbiBjaGFydCB0eXBlXHJcbiAgICAgIC8vY29uc29sZS5sb2coICRzY29wZS5jaGFydC5nZXRQb2ludHNBdEV2ZW50KCBldmVudCApICk7IC8vIGZvciBQb2ludHNcclxuICAgICAgY29uc29sZS5sb2coICRzY29wZS5jaGFydC5nZXRTZWdtZW50c0F0RXZlbnQoIGV2ZW50ICkgKTsgLy8gZm9yIFNlZ21lbnRzXHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNob3dSZXN1bHRzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgJHNjb3BlLmRhdGEgPSBbXTtcclxuICAgICRzY29wZS5vcHRpb25zID0ge1xyXG4gICAgICAvLyBTZXRzIHRoZSBjaGFydCB0byBiZSByZXNwb25zaXZlXHJcbiAgICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcblxyXG4gICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIHNob3VsZCBzaG93IGEgc3Ryb2tlIG9uIGVhY2ggc2VnbWVudFxyXG4gICAgICBzZWdtZW50U2hvd1N0cm9rZSA6IHRydWUsXHJcblxyXG4gICAgICAvL1N0cmluZyAtIFRoZSBjb2xvdXIgb2YgZWFjaCBzZWdtZW50IHN0cm9rZVxyXG4gICAgICBzZWdtZW50U3Ryb2tlQ29sb3IgOiAnI2ZmZicsXHJcblxyXG4gICAgICAvL051bWJlciAtIFRoZSB3aWR0aCBvZiBlYWNoIHNlZ21lbnQgc3Ryb2tlXHJcbiAgICAgIHNlZ21lbnRTdHJva2VXaWR0aCA6IDIsXHJcblxyXG4gICAgICAvL051bWJlciAtIFRoZSBwZXJjZW50YWdlIG9mIHRoZSBjaGFydCB0aGF0IHdlIGN1dCBvdXQgb2YgdGhlIG1pZGRsZVxyXG4gICAgICBwZXJjZW50YWdlSW5uZXJDdXRvdXQgOiAwLCAvLyBUaGlzIGlzIDAgZm9yIFBpZSBjaGFydHNcclxuXHJcbiAgICAgIC8vTnVtYmVyIC0gQW1vdW50IG9mIGFuaW1hdGlvbiBzdGVwc1xyXG4gICAgICBhbmltYXRpb25TdGVwcyA6IDEwMCxcclxuXHJcbiAgICAgIC8vU3RyaW5nIC0gQW5pbWF0aW9uIGVhc2luZyBlZmZlY3RcclxuICAgICAgYW5pbWF0aW9uRWFzaW5nIDogJ2Vhc2VPdXRCb3VuY2UnLFxyXG5cclxuICAgICAgLy9Cb29sZWFuIC0gV2hldGhlciB3ZSBhbmltYXRlIHRoZSByb3RhdGlvbiBvZiB0aGUgRG91Z2hudXRcclxuICAgICAgYW5pbWF0ZVJvdGF0ZSA6IHRydWUsXHJcblxyXG4gICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgc2NhbGluZyB0aGUgRG91Z2hudXQgZnJvbSB0aGUgY2VudHJlXHJcbiAgICAgIGFuaW1hdGVTY2FsZSA6IGZhbHNlLFxyXG5cclxuICAgICAgLy9TdHJpbmcgLSBBIGxlZ2VuZCB0ZW1wbGF0ZVxyXG4gICAgICBsZWdlbmRUZW1wbGF0ZSA6ICc8aDMgY2xhc3M9XCJ0Yy1jaGFydC1qcy1sZWdlbmRcIiBzdHlsZT1cInBhZGRpbmc6NXB4XCI+PCUgZm9yICh2YXIgaT0wOyBpPHNlZ21lbnRzLmxlbmd0aDsgaSsrKXslPjxkaXYgY2xhc3M9XCJsYWJlbFwiIHN0eWxlPVwiZmxvYXQ6bGVmdDttYXJnaW46NXB4O2JhY2tncm91bmQtY29sb3I6PCU9c2VnbWVudHNbaV0uZmlsbENvbG9yJT5cIj48JWlmKHNlZ21lbnRzW2ldLmxhYmVsKXslPjwlPXNlZ21lbnRzW2ldLmxhYmVsJT48JX0lPjwvZGl2PjwlfSU+PC9oMz4nXHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgaSBpbiBDYXRlZ29yaWVzU3ZjLmNob2ljZXMpIHtcclxuICAgICAgQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzID0gMDtcclxuICAgICAgZm9yICh2YXIgaiBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgICAgaWYgKENhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS5uYW1lID09PSAkc2NvcGUucHJpb3JpdHlMaXN0W2pdLmNob2ljZSkge1xyXG4gICAgICAgICAgQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzKys7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBDYXRlZ29yaWVzU3ZjLmNob2ljZXMuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBhLnZvdGVzIDwgYi52b3RlczsgfSk7XHJcbiAgICBmb3IgKGkgaW4gQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzKSB7XHJcbiAgICAgICRzY29wZS5kYXRhLnB1c2goe1xyXG4gICAgICAgIHZhbHVlOiBDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMsXHJcbiAgICAgICAgbGFiZWw6IENhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS5uYW1lXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgJCgnI3ByaW9yaXRpemVSZXN1bHQnKS5oaWRlKCk7XHJcbiAgICAkKCcjcHJpb3JpdGl6ZUNob2ljZXMnKS5oaWRlKCk7XHJcbiAgICAkKCcjcHJpb3JpdHlSZXN1bHRzJykuc2hvdygxMDAwKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUHJvZmlsZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJTdmMpIHtcclxuXHJcbiAgaWYgKCEkc2NvcGUuY3VycmVudFVzZXIpIHtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgICQoJyNzZXgtaW5kaWNhdG9yJykub2Zmc2V0KHsgbGVmdDogKCRzY29wZS5jdXJyZW50VXNlci5nZW5kZXIuc2V4IC8gMjAwICogJCgnI3NleCcpLndpZHRoKCkpICsgJCgnI3NleCcpLm9mZnNldCgpLmxlZnQgfSk7XHJcbiAgICAkKCcjaWRlbnRpdHktaW5kaWNhdG9yJykub2Zmc2V0KHsgbGVmdDogKCRzY29wZS5jdXJyZW50VXNlci5nZW5kZXIuaWRlbnRpdHkgLyAyMDAgKiAkKCcjaWRlbnRpdHknKS53aWR0aCgpKSArICQoJyNpZGVudGl0eScpLm9mZnNldCgpLmxlZnQgfSk7XHJcbiAgfVxyXG5cclxuICAkc2NvcGUuc2V4ZXMgPSBbXHJcbiAgICAnTWFsZScsXHJcbiAgICAnRnRNIE1hbGUnLFxyXG4gICAgJ0ludGVyc2V4JyxcclxuICAgICdNdEYgRmVtYWxlJyxcclxuICAgICdGZW1hbGUnXHJcbiAgXTtcclxuICAkc2NvcGUuaWRlbnRpdGllcyA9IFtcclxuICAgICdNYW4nLFxyXG4gICAgJ0JpZ2VuZGVyJyxcclxuICAgICdQYW5nZW5kZXInLFxyXG4gICAgJ0FnZW5kZXInLFxyXG4gICAgJ1BvbHlnZW5kZXInLFxyXG4gICAgJ0dlbmRlcmZsdWlkJyxcclxuICAgICdHZW5kZXJxdWVlcicsXHJcbiAgICAnUXVlZXInLFxyXG4gICAgJ1dvbWFuJ1xyXG4gIF07XHJcblxyXG4gICRzY29wZS5kYXRlT3B0aW9ucyA9IHtcclxuICAgIG1heERhdGU6IG5ldyBEYXRlKCksXHJcbiAgICBtaW5EYXRlOiBuZXcgRGF0ZSgxOTAwLCAxLCAxKSxcclxuICAgIGluaXREYXRlOiBuZXcgRGF0ZSgyMDAwLCAxLCAxKSxcclxuICAgIGRhdGVwaWNrZXJNb2RlOiAneWVhcidcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2VuZGVyID0gZnVuY3Rpb24oYXJyYXksIHBlcmNlbnRhZ2UpIHtcclxuICAgIHJldHVybiBhcnJheVtNYXRoLnJvdW5kKHBlcmNlbnRhZ2UgLyAyMDAgKiAoYXJyYXkubGVuZ3RoIC0gMSkpXTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc3RhcnRTbGlkZXIgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgfTtcclxuICAkc2NvcGUuZHJhZ1NsaWRlciA9IGZ1bmN0aW9uKGV2ZW50LCB1aSwgdHlwZSkge1xyXG4gICAgJHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlclt0eXBlXSA9IE1hdGgucm91bmQoKCQoJyMnICsgdHlwZSArICctaW5kaWNhdG9yJykub2Zmc2V0KCkubGVmdCAtICQoJyMnICsgdHlwZSkub2Zmc2V0KCkubGVmdCkgLyAoJCgnIycgKyB0eXBlKS53aWR0aCgpIC0gJCgnIycgKyB0eXBlICsgJy1pbmRpY2F0b3InKS53aWR0aCgpKSAqIDIwMCk7XHJcbiAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgfTtcclxuICAkc2NvcGUuc3RvcFNsaWRlciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICB9O1xyXG5cclxuICAkc2NvcGUudXNlcm5hbWVUb2dnbGUgPSB0cnVlO1xyXG4gICRzY29wZS5wYXNzd29yZFRvZ2dsZSA9IHRydWU7XHJcblxyXG4gICRzY29wZS50b2dnbGVVc2VybmFtZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLnVzZXJuYW1lVG9nZ2xlID0gISRzY29wZS51c2VybmFtZVRvZ2dsZTtcclxuICAgICRzY29wZS5uZXdVc2VybmFtZSA9ICRzY29wZS5jdXJyZW50VXNlci51c2VybmFtZTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUudG9nZ2xlUGFzc3dvcmQgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5uZXdQYXNzd29yZCA9IG51bGw7XHJcbiAgICAkc2NvcGUuY29uZmlybVBhc3N3b3JkID0gbnVsbDtcclxuICAgICRzY29wZS5wYXNzd29yZFRvZ2dsZSA9ICEkc2NvcGUucGFzc3dvcmRUb2dnbGU7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmNoZWNrUGFzc3dvcmQgPSBmdW5jdGlvbiAocGFzc3dvcmQpIHtcclxuICAgIGlmIChwYXNzd29yZCkge1xyXG4gICAgICB2YXIgdXNlciA9ICRzY29wZS5jdXJyZW50VXNlci5faWQ7XHJcbiAgICAgIFVzZXJTdmMuY2hlY2tQYXNzd29yZCh1c2VyLCBwYXNzd29yZClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgJHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb3JpZ2luYWxCZyA9ICQoXCIucGFzc3dvcmRcIikuY3NzKFwiYmFja2dyb3VuZENvbG9yXCIpO1xyXG4gICAgICAgICQoXCIucGFzc3dvcmRcIikuYW5pbWF0ZSh7IGJhY2tncm91bmRDb2xvcjogXCIjRkZCNkMxXCIgfSwgMjAwKS5hbmltYXRlKHsgYmFja2dyb3VuZENvbG9yOiBvcmlnaW5hbEJnIH0sIDIwMCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5jaGFuZ2VQYXNzd29yZCA9IGZ1bmN0aW9uIChvbGRQYXNzd29yZCwgbmV3UGFzc3dvcmQsIGNvbmZpcm1QYXNzd29yZCkge1xyXG4gICAgaWYgKG5ld1Bhc3N3b3JkKSB7XHJcbiAgICAgIGlmIChuZXdQYXNzd29yZCA9PSBjb25maXJtUGFzc3dvcmQpIHtcclxuICAgICAgICB2YXIgdXNlciA9ICRzY29wZS5jdXJyZW50VXNlci5faWQ7XHJcbiAgICAgICAgVXNlclN2Yy5jaGFuZ2VQYXNzd29yZCh1c2VyLCBvbGRQYXNzd29yZCwgbmV3UGFzc3dvcmQpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3BvcHVwJywge1xyXG4gICAgICAgICAgICBtZXNzYWdlOiAnUGFzc3dvcmQgQ2hhbmdlZCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdhbGVydC1zdWNjZXNzJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICAkc2NvcGUub2xkUGFzc3dvcmQgPSBudWxsO1xyXG4gICAgICAgICAgJHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCk7XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdwb3B1cCcsIHtcclxuICAgICAgICAgICAgbWVzc2FnZTogJ1Bhc3N3b3JkIENoYW5nZSBGYWlsZWQnLFxyXG4gICAgICAgICAgICB0eXBlOiAnYWxlcnQtZGFuZ2VyJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsQmcgPSAkKFwiLnBhc3N3b3JkXCIpLmNzcyhcImJhY2tncm91bmRDb2xvclwiKTtcclxuICAgICAgICAkKFwiLnBhc3N3b3JkXCIpLmFuaW1hdGUoeyBiYWNrZ3JvdW5kQ29sb3I6IFwiI0ZGQjZDMVwiIH0sIDIwMCkuYW5pbWF0ZSh7IGJhY2tncm91bmRDb2xvcjogb3JpZ2luYWxCZyB9LCAyMDApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmNoYW5nZVVzZXJuYW1lID0gZnVuY3Rpb24gKHVzZXJuYW1lKSB7XHJcbiAgICAkc2NvcGUuJGVtaXQoJ2xvYWRpbmcnKTtcclxuICAgIFVzZXJTdmMuY2hhbmdlVXNlcm5hbWUoJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCwgdXNlcm5hbWUpXHJcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgJHNjb3BlLiRlbWl0KCd1cGRhdGUnLCByZXNwb25zZS5kYXRhKTtcclxuICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICRzY29wZS4kZW1pdCgncG9wdXAnLCB7XHJcbiAgICAgICAgbWVzc2FnZTogdXNlcm5hbWUgKyAnIGFscmVhZHkgaW4gdXNlJyxcclxuICAgICAgICB0eXBlOiAnYWxlcnQtZGFuZ2VyJ1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS51cGRhdGVVc2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCRzY29wZS5jdXJyZW50VXNlcikgeyAgXHJcbiAgICAgICRzY29wZS4kZW1pdCgnbG9hZGluZycpO1xyXG4gICAgICBVc2VyU3ZjLnVwZGF0ZVVzZXIoJHNjb3BlLmN1cnJlbnRVc2VyKVxyXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUuJGVtaXQoJ3VwZGF0ZScsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuXHJcbiAgJHNjb3BlLiR3YXRjaCgnY3VycmVudFVzZXIuZmxhZ3MubGVuZ3RoJywgZnVuY3Rpb24obGVuZ3RoKSB7XHJcbiAgICAkc2NvcGUudXBkYXRlVXNlcigpO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUubG9hZENvdW50cmllcyA9IGZ1bmN0aW9uKCRxdWVyeSkge1xyXG4gICAgdmFyIGNvdW50cmllcyA9IFtcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbmRvcnJhXCIsIFwiZmxhZ1wiOiBcImZsYWctYWRcIiwgXCJ0aWRiaXRcIjogXCJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVuaXRlZCBBcmFiIEVtaXJhdGVzXCIsIFwiZmxhZ1wiOiBcImZsYWctYWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFmZ2hhbmlzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctYWZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFudGlndWEgYW5kIEJhcmJ1ZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQW5ndWlsbGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1haVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQWxiYW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLWFsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBcm1lbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYW1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFuZ29sYVwiLCBcImZsYWdcIjogXCJmbGFnLWFvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbnRhcmN0aWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctYXFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFyZ2VudGluYVwiLCBcImZsYWdcIjogXCJmbGFnLWFyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbWVyaWNhbiBTb21vYVwiLCBcImZsYWdcIjogXCJmbGFnLWFzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBdXN0cmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYXRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkF1c3RyYWxpYVwiLCBcImZsYWdcIjogXCJmbGFnLWF1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBcnViYVwiLCBcImZsYWdcIjogXCJmbGFnLWF3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCLDhWxhbmQgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWF4XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBemVyYmFpamFuXCIsIFwiZmxhZ1wiOiBcImZsYWctYXpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJvc25pYSBhbmQgSGVyemVnb3ZpbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1iYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmFyYmFkb3NcIiwgXCJmbGFnXCI6IFwiZmxhZy1iYlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmFuZ2xhZGVzaFwiLCBcImZsYWdcIjogXCJmbGFnLWJkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZWxnaXVtXCIsIFwiZmxhZ1wiOiBcImZsYWctYmVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJ1cmtpbmEgRmFzb1wiLCBcImZsYWdcIjogXCJmbGFnLWJmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCdWxnYXJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWJnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCYWhyYWluXCIsIFwiZmxhZ1wiOiBcImZsYWctYmhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJ1cnVuZGlcIiwgXCJmbGFnXCI6IFwiZmxhZy1iaVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmVuaW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1ialwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgQmFydGjDqWxlbXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1ibFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmVybXVkYVwiLCBcImZsYWdcIjogXCJmbGFnLWJtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCcnVuZWkgXCIsIFwiZmxhZ1wiOiBcImZsYWctYm5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJvbGl2aWEsIFBsdXJpbmF0aW9uYWwgU3RhdGUgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1ib1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm9uYWlyZSwgU2ludCBFdXN0YXRpdXMgYW5kIFNhYmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1icVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQnJhemlsXCIsIFwiZmxhZ1wiOiBcImZsYWctYnJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJhaGFtYXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1ic1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmh1dGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctYnRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJvdXZldCBJc2xhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1idlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm90c3dhbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1id1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmVsYXJ1c1wiLCBcImZsYWdcIjogXCJmbGFnLWJ5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZWxpemVcIiwgXCJmbGFnXCI6IFwiZmxhZy1ielwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2FuYWRhXCIsIFwiZmxhZ1wiOiBcImZsYWctY2FcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvY29zIChLZWVsaW5nKSBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctY2NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvbmdvLCB0aGUgRGVtb2NyYXRpYyBSZXB1YmxpYyBvZiB0aGVcIiwgXCJmbGFnXCI6IFwiZmxhZy1jZFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctY2ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvbmdvXCIsIFwiZmxhZ1wiOiBcImZsYWctY2dcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN3aXR6ZXJsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctY2hcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkPDtHRlIGQnSXZvaXJlXCIsIFwiZmxhZ1wiOiBcImZsYWctY2lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvb2sgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWNrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaGlsZVwiLCBcImZsYWdcIjogXCJmbGFnLWNsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYW1lcm9vblwiLCBcImZsYWdcIjogXCJmbGFnLWNtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaGluYVwiLCBcImZsYWdcIjogXCJmbGFnLWNuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb2xvbWJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWNvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb3N0YSBSaWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctY3JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkN1YmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1jdVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2FibyBWZXJkZVwiLCBcImZsYWdcIjogXCJmbGFnLWN2XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDdXJhw6dhb1wiLCBcImZsYWdcIjogXCJmbGFnLWN3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaHJpc3RtYXMgSXNsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctY3hcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkN5cHJ1c1wiLCBcImZsYWdcIjogXCJmbGFnLWN5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDemVjaCBSZXB1YmxpY1wiLCBcImZsYWdcIjogXCJmbGFnLWN6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHZXJtYW55XCIsIFwiZmxhZ1wiOiBcImZsYWctZGVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkRqaWJvdXRpXCIsIFwiZmxhZ1wiOiBcImZsYWctZGpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkRlbm1hcmtcIiwgXCJmbGFnXCI6IFwiZmxhZy1ka1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRG9taW5pY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1kbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRG9taW5pY2FuIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctZG9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFsZ2VyaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1kelwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRWN1YWRvclwiLCBcImZsYWdcIjogXCJmbGFnLWVjXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFc3RvbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctZWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVneXB0XCIsIFwiZmxhZ1wiOiBcImZsYWctZWdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIldlc3Rlcm4gU2FoYXJhXCIsIFwiZmxhZ1wiOiBcImZsYWctZWhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVyaXRyZWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1lclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3BhaW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1lc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRXRoaW9waWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1ldFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRmlubGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWZpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGaWppXCIsIFwiZmxhZ1wiOiBcImZsYWctZmpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZhbGtsYW5kIElzbGFuZHMgKE1hbHZpbmFzKVwiLCBcImZsYWdcIjogXCJmbGFnLWZrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNaWNyb25lc2lhLCBGZWRlcmF0ZWQgU3RhdGVzIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctZm1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZhcm9lIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1mb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRnJhbmNlXCIsIFwiZmxhZ1wiOiBcImZsYWctZnJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdhYm9uXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2FcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVuaXRlZCBLaW5nZG9tIG9mIEdyZWF0IEJyaXRhaW4gYW5kIE5vcnRoZXJuIElyZWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1nYlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3JlbmFkYVwiLCBcImZsYWdcIjogXCJmbGFnLWdkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHZW9yZ2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZyZW5jaCBHdWlhbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1nZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3Vlcm5zZXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1nZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR2hhbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1naFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR2licmFsdGFyXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdyZWVubGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWdsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHYW1iaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1nbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3VpbmVhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ25cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1YWRlbG91cGVcIiwgXCJmbGFnXCI6IFwiZmxhZy1ncFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRXF1YXRvcmlhbCBHdWluZWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1ncVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3JlZWNlXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNvdXRoIEdlb3JnaWEgYW5kIHRoZSBTb3V0aCBTYW5kd2ljaCBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1YXRlbWFsYVwiLCBcImZsYWdcIjogXCJmbGFnLWd0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdWFtXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1aW5lYS1CaXNzYXVcIiwgXCJmbGFnXCI6IFwiZmxhZy1nd1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3V5YW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkhvbmcgS29uZ1wiLCBcImZsYWdcIjogXCJmbGFnLWhrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIZWFyZCBJc2xhbmQgYW5kIE1jRG9uYWxkIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1obVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSG9uZHVyYXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1oblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ3JvYXRpYVwiLCBcImZsYWdcIjogXCJmbGFnLWhyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIYWl0aVwiLCBcImZsYWdcIjogXCJmbGFnLWh0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIdW5nYXJ5XCIsIFwiZmxhZ1wiOiBcImZsYWctaHVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkluZG9uZXNpYVwiLCBcImZsYWdcIjogXCJmbGFnLWlkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJcmVsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctaWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIklzcmFlbFwiLCBcImZsYWdcIjogXCJmbGFnLWlsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJc2xlIG9mIE1hblwiLCBcImZsYWdcIjogXCJmbGFnLWltXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJbmRpYVwiLCBcImZsYWdcIjogXCJmbGFnLWluXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCcml0aXNoIEluZGlhbiBPY2VhbiBUZXJyaXRvcnlcIiwgXCJmbGFnXCI6IFwiZmxhZy1pb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSXJhcVwiLCBcImZsYWdcIjogXCJmbGFnLWlxXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJcmFuLCBJc2xhbWljIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctaXJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkljZWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1pc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSXRhbHlcIiwgXCJmbGFnXCI6IFwiZmxhZy1pdFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSmVyc2V5XCIsIFwiZmxhZ1wiOiBcImZsYWctamVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkphbWFpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1qbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSm9yZGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctam9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkphcGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctanBcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIktlbnlhXCIsIFwiZmxhZ1wiOiBcImZsYWcta2VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkt5cmd5enN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1rZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2FtYm9kaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1raFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS2lyaWJhdGlcIiwgXCJmbGFnXCI6IFwiZmxhZy1raVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29tb3Jvc1wiLCBcImZsYWdcIjogXCJmbGFnLWttXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBLaXR0cyBhbmQgTmV2aXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1rblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS29yZWEsIERlbW9jcmF0aWMgUGVvcGxlJ3MgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1rcFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS29yZWEsIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWcta3JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkt1d2FpdFwiLCBcImZsYWdcIjogXCJmbGFnLWt3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYXltYW4gSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWt5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLYXpha2hzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWcta3pcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxhbyBQZW9wbGUncyBEZW1vY3JhdGljIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctbGFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxlYmFub25cIiwgXCJmbGFnXCI6IFwiZmxhZy1sYlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgTHVjaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1sY1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGllY2h0ZW5zdGVpblwiLCBcImZsYWdcIjogXCJmbGFnLWxpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTcmkgTGFua2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1sa1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGliZXJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWxyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMZXNvdGhvXCIsIFwiZmxhZ1wiOiBcImZsYWctbHNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxpdGh1YW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLWx0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMdXhlbWJvdXJnXCIsIFwiZmxhZ1wiOiBcImZsYWctbHVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxhdHZpYVwiLCBcImZsYWdcIjogXCJmbGFnLWx2XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMaWJ5YVwiLCBcImZsYWdcIjogXCJmbGFnLWx5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb3JvY2NvXCIsIFwiZmxhZ1wiOiBcImZsYWctbWFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vbmFjb1wiLCBcImZsYWdcIjogXCJmbGFnLW1jXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb2xkb3ZhLCBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLW1kXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb250ZW5lZ3JvXCIsIFwiZmxhZ1wiOiBcImZsYWctbWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IE1hcnRpbiAoRnJlbmNoIHBhcnQpXCIsIFwiZmxhZ1wiOiBcImZsYWctbWZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hZGFnYXNjYXJcIiwgXCJmbGFnXCI6IFwiZmxhZy1tZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFyc2hhbGwgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLW1oXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWNlZG9uaWEsIHRoZSBmb3JtZXIgWXVnb3NsYXYgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1ta1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFsaVwiLCBcImZsYWdcIjogXCJmbGFnLW1sXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNeWFubWFyXCIsIFwiZmxhZ1wiOiBcImZsYWctbW1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vbmdvbGlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbW5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hY2FvXCIsIFwiZmxhZ1wiOiBcImZsYWctbW9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5vcnRoZXJuIE1hcmlhbmEgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLW1wXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYXJ0aW5pcXVlXCIsIFwiZmxhZ1wiOiBcImZsYWctbXFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hdXJpdGFuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1tclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTW9udHNlcnJhdFwiLCBcImZsYWdcIjogXCJmbGFnLW1zXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWx0YVwiLCBcImZsYWdcIjogXCJmbGFnLW10XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYXVyaXRpdXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1tdVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFsZGl2ZXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1tdlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFsYXdpXCIsIFwiZmxhZ1wiOiBcImZsYWctbXdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1leGljb1wiLCBcImZsYWdcIjogXCJmbGFnLW14XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWxheXNpYVwiLCBcImZsYWdcIjogXCJmbGFnLW15XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb3phbWJpcXVlXCIsIFwiZmxhZ1wiOiBcImZsYWctbXpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5hbWliaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1uYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmV3IENhbGVkb25pYVwiLCBcImZsYWdcIjogXCJmbGFnLW5jXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOaWdlclwiLCBcImZsYWdcIjogXCJmbGFnLW5lXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOb3Jmb2xrIElzbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLW5mXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOaWdlcmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbmdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5pY2FyYWd1YVwiLCBcImZsYWdcIjogXCJmbGFnLW5pXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOZXRoZXJsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLW5sXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOb3J3YXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1ub1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmVwYWxcIiwgXCJmbGFnXCI6IFwiZmxhZy1ucFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmF1cnVcIiwgXCJmbGFnXCI6IFwiZmxhZy1uclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTml1ZVwiLCBcImZsYWdcIjogXCJmbGFnLW51XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOZXcgWmVhbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLW56XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJPbWFuXCIsIFwiZmxhZ1wiOiBcImZsYWctb21cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhbmFtYVwiLCBcImZsYWdcIjogXCJmbGFnLXBhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQZXJ1XCIsIFwiZmxhZ1wiOiBcImZsYWctcGVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZyZW5jaCBQb2x5bmVzaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1wZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGFwdWEgTmV3IEd1aW5lYVwiLCBcImZsYWdcIjogXCJmbGFnLXBnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQaGlsaXBwaW5lc1wiLCBcImZsYWdcIjogXCJmbGFnLXBoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQYWtpc3RhblwiLCBcImZsYWdcIjogXCJmbGFnLXBrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQb2xhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1wbFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvblwiLCBcImZsYWdcIjogXCJmbGFnLXBtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQaXRjYWlyblwiLCBcImZsYWdcIjogXCJmbGFnLXBuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQdWVydG8gUmljb1wiLCBcImZsYWdcIjogXCJmbGFnLXByXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQYWxlc3RpbmUsIFN0YXRlIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctcHNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBvcnR1Z2FsXCIsIFwiZmxhZ1wiOiBcImZsYWctcHRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhbGF1XCIsIFwiZmxhZ1wiOiBcImZsYWctcHdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhcmFndWF5XCIsIFwiZmxhZ1wiOiBcImZsYWctcHlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlFhdGFyXCIsIFwiZmxhZ1wiOiBcImZsYWctcWFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlLDqXVuaW9uXCIsIFwiZmxhZ1wiOiBcImZsYWctcmVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlJvbWFuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1yb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2VyYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctcnNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlJ1c3NpYW4gRmVkZXJhdGlvblwiLCBcImZsYWdcIjogXCJmbGFnLXJ1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJSd2FuZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1yd1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2F1ZGkgQXJhYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctc2FcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNvbG9tb24gSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLXNiXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTZXljaGVsbGVzXCIsIFwiZmxhZ1wiOiBcImZsYWctc2NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN1ZGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctc2RcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN3ZWRlblwiLCBcImZsYWdcIjogXCJmbGFnLXNlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTaW5nYXBvcmVcIiwgXCJmbGFnXCI6IFwiZmxhZy1zZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgSGVsZW5hLCBBc2NlbnNpb24gYW5kIFRyaXN0YW4gZGEgQ3VuaGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1zaFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2xvdmVuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1zaVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3ZhbGJhcmQgYW5kIEphbiBNYXllblwiLCBcImZsYWdcIjogXCJmbGFnLXNqXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTbG92YWtpYVwiLCBcImZsYWdcIjogXCJmbGFnLXNrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTaWVycmEgTGVvbmVcIiwgXCJmbGFnXCI6IFwiZmxhZy1zbFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FuIE1hcmlub1wiLCBcImZsYWdcIjogXCJmbGFnLXNtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTZW5lZ2FsXCIsIFwiZmxhZ1wiOiBcImZsYWctc25cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNvbWFsaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1zb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3VyaW5hbWVcIiwgXCJmbGFnXCI6IFwiZmxhZy1zclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU291dGggU3VkYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1zc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FvIFRvbWUgYW5kIFByaW5jaXBlXCIsIFwiZmxhZ1wiOiBcImZsYWctc3RcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVsIFNhbHZhZG9yXCIsIFwiZmxhZ1wiOiBcImZsYWctc3ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNpbnQgTWFhcnRlbiAoRHV0Y2ggcGFydClcIiwgXCJmbGFnXCI6IFwiZmxhZy1zeFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3lyaWFuIEFyYWIgUmVwdWJsaWNcIiwgXCJmbGFnXCI6IFwiZmxhZy1zeVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3dhemlsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctc3pcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlR1cmtzIGFuZCBDYWljb3MgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLXRjXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDaGFkXCIsIFwiZmxhZ1wiOiBcImZsYWctdGRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZyZW5jaCBTb3V0aGVybiBUZXJyaXRvcmllc1wiLCBcImZsYWdcIjogXCJmbGFnLXRmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUb2dvXCIsIFwiZmxhZ1wiOiBcImZsYWctdGdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRoYWlsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctdGhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRhamlraXN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy10alwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVG9rZWxhdVwiLCBcImZsYWdcIjogXCJmbGFnLXRrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUaW1vci1MZXN0ZVwiLCBcImZsYWdcIjogXCJmbGFnLXRsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdXJrbWVuaXN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy10bVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVHVuaXNpYVwiLCBcImZsYWdcIjogXCJmbGFnLXRuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUb25nYVwiLCBcImZsYWdcIjogXCJmbGFnLXRvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdXJrZXlcIiwgXCJmbGFnXCI6IFwiZmxhZy10clwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVHJpbmlkYWQgYW5kIFRvYmFnb1wiLCBcImZsYWdcIjogXCJmbGFnLXR0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdXZhbHVcIiwgXCJmbGFnXCI6IFwiZmxhZy10dlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVGFpd2FuLCBQcm92aW5jZSBvZiBDaGluYVwiLCBcImZsYWdcIjogXCJmbGFnLXR3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUYW56YW5pYSwgVW5pdGVkIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctdHpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVrcmFpbmVcIiwgXCJmbGFnXCI6IFwiZmxhZy11YVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVWdhbmRhXCIsIFwiZmxhZ1wiOiBcImZsYWctdWdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVuaXRlZCBTdGF0ZXMgTWlub3IgT3V0bHlpbmcgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLXVtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy11c1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVXJ1Z3VheVwiLCBcImZsYWdcIjogXCJmbGFnLXV5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVemJla2lzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctdXpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkhvbHkgU2VlXCIsIFwiZmxhZ1wiOiBcImZsYWctdmFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IFZpbmNlbnQgYW5kIHRoZSBHcmVuYWRpbmVzXCIsIFwiZmxhZ1wiOiBcImZsYWctdmNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlZlbmV6dWVsYSwgQm9saXZhcmlhbiBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLXZlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWaXJnaW4gSXNsYW5kcywgQnJpdGlzaFwiLCBcImZsYWdcIjogXCJmbGFnLXZnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWaXJnaW4gSXNsYW5kcywgVS5TLlwiLCBcImZsYWdcIjogXCJmbGFnLXZpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWaWV0IE5hbVwiLCBcImZsYWdcIjogXCJmbGFnLXZuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWYW51YXR1XCIsIFwiZmxhZ1wiOiBcImZsYWctdnVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIldhbGxpcyBhbmQgRnV0dW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctd2ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhbW9hXCIsIFwiZmxhZ1wiOiBcImZsYWctd3NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlllbWVuXCIsIFwiZmxhZ1wiOiBcImZsYWcteWVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1heW90dGVcIiwgXCJmbGFnXCI6IFwiZmxhZy15dFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU291dGggQWZyaWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctemFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlphbWJpYVwiLCBcImZsYWdcIjogXCJmbGFnLXptXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJaaW1iYWJ3ZVwiLCBcImZsYWdcIjogXCJmbGFnLXp3XCIgfSxcclxuICAgIF07XHJcbiAgICByZXR1cm4gY291bnRyaWVzLmZpbHRlcihmdW5jdGlvbihjb3VudHJ5KSB7XHJcbiAgICAgIHJldHVybiBjb3VudHJ5Lm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCRxdWVyeS50b0xvd2VyQ2FzZSgpKSAhPSAtMTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignU2tpbGxzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICR3aW5kb3cpIHtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdGVkU2tpbGwgPSAwO1xyXG4gICRzY29wZS5za2lsbHNWaXNpYmxlID0gZmFsc2U7XHJcblxyXG4gICRzY29wZS5sYWJlbHMgPSBbXCJEb3dubG9hZCBTYWxlc1wiLCBcIkluLVN0b3JlIFNhbGVzXCIsIFwiTWFpbC1PcmRlciBTYWxlc1wiXTtcclxuICAkc2NvcGUuZGF0YSA9IFszMDAsIDUwMCwgMTAwXTtcclxuXHJcbiAgJC5nZXRKU09OKCcvc2tpbGxzLmpzb24nLCBmdW5jdGlvbiggZGF0YSApIHtcclxuICAgICRzY29wZS5za2lsbHMgPSBkYXRhLmZpbHRlcihmdW5jdGlvbihza2lsbCkge1xyXG4gICAgICByZXR1cm4gc2tpbGwuZW5hYmxlZDtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5zZXRTZWxlY3RlZFNraWxsID0gZnVuY3Rpb24gKHNraWxsKSB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZFNraWxsID0gc2tpbGw7XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZFNraWxsLmNoYXJ0T3B0aW9ucyA9IHtcclxuICAgICAgICBjdXRvdXRQZXJjZW50YWdlIDogODAsXHJcbiAgICAgICAgY2lyY3VtZmVyZW5jZTogMiAqIE1hdGguUEksXHJcbiAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogdHJ1ZSxcclxuICAgICAgICB0b29sdGlwczoge1xyXG4gICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZFNraWxsLmNoYXJ0U3R5bGUgPSB7XHJcbiAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKC9za2lsbHMvJyArICRzY29wZS5zZWxlY3RlZFNraWxsLmltYWdlICsgJyknLFxyXG4gICAgICAgICdiYWNrZ3JvdW5kLXJlcGVhdCc6ICduby1yZXBlYXQnLFxyXG4gICAgICAgICdiYWNrZ3JvdW5kLXNpemUnOiAnNjAlJyxcclxuICAgICAgICAnYmFja2dyb3VuZC1wb3NpdGlvbic6ICc1MCUgNTAlJ1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuc2V0U2VsZWN0ZWRTa2lsbCgkc2NvcGUuc2tpbGxzWzBdKTtcclxuXHJcbiAgICAvKlxyXG4gICAgaGFsZiBjaXJjbGUgc2tpbGwgd2hlZWwgdGhhdCBkaWRuJ3QgdHVybiBvdXQgZ3JlYXRcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRpc3BsYXk6ICRzY29wZS5za2lsbHNWaXNpYmxlID8gJ2Jsb2NrJyA6ICdub25lJyxcclxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgIGxlZnQ6ICRzY29wZS53aGVlbFdpZHRoIC8gMiAqIE1hdGguY29zKGkgKiAoTWF0aC5QSSAvICgkc2NvcGUuc2tpbGxzLmxlbmd0aCAtIDEpKSkgKyAkc2NvcGUud2hlZWxXaWR0aCAvIDIgLSAkc2NvcGUud2hlZWxXaWR0aCAqIDAuMDI1LFxyXG4gICAgICB0b3A6IE1hdGguc2luKGkgKiAoTWF0aC5QSSAvICgkc2NvcGUuc2tpbGxzLmxlbmd0aCAtIDEpKSkgKiAkKCcuc2VsZWN0ZWQtc2tpbGwnKS5oZWlnaHQoKSAqIDIuNSxcclxuICAgICAgd2lkdGg6ICRzY29wZS53aGVlbFdpZHRoICogMC4wNSxcclxuICAgICAgaGVpZ2h0OiAkc2NvcGUud2hlZWxXaWR0aCAqIDAuMDVcclxuICAgIH07XHJcbiAgICAqL1xyXG5cclxuICAgICRzY29wZS4kYXBwbHkoKTtcclxuICB9KTtcclxuXHJcbn0pO1xyXG4iLCIvKmpzbGludCBlc3ZlcnNpb246IDYqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAvL0FuZ3VsYXJKcyBjYW4ndCBoYXZlIGFuIGFycm93IGZ1bmN0aW9uIGhlcmVcclxuICAuY29udHJvbGxlcignVGVuVGhpbmdzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgQm90U3ZjKSB7XHJcbiAgICAkc2NvcGUuc2VhcmNoID0ge1xyXG4gICAgICBuYW1lOiAnJyxcclxuICAgICAgdmFsdWVzOiAnJ1xyXG4gICAgfTtcclxuICAgIEJvdFN2Yy5nZXRDYXRlZ29yaWVzKClcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzID0gJHNjb3BlLmNhdGVnb3JpZXMubWFwKGNhdGVnb3J5ID0+IGNhdGVnb3J5KTtcclxuICAgICAgICAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzLnB1c2goJ0FsbCcpO1xyXG4gICAgICAgICRzY29wZS5jYXRlZ29yeUZpbHRlcnMucHVzaCgnQmxhbmsnKTtcclxuICAgICAgICAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIgPSAnQWxsJztcclxuICAgICAgICAkc2NvcGUudXBkYXRlRmlsdGVyID0gJ2FsbCc7XHJcbiAgICAgIH0pO1xyXG4gICAgQm90U3ZjLmdldExhbmd1YWdlcygpXHJcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAkc2NvcGUubGFuZ3VhZ2VzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLmtleURvd24gPSBlID0+IHtcclxuICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xyXG4gICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgIGlmICgkKFwiI25ldy1ibHVyYlwiKS5pcyhcIjpmb2N1c1wiKSkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAkc2NvcGUuYWRkVmFsdWUoKTtcclxuICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTM6XHJcbiAgICAgICAgICBpZiAoJChcIiNuZXctYmx1cmJcIikuaXMoXCI6Zm9jdXNcIikpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmFkZFZhbHVlKCk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKCQoXCIjbmV3LXZhbHVlXCIpLmlzKFwiOmZvY3VzXCIpKSB7XHJcbiAgICAgICAgICAgICQoJyNuZXctYmx1cmInKS5mb2N1cygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuXHJcbiAgICAgIH1cclxuICAgICAgLy8gdXNlIGUua2V5Q29kZVxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgJHNjb3BlLnNlYXJjaE5hbWUgPSAnJztcclxuICAgICRzY29wZS5uZXdJdGVtID0ge307XHJcblxyXG4gICAgJHNjb3BlLnNldENhdGVnb3J5RmlsdGVyID0gY2F0ZWdvcnkgPT4gJHNjb3BlLmNhdGVnb3J5RmlsdGVyID0gY2F0ZWdvcnk7XHJcbiAgICAkc2NvcGUuc2V0VXNlckZpbHRlciA9IHVzZXIgPT4gJHNjb3BlLnVzZXJGaWx0ZXIgPSB1c2VyO1xyXG4gICAgJHNjb3BlLnNldFVwZGF0ZUZpbHRlciA9IHR5cGUgPT4gJHNjb3BlLnVwZGF0ZUZpbHRlciA9IHR5cGU7XHJcblxyXG4gICAgJHNjb3BlLmZpbHRlcmVkTGlzdHMgPSAoKSA9PiB7XHJcbiAgICAgIGlmICghJHNjb3BlLmxpc3RzKSByZXR1cm4gW107XHJcbiAgICAgIHJldHVybiAkc2NvcGUubGlzdHMuZmlsdGVyKCh7XHJcbiAgICAgICAgY2F0ZWdvcmllcyxcclxuICAgICAgICBpc0R5bmFtaWMsXHJcbiAgICAgICAgY3JlYXRvclxyXG4gICAgICB9KSA9PiB7XHJcbiAgICAgICAgaWYgKCRzY29wZS51cGRhdGVGaWx0ZXIgIT09ICdhbGwnKSB7XHJcbiAgICAgICAgICBpZiAoKCRzY29wZS51cGRhdGVGaWx0ZXIgPT09ICdzdGF0aWMnICYmIGlzRHluYW1pYyA9PT0gdHJ1ZSkgfHwgKCRzY29wZS51cGRhdGVGaWx0ZXIgPT09ICdkeW5hbWljJyAmJiBpc0R5bmFtaWMgPT09IGZhbHNlKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJHNjb3BlLmNhdGVnb3J5RmlsdGVyID09PSAnQWxsJyAmJiAkc2NvcGUudXNlckZpbHRlciA9PT0gJ0FsbCcpIHtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNhdGVnb3J5RmlsdGVyICE9PSAnQWxsJyAmJiAkc2NvcGUudXNlckZpbHRlciA9PT0gJ0FsbCcpIHtcclxuICAgICAgICAgIGlmIChjYXRlZ29yaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhdGVnb3JpZXMuaW5kZXhPZigkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIpID49IDA7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLmNhdGVnb3J5RmlsdGVyID09PSAnQmxhbmsnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNhdGVnb3J5RmlsdGVyID09PSAnQWxsJyAmJiAkc2NvcGUudXNlckZpbHRlciAhPT0gJ0FsbCcpIHtcclxuICAgICAgICAgIHJldHVybiBjcmVhdG9yID09PSAkc2NvcGUudXNlckZpbHRlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKGNhdGVnb3JpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2F0ZWdvcmllcy5pbmRleE9mKCRzY29wZS5jYXRlZ29yeUZpbHRlcikgPj0gMCAmJiBjcmVhdG9yID09PSAkc2NvcGUudXNlckZpbHRlcjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIgPT09ICdCbGFuaycgJiYgY3JlYXRvciA9PT0gJHNjb3BlLnVzZXJGaWx0ZXI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLiRvbignbG9naW4nLCBfID0+IHtcclxuICAgICAgJHNjb3BlLmdldExpc3RzKCk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgJHNjb3BlLnNvcnQgPSAoc29ydFZhbHVlLCBzb3J0TGFiZWwpID0+IHtcclxuICAgICAgJHNjb3BlLnNvcnRMYWJlbCA9IHNvcnRMYWJlbDtcclxuICAgICAgaWYgKCRzY29wZS5zb3J0VmFsdWUgPT09IHNvcnRWYWx1ZSkge1xyXG4gICAgICAgICRzY29wZS5zb3J0RGlyZWN0aW9uID0gISRzY29wZS5zb3J0RGlyZWN0aW9uO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICRzY29wZS5zb3J0VmFsdWUgPSBzb3J0VmFsdWU7XHJcbiAgICAgICAgJHNjb3BlLnNvcnREaXJlY3Rpb24gPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgICRzY29wZS5zb3J0ZXIgPSAoJHNjb3BlLnNvcnREaXJlY3Rpb24gPyAnKycgOiAnLScpICsgJHNjb3BlLnNvcnRWYWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnNvcnRMaXN0ID0gJ3ZhbHVlJztcclxuICAgICRzY29wZS5zb3J0VmFsdWUgPSAnZGF0ZSc7XHJcbiAgICAkc2NvcGUuc29ydERpcmVjdGlvbiA9IHRydWU7XHJcbiAgICAkc2NvcGUuc29ydCgnZGF0ZScsICdDcmVhdGlvbiBEYXRlJyk7XHJcblxyXG4gICAgJHNjb3BlLmdldENhdGVnb3J5Q291bnQgPSBjYXRlZ29yeSA9PiB7XHJcbiAgICAgIGlmICghJHNjb3BlLmxpc3RzKSByZXR1cm4gMDtcclxuICAgICAgcmV0dXJuICRzY29wZS5saXN0cy5maWx0ZXIobGlzdCA9PiAoY2F0ZWdvcnkgPT09ICdBbGwnIHx8IGxpc3QuY2F0ZWdvcmllcy5pbmRleE9mKGNhdGVnb3J5KSA+PSAwKSAmJiAoJHNjb3BlLnVzZXJGaWx0ZXIgPT09ICdBbGwnIHx8IGxpc3QuY3JlYXRvciA9PT0gJHNjb3BlLnVzZXJGaWx0ZXIpICYmICgkc2NvcGUudXBkYXRlRmlsdGVyID09PSAnYWxsJyB8fCBsaXN0LmlzRHluYW1pYyA9PT0gKCRzY29wZS51cGRhdGVGaWx0ZXIgPT09ICdkeW5hbWljJykpKS5sZW5ndGg7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRVcGRhdGVDb3VudCA9IHR5cGUgPT4ge1xyXG4gICAgICBpZiAoISRzY29wZS5saXN0cykgcmV0dXJuIDA7XHJcbiAgICAgIHJldHVybiAkc2NvcGUubGlzdHMuZmlsdGVyKGxpc3QgPT4gdHlwZSA9PT0gJ2FsbCcgfHwgKGxpc3QuaXNEeW5hbWljICYmIHR5cGUgPT09ICdkeW5hbWljJykgfHwgKCFsaXN0LmlzRHluYW1pYyAmJiB0eXBlID09PSAnc3RhdGljJykpLmxlbmd0aDtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLmdldExpc3RzID0gKCkgPT4ge1xyXG4gICAgICBpZiAoISRzY29wZS5sb2FkaW5nKSB7XHJcbiAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgIEJvdFN2Yy5nZXRMaXN0cygkc2NvcGUuY3VycmVudFVzZXIpXHJcbiAgICAgICAgICAudGhlbigoe1xyXG4gICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICB9KSA9PiB7XHJcbiAgICAgICAgICAgICRzY29wZS5saXN0cyA9IGRhdGE7XHJcbiAgICAgICAgICAgICRzY29wZS51c2VyRmlsdGVycyA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUudXNlckZpbHRlcnMuQWxsID0gJHNjb3BlLmxpc3RzLmxlbmd0aDtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJGaWx0ZXJzID0gJHNjb3BlLmxpc3RzLnNvcnQoKGxpc3QxLCBsaXN0MikgPT4gbGlzdDEuY3JlYXRvciA+IGxpc3QyLmNyZWF0b3IpLnJlZHVjZSgodXNlcnMsIHtcclxuICAgICAgICAgICAgICBjcmVhdG9yXHJcbiAgICAgICAgICAgIH0pID0+IHtcclxuICAgICAgICAgICAgICBpZiAoIXVzZXJzW2NyZWF0b3JdKSB1c2Vyc1tjcmVhdG9yXSA9IDA7XHJcbiAgICAgICAgICAgICAgdXNlcnNbY3JlYXRvcl0rKztcclxuICAgICAgICAgICAgICByZXR1cm4gdXNlcnM7XHJcbiAgICAgICAgICAgIH0sICRzY29wZS51c2VyRmlsdGVycyk7XHJcbiAgICAgICAgICAgICRzY29wZS51c2VyQ291bnQgPSBPYmplY3Qua2V5cygkc2NvcGUudXNlckZpbHRlcnMpLmxlbmd0aDtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJGaWx0ZXJzID0gc29ydE9iamVjdCgkc2NvcGUudXNlckZpbHRlcnMsIGZhbHNlKTtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJGaWx0ZXIgPSAnQWxsJztcclxuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zZWxlY3RMaXN0ID0gbGlzdCA9PiB7XHJcbiAgICAgIEJvdFN2Yy5nZXRMaXN0KGxpc3QpXHJcbiAgICAgICAgLnRoZW4oKHtcclxuICAgICAgICAgIGRhdGFcclxuICAgICAgICB9KSA9PiB7XHJcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0ID0gZGF0YTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnNlbGVjdENhdGVnb3J5ID0gY2F0ZWdvcnkgPT4ge1xyXG4gICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3J5ID0gY2F0ZWdvcnk7XHJcbiAgICAgICQoJyNjYXRlZ29yeS1zZWxlY3QnKS5oaWRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRDYXRlZ29yeUNsYXNzID0gY2F0ZWdvcnkgPT4ge1xyXG4gICAgICByZXR1cm4gJHNjb3BlLnNlbGVjdGVkTGlzdCAmJiAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSkgPj0gMCA/ICdidG4tc3VjY2VzcycgOiAnYnRuLWRlZmF1bHQnO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUudG9nZ2xlQ2F0ZWdvcnkgPSBjYXRlZ29yeSA9PiB7XHJcbiAgICAgIGNvbnN0IGNhdGVnb3J5SW5kZXggPSAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSk7XHJcbiAgICAgIGlmIChjYXRlZ29yeUluZGV4ID49IDApIHtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuc3BsaWNlKGNhdGVnb3J5SW5kZXgsIDEpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5wdXNoKGNhdGVnb3J5KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuc2VsZWN0TGFuZ3VhZ2UgPSBsYW5ndWFnZSA9PiB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZExpc3QubGFuZ3VhZ2UgPSBsYW5ndWFnZS5jb2RlO1xyXG4gICAgICBjb25zdCBub25FbmdsaXNoSW5kZXggPSAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuaW5kZXhPZignTm9uLUVuZ2xpc2gnKTtcclxuICAgICAgaWYgKGxhbmd1YWdlLmNvZGUgIT09ICdFTicgJiYgbm9uRW5nbGlzaEluZGV4IDwgMCkge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5wdXNoKCdOb24tRW5nbGlzaCcpO1xyXG4gICAgICB9IGVsc2UgaWYgKGxhbmd1YWdlLmNvZGUgPT09ICdFTicgJiYgbm9uRW5nbGlzaEluZGV4ID49IDApIHtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuc3BsaWNlKG5vbkVuZ2xpc2hJbmRleCwgMSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLmFkZExpc3QgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRMYW5ndWFnZSA9ICRzY29wZS5zZWxlY3RlZExpc3QgPyAkc2NvcGUuc2VsZWN0ZWRMaXN0Lmxhbmd1YWdlIDogJ0VOJztcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdCA9IHtcclxuICAgICAgICBuYW1lOiAnJyxcclxuICAgICAgICBjcmVhdG9yOiAkc2NvcGUuY3VycmVudFVzZXIuX2lkLFxyXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgdmFsdWVzOiBbXSxcclxuICAgICAgICBhbnN3ZXJzOiAwLFxyXG4gICAgICAgIGlzRHluYW1pYzogdHJ1ZSxcclxuICAgICAgICBjYXRlZ29yeTogJycsXHJcbiAgICAgICAgY2F0ZWdvcmllczogW10sXHJcbiAgICAgICAgbGFuZ3VhZ2U6IGN1cnJlbnRMYW5ndWFnZVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuYWRkVmFsdWUgPSAoKSA9PiB7XHJcbiAgICAgIGlmICgkc2NvcGUubmV3SXRlbS52YWx1ZSkge1xyXG4gICAgICAgIGlmIChfLnNvbWUoJHNjb3BlLnNlbGVjdGVkTGlzdC52YWx1ZXMsIHZhbHVlID0+IHZhbHVlID09ICRzY29wZS5uZXdJdGVtLnZhbHVlKSkge1xyXG4gICAgICAgICAgYWxlcnQoYCR7JHNjb3BlLm5ld0l0ZW0udmFsdWV9IGlzIGFscmVhZHkgaW4gdGhlIGxpc3RgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJHNjb3BlLm5ld0l0ZW0uY3JlYXRvciA9ICRzY29wZS5jdXJyZW50VXNlci5faWQ7XHJcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcy51bnNoaWZ0KEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoJHNjb3BlLm5ld0l0ZW0pKSk7XHJcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LmFuc3dlcnMrKztcclxuICAgICAgICAgICRzY29wZS5uZXdJdGVtLnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAkc2NvcGUubmV3SXRlbS5ibHVyYiA9ICcnO1xyXG4gICAgICAgICAgaWYgKCRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLmxlbmd0aCA+PSAxMCAmJiAkc2NvcGUuc2VsZWN0ZWRMaXN0Lm5hbWUgJiYgJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAkKCcjbmV3LXZhbHVlJykuZm9jdXMoKTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnJlcG9ydExpc3QgPSBsaXN0ID0+IHtcclxuICAgICAgbGlzdC5yZXBvcnRlZCA9IHRydWU7XHJcbiAgICAgIEJvdFN2Yy5yZXBvcnRMaXN0KCRzY29wZS5jdXJyZW50VXNlciwgbGlzdCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zYXZlTGlzdCA9IGxpc3QgPT4ge1xyXG4gICAgICBpZiAoISRzY29wZS5zYXZpbmcpIHtcclxuICAgICAgICBsaXN0LnZhbHVlcyA9IGxpc3QudmFsdWVzLmZpbHRlcigoe1xyXG4gICAgICAgICAgdmFsdWVcclxuICAgICAgICB9KSA9PiB2YWx1ZSk7XHJcbiAgICAgICAgaWYgKGxpc3QudmFsdWVzLmxlbmd0aCA+PSAxMCAmJiBsaXN0Lm5hbWUgJiYgbGlzdC5jYXRlZ29yaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICRzY29wZS5zYXZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgQm90U3ZjLnNhdmVMaXN0KCRzY29wZS5jdXJyZW50VXNlciwgbGlzdClcclxuICAgICAgICAgICAgLnRoZW4oKHtcclxuICAgICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgIH0pID0+IHtcclxuICAgICAgICAgICAgICBpZiAoISRzY29wZS5zZWxlY3RlZExpc3QuX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdHMudW5zaGlmdChkYXRhKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RMaXN0KGRhdGEpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8ICRzY29wZS5saXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxpc3RzW2ldLl9pZCA9PT0gZGF0YS5faWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdHNbaV0gPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0TGlzdChsaXN0KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgJHNjb3BlLnNhdmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAkc2NvcGUuc2F2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobGlzdC52YWx1ZXMubGVuZ3RoIDwgMTApIHtcclxuICAgICAgICAgIGFsZXJ0KCdMaXN0cyBtdXN0IGNvbnRhaW4gMTAgb3IgbW9yZSB2YWx1ZXMhJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICghbGlzdC5uYW1lKSB7XHJcbiAgICAgICAgICBmbGFzaCgnI2xpc3QtbmFtZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBmbGFzaCgnLmxpc3QtY2F0ZWdvcnknKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZmxhc2goZWxlbWVudCkge1xyXG4gICAgICBjb25zdCBjb2xvciA9ICQoZWxlbWVudCkuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiKTtcclxuICAgICAgJChlbGVtZW50KS5hbmltYXRlKHtcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI0ZBODA3MlwiXHJcbiAgICAgIH0sIDEwMCwgKCkgPT4ge1xyXG4gICAgICAgICQoZWxlbWVudCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yXHJcbiAgICAgICAgfSwgMTAwKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLmRlbGV0ZUxpc3QgPSBsaXN0ID0+IHtcclxuICAgICAgaWYgKCFsaXN0Ll9pZCkge1xyXG4gICAgICAgICRzY29wZS5saXN0cyA9ICRzY29wZS5saXN0cy5maWx0ZXIoKHtcclxuICAgICAgICAgIF9pZFxyXG4gICAgICAgIH0pID0+IF9pZCk7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdCA9IG51bGw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBsaXN0PycpKSB7XHJcbiAgICAgICAgICBCb3RTdmMuZGVsZXRlTGlzdChsaXN0KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLmdldExpc3RzKCk7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdCA9IG51bGw7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUubGlzdEJ1dHRvbkNsYXNzID0gbGlzdCA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbHVlcyA9IGxpc3QudmFsdWVzO1xyXG4gICAgICBjb25zdCBibHVyYnMgPSBsaXN0LmJsdXJicztcclxuICAgICAgaWYgKHZhbHVlcyA9PT0gYmx1cmJzICYmIGxpc3QuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICByZXR1cm4gJ2J0bi1kZWZhdWx0JztcclxuICAgICAgfSBlbHNlIGlmIChibHVyYnMgPT09IDAgJiYgIWxpc3QuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICByZXR1cm4gJ2J0bi13YXJuaW5nJztcclxuICAgICAgfSBlbHNlIGlmIChibHVyYnMgPT09IDAgJiYgbGlzdC5kZXNjcmlwdGlvbikge1xyXG4gICAgICAgIHJldHVybiAnYnRuLWluZm8nO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnYnRuLXByaW1hcnknO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRNb3ZpZVBpY3MgPSAoKSA9PiB7XHJcbiAgICAgIEJvdFN2Yy5nZXRNb3ZpZVBpY3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbihyZXNwb25zZSA9PiAkc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRBY3RvclBpY3MgPSAoKSA9PiB7XHJcbiAgICAgIEJvdFN2Yy5nZXRBY3RvclBpY3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbihyZXNwb25zZSA9PiAkc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5nZXRCb29rUGljcyA9ICgpID0+IHtcclxuICAgICAgQm90U3ZjLmdldEJvb2tQaWNzKCRzY29wZS5zZWxlY3RlZExpc3QpLnRoZW4ocmVzcG9uc2UgPT4gJHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0TXVzaWNWaWRlb3MgPSAoKSA9PiB7XHJcbiAgICAgIEJvdFN2Yy5nZXRNdXNpY1ZpZGVvcygkc2NvcGUuc2VsZWN0ZWRMaXN0KS50aGVuKHJlc3BvbnNlID0+ICRzY29wZS5zZWxlY3RMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpKTtcclxuICAgIH07XHJcblxyXG4gIH0pOyIsIi8qanNsaW50IGVzdmVyc2lvbjogNiovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gIC8vQW5ndWxhckpzIGNhbid0IGhhdmUgYW4gYXJyb3cgZnVuY3Rpb24gaGVyZVxyXG4gIC5jb250cm9sbGVyKCdUZW5UaGluZ3NBZG1pbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIEJvdFN2YywgVXNlclN2Yykge1xyXG5cclxuICAgICRzY29wZS4kb24oJ2xvZ2luJywgXyA9PiB7XHJcbiAgICAgIGlmICgkc2NvcGUuY3VycmVudFVzZXIuYWRtaW4pIHtcclxuICAgICAgICBnZXRVc2VycygpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0UXVldWUgPSAoKSA9PiB7XHJcbiAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgQm90U3ZjLmdldFF1ZXVlKCkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgJHNjb3BlLnF1ZXVlID0gcmVzcG9uc2UuZGF0YS5yZXBsYWNlKCcvbicsICc8YnIvPicpO1xyXG4gICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgICRzY29wZS5nZXRRdWV1ZSgpO1xyXG5cclxuICAgIEJvdFN2Yy5nZXRQYXVzZSgpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAkc2NvcGUucGF1c2VkID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgY29uc29sZS5sb2coJHNjb3BlLnBhdXNlZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBnZXRVc2VycyA9ICgpID0+IHtcclxuICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICBVc2VyU3ZjLmdldFVzZXJzKCkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgJHNjb3BlLnVzZXJzID0gcmVzcG9uc2UuZGF0YS5maWx0ZXIodXNlciA9PiAhdXNlci5hZG1pbik7XHJcbiAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS50b2dnbGVCYW4gPSB1c2VyID0+IHtcclxuICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICBVc2VyU3ZjLnRvZ2dsZUJhbih1c2VyLl9pZClcclxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICBnZXRVc2VycygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUudG9nZ2xlUGF1c2UgPSB1c2VyID0+IHtcclxuICAgICAgQm90U3ZjLnRvZ2dsZVBhdXNlKClcclxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAkc2NvcGUucGF1c2VkID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5wYXVzZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1dvcmtvdXRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xyXG5cclxuICAkc2NvcGUudGltZVJlbWFpbmluZyA9IDA7XHJcbiAgJHNjb3BlLnRpbWVFeGVyY2lzaW5nID0gMzA7XHJcbiAgJHNjb3BlLnRpbWVSZXN0aW5nID0gMTA7XHJcbiAgJHNjb3BlLnJlc3QgPSBmYWxzZTtcclxuXHJcbiAgdmFyIHNvdW5kcyA9IHtcclxuICAgIG9uOiBuZXcgQXVkaW8oJ29uLndhdicpLFxyXG4gICAgb2ZmOiBuZXcgQXVkaW8oJ29mZi53YXYnKSxcclxuICAgIHN3aXRjaDogbmV3IEF1ZGlvKCdzd2l0Y2gud2F2JyksXHJcbiAgfTtcclxuXHJcblxyXG4gIHZhciBleGVyY2lzZXMgPSBbXHJcbiAgICB7bmFtZTogJ0p1bXBpbmcgSmFja3MnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdXYWxsIFNpdCcsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1B1c2gtVXAnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdDcnVuY2gnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdTdGVwLVVwJywgc3BsaXQ6IHRydWV9LFxyXG4gICAge25hbWU6ICdTcXVhdCcsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1RyaWNlcHMgRGlwJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnUGxhbmsnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdIaWdoIEtuZWVzJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnTHVuZ2UnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdQdXNoLVVwIHdpdGggUm90YXRpb24nLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdTaWRlIFBsYW5rJywgc3BsaXQ6IHRydWV9XHJcbiAgXTtcclxuXHJcbiAgdmFyIGV4ZXJjaXNpbmc7XHJcblxyXG4gICRzY29wZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIChleGVyY2lzZXMubGVuZ3RoIC0gTWF0aC5mbG9vcigkc2NvcGUudGltZVJlbWFpbmluZyAvICgkc2NvcGUudGltZUV4ZXJjaXNpbmcgKyAkc2NvcGUudGltZVJlc3RpbmcpKSkgKyAnLycgKyBleGVyY2lzZXMubGVuZ3RoO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS53b3Jrb3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZXhjZXJjaXNlVGltZSA9ICRzY29wZS50aW1lRXhlcmNpc2luZyArICRzY29wZS50aW1lUmVzdGluZztcclxuICAgIGlmICghJHNjb3BlLnRpbWVSZW1haW5pbmcpIHtcclxuICAgICAgJHNjb3BlLnRpbWVSZW1haW5pbmcgPSBleGVyY2lzZXMubGVuZ3RoICogZXhjZXJjaXNlVGltZTtcclxuICAgICAgZXhlcmNpc2luZyA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICRzY29wZS50aW1lUmVtYWluaW5nLS07XHJcbiAgICAgICAgaWYgKCRzY29wZS50aW1lUmVtYWluaW5nID09PSAwKSB7XHJcbiAgICAgICAgICAkc2NvcGUuZXhlcmNpc2UgPSB7bmFtZTogJ0ZpbmlzaGVkISBDb25ncmF0cyEnLCBzcGxpdDogZmFsc2V9O1xyXG4gICAgICAgICAgJHNjb3BlLnRpbWVyID0gJyc7XHJcbiAgICAgICAgICAkc2NvcGUudGltZVJlbWFpbmluZyA9IDA7XHJcbiAgICAgICAgICAkc2NvcGUucmVzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgcmV0dXJuIGNsZWFySW50ZXJ2YWwoZXhlcmNpc2luZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjdXJyZW50RXhlcmNpc2UgPSBNYXRoLmZsb29yKCRzY29wZS50aW1lUmVtYWluaW5nIC8gZXhjZXJjaXNlVGltZSk7XHJcbiAgICAgICAgdmFyIHRpbWVyID0gJHNjb3BlLnRpbWVSZW1haW5pbmcgLSBjdXJyZW50RXhlcmNpc2UgKiBleGNlcmNpc2VUaW1lO1xyXG4gICAgICAgICRzY29wZS50aW1lciA9IHRpbWVyID4gJHNjb3BlLnRpbWVFeGVyY2lzaW5nID8gdGltZXIgLSAkc2NvcGUudGltZUV4ZXJjaXNpbmcgOiB0aW1lcjtcclxuICAgICAgICBpZiAodGltZXIgPiAkc2NvcGUudGltZUV4ZXJjaXNpbmcpIHtcclxuICAgICAgICAgICRzY29wZS5yZXN0ID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJHNjb3BlLnJlc3QgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLmV4ZXJjaXNlID0gZXhlcmNpc2VzW2V4ZXJjaXNlcy5sZW5ndGggLSBjdXJyZW50RXhlcmNpc2UgLSAxXTtcclxuICAgICAgICBpZiAodGltZXIgPT09ICRzY29wZS50aW1lRXhlcmNpc2luZykge1xyXG4gICAgICAgICAgc291bmRzLm9uLnBsYXkoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRpbWVyID09PSAwKSB7XHJcbiAgICAgICAgICBzb3VuZHMub2ZmLnBsYXkoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5leGVyY2lzZS5zcGxpdCAmJiB0aW1lciA9PT0gTWF0aC5mbG9vcigkc2NvcGUudGltZUV4ZXJjaXNpbmcgLyAyKSkge1xyXG4gICAgICAgICAgc291bmRzLnN3aXRjaC5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjbGVhckludGVydmFsKGV4ZXJjaXNpbmcpO1xyXG4gICAgICAkc2NvcGUudGltZXIgPSAnJztcclxuICAgICAgJHNjb3BlLnRpbWVSZW1haW5pbmcgPSAwO1xyXG4gICAgICAkc2NvcGUucmVzdCA9IGZhbHNlO1xyXG4gICAgICAkc2NvcGUuZXhlcmNpc2UgPSB7bmFtZTogJycsIHNwbGl0OiBmYWxzZX07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuXHQuZGlyZWN0aXZlKCdoZWFkJywgW1xyXG5cdFx0JyRyb290U2NvcGUnLFxyXG5cdFx0JyRzdGF0ZScsXHJcblx0XHQnJGNvbXBpbGUnLFxyXG5cdFx0JyRpbnRlcnBvbGF0ZScsXHJcblx0XHRmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHN0YXRlLCAkY29tcGlsZSwgJGludGVycG9sYXRlKSB7XHJcblxyXG5cdFx0XHR2YXIgZ2V0U3R5bGUgPSBmdW5jdGlvbiBnZXRTdHlsZSh0ZW1wbGF0ZVN0eWxlVXJsKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzdHlsZSA9IHtcclxuXHRcdFx0XHRcdGhyZWY6IHRlbXBsYXRlU3R5bGVVcmwsXHJcblx0XHRcdFx0XHRyZWw6ICdzdHlsZXNoZWV0J1xyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdGlmIChzdHlsZS5ocmVmLm1hdGNoKC9cXC5sZXNzJC8pKSB7XHJcblx0XHRcdFx0XHRzdHlsZS5yZWwgPSAnc3R5bGVzaGVldC9sZXNzJztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBzdHlsZTtcclxuXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHR2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gZ2V0U3R5bGVzKHN0YXRlKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzdGF0ZXMgPSB7fTtcclxuXHJcblx0XHRcdFx0Ly9DaGVjayBzdGF0ZSBmb3Igc3R5bGVzXHJcblx0XHRcdFx0d2hpbGUgKHN0YXRlLm5hbWUgIT09ICcnKSB7XHJcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gJHN0YXRlLmdldCgnXicsIHN0YXRlKTtcclxuXHJcblx0XHRcdFx0XHQvL0luaXRpYXRlIG91ciB2aWV3IGxpc3RcclxuXHRcdFx0XHRcdGlmICghc3RhdGVzW3BhcmVudC5uYW1lXSkge1xyXG5cdFx0XHRcdFx0XHRzdGF0ZXNbcGFyZW50Lm5hbWVdID0ge307XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly9DaGVjayB0aGUgdGVtcGxhdGVTdHlsZVxyXG5cdFx0XHRcdFx0aWYgKHN0YXRlLnRlbXBsYXRlU3R5bGVVcmwpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNbcGFyZW50Lm5hbWVdWycnXSkge1xyXG5cdFx0XHRcdFx0XHRcdHN0YXRlc1twYXJlbnQubmFtZV1bJyddID0gZ2V0U3R5bGUoc3RhdGUudGVtcGxhdGVTdHlsZVVybCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvL0NoZWNrIHZpZXdzXHJcblx0XHRcdFx0XHRpZiAoc3RhdGUudmlld3MpIHtcclxuXHRcdFx0XHRcdFx0Xy5mb3JFYWNoKHN0YXRlLnZpZXdzLCBmdW5jdGlvbiAodmlldywga2V5KSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vQ2hlY2sgaWYgd2UgaGF2ZSBhIHN0eWxlXHJcblx0XHRcdFx0XHRcdFx0aWYgKCF2aWV3LnRlbXBsYXRlU3R5bGVVcmwpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vQ2hlY2sgaWYgd2UgYXJlIHRhcmdldGluZyBzb21lIHBhcmVudFxyXG5cdFx0XHRcdFx0XHRcdGlmICgoa2V5ID0ga2V5LnNwbGl0KCdAJykpWzFdKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvL0NoZWNrIGlmIHdlIGhhdmUgc3R5bGVzIGZvciB0aGF0IHBhcmVudFxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNba2V5WzFdXSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZXNba2V5WzFdXSA9IHt9O1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vUGxhY2UgdGhlIHN0eWxlIG9uIHNvbWUgcGFyZW50J3Mgdmlld1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNba2V5WzFdXVtrZXlbMF1dKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlc1trZXlbMV1dW2tleVswXV0gPSBnZXRTdHlsZSh2aWV3LnRlbXBsYXRlU3R5bGVVcmwpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vUGxhY2UgdGhlIHN0eWxlIG9uIG91ciBwYXJlbnQncyB2aWV3XHJcblx0XHRcdFx0XHRcdFx0c3RhdGVzW3BhcmVudC5uYW1lXVtrZXlbMF1dID0gZ2V0U3R5bGUodmlldy50ZW1wbGF0ZVN0eWxlVXJsKTtcclxuXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vQ29udGludWUgd2l0aCB0aGUgcGFyZW50XHJcblx0XHRcdFx0XHRzdGF0ZSA9IHBhcmVudDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vRmxhdHRlbiB0aGUgbGlzdFxyXG5cdFx0XHRcdHZhciBmbGF0ID0gW107XHJcblx0XHRcdFx0Xy5mb3JFYWNoKHN0YXRlcywgZnVuY3Rpb24gKHZpZXdzKSB7XHJcblxyXG5cdFx0XHRcdFx0Xy5mb3JFYWNoKHZpZXdzLCBmdW5jdGlvbiAoc3R5bGUpIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmICghXy5pbmNsdWRlcyhmbGF0LCBzdHlsZSkpIHtcclxuXHRcdFx0XHRcdFx0XHRmbGF0LnB1c2goc3R5bGUpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQvL1JldmVyc2UgaXQgc28gd2UgaGF2ZSBhIHByb3BlciBoaWVyYXJjaHlcclxuXHRcdFx0XHRmbGF0LnJldmVyc2UoKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGZsYXQ7XHJcblxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRyZXN0cmljdDogJ0UnLFxyXG5cdFx0XHRcdGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbSkge1xyXG5cclxuXHRcdFx0XHRcdHNjb3BlLnRlbXBsYXRlU3R5bGVzID0gW107XHJcblxyXG5cdFx0XHRcdFx0dmFyIGh0bWwgPSAnPGxpbmsgbmctYXR0ci1yZWw9XCJ7e3N0eWxlLnJlbH19XCIgbmctcmVwZWF0PVwic3R5bGUgaW4gdGVtcGxhdGVTdHlsZXNcIiBuZy1ocmVmPVwie3tzdHlsZS5ocmVmfX1cIj4nO1xyXG5cclxuXHRcdFx0XHRcdGh0bWwgPSBodG1sLnJlcGxhY2UoL1xce1xcey9nLCAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSk7XHJcblx0XHRcdFx0XHRodG1sID0gaHRtbC5yZXBsYWNlKC9cXH1cXH0vZywgJGludGVycG9sYXRlLmVuZFN5bWJvbCgpKTtcclxuXHJcblx0XHRcdFx0XHRlbGVtLmFwcGVuZCgkY29tcGlsZShodG1sKShzY29wZSkpO1xyXG5cclxuXHRcdFx0XHRcdCRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG5cclxuXHRcdFx0XHRcdFx0c2NvcGUudGVtcGxhdGVTdHlsZXMgPSBnZXRTdHlsZXModG9TdGF0ZSk7XHJcblxyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHR9XHJcblx0XSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gIC5zZXJ2aWNlKCdCb3RTdmMnLCBmdW5jdGlvbigkaHR0cCkge1xyXG5cclxuICAgIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICAgIHN2Yy5nZXRRdWV1ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYm90cy90ZW50aGluZ3MvcXVldWVgKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmdldExpc3RzID0gZnVuY3Rpb24odXNlcikge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL2JvdHMvbGlzdHNgKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmdldENhdGVnb3JpZXMgPSAoKSA9PiB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvYm90cy9jYXRlZ29yaWVzYCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5nZXRMYW5ndWFnZXMgPSAoKSA9PiB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvYm90cy9sYW5ndWFnZXNgKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmdldExpc3QgPSBmdW5jdGlvbihsaXN0KSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvYm90cy9saXN0cy8nICsgbGlzdC5faWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuc2F2ZUxpc3QgPSBmdW5jdGlvbih1c2VyLCBsaXN0KSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvYm90cy9saXN0cycsIHtcclxuICAgICAgICB1c2VyOiB1c2VyLFxyXG4gICAgICAgIGxpc3Q6IGxpc3RcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5yZXBvcnRMaXN0ID0gZnVuY3Rpb24odXNlciwgbGlzdCkge1xyXG4gICAgICAkaHR0cC5nZXQoJy9hcGkvYm90cy9saXN0cy8nICsgbGlzdC5faWQgKyAnL3JlcG9ydC8nICsgdXNlci5faWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuZGVsZXRlTGlzdCA9IGZ1bmN0aW9uKGxpc3QpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZSgnL2FwaS9ib3RzL2xpc3RzLycgKyBsaXN0Ll9pZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5nZXRNb3ZpZVBpY3MgPSBmdW5jdGlvbihsaXN0KSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvYm90cy9saXN0cy8ke2xpc3QuX2lkfS9tb3ZpZXNgKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmdldEFjdG9yUGljcyA9IGZ1bmN0aW9uKGxpc3QpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChgL2FwaS9ib3RzL2xpc3RzLyR7bGlzdC5faWR9L2FjdG9yc2ApO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuZ2V0Qm9va1BpY3MgPSBmdW5jdGlvbihsaXN0KSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvYm90cy9saXN0cy8ke2xpc3QuX2lkfS9ib29rc2ApO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuZ2V0TXVzaWNWaWRlb3MgPSBmdW5jdGlvbihsaXN0KSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvYm90cy9saXN0cy8ke2xpc3QuX2lkfS9tdXNpY3ZpZGVvc2ApO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuZ2V0UGF1c2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChgL2FwaS9ib3RzL3BhdXNlYCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy50b2dnbGVQYXVzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdChgL2FwaS9ib3RzL3BhdXNlYCk7XHJcbiAgICB9O1xyXG5cclxuICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLnNlcnZpY2UoJ0NhdGVnb3JpZXNTdmMnLCBmdW5jdGlvbigkaHR0cCkge1xyXG5cclxuICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgc3ZjLmdldENhdGVnb3JpZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NhdGVnb3JpZXMnKTtcclxuICB9O1xyXG5cclxuICBzdmMuZ2V0VGFza3MgPSBmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2F0ZWdvcmllcy8nICsgY2F0ZWdvcnkpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5hZGRDYXRlZ29yeSA9IGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY2F0ZWdvcmllcy8nLCBjYXRlZ29yeSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmFkZFRhc2sgPSBmdW5jdGlvbiAoY2F0ZWdvcnksIHRhc2spIHtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NhdGVnb3JpZXMvJyArIGNhdGVnb3J5ICsgJy90YXNrcycsIHRhc2spO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5zZXRQcmlvcml0eUxpc3QgPSBmdW5jdGlvbihsaXN0KSB7XHJcbiAgICBzdmMuY2hvaWNlcyA9IGxpc3Q7XHJcbiAgICBzdmMucHJpb3JpdHlMaXN0ID0gW107XHJcbiAgICAvL01ha2UgYSBuZXcgY2hvaWNlIGxpc3RcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBmb3IgKHZhciBqID0gaSArIDE7IGogPCBsaXN0Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgdmFyIHJhbmRvbSA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSk7XHJcbiAgICAgICAgc3ZjLnByaW9yaXR5TGlzdC5wdXNoKHtcclxuICAgICAgICAgIGlkOiAwLFxyXG4gICAgICAgICAgZmlyc3RDaG9pY2U6IGxpc3RbcmFuZG9tID09PSAwID8gaSA6IGpdLm5hbWUsXHJcbiAgICAgICAgICBzZWNvbmRDaG9pY2U6IGxpc3RbcmFuZG9tID09PSAwID8gaiA6IGldLm5hbWUsXHJcbiAgICAgICAgICBjaG9pY2U6ICcnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHNodWZmbGUoc3ZjLnByaW9yaXR5TGlzdCk7XHJcbiAgICBmb3IgKGkgaW4gc3ZjLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICBzdmMucHJpb3JpdHlMaXN0W2ldLmlkID0gaSArIDE7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldFByaW9yaXR5TGlzdCA9IGZ1bmN0aW9uKGxpc3QpIHtcclxuICAgIHJldHVybiBzdmMucHJpb3JpdHlMaXN0O1xyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcclxuICAgIHZhciBtID0gYXJyYXkubGVuZ3RoLCB0LCBpO1xyXG4gICAgLy8gV2hpbGUgdGhlcmUgcmVtYWluIGVsZW1lbnRzIHRvIHNodWZmbGXigKZcclxuICAgIHdoaWxlIChtKSB7XHJcbiAgICAgIC8vIFBpY2sgYSByZW1haW5pbmcgZWxlbWVudOKAplxyXG4gICAgICBpID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbS0tKTtcclxuICAgICAgLy8gQW5kIHN3YXAgaXQgd2l0aCB0aGUgY3VycmVudCBlbGVtZW50LlxyXG4gICAgICAvL2FycmF5W21dLmZpcnN0Q2hvaWNlO1xyXG4gICAgICB0ID0gYXJyYXlbbV07XHJcbiAgICAgIGFycmF5W21dID0gYXJyYXlbaV07XHJcbiAgICAgIGFycmF5W2ldID0gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnJheTtcclxuICB9XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdFbWFpbFN2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuc2VuZCA9IGZ1bmN0aW9uIChlbWFpbCkge1xyXG4gICAgY29uc29sZS5sb2coZW1haWwpO1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvZW1haWwnLCBlbWFpbCk7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAuc2VydmljZSgnRmlsZVN2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gICAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gICAgc3ZjLmdldEltYWdlcyA9IGZ1bmN0aW9uKGZvbGRlcikge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2ZpbGVzL2ltYWdlcy8nICsgZm9sZGVyKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmdldFNvdW5kcyA9IGZ1bmN0aW9uKGZvbGRlcikge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2ZpbGVzL3NvdW5kcy8nICsgZm9sZGVyKTtcclxuICAgIH07XHJcblxyXG4gIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnR2FtZVN2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gICAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gICAgc3ZjLmdldEhpZ2hzY29yZSA9IGZ1bmN0aW9uIChnYW1lLCB1c2VyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvZ2FtZXMvJyArIGdhbWUgKyAnLycgKyB1c2VyICsgJy9oaWdoc2NvcmUnKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLnNldEhpZ2hzY29yZSA9IGZ1bmN0aW9uIChnYW1lLCB1c2VyLCBzY29yZSkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9nYW1lcy8nICsgZ2FtZSArICcvJyArIHVzZXIgKyAnL2hpZ2hzY29yZScsIHtcclxuICAgICAgICBzY29yZTogc2NvcmVcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnTGFuZ3VhZ2VTdmMnLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gIHN2Yy5sYW5ndWFnZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIkVOXCIsXHJcbiAgICAgIFwibmFtZVwiOiBcIkVuZ2xpc2hcIixcclxuICAgICAgXCJmbGFnXCI6IFwiZmxhZy1pY29uLWdiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIk5MXCIsXHJcbiAgICAgIFwibmFtZVwiOiBcIk5lZGVybGFuZHNcIixcclxuICAgICAgXCJmbGFnXCI6IFwiZmxhZy1pY29uLW5sXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIkZSXCIsXHJcbiAgICAgIFwibmFtZVwiOiBcIkZyYW7Dp2Fpc1wiLFxyXG4gICAgICBcImZsYWdcIjogXCJmbGFnLWljb24tZnJcIlxyXG4gICAgfVxyXG4gIF07XHJcblxyXG4gIHN2Yy50ZXh0ID0gW1xyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJFTlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJOTFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJGUlwiXHJcbiAgICB9XHJcbiAgXTtcclxuXHJcbiAgc3ZjLnNlbGVjdGVkTGFuZ3VhZ2UgPSBzdmMubGFuZ3VhZ2VzWzBdO1xyXG5cclxuICBzdmMuc2V0TGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZ3VhZ2UpIHtcclxuICAgIHN2Yy5zZWxlY3RlZExhbmd1YWdlID0gbGFuZ3VhZ2U7XHJcbiAgICByZXR1cm4gbGFuZ3VhZ2U7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldExhbmd1YWdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHN2Yy5zZWxlY3RlZExhbmd1YWdlO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRQb3N0ID0gZnVuY3Rpb24gKHBvc3QpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMvJyArIHBvc3QuX2lkKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gIC5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgICBzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5nZXRVc2VycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzL2FsbCcpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMudG9nZ2xlQmFuID0gZnVuY3Rpb24oaWQpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChgL2FwaS91c2Vycy9iYW4vJHtpZH1gKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLnNldFRva2VuID0gZnVuY3Rpb24odG9rZW4pIHtcclxuICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gdG9rZW47XHJcbiAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuYXV0aGVudGljYXRlID0gZnVuY3Rpb24odXNlcikge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy9hdXRoZW50aWNhdGUnLCB7XHJcbiAgICAgICAgdXNlcjogdXNlclxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS50b2tlbiA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgcmV0dXJuIHN2Yy5zZXRUb2tlbihyZXNwb25zZS5kYXRhKTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5sb2dpbiA9IGZ1bmN0aW9uKHVzZXIpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy8nICsgdXNlciArICcvbG9naW4nKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgIHJldHVybiBzdmMuc2V0VG9rZW4ocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy51cGRhdGVVc2VyID0gZnVuY3Rpb24odXNlcikge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy8nICsgdXNlci5faWQsIHtcclxuICAgICAgICB1c2VyOiB1c2VyXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuY2hlY2tQYXNzd29yZCA9IGZ1bmN0aW9uKHVzZXIsIHBhc3N3b3JkKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzLycgKyB1c2VyICsgJy92ZXJpZmljYXRpb24nLCB7XHJcbiAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbih1c2VyLCBvbGRQYXNzd29yZCwgbmV3UGFzc3dvcmQpIHtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvJyArIHVzZXIgKyAnL3Bhc3N3b3JkJywge1xyXG4gICAgICAgIG9sZFBhc3N3b3JkOiBvbGRQYXNzd29yZCxcclxuICAgICAgICBuZXdQYXNzd29yZDogbmV3UGFzc3dvcmRcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5jaGFuZ2VVc2VybmFtZSA9IGZ1bmN0aW9uKHVzZXIsIG5ld1VzZXJuYW1lKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzLycgKyB1c2VyICsgJy91c2VybmFtZScsIHtcclxuICAgICAgICBuZXdVc2VybmFtZTogbmV3VXNlcm5hbWVcclxuICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gc3ZjLmdldFVzZXIoKTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5sb2dvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSAnJztcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmNyZWF0ZVVzZXIgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XHJcbiAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxyXG4gICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBzdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAuY29udHJvbGxlcignUXVpekFuaW1hbHNDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBGaWxlU3ZjKSB7XHJcblxyXG4gICAgRmlsZVN2Yy5nZXRTb3VuZHMoJ2FuaW1hbHMnKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICRzY29wZS5hbmltYWxzID0gXy5zaHVmZmxlKHJlc3BvbnNlLmRhdGEubWFwKGFuaW1hbCA9PiAoe1xyXG4gICAgICAgICAgc291bmQ6IGFuaW1hbCxcclxuICAgICAgICAgIG5hbWU6IGFuaW1hbC5zdWJzdHJpbmcoMCwgYW5pbWFsLmluZGV4T2YoJy4nKSkucmVwbGFjZSgnXycsICcgJykuY2FwaXRhbGl6ZSgpXHJcbiAgICAgICAgfSkpKTtcclxuICAgICAgICBmb3IgKGxldCBhbmltYWwgb2YgJHNjb3BlLmFuaW1hbHMpIHtcclxuICAgICAgICAgIGFuaW1hbC5hbnN3ZXJzID0gXy5zaHVmZmxlKFthbmltYWwubmFtZSwgLi4uZ2V0UmFuZG9tQW5pbWFscyhhbmltYWwubmFtZSldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLmFuaW1hbHMpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuZ3Vlc3MgPSAoYW5pbWFsLCBndWVzcykgPT4ge1xyXG4gICAgICBhbmltYWwuZ3Vlc3MgPSBndWVzcztcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZ2V0UmFuZG9tQW5pbWFscyA9IG5hbWUgPT4gXy5zaHVmZmxlKCRzY29wZS5hbmltYWxzLmZpbHRlcihhbmltYWwgPT4gbmFtZSAhPT0gYW5pbWFsLm5hbWUpLm1hcChhbmltYWwgPT4gYW5pbWFsLm5hbWUpKS5zbGljZSgwLCA1KTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0U2NvcmUgPSAoKSA9PiBgJHskc2NvcGUuYW5pbWFscy5maWx0ZXIoYW5pbWFsID0+IGFuaW1hbC5uYW1lID09PSBhbmltYWwuZ3Vlc3MpLmxlbmd0aH0vJHskc2NvcGUuYW5pbWFscy5sZW5ndGh9YDtcclxuXHJcbiAgICAkc2NvcGUuaXNTY29yZVZpc2libGUgPSAoKSA9PiAkc2NvcGUuYW5pbWFscy5maWx0ZXIoYW5pbWFsID0+IGFuaW1hbC5ndWVzcykubGVuZ3RoID09PSAkc2NvcGUuYW5pbWFscy5sZW5ndGg7XHJcbiAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdRdWl6R29vZ2xlQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEZpbGVTdmMpIHtcclxuICBGaWxlU3ZjLmdldEltYWdlcygnZ29vZ2xlJylcclxuICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgJHNjb3BlLmltYWdlcyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgfSk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1F1aXpMb2dvc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBGaWxlU3ZjKSB7XHJcbiAgRmlsZVN2Yy5nZXRJbWFnZXMoJ2xvZ29zJylcclxuICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgJHNjb3BlLmltYWdlcyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=
