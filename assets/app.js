angular.module("app", ["ui.router", "ui.bootstrap", "ngAnimate", "ngSanitize", "ngDragDrop", "ngTagsInput", "vcRecaptcha", "chart.js", "tc.chartjs"]), angular.module("app").config(["$stateProvider", "$urlRouterProvider", "$urlServiceProvider", "$locationProvider", function ($stateProvider, $urlRouterProvider, $urlServiceProvider, $locationProvider) {
  $urlRouterProvider.otherwise("/home"), $urlServiceProvider.config.strictMode(!1), $stateProvider.state("home", {
    url: "/home",
    templateUrl: "/home.html"
  }).state("policy", {
    url: "/policy",
    templateUrl: "/policy.html"
  }).state("print", {
    url: "/print",
    templateUrl: "/print.html"
  }).state("experience", {
    url: "/experience",
    controller: "ExperienceCtrl",
    templateUrl: "/experience.html"
  }).state("skills", {
    url: "/skills",
    controller: "SkillsCtrl",
    templateUrl: "/skills.html"
  }).state("hobbies", {
    url: "/hobbies",
    controller: "HobbiesCtrl",
    templateUrl: "/hobbies.html"
  }).state("contact", {
    url: "/contact",
    controller: "ContactCtrl",
    templateUrl: "/contact.html"
  }).state("workout", {
    url: "/workout",
    controller: "WorkoutCtrl",
    templateUrl: "/workout.html"
  }).state("posts", {
    url: "/posts",
    controller: "PostsCtrl",
    templateUrl: "/posts.html"
  }).state("profile", {
    url: "/profile",
    controller: "ProfileCtrl",
    templateUrl: "/profile.html"
  }).state("lists", {
    url: "/lists",
    controller: "ListsCtrl",
    templateUrl: "lists.html"
  }).state("prioritize", {
    url: "/prioritize",
    controller: "PrioritizeCtrl",
    templateUrl: "prioritize.html"
  }).state("bubbles", {
    url: "/bubbles",
    controller: "BubblesCtrl",
    templateUrl: "bubbles.html"
  }).state("asteroids", {
    url: "/asteroids",
    controller: "AsteroidsCtrl",
    templateUrl: "asteroids.html"
  }).state("lemmings", {
    url: "/lemmings",
    controller: "LemmingsCtrl",
    templateUrl: "lemmings.html"
  }).state("bots", {
    url: "/bots",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("tenthings", {
    url: "/tenthings",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("quiz-google", {
    url: "/google",
    controller: "QuizGoogleCtrl",
    templateUrl: "quizzes/google.html"
  }).state("quiz-logos", {
    url: "/logos",
    controller: "QuizLogosCtrl",
    templateUrl: "quizzes/logos.html"
  }), $locationProvider.html5Mode({
    enabled: !0,
    requireBase: !1
  });
}]), angular.module("app").service("WebSocketSvc", ["$rootScope", "$timeout", function ($rootScope, $timeout) {
  var connection,
      connect = function () {
    (connection = new WebSocket("https:" === window.location.protocol ? "wss://" + window.location.host : "ws://" + window.location.host)).onopen = function () {
      console.log("Websocket connected");
    }, connection.onclose = function (e) {
      console.log("Websocket closed. Reconnecting..."), $timeout(connect, 1e3);
    }, connection.onerror = function (e) {
      console.log("Error: " + e + " - State: " + connection.readyState);
    }, connection.onmessage = function (e) {
      var payload = JSON.parse(e.data);
      $rootScope.$broadcast("ws:" + payload.topic, payload.data);
    };
  };

  this.send = function (topic, data) {
    var json = JSON.stringify({
      topic,
      data
    });
    connection.send(json);
  }, this.connect = connect;
}]).run(["WebSocketSvc", function (WebSocketSvc) {
  WebSocketSvc.connect();
}]), angular.module("app").controller("AppCtrl", ["$scope", "$location", "LanguageSvc", "UserSvc", function ($scope, $location, LanguageSvc, UserSvc) {
  function login(user) {
    $scope.loggedIn || (window.localStorage.user = user._id, $scope.loggedIn = !0, $scope.currentUser = user, $scope.$broadcast("login"));
  }

  console.log("%cYou sneaky bugger!", "font: 2em sans-serif; color: DodgerBlue; text-shadow: 2px 0 0 #444, -2px 0 0 #444, 0 2px 0 #444, 0 -2px 0 #444, 1px 1px #444, -1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444;"), console.log("I'm glad you're curious whether something is popping up in here. I'm a bit of a stickler when it comes to messages in the console so I try to make sure only things I want are visible. That being said, if there is a big error here, I would really appreciate you telling me so I can get rid of it!"), console.log("The code for my resume is hosted on Github if you really want to go into all this! => https://github.com/FlandersBurger/resume"), $(window).load(function () {
    $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
  }), $scope.themeCounter = 6, $scope.today = new Date(), $scope.year = $scope.today.getFullYear(), $scope.random = Math.floor(1e6 * Math.random()), $scope.flipTheme = function () {
    $(".loading").show(), $(".content").hide(), setTimeout(function () {
      $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
    }, 800), $scope.themeCounter = $scope.themeCounter < 6 ? $scope.themeCounter + 1 : $scope.themeCounter = 1;
  }, $.getJSON("/skills.json", function (data) {
    $scope.skills = data.filter(function (skill) {
      return skill.enabled;
    });
  }), $.getJSON("/hobbies.json", function (data) {
    $scope.hobbies = data;
  }), $.getJSON("/experience.json", function (data) {
    $scope.jobs = data, $scope.jobs.forEach(function (job) {
      job.startDate = new Date(job.startDate), job.endDate && (job.endDate = new Date(job.endDate));
    });
  }), $scope.getTimeSpan = function (job) {
    return job.startDate.getFullYear() + (job.endDate ? " - " + job.endDate.getFullYear() : " - Today");
  }, $scope.languages = LanguageSvc.languages, $scope.selectedLanguage = LanguageSvc.getLanguage(), $scope.selectLanguage = function (language) {
    $scope.selectedLanguage = LanguageSvc.setLanguage(language);
  }, $scope.hoverdiv = function (e, divid) {
    var left = e.clientX + "px",
        top = e.clientY + 20 + "px";
    document.getElementById(divid);
    return $("#" + divid).css("left", left), $("#" + divid).css("top", top), $("#" + divid).toggle(), !1;
  }, $scope.socialMedia = [{
    name: "linkedin",
    url: "https://www.linkedin.com/in/laurent-debacker-1633a916",
    icon: "fa-linkedin"
  }, {
    name: "github",
    url: "https://github.com/FlandersBurger",
    icon: "fa-github"
  }, {
    name: "jsfiddle",
    url: "https://jsfiddle.net/user/BelgoCanadian/fiddles/",
    icon: "fa-jsfiddle"
  }, {
    name: "stackoverflow",
    url: "http://stackoverflow.com/users/1083923/belgocanadian",
    icon: "fa-stack-overflow"
  }], window.localStorage.user && UserSvc.login(window.localStorage.user).then(function (response) {
    login(response.data);
  }), $scope.$on("login", function (_, user) {
    login(user);
  }), $scope.$on("update", function (_, user) {
    $scope.currentUser = user, $scope.currentUser.birthDate = new Date($scope.currentUser.birthDate), $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.$on("loading", function (_, user) {
    $scope.loading = !0, $("#loading-icon").show();
  }), $scope.$on("loaded", function (_, user) {
    $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.logout = function () {
    firebase.auth().signOut().then(function () {
      $scope.loggedIn = !1, window.localStorage.clear(), $scope.$broadcast("logout");
    }).catch(function (error) {});
  }, $scope.formatDate = function (date) {
    return (date = new Date(date)).getDate() + "-" + ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][date.getMonth()] + "-" + date.getFullYear();
  };
}]), angular.module("app").controller("AsteroidsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  $scope.announce = !1;
  var canvas = document.getElementById("asteroids-page"),
      ctx = canvas.getContext("2d");
  ctx.font = "30px Comic Sans MS", ctx.fillStyle = "red", ctx.textAlign = "center";
  var shots = {},
      asteroids = {},
      powerups = {},
      explosions = {},
      map = {},
      spacepics = 10,
      space = Math.floor(Math.random() * spacepics),
      powerupTypes = [{
    name: "speed",
    announcement: "Max Speed ⇧",
    cycle: {
      rows: 1,
      columns: 4,
      size: [14, 35],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.maxSpeed += 100;
    }
  }, {
    name: "cooldown",
    announcement: "Cooldown ⇩",
    cycle: {
      rows: 1,
      columns: 3,
      size: [17, 17],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.cooldown > 0 && (spaceship.cooldownTime -= 1);
    }
  }, {
    name: "range",
    announcement: "Firing Range ⇧",
    cycle: {
      rows: 4,
      columns: 1,
      size: [30, 8],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.range += 5;
    }
  }, {
    name: "shield",
    announcement: "Shield",
    cycle: {
      rows: 5,
      columns: 1,
      size: [19, 19],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.shield = !0;
    }
  }, {
    name: "nuke",
    announcement: "Nuke",
    cycle: {
      rows: 1,
      columns: 8,
      size: [15, 15],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      for (var i in asteroids) asteroids[i].explode();

      spawnAsteroids(5);
    }
  }];
  powerupTypes.forEach(function (powerup, i, array) {
    array[i].img.src = "asteroids/" + powerup.name + ".png";
  });
  var spaceship,
      explosionImage = new Image();

  function evaluateKeys() {
    $scope.playing ? (map[32] && 0 === spaceship.cooldown && spaceship.shoot(), map[37] && (0 === spaceship.rotation ? spaceship.rotation = 360 : spaceship.rotation -= 3), map[39] && (360 === spaceship.rotation ? spaceship.rotation = 0 : spaceship.rotation += 3), map[38] ? spaceship.speed <= spaceship.maxSpeed && (spaceship.speed += 5) : spaceship.speed > 0 && spaceship.speed--, map[40] && spaceship.speed > 0 && (spaceship.speed -= 2)) : map[32] && ($scope.playing = !0, $scope.score = 0, space = Math.floor(Math.random() * spacepics), $scope.$apply(), spaceship = new Spaceship(), $scope.score = 0, spawnAsteroids(5), function autoSpawn() {
      if (Object.keys(asteroids).length < 200) {
        var id = Math.round(1e8 * Math.random());
        asteroids[id] = new Asteroid(id);
      }

      $scope.playing && setTimeout(function () {
        autoSpawn();
      }, $scope.score < 1e3 ? 1e3 : $scope.score < 2e3 ? 900 : $scope.score < 3e3 ? 800 : $scope.score < 4e3 ? 700 : $scope.score < 5e3 ? 600 : $scope.score < 6e3 ? 500 : $scope.score < 7e3 ? 400 : $scope.score < 8e3 ? 300 : 200);
    }());
  }

  function Spaceship() {
    this.width = 50, this.height = 50, this.shield = !1, this.range = 80, this.cannon = {
      x: this.width / 2 - 4.5,
      y: this.height / 2 - .078125 * this.height
    }, this.cooldown = 0, this.cooldownTime = 20, this.position = [canvas.width / 2 - this.width / 2, canvas.height / 2 - this.height / 2], this.img = new Image(), this.img.src = "asteroids/spaceship.png", this.speed = 0, this.maxSpeed = 1e3, this.angle = 0, this.rotation = 0, this.shoot = function () {
      this.cooldown = this.cooldownTime;
      var id = Math.round(1e8 * Math.random());
      shots[id] = new Shot(id, this);
    }, this.move = function () {
      for (var i in this.shield && (ctx.beginPath(), ctx.arc(this.position[0] + this.width / 2, this.position[1] + this.height / 2, 30, 0, 2 * Math.PI), ctx.fillStyle = "rgb(35, 237, 86, 0.5)", ctx.strokeStyle = "rgb(66, 168, 36, 0.8)", ctx.lineWidth = 5, ctx.stroke(), ctx.fill()), asteroids) {
        var asteroid = asteroids[i];

        if (hit(asteroid, this)) {
          if (!this.shield) return gameOver();
          this.shield = !1, asteroid.explode();
        }
      }

      this.angle = this.rotation, this.cooldown > 0 && this.cooldown--, move(this);
    };
  }

  function Shot(id, spaceship) {
    this.id = id, this.position = [spaceship.position[0] + spaceship.cannon.x + spaceship.cannon.x * Math.cos((spaceship.rotation - 90) * Math.PI / 180), spaceship.position[1] + spaceship.cannon.y + spaceship.cannon.y * Math.sin((spaceship.rotation - 90) * Math.PI / 180)], this.width = 9, this.height = 15, this.angle = spaceship.angle, this.rotation = spaceship.rotation, this.speed = spaceship.speed + 500, this.lifespan = spaceship.range, this.img = new Image(), this.img.src = "asteroids/shot.png", this.move = function () {
      this.lifespan--, move(this);
    };
  }

  function Asteroid(id) {
    this.id = id, this.width = 50 * Math.random() + 20, this.height = this.width, this.position = getEntryPosition(this.width, this.height), this.angle = 360 * Math.random(), this.rotation = 360 * Math.random(), this.rotationSpeed = 6 * Math.random() - 3, this.speed = 300 * Math.random() + 2, this.img = new Image(), this.img.src = "asteroids/asteroid" + (Math.round(6 * Math.random()) + 1) + ".png", this.explode = function () {
      return explosions[this.id] = new Explosion(this), delete asteroids[this.id];
    }, this.move = function () {
      for (var i in this.rotation += this.rotationSpeed, this.rotation > 360 ? this.rotation = this.rotation - 360 : this.rotation < 0 && (this.rotation = 360 + this.rotation), shots) {
        var shot = shots[i];

        if (hit(shot, this)) {
          this.explode();
          var points = Math.floor((shot.speed - 500) / 10 + 70 - this.width);
          Math.floor((points + $scope.score) / 100) > Math.floor($scope.score / 100) && spawnPowerup(), $scope.score += points, $scope.$apply(), delete shots[i];
        }
      }

      move(this);
    };
  }

  function Explosion(object) {
    this.position = [object.position[0], object.position[1]], this.width = object.width, this.height = object.height, this.speed = 0, this.angle = 360 * Math.random(), this.cycle = {
      rows: 6,
      columns: 8,
      size: [256, 256],
      i: 0,
      direction: !0
    }, this.lifespan = 47, this.img = explosionImage, this.move = function () {
      this.lifespan--, move(this), this.cycle.direction ? this.cycle.i++ : this.cycle.i--;
    };
  }

  function Powerup(id) {
    this.id = id, this.powerup = powerupTypes[Math.floor(Math.random() * powerupTypes.length)], this.cycle = this.powerup.cycle, this.lifespan = 1e3, this.cycle.size[1] > this.cycle.size[0] ? (this.height = 40, this.width = Math.round(this.height / this.cycle.size[1] * this.cycle.size[0])) : (this.width = 40, this.height = Math.round(this.width / this.cycle.size[0] * this.cycle.size[1])), this.position = getEntryPosition(this.width, this.height), this.img = this.powerup.img, this.angle = 360 * Math.random(), this.speed = 150 * Math.random() + 50;
    var delay = 5;

    this.move = function () {
      return this.lifespan <= 0 ? delete powerups[this.id] : hit(spaceship, this) ? ($scope.announce = !0, $scope.announcement = this.powerup.announcement, $scope.$apply(), setTimeout(function () {
        $scope.announce = !1, $scope.$apply();
      }, 1e3), this.powerup.activate(spaceship), delete powerups[this.id]) : (this.lifespan--, move(this), void (delay <= 0 ? (this.cycle.direction ? this.cycle.i++ : this.cycle.i--, delay = 5) : delay--));
    };
  }

  function move(object) {
    if (object.position[0] += object.speed / 100 * Math.cos((object.angle - 90) * Math.PI / 180), object.position[1] += object.speed / 100 * Math.sin((object.angle - 90) * Math.PI / 180), object.position[0] > canvas.width ? object.position[0] = -object.width : object.position[0] < -object.width && (object.position[0] = canvas.width), object.position[1] > canvas.height ? object.position[1] = -object.height : object.position[1] < -object.height && (object.position[1] = canvas.height), ctx.save(), ctx.translate(object.position[0], object.position[1]), ctx.translate(object.width / 2, object.height / 2), ctx.rotate(object.rotation * Math.PI / 180), object.cycle) {
      var column = object.cycle.i % object.cycle.columns,
          row = Math.floor(object.cycle.i / object.cycle.columns);
      ctx.drawImage(object.img, object.cycle.size[0] * column, object.cycle.size[1] * row, object.cycle.size[0], object.cycle.size[1], -object.width / 2, -object.height / 2, object.width, object.height), object.cycle.i <= 0 ? (object.cycle.i = 0, object.cycle.direction = !0) : object.cycle.i >= object.cycle.columns * object.cycle.rows && (object.cycle.i = object.cycle.columns * object.cycle.rows - 1, object.cycle.direction = !1);
    } else ctx.drawImage(object.img, -object.width / 2, -object.height / 2, object.width, object.height);

    ctx.restore();
  }

  function getEntryPosition(width, height) {
    var x,
        gridX = 2 * Math.random(),
        gridY = 2 * Math.random(),
        y = 0;
    return gridX >= 1 ? (x = Math.random() * canvas.width, y = y >= 1 ? 0 - height : canvas.height) : (y = Math.random() * canvas.height, x = gridY >= 1 ? 0 - width : canvas.width), [x, y];
  }

  function hit(object1, object2) {
    return object1.position[0] < object2.position[0] + object2.width && object2.position[0] < object1.position[0] + object1.width && object1.position[1] < object2.position[1] + object2.height && object2.position[1] < object1.position[1] + object1.height;
  }

  function spawnAsteroids(amount) {
    var i = 0;

    do {
      var id = Math.round(1e8 * Math.random());
      asteroids[id] = new Asteroid(id);
    } while (i++ <= amount);
  }

  function spawnPowerup() {
    if (Object.keys(powerups).length < 3) {
      var id = Math.round(1e8 * Math.random());
      powerups[id] = new Powerup(id);
    }
  }

  function gameOver() {
    for (var i in $scope.playing = !1, asteroids) asteroids[i].explode();

    shots = {}, $scope.loggedIn ? $scope.currentUser.highscore.asteroids < $scope.score && ($scope.currentUser.highscore.asteroids = $scope.score, GameSvc.setHighscore("asteroids", $scope.currentUser._id, $scope.score)) : $scope.highscore < $scope.score && ($scope.highscore = $scope.score);
  }

  function resizeCanvas() {
    console.log(window.innerWidth), canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }

  explosionImage.src = "asteroids/explosion.png", window.addEventListener("keydown", function (e) {
    map[e.keyCode || e.which] = !0;
  }, !0), window.addEventListener("keyup", function (e) {
    map[e.keyCode || e.which] = !1;
  }, !0), $scope.highscore = 0, window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), requestAnimationFrame(function draw() {
    for (var i in ctx.clearRect(0, 0, canvas.width, canvas.height), shots) shots[i].lifespan <= 0 ? delete shots[i] : shots[i].move();

    for (i in asteroids) asteroids[i].move();

    for (i in powerups) powerups[i].move();

    for (i in explosions) explosions[i].lifespan <= 0 ? delete explosions[i] : explosions[i].move();

    if (evaluateKeys(), $scope.playing) spaceship.move();else {
      var gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
      gradient.addColorStop("0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.25", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.5", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + ")"), gradient.addColorStop("0.75", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("1.0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), ctx.fillStyle = gradient, ctx.font = "60px Monoton", ctx.fillText("Asteroids", canvas.width / 2 - ctx.measureText("Asteroids").width / 2, canvas.height / 2), ctx.font = "20px Aldrich", ctx.fillText("Press space to start", canvas.width / 2 - ctx.measureText("Press space to start").width / 2, canvas.height / 2 + 20), ctx.fillText("Designed and developed by Laurent Debacker", canvas.width / 2 - ctx.measureText("Designed and developed by Laurent Debacker").width / 2, canvas.height - 30);
    }
    (tally += direction ? 1 : -1) > 100 ? (tally = 100, direction = !1) : tally < 0 && (tally = 0, direction = !0);
    requestAnimationFrame(draw);
  });
  var tally = 0,
      direction = !0;

  $scope.space = function () {
    return {
      backgroundImage: 'url("asteroids/space' + space + '.jpg")'
    };
  };
}]), angular.module("app").controller("BubblesCtrl", ["$scope", function ($scope) {
  var canvas = document.getElementById("bubbles-page"),
      ctx = canvas.getContext("2d"),
      bubbles = [],
      colors = ["#ffc300", "#ff5733", "#c70039", "#900c3e", "#571845"];

  function Bubble() {
    this.lifespan = 0, this.radius = 1, this.expanding = !0, this.speed = Math.round(3 * Math.random()), this.circumference = Math.round(50 * Math.random()) + 5, this.maxRadius = Math.round(200 * Math.random()) + 20, this.x = Math.round(Math.random() * canvas.width), this.y = Math.round(Math.random() * canvas.height), this.vx = Math.random() >= .5 ? 1 : -1, this.vy = Math.random() >= .5 ? 1 : -1;
  }

  requestAnimationFrame(function filterBubbles() {
    bubbles.push(new Bubble()), bubbles = bubbles.filter(function (bubble) {
      return bubble.radius === bubble.maxRadius && (bubble.expanding = !1), bubble.x += bubble.vx * bubble.speed, bubble.y += bubble.vy * bubble.speed, bubble.radius += bubble.expanding ? 1 : -1, bubble.radius > 0;
    }), ctx.clearRect(0, 0, canvas.width, canvas.height), bubbles.forEach(function (bubble) {
      colors[Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.beginPath(), ctx.arc(bubble.x, bubble.y, bubble.radius, 0, 2 * Math.PI), ctx.fillStyle = colors[Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.fill(), ctx.strokeStyle = colors[colors.length - Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.lineWidth = bubble.circumference * bubble.radius / bubble.maxRadius, ctx.stroke();
    }), requestAnimationFrame(filterBubbles);
  }), function () {
    function resizeCanvas() {
      canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 55 : 111);
    }

    window.addEventListener("resize", resizeCanvas, !1), resizeCanvas();
  }();
}]), angular.module("app").controller("ContactCtrl", ["$scope", "EmailSvc", function ($scope, EmailSvc) {
  $scope.options = [{
    name: "Spam",
    text: "I am a spam bot and automatically check the first option I find!"
  }, {
    name: "Opportunitiy",
    text: "You seem to have the skills I seek, I'd like to talk about some opportunities."
  }, {
    name: "Resume",
    text: "I dig the resume, how did you make it?"
  }, {
    name: "Other",
    text: "Sumtin else!"
  }], $scope.contact = {
    email: "",
    name: "",
    phone: "",
    about: "",
    message: ""
  }, $scope.send = function () {
    $scope.sending = !0, console.log("here"), EmailSvc.send({
      email: $scope.contact.email,
      name: $scope.contact.name,
      phone: $scope.contact.phone,
      about: $scope.contact.about,
      message: $scope.contact.message
    }).then(function (response) {
      $scope.sent = !0, console.log("SUCCESS. status=%d, text=%s", response.status, response.text), console.log(response);
    }, function (err) {
      $scope.sending = !1, console.log("FAILED. error=", err);
    });
  };
}]), angular.module("app").controller("ExperienceCtrl", ["$scope", function ($scope) {
  $scope.getSkill = function (skillCode) {
    if ($scope.skills) return $scope.skills.find(function (skill) {
      return skill.code === skillCode;
    });
  };
}]), angular.module("app").controller("HobbiesCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.hobbySelectorVisible = !1, $.getJSON("https://www.reddit.com/user/belgocanadian/about/.json", function (response) {}), $scope.selectedHobby = $scope.hobbies[0], $scope.selectHobby = function (hobby) {
    $scope.selectedHobby = hobby, $scope.hobbySelectorVisible = !1;
  }, $scope.showHobby = function (value, index, array) {
    return !!value.images && value.images.length > 0;
  };
}]), angular.module("app").controller("LemmingsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  var LEFT = 0,
      RIGHT = 1,
      canvas = document.getElementById("lemmings-page"),
      ctx = canvas.getContext("2d"),
      lemmingsImage = new Image();
  lemmingsImage.src = "lemmings/lemmings.png";
  var decorImage = new Image();
  decorImage.src = "lemmings/decor.png";
  var lemmings = {},
      started = !1,
      actions = {
    walk: {
      start: [0, 0],
      end: [320, 20],
      columns: 8,
      rows: 1,
      reverse: !1
    },
    huh: {
      start: [320, 0],
      end: [640, 20],
      columns: 8,
      rows: 1,
      reverse: !0
    },
    fall: {
      start: [0, 80],
      end: [160, 100],
      columns: 4,
      rows: 1,
      reverse: !1
    },
    fly: {
      start: [160, 80],
      end: [480, 110],
      columns: 8,
      rows: 1,
      reverse: !1
    },
    stop: {
      start: [0, 120],
      end: [640, 140],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    climb: {
      start: [0, 160],
      end: [640, 185],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    build: {
      start: [0, 200],
      end: [640, 225],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    punch: {
      start: [0, 240],
      end: [640, 300],
      columns: 16,
      rows: 2,
      reverse: !1
    },
    dig: {
      start: [0, 320],
      end: [320, 345],
      columns: 8,
      rows: 1,
      reverse: !1
    }
  };

  function Lemming(init) {
    this.position = [Math.floor(Math.random() * (canvas.width - 200)) + 100, Math.floor(Math.random() * (canvas.height - 200)) + 100], this.direction = 2 * Math.random() > 1 ? LEFT : RIGHT, this.act = function (action) {
      this.action = actions[action], this.cycle = 0, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1] - 20 * (this.action.rows - 1)) / this.action.rows, this.animation = !0;
    }, this.act(init), this.move = function () {
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), this.direction === LEFT && ctx.scale(-1, 1);
      var column = this.cycle % this.action.columns,
          row = Math.floor(this.cycle / this.action.columns);
      ctx.drawImage(lemmingsImage, this.width * column + this.action.start[0], (this.height + 20) * row + this.action.start[1], this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore(), this.action.reverse ? this.animation ? (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.animation = !this.animation, this.cycle--)) : (this.cycle--, this.cycle < 0 && (this.animation = !this.animation, this.cycle = 0)) : (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.cycle = 0));
    };
  }

  function resizeCanvas() {
    canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }

  window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), Object.keys(actions).forEach(function (action) {
    lemmings[Math.round(1e8 * Math.random())] = new Lemming(action);
  });
  let hatch = new function () {
    this.position = [20, 20], this.action = {
      start: [0, 0],
      end: [82, 500],
      columns: 1,
      rows: 10
    }, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1]) / this.action.rows, this.cycle = 0, this.open = function () {
      var column, row;
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), started ? (column = this.cycle % this.action.columns, row = Math.floor(this.cycle / this.action.columns), this.cycle < 9 && this.cycle++) : (column = 0, row = 0), ctx.drawImage(decorImage, this.width * column + this.action.start[0], this.height * row + this.action.start[1] - 1, this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore();
    };
  }();
  !function draw() {
    if (ctx.clearRect(0, 0, canvas.width, canvas.height), started) for (var i in lemmings) lemmings[i].move();else ctx.beginPath(), ctx.font = "40px Monoton", ctx.lineWidth = "10", ctx.strokeStyle = "blue", ctx.rect(15, canvas.height - 45, ctx.measureText("Start").width + 20, ctx.measureText("Start").height + canvas.height - 45), ctx.fill(), ctx.fillText("Start", 20, canvas.height - 50);
    hatch.open(), started = !0, setTimeout(function () {
      draw();
    }, 150);
  }();
}]), angular.module("app").controller("ListsCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.showCategory = !0, $scope.init = function () {
    CategoriesSvc.getCategories().then(function (response) {
      for (var i in $scope.categories = response.data, $scope.tasks = [], $scope.categories) for (var j in $scope.categories[i].tasks) $scope.tasks.push({
        category: $scope.categories[i].name,
        task: $scope.categories[i].tasks[j].name
      });
    });
  }, $scope.selectCategory = function (category) {
    for (var i in $scope.selectedCategory = category, $scope.selectedTasks = [], $scope.selectableTasks = [], $scope.selectedCategory.tasks) $scope.selectableTasks.push($scope.selectedCategory.tasks[i]);

    $scope.showCategory = !1, $scope.enteredCategory = "";
  }, $scope.newCategory = function (category) {
    for (var found = !1, i = 0; i < $scope.categories.length; i++) $scope.categories[i].name === category && ($scope.selectCategory($scope.categories[i]), found = !0);

    found || CategoriesSvc.addCategory({
      category
    }).then(function (category) {
      $scope.init(), $scope.selectCategory(category);
    }), $scope.enteredCategory = "";
  }, $scope.newTask = function (task) {
    var found = !1;

    for (var i in $scope.selectedCategory.tasks) $scope.selectedCategory.tasks[i].name === task && (found = !0, $scope.selectTask($scope.selectedCategory.tasks[i]));

    found || CategoriesSvc.addTask($scope.selectedCategory.name, {
      task
    }).then(function () {
      $scope.selectedCategory.tasks.push({
        name: task
      }), $scope.addTask($scope.selectedTasks, $scope.selectedCategory.tasks[$scope.selectedCategory.tasks.length - 1]);
    }), $scope.enteredTask = "";
  }, $scope.selectTask = function (task) {
    $scope.addTask($scope.selectedTasks, task), $scope.removeTask($scope.selectableTasks, task), $scope.enteredTask = "";
  }, $scope.unselectTask = function (task) {
    $scope.addTask($scope.selectableTasks, task), $scope.removeTask($scope.selectedTasks, task);
  }, $scope.addTask = function (taskList, task) {
    taskList.push(task);
  }, $scope.removeTask = function (taskList, task) {
    taskList.splice(taskList.indexOf(task), 1);
  }, $scope.startPrioritizing = function () {
    CategoriesSvc.setPriorityList($scope.selectedTasks), $location.path("/prioritize");
  }, $scope.getQuestions = function () {
    if (!$scope.selectedTasks) return "";

    for (var counter = 0, i = $scope.selectedTasks.length - 1; i > 0; i--) counter += i;

    return counter;
  };
}]), angular.module("app").controller("LoginCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  var ui = new firebaseui.auth.AuthUI(firebase.auth());

  function startUI() {
    ui.start("#firebaseui-auth-container", {
      callbacks: {
        signInSuccess: function (currentUser, credential, redirectUrl) {
          return firebase.auth().currentUser.getIdToken(!0).then(function (idToken) {
            UserSvc.authenticate({
              displayName: currentUser.displayName,
              email: currentUser.email,
              photoURL: currentUser.photoURL,
              emailVerified: currentUser.emailVerified,
              idToken
            }).then(function (response) {
              $scope.$emit("login", response.data), $("#modal-login").modal("hide");
            }, function () {
              $scope.$emit("popup", {
                message: "Login Failed",
                type: "alert-danger"
              });
            });
          }).catch(function (error) {}), !1;
        },
        signInFailure: function (error) {
          if ("firebaseui/anonymous-upgrade-merge-conflict" != error.code) return Promise.resolve();
          var cred = error.credential;
          return firebase.auth().signInWithCredential(cred);
        },
        uiShown: function () {
          document.getElementById("loader").style.display = "none";
        }
      },
      signInSuccessUrl: "/home",
      signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID],
      signInFlow: "popup"
    });
  }

  $scope.$on("logout", function (event) {
    ui.reset(), startUI();
  }), startUI();
}]), angular.module("app").controller("PostsCtrl", ["$scope", "$filter", "PostsSvc", function ($scope, $filter, PostsSvc) {
  $scope.addPost = function () {
    $scope.postBody && PostsSvc.create({
      body: $scope.postBody
    }).then(function (post) {
      $scope.postBody = null;
    });
  }, PostsSvc.fetch().then(function (response) {
    $scope.posts = response.data;
  }), $scope.$on("ws:new_post", function (_, post) {
    $scope.$apply(function () {
      PostsSvc.getPost(post).then(function (response) {
        $scope.posts.unshift(response.data);
      });
    });
  });
}]), angular.module("app").controller("PrioritizeCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.priorityList = CategoriesSvc.getPriorityList(), $scope.priorityList ? ($scope.selectedQuestion = 1, $scope.currentQuestion = 1, $scope.done = !1) : $location.path("/lists"), $scope.makeChoice = function (choice) {
    for (var i in $scope.priorityList) $scope.priorityList[i].id === $scope.selectedQuestion && ($scope.priorityList[i].choice = 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice);

    $scope.selectedQuestion === $scope.currentQuestion && ($scope.currentQuestion = $scope.currentQuestion === $scope.priorityList.length ? 1 : $scope.currentQuestion + 1), $scope.selectedQuestion = $scope.currentQuestion;
    var found = !1;

    for (i in $scope.priorityList) if ("" === $scope.priorityList[i].choice) {
      found = !0;
      break;
    }

    found || ($("#prioritizeChoices").hide(300), $scope.done = !0);
  }, $scope.getButtonValue = function (choice) {
    if (!$scope.priorityList) return "";

    for (var i = 0; i < $scope.priorityList.length; i++) if ($scope.priorityList[i].id === $scope.selectedQuestion) return 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice;
  }, $scope.selectQuestion = function (question) {
    $scope.selectedQuestion = question;
  }, $scope.getFilteredPriorityList = function () {
    return $scope.priorityList ? $scope.priorityList.sort(function (a, b) {
      return a.id - b.id;
    }).filter(function (question) {
      return "" !== question.choice || question.id === $scope.currentQuestion;
    }) : [];
  }, $scope.getChoicesMade = function () {
    if (!$scope.priorityList) return "";
    var choicesMade = 0;

    for (var i in $scope.priorityList) "" !== $scope.priorityList[i].choice && choicesMade++;

    return choicesMade;
  }, $scope.getButtonClass = function (choice) {
    if (!$scope.priorityList) return "";

    for (var i in $scope.priorityList) if ($scope.priorityList[i].id === $scope.selectedQuestion) return "" === $scope.priorityList[i].choice ? "btn-primary" : 1 === choice ? $scope.priorityList[i].firstChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger" : $scope.priorityList[i].secondChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger";
  }, $scope.showChoices = function () {
    $("#prioritizeChoices").show(1e3), $("#reviewChoices").hide();
  }, $scope.chartClick = function (event) {
    $scope.chart && console.log($scope.chart.getSegmentsAtEvent(event));
  }, $scope.showResults = function () {
    for (var i in $scope.data = [], $scope.options = {
      responsive: !0,
      segmentShowStroke: !0,
      segmentStrokeColor: "#fff",
      segmentStrokeWidth: 2,
      percentageInnerCutout: 0,
      animationSteps: 100,
      animationEasing: "easeOutBounce",
      animateRotate: !0,
      animateScale: !1,
      legendTemplate: '<h3 class="tc-chart-js-legend" style="padding:5px"><% for (var i=0; i<segments.length; i++){%><div class="label" style="float:left;margin:5px;background-color:<%=segments[i].fillColor%>"><%if(segments[i].label){%><%=segments[i].label%><%}%></div><%}%></h3>'
    }, CategoriesSvc.choices) for (var j in CategoriesSvc.choices[i].votes = 0, $scope.priorityList) CategoriesSvc.choices[i].name === $scope.priorityList[j].choice && CategoriesSvc.choices[i].votes++;

    for (i in CategoriesSvc.choices.sort(function (a, b) {
      return a.votes < b.votes;
    }), CategoriesSvc.choices) $scope.data.push({
      value: CategoriesSvc.choices[i].votes,
      label: CategoriesSvc.choices[i].name
    });

    $("#prioritizeResult").hide(), $("#prioritizeChoices").hide(), $("#priorityResults").show(1e3);
  };
}]), angular.module("app").controller("ProfileCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  $scope.currentUser ? ($("#sex-indicator").offset({
    left: $scope.currentUser.gender.sex / 200 * $("#sex").width() + $("#sex").offset().left
  }), $("#identity-indicator").offset({
    left: $scope.currentUser.gender.identity / 200 * $("#identity").width() + $("#identity").offset().left
  })) : $location.path("/"), $scope.sexes = ["Male", "FtM Male", "Intersex", "MtF Female", "Female"], $scope.identities = ["Man", "Bigender", "Pangender", "Agender", "Polygender", "Genderfluid", "Genderqueer", "Queer", "Woman"], $scope.dateOptions = {
    maxDate: new Date(),
    minDate: new Date(1900, 1, 1),
    initDate: new Date(2e3, 1, 1),
    datepickerMode: "year"
  }, $scope.gender = function (array, percentage) {
    return array[Math.round(percentage / 200 * (array.length - 1))];
  }, $scope.startSlider = function () {}, $scope.dragSlider = function (event, ui, type) {
    $scope.currentUser.gender[type] = Math.round(($("#" + type + "-indicator").offset().left - $("#" + type).offset().left) / ($("#" + type).width() - $("#" + type + "-indicator").width()) * 200), $scope.$apply();
  }, $scope.stopSlider = function () {}, $scope.usernameToggle = !0, $scope.passwordToggle = !0, $scope.toggleUsername = function () {
    $scope.usernameToggle = !$scope.usernameToggle, $scope.newUsername = $scope.currentUser.username;
  }, $scope.togglePassword = function () {
    $scope.newPassword = null, $scope.confirmPassword = null, $scope.passwordToggle = !$scope.passwordToggle;
  }, $scope.checkPassword = function (password) {
    if (password) {
      var user = $scope.currentUser._id;
      UserSvc.checkPassword(user, password).then(function (response) {
        $scope.togglePassword();
      }, function () {
        var originalBg = $(".password").css("backgroundColor");
        $(".password").animate({
          backgroundColor: "#FFB6C1"
        }, 200).animate({
          backgroundColor: originalBg
        }, 200);
      });
    }
  }, $scope.changePassword = function (oldPassword, newPassword, confirmPassword) {
    if (newPassword) if (newPassword == confirmPassword) {
      var user = $scope.currentUser._id;
      UserSvc.changePassword(user, oldPassword, newPassword).then(function (response) {
        $scope.$emit("popup", {
          message: "Password Changed",
          type: "alert-success"
        }), $scope.oldPassword = null, $scope.togglePassword();
      }, function () {
        $scope.$emit("popup", {
          message: "Password Change Failed",
          type: "alert-danger"
        });
      });
    } else {
      var originalBg = $(".password").css("backgroundColor");
      $(".password").animate({
        backgroundColor: "#FFB6C1"
      }, 200).animate({
        backgroundColor: originalBg
      }, 200);
    }
  }, $scope.changeUsername = function (username) {
    $scope.$emit("loading"), UserSvc.changeUsername($scope.currentUser._id, username).then(function (response) {
      $scope.$emit("update", response.data);
    }, function (response) {
      $scope.$emit("popup", {
        message: username + " already in use",
        type: "alert-danger"
      });
    });
  }, $scope.updateUser = function () {
    $scope.currentUser && ($scope.$emit("loading"), UserSvc.updateUser($scope.currentUser).then(function (response) {
      $scope.$emit("update", response.data);
    }));
  }, $scope.$watch("currentUser.flags.length", function (length) {
    $scope.updateUser();
  }), $scope.loadCountries = function ($query) {
    return [{
      name: "Andorra",
      flag: "flag-ad",
      tidbit: ""
    }, {
      name: "United Arab Emirates",
      flag: "flag-ae"
    }, {
      name: "Afghanistan",
      flag: "flag-af"
    }, {
      name: "Antigua and Barbuda",
      flag: "flag-ag"
    }, {
      name: "Anguilla",
      flag: "flag-ai"
    }, {
      name: "Albania",
      flag: "flag-al"
    }, {
      name: "Armenia",
      flag: "flag-am"
    }, {
      name: "Angola",
      flag: "flag-ao"
    }, {
      name: "Antarctica",
      flag: "flag-aq"
    }, {
      name: "Argentina",
      flag: "flag-ar"
    }, {
      name: "American Somoa",
      flag: "flag-as"
    }, {
      name: "Austria",
      flag: "flag-at"
    }, {
      name: "Australia",
      flag: "flag-au"
    }, {
      name: "Aruba",
      flag: "flag-aw"
    }, {
      name: "Åland Islands",
      flag: "flag-ax"
    }, {
      name: "Azerbaijan",
      flag: "flag-az"
    }, {
      name: "Bosnia and Herzegovina",
      flag: "flag-ba"
    }, {
      name: "Barbados",
      flag: "flag-bb"
    }, {
      name: "Bangladesh",
      flag: "flag-bd"
    }, {
      name: "Belgium",
      flag: "flag-be"
    }, {
      name: "Burkina Faso",
      flag: "flag-bf"
    }, {
      name: "Bulgaria",
      flag: "flag-bg"
    }, {
      name: "Bahrain",
      flag: "flag-bh"
    }, {
      name: "Burundi",
      flag: "flag-bi"
    }, {
      name: "Benin",
      flag: "flag-bj"
    }, {
      name: "Saint Barthélemy",
      flag: "flag-bl"
    }, {
      name: "Bermuda",
      flag: "flag-bm"
    }, {
      name: "Brunei ",
      flag: "flag-bn"
    }, {
      name: "Bolivia, Plurinational State of",
      flag: "flag-bo"
    }, {
      name: "Bonaire, Sint Eustatius and Saba",
      flag: "flag-bq"
    }, {
      name: "Brazil",
      flag: "flag-br"
    }, {
      name: "Bahamas",
      flag: "flag-bs"
    }, {
      name: "Bhutan",
      flag: "flag-bt"
    }, {
      name: "Bouvet Island",
      flag: "flag-bv"
    }, {
      name: "Botswana",
      flag: "flag-bw"
    }, {
      name: "Belarus",
      flag: "flag-by"
    }, {
      name: "Belize",
      flag: "flag-bz"
    }, {
      name: "Canada",
      flag: "flag-ca"
    }, {
      name: "Cocos (Keeling) Islands",
      flag: "flag-cc"
    }, {
      name: "Congo, the Democratic Republic of the",
      flag: "flag-cd"
    }, {
      name: "Central African Republic",
      flag: "flag-cf"
    }, {
      name: "Congo",
      flag: "flag-cg"
    }, {
      name: "Switzerland",
      flag: "flag-ch"
    }, {
      name: "Côte d'Ivoire",
      flag: "flag-ci"
    }, {
      name: "Cook Islands",
      flag: "flag-ck"
    }, {
      name: "Chile",
      flag: "flag-cl"
    }, {
      name: "Cameroon",
      flag: "flag-cm"
    }, {
      name: "China",
      flag: "flag-cn"
    }, {
      name: "Colombia",
      flag: "flag-co"
    }, {
      name: "Costa Rica",
      flag: "flag-cr"
    }, {
      name: "Cuba",
      flag: "flag-cu"
    }, {
      name: "Cabo Verde",
      flag: "flag-cv"
    }, {
      name: "Curaçao",
      flag: "flag-cw"
    }, {
      name: "Christmas Island",
      flag: "flag-cx"
    }, {
      name: "Cyprus",
      flag: "flag-cy"
    }, {
      name: "Czech Republic",
      flag: "flag-cz"
    }, {
      name: "Germany",
      flag: "flag-de"
    }, {
      name: "Djibouti",
      flag: "flag-dj"
    }, {
      name: "Denmark",
      flag: "flag-dk"
    }, {
      name: "Dominica",
      flag: "flag-dm"
    }, {
      name: "Dominican Republic",
      flag: "flag-do"
    }, {
      name: "Algeria",
      flag: "flag-dz"
    }, {
      name: "Ecuador",
      flag: "flag-ec"
    }, {
      name: "Estonia",
      flag: "flag-ee"
    }, {
      name: "Egypt",
      flag: "flag-eg"
    }, {
      name: "Western Sahara",
      flag: "flag-eh"
    }, {
      name: "Eritrea",
      flag: "flag-er"
    }, {
      name: "Spain",
      flag: "flag-es"
    }, {
      name: "Ethiopia",
      flag: "flag-et"
    }, {
      name: "Finland",
      flag: "flag-fi"
    }, {
      name: "Fiji",
      flag: "flag-fj"
    }, {
      name: "Falkland Islands (Malvinas)",
      flag: "flag-fk"
    }, {
      name: "Micronesia, Federated States of",
      flag: "flag-fm"
    }, {
      name: "Faroe Islands",
      flag: "flag-fo"
    }, {
      name: "France",
      flag: "flag-fr"
    }, {
      name: "Gabon",
      flag: "flag-ga"
    }, {
      name: "United Kingdom of Great Britain and Northern Ireland",
      flag: "flag-gb"
    }, {
      name: "Grenada",
      flag: "flag-gd"
    }, {
      name: "Georgia",
      flag: "flag-ge"
    }, {
      name: "French Guiana",
      flag: "flag-gf"
    }, {
      name: "Guernsey",
      flag: "flag-gg"
    }, {
      name: "Ghana",
      flag: "flag-gh"
    }, {
      name: "Gibraltar",
      flag: "flag-gi"
    }, {
      name: "Greenland",
      flag: "flag-gl"
    }, {
      name: "Gambia",
      flag: "flag-gm"
    }, {
      name: "Guinea",
      flag: "flag-gn"
    }, {
      name: "Guadeloupe",
      flag: "flag-gp"
    }, {
      name: "Equatorial Guinea",
      flag: "flag-gq"
    }, {
      name: "Greece",
      flag: "flag-gr"
    }, {
      name: "South Georgia and the South Sandwich Islands",
      flag: "flag-gs"
    }, {
      name: "Guatemala",
      flag: "flag-gt"
    }, {
      name: "Guam",
      flag: "flag-gu"
    }, {
      name: "Guinea-Bissau",
      flag: "flag-gw"
    }, {
      name: "Guyana",
      flag: "flag-gy"
    }, {
      name: "Hong Kong",
      flag: "flag-hk"
    }, {
      name: "Heard Island and McDonald Islands",
      flag: "flag-hm"
    }, {
      name: "Honduras",
      flag: "flag-hn"
    }, {
      name: "Croatia",
      flag: "flag-hr"
    }, {
      name: "Haiti",
      flag: "flag-ht"
    }, {
      name: "Hungary",
      flag: "flag-hu"
    }, {
      name: "Indonesia",
      flag: "flag-id"
    }, {
      name: "Ireland",
      flag: "flag-ie"
    }, {
      name: "Israel",
      flag: "flag-il"
    }, {
      name: "Isle of Man",
      flag: "flag-im"
    }, {
      name: "India",
      flag: "flag-in"
    }, {
      name: "British Indian Ocean Territory",
      flag: "flag-io"
    }, {
      name: "Iraq",
      flag: "flag-iq"
    }, {
      name: "Iran, Islamic Republic of",
      flag: "flag-ir"
    }, {
      name: "Iceland",
      flag: "flag-is"
    }, {
      name: "Italy",
      flag: "flag-it"
    }, {
      name: "Jersey",
      flag: "flag-je"
    }, {
      name: "Jamaica",
      flag: "flag-jm"
    }, {
      name: "Jordan",
      flag: "flag-jo"
    }, {
      name: "Japan",
      flag: "flag-jp"
    }, {
      name: "Kenya",
      flag: "flag-ke"
    }, {
      name: "Kyrgyzstan",
      flag: "flag-kg"
    }, {
      name: "Cambodia",
      flag: "flag-kh"
    }, {
      name: "Kiribati",
      flag: "flag-ki"
    }, {
      name: "Comoros",
      flag: "flag-km"
    }, {
      name: "Saint Kitts and Nevis",
      flag: "flag-kn"
    }, {
      name: "Korea, Democratic People's Republic of",
      flag: "flag-kp"
    }, {
      name: "Korea, Republic of",
      flag: "flag-kr"
    }, {
      name: "Kuwait",
      flag: "flag-kw"
    }, {
      name: "Cayman Islands",
      flag: "flag-ky"
    }, {
      name: "Kazakhstan",
      flag: "flag-kz"
    }, {
      name: "Lao People's Democratic Republic",
      flag: "flag-la"
    }, {
      name: "Lebanon",
      flag: "flag-lb"
    }, {
      name: "Saint Lucia",
      flag: "flag-lc"
    }, {
      name: "Liechtenstein",
      flag: "flag-li"
    }, {
      name: "Sri Lanka",
      flag: "flag-lk"
    }, {
      name: "Liberia",
      flag: "flag-lr"
    }, {
      name: "Lesotho",
      flag: "flag-ls"
    }, {
      name: "Lithuania",
      flag: "flag-lt"
    }, {
      name: "Luxembourg",
      flag: "flag-lu"
    }, {
      name: "Latvia",
      flag: "flag-lv"
    }, {
      name: "Libya",
      flag: "flag-ly"
    }, {
      name: "Morocco",
      flag: "flag-ma"
    }, {
      name: "Monaco",
      flag: "flag-mc"
    }, {
      name: "Moldova, Republic of",
      flag: "flag-md"
    }, {
      name: "Montenegro",
      flag: "flag-me"
    }, {
      name: "Saint Martin (French part)",
      flag: "flag-mf"
    }, {
      name: "Madagascar",
      flag: "flag-mg"
    }, {
      name: "Marshall Islands",
      flag: "flag-mh"
    }, {
      name: "Macedonia, the former Yugoslav Republic of",
      flag: "flag-mk"
    }, {
      name: "Mali",
      flag: "flag-ml"
    }, {
      name: "Myanmar",
      flag: "flag-mm"
    }, {
      name: "Mongolia",
      flag: "flag-mn"
    }, {
      name: "Macao",
      flag: "flag-mo"
    }, {
      name: "Northern Mariana Islands",
      flag: "flag-mp"
    }, {
      name: "Martinique",
      flag: "flag-mq"
    }, {
      name: "Mauritania",
      flag: "flag-mr"
    }, {
      name: "Montserrat",
      flag: "flag-ms"
    }, {
      name: "Malta",
      flag: "flag-mt"
    }, {
      name: "Mauritius",
      flag: "flag-mu"
    }, {
      name: "Maldives",
      flag: "flag-mv"
    }, {
      name: "Malawi",
      flag: "flag-mw"
    }, {
      name: "Mexico",
      flag: "flag-mx"
    }, {
      name: "Malaysia",
      flag: "flag-my"
    }, {
      name: "Mozambique",
      flag: "flag-mz"
    }, {
      name: "Namibia",
      flag: "flag-na"
    }, {
      name: "New Caledonia",
      flag: "flag-nc"
    }, {
      name: "Niger",
      flag: "flag-ne"
    }, {
      name: "Norfolk Island",
      flag: "flag-nf"
    }, {
      name: "Nigeria",
      flag: "flag-ng"
    }, {
      name: "Nicaragua",
      flag: "flag-ni"
    }, {
      name: "Netherlands",
      flag: "flag-nl"
    }, {
      name: "Norway",
      flag: "flag-no"
    }, {
      name: "Nepal",
      flag: "flag-np"
    }, {
      name: "Nauru",
      flag: "flag-nr"
    }, {
      name: "Niue",
      flag: "flag-nu"
    }, {
      name: "New Zealand",
      flag: "flag-nz"
    }, {
      name: "Oman",
      flag: "flag-om"
    }, {
      name: "Panama",
      flag: "flag-pa"
    }, {
      name: "Peru",
      flag: "flag-pe"
    }, {
      name: "French Polynesia",
      flag: "flag-pf"
    }, {
      name: "Papua New Guinea",
      flag: "flag-pg"
    }, {
      name: "Philippines",
      flag: "flag-ph"
    }, {
      name: "Pakistan",
      flag: "flag-pk"
    }, {
      name: "Poland",
      flag: "flag-pl"
    }, {
      name: "Saint Pierre and Miquelon",
      flag: "flag-pm"
    }, {
      name: "Pitcairn",
      flag: "flag-pn"
    }, {
      name: "Puerto Rico",
      flag: "flag-pr"
    }, {
      name: "Palestine, State of",
      flag: "flag-ps"
    }, {
      name: "Portugal",
      flag: "flag-pt"
    }, {
      name: "Palau",
      flag: "flag-pw"
    }, {
      name: "Paraguay",
      flag: "flag-py"
    }, {
      name: "Qatar",
      flag: "flag-qa"
    }, {
      name: "Réunion",
      flag: "flag-re"
    }, {
      name: "Romania",
      flag: "flag-ro"
    }, {
      name: "Serbia",
      flag: "flag-rs"
    }, {
      name: "Russian Federation",
      flag: "flag-ru"
    }, {
      name: "Rwanda",
      flag: "flag-rw"
    }, {
      name: "Saudi Arabia",
      flag: "flag-sa"
    }, {
      name: "Solomon Islands",
      flag: "flag-sb"
    }, {
      name: "Seychelles",
      flag: "flag-sc"
    }, {
      name: "Sudan",
      flag: "flag-sd"
    }, {
      name: "Sweden",
      flag: "flag-se"
    }, {
      name: "Singapore",
      flag: "flag-sg"
    }, {
      name: "Saint Helena, Ascension and Tristan da Cunha",
      flag: "flag-sh"
    }, {
      name: "Slovenia",
      flag: "flag-si"
    }, {
      name: "Svalbard and Jan Mayen",
      flag: "flag-sj"
    }, {
      name: "Slovakia",
      flag: "flag-sk"
    }, {
      name: "Sierra Leone",
      flag: "flag-sl"
    }, {
      name: "San Marino",
      flag: "flag-sm"
    }, {
      name: "Senegal",
      flag: "flag-sn"
    }, {
      name: "Somalia",
      flag: "flag-so"
    }, {
      name: "Suriname",
      flag: "flag-sr"
    }, {
      name: "South Sudan",
      flag: "flag-ss"
    }, {
      name: "Sao Tome and Principe",
      flag: "flag-st"
    }, {
      name: "El Salvador",
      flag: "flag-sv"
    }, {
      name: "Sint Maarten (Dutch part)",
      flag: "flag-sx"
    }, {
      name: "Syrian Arab Republic",
      flag: "flag-sy"
    }, {
      name: "Swaziland",
      flag: "flag-sz"
    }, {
      name: "Turks and Caicos Islands",
      flag: "flag-tc"
    }, {
      name: "Chad",
      flag: "flag-td"
    }, {
      name: "French Southern Territories",
      flag: "flag-tf"
    }, {
      name: "Togo",
      flag: "flag-tg"
    }, {
      name: "Thailand",
      flag: "flag-th"
    }, {
      name: "Tajikistan",
      flag: "flag-tj"
    }, {
      name: "Tokelau",
      flag: "flag-tk"
    }, {
      name: "Timor-Leste",
      flag: "flag-tl"
    }, {
      name: "Turkmenistan",
      flag: "flag-tm"
    }, {
      name: "Tunisia",
      flag: "flag-tn"
    }, {
      name: "Tonga",
      flag: "flag-to"
    }, {
      name: "Turkey",
      flag: "flag-tr"
    }, {
      name: "Trinidad and Tobago",
      flag: "flag-tt"
    }, {
      name: "Tuvalu",
      flag: "flag-tv"
    }, {
      name: "Taiwan, Province of China",
      flag: "flag-tw"
    }, {
      name: "Tanzania, United Republic of",
      flag: "flag-tz"
    }, {
      name: "Ukraine",
      flag: "flag-ua"
    }, {
      name: "Uganda",
      flag: "flag-ug"
    }, {
      name: "United States Minor Outlying Islands",
      flag: "flag-um"
    }, {
      name: "United States of America",
      flag: "flag-us"
    }, {
      name: "Uruguay",
      flag: "flag-uy"
    }, {
      name: "Uzbekistan",
      flag: "flag-uz"
    }, {
      name: "Holy See",
      flag: "flag-va"
    }, {
      name: "Saint Vincent and the Grenadines",
      flag: "flag-vc"
    }, {
      name: "Venezuela, Bolivarian Republic of",
      flag: "flag-ve"
    }, {
      name: "Virgin Islands, British",
      flag: "flag-vg"
    }, {
      name: "Virgin Islands, U.S.",
      flag: "flag-vi"
    }, {
      name: "Viet Nam",
      flag: "flag-vn"
    }, {
      name: "Vanuatu",
      flag: "flag-vu"
    }, {
      name: "Wallis and Futuna",
      flag: "flag-wf"
    }, {
      name: "Samoa",
      flag: "flag-ws"
    }, {
      name: "Yemen",
      flag: "flag-ye"
    }, {
      name: "Mayotte",
      flag: "flag-yt"
    }, {
      name: "South Africa",
      flag: "flag-za"
    }, {
      name: "Zambia",
      flag: "flag-zm"
    }, {
      name: "Zimbabwe",
      flag: "flag-zw"
    }].filter(function (country) {
      return -1 != country.name.toLowerCase().indexOf($query.toLowerCase());
    });
  };
}]), angular.module("app").controller("SkillsCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.selectedSkill = 0, $scope.skillsVisible = !1, $scope.labels = ["Download Sales", "In-Store Sales", "Mail-Order Sales"], $scope.data = [300, 500, 100], $.getJSON("/skills.json", function (data) {
    $scope.skills = data.filter(function (skill) {
      return skill.enabled;
    }), $scope.setSelectedSkill = function (skill) {
      $scope.selectedSkill = skill, $scope.selectedSkill.chartOptions = {
        cutoutPercentage: 80,
        circumference: 2 * Math.PI,
        maintainAspectRatio: !0,
        tooltips: {
          enabled: !1
        }
      }, $scope.selectedSkill.chartStyle = {
        "background-image": "url(/skills/" + $scope.selectedSkill.image + ")",
        "background-repeat": "no-repeat",
        "background-size": "60%",
        "background-position": "50% 50%"
      };
    }, $scope.setSelectedSkill($scope.skills[0]), $scope.$apply();
  });
}]), angular.module("app").controller("TenThingsCtrl", ["$scope", "BotsSvc", function ($scope, BotsSvc) {
  function flash(element) {
    const color = $(element).css("background-color");
    $(element).animate({
      backgroundColor: "#FA8072"
    }, 100, () => {
      $(element).animate({
        backgroundColor: color
      }, 100);
    });
  }

  $scope.categories = ["Music", "Television", "Movies", "Entertainment", "Geography", "History", "Science", "Gaming", "Sports", "Religion", "Art", "Literature", "Misc", "Funny", "Food and Drink", "Society", "Nature", "Technology", "Language", "Business", "Internet"], $scope.keyDown = e => {
    switch ((e = e || window.event).keyCode) {
      case 9:
        $("#new-blurb").is(":focus") && setTimeout(() => {
          $scope.addValue();
        }, 100);
        break;

      case 13:
        $("#new-blurb").is(":focus") ? $scope.addValue() : $("#new-value").is(":focus") && $("#new-blurb").focus();
    }
  }, $scope.categoryFilters = $scope.categories.map(category => category), $scope.categoryFilters.push("All"), $scope.categoryFilters.push("Blank"), $scope.categoryFilter = "All", $scope.setCategoryFilter = category => {
    $scope.categoryFilter = category;
  }, $scope.setUserFilter = user => {
    $scope.userFilter = user;
  }, $scope.filteredLists = () => $scope.lists ? $scope.lists.filter(({
    category,
    creator
  }) => "All" === $scope.categoryFilter && "All" === $scope.userFilter || ("All" !== $scope.categoryFilter && "All" === $scope.userFilter ? category ? category === $scope.categoryFilter : "Blank" === $scope.categoryFilter : "All" === $scope.categoryFilter && "All" !== $scope.userFilter ? creator === $scope.userFilter : category ? category === $scope.categoryFilter && creator === $scope.userFilter : "Blank" === $scope.categoryFilter && creator === $scope.userFilter)).filter(({
    name
  }) => !name || name.toLowerCase().indexOf($scope.searchName.toLowerCase()) >= 0) : [], $scope.$on("login", _ => {
    $scope.getLists();
  }), $scope.sort = sortBy => {
    $scope.sortValue === sortBy ? $scope.sortDirection = !$scope.sortDirection : ($scope.sortValue = sortBy, $scope.sortDirection = !0), $scope.sorter = ($scope.sortDirection ? "+" : "-") + $scope.sortValue;
  }, $scope.sortValue = "date", $scope.sortDirection = !0, $scope.sortList = "value", $scope.sort("date"), $scope.getCategoryCount = category => $scope.lists ? $scope.lists.filter(list => !("All" !== category && list.category !== category || "All" !== $scope.userFilter && list.creator.username !== $scope.userFilter)).length : 0, $scope.getLists = () => {
    $scope.loading = !0, BotsSvc.getLists($scope.currentUser).then(({
      data
    }) => {
      $scope.lists = data, console.log($scope.lists[0]), $scope.userFilters = {}, $scope.userFilters.All = $scope.lists.length, $scope.userFilters = $scope.lists.sort((list1, list2) => list1.creator > list2.creator).reduce((users, {
        creator
      }) => (users[creator] || (users[creator] = 0), users[creator]++, users), $scope.userFilters), $scope.userCount = Object.keys($scope.userFilters).length, $scope.userFilter = "All", $scope.loading = !1;
    });
  }, $scope.selectList = list => {
    BotsSvc.getList(list).then(({
      data
    }) => {
      $scope.selectedList = data;
    });
  }, $scope.selectCategory = category => {
    $scope.selectedList.category = category, $scope.selectingCategory = !1;
  }, $scope.addList = () => {
    $scope.selectedList = {
      name: "",
      creator: $scope.currentUser._id,
      date: new Date(),
      values: [],
      answers: 0,
      isDynamic: !0
    };
  }, $scope.addValue = () => {
    $scope.newItem.value && (_.some($scope.selectedList.values, value => value == $scope.newItem.value) ? alert(`${$scope.newItem.value} is already in the list`) : ($scope.newItem.creator = $scope.currentUser._id, $scope.selectedList.values.unshift(JSON.parse(JSON.stringify($scope.newItem))), $scope.selectedList.answers++, $scope.newItem.value = "", $scope.newItem.blurb = "", $scope.selectedList.values.length >= 10 && $scope.selectedList.name && $scope.selectedList.category && $scope.saveList($scope.selectedList))), $("#new-value").focus();
  }, $scope.reportList = list => {
    BotsSvc.reportList($scope.currentUser, list);
  }, $scope.saveList = list => {
    list.values = list.values.filter(({
      value
    }) => value), list.values.length >= 10 && list.name && list.category ? ($scope.saving = !0, BotsSvc.saveList($scope.currentUser, list).then(({
      data
    }) => {
      if ($scope.selectedList._id) {
        for (let i = 0; i < $scope.lists.length; i++) if ($scope.lists[i]._id === data._id) {
          $scope.lists[i] = data;
          break;
        }

        $scope.selectList(list);
      } else $scope.lists.unshift(data), $scope.selectList(data);

      $scope.saving = !1;
    }, err => {
      console.error(err), $scope.saving = !1;
    })) : list.values.length < 10 ? alert("Lists must contain 10 or more values!") : list.name ? flash("#list-category") : flash("#list-name");
  }, $scope.deleteList = list => {
    list._id ? confirm("Are you sure you want to delete this list?") && BotsSvc.deleteList(list).then(response => {
      $scope.getLists(), $scope.selectedList = null;
    }) : ($scope.lists = $scope.lists.filter(({
      _id
    }) => _id), $scope.selectedList = null);
  }, $scope.listButtonClass = list => {
    const values = list.values,
          blurbs = list.blurbs;
    return values === blurbs && list.description ? "btn-default" : 0 !== blurbs || list.description ? 0 === blurbs && list.description ? "btn-info" : "btn-primary" : "btn-warning";
  };
}]), angular.module("app").controller("WorkoutCtrl", ["$scope", function ($scope) {
  $scope.timeRemaining = 0, $scope.timeExercising = 30, $scope.timeResting = 10, $scope.rest = !1;
  var exercising,
      sounds = {
    on: new Audio("on.wav"),
    off: new Audio("off.wav"),
    switch: new Audio("switch.wav")
  },
      exercises = [{
    name: "Jumping Jacks",
    split: !1
  }, {
    name: "Wall Sit",
    split: !1
  }, {
    name: "Push-Up",
    split: !1
  }, {
    name: "Crunch",
    split: !1
  }, {
    name: "Step-Up",
    split: !0
  }, {
    name: "Squat",
    split: !1
  }, {
    name: "Triceps Dip",
    split: !1
  }, {
    name: "Plank",
    split: !1
  }, {
    name: "High Knees",
    split: !1
  }, {
    name: "Lunge",
    split: !1
  }, {
    name: "Push-Up with Rotation",
    split: !1
  }, {
    name: "Side Plank",
    split: !0
  }];
  $scope.progress = function () {
    return exercises.length - Math.floor($scope.timeRemaining / ($scope.timeExercising + $scope.timeResting)) + "/" + exercises.length;
  }, $scope.workout = function () {
    var excerciseTime = $scope.timeExercising + $scope.timeResting;
    $scope.timeRemaining ? (clearInterval(exercising), $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.exercise = {
      name: "",
      split: !1
    }) : ($scope.timeRemaining = exercises.length * excerciseTime, exercising = setInterval(function () {
      if ($scope.timeRemaining--, 0 === $scope.timeRemaining) return $scope.exercise = {
        name: "Finished! Congrats!",
        split: !1
      }, $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.$apply(), clearInterval(exercising);
      var currentExercise = Math.floor($scope.timeRemaining / excerciseTime),
          timer = $scope.timeRemaining - currentExercise * excerciseTime;
      $scope.timer = timer > $scope.timeExercising ? timer - $scope.timeExercising : timer, timer > $scope.timeExercising ? $scope.rest = !0 : $scope.rest = !1, $scope.exercise = exercises[exercises.length - currentExercise - 1], timer === $scope.timeExercising ? sounds.on.play() : 0 === timer ? sounds.off.play() : $scope.exercise.split && timer === Math.floor($scope.timeExercising / 2) && sounds.switch.play(), $scope.$apply();
    }, 1e3));
  };
}]), angular.module("app").directive("head", ["$rootScope", "$state", "$compile", "$interpolate", function ($rootScope, $state, $compile, $interpolate) {
  var getStyle = function (templateStyleUrl) {
    var style = {
      href: templateStyleUrl,
      rel: "stylesheet"
    };
    return style.href.match(/\.less$/) && (style.rel = "stylesheet/less"), style;
  };

  return {
    restrict: "E",
    link: function (scope, elem) {
      scope.templateStyles = [];
      var html = '<link ng-attr-rel="{{style.rel}}" ng-repeat="style in templateStyles" ng-href="{{style.href}}">';
      html = (html = html.replace(/\{\{/g, $interpolate.startSymbol())).replace(/\}\}/g, $interpolate.endSymbol()), elem.append($compile(html)(scope)), $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
        scope.templateStyles = function (state) {
          for (var states = {}; "" !== state.name;) {
            var parent = $state.get("^", state);
            states[parent.name] || (states[parent.name] = {}), state.templateStyleUrl && (states[parent.name][""] || (states[parent.name][""] = getStyle(state.templateStyleUrl))), state.views && _.forEach(state.views, function (view, key) {
              if (view.templateStyleUrl) return (key = key.split("@"))[1] ? (states[key[1]] || (states[key[1]] = {}), void (states[key[1]][key[0]] || (states[key[1]][key[0]] = getStyle(view.templateStyleUrl)))) : void (states[parent.name][key[0]] = getStyle(view.templateStyleUrl));
            }), state = parent;
          }

          var flat = [];
          return _.forEach(states, function (views) {
            _.forEach(views, function (style) {
              _.includes(flat, style) || flat.push(style);
            });
          }), flat.reverse(), flat;
        }(toState);
      });
    }
  };
}]), angular.module("app").service("BotsSvc", ["$http", function ($http) {
  this.getLists = function (user) {
    return $http.get("/api/bots/lists");
  }, this.getList = function (list) {
    return $http.get("/api/bots/lists/" + list._id);
  }, this.saveList = function (user, list) {
    return $http.put("/api/bots/lists", {
      user,
      list
    });
  }, this.reportList = function (user, list) {
    $http.get("/api/bots/lists/" + list._id + "/report/" + user._id);
  }, this.deleteList = function (list) {
    return $http.delete("/api/bots/lists/" + list._id);
  };
}]), angular.module("app").service("CategoriesSvc", ["$http", function ($http) {
  var svc = this;
  svc.getCategories = function () {
    return $http.get("/api/categories");
  }, svc.getTasks = function (category) {
    return $http.get("/api/categories/" + category);
  }, svc.addCategory = function (category) {
    return $http.post("/api/categories/", category);
  }, svc.addTask = function (category, task) {
    return $http.post("/api/categories/" + category + "/tasks", task);
  }, svc.setPriorityList = function (list) {
    svc.choices = list, svc.priorityList = [];

    for (var i = 0; i < list.length; i++) for (var j = i + 1; j < list.length; j++) {
      var random = Math.round(Math.random());
      svc.priorityList.push({
        id: 0,
        firstChoice: list[0 === random ? i : j].name,
        secondChoice: list[0 === random ? j : i].name,
        choice: ""
      });
    }

    for (i in function (array) {
      var t,
          i,
          m = array.length;

      for (; m;) i = Math.floor(Math.random() * m--), t = array[m], array[m] = array[i], array[i] = t;
    }(svc.priorityList), svc.priorityList) svc.priorityList[i].id = i + 1;
  }, svc.getPriorityList = function (list) {
    return svc.priorityList;
  };
}]), angular.module("app").service("EmailSvc", ["$http", function ($http) {
  this.send = function (email) {
    return console.log(email), $http.post("/api/email", email);
  };
}]), angular.module("app").service("FileSvc", ["$http", function ($http) {
  this.getImages = function (folder) {
    return $http.get("/api/files/images/" + folder);
  };
}]), angular.module("app").service("GameSvc", ["$http", function ($http) {
  this.getHighscore = function (game, user) {
    return $http.get("/api/games/" + game + "/" + user + "/highscore");
  }, this.setHighscore = function (game, user, score) {
    return $http.post("/api/games/" + game + "/" + user + "/highscore", {
      score
    });
  };
}]), angular.module("app").service("LanguageSvc", function () {
  var svc = this;
  svc.languages = [{
    code: "EN",
    name: "English",
    flag: "flag-icon-gb"
  }, {
    code: "NL",
    name: "Nederlands",
    flag: "flag-icon-nl"
  }, {
    code: "FR",
    name: "Français",
    flag: "flag-icon-fr"
  }], svc.text = [{
    code: "EN"
  }, {
    code: "NL"
  }, {
    code: "FR"
  }], svc.selectedLanguage = svc.languages[0], svc.setLanguage = function (language) {
    return svc.selectedLanguage = language, language;
  }, svc.getLanguage = function () {
    return svc.selectedLanguage;
  };
}), angular.module("app").service("PostsSvc", ["$http", function ($http) {
  this.fetch = function () {
    return $http.get("/api/posts");
  }, this.create = function (post) {
    return $http.post("/api/posts", post);
  }, this.getPost = function (post) {
    return $http.get("/api/posts/" + post._id);
  };
}]), angular.module("app").service("UserSvc", ["$http", function ($http) {
  var svc = this;
  svc.getUser = function () {
    return $http.get("/api/users");
  }, svc.setToken = function (token) {
    return $http.defaults.headers.common["X-Auth"] = token, svc.getUser();
  }, svc.authenticate = function (user) {
    return $http.post("/api/users/authenticate", {
      user
    }).then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.login = function (user) {
    return $http.get("/api/users/" + user + "/login").then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.updateUser = function (user) {
    return $http.post("/api/users/" + user._id, {
      user
    }).then(function () {
      return svc.getUser();
    });
  }, svc.checkPassword = function (user, password) {
    return $http.post("/api/users/" + user + "/verification", {
      password
    });
  }, svc.changePassword = function (user, oldPassword, newPassword) {
    return $http.post("/api/users/" + user + "/password", {
      oldPassword,
      newPassword
    });
  }, svc.changeUsername = function (user, newUsername) {
    return $http.post("/api/users/" + user + "/username", {
      newUsername
    }).then(function () {
      return svc.getUser();
    });
  }, svc.logout = function () {
    window.localStorage.clear(), $http.defaults.headers.common["X-Auth"] = "";
  }, svc.createUser = function (username, password) {
    return $http.post("/api/users", {
      username,
      password
    }).then(function () {
      return svc.login(username, password);
    });
  };
}]), angular.module("app").controller("QuizGoogleCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("google").then(function (response) {
    $scope.images = response.data;
  });
}]), angular.module("app").controller("QuizLogosCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("logos").then(function (response) {
    $scope.images = response.data;
  });
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInJvdXRlcy5qcyIsIndlYnNvY2tldHMuanMiLCJjb250cm9sbGVycy9hcHAuY3RybC5qcyIsImNvbnRyb2xsZXJzL2FzdGVyb2lkcy5jdHJsLmpzIiwiY29udHJvbGxlcnMvYnViYmxlcy5jdHJsLmpzIiwiY29udHJvbGxlcnMvY29udGFjdC5jdHJsLmpzIiwiY29udHJvbGxlcnMvZXhwZXJpZW5jZS5jdHJsLmpzIiwiY29udHJvbGxlcnMvaG9iYmllcy5jdHJsLmpzIiwiY29udHJvbGxlcnMvbGVtbWluZ3MuY3RybC5qcyIsImNvbnRyb2xsZXJzL2xpc3RzLmN0cmwuanMiLCJjb250cm9sbGVycy9sb2dpbi5jdHJsLmpzIiwiY29udHJvbGxlcnMvcG9zdHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL3ByaW9yaXRpemUuY3RybC5qcyIsImNvbnRyb2xsZXJzL3Byb2ZpbGUuY3RybC5qcyIsImNvbnRyb2xsZXJzL3NraWxscy5jdHJsLmpzIiwiY29udHJvbGxlcnMvdGVudGhpbmdzLmN0cmwuanMiLCJhcHAuanMiLCJjb250cm9sbGVycy93b3Jrb3V0LmN0cmwuanMiLCJkaXJlY3RpdmVzL3VpLXJvdXRlci1zdHlsZXMuZGlyLmpzIiwic2VydmljZXMvYm90cy5zdmMuanMiLCJzZXJ2aWNlcy9jYXRlZ29yaWVzLnN2Yy5qcyIsInNlcnZpY2VzL2VtYWlsLnN2Yy5qcyIsInNlcnZpY2VzL2ZpbGUuc3ZjLmpzIiwic2VydmljZXMvZ2FtZS5zdmMuanMiLCJzZXJ2aWNlcy9sYW5ndWFnZS5zdmMuanMiLCJzZXJ2aWNlcy9wb3N0cy5zdmMuanMiLCJzZXJ2aWNlcy91c2VyLnN2Yy5qcyIsImNvbnRyb2xsZXJzL3F1aXp6ZXMvZ29vZ2xlLmN0cmwuanMiLCJjb250cm9sbGVycy9xdWl6emVzL2xvZ29zLmN0cmwuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJHVybFNlcnZpY2VQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwib3RoZXJ3aXNlIiwic3RyaWN0TW9kZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiaHRtbDVNb2RlIiwiZW5hYmxlZCIsInJlcXVpcmVCYXNlIiwic2VydmljZSIsIiRyb290U2NvcGUiLCIkdGltZW91dCIsImNvbm5lY3Rpb24iLCJjb25uZWN0IiwiV2ViU29ja2V0Iiwid2luZG93IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3QiLCJvbm9wZW4iLCJjb25zb2xlIiwibG9nIiwib25jbG9zZSIsImUiLCJvbmVycm9yIiwicmVhZHlTdGF0ZSIsIm9ubWVzc2FnZSIsInBheWxvYWQiLCJKU09OIiwicGFyc2UiLCJkYXRhIiwiJGJyb2FkY2FzdCIsInRvcGljIiwidGhpcyIsInNlbmQiLCJqc29uIiwic3RyaW5naWZ5IiwicnVuIiwiV2ViU29ja2V0U3ZjIiwiJHNjb3BlIiwiJGxvY2F0aW9uIiwiTGFuZ3VhZ2VTdmMiLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VyIiwibG9nZ2VkSW4iLCJsb2NhbFN0b3JhZ2UiLCJfaWQiLCJjdXJyZW50VXNlciIsIiQiLCJsb2FkIiwiZmFkZU91dCIsImZhZGVJbiIsInRoZW1lQ291bnRlciIsInRvZGF5IiwiRGF0ZSIsInllYXIiLCJnZXRGdWxsWWVhciIsInJhbmRvbSIsIk1hdGgiLCJmbG9vciIsImZsaXBUaGVtZSIsInNob3ciLCJoaWRlIiwic2V0VGltZW91dCIsImdldEpTT04iLCJza2lsbHMiLCJmaWx0ZXIiLCJza2lsbCIsImhvYmJpZXMiLCJqb2JzIiwiZm9yRWFjaCIsImpvYiIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJnZXRUaW1lU3BhbiIsImxhbmd1YWdlcyIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJnZXRMYW5ndWFnZSIsInNlbGVjdExhbmd1YWdlIiwibGFuZ3VhZ2UiLCJzZXRMYW5ndWFnZSIsImhvdmVyZGl2IiwiZGl2aWQiLCJsZWZ0IiwiY2xpZW50WCIsInRvcCIsImNsaWVudFkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3NzIiwidG9nZ2xlIiwic29jaWFsTWVkaWEiLCJuYW1lIiwiaWNvbiIsInRoZW4iLCJyZXNwb25zZSIsIiRvbiIsIl8iLCJiaXJ0aERhdGUiLCJsb2FkaW5nIiwibG9nb3V0IiwiZmlyZWJhc2UiLCJhdXRoIiwic2lnbk91dCIsImNsZWFyIiwiY2F0Y2giLCJlcnJvciIsImZvcm1hdERhdGUiLCJkYXRlIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwiR2FtZVN2YyIsImFubm91bmNlIiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImZvbnQiLCJmaWxsU3R5bGUiLCJ0ZXh0QWxpZ24iLCJzaG90cyIsImFzdGVyb2lkcyIsInBvd2VydXBzIiwiZXhwbG9zaW9ucyIsIm1hcCIsInNwYWNlcGljcyIsInNwYWNlIiwicG93ZXJ1cFR5cGVzIiwiYW5ub3VuY2VtZW50IiwiY3ljbGUiLCJyb3dzIiwiY29sdW1ucyIsInNpemUiLCJpIiwiZGlyZWN0aW9uIiwiaW1nIiwiSW1hZ2UiLCJhY3RpdmF0ZSIsInNwYWNlc2hpcCIsIm1heFNwZWVkIiwiY29vbGRvd24iLCJjb29sZG93blRpbWUiLCJyYW5nZSIsInNoaWVsZCIsImV4cGxvZGUiLCJzcGF3bkFzdGVyb2lkcyIsInBvd2VydXAiLCJhcnJheSIsInNyYyIsImV4cGxvc2lvbkltYWdlIiwiZXZhbHVhdGVLZXlzIiwicGxheWluZyIsInNob290Iiwicm90YXRpb24iLCJzcGVlZCIsInNjb3JlIiwiJGFwcGx5IiwiU3BhY2VzaGlwIiwiYXV0b1NwYXduIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImlkIiwicm91bmQiLCJBc3Rlcm9pZCIsIndpZHRoIiwiaGVpZ2h0IiwiY2Fubm9uIiwieCIsInkiLCJwb3NpdGlvbiIsImFuZ2xlIiwiU2hvdCIsIm1vdmUiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiZmlsbCIsImFzdGVyb2lkIiwiaGl0IiwiZ2FtZU92ZXIiLCJjb3MiLCJzaW4iLCJsaWZlc3BhbiIsImdldEVudHJ5UG9zaXRpb24iLCJyb3RhdGlvblNwZWVkIiwiRXhwbG9zaW9uIiwic2hvdCIsInBvaW50cyIsInNwYXduUG93ZXJ1cCIsIm9iamVjdCIsIlBvd2VydXAiLCJkZWxheSIsInNhdmUiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJjb2x1bW4iLCJyb3ciLCJkcmF3SW1hZ2UiLCJyZXN0b3JlIiwiZ3JpZFgiLCJncmlkWSIsIm9iamVjdDEiLCJvYmplY3QyIiwiYW1vdW50IiwiaGlnaHNjb3JlIiwic2V0SGlnaHNjb3JlIiwicmVzaXplQ2FudmFzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImtleUNvZGUiLCJ3aGljaCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRyYXciLCJjbGVhclJlY3QiLCJncmFkaWVudCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwidGFsbHkiLCJmaWxsVGV4dCIsIm1lYXN1cmVUZXh0IiwiYmFja2dyb3VuZEltYWdlIiwiYnViYmxlcyIsImNvbG9ycyIsIkJ1YmJsZSIsInJhZGl1cyIsImV4cGFuZGluZyIsImNpcmN1bWZlcmVuY2UiLCJtYXhSYWRpdXMiLCJ2eCIsInZ5IiwiZmlsdGVyQnViYmxlcyIsInB1c2giLCJidWJibGUiLCJFbWFpbFN2YyIsIm9wdGlvbnMiLCJ0ZXh0IiwiY29udGFjdCIsImVtYWlsIiwicGhvbmUiLCJhYm91dCIsIm1lc3NhZ2UiLCJzZW5kaW5nIiwic2VudCIsInN0YXR1cyIsImVyciIsImdldFNraWxsIiwic2tpbGxDb2RlIiwiZmluZCIsImNvZGUiLCIkd2luZG93IiwiaG9iYnlTZWxlY3RvclZpc2libGUiLCJzZWxlY3RlZEhvYmJ5Iiwic2VsZWN0SG9iYnkiLCJob2JieSIsInNob3dIb2JieSIsInZhbHVlIiwiaW5kZXgiLCJpbWFnZXMiLCJMRUZUIiwiUklHSFQiLCJsZW1taW5nc0ltYWdlIiwiZGVjb3JJbWFnZSIsImxlbW1pbmdzIiwic3RhcnRlZCIsImFjdGlvbnMiLCJ3YWxrIiwic3RhcnQiLCJlbmQiLCJyZXZlcnNlIiwiaHVoIiwiZmFsbCIsImZseSIsInN0b3AiLCJjbGltYiIsImJ1aWxkIiwicHVuY2giLCJkaWciLCJMZW1taW5nIiwiaW5pdCIsImFjdCIsImFjdGlvbiIsImFuaW1hdGlvbiIsInNjYWxlIiwiaGF0Y2giLCJvcGVuIiwicmVjdCIsIkNhdGVnb3JpZXNTdmMiLCJzaG93Q2F0ZWdvcnkiLCJnZXRDYXRlZ29yaWVzIiwiY2F0ZWdvcmllcyIsInRhc2tzIiwiaiIsImNhdGVnb3J5IiwidGFzayIsInNlbGVjdENhdGVnb3J5Iiwic2VsZWN0ZWRDYXRlZ29yeSIsInNlbGVjdGVkVGFza3MiLCJzZWxlY3RhYmxlVGFza3MiLCJlbnRlcmVkQ2F0ZWdvcnkiLCJuZXdDYXRlZ29yeSIsImZvdW5kIiwiYWRkQ2F0ZWdvcnkiLCJuZXdUYXNrIiwic2VsZWN0VGFzayIsImFkZFRhc2siLCJlbnRlcmVkVGFzayIsInJlbW92ZVRhc2siLCJ1bnNlbGVjdFRhc2siLCJ0YXNrTGlzdCIsInNwbGljZSIsImluZGV4T2YiLCJzdGFydFByaW9yaXRpemluZyIsInNldFByaW9yaXR5TGlzdCIsInBhdGgiLCJnZXRRdWVzdGlvbnMiLCJjb3VudGVyIiwidWkiLCJmaXJlYmFzZXVpIiwiQXV0aFVJIiwic3RhcnRVSSIsImNhbGxiYWNrcyIsInNpZ25JblN1Y2Nlc3MiLCJjcmVkZW50aWFsIiwicmVkaXJlY3RVcmwiLCJnZXRJZFRva2VuIiwiaWRUb2tlbiIsImF1dGhlbnRpY2F0ZSIsImRpc3BsYXlOYW1lIiwicGhvdG9VUkwiLCJlbWFpbFZlcmlmaWVkIiwiJGVtaXQiLCJtb2RhbCIsInR5cGUiLCJzaWduSW5GYWlsdXJlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjcmVkIiwic2lnbkluV2l0aENyZWRlbnRpYWwiLCJ1aVNob3duIiwic3R5bGUiLCJkaXNwbGF5Iiwic2lnbkluU3VjY2Vzc1VybCIsInNpZ25Jbk9wdGlvbnMiLCJHb29nbGVBdXRoUHJvdmlkZXIiLCJQUk9WSURFUl9JRCIsIkZhY2Vib29rQXV0aFByb3ZpZGVyIiwic2lnbkluRmxvdyIsImV2ZW50IiwicmVzZXQiLCIkZmlsdGVyIiwiUG9zdHNTdmMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5IiwicG9zdCIsImZldGNoIiwicG9zdHMiLCJnZXRQb3N0IiwidW5zaGlmdCIsInByaW9yaXR5TGlzdCIsImdldFByaW9yaXR5TGlzdCIsInNlbGVjdGVkUXVlc3Rpb24iLCJjdXJyZW50UXVlc3Rpb24iLCJkb25lIiwibWFrZUNob2ljZSIsImNob2ljZSIsImZpcnN0Q2hvaWNlIiwic2Vjb25kQ2hvaWNlIiwiZ2V0QnV0dG9uVmFsdWUiLCJzZWxlY3RRdWVzdGlvbiIsInF1ZXN0aW9uIiwiZ2V0RmlsdGVyZWRQcmlvcml0eUxpc3QiLCJzb3J0IiwiYSIsImIiLCJnZXRDaG9pY2VzTWFkZSIsImNob2ljZXNNYWRlIiwiZ2V0QnV0dG9uQ2xhc3MiLCJzaG93Q2hvaWNlcyIsImNoYXJ0Q2xpY2siLCJjaGFydCIsImdldFNlZ21lbnRzQXRFdmVudCIsInNob3dSZXN1bHRzIiwicmVzcG9uc2l2ZSIsInNlZ21lbnRTaG93U3Ryb2tlIiwic2VnbWVudFN0cm9rZUNvbG9yIiwic2VnbWVudFN0cm9rZVdpZHRoIiwicGVyY2VudGFnZUlubmVyQ3V0b3V0IiwiYW5pbWF0aW9uU3RlcHMiLCJhbmltYXRpb25FYXNpbmciLCJhbmltYXRlUm90YXRlIiwiYW5pbWF0ZVNjYWxlIiwibGVnZW5kVGVtcGxhdGUiLCJjaG9pY2VzIiwidm90ZXMiLCJsYWJlbCIsIm9mZnNldCIsImdlbmRlciIsInNleCIsImlkZW50aXR5Iiwic2V4ZXMiLCJpZGVudGl0aWVzIiwiZGF0ZU9wdGlvbnMiLCJtYXhEYXRlIiwibWluRGF0ZSIsImluaXREYXRlIiwiZGF0ZXBpY2tlck1vZGUiLCJwZXJjZW50YWdlIiwic3RhcnRTbGlkZXIiLCJkcmFnU2xpZGVyIiwic3RvcFNsaWRlciIsInVzZXJuYW1lVG9nZ2xlIiwicGFzc3dvcmRUb2dnbGUiLCJ0b2dnbGVVc2VybmFtZSIsIm5ld1VzZXJuYW1lIiwidXNlcm5hbWUiLCJ0b2dnbGVQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwiY29uZmlybVBhc3N3b3JkIiwiY2hlY2tQYXNzd29yZCIsInBhc3N3b3JkIiwib3JpZ2luYWxCZyIsImFuaW1hdGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjaGFuZ2VQYXNzd29yZCIsIm9sZFBhc3N3b3JkIiwiY2hhbmdlVXNlcm5hbWUiLCJ1cGRhdGVVc2VyIiwiJHdhdGNoIiwibG9hZENvdW50cmllcyIsIiRxdWVyeSIsImZsYWciLCJ0aWRiaXQiLCJjb3VudHJ5IiwidG9Mb3dlckNhc2UiLCJzZWxlY3RlZFNraWxsIiwic2tpbGxzVmlzaWJsZSIsImxhYmVscyIsInNldFNlbGVjdGVkU2tpbGwiLCJjaGFydE9wdGlvbnMiLCJjdXRvdXRQZXJjZW50YWdlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsInRvb2x0aXBzIiwiY2hhcnRTdHlsZSIsImJhY2tncm91bmQtaW1hZ2UiLCJpbWFnZSIsImJhY2tncm91bmQtcmVwZWF0IiwiYmFja2dyb3VuZC1zaXplIiwiYmFja2dyb3VuZC1wb3NpdGlvbiIsIkJvdHNTdmMiLCJmbGFzaCIsImVsZW1lbnQiLCJjb2xvciIsImtleURvd24iLCJpcyIsImFkZFZhbHVlIiwiZm9jdXMiLCJjYXRlZ29yeUZpbHRlcnMiLCJjYXRlZ29yeUZpbHRlciIsInNldENhdGVnb3J5RmlsdGVyIiwic2V0VXNlckZpbHRlciIsInVzZXJGaWx0ZXIiLCJmaWx0ZXJlZExpc3RzIiwibGlzdHMiLCJjcmVhdG9yIiwic2VhcmNoTmFtZSIsImdldExpc3RzIiwic29ydEJ5Iiwic29ydFZhbHVlIiwic29ydERpcmVjdGlvbiIsInNvcnRlciIsInNvcnRMaXN0IiwiZ2V0Q2F0ZWdvcnlDb3VudCIsImxpc3QiLCJ1c2VyRmlsdGVycyIsIkFsbCIsImxpc3QxIiwibGlzdDIiLCJyZWR1Y2UiLCJ1c2VycyIsInVzZXJDb3VudCIsInNlbGVjdExpc3QiLCJnZXRMaXN0Iiwic2VsZWN0ZWRMaXN0Iiwic2VsZWN0aW5nQ2F0ZWdvcnkiLCJhZGRMaXN0IiwidmFsdWVzIiwiYW5zd2VycyIsImlzRHluYW1pYyIsIm5ld0l0ZW0iLCJzb21lIiwiYWxlcnQiLCJibHVyYiIsInNhdmVMaXN0IiwicmVwb3J0TGlzdCIsInNhdmluZyIsImRlbGV0ZUxpc3QiLCJjb25maXJtIiwibGlzdEJ1dHRvbkNsYXNzIiwiYmx1cmJzIiwiZGVzY3JpcHRpb24iLCJ0aW1lUmVtYWluaW5nIiwidGltZUV4ZXJjaXNpbmciLCJ0aW1lUmVzdGluZyIsInJlc3QiLCJleGVyY2lzaW5nIiwic291bmRzIiwib24iLCJBdWRpbyIsIm9mZiIsInN3aXRjaCIsImV4ZXJjaXNlcyIsInNwbGl0IiwicHJvZ3Jlc3MiLCJ3b3Jrb3V0IiwiZXhjZXJjaXNlVGltZSIsImNsZWFySW50ZXJ2YWwiLCJ0aW1lciIsImV4ZXJjaXNlIiwic2V0SW50ZXJ2YWwiLCJjdXJyZW50RXhlcmNpc2UiLCJwbGF5IiwiZGlyZWN0aXZlIiwiJHN0YXRlIiwiJGNvbXBpbGUiLCIkaW50ZXJwb2xhdGUiLCJnZXRTdHlsZSIsInRlbXBsYXRlU3R5bGVVcmwiLCJocmVmIiwicmVsIiwibWF0Y2giLCJyZXN0cmljdCIsImxpbmsiLCJzY29wZSIsImVsZW0iLCJ0ZW1wbGF0ZVN0eWxlcyIsImh0bWwiLCJyZXBsYWNlIiwic3RhcnRTeW1ib2wiLCJlbmRTeW1ib2wiLCJhcHBlbmQiLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwic3RhdGVzIiwicGFyZW50IiwiZ2V0Iiwidmlld3MiLCJ2aWV3Iiwia2V5IiwiZmxhdCIsImluY2x1ZGVzIiwiZ2V0U3R5bGVzIiwiJGh0dHAiLCJwdXQiLCJkZWxldGUiLCJzdmMiLCJnZXRUYXNrcyIsInQiLCJtIiwic2h1ZmZsZSIsImdldEltYWdlcyIsImZvbGRlciIsImdldEhpZ2hzY29yZSIsImdhbWUiLCJnZXRVc2VyIiwic2V0VG9rZW4iLCJ0b2tlbiIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsImNyZWF0ZVVzZXIiLCJGaWxlU3ZjIl0sIm1hcHBpbmdzIjoiQUFPQUEsT0FBQUEsQ0FBQUMsTUFBQUQsQ0FBQSxLQUFBQSxFQUFBLENBQ0EsV0FEQSxFQUVBLGNBRkEsRUFHQSxXQUhBLEVBSUEsWUFKQSxFQUtBLFlBTEEsRUFNQSxhQU5BLEVBT0EsYUFQQSxFQVFBLFVBUkEsRUFTQSxZQVRBLENBQUFBLEdDUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQUUsTUFEQUYsQ0FDQSxDQUFBLGdCQUFBLEVBQUEsb0JBQUEsRUFBQSxxQkFBQSxFQUFBLG1CQUFBLEVBQUEsVUFBQUcsY0FBQSxFQUFBQyxrQkFBQSxFQUFBQyxtQkFBQSxFQUFBQyxpQkFBQSxFQUFBQTtBQUVBRixFQUFBQSxrQkFBQUEsQ0FBQUcsU0FBQUgsQ0FBQSxPQUFBQSxHQUNBQyxtQkFBQUEsQ0FBQUgsTUFBQUcsQ0FBQUcsVUFBQUgsQ0FBQUcsQ0FBQSxDQUFBSCxDQURBRCxFQUdBRCxjQUFBQSxDQUNBTSxLQURBTixDQUNBLE1BREFBLEVBQ0E7QUFDQU8sSUFBQUEsR0FBQUEsRUFBQSxPQURBO0FBRUFDLElBQUFBLFdBQUFBLEVBQUE7QUFGQSxHQURBUixFQUtBTSxLQUxBTixDQUtBLFFBTEFBLEVBS0E7QUFDQU8sSUFBQUEsR0FBQUEsRUFBQSxTQURBO0FBRUFDLElBQUFBLFdBQUFBLEVBQUE7QUFGQSxHQUxBUixFQVNBTSxLQVRBTixDQVNBLE9BVEFBLEVBU0E7QUFDQU8sSUFBQUEsR0FBQUEsRUFBQSxRQURBO0FBRUFDLElBQUFBLFdBQUFBLEVBQUE7QUFGQSxHQVRBUixFQWFBTSxLQWJBTixDQWFBLFlBYkFBLEVBYUE7QUFDQU8sSUFBQUEsR0FBQUEsRUFBQSxhQURBO0FBRUFFLElBQUFBLFVBQUFBLEVBQUEsZ0JBRkE7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SUFBQUEsQ0FEQTtBQUVBQyxFQUFBQSxHQUFBQSxDQUFBRSxJQUFBRixHQUFBLG9CQUFBQSxFQUNBQSxHQUFBQSxDQUFBRyxTQUFBSCxHQUFBLEtBREFBLEVBRUFBLEdBQUFBLENBQUFJLFNBQUFKLEdBQUEsUUFGQUE7QUFHQSxNQUFBSyxLQUFBQSxHQUFBLEVBQUE7QUFBQSxNQUNBQyxTQUFBQSxHQUFBLEVBREE7QUFBQSxNQUVBQyxRQUFBQSxHQUFBLEVBRkE7QUFBQSxNQUdBQyxVQUFBQSxHQUFBLEVBSEE7QUFBQSxNQUlBQyxHQUFBQSxHQUFBLEVBSkE7QUFBQSxNQUtBQyxTQUFBQSxHQUFBLEVBTEE7QUFBQSxNQU1BQyxLQUFBQSxHQUFBbkUsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQUEsSUFBQUEsQ0FBQUQsTUFBQUMsS0FBQWtFLFNBQUFsRSxDQU5BO0FBQUEsTUFPQW9FLFlBQUFBLEdBQUEsQ0FDQTtBQUNBbEMsSUFBQUEsSUFBQUEsRUFBQSxPQURBO0FBRUFtQyxJQUFBQSxZQUFBQSxFQUFBLGFBRkE7QUFHQUMsSUFBQUEsS0FBQUEsRUFBQTtBQUNBQyxNQUFBQSxJQUFBQSxFQUFBLENBREE7QUFFQUMsTUFBQUEsT0FBQUEsRUFBQSxDQUZBO0FBR0FDLE1BQUFBLElBQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUhBO0FBSUFDLE1BQUFBLENBQUFBLEVBQUEsQ0FKQTtBQUtBQyxNQUFBQSxTQUFBQSxFQUFBQSxDQUFBO0FBTEEsS0FIQTtBQVVBQyxJQUFBQSxHQUFBQSxFQUFBLElBQUFDLEtBQUEsRUFWQTtBQVdBQyxJQUFBQSxRQUFBQSxFQUFBLFVBQUFDLFNBQUEsRUFBQUE7QUFDQUEsTUFBQUEsU0FBQUEsQ0FBQUMsUUFBQUQsSUFBQSxHQUFBQTtBQUFBO0FBWkEsR0FEQSxFQWdCQTtBQUNBN0MsSUFBQUEsSUFBQUEsRUFBQSxVQURBO0FBRUFtQyxJQUFBQSxZQUFBQSxFQUFBLFlBRkE7QUFHQUMsSUFBQUEsS0FBQUEsRUFBQTtBQUNBQyxNQUFBQSxJQUFBQSxFQUFBLENBREE7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QUEsR0FBQSxHQUFBbkssQ0FBQSxHQUFBLEdBQUEsR0FBQUEsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxNQUFBLE1BQUFtSyxLQUFBLEdBQUEsR0FBQW5LLENBQUEsR0FBQSxHQUFBLEdBQUFBLElBQUFBLENBQUFDLEtBQUFELENBQUEsSUFBQSxNQUFBbUssS0FBQSxHQUFBLEdBQUFuSyxDQUFBLEdBQUEsR0FBQWdLLENBREFBLEVBRUFBLFFBQUFBLENBQUFFLFlBQUFGLENBQUEsS0FBQUEsRUFBQSxTQUFBaEssSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxJQUFBLE1BQUFtSyxLQUFBLEdBQUEsR0FBQW5LLENBQUEsR0FBQSxHQUFBLEdBQUFBLElBQUFBLENBQUFDLEtBQUFELENBQUEsSUFBQSxNQUFBbUssS0FBQSxHQUFBLEdBQUFuSyxDQUFBLEdBQUEsR0FBQSxHQUFBQSxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLE1BQUEsTUFBQW1LLEtBQUEsR0FBQSxHQUFBbkssQ0FBQSxHQUFBLEdBQUFnSyxDQUZBQSxFQUdBQSxRQUFBQSxDQUFBRSxZQUFBRixDQUFBLE1BQUFBLEVBQUEsU0FBQWhLLElBQUFBLENBQUFDLEtBQUFELENBQUEsSUFBQSxNQUFBbUssS0FBQSxHQUFBLEdBQUFuSyxDQUFBLEdBQUEsR0FBQSxHQUFBQSxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLE1BQUEsTUFBQW1LLEtBQUEsR0FBQSxHQUFBbkssQ0FBQSxHQUFBLEdBQUEsR0FBQUEsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxJQUFBLE1BQUFtSyxLQUFBLEdBQUEsR0FBQW5LLENBQUEsR0FBQSxHQUFBZ0ssQ0FIQUEsRUFJQUEsUUFBQUEsQ0FBQUUsWUFBQUYsQ0FBQSxLQUFBQSxFQUFBLFNBQUFoSyxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLE1BQUEsTUFBQW1LLEtBQUEsR0FBQSxHQUFBbkssQ0FBQSxHQUFBLEdBQUEsR0FBQUEsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxJQUFBLE1BQUFtSyxLQUFBLEdBQUEsR0FBQW5LLENBQUEsR0FB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QUFBLEdBQUEsSUFBQWxJLEtBQUEsRUFBQTtBQUNBa0ksRUFBQUEsVUFBQUEsQ0FBQXRILEdBQUFzSCxHQUFBLG9CQUFBQTtBQUNBLE1BQUFDLFFBQUFBLEdBQUEsRUFBQTtBQUFBLE1BQ0FDLE9BQUFBLEdBQUFBLENBQUEsQ0FEQTtBQUFBLE1BR0FDLE9BQUFBLEdBQUE7QUFDQUMsSUFBQUEsSUFBQUEsRUFBQTtBQUNBQyxNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEVBQUEsQ0FGQTtBQUdBN0ksTUFBQUEsT0FBQUEsRUFBQSxDQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBK0ksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBREE7QUFRQUMsSUFBQUEsR0FBQUEsRUFBQTtBQUNBSCxNQUFBQSxLQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEVBQUEsQ0FGQTtBQUdBN0ksTUFBQUEsT0FBQUEsRUFBQSxDQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBK0ksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBUkE7QUFlQUUsSUFBQUEsSUFBQUEsRUFBQTtBQUNBSixNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FGQTtBQUdBN0ksTUFBQUEsT0FBQUEsRUFBQSxDQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBK0ksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBZkE7QUFzQkFHLElBQUFBLEdBQUFBLEVBQUE7QUFDQUwsTUFBQUEsS0FBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxFQUFBLENBREE7QUFFQUMsTUFBQUEsR0FBQUEsRUFBQSxDQUFB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QUEsSUFBQUEsRUFBQSxTQUFBO0FBQUF3VixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FQQSxFQVFBO0FBQUF4VixNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQXdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQVJBLEVBU0E7QUFBQXhWLE1BQUFBLElBQUFBLEVBQUEsWUFBQTtBQUFBd1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBVEEsRUFVQTtBQUFBeFYsTUFBQUEsSUFBQUEsRUFBQSxXQUFBO0FBQUF3VixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FWQSxFQVdBO0FBQUF4VixNQUFBQSxJQUFBQSxFQUFBLGdCQUFBO0FBQUF3VixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FYQSxFQVlBO0FBQUF4VixNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQXdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQVpBLEVBYUE7QUFBQXhWLE1BQUFBLElBQUFBLEVBQUEsV0FBQTtBQUFBd1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBYkEsRUFjQTtBQUFBeFYsTUFBQUEsSUFBQUEsRUFBQSxPQUFBO0FBQUF3VixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FkQSxFQWVBO0FBQUF4VixNQUFBQSxJQUFBQSxFQUFBLGVBQUE7QUFBQXdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWZBLEVBZ0JBO0FBQUF4VixNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQXdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWhCQSxFQWlCQTtBQUFBeFYsTUFBQUEsSUFBQUEsRUFBQSx3QkFBQTtBQUFBd1YsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBakJBLEVBa0JBO0FBQUF4VixNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQXdWLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWxCQSxFQW1CQTtBQUFBeFYsTUFBQUEsSUFBQUEsRUFBQSxZQUFBO0FBQUF3VixNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FuQkEsRUFvQkE7QUFBQXhWLE1BQUFBLElB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R0EsWUFBQTtBQUNBLGFBQUFHLEdBQUFBLENBQUF4Z0IsS0FBQXdnQixDQUFBOUksUUFBQThJLEVBQUF6SSxRQUFBeUksQ0FBQTtBQUFBekksS0FKQXNJLENBQUE7QUFJQXRJLEdBakVBeUk7QUFpRUF6SSxDQXJFQSxDQURBamIsQzNCT0FBLEU0QlBBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsZ0JBREFBLEVBQ0EsQ0FBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUE4QyxNQUFBLEVBQUE0aEIsT0FBQSxFQUFBQTtBQUNBQSxFQUFBQSxPQUFBQSxDQUFBWCxTQUFBVyxDQUFBLFFBQUFBLEVBQ0FwZSxJQURBb2UsQ0FDQSxVQUFBbmUsUUFBQSxFQUFBQTtBQUNBekQsSUFBQUEsTUFBQUEsQ0FBQStOLE1BQUEvTixHQUFBeUQsUUFBQUEsQ0FBQWxFLElBQUFTO0FBQUFULEdBRkFxaUI7QUFFQXJpQixDQUhBLENBREFyQyxDNUJPQUEsRTZCUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxlQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBOEMsTUFBQSxFQUFBNGhCLE9BQUEsRUFBQUE7QUFDQUEsRUFBQUEsT0FBQUEsQ0FBQVgsU0FBQVcsQ0FBQSxPQUFBQSxFQUNBcGUsSUFEQW9lLENBQ0EsVUFBQW5lLFFBQUEsRUFBQUE7QUFDQXpELElBQUFBLE1BQUFBLENBQUErTixNQUFBL04sR0FBQXlELFFBQUFBLENBQUFsRSxJQUFBUztBQUFBVCxHQUZBcWlCO0FBRUFyaUIsQ0FIQSxDQURBckMsQzdCT0FBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiQgPSBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcclxudmFyIGJvb3RzdHJhcCA9IHJlcXVpcmUoJ2Jvb3RzdHJhcCcpO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIGFuZ3VsYXJTYW5pdGl6ZSA9IHJlcXVpcmUoJ2FuZ3VsYXItc2FuaXRpemUnKTtcclxudmFyIGFuZ3VsYXJBbmltYXRlID0gcmVxdWlyZSgnYW5ndWxhci1hbmltYXRlJyk7XHJcbiovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgJ3VpLnJvdXRlcicsXHJcbiAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgJ25nQW5pbWF0ZScsXHJcbiAgJ25nU2FuaXRpemUnLFxyXG4gICduZ0RyYWdEcm9wJyxcclxuICAnbmdUYWdzSW5wdXQnLFxyXG4gICd2Y1JlY2FwdGNoYScsXHJcbiAgJ2NoYXJ0LmpzJyxcclxuICAndGMuY2hhcnRqcydcclxuXSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29uZmlnKGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkdXJsU2VydmljZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xyXG5cclxuICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvaG9tZScpO1xyXG4gICR1cmxTZXJ2aWNlUHJvdmlkZXIuY29uZmlnLnN0cmljdE1vZGUoZmFsc2UpO1xyXG5cclxuICAkc3RhdGVQcm92aWRlclxyXG4gIC5zdGF0ZSgnaG9tZScsIHtcclxuICAgIHVybDogJy9ob21lJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnL2hvbWUuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgncG9saWN5Jywge1xyXG4gICAgdXJsOiAnL3BvbGljeScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy9wb2xpY3kuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgncHJpbnQnLCB7XHJcbiAgICB1cmw6ICcvcHJpbnQnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcvcHJpbnQuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgnZXhwZXJpZW5jZScsIHtcclxuICAgIHVybDogJy9leHBlcmllbmNlJyxcclxuICAgIGNvbnRyb2xsZXI6ICdFeHBlcmllbmNlQ3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy9leHBlcmllbmNlLmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ3NraWxscycsIHtcclxuICAgIHVybDogJy9za2lsbHMnLFxyXG4gICAgY29udHJvbGxlcjogJ1NraWxsc0N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcvc2tpbGxzLmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ2hvYmJpZXMnLCB7XHJcbiAgICB1cmw6ICcvaG9iYmllcycsXHJcbiAgICBjb250cm9sbGVyOiAnSG9iYmllc0N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcvaG9iYmllcy5odG1sJ1xyXG4gIH0pXHJcbiAgLnN0YXRlKCdjb250YWN0Jywge1xyXG4gICAgdXJsOiAnL2NvbnRhY3QnLFxyXG4gICAgY29udHJvbGxlcjogJ0NvbnRhY3RDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnL2NvbnRhY3QuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgnd29ya291dCcsIHtcclxuICAgIHVybDogJy93b3Jrb3V0JyxcclxuICAgIGNvbnRyb2xsZXI6ICdXb3Jrb3V0Q3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy93b3Jrb3V0Lmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ3Bvc3RzJywge1xyXG4gICAgdXJsOiAnL3Bvc3RzJyxcclxuICAgIGNvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcvcG9zdHMuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgncHJvZmlsZScsIHtcclxuICAgIHVybDogJy9wcm9maWxlJyxcclxuICAgIGNvbnRyb2xsZXI6ICdQcm9maWxlQ3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy9wcm9maWxlLmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ2xpc3RzJywge1xyXG4gICAgdXJsOiAnL2xpc3RzJyxcclxuICAgIGNvbnRyb2xsZXI6ICdMaXN0c0N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICdsaXN0cy5odG1sJ1xyXG4gIH0pXHJcbiAgLnN0YXRlKCdwcmlvcml0aXplJywge1xyXG4gICAgdXJsOiAnL3ByaW9yaXRpemUnLFxyXG4gICAgY29udHJvbGxlcjogJ1ByaW9yaXRpemVDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAncHJpb3JpdGl6ZS5odG1sJ1xyXG4gIH0pXHJcbiAgLnN0YXRlKCdidWJibGVzJywge1xyXG4gICAgdXJsOiAnL2J1YmJsZXMnLFxyXG4gICAgY29udHJvbGxlcjogJ0J1YmJsZXNDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnYnViYmxlcy5odG1sJ1xyXG4gIH0pXHJcbiAgLnN0YXRlKCdhc3Rlcm9pZHMnLCB7XHJcbiAgICB1cmw6ICcvYXN0ZXJvaWRzJyxcclxuICAgIGNvbnRyb2xsZXI6ICdBc3Rlcm9pZHNDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnYXN0ZXJvaWRzLmh0bWwnXHJcbiAgfSlcclxuICAuc3RhdGUoJ2xlbW1pbmdzJywge1xyXG4gICAgdXJsOiAnL2xlbW1pbmdzJyxcclxuICAgIGNvbnRyb2xsZXI6ICdMZW1taW5nc0N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICdsZW1taW5ncy5odG1sJ1xyXG4gIH0pXHJcbiAgLnN0YXRlKCdib3RzJywge1xyXG4gICAgdXJsOiAnL2JvdHMnLFxyXG4gICAgY29udHJvbGxlcjogJ1RlblRoaW5nc0N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW50aGluZ3MuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgndGVudGhpbmdzJywge1xyXG4gICAgdXJsOiAnL3RlbnRoaW5ncycsXHJcbiAgICBjb250cm9sbGVyOiAnVGVuVGhpbmdzQ3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbnRoaW5ncy5odG1sJ1xyXG4gIH0pXHJcbiAgLnN0YXRlKCdxdWl6LWdvb2dsZScsIHtcclxuICAgIHVybDogJy9nb29nbGUnLFxyXG4gICAgY29udHJvbGxlcjogJ1F1aXpHb29nbGVDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAncXVpenplcy9nb29nbGUuaHRtbCdcclxuICB9KVxyXG4gIC5zdGF0ZSgncXVpei1sb2dvcycsIHtcclxuICAgIHVybDogJy9sb2dvcycsXHJcbiAgICBjb250cm9sbGVyOiAnUXVpekxvZ29zQ3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3F1aXp6ZXMvbG9nb3MuaHRtbCdcclxuICB9KTtcclxuXHJcbiAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcclxuICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICByZXF1aXJlQmFzZTogZmFsc2VcclxuICB9KTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLnNlcnZpY2UoJ1dlYlNvY2tldFN2YycsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkdGltZW91dCkge1xyXG4gIGZ1bmN0aW9uIHdlYnNvY2tldEhvc3QoKSB7XHJcbiAgICBpZiAod2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6Jykge1xyXG4gICAgICByZXR1cm4gXCJ3c3M6Ly9cIiArIHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIFwid3M6Ly9cIiArIHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIGNvbm5lY3Rpb247XHJcbiAgdmFyIGNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldCh3ZWJzb2NrZXRIb3N0KCkpO1xyXG5cclxuICAgIGNvbm5lY3Rpb24ub25vcGVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnV2Vic29ja2V0IGNvbm5lY3RlZCcpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25uZWN0aW9uLm9uY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBjb25zb2xlLmxvZygnV2Vic29ja2V0IGNsb3NlZC4gUmVjb25uZWN0aW5nLi4uJyk7XHJcbiAgICAgICR0aW1lb3V0KGNvbm5lY3QsIDEwMDApO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25uZWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiICsgZSArIFwiIC0gU3RhdGU6IFwiICsgY29ubmVjdGlvbi5yZWFkeVN0YXRlKTtcclxuICAgIH07XHJcblxyXG4gICAgY29ubmVjdGlvbi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcclxuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd3czonICsgcGF5bG9hZC50b3BpYywgcGF5bG9hZC5kYXRhKTtcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5zZW5kID0gZnVuY3Rpb24gKHRvcGljLCBkYXRhKSB7XHJcbiAgICB2YXIganNvbiA9IEpTT04uc3RyaW5naWZ5KHt0b3BpYzogdG9waWMsIGRhdGE6IGRhdGF9KTtcclxuICAgIGNvbm5lY3Rpb24uc2VuZChqc29uKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmNvbm5lY3QgPSBjb25uZWN0O1xyXG5cclxufSkucnVuKGZ1bmN0aW9uIChXZWJTb2NrZXRTdmMpIHtcclxuICBXZWJTb2NrZXRTdmMuY29ubmVjdCgpO1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdBcHBDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBMYW5ndWFnZVN2YywgVXNlclN2Yykge1xyXG5cclxuICBjb25zb2xlLmxvZyhcIiVjWW91IHNuZWFreSBidWdnZXIhXCIsIFwiZm9udDogMmVtIHNhbnMtc2VyaWY7IGNvbG9yOiBEb2RnZXJCbHVlOyB0ZXh0LXNoYWRvdzogMnB4IDAgMCAjNDQ0LCAtMnB4IDAgMCAjNDQ0LCAwIDJweCAwICM0NDQsIDAgLTJweCAwICM0NDQsIDFweCAxcHggIzQ0NCwgLTFweCAtMXB4IDAgIzQ0NCwgMXB4IC0xcHggMCAjNDQ0LCAtMXB4IDFweCAwICM0NDQ7XCIpO1xyXG4gIGNvbnNvbGUubG9nKFwiSSdtIGdsYWQgeW91J3JlIGN1cmlvdXMgd2hldGhlciBzb21ldGhpbmcgaXMgcG9wcGluZyB1cCBpbiBoZXJlLiBJJ20gYSBiaXQgb2YgYSBzdGlja2xlciB3aGVuIGl0IGNvbWVzIHRvIG1lc3NhZ2VzIGluIHRoZSBjb25zb2xlIHNvIEkgdHJ5IHRvIG1ha2Ugc3VyZSBvbmx5IHRoaW5ncyBJIHdhbnQgYXJlIHZpc2libGUuIFRoYXQgYmVpbmcgc2FpZCwgaWYgdGhlcmUgaXMgYSBiaWcgZXJyb3IgaGVyZSwgSSB3b3VsZCByZWFsbHkgYXBwcmVjaWF0ZSB5b3UgdGVsbGluZyBtZSBzbyBJIGNhbiBnZXQgcmlkIG9mIGl0IVwiKTtcclxuICBjb25zb2xlLmxvZyhcIlRoZSBjb2RlIGZvciBteSByZXN1bWUgaXMgaG9zdGVkIG9uIEdpdGh1YiBpZiB5b3UgcmVhbGx5IHdhbnQgdG8gZ28gaW50byBhbGwgdGhpcyEgPT4gaHR0cHM6Ly9naXRodWIuY29tL0ZsYW5kZXJzQnVyZ2VyL3Jlc3VtZVwiKTtcclxuXHJcbiAgLypcclxuICAkKGRvY3VtZW50KS5iaW5kKFwia2V5dXAga2V5ZG93blwiLCBmdW5jdGlvbihlKXtcclxuICAgIGlmKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT0gODApe1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9KTtcclxuICAqL1xyXG5cclxuICAkKHdpbmRvdykubG9hZChmdW5jdGlvbigpe1xyXG4gICAgJChcIi5sb2FkaW5nXCIpLmZhZGVPdXQoXCJzbG93XCIpO1xyXG4gICAgJChcIi5jb250ZW50XCIpLmZhZGVJbihcInNsb3dcIik7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS50aGVtZUNvdW50ZXIgPSA2O1xyXG4gICRzY29wZS50b2RheSA9IG5ldyBEYXRlKCk7XHJcbiAgJHNjb3BlLnllYXIgPSAkc2NvcGUudG9kYXkuZ2V0RnVsbFllYXIoKTtcclxuICAkc2NvcGUucmFuZG9tID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApKTtcclxuXHJcbiAgJHNjb3BlLmZsaXBUaGVtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgJChcIi5sb2FkaW5nXCIpLnNob3coKTtcclxuICAgICAgJChcIi5jb250ZW50XCIpLmhpZGUoKTtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICQoXCIubG9hZGluZ1wiKS5mYWRlT3V0KFwic2xvd1wiKTtcclxuICAgICAgICAkKFwiLmNvbnRlbnRcIikuZmFkZUluKFwic2xvd1wiKTtcclxuICAgICAgfSwgODAwKTtcclxuICAgICRzY29wZS50aGVtZUNvdW50ZXIgPSAkc2NvcGUudGhlbWVDb3VudGVyIDwgNiA/ICRzY29wZS50aGVtZUNvdW50ZXIgKyAxIDogJHNjb3BlLnRoZW1lQ291bnRlciA9IDE7XHJcbiAgfTtcclxuXHJcblxyXG4gICQuZ2V0SlNPTignL3NraWxscy5qc29uJywgZnVuY3Rpb24oIGRhdGEgKSB7XHJcbiAgICAkc2NvcGUuc2tpbGxzID0gZGF0YS5maWx0ZXIoZnVuY3Rpb24oc2tpbGwpIHtcclxuICAgICAgcmV0dXJuIHNraWxsLmVuYWJsZWQ7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcblxyXG4gICQuZ2V0SlNPTignL2hvYmJpZXMuanNvbicsIGZ1bmN0aW9uKCBkYXRhICkge1xyXG4gICAgJHNjb3BlLmhvYmJpZXMgPSBkYXRhO1xyXG4gIH0pO1xyXG5cclxuXHJcbiAgJC5nZXRKU09OKCcvZXhwZXJpZW5jZS5qc29uJywgZnVuY3Rpb24oIGRhdGEgKSB7XHJcbiAgICAkc2NvcGUuam9icyA9IGRhdGE7XHJcbiAgICAkc2NvcGUuam9icy5mb3JFYWNoKGZ1bmN0aW9uIChqb2IpIHtcclxuICAgICAgam9iLnN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGpvYi5zdGFydERhdGUpO1xyXG4gICAgICBpZiAoam9iLmVuZERhdGUpIGpvYi5lbmREYXRlID0gbmV3IERhdGUoam9iLmVuZERhdGUpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS5nZXRUaW1lU3BhbiA9IGZ1bmN0aW9uIChqb2IpIHtcclxuICAgIHJldHVybiBqb2Iuc3RhcnREYXRlLmdldEZ1bGxZZWFyKCkgKyAoam9iLmVuZERhdGUgPyAoJyAtICcgKyBqb2IuZW5kRGF0ZS5nZXRGdWxsWWVhcigpKSA6ICcgLSBUb2RheScpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5sYW5ndWFnZXMgPSBMYW5ndWFnZVN2Yy5sYW5ndWFnZXM7XHJcblxyXG4gICRzY29wZS5zZWxlY3RlZExhbmd1YWdlID0gTGFuZ3VhZ2VTdmMuZ2V0TGFuZ3VhZ2UoKTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdExhbmd1YWdlID0gZnVuY3Rpb24gKGxhbmd1YWdlKSB7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRMYW5ndWFnZSA9IExhbmd1YWdlU3ZjLnNldExhbmd1YWdlKGxhbmd1YWdlKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuaG92ZXJkaXYgPSBmdW5jdGlvbiAoZSwgZGl2aWQpIHtcclxuICAgIHZhciBsZWZ0ICA9IGUuY2xpZW50WCArIFwicHhcIjtcclxuICAgIHZhciB0b3AgID0gKGUuY2xpZW50WSArIDIwKSArIFwicHhcIjtcclxuXHJcbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2aWQpO1xyXG5cclxuICAgICQoXCIjXCIrZGl2aWQpLmNzcygnbGVmdCcsbGVmdCk7XHJcbiAgICAkKFwiI1wiK2RpdmlkKS5jc3MoJ3RvcCcsdG9wKTtcclxuXHJcbiAgICAkKFwiI1wiK2RpdmlkKS50b2dnbGUoKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc29jaWFsTWVkaWEgPSBbLypcclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwiZmFjZWJvb2tcIixcclxuICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vZmxhbmRlcnNidXJnZXJcIixcclxuICAgICAgXCJpY29uXCI6IFwiZmEtZmFjZWJvb2stZlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm5hbWVcIjogXCJ0d2l0dGVyXCIsXHJcbiAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9CZWxnb0NhbmFkaWFuXCIsXHJcbiAgICAgIFwiaWNvblwiOiBcImZhLXR3aXR0ZXJcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwiZ29vZHJlYWRzXCIsXHJcbiAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cuZ29vZHJlYWRzLmNvbS91c2VyL3Nob3cvMTcwNzAwMTAtbGF1cmVudFwiLFxyXG4gICAgICBcImljb25cIjogXCJmYS1ib29rXCJcclxuICAgIH0sKi9cclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwibGlua2VkaW5cIixcclxuICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vbGF1cmVudC1kZWJhY2tlci0xNjMzYTkxNlwiLFxyXG4gICAgICBcImljb25cIjogXCJmYS1saW5rZWRpblwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm5hbWVcIjogXCJnaXRodWJcIixcclxuICAgICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vRmxhbmRlcnNCdXJnZXJcIixcclxuICAgICAgXCJpY29uXCI6IFwiZmEtZ2l0aHViXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibmFtZVwiOiBcImpzZmlkZGxlXCIsXHJcbiAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvdXNlci9CZWxnb0NhbmFkaWFuL2ZpZGRsZXMvXCIsXHJcbiAgICAgIFwiaWNvblwiOiBcImZhLWpzZmlkZGxlXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibmFtZVwiOiBcInN0YWNrb3ZlcmZsb3dcIixcclxuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTA4MzkyMy9iZWxnb2NhbmFkaWFuXCIsXHJcbiAgICAgIFwiaWNvblwiOiBcImZhLXN0YWNrLW92ZXJmbG93XCJcclxuXHJcbiAgICB9XHJcbiAgXTtcclxuXHJcbiAgaWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UudXNlcikge1xyXG4gICAgVXNlclN2Yy5sb2dpbih3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXIpXHJcbiAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICBsb2dpbihyZXNwb25zZS5kYXRhKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbiAoXywgdXNlcikge1xyXG4gICAgbG9naW4odXNlcik7XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIGxvZ2luKHVzZXIpIHtcclxuICAgIGlmICghJHNjb3BlLmxvZ2dlZEluKSB7XHJcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UudXNlciA9IHVzZXIuX2lkO1xyXG4gICAgICAkc2NvcGUubG9nZ2VkSW4gPSB0cnVlO1xyXG4gICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnbG9naW4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gICRzY29wZS4kb24oJ3VwZGF0ZScsIGZ1bmN0aW9uIChfLCB1c2VyKSB7XHJcbiAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gICAgJHNjb3BlLmN1cnJlbnRVc2VyLmJpcnRoRGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5jdXJyZW50VXNlci5iaXJ0aERhdGUpO1xyXG4gICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgJChcIiNsb2FkaW5nLWljb25cIikuZmFkZU91dChcInNsb3dcIik7XHJcbiAgICB9LCAxMDAwKTtcclxuICB9KTtcclxuXHJcblxyXG4gICRzY29wZS4kb24oJ2xvYWRpbmcnLCBmdW5jdGlvbiAoXywgdXNlcikge1xyXG4gICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgJChcIiNsb2FkaW5nLWljb25cIikuc2hvdygpO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUuJG9uKCdsb2FkZWQnLCBmdW5jdGlvbiAoXywgdXNlcikge1xyXG4gICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgJChcIiNsb2FkaW5nLWljb25cIikuZmFkZU91dChcInNsb3dcIik7XHJcbiAgICB9LCAxMDAwKTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25PdXQoKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyBTaWduLW91dCBzdWNjZXNzZnVsLlxyXG4gICAgICAkc2NvcGUubG9nZ2VkSW4gPSBmYWxzZTtcclxuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnbG9nb3V0Jyk7XHJcbiAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICAvLyBBbiBlcnJvciBoYXBwZW5lZC5cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5mb3JtYXREYXRlID0gZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgdmFyIG1vbnRocyA9IFsnSmFuJywnRmViJywnTWFyJywnQXByJywnTWF5JywnSnVuJywnSnVsJywnQXVnJywnU2VwJywnT2N0JywnTm92JywnRGVjJ107XHJcbiAgICBkYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgKyBcIi1cIiArIG1vbnRoc1tkYXRlLmdldE1vbnRoKCldICsgXCItXCIgKyBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0FzdGVyb2lkc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBHYW1lU3ZjKSB7XHJcblxyXG4gICRzY29wZS5hbm5vdW5jZSA9IGZhbHNlO1xyXG4gIHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXN0ZXJvaWRzLXBhZ2UnKTtcclxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgY3R4LmZvbnQgPSBcIjMwcHggQ29taWMgU2FucyBNU1wiO1xyXG4gIGN0eC5maWxsU3R5bGUgPSBcInJlZFwiO1xyXG4gIGN0eC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gIHZhciBzaG90cyA9IHt9O1xyXG4gIHZhciBhc3Rlcm9pZHMgPSB7fTtcclxuICB2YXIgcG93ZXJ1cHMgPSB7fTtcclxuICB2YXIgZXhwbG9zaW9ucyA9IHt9O1xyXG4gIHZhciBtYXAgPSB7fTtcclxuICB2YXIgc3BhY2VwaWNzID0gMTA7XHJcbiAgdmFyIHNwYWNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc3BhY2VwaWNzKTtcclxuICB2YXIgcG93ZXJ1cFR5cGVzID0gW1xyXG4gICAge1xyXG4gICAgICBuYW1lOiAnc3BlZWQnLFxyXG4gICAgICBhbm5vdW5jZW1lbnQ6ICdNYXggU3BlZWQg4oenJyxcclxuICAgICAgY3ljbGU6IHtcclxuICAgICAgICByb3dzOiAxLFxyXG4gICAgICAgIGNvbHVtbnM6IDQsXHJcbiAgICAgICAgc2l6ZTogWzE0LCAzNV0sXHJcbiAgICAgICAgaTogMCxcclxuICAgICAgICBkaXJlY3Rpb246IHRydWVcclxuICAgICAgfSxcclxuICAgICAgaW1nOiBuZXcgSW1hZ2UoKSxcclxuICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKHNwYWNlc2hpcCkge1xyXG4gICAgICAgIHNwYWNlc2hpcC5tYXhTcGVlZCArPSAxMDA7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdjb29sZG93bicsXHJcbiAgICAgIGFubm91bmNlbWVudDogJ0Nvb2xkb3duIOKHqScsXHJcbiAgICAgIGN5Y2xlOiB7XHJcbiAgICAgICAgcm93czogMSxcclxuICAgICAgICBjb2x1bW5zOiAzLFxyXG4gICAgICAgIHNpemU6IFsxNywgMTddLFxyXG4gICAgICAgIGk6IDAsXHJcbiAgICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZzogbmV3IEltYWdlKCksXHJcbiAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbihzcGFjZXNoaXApIHtcclxuICAgICAgICBpZiAoc3BhY2VzaGlwLmNvb2xkb3duID4gMCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLmNvb2xkb3duVGltZSAtPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogJ3JhbmdlJyxcclxuICAgICAgYW5ub3VuY2VtZW50OiAnRmlyaW5nIFJhbmdlIOKHpycsXHJcbiAgICAgIGN5Y2xlOiB7XHJcbiAgICAgICAgcm93czogNCxcclxuICAgICAgICBjb2x1bW5zOiAxLFxyXG4gICAgICAgIHNpemU6IFszMCwgOF0sXHJcbiAgICAgICAgaTogMCxcclxuICAgICAgICBkaXJlY3Rpb246IHRydWVcclxuICAgICAgfSxcclxuICAgICAgaW1nOiBuZXcgSW1hZ2UoKSxcclxuICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKHNwYWNlc2hpcCkge1xyXG4gICAgICAgIHNwYWNlc2hpcC5yYW5nZSArPSA1O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnc2hpZWxkJyxcclxuICAgICAgYW5ub3VuY2VtZW50OiAnU2hpZWxkJyxcclxuICAgICAgY3ljbGU6IHtcclxuICAgICAgICByb3dzOiA1LFxyXG4gICAgICAgIGNvbHVtbnM6IDEsXHJcbiAgICAgICAgc2l6ZTogWzE5LCAxOV0sXHJcbiAgICAgICAgaTogMCxcclxuICAgICAgICBkaXJlY3Rpb246IHRydWVcclxuICAgICAgfSxcclxuICAgICAgaW1nOiBuZXcgSW1hZ2UoKSxcclxuICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKHNwYWNlc2hpcCkge1xyXG4gICAgICAgIHNwYWNlc2hpcC5zaGllbGQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnbnVrZScsXHJcbiAgICAgIGFubm91bmNlbWVudDogJ051a2UnLFxyXG4gICAgICBjeWNsZToge1xyXG4gICAgICAgIHJvd3M6IDEsXHJcbiAgICAgICAgY29sdW1uczogOCxcclxuICAgICAgICBzaXplOiBbMTUsIDE1XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSBpbiBhc3Rlcm9pZHMpIHtcclxuICAgICAgICAgIGFzdGVyb2lkc1tpXS5leHBsb2RlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNwYXduQXN0ZXJvaWRzKDUpO1xyXG4gICAgICB9XHJcbiAgICB9LC8qXHJcbiAgICAnc2lkZV9jYW5ub25zJyxcclxuICAgICdsYXNlcicsXHJcbiAgICAnc2hpZWxkJyxcclxuICAgICdsaWZlJyxcclxuICAgICdtaXNzaWxlcycsXHJcbiAgICAnbnVrZSdcclxuICAgICovXHJcbiAgXTtcclxuICBwb3dlcnVwVHlwZXMuZm9yRWFjaChmdW5jdGlvbihwb3dlcnVwLCBpLCBhcnJheSkge1xyXG4gICAgYXJyYXlbaV0uaW1nLnNyYyA9ICdhc3Rlcm9pZHMvJyArIHBvd2VydXAubmFtZSArICcucG5nJztcclxuICB9KTtcclxuXHJcbiAgdmFyIGV4cGxvc2lvbkltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgZXhwbG9zaW9uSW1hZ2Uuc3JjID0gJ2FzdGVyb2lkcy9leHBsb3Npb24ucG5nJztcclxuXHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgIG1hcFtlLmtleUNvZGUgfHwgZS53aGljaF0gPSB0cnVlO1xyXG4gIH0sdHJ1ZSk7XHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICBtYXBbZS5rZXlDb2RlIHx8IGUud2hpY2hdID0gZmFsc2U7XHJcbiAgfSx0cnVlKTtcclxuXHJcbiAgJHNjb3BlLmhpZ2hzY29yZSA9IDA7XHJcblxyXG4gIGZ1bmN0aW9uIGV2YWx1YXRlS2V5cygpIHtcclxuICAgIGlmICgkc2NvcGUucGxheWluZykge1xyXG4gICAgICBpZiAobWFwWzMyXSkge1xyXG4gICAgICAgIC8vU3BhY2VcclxuICAgICAgICBpZiAoc3BhY2VzaGlwLmNvb2xkb3duID09PSAwKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAuc2hvb3QoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1hcFszN10pIHtcclxuICAgICAgICAvL0xlZnQgQXJyb3dcclxuICAgICAgICBpZiAoc3BhY2VzaGlwLnJvdGF0aW9uID09PSAwKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAucm90YXRpb24gPSAzNjA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5yb3RhdGlvbiAtPSAzO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobWFwWzM5XSkge1xyXG4gICAgICAgIC8vUmlnaHQgQXJyb3dcclxuICAgICAgICBpZiAoc3BhY2VzaGlwLnJvdGF0aW9uID09PSAzNjApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5yb3RhdGlvbiA9IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5yb3RhdGlvbiArPSAzO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobWFwWzM4XSkge1xyXG4gICAgICAgIC8vVXAgQXJyb3dcclxuICAgICAgICBpZiAoc3BhY2VzaGlwLnNwZWVkIDw9IHNwYWNlc2hpcC5tYXhTcGVlZCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnNwZWVkICs9IDU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChzcGFjZXNoaXAuc3BlZWQgPiAwKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAuc3BlZWQtLTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1hcFs0MF0pIHtcclxuICAgICAgICAvL0Rvd24gQXJyb3dcclxuICAgICAgICBpZiAoc3BhY2VzaGlwLnNwZWVkID4gMCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnNwZWVkIC09IDI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAobWFwWzMyXSkge1xyXG4gICAgICAgIHN0YXJ0KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIFNwYWNlc2hpcCgpIHtcclxuICAgIHRoaXMud2lkdGggPSA1MDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gNTA7XHJcbiAgICB0aGlzLnNoaWVsZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5yYW5nZSA9IDgwO1xyXG4gICAgdGhpcy5jYW5ub24gPSB7XHJcbiAgICAgIHg6IHRoaXMud2lkdGggLyAyIC0gNC41LFxyXG4gICAgICB5OiB0aGlzLmhlaWdodCAvIDIgLSB0aGlzLmhlaWdodCAqIDAuMDc4MTI1XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jb29sZG93biA9IDA7XHJcbiAgICB0aGlzLmNvb2xkb3duVGltZSA9IDIwO1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFtcclxuICAgICAgY2FudmFzLndpZHRoIC8gMiAtIHRoaXMud2lkdGggLyAyLFxyXG4gICAgICBjYW52YXMuaGVpZ2h0IC8gMiAtIHRoaXMuaGVpZ2h0IC8gMlxyXG4gICAgXTtcclxuICAgIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICB0aGlzLmltZy5zcmMgPSAnYXN0ZXJvaWRzL3NwYWNlc2hpcC5wbmcnO1xyXG4gICAgdGhpcy5zcGVlZCA9IDA7XHJcbiAgICB0aGlzLm1heFNwZWVkID0gMTAwMDtcclxuICAgIHRoaXMuYW5nbGUgPSAwO1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IDA7XHJcblxyXG4gICAgdGhpcy5zaG9vdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLmNvb2xkb3duID0gdGhpcy5jb29sZG93blRpbWU7XHJcbiAgICAgIHZhciBpZCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XHJcbiAgICAgIHNob3RzW2lkXSA9IG5ldyBTaG90KGlkLCB0aGlzKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5tb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICh0aGlzLnNoaWVsZCkge1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHguYXJjKHRoaXMucG9zaXRpb25bMF0gKyB0aGlzLndpZHRoIC8gMiwgdGhpcy5wb3NpdGlvblsxXSArIHRoaXMuaGVpZ2h0IC8gMiwgMzAsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJyZ2IoMzUsIDIzNywgODYsIDAuNSlcIjtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcInJnYig2NiwgMTY4LCAzNiwgMC44KVwiO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSA1O1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGZvciAodmFyIGkgaW4gYXN0ZXJvaWRzKSB7XHJcbiAgICAgICAgdmFyIGFzdGVyb2lkID0gYXN0ZXJvaWRzW2ldO1xyXG4gICAgICAgIGlmIChoaXQoYXN0ZXJvaWQsIHRoaXMpKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5zaGllbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5zaGllbGQgPSBmYWxzZTtcclxuICAgICAgICAgICAgYXN0ZXJvaWQuZXhwbG9kZSgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdhbWVPdmVyKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuYW5nbGUgPSB0aGlzLnJvdGF0aW9uO1xyXG4gICAgICBpZiAodGhpcy5jb29sZG93biA+IDApIHtcclxuICAgICAgICB0aGlzLmNvb2xkb3duLS07XHJcbiAgICAgIH1cclxuICAgICAgbW92ZSh0aGlzKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBTaG90KGlkLCBzcGFjZXNoaXApIHtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMucG9zaXRpb24gPSBbXHJcbiAgICAgIHNwYWNlc2hpcC5wb3NpdGlvblswXSArIHNwYWNlc2hpcC5jYW5ub24ueCArIHNwYWNlc2hpcC5jYW5ub24ueCAqIE1hdGguY29zKChzcGFjZXNoaXAucm90YXRpb24gLSA5MCkgKiBNYXRoLlBJIC8gMTgwKSxcclxuICAgICAgc3BhY2VzaGlwLnBvc2l0aW9uWzFdICsgc3BhY2VzaGlwLmNhbm5vbi55ICsgc3BhY2VzaGlwLmNhbm5vbi55ICogTWF0aC5zaW4oKHNwYWNlc2hpcC5yb3RhdGlvbiAtIDkwKSAqIE1hdGguUEkgLyAxODApXHJcbiAgICBdO1xyXG4gICAgdGhpcy53aWR0aCA9IDk7XHJcbiAgICB0aGlzLmhlaWdodCA9IDE1O1xyXG4gICAgdGhpcy5hbmdsZSA9IHNwYWNlc2hpcC5hbmdsZTtcclxuICAgIHRoaXMucm90YXRpb24gPSBzcGFjZXNoaXAucm90YXRpb247XHJcbiAgICB0aGlzLnNwZWVkID0gc3BhY2VzaGlwLnNwZWVkICsgNTAwO1xyXG4gICAgdGhpcy5saWZlc3BhbiA9IHNwYWNlc2hpcC5yYW5nZTtcclxuICAgIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICB0aGlzLmltZy5zcmMgPSAnYXN0ZXJvaWRzL3Nob3QucG5nJztcclxuXHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5saWZlc3Bhbi0tO1xyXG4gICAgICBtb3ZlKHRoaXMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEFzdGVyb2lkKGlkKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLndpZHRoID0gTWF0aC5yYW5kb20oKSAqIDUwICsgMjA7XHJcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMud2lkdGg7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gZ2V0RW50cnlQb3NpdGlvbih0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICB0aGlzLmFuZ2xlID0gTWF0aC5yYW5kb20oKSAqIDM2MDtcclxuICAgIHRoaXMucm90YXRpb24gPSBNYXRoLnJhbmRvbSgpICogMzYwO1xyXG4gICAgdGhpcy5yb3RhdGlvblNwZWVkID0gTWF0aC5yYW5kb20oKSAqIDYgLSAzO1xyXG4gICAgdGhpcy5zcGVlZCA9IE1hdGgucmFuZG9tKCkgKiAzMDAgKyAyO1xyXG4gICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHRoaXMuaW1nLnNyYyA9ICdhc3Rlcm9pZHMvYXN0ZXJvaWQnICsgKE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDYpICsgMSkgKyAnLnBuZyc7XHJcblxyXG4gICAgdGhpcy5leHBsb2RlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGV4cGxvc2lvbnNbdGhpcy5pZF0gPSBuZXcgRXhwbG9zaW9uKHRoaXMpO1xyXG4gICAgICByZXR1cm4gZGVsZXRlIGFzdGVyb2lkc1t0aGlzLmlkXTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5tb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMucm90YXRpb24gKz0gdGhpcy5yb3RhdGlvblNwZWVkO1xyXG4gICAgICBpZiAodGhpcy5yb3RhdGlvbiA+IDM2MCkge1xyXG4gICAgICAgIHRoaXMucm90YXRpb24gPSB0aGlzLnJvdGF0aW9uIC0gMzYwO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMucm90YXRpb24gPCAwKSB7XHJcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IDM2MCArIHRoaXMucm90YXRpb247XHJcbiAgICAgIH1cclxuICAgICAgZm9yICh2YXIgaSBpbiBzaG90cykge1xyXG4gICAgICAgIHZhciBzaG90ID0gc2hvdHNbaV07XHJcbiAgICAgICAgaWYgKGhpdChzaG90LCB0aGlzKSkge1xyXG4gICAgICAgICAgdGhpcy5leHBsb2RlKCk7XHJcbiAgICAgICAgICB2YXIgcG9pbnRzID0gTWF0aC5mbG9vcigoc2hvdC5zcGVlZCAtIDUwMCkgLyAxMCArIDcwIC0gdGhpcy53aWR0aCk7XHJcbiAgICAgICAgICBpZiAoTWF0aC5mbG9vcigocG9pbnRzICsgJHNjb3BlLnNjb3JlKSAvIDEwMCkgPiBNYXRoLmZsb29yKCRzY29wZS5zY29yZSAvIDEwMCkpIHtcclxuICAgICAgICAgICAgc3Bhd25Qb3dlcnVwKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAkc2NvcGUuc2NvcmUgKz0gcG9pbnRzO1xyXG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgZGVsZXRlIHNob3RzW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBtb3ZlKHRoaXMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEV4cGxvc2lvbihvYmplY3QpIHtcclxuICAgIHRoaXMucG9zaXRpb24gPSBbb2JqZWN0LnBvc2l0aW9uWzBdLCBvYmplY3QucG9zaXRpb25bMV1dO1xyXG4gICAgdGhpcy53aWR0aCA9IG9iamVjdC53aWR0aDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gb2JqZWN0LmhlaWdodDtcclxuICAgIHRoaXMuc3BlZWQgPSAwO1xyXG4gICAgdGhpcy5hbmdsZSA9IE1hdGgucmFuZG9tKCkgKiAzNjA7XHJcbiAgICB0aGlzLmN5Y2xlID0ge1xyXG4gICAgICByb3dzOiA2LFxyXG4gICAgICBjb2x1bW5zOiA4LFxyXG4gICAgICBzaXplOiBbMjU2LCAyNTZdLFxyXG4gICAgICBpOiAwLFxyXG4gICAgICBkaXJlY3Rpb246IHRydWVcclxuICAgIH07XHJcbiAgICB0aGlzLmxpZmVzcGFuID0gNDc7XHJcbiAgICB0aGlzLmltZyA9IGV4cGxvc2lvbkltYWdlO1xyXG5cclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLmxpZmVzcGFuLS07XHJcbiAgICAgIG1vdmUodGhpcyk7XHJcbiAgICAgIGlmICh0aGlzLmN5Y2xlLmRpcmVjdGlvbikge1xyXG4gICAgICAgIHRoaXMuY3ljbGUuaSsrO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY3ljbGUuaS0tO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gUG93ZXJ1cChpZCkge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy5wb3dlcnVwID0gcG93ZXJ1cFR5cGVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvd2VydXBUeXBlcy5sZW5ndGgpXTtcclxuICAgIHRoaXMuY3ljbGUgPSB0aGlzLnBvd2VydXAuY3ljbGU7XHJcbiAgICB0aGlzLmxpZmVzcGFuID0gMTAwMDtcclxuICAgIGlmICh0aGlzLmN5Y2xlLnNpemVbMV0gPiB0aGlzLmN5Y2xlLnNpemVbMF0pIHtcclxuICAgICAgdGhpcy5oZWlnaHQgPSA0MDtcclxuICAgICAgdGhpcy53aWR0aCA9IE1hdGgucm91bmQodGhpcy5oZWlnaHQgLyB0aGlzLmN5Y2xlLnNpemVbMV0gKiB0aGlzLmN5Y2xlLnNpemVbMF0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy53aWR0aCA9IDQwO1xyXG4gICAgICB0aGlzLmhlaWdodCA9IE1hdGgucm91bmQodGhpcy53aWR0aCAvIHRoaXMuY3ljbGUuc2l6ZVswXSAqIHRoaXMuY3ljbGUuc2l6ZVsxXSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gZ2V0RW50cnlQb3NpdGlvbih0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICB0aGlzLmltZyA9IHRoaXMucG93ZXJ1cC5pbWc7XHJcbiAgICB0aGlzLmFuZ2xlID0gTWF0aC5yYW5kb20oKSAqIDM2MDtcclxuICAgIHRoaXMuc3BlZWQgPSBNYXRoLnJhbmRvbSgpICogMTUwICsgNTA7XHJcbiAgICB2YXIgZGVsYXkgPSA1O1xyXG4gICAgdGhpcy5tb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICh0aGlzLmxpZmVzcGFuIDw9IDApIHtcclxuICAgICAgICByZXR1cm4gZGVsZXRlIHBvd2VydXBzW3RoaXMuaWRdO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChoaXQoc3BhY2VzaGlwLCB0aGlzKSkge1xyXG4gICAgICAgICRzY29wZS5hbm5vdW5jZSA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLmFubm91bmNlbWVudCA9IHRoaXMucG93ZXJ1cC5hbm5vdW5jZW1lbnQ7XHJcbiAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAkc2NvcGUuYW5ub3VuY2UgPSBmYWxzZTtcclxuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICB0aGlzLnBvd2VydXAuYWN0aXZhdGUoc3BhY2VzaGlwKTtcclxuICAgICAgICByZXR1cm4gZGVsZXRlIHBvd2VydXBzW3RoaXMuaWRdO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMubGlmZXNwYW4tLTtcclxuICAgICAgbW92ZSh0aGlzKTtcclxuICAgICAgaWYgKGRlbGF5IDw9IDApIHtcclxuICAgICAgICBpZiAodGhpcy5jeWNsZS5kaXJlY3Rpb24pIHtcclxuICAgICAgICAgIHRoaXMuY3ljbGUuaSsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlLmktLTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVsYXkgPSA1O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRlbGF5LS07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBtb3ZlKG9iamVjdCkge1xyXG4gICAgIG9iamVjdC5wb3NpdGlvblswXSArPSBvYmplY3Quc3BlZWQgLyAxMDAgKiBNYXRoLmNvcygob2JqZWN0LmFuZ2xlIC0gOTApICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgb2JqZWN0LnBvc2l0aW9uWzFdICs9IG9iamVjdC5zcGVlZCAvIDEwMCAqIE1hdGguc2luKChvYmplY3QuYW5nbGUgLSA5MCkgKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICBpZiAob2JqZWN0LnBvc2l0aW9uWzBdID4gY2FudmFzLndpZHRoKSB7XHJcbiAgICAgICBvYmplY3QucG9zaXRpb25bMF0gPSAtb2JqZWN0LndpZHRoO1xyXG4gICAgIH0gZWxzZSBpZiAob2JqZWN0LnBvc2l0aW9uWzBdIDwgLW9iamVjdC53aWR0aCkge1xyXG4gICAgICAgb2JqZWN0LnBvc2l0aW9uWzBdID0gY2FudmFzLndpZHRoO1xyXG4gICAgIH1cclxuICAgICBpZiAob2JqZWN0LnBvc2l0aW9uWzFdID4gY2FudmFzLmhlaWdodCkge1xyXG4gICAgICAgb2JqZWN0LnBvc2l0aW9uWzFdID0gLW9iamVjdC5oZWlnaHQ7XHJcbiAgICAgfSBlbHNlIGlmIChvYmplY3QucG9zaXRpb25bMV0gPCAtb2JqZWN0LmhlaWdodCkge1xyXG4gICAgICAgb2JqZWN0LnBvc2l0aW9uWzFdID0gY2FudmFzLmhlaWdodDtcclxuICAgICB9XHJcbiAgICAgY3R4LnNhdmUoKTtcclxuICAgICBjdHgudHJhbnNsYXRlKG9iamVjdC5wb3NpdGlvblswXSwgb2JqZWN0LnBvc2l0aW9uWzFdKTtcclxuICAgICBjdHgudHJhbnNsYXRlKG9iamVjdC53aWR0aCAvIDIsIG9iamVjdC5oZWlnaHQgLyAyKTtcclxuICAgICBjdHgucm90YXRlKG9iamVjdC5yb3RhdGlvbiAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgIGlmIChvYmplY3QuY3ljbGUpIHtcclxuICAgICAgIHZhciBjb2x1bW4gPSBvYmplY3QuY3ljbGUuaSAlIG9iamVjdC5jeWNsZS5jb2x1bW5zO1xyXG4gICAgICAgdmFyIHJvdyA9IE1hdGguZmxvb3Iob2JqZWN0LmN5Y2xlLmkgLyBvYmplY3QuY3ljbGUuY29sdW1ucyk7XHJcbiAgICAgICBjdHguZHJhd0ltYWdlKG9iamVjdC5pbWcsIG9iamVjdC5jeWNsZS5zaXplWzBdICogY29sdW1uLCBvYmplY3QuY3ljbGUuc2l6ZVsxXSAqIHJvdywgb2JqZWN0LmN5Y2xlLnNpemVbMF0sIG9iamVjdC5jeWNsZS5zaXplWzFdLCAtb2JqZWN0LndpZHRoIC8gMiwgLW9iamVjdC5oZWlnaHQgLyAyLCBvYmplY3Qud2lkdGgsIG9iamVjdC5oZWlnaHQpO1xyXG5cclxuICAgICAgIGlmIChvYmplY3QuY3ljbGUuaSA8PSAwKSB7XHJcbiAgICAgICAgIG9iamVjdC5jeWNsZS5pID0gMDtcclxuICAgICAgICAgb2JqZWN0LmN5Y2xlLmRpcmVjdGlvbiA9IHRydWU7XHJcbiAgICAgICB9IGVsc2UgaWYgKG9iamVjdC5jeWNsZS5pID49IG9iamVjdC5jeWNsZS5jb2x1bW5zICogb2JqZWN0LmN5Y2xlLnJvd3MpIHtcclxuICAgICAgICAgb2JqZWN0LmN5Y2xlLmkgPSBvYmplY3QuY3ljbGUuY29sdW1ucyAqIG9iamVjdC5jeWNsZS5yb3dzIC0gMTtcclxuICAgICAgICAgb2JqZWN0LmN5Y2xlLmRpcmVjdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgfVxyXG4gICAgIH0gZWxzZSB7XHJcbiAgICAgICBjdHguZHJhd0ltYWdlKG9iamVjdC5pbWcsIC1vYmplY3Qud2lkdGggLyAyLCAtb2JqZWN0LmhlaWdodCAvIDIsIG9iamVjdC53aWR0aCwgb2JqZWN0LmhlaWdodCk7XHJcbiAgICAgfVxyXG4gICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgfVxyXG5cclxuICB2YXIgc3BhY2VzaGlwO1xyXG5cclxuICBmdW5jdGlvbiBzdGFydCgpIHtcclxuICAgICRzY29wZS5wbGF5aW5nID0gdHJ1ZTtcclxuICAgICRzY29wZS5zY29yZSA9IDA7XHJcbiAgICBzcGFjZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNwYWNlcGljcyk7XHJcbiAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICBzcGFjZXNoaXAgPSBuZXcgU3BhY2VzaGlwKCk7XHJcbiAgICAkc2NvcGUuc2NvcmUgPSAwO1xyXG4gICAgc3Bhd25Bc3Rlcm9pZHMoNSk7XHJcbiAgICBhdXRvU3Bhd24oKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldEVudHJ5UG9zaXRpb24od2lkdGgsIGhlaWdodCkge1xyXG4gICAgdmFyIGdyaWRYID0gTWF0aC5yYW5kb20oKSAqIDI7XHJcbiAgICB2YXIgZ3JpZFkgPSBNYXRoLnJhbmRvbSgpICogMjtcclxuICAgIHZhciB4LCB5ID0gMDtcclxuICAgIGlmIChncmlkWCA+PSAxKSB7XHJcbiAgICAgIHggPSBNYXRoLnJhbmRvbSgpICogY2FudmFzLndpZHRoO1xyXG4gICAgICBpZiAoeSA+PSAxKSB7XHJcbiAgICAgICAgeSA9IDAgLSBoZWlnaHQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeSA9IGNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHkgPSBNYXRoLnJhbmRvbSgpICogY2FudmFzLmhlaWdodDtcclxuICAgICAgaWYgKGdyaWRZID49IDEpIHtcclxuICAgICAgICB4ID0gMCAtIHdpZHRoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbeCwgeV07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoaXQob2JqZWN0MSwgb2JqZWN0Mikge1xyXG4gICAgcmV0dXJuIChvYmplY3QxLnBvc2l0aW9uWzBdIDwgb2JqZWN0Mi5wb3NpdGlvblswXSArIG9iamVjdDIud2lkdGgpICYmXHJcbiAgICAgICAgICAgKG9iamVjdDIucG9zaXRpb25bMF0gPCBvYmplY3QxLnBvc2l0aW9uWzBdICsgb2JqZWN0MS53aWR0aCkgJiZcclxuICAgICAgICAgICAob2JqZWN0MS5wb3NpdGlvblsxXSA8IG9iamVjdDIucG9zaXRpb25bMV0gKyBvYmplY3QyLmhlaWdodCkgJiZcclxuICAgICAgICAgICAob2JqZWN0Mi5wb3NpdGlvblsxXSA8IG9iamVjdDEucG9zaXRpb25bMV0gKyBvYmplY3QxLmhlaWdodCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhdXRvU3Bhd24oKSB7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoYXN0ZXJvaWRzKS5sZW5ndGggPCAyMDApIHtcclxuICAgICAgdmFyIGlkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcclxuICAgICAgYXN0ZXJvaWRzW2lkXSA9IG5ldyBBc3Rlcm9pZChpZCk7XHJcbiAgICB9XHJcbiAgICBpZiAoJHNjb3BlLnBsYXlpbmcpIHtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICBhdXRvU3Bhd24oKTtcclxuICAgICAgfSwgc3Bhd25JbnRlcnZhbCgpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNwYXduSW50ZXJ2YWwoKSB7XHJcbiAgICBpZiAoJHNjb3BlLnNjb3JlIDwgMTAwMCkge1xyXG4gICAgICByZXR1cm4gMTAwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgMjAwMCkge1xyXG4gICAgICByZXR1cm4gOTAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCAzMDAwKSB7XHJcbiAgICAgIHJldHVybiA4MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDQwMDApIHtcclxuICAgICAgcmV0dXJuIDcwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgNTAwMCkge1xyXG4gICAgICByZXR1cm4gNjAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCA2MDAwKSB7XHJcbiAgICAgIHJldHVybiA1MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDcwMDApIHtcclxuICAgICAgcmV0dXJuIDQwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgODAwMCkge1xyXG4gICAgICByZXR1cm4gMzAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIDIwMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNwYXduQXN0ZXJvaWRzKGFtb3VudCkge1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgZG8ge1xyXG4gICAgICB2YXIgaWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDApO1xyXG4gICAgICBhc3Rlcm9pZHNbaWRdID0gbmV3IEFzdGVyb2lkKGlkKTtcclxuICAgIH0gd2hpbGUgKGkrKyA8PSBhbW91bnQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3Bhd25Qb3dlcnVwKCkge1xyXG4gICAgaWYgKE9iamVjdC5rZXlzKHBvd2VydXBzKS5sZW5ndGggPCAzKSB7XHJcbiAgICAgIHZhciBpZCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XHJcbiAgICAgIHBvd2VydXBzW2lkXSA9IG5ldyBQb3dlcnVwKGlkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdhbWVPdmVyKCkge1xyXG4gICAgJHNjb3BlLnBsYXlpbmcgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGkgaW4gYXN0ZXJvaWRzKSB7XHJcbiAgICAgIGFzdGVyb2lkc1tpXS5leHBsb2RlKCk7XHJcbiAgICB9XHJcbiAgICBzaG90cyA9IHt9O1xyXG4gICAgaWYgKCRzY29wZS5sb2dnZWRJbikge1xyXG4gICAgICBpZiAoJHNjb3BlLmN1cnJlbnRVc2VyLmhpZ2hzY29yZS5hc3Rlcm9pZHMgPCAkc2NvcGUuc2NvcmUpIHtcclxuICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIuaGlnaHNjb3JlLmFzdGVyb2lkcyA9ICRzY29wZS5zY29yZTtcclxuICAgICAgICBHYW1lU3ZjLnNldEhpZ2hzY29yZSgnYXN0ZXJvaWRzJywgJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCwgJHNjb3BlLnNjb3JlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKCRzY29wZS5oaWdoc2NvcmUgPCAkc2NvcGUuc2NvcmUpIHtcclxuICAgICAgICAkc2NvcGUuaGlnaHNjb3JlID0gJHNjb3BlLnNjb3JlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHQvLyBTdGFydCBsaXN0ZW5pbmcgdG8gcmVzaXplIGV2ZW50cyBhbmRcclxuXHQvLyBkcmF3IGNhbnZhcy5cclxuXHJcblx0ZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcclxuXHRcdC8vIFJlZ2lzdGVyIGFuIGV2ZW50IGxpc3RlbmVyIHRvXHJcblx0XHQvLyBjYWxsIHRoZSByZXNpemVDYW52YXMoKSBmdW5jdGlvbiBlYWNoIHRpbWVcclxuXHRcdC8vIHRoZSB3aW5kb3cgaXMgcmVzaXplZC5cclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVDYW52YXMsIGZhbHNlKTtcclxuXHJcblxyXG5cdFx0Ly8gRHJhdyBjYW52YXMgYm9yZGVyIGZvciB0aGUgZmlyc3QgdGltZS5cclxuXHRcdHJlc2l6ZUNhbnZhcygpO1xyXG5cdH1cclxuXHQvLyBSdW5zIGVhY2ggdGltZSB0aGUgRE9NIHdpbmRvdyByZXNpemUgZXZlbnQgZmlyZXMuXHJcblx0Ly8gUmVzZXRzIHRoZSBjYW52YXMgZGltZW5zaW9ucyB0byBtYXRjaCB3aW5kb3csXHJcblx0Ly8gdGhlbiBkcmF3cyB0aGUgbmV3IGJvcmRlcnMgYWNjb3JkaW5nbHkuXHJcblx0ZnVuY3Rpb24gcmVzaXplQ2FudmFzKCkge1xyXG4gICAgY29uc29sZS5sb2cod2luZG93LmlubmVyV2lkdGgpO1xyXG5cdFx0Y2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcblx0XHRjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gKGNhbnZhcy53aWR0aCA8PSA3NjggPyA1MCA6IDEwNSk7XHJcblx0fVxyXG5cclxuXHRpbml0aWFsaXplKCk7XHJcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpO1xyXG5cclxuICB2YXIgdGFsbHkgPSAwO1xyXG4gIHZhciBkaXJlY3Rpb24gPSB0cnVlO1xyXG5cclxuICBmdW5jdGlvbiBkcmF3KCkge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgZm9yICh2YXIgaSBpbiBzaG90cykge1xyXG4gICAgICBpZiAoc2hvdHNbaV0ubGlmZXNwYW4gPD0gMCkge1xyXG4gICAgICAgIGRlbGV0ZSBzaG90c1tpXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzaG90c1tpXS5tb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAoaSBpbiBhc3Rlcm9pZHMpIHtcclxuICAgICAgYXN0ZXJvaWRzW2ldLm1vdmUoKTtcclxuICAgIH1cclxuICAgIGZvciAoaSBpbiBwb3dlcnVwcykge1xyXG4gICAgICBwb3dlcnVwc1tpXS5tb3ZlKCk7XHJcbiAgICB9XHJcbiAgICBmb3IgKGkgaW4gZXhwbG9zaW9ucykge1xyXG4gICAgICBpZiAoZXhwbG9zaW9uc1tpXS5saWZlc3BhbiA8PSAwKSB7XHJcbiAgICAgICAgZGVsZXRlIGV4cGxvc2lvbnNbaV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZXhwbG9zaW9uc1tpXS5tb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGV2YWx1YXRlS2V5cygpO1xyXG4gICAgaWYgKCRzY29wZS5wbGF5aW5nKSB7XHJcbiAgICAgIHNwYWNlc2hpcC5tb3ZlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgZ3JhZGllbnQgPSBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgY2FudmFzLndpZHRoLCAwKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCcwJywgJ3JnYignICsgTWF0aC5mbG9vcigyNTYgLSAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnKScpO1xyXG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoJzAuMjUnLCAncmdiKCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDI1NiAtIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcpJyk7XHJcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMC41JywgJ3JnYignICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigyNTYgLSAyNTYgKiB0YWxseSAvIDEwMCkgKyAnKScpO1xyXG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoJzAuNzUnLCAncmdiKCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDI1NiAtIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcpJyk7XHJcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMS4wJywgJ3JnYignICsgTWF0aC5mbG9vcigyNTYgLSAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnKScpO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gZ3JhZGllbnQ7XHJcbiAgICAgIGN0eC5mb250PSc2MHB4IE1vbm90b24nO1xyXG4gICAgICBjdHguZmlsbFRleHQoJ0FzdGVyb2lkcycsIGNhbnZhcy53aWR0aCAvIDIgLSBjdHgubWVhc3VyZVRleHQoJ0FzdGVyb2lkcycpLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAvIDIpO1xyXG4gICAgICBjdHguZm9udD0nMjBweCBBbGRyaWNoJztcclxuICAgICAgY3R4LmZpbGxUZXh0KCdQcmVzcyBzcGFjZSB0byBzdGFydCcsIGNhbnZhcy53aWR0aCAvIDIgLSBjdHgubWVhc3VyZVRleHQoJ1ByZXNzIHNwYWNlIHRvIHN0YXJ0Jykud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMiArIDIwKTtcclxuICAgICAgY3R4LmZpbGxUZXh0KCdEZXNpZ25lZCBhbmQgZGV2ZWxvcGVkIGJ5IExhdXJlbnQgRGViYWNrZXInLCBjYW52YXMud2lkdGggLyAyIC0gY3R4Lm1lYXN1cmVUZXh0KCdEZXNpZ25lZCBhbmQgZGV2ZWxvcGVkIGJ5IExhdXJlbnQgRGViYWNrZXInKS53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLSAzMCk7XHJcbiAgICB9XHJcbiAgICB0YWxseSArPSBkaXJlY3Rpb24gPyAxIDogLTE7XHJcbiAgICBpZiAodGFsbHkgPiAxMDApIHtcclxuICAgICAgdGFsbHkgPSAxMDA7XHJcbiAgICAgIGRpcmVjdGlvbiA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIGlmICh0YWxseSA8IDApIHtcclxuICAgICAgdGFsbHkgPSAwO1xyXG4gICAgICBkaXJlY3Rpb24gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpO1xyXG4gIH1cclxuXHJcbiAgJHNjb3BlLnNwYWNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoXCJhc3Rlcm9pZHMvc3BhY2UnICsgc3BhY2UgKyAnLmpwZ1wiKSdcclxuICAgIH07XHJcbiAgfTtcclxuXHJcblxyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignQnViYmxlc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XHJcblxyXG4gIHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnViYmxlcy1wYWdlJyk7XHJcbiAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gIHZhciBidWJibGVzID0gW107XHJcbiAgdmFyIGNvbG9ycyA9IFsnI2ZmYzMwMCcsJyNmZjU3MzMnLCcjYzcwMDM5JywnIzkwMGMzZScsJyM1NzE4NDUnXTtcclxuXHJcbiAgZnVuY3Rpb24gQnViYmxlKCkge1xyXG4gICAgdGhpcy5saWZlc3BhbiA9IDA7XHJcbiAgICB0aGlzLnJhZGl1cyA9IDE7XHJcbiAgICB0aGlzLmV4cGFuZGluZyA9IHRydWU7XHJcbiAgICB0aGlzLnNwZWVkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMyk7XHJcbiAgICB0aGlzLmNpcmN1bWZlcmVuY2UgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA1MCkgKyA1O1xyXG4gICAgdGhpcy5tYXhSYWRpdXMgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAyMDApICsgMjA7XHJcbiAgICB0aGlzLnggPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiBjYW52YXMud2lkdGgpO1xyXG4gICAgdGhpcy55ID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogY2FudmFzLmhlaWdodCk7XHJcbiAgICB0aGlzLnZ4ID0gKE1hdGgucmFuZG9tKCkgPj0gMC41ID8gMSA6IC0xKTtcclxuICAgIHRoaXMudnkgPSAoTWF0aC5yYW5kb20oKSA+PSAwLjUgPyAxIDogLTEpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZHJhdygpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIGJ1YmJsZXMuZm9yRWFjaChmdW5jdGlvbihidWJibGUpIHtcclxuICAgICAgdmFyIGNvbG9yID0gY29sb3JzW01hdGgucm91bmQoY29sb3JzLmxlbmd0aCAqIGJ1YmJsZS5yYWRpdXMgLyBidWJibGUubWF4UmFkaXVzKV07XHJcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgY3R4LmFyYyhidWJibGUueCwgYnViYmxlLnksIGJ1YmJsZS5yYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yc1tNYXRoLnJvdW5kKGNvbG9ycy5sZW5ndGggKiBidWJibGUucmFkaXVzIC8gYnViYmxlLm1heFJhZGl1cyldO1xyXG4gICAgICBjdHguZmlsbCgpO1xyXG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcnNbY29sb3JzLmxlbmd0aCAtIE1hdGgucm91bmQoY29sb3JzLmxlbmd0aCAqIGJ1YmJsZS5yYWRpdXMgLyBidWJibGUubWF4UmFkaXVzKV07XHJcbiAgICAgIGN0eC5saW5lV2lkdGggPSBidWJibGUuY2lyY3VtZmVyZW5jZSAqIGJ1YmJsZS5yYWRpdXMgLyBidWJibGUubWF4UmFkaXVzO1xyXG4gICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZpbHRlckJ1YmJsZXMoKSB7XHJcbiAgICBidWJibGVzLnB1c2gobmV3IEJ1YmJsZSgpKTtcclxuICAgIGJ1YmJsZXMgPSBidWJibGVzLmZpbHRlcihmdW5jdGlvbiAoYnViYmxlKSB7XHJcbiAgICAgIGlmIChidWJibGUucmFkaXVzID09PSBidWJibGUubWF4UmFkaXVzKSB7XHJcbiAgICAgICAgYnViYmxlLmV4cGFuZGluZyA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGJ1YmJsZS54ICs9IGJ1YmJsZS52eCAqIGJ1YmJsZS5zcGVlZDtcclxuICAgICAgYnViYmxlLnkgKz0gYnViYmxlLnZ5ICogYnViYmxlLnNwZWVkO1xyXG4gICAgICBidWJibGUucmFkaXVzICs9IChidWJibGUuZXhwYW5kaW5nID8gMSA6IC0xKTtcclxuICAgICAgcmV0dXJuIGJ1YmJsZS5yYWRpdXMgPiAwO1xyXG4gICAgfSk7XHJcbiAgICBkcmF3KCk7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZmlsdGVyQnViYmxlcyk7XHJcbiAgfVxyXG5cclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZmlsdGVyQnViYmxlcyk7XHJcblxyXG5cclxuXHQoZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0Ly8gU3RhcnQgbGlzdGVuaW5nIHRvIHJlc2l6ZSBldmVudHMgYW5kXHJcblx0XHQvLyBkcmF3IGNhbnZhcy5cclxuXHRcdGluaXRpYWxpemUoKTtcclxuXHJcblx0XHRmdW5jdGlvbiBpbml0aWFsaXplKCkge1xyXG5cdFx0XHQvLyBSZWdpc3RlciBhbiBldmVudCBsaXN0ZW5lciB0b1xyXG5cdFx0XHQvLyBjYWxsIHRoZSByZXNpemVDYW52YXMoKSBmdW5jdGlvbiBlYWNoIHRpbWVcclxuXHRcdFx0Ly8gdGhlIHdpbmRvdyBpcyByZXNpemVkLlxyXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplQ2FudmFzLCBmYWxzZSk7XHJcblxyXG5cdFx0XHQvLyBEcmF3IGNhbnZhcyBib3JkZXIgZm9yIHRoZSBmaXJzdCB0aW1lLlxyXG5cdFx0XHRyZXNpemVDYW52YXMoKTtcclxuXHRcdH1cclxuXHRcdC8vIFJ1bnMgZWFjaCB0aW1lIHRoZSBET00gd2luZG93IHJlc2l6ZSBldmVudCBmaXJlcy5cclxuXHRcdC8vIFJlc2V0cyB0aGUgY2FudmFzIGRpbWVuc2lvbnMgdG8gbWF0Y2ggd2luZG93LFxyXG5cdFx0Ly8gdGhlbiBkcmF3cyB0aGUgbmV3IGJvcmRlcnMgYWNjb3JkaW5nbHkuXHJcblx0XHRmdW5jdGlvbiByZXNpemVDYW52YXMoKSB7XHJcblx0XHRcdGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG5cdFx0XHRjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gKGNhbnZhcy53aWR0aCA8PSA3NjggPyA1NSA6IDExMSk7XHJcblx0XHR9XHJcblxyXG5cdH0pKCk7XHJcblxyXG5cclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0NvbnRhY3RDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgRW1haWxTdmMpIHtcclxuXHJcbiAgJHNjb3BlLm9wdGlvbnMgPSBbXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiU3BhbVwiLFxyXG4gICAgICB0ZXh0OiBcIkkgYW0gYSBzcGFtIGJvdCBhbmQgYXV0b21hdGljYWxseSBjaGVjayB0aGUgZmlyc3Qgb3B0aW9uIEkgZmluZCFcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJPcHBvcnR1bml0aXlcIixcclxuICAgICAgdGV4dDogXCJZb3Ugc2VlbSB0byBoYXZlIHRoZSBza2lsbHMgSSBzZWVrLCBJJ2QgbGlrZSB0byB0YWxrIGFib3V0IHNvbWUgb3Bwb3J0dW5pdGllcy5cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJSZXN1bWVcIixcclxuICAgICAgdGV4dDogXCJJIGRpZyB0aGUgcmVzdW1lLCBob3cgZGlkIHlvdSBtYWtlIGl0P1wiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIk90aGVyXCIsXHJcbiAgICAgIHRleHQ6IFwiU3VtdGluIGVsc2UhXCJcclxuICAgIH1cclxuXHJcbiAgXTtcclxuXHJcbiAgJHNjb3BlLmNvbnRhY3QgPSB7XHJcbiAgICBlbWFpbDogXCJcIixcclxuICAgIG5hbWU6IFwiXCIsXHJcbiAgICBwaG9uZTogXCJcIixcclxuICAgIGFib3V0OiBcIlwiLFxyXG4gICAgbWVzc2FnZTogXCJcIlxyXG4gIH07XHJcblxyXG4gICRzY29wZS5zZW5kID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkc2NvcGUuc2VuZGluZyA9IHRydWU7XHJcbiAgICBjb25zb2xlLmxvZygnaGVyZScpO1xyXG4gICAgRW1haWxTdmMuc2VuZCh7XHJcbiAgICAgIFwiZW1haWxcIjogJHNjb3BlLmNvbnRhY3QuZW1haWwsXHJcbiAgICAgIFwibmFtZVwiOiAkc2NvcGUuY29udGFjdC5uYW1lLFxyXG4gICAgICBcInBob25lXCI6ICAkc2NvcGUuY29udGFjdC5waG9uZSxcclxuICAgICAgXCJhYm91dFwiOiAkc2NvcGUuY29udGFjdC5hYm91dCxcclxuICAgICAgXCJtZXNzYWdlXCI6ICRzY29wZS5jb250YWN0Lm1lc3NhZ2VcclxuICAgIH0pXHJcbiAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAkc2NvcGUuc2VudCA9IHRydWU7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiU1VDQ0VTUy4gc3RhdHVzPSVkLCB0ZXh0PSVzXCIsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UudGV4dCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuICAgIH0sIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAkc2NvcGUuc2VuZGluZyA9IGZhbHNlO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkZBSUxFRC4gZXJyb3I9XCIsIGVycik7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignRXhwZXJpZW5jZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XHJcblxyXG4gICRzY29wZS5nZXRTa2lsbCA9IGZ1bmN0aW9uKHNraWxsQ29kZSkge1xyXG4gICAgaWYgKCEkc2NvcGUuc2tpbGxzKSByZXR1cm47XHJcbiAgICByZXR1cm4gJHNjb3BlLnNraWxscy5maW5kKGZ1bmN0aW9uKHNraWxsKSB7XHJcbiAgICAgIHJldHVybiBza2lsbC5jb2RlID09PSBza2lsbENvZGU7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignSG9iYmllc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkd2luZG93KSB7XHJcblxyXG4gICRzY29wZS5ob2JieVNlbGVjdG9yVmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAkLmdldEpTT04oJ2h0dHBzOi8vd3d3LnJlZGRpdC5jb20vdXNlci9iZWxnb2NhbmFkaWFuL2Fib3V0Ly5qc29uJywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAvL2NvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUuc2VsZWN0ZWRIb2JieSA9ICRzY29wZS5ob2JiaWVzWzBdO1xyXG5cclxuICAkc2NvcGUuc2VsZWN0SG9iYnkgPSBmdW5jdGlvbiAoaG9iYnkpIHtcclxuICAgICRzY29wZS5zZWxlY3RlZEhvYmJ5ID0gaG9iYnk7XHJcbiAgICAkc2NvcGUuaG9iYnlTZWxlY3RvclZpc2libGUgPSBmYWxzZTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2hvd0hvYmJ5ID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgYXJyYXkpIHtcclxuICAgIGlmICghdmFsdWUuaW1hZ2VzKSByZXR1cm4gZmFsc2U7XHJcbiAgICByZXR1cm4gdmFsdWUuaW1hZ2VzLmxlbmd0aCA+IDA7XHJcbiAgfTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignTGVtbWluZ3NDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgR2FtZVN2Yykge1xyXG5cclxuICB2YXIgTEVGVCA9IDA7XHJcbiAgdmFyIFJJR0hUID0gMTtcclxuXHJcbiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsZW1taW5ncy1wYWdlJyk7XHJcbiAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gIHZhciBsZW1taW5nc0ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgbGVtbWluZ3NJbWFnZS5zcmMgPSAnbGVtbWluZ3MvbGVtbWluZ3MucG5nJztcclxuICB2YXIgZGVjb3JJbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gIGRlY29ySW1hZ2Uuc3JjID0gJ2xlbW1pbmdzL2RlY29yLnBuZyc7XHJcbiAgdmFyIGxlbW1pbmdzID0ge307XHJcbiAgdmFyIHN0YXJ0ZWQgPSBmYWxzZTtcclxuXHJcbiAgdmFyIGFjdGlvbnMgPSB7XHJcbiAgICB3YWxrOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMF0sXHJcbiAgICAgIGVuZDogWzMyMCwgMjBdLFxyXG4gICAgICBjb2x1bW5zOiA4LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGh1aDoge1xyXG4gICAgICBzdGFydDogWzMyMCwgMF0sXHJcbiAgICAgIGVuZDogWzY0MCwgMjBdLFxyXG4gICAgICBjb2x1bW5zOiA4LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgZmFsbDoge1xyXG4gICAgICBzdGFydDogWzAsIDgwXSxcclxuICAgICAgZW5kOiBbMTYwLCAxMDBdLFxyXG4gICAgICBjb2x1bW5zOiA0LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGZseToge1xyXG4gICAgICBzdGFydDogWzE2MCwgODBdLFxyXG4gICAgICBlbmQ6IFs0ODAsIDExMF0sXHJcbiAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgc3RvcDoge1xyXG4gICAgICBzdGFydDogWzAsIDEyMF0sXHJcbiAgICAgIGVuZDogWzY0MCwgMTQwXSxcclxuICAgICAgY29sdW1uczogMTYsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgY2xpbWI6IHtcclxuICAgICAgc3RhcnQ6IFswLCAxNjBdLFxyXG4gICAgICBlbmQ6IFs2NDAsIDE4NV0sXHJcbiAgICAgIGNvbHVtbnM6IDE2LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGJ1aWxkOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMjAwXSxcclxuICAgICAgZW5kOiBbNjQwLCAyMjVdLFxyXG4gICAgICBjb2x1bW5zOiAxNixcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBwdW5jaDoge1xyXG4gICAgICBzdGFydDogWzAsIDI0MF0sXHJcbiAgICAgIGVuZDogWzY0MCwgMzAwXSxcclxuICAgICAgY29sdW1uczogMTYsXHJcbiAgICAgIHJvd3M6IDIsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZGlnOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMzIwXSxcclxuICAgICAgZW5kOiBbMzIwLCAzNDVdLFxyXG4gICAgICBjb2x1bW5zOiA4LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBMZW1taW5nKGluaXQpIHtcclxuICAgIHRoaXMucG9zaXRpb24gPSBbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGNhbnZhcy53aWR0aCAtIDIwMCkpICsgMTAwLCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoY2FudmFzLmhlaWdodCAtIDIwMCkpICsgMTAwXTtcclxuICAgIHRoaXMuZGlyZWN0aW9uID0gTWF0aC5yYW5kb20oKSAqIDIgPiAxID8gTEVGVCA6IFJJR0hUO1xyXG4gICAgdGhpcy5hY3QgPSBmdW5jdGlvbihhY3Rpb24pIHtcclxuICAgICAgdGhpcy5hY3Rpb24gPSBhY3Rpb25zW2FjdGlvbl07XHJcbiAgICAgIHRoaXMuY3ljbGUgPSAwO1xyXG4gICAgICB0aGlzLndpZHRoID0gKHRoaXMuYWN0aW9uLmVuZFswXSAtIHRoaXMuYWN0aW9uLnN0YXJ0WzBdKSAvIHRoaXMuYWN0aW9uLmNvbHVtbnM7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gKHRoaXMuYWN0aW9uLmVuZFsxXSAtIHRoaXMuYWN0aW9uLnN0YXJ0WzFdIC0gKDIwICogKHRoaXMuYWN0aW9uLnJvd3MgLSAxKSkpIC8gdGhpcy5hY3Rpb24ucm93cztcclxuICAgICAgdGhpcy5hbmltYXRpb24gPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIHRoaXMuYWN0KGluaXQpO1xyXG4gICAgdGhpcy5tb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgIGN0eC50cmFuc2xhdGUodGhpcy5wb3NpdGlvblswXSwgdGhpcy5wb3NpdGlvblsxXSk7XHJcbiAgICAgIGN0eC50cmFuc2xhdGUodGhpcy53aWR0aCAvIDIsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gTEVGVCkge1xyXG4gICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuY3ljbGUgJSB0aGlzLmFjdGlvbi5jb2x1bW5zO1xyXG4gICAgICB2YXIgcm93ID0gTWF0aC5mbG9vcih0aGlzLmN5Y2xlIC8gdGhpcy5hY3Rpb24uY29sdW1ucyk7XHJcbiAgICAgIGN0eC5kcmF3SW1hZ2UobGVtbWluZ3NJbWFnZSwgKHRoaXMud2lkdGggKiBjb2x1bW4pICsgdGhpcy5hY3Rpb24uc3RhcnRbMF0sICgodGhpcy5oZWlnaHQgKyAyMCkgKiByb3cpICsgdGhpcy5hY3Rpb24uc3RhcnRbMV0sIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCAwLCAwLCB0aGlzLndpZHRoICogMiwgdGhpcy5oZWlnaHQgKiAyKTtcclxuICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgaWYgKHRoaXMuYWN0aW9uLnJldmVyc2UpIHtcclxuICAgICAgICBpZiAodGhpcy5hbmltYXRpb24pIHtcclxuICAgICAgICAgIHRoaXMuY3ljbGUrKztcclxuICAgICAgICAgIGlmICh0aGlzLmN5Y2xlID49IHRoaXMuYWN0aW9uLmNvbHVtbnMgKiB0aGlzLmFjdGlvbi5yb3dzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gIXRoaXMuYW5pbWF0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLmN5Y2xlLS07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuY3ljbGUtLTtcclxuICAgICAgICAgIGlmICh0aGlzLmN5Y2xlIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbiA9ICF0aGlzLmFuaW1hdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5jeWNsZSA9IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY3ljbGUrKztcclxuICAgICAgICBpZiAodGhpcy5jeWNsZSA+PSB0aGlzLmFjdGlvbi5jb2x1bW5zICogdGhpcy5hY3Rpb24ucm93cykge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gSGF0Y2goKSB7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gWzIwLCAyMF07XHJcbiAgICB0aGlzLmFjdGlvbiA9IHtcclxuICAgICAgc3RhcnQ6IFswLCAwXSxcclxuICAgICAgZW5kOiBbODIsIDUwMF0sXHJcbiAgICAgIGNvbHVtbnM6IDEsXHJcbiAgICAgIHJvd3M6IDEwXHJcbiAgICB9XHJcbiAgICB0aGlzLndpZHRoID0gKHRoaXMuYWN0aW9uLmVuZFswXSAtIHRoaXMuYWN0aW9uLnN0YXJ0WzBdKSAvIHRoaXMuYWN0aW9uLmNvbHVtbnM7XHJcbiAgICB0aGlzLmhlaWdodCA9ICh0aGlzLmFjdGlvbi5lbmRbMV0gLSB0aGlzLmFjdGlvbi5zdGFydFsxXSkgLyB0aGlzLmFjdGlvbi5yb3dzO1xyXG4gICAgdGhpcy5jeWNsZSA9IDA7XHJcbiAgICB0aGlzLm9wZW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uWzBdLCB0aGlzLnBvc2l0aW9uWzFdKTtcclxuICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgdmFyIGNvbHVtbiwgcm93O1xyXG4gICAgICBpZiAoc3RhcnRlZCkge1xyXG4gICAgICAgIGNvbHVtbiA9IHRoaXMuY3ljbGUgJSB0aGlzLmFjdGlvbi5jb2x1bW5zO1xyXG4gICAgICAgIHJvdyA9IE1hdGguZmxvb3IodGhpcy5jeWNsZSAvIHRoaXMuYWN0aW9uLmNvbHVtbnMpO1xyXG4gICAgICAgIGlmICh0aGlzLmN5Y2xlIDwgOSkge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb2x1bW4gPSAwO1xyXG4gICAgICAgIHJvdyA9IDA7XHJcbiAgICAgIH1cclxuICAgICAgY3R4LmRyYXdJbWFnZShkZWNvckltYWdlLCAodGhpcy53aWR0aCAqIGNvbHVtbikgKyB0aGlzLmFjdGlvbi5zdGFydFswXSwgKHRoaXMuaGVpZ2h0ICogcm93KSArIHRoaXMuYWN0aW9uLnN0YXJ0WzFdIC0gMSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIDAsIHRoaXMud2lkdGggKiAyLCB0aGlzLmhlaWdodCAqIDIpO1xyXG4gICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3Bhd25MZW1taW5nKCkge1xyXG4gICAgT2JqZWN0LmtleXMoYWN0aW9ucykuZm9yRWFjaChmdW5jdGlvbihhY3Rpb24pIHtcclxuICAgICAgbGVtbWluZ3NbTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKV0gPSBuZXcgTGVtbWluZyhhY3Rpb24pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHRmdW5jdGlvbiBpbml0aWFsaXplKCkge1xyXG5cdFx0Ly8gUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXIgdG9cclxuXHRcdC8vIGNhbGwgdGhlIHJlc2l6ZUNhbnZhcygpIGZ1bmN0aW9uIGVhY2ggdGltZVxyXG5cdFx0Ly8gdGhlIHdpbmRvdyBpcyByZXNpemVkLlxyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUNhbnZhcywgZmFsc2UpO1xyXG5cdFx0Ly8gRHJhdyBjYW52YXMgYm9yZGVyIGZvciB0aGUgZmlyc3QgdGltZS5cclxuXHRcdHJlc2l6ZUNhbnZhcygpO1xyXG5cdH1cclxuXHQvLyBSdW5zIGVhY2ggdGltZSB0aGUgRE9NIHdpbmRvdyByZXNpemUgZXZlbnQgZmlyZXMuXHJcblx0Ly8gUmVzZXRzIHRoZSBjYW52YXMgZGltZW5zaW9ucyB0byBtYXRjaCB3aW5kb3csXHJcblx0Ly8gdGhlbiBkcmF3cyB0aGUgbmV3IGJvcmRlcnMgYWNjb3JkaW5nbHkuXHJcblx0ZnVuY3Rpb24gcmVzaXplQ2FudmFzKCkge1xyXG5cdFx0Y2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcblx0XHRjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gKGNhbnZhcy53aWR0aCA8PSA3NjggPyA1MCA6IDEwNSk7XHJcblx0fVxyXG5cclxuXHRpbml0aWFsaXplKCk7XHJcbiAgc3Bhd25MZW1taW5nKCk7XHJcbiAgbGV0IGhhdGNoID0gbmV3IEhhdGNoKClcclxuICBkcmF3KCk7XHJcblxyXG4gIGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICBpZiAoIXN0YXJ0ZWQpIHtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguZm9udD0nNDBweCBNb25vdG9uJztcclxuICAgICAgY3R4LmxpbmVXaWR0aCA9ICcxMCc7XHJcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdibHVlJztcclxuICAgICAgY3R4LnJlY3QoMTUsIGNhbnZhcy5oZWlnaHQgLSA0NSwgY3R4Lm1lYXN1cmVUZXh0KCdTdGFydCcpLndpZHRoICsgMjAsIGN0eC5tZWFzdXJlVGV4dCgnU3RhcnQnKS5oZWlnaHQgKyBjYW52YXMuaGVpZ2h0IC0gNDUpO1xyXG4gICAgICBjdHguZmlsbCgpO1xyXG4gICAgICBjdHguZmlsbFRleHQoJ1N0YXJ0JywgMjAsIGNhbnZhcy5oZWlnaHQgLSA1MCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmb3IgKHZhciBpIGluIGxlbW1pbmdzKSB7XHJcbiAgICAgICAgbGVtbWluZ3NbaV0ubW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBoYXRjaC5vcGVuKCk7XHJcbiAgICBzdGFydGVkID0gdHJ1ZTtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgIGRyYXcoKTtcclxuICAgIH0sIDE1MCk7XHJcbiAgfVxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdMaXN0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIENhdGVnb3JpZXNTdmMpIHtcclxuXHJcbiAgJHNjb3BlLnNob3dDYXRlZ29yeSA9IHRydWU7XHJcblxyXG4gICRzY29wZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgQ2F0ZWdvcmllc1N2Yy5nZXRDYXRlZ29yaWVzKClcclxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICRzY29wZS50YXNrcyA9IFtdO1xyXG4gICAgICBmb3IgKHZhciBpIGluICRzY29wZS5jYXRlZ29yaWVzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaiBpbiAkc2NvcGUuY2F0ZWdvcmllc1tpXS50YXNrcykge1xyXG4gICAgICAgICAgJHNjb3BlLnRhc2tzLnB1c2goe1xyXG4gICAgICAgICAgICBcImNhdGVnb3J5XCI6ICRzY29wZS5jYXRlZ29yaWVzW2ldLm5hbWUsXHJcbiAgICAgICAgICAgIFwidGFza1wiOiAkc2NvcGUuY2F0ZWdvcmllc1tpXS50YXNrc1tqXS5uYW1lXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zZWxlY3RDYXRlZ29yeSA9IGZ1bmN0aW9uKGNhdGVnb3J5KSB7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeSA9IGNhdGVnb3J5O1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkVGFza3MgPSBbXTtcclxuICAgICRzY29wZS5zZWxlY3RhYmxlVGFza3MgPSBbXTtcclxuICAgIGZvciAodmFyIGkgaW4gJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MpIHtcclxuICAgICAgJHNjb3BlLnNlbGVjdGFibGVUYXNrcy5wdXNoKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldKTtcclxuICAgIH1cclxuICAgICRzY29wZS5zaG93Q2F0ZWdvcnkgPSBmYWxzZTtcclxuICAgICRzY29wZS5lbnRlcmVkQ2F0ZWdvcnkgPSAnJztcclxuICB9O1xyXG5cclxuICAkc2NvcGUubmV3Q2F0ZWdvcnkgPSBmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcclxuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2NvcGUuY2F0ZWdvcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoJHNjb3BlLmNhdGVnb3JpZXNbaV0ubmFtZSA9PT0gY2F0ZWdvcnkpIHtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkoJHNjb3BlLmNhdGVnb3JpZXNbaV0pO1xyXG4gICAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFmb3VuZCkge1xyXG4gICAgICBDYXRlZ29yaWVzU3ZjLmFkZENhdGVnb3J5KHtcclxuICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnlcclxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcclxuICAgICAgICAkc2NvcGUuaW5pdCgpO1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RDYXRlZ29yeShjYXRlZ29yeSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLmVudGVyZWRDYXRlZ29yeSA9ICcnO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5uZXdUYXNrID0gZnVuY3Rpb24gKHRhc2spIHtcclxuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xyXG4gICAgZm9yICh2YXIgaSBpbiAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcykge1xyXG4gICAgICBpZiAoJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0ubmFtZSA9PT0gdGFzaykge1xyXG4gICAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0VGFzaygkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghZm91bmQpIHtcclxuICAgICAgQ2F0ZWdvcmllc1N2Yy5hZGRUYXNrKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5Lm5hbWUsIHtcclxuICAgICAgICB0YXNrOiB0YXNrXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzLnB1c2goeyBuYW1lOiB0YXNrIH0pO1xyXG4gICAgICAgICRzY29wZS5hZGRUYXNrKCRzY29wZS5zZWxlY3RlZFRhc2tzLCAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1skc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcy5sZW5ndGggLSAxXSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLmVudGVyZWRUYXNrID0gJyc7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdFRhc2sgPSBmdW5jdGlvbiAodGFzaykge1xyXG4gICAgJHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsIHRhc2spO1xyXG4gICAgJHNjb3BlLnJlbW92ZVRhc2soJHNjb3BlLnNlbGVjdGFibGVUYXNrcywgdGFzayk7XHJcbiAgICAkc2NvcGUuZW50ZXJlZFRhc2sgPSAnJztcclxuICB9O1xyXG5cclxuICAkc2NvcGUudW5zZWxlY3RUYXNrID0gZnVuY3Rpb24gKHRhc2spIHtcclxuICAgICRzY29wZS5hZGRUYXNrKCRzY29wZS5zZWxlY3RhYmxlVGFza3MsIHRhc2spO1xyXG4gICAgJHNjb3BlLnJlbW92ZVRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsIHRhc2spO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5hZGRUYXNrID0gZnVuY3Rpb24odGFza0xpc3QsIHRhc2spIHtcclxuICAgIHRhc2tMaXN0LnB1c2godGFzayk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnJlbW92ZVRhc2sgPSBmdW5jdGlvbih0YXNrTGlzdCwgdGFzaykge1xyXG4gICAgdGFza0xpc3Quc3BsaWNlKHRhc2tMaXN0LmluZGV4T2YodGFzayksIDEpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zdGFydFByaW9yaXRpemluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgQ2F0ZWdvcmllc1N2Yy5zZXRQcmlvcml0eUxpc3QoJHNjb3BlLnNlbGVjdGVkVGFza3MpO1xyXG4gICAgJGxvY2F0aW9uLnBhdGgoJy9wcmlvcml0aXplJyk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmdldFF1ZXN0aW9ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCEkc2NvcGUuc2VsZWN0ZWRUYXNrcykgcmV0dXJuICcnO1xyXG4gICAgdmFyIGNvdW50ZXIgPSAwO1xyXG4gICAgZm9yICh2YXIgaSA9ICRzY29wZS5zZWxlY3RlZFRhc2tzLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcclxuICAgICAgY291bnRlciArPSBpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvdW50ZXI7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgVXNlclN2Yykge1xyXG5cclxuICAvLyBJbml0aWFsaXplIHRoZSBGaXJlYmFzZVVJIFdpZGdldCB1c2luZyBGaXJlYmFzZS5cclxuICB2YXIgdWkgPSBuZXcgZmlyZWJhc2V1aS5hdXRoLkF1dGhVSShmaXJlYmFzZS5hdXRoKCkpO1xyXG5cclxuICAkc2NvcGUuJG9uKCdsb2dvdXQnLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgdWkucmVzZXQoKTtcclxuICAgIHN0YXJ0VUkoKTtcclxuICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gc3RhcnRVSSgpIHtcclxuICAgIHVpLnN0YXJ0KCcjZmlyZWJhc2V1aS1hdXRoLWNvbnRhaW5lcicsIHtcclxuXHJcbiAgICAgIGNhbGxiYWNrczoge1xyXG4gICAgICAgIHNpZ25JblN1Y2Nlc3M6IGZ1bmN0aW9uKGN1cnJlbnRVc2VyLCBjcmVkZW50aWFsLCByZWRpcmVjdFVybCkge1xyXG4gICAgICAgICAgLy8gTm8gcmVkaXJlY3QuXHJcbiAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXIuZ2V0SWRUb2tlbih0cnVlKS50aGVuKGZ1bmN0aW9uKGlkVG9rZW4pIHtcclxuICAgICAgICAgICAgVXNlclN2Yy5hdXRoZW50aWNhdGUoe1xyXG4gICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBjdXJyZW50VXNlci5kaXNwbGF5TmFtZSxcclxuICAgICAgICAgICAgICBlbWFpbDogY3VycmVudFVzZXIuZW1haWwsXHJcbiAgICAgICAgICAgICAgcGhvdG9VUkw6IGN1cnJlbnRVc2VyLnBob3RvVVJMLFxyXG4gICAgICAgICAgICAgIGVtYWlsVmVyaWZpZWQ6IGN1cnJlbnRVc2VyLmVtYWlsVmVyaWZpZWQsXHJcbiAgICAgICAgICAgICAgaWRUb2tlbjogaWRUb2tlblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgJCgnI21vZGFsLWxvZ2luJykubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICAgICAgICAvLyRsb2NhdGlvbi5wYXRoKCcvJyk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3BvcHVwJywge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0xvZ2luIEZhaWxlZCcsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYWxlcnQtZGFuZ2VyJ1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gLi4uXHJcbiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICAgICAgICAvLyBIYW5kbGUgZXJyb3JcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIHNpZ25JbkZhaWx1cmUgY2FsbGJhY2sgbXVzdCBiZSBwcm92aWRlZCB0byBoYW5kbGUgbWVyZ2UgY29uZmxpY3RzIHdoaWNoXHJcbiAgICAgICAgLy8gb2NjdXIgd2hlbiBhbiBleGlzdGluZyBjcmVkZW50aWFsIGlzIGxpbmtlZCB0byBhbiBhbm9ueW1vdXMgdXNlci5cclxuICAgICAgICBzaWduSW5GYWlsdXJlOiBmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICAgICAgLy8gRm9yIG1lcmdlIGNvbmZsaWN0cywgdGhlIGVycm9yLmNvZGUgd2lsbCBiZVxyXG4gICAgICAgICAgLy8gJ2ZpcmViYXNldWkvYW5vbnltb3VzLXVwZ3JhZGUtbWVyZ2UtY29uZmxpY3QnLlxyXG4gICAgICAgICAgaWYgKGVycm9yLmNvZGUgIT0gJ2ZpcmViYXNldWkvYW5vbnltb3VzLXVwZ3JhZGUtbWVyZ2UtY29uZmxpY3QnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIFRoZSBjcmVkZW50aWFsIHRoZSB1c2VyIHRyaWVkIHRvIHNpZ24gaW4gd2l0aC5cclxuICAgICAgICAgIHZhciBjcmVkID0gZXJyb3IuY3JlZGVudGlhbDtcclxuICAgICAgICAgIC8vIENvcHkgZGF0YSBmcm9tIGFub255bW91cyB1c2VyIHRvIHBlcm1hbmVudCB1c2VyIGFuZCBkZWxldGUgYW5vbnltb3VzXHJcbiAgICAgICAgICAvLyB1c2VyLlxyXG4gICAgICAgICAgLy8gLi4uXHJcbiAgICAgICAgICAvLyBGaW5pc2ggc2lnbi1pbiBhZnRlciBkYXRhIGlzIGNvcGllZC5cclxuICAgICAgICAgIHJldHVybiBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aENyZWRlbnRpYWwoY3JlZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1aVNob3duOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIC8vIFRoZSB3aWRnZXQgaXMgcmVuZGVyZWQuXHJcbiAgICAgICAgICAvLyBIaWRlIHRoZSBsb2FkZXIuXHJcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9hZGVyJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHNpZ25JblN1Y2Nlc3NVcmw6ICcvaG9tZScsXHJcbiAgICAgIHNpZ25Jbk9wdGlvbnM6IFtcclxuICAgICAgICAvL2ZpcmViYXNlLmF1dGguRW1haWxBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQsXHJcbiAgICAgICAgZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQsXHJcbiAgICAgICAgZmlyZWJhc2UuYXV0aC5GYWNlYm9va0F1dGhQcm92aWRlci5QUk9WSURFUl9JRCxcclxuICAgICAgXSxcclxuXHJcbiAgICAgIC8vIFdpbGwgdXNlIHBvcHVwIGZvciBJRFAgUHJvdmlkZXJzIHNpZ24taW4gZmxvdyBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0LCByZWRpcmVjdC5cclxuICAgICAgc2lnbkluRmxvdzogJ3BvcHVwJyxcclxuICAgICAgLy8gT3RoZXIgY29uZmlnIG9wdGlvbnMuLi5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhcnRVSSgpO1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGZpbHRlciwgUG9zdHNTdmMpIHtcclxuXHJcbiAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XHJcbiAgICAgIFBvc3RzU3ZjLmNyZWF0ZSh7XHJcbiAgICAgICAgYm9keTogJHNjb3BlLnBvc3RCb2R5XHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHBvc3QpIHtcclxuICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBQb3N0c1N2Yy5mZXRjaCgpXHJcbiAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAkc2NvcGUucG9zdHMgPSByZXNwb25zZS5kYXRhO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUuJG9uKCd3czpuZXdfcG9zdCcsIGZ1bmN0aW9uIChfLCBwb3N0KSB7XHJcbiAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgUG9zdHNTdmMuZ2V0UG9zdChwb3N0KVxyXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1ByaW9yaXRpemVDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBDYXRlZ29yaWVzU3ZjKSB7XHJcblxyXG4gICRzY29wZS5wcmlvcml0eUxpc3QgPSBDYXRlZ29yaWVzU3ZjLmdldFByaW9yaXR5TGlzdCgpO1xyXG5cclxuICBpZiAoISRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvbGlzdHMnKTtcclxuICB9IGVsc2Uge1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24gPSAxO1xyXG4gICAgJHNjb3BlLmN1cnJlbnRRdWVzdGlvbiA9IDE7XHJcbiAgICAkc2NvcGUuZG9uZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgJHNjb3BlLm1ha2VDaG9pY2UgPSBmdW5jdGlvbihjaG9pY2UpIHtcclxuICAgIGZvciAodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZCA9PT0gJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24pIHtcclxuICAgICAgICAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSA9IGNob2ljZSA9PT0gMSA/ICRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2UgOiAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLnNlY29uZENob2ljZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uID09PSAkc2NvcGUuY3VycmVudFF1ZXN0aW9uKSB7XHJcbiAgICAgICRzY29wZS5jdXJyZW50UXVlc3Rpb24gPSAkc2NvcGUuY3VycmVudFF1ZXN0aW9uID09PSAkc2NvcGUucHJpb3JpdHlMaXN0Lmxlbmd0aCA/IDEgOiAkc2NvcGUuY3VycmVudFF1ZXN0aW9uICsgMTtcclxuICAgIH1cclxuICAgICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uID0gJHNjb3BlLmN1cnJlbnRRdWVzdGlvbjtcclxuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xyXG4gICAgZm9yIChpIGluICRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlID09PSAnJykge1xyXG4gICAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFmb3VuZCkge1xyXG4gICAgICAkKCcjcHJpb3JpdGl6ZUNob2ljZXMnKS5oaWRlKDMwMCk7XHJcbiAgICAgICRzY29wZS5kb25lID0gdHJ1ZTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0QnV0dG9uVmFsdWUgPSBmdW5jdGlvbihjaG9pY2UpIHtcclxuICAgIGlmICghJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5wcmlvcml0eUxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQgPT09ICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGNob2ljZSA9PT0gMSA/ICRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2UgOiAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLnNlY29uZENob2ljZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5zZWxlY3RRdWVzdGlvbiA9IGZ1bmN0aW9uKHF1ZXN0aW9uKSB7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbiA9IHF1ZXN0aW9uO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZXRGaWx0ZXJlZFByaW9yaXR5TGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCEkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIHJldHVybiAkc2NvcGUucHJpb3JpdHlMaXN0XHJcbiAgICAgIC5zb3J0KGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gYS5pZC1iLmlkOyB9KVxyXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uKHF1ZXN0aW9uKSB7IHJldHVybiBxdWVzdGlvbi5jaG9pY2UgIT09ICcnIHx8IHF1ZXN0aW9uLmlkID09PSAkc2NvcGUuY3VycmVudFF1ZXN0aW9uOyB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0Q2hvaWNlc01hZGUgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmICghJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICB2YXIgY2hvaWNlc01hZGUgPSAwO1xyXG4gICAgZm9yICh2YXIgaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIGlmICgkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSAhPT0gJycpIHtcclxuICAgICAgICBjaG9pY2VzTWFkZSsrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2hvaWNlc01hZGU7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmdldEJ1dHRvbkNsYXNzID0gZnVuY3Rpb24oY2hvaWNlKSB7XHJcbiAgICBpZiAoISRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIGlmICgkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkID09PSAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbikge1xyXG4gICAgICAgIGlmICgkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSA9PT0gJycpIHtcclxuICAgICAgICAgIHJldHVybiAnYnRuLXByaW1hcnknO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hvaWNlID09PSAxKSB7XHJcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZSA9PT0gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgPyAnYnRuLXN1Y2Nlc3MnIDogJ2J0bi1kYW5nZXInO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2UgPT09ICRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlID8gJ2J0bi1zdWNjZXNzJyA6ICdidG4tZGFuZ2VyJztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2hvd0Nob2ljZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICQoJyNwcmlvcml0aXplQ2hvaWNlcycpLnNob3coMTAwMCk7XHJcbiAgICAkKCcjcmV2aWV3Q2hvaWNlcycpLmhpZGUoKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuY2hhcnRDbGljayA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICAgIGlmICggJHNjb3BlLmNoYXJ0ICkge1xyXG4gICAgICAvLyBEaWZmZXJlbnQgbWV0aG9kcyBkZXBlbmRpbmcgb24gY2hhcnQgdHlwZVxyXG4gICAgICAvL2NvbnNvbGUubG9nKCAkc2NvcGUuY2hhcnQuZ2V0UG9pbnRzQXRFdmVudCggZXZlbnQgKSApOyAvLyBmb3IgUG9pbnRzXHJcbiAgICAgIGNvbnNvbGUubG9nKCAkc2NvcGUuY2hhcnQuZ2V0U2VnbWVudHNBdEV2ZW50KCBldmVudCApICk7IC8vIGZvciBTZWdtZW50c1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5zaG93UmVzdWx0cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICRzY29wZS5kYXRhID0gW107XHJcbiAgICAkc2NvcGUub3B0aW9ucyA9IHtcclxuICAgICAgLy8gU2V0cyB0aGUgY2hhcnQgdG8gYmUgcmVzcG9uc2l2ZVxyXG4gICAgICByZXNwb25zaXZlOiB0cnVlLFxyXG5cclxuICAgICAgLy9Cb29sZWFuIC0gV2hldGhlciB3ZSBzaG91bGQgc2hvdyBhIHN0cm9rZSBvbiBlYWNoIHNlZ21lbnRcclxuICAgICAgc2VnbWVudFNob3dTdHJva2UgOiB0cnVlLFxyXG5cclxuICAgICAgLy9TdHJpbmcgLSBUaGUgY29sb3VyIG9mIGVhY2ggc2VnbWVudCBzdHJva2VcclxuICAgICAgc2VnbWVudFN0cm9rZUNvbG9yIDogJyNmZmYnLFxyXG5cclxuICAgICAgLy9OdW1iZXIgLSBUaGUgd2lkdGggb2YgZWFjaCBzZWdtZW50IHN0cm9rZVxyXG4gICAgICBzZWdtZW50U3Ryb2tlV2lkdGggOiAyLFxyXG5cclxuICAgICAgLy9OdW1iZXIgLSBUaGUgcGVyY2VudGFnZSBvZiB0aGUgY2hhcnQgdGhhdCB3ZSBjdXQgb3V0IG9mIHRoZSBtaWRkbGVcclxuICAgICAgcGVyY2VudGFnZUlubmVyQ3V0b3V0IDogMCwgLy8gVGhpcyBpcyAwIGZvciBQaWUgY2hhcnRzXHJcblxyXG4gICAgICAvL051bWJlciAtIEFtb3VudCBvZiBhbmltYXRpb24gc3RlcHNcclxuICAgICAgYW5pbWF0aW9uU3RlcHMgOiAxMDAsXHJcblxyXG4gICAgICAvL1N0cmluZyAtIEFuaW1hdGlvbiBlYXNpbmcgZWZmZWN0XHJcbiAgICAgIGFuaW1hdGlvbkVhc2luZyA6ICdlYXNlT3V0Qm91bmNlJyxcclxuXHJcbiAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgd2UgYW5pbWF0ZSB0aGUgcm90YXRpb24gb2YgdGhlIERvdWdobnV0XHJcbiAgICAgIGFuaW1hdGVSb3RhdGUgOiB0cnVlLFxyXG5cclxuICAgICAgLy9Cb29sZWFuIC0gV2hldGhlciB3ZSBhbmltYXRlIHNjYWxpbmcgdGhlIERvdWdobnV0IGZyb20gdGhlIGNlbnRyZVxyXG4gICAgICBhbmltYXRlU2NhbGUgOiBmYWxzZSxcclxuXHJcbiAgICAgIC8vU3RyaW5nIC0gQSBsZWdlbmQgdGVtcGxhdGVcclxuICAgICAgbGVnZW5kVGVtcGxhdGUgOiAnPGgzIGNsYXNzPVwidGMtY2hhcnQtanMtbGVnZW5kXCIgc3R5bGU9XCJwYWRkaW5nOjVweFwiPjwlIGZvciAodmFyIGk9MDsgaTxzZWdtZW50cy5sZW5ndGg7IGkrKyl7JT48ZGl2IGNsYXNzPVwibGFiZWxcIiBzdHlsZT1cImZsb2F0OmxlZnQ7bWFyZ2luOjVweDtiYWNrZ3JvdW5kLWNvbG9yOjwlPXNlZ21lbnRzW2ldLmZpbGxDb2xvciU+XCI+PCVpZihzZWdtZW50c1tpXS5sYWJlbCl7JT48JT1zZWdtZW50c1tpXS5sYWJlbCU+PCV9JT48L2Rpdj48JX0lPjwvaDM+J1xyXG4gICAgfTtcclxuICAgIGZvciAodmFyIGkgaW4gQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzKSB7XHJcbiAgICAgIENhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS52b3RlcyA9IDA7XHJcbiAgICAgIGZvciAodmFyIGogaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICAgIGlmIChDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0ubmFtZSA9PT0gJHNjb3BlLnByaW9yaXR5TGlzdFtqXS5jaG9pY2UpIHtcclxuICAgICAgICAgIENhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS52b3RlcysrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYS52b3RlcyA8IGIudm90ZXM7IH0pO1xyXG4gICAgZm9yIChpIGluIENhdGVnb3JpZXNTdmMuY2hvaWNlcykge1xyXG4gICAgICAkc2NvcGUuZGF0YS5wdXNoKHtcclxuICAgICAgICB2YWx1ZTogQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzLFxyXG4gICAgICAgIGxhYmVsOiBDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0ubmFtZVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgICQoJyNwcmlvcml0aXplUmVzdWx0JykuaGlkZSgpO1xyXG4gICAgJCgnI3ByaW9yaXRpemVDaG9pY2VzJykuaGlkZSgpO1xyXG4gICAgJCgnI3ByaW9yaXR5UmVzdWx0cycpLnNob3coMTAwMCk7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1Byb2ZpbGVDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBVc2VyU3ZjKSB7XHJcblxyXG4gIGlmICghJHNjb3BlLmN1cnJlbnRVc2VyKSB7XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAkKCcjc2V4LWluZGljYXRvcicpLm9mZnNldCh7IGxlZnQ6ICgkc2NvcGUuY3VycmVudFVzZXIuZ2VuZGVyLnNleCAvIDIwMCAqICQoJyNzZXgnKS53aWR0aCgpKSArICQoJyNzZXgnKS5vZmZzZXQoKS5sZWZ0IH0pO1xyXG4gICAgJCgnI2lkZW50aXR5LWluZGljYXRvcicpLm9mZnNldCh7IGxlZnQ6ICgkc2NvcGUuY3VycmVudFVzZXIuZ2VuZGVyLmlkZW50aXR5IC8gMjAwICogJCgnI2lkZW50aXR5Jykud2lkdGgoKSkgKyAkKCcjaWRlbnRpdHknKS5vZmZzZXQoKS5sZWZ0IH0pO1xyXG4gIH1cclxuXHJcbiAgJHNjb3BlLnNleGVzID0gW1xyXG4gICAgJ01hbGUnLFxyXG4gICAgJ0Z0TSBNYWxlJyxcclxuICAgICdJbnRlcnNleCcsXHJcbiAgICAnTXRGIEZlbWFsZScsXHJcbiAgICAnRmVtYWxlJ1xyXG4gIF07XHJcbiAgJHNjb3BlLmlkZW50aXRpZXMgPSBbXHJcbiAgICAnTWFuJyxcclxuICAgICdCaWdlbmRlcicsXHJcbiAgICAnUGFuZ2VuZGVyJyxcclxuICAgICdBZ2VuZGVyJyxcclxuICAgICdQb2x5Z2VuZGVyJyxcclxuICAgICdHZW5kZXJmbHVpZCcsXHJcbiAgICAnR2VuZGVycXVlZXInLFxyXG4gICAgJ1F1ZWVyJyxcclxuICAgICdXb21hbidcclxuICBdO1xyXG5cclxuICAkc2NvcGUuZGF0ZU9wdGlvbnMgPSB7XHJcbiAgICBtYXhEYXRlOiBuZXcgRGF0ZSgpLFxyXG4gICAgbWluRGF0ZTogbmV3IERhdGUoMTkwMCwgMSwgMSksXHJcbiAgICBpbml0RGF0ZTogbmV3IERhdGUoMjAwMCwgMSwgMSksXHJcbiAgICBkYXRlcGlja2VyTW9kZTogJ3llYXInXHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmdlbmRlciA9IGZ1bmN0aW9uKGFycmF5LCBwZXJjZW50YWdlKSB7XHJcbiAgICByZXR1cm4gYXJyYXlbTWF0aC5yb3VuZChwZXJjZW50YWdlIC8gMjAwICogKGFycmF5Lmxlbmd0aCAtIDEpKV07XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnN0YXJ0U2xpZGVyID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gIH07XHJcbiAgJHNjb3BlLmRyYWdTbGlkZXIgPSBmdW5jdGlvbihldmVudCwgdWksIHR5cGUpIHtcclxuICAgICRzY29wZS5jdXJyZW50VXNlci5nZW5kZXJbdHlwZV0gPSBNYXRoLnJvdW5kKCgkKCcjJyArIHR5cGUgKyAnLWluZGljYXRvcicpLm9mZnNldCgpLmxlZnQgLSAkKCcjJyArIHR5cGUpLm9mZnNldCgpLmxlZnQpIC8gKCQoJyMnICsgdHlwZSkud2lkdGgoKSAtICQoJyMnICsgdHlwZSArICctaW5kaWNhdG9yJykud2lkdGgoKSkgKiAyMDApO1xyXG4gICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gIH07XHJcbiAgJHNjb3BlLnN0b3BTbGlkZXIgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnVzZXJuYW1lVG9nZ2xlID0gdHJ1ZTtcclxuICAkc2NvcGUucGFzc3dvcmRUb2dnbGUgPSB0cnVlO1xyXG5cclxuICAkc2NvcGUudG9nZ2xlVXNlcm5hbWUgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS51c2VybmFtZVRvZ2dsZSA9ICEkc2NvcGUudXNlcm5hbWVUb2dnbGU7XHJcbiAgICAkc2NvcGUubmV3VXNlcm5hbWUgPSAkc2NvcGUuY3VycmVudFVzZXIudXNlcm5hbWU7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnRvZ2dsZVBhc3N3b3JkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkc2NvcGUubmV3UGFzc3dvcmQgPSBudWxsO1xyXG4gICAgJHNjb3BlLmNvbmZpcm1QYXNzd29yZCA9IG51bGw7XHJcbiAgICAkc2NvcGUucGFzc3dvcmRUb2dnbGUgPSAhJHNjb3BlLnBhc3N3b3JkVG9nZ2xlO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5jaGVja1Bhc3N3b3JkID0gZnVuY3Rpb24gKHBhc3N3b3JkKSB7XHJcbiAgICBpZiAocGFzc3dvcmQpIHtcclxuICAgICAgdmFyIHVzZXIgPSAkc2NvcGUuY3VycmVudFVzZXIuX2lkO1xyXG4gICAgICBVc2VyU3ZjLmNoZWNrUGFzc3dvcmQodXNlciwgcGFzc3dvcmQpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICRzY29wZS50b2dnbGVQYXNzd29yZCgpO1xyXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsQmcgPSAkKFwiLnBhc3N3b3JkXCIpLmNzcyhcImJhY2tncm91bmRDb2xvclwiKTtcclxuICAgICAgICAkKFwiLnBhc3N3b3JkXCIpLmFuaW1hdGUoeyBiYWNrZ3JvdW5kQ29sb3I6IFwiI0ZGQjZDMVwiIH0sIDIwMCkuYW5pbWF0ZSh7IGJhY2tncm91bmRDb2xvcjogb3JpZ2luYWxCZyB9LCAyMDApO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkc2NvcGUuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbiAob2xkUGFzc3dvcmQsIG5ld1Bhc3N3b3JkLCBjb25maXJtUGFzc3dvcmQpIHtcclxuICAgIGlmIChuZXdQYXNzd29yZCkge1xyXG4gICAgICBpZiAobmV3UGFzc3dvcmQgPT0gY29uZmlybVBhc3N3b3JkKSB7XHJcbiAgICAgICAgdmFyIHVzZXIgPSAkc2NvcGUuY3VycmVudFVzZXIuX2lkO1xyXG4gICAgICAgIFVzZXJTdmMuY2hhbmdlUGFzc3dvcmQodXNlciwgb2xkUGFzc3dvcmQsIG5ld1Bhc3N3b3JkKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgJHNjb3BlLiRlbWl0KCdwb3B1cCcsIHtcclxuICAgICAgICAgICAgbWVzc2FnZTogJ1Bhc3N3b3JkIENoYW5nZWQnLFxyXG4gICAgICAgICAgICB0eXBlOiAnYWxlcnQtc3VjY2VzcydcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgJHNjb3BlLm9sZFBhc3N3b3JkID0gbnVsbDtcclxuICAgICAgICAgICRzY29wZS50b2dnbGVQYXNzd29yZCgpO1xyXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICRzY29wZS4kZW1pdCgncG9wdXAnLCB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdQYXNzd29yZCBDaGFuZ2UgRmFpbGVkJyxcclxuICAgICAgICAgICAgdHlwZTogJ2FsZXJ0LWRhbmdlcidcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBvcmlnaW5hbEJnID0gJChcIi5wYXNzd29yZFwiKS5jc3MoXCJiYWNrZ3JvdW5kQ29sb3JcIik7XHJcbiAgICAgICAgJChcIi5wYXNzd29yZFwiKS5hbmltYXRlKHsgYmFja2dyb3VuZENvbG9yOiBcIiNGRkI2QzFcIiB9LCAyMDApLmFuaW1hdGUoeyBiYWNrZ3JvdW5kQ29sb3I6IG9yaWdpbmFsQmcgfSwgMjAwKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5jaGFuZ2VVc2VybmFtZSA9IGZ1bmN0aW9uICh1c2VybmFtZSkge1xyXG4gICAgJHNjb3BlLiRlbWl0KCdsb2FkaW5nJyk7XHJcbiAgICBVc2VyU3ZjLmNoYW5nZVVzZXJuYW1lKCRzY29wZS5jdXJyZW50VXNlci5faWQsIHVzZXJuYW1lKVxyXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICRzY29wZS4kZW1pdCgndXBkYXRlJywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAkc2NvcGUuJGVtaXQoJ3BvcHVwJywge1xyXG4gICAgICAgIG1lc3NhZ2U6IHVzZXJuYW1lICsgJyBhbHJlYWR5IGluIHVzZScsXHJcbiAgICAgICAgdHlwZTogJ2FsZXJ0LWRhbmdlcidcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUudXBkYXRlVXNlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICgkc2NvcGUuY3VycmVudFVzZXIpIHsgIFxyXG4gICAgICAkc2NvcGUuJGVtaXQoJ2xvYWRpbmcnKTtcclxuICAgICAgVXNlclN2Yy51cGRhdGVVc2VyKCRzY29wZS5jdXJyZW50VXNlcilcclxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgJHNjb3BlLiRlbWl0KCd1cGRhdGUnLCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcblxyXG4gICRzY29wZS4kd2F0Y2goJ2N1cnJlbnRVc2VyLmZsYWdzLmxlbmd0aCcsIGZ1bmN0aW9uKGxlbmd0aCkge1xyXG4gICAgJHNjb3BlLnVwZGF0ZVVzZXIoKTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLmxvYWRDb3VudHJpZXMgPSBmdW5jdGlvbigkcXVlcnkpIHtcclxuICAgIHZhciBjb3VudHJpZXMgPSBbXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQW5kb3JyYVwiLCBcImZsYWdcIjogXCJmbGFnLWFkXCIsIFwidGlkYml0XCI6IFwiXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVbml0ZWQgQXJhYiBFbWlyYXRlc1wiLCBcImZsYWdcIjogXCJmbGFnLWFlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBZmdoYW5pc3RhblwiLCBcImZsYWdcIjogXCJmbGFnLWFmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbnRpZ3VhIGFuZCBCYXJidWRhXCIsIFwiZmxhZ1wiOiBcImZsYWctYWdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFuZ3VpbGxhXCIsIFwiZmxhZ1wiOiBcImZsYWctYWlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFsYmFuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hbFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQXJtZW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLWFtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbmdvbGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQW50YXJjdGljYVwiLCBcImZsYWdcIjogXCJmbGFnLWFxXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBcmdlbnRpbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQW1lcmljYW4gU29tb2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1hc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQXVzdHJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWF0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBdXN0cmFsaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hdVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQXJ1YmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hd1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiw4VsYW5kIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1heFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQXplcmJhaWphblwiLCBcImZsYWdcIjogXCJmbGFnLWF6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCb3NuaWEgYW5kIEhlcnplZ292aW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctYmFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJhcmJhZG9zXCIsIFwiZmxhZ1wiOiBcImZsYWctYmJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJhbmdsYWRlc2hcIiwgXCJmbGFnXCI6IFwiZmxhZy1iZFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmVsZ2l1bVwiLCBcImZsYWdcIjogXCJmbGFnLWJlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCdXJraW5hIEZhc29cIiwgXCJmbGFnXCI6IFwiZmxhZy1iZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQnVsZ2FyaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1iZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmFocmFpblwiLCBcImZsYWdcIjogXCJmbGFnLWJoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCdXJ1bmRpXCIsIFwiZmxhZ1wiOiBcImZsYWctYmlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJlbmluXCIsIFwiZmxhZ1wiOiBcImZsYWctYmpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IEJhcnRow6lsZW15XCIsIFwiZmxhZ1wiOiBcImZsYWctYmxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJlcm11ZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1ibVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQnJ1bmVpIFwiLCBcImZsYWdcIjogXCJmbGFnLWJuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCb2xpdmlhLCBQbHVyaW5hdGlvbmFsIFN0YXRlIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctYm9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJvbmFpcmUsIFNpbnQgRXVzdGF0aXVzIGFuZCBTYWJhXCIsIFwiZmxhZ1wiOiBcImZsYWctYnFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJyYXppbFwiLCBcImZsYWdcIjogXCJmbGFnLWJyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCYWhhbWFzXCIsIFwiZmxhZ1wiOiBcImZsYWctYnNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJodXRhblwiLCBcImZsYWdcIjogXCJmbGFnLWJ0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCb3V2ZXQgSXNsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctYnZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJvdHN3YW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctYndcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJlbGFydXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1ieVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmVsaXplXCIsIFwiZmxhZ1wiOiBcImZsYWctYnpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNhbmFkYVwiLCBcImZsYWdcIjogXCJmbGFnLWNhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb2NvcyAoS2VlbGluZykgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWNjXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb25nbywgdGhlIERlbW9jcmF0aWMgUmVwdWJsaWMgb2YgdGhlXCIsIFwiZmxhZ1wiOiBcImZsYWctY2RcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNlbnRyYWwgQWZyaWNhbiBSZXB1YmxpY1wiLCBcImZsYWdcIjogXCJmbGFnLWNmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb25nb1wiLCBcImZsYWdcIjogXCJmbGFnLWNnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTd2l0emVybGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWNoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDw7R0ZSBkJ0l2b2lyZVwiLCBcImZsYWdcIjogXCJmbGFnLWNpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb29rIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1ja1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2hpbGVcIiwgXCJmbGFnXCI6IFwiZmxhZy1jbFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2FtZXJvb25cIiwgXCJmbGFnXCI6IFwiZmxhZy1jbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2hpbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1jblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29sb21iaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1jb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29zdGEgUmljYVwiLCBcImZsYWdcIjogXCJmbGFnLWNyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDdWJhXCIsIFwiZmxhZ1wiOiBcImZsYWctY3VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNhYm8gVmVyZGVcIiwgXCJmbGFnXCI6IFwiZmxhZy1jdlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ3VyYcOnYW9cIiwgXCJmbGFnXCI6IFwiZmxhZy1jd1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2hyaXN0bWFzIElzbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWN4XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDeXBydXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1jeVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ3plY2ggUmVwdWJsaWNcIiwgXCJmbGFnXCI6IFwiZmxhZy1jelwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR2VybWFueVwiLCBcImZsYWdcIjogXCJmbGFnLWRlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJEamlib3V0aVwiLCBcImZsYWdcIjogXCJmbGFnLWRqXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJEZW5tYXJrXCIsIFwiZmxhZ1wiOiBcImZsYWctZGtcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkRvbWluaWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctZG1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkRvbWluaWNhbiBSZXB1YmxpY1wiLCBcImZsYWdcIjogXCJmbGFnLWRvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbGdlcmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctZHpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVjdWFkb3JcIiwgXCJmbGFnXCI6IFwiZmxhZy1lY1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRXN0b25pYVwiLCBcImZsYWdcIjogXCJmbGFnLWVlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFZ3lwdFwiLCBcImZsYWdcIjogXCJmbGFnLWVnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJXZXN0ZXJuIFNhaGFyYVwiLCBcImZsYWdcIjogXCJmbGFnLWVoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFcml0cmVhXCIsIFwiZmxhZ1wiOiBcImZsYWctZXJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNwYWluXCIsIFwiZmxhZ1wiOiBcImZsYWctZXNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkV0aGlvcGlhXCIsIFwiZmxhZ1wiOiBcImZsYWctZXRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZpbmxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1maVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRmlqaVwiLCBcImZsYWdcIjogXCJmbGFnLWZqXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGYWxrbGFuZCBJc2xhbmRzIChNYWx2aW5hcylcIiwgXCJmbGFnXCI6IFwiZmxhZy1ma1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWljcm9uZXNpYSwgRmVkZXJhdGVkIFN0YXRlcyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLWZtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGYXJvZSBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctZm9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZyYW5jZVwiLCBcImZsYWdcIjogXCJmbGFnLWZyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHYWJvblwiLCBcImZsYWdcIjogXCJmbGFnLWdhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVbml0ZWQgS2luZ2RvbSBvZiBHcmVhdCBCcml0YWluIGFuZCBOb3J0aGVybiBJcmVsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdyZW5hZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1nZFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR2VvcmdpYVwiLCBcImZsYWdcIjogXCJmbGFnLWdlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGcmVuY2ggR3VpYW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1ZXJuc2V5XCIsIFwiZmxhZ1wiOiBcImZsYWctZ2dcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdoYW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2hcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdpYnJhbHRhclwiLCBcImZsYWdcIjogXCJmbGFnLWdpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHcmVlbmxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1nbFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR2FtYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ21cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1aW5lYVwiLCBcImZsYWdcIjogXCJmbGFnLWduXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdWFkZWxvdXBlXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3BcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVxdWF0b3JpYWwgR3VpbmVhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3FcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdyZWVjZVwiLCBcImZsYWdcIjogXCJmbGFnLWdyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTb3V0aCBHZW9yZ2lhIGFuZCB0aGUgU291dGggU2FuZHdpY2ggSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWdzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdWF0ZW1hbGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1ndFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3VhbVwiLCBcImZsYWdcIjogXCJmbGFnLWd1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdWluZWEtQmlzc2F1XCIsIFwiZmxhZ1wiOiBcImZsYWctZ3dcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1eWFuYVwiLCBcImZsYWdcIjogXCJmbGFnLWd5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIb25nIEtvbmdcIiwgXCJmbGFnXCI6IFwiZmxhZy1oa1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSGVhcmQgSXNsYW5kIGFuZCBNY0RvbmFsZCBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctaG1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkhvbmR1cmFzXCIsIFwiZmxhZ1wiOiBcImZsYWctaG5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNyb2F0aWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1oclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSGFpdGlcIiwgXCJmbGFnXCI6IFwiZmxhZy1odFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSHVuZ2FyeVwiLCBcImZsYWdcIjogXCJmbGFnLWh1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJbmRvbmVzaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1pZFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSXJlbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWllXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJc3JhZWxcIiwgXCJmbGFnXCI6IFwiZmxhZy1pbFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSXNsZSBvZiBNYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1pbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSW5kaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1pblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQnJpdGlzaCBJbmRpYW4gT2NlYW4gVGVycml0b3J5XCIsIFwiZmxhZ1wiOiBcImZsYWctaW9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIklyYXFcIiwgXCJmbGFnXCI6IFwiZmxhZy1pcVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSXJhbiwgSXNsYW1pYyBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLWlyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJY2VsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctaXNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkl0YWx5XCIsIFwiZmxhZ1wiOiBcImZsYWctaXRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkplcnNleVwiLCBcImZsYWdcIjogXCJmbGFnLWplXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJKYW1haWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctam1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkpvcmRhblwiLCBcImZsYWdcIjogXCJmbGFnLWpvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJKYXBhblwiLCBcImZsYWdcIjogXCJmbGFnLWpwXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLZW55YVwiLCBcImZsYWdcIjogXCJmbGFnLWtlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLeXJneXpzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWcta2dcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNhbWJvZGlhXCIsIFwiZmxhZ1wiOiBcImZsYWcta2hcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIktpcmliYXRpXCIsIFwiZmxhZ1wiOiBcImZsYWcta2lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvbW9yb3NcIiwgXCJmbGFnXCI6IFwiZmxhZy1rbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgS2l0dHMgYW5kIE5ldmlzXCIsIFwiZmxhZ1wiOiBcImZsYWcta25cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIktvcmVhLCBEZW1vY3JhdGljIFBlb3BsZSdzIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWcta3BcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIktvcmVhLCBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLWtyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLdXdhaXRcIiwgXCJmbGFnXCI6IFwiZmxhZy1rd1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2F5bWFuIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1reVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS2F6YWtoc3RhblwiLCBcImZsYWdcIjogXCJmbGFnLWt6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMYW8gUGVvcGxlJ3MgRGVtb2NyYXRpYyBSZXB1YmxpY1wiLCBcImZsYWdcIjogXCJmbGFnLWxhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMZWJhbm9uXCIsIFwiZmxhZ1wiOiBcImZsYWctbGJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IEx1Y2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctbGNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxpZWNodGVuc3RlaW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1saVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3JpIExhbmthXCIsIFwiZmxhZ1wiOiBcImZsYWctbGtcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxpYmVyaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1sclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGVzb3Rob1wiLCBcImZsYWdcIjogXCJmbGFnLWxzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMaXRodWFuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1sdFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTHV4ZW1ib3VyZ1wiLCBcImZsYWdcIjogXCJmbGFnLWx1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMYXR2aWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1sdlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGlieWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1seVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTW9yb2Njb1wiLCBcImZsYWdcIjogXCJmbGFnLW1hXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb25hY29cIiwgXCJmbGFnXCI6IFwiZmxhZy1tY1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTW9sZG92YSwgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1tZFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTW9udGVuZWdyb1wiLCBcImZsYWdcIjogXCJmbGFnLW1lXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBNYXJ0aW4gKEZyZW5jaCBwYXJ0KVwiLCBcImZsYWdcIjogXCJmbGFnLW1mXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWRhZ2FzY2FyXCIsIFwiZmxhZ1wiOiBcImZsYWctbWdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hcnNoYWxsIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1taFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFjZWRvbmlhLCB0aGUgZm9ybWVyIFl1Z29zbGF2IFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctbWtcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hbGlcIiwgXCJmbGFnXCI6IFwiZmxhZy1tbFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTXlhbm1hclwiLCBcImZsYWdcIjogXCJmbGFnLW1tXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb25nb2xpYVwiLCBcImZsYWdcIjogXCJmbGFnLW1uXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWNhb1wiLCBcImZsYWdcIjogXCJmbGFnLW1vXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOb3J0aGVybiBNYXJpYW5hIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1tcFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFydGluaXF1ZVwiLCBcImZsYWdcIjogXCJmbGFnLW1xXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYXVyaXRhbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbXJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vbnRzZXJyYXRcIiwgXCJmbGFnXCI6IFwiZmxhZy1tc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFsdGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1tdFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWF1cml0aXVzXCIsIFwiZmxhZ1wiOiBcImZsYWctbXVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hbGRpdmVzXCIsIFwiZmxhZ1wiOiBcImZsYWctbXZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hbGF3aVwiLCBcImZsYWdcIjogXCJmbGFnLW13XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNZXhpY29cIiwgXCJmbGFnXCI6IFwiZmxhZy1teFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFsYXlzaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1teVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTW96YW1iaXF1ZVwiLCBcImZsYWdcIjogXCJmbGFnLW16XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOYW1pYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbmFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5ldyBDYWxlZG9uaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1uY1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmlnZXJcIiwgXCJmbGFnXCI6IFwiZmxhZy1uZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTm9yZm9sayBJc2xhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1uZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmlnZXJpYVwiLCBcImZsYWdcIjogXCJmbGFnLW5nXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOaWNhcmFndWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1uaVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmV0aGVybGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1ubFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTm9yd2F5XCIsIFwiZmxhZ1wiOiBcImZsYWctbm9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5lcGFsXCIsIFwiZmxhZ1wiOiBcImZsYWctbnBcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5hdXJ1XCIsIFwiZmxhZ1wiOiBcImZsYWctbnJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5pdWVcIiwgXCJmbGFnXCI6IFwiZmxhZy1udVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmV3IFplYWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1uelwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiT21hblwiLCBcImZsYWdcIjogXCJmbGFnLW9tXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQYW5hbWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1wYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGVydVwiLCBcImZsYWdcIjogXCJmbGFnLXBlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGcmVuY2ggUG9seW5lc2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctcGZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhcHVhIE5ldyBHdWluZWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1wZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGhpbGlwcGluZXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1waFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGFraXN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1wa1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUG9sYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctcGxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IFBpZXJyZSBhbmQgTWlxdWVsb25cIiwgXCJmbGFnXCI6IFwiZmxhZy1wbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGl0Y2Fpcm5cIiwgXCJmbGFnXCI6IFwiZmxhZy1wblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUHVlcnRvIFJpY29cIiwgXCJmbGFnXCI6IFwiZmxhZy1wclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGFsZXN0aW5lLCBTdGF0ZSBvZlwiLCBcImZsYWdcIjogXCJmbGFnLXBzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQb3J0dWdhbFwiLCBcImZsYWdcIjogXCJmbGFnLXB0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQYWxhdVwiLCBcImZsYWdcIjogXCJmbGFnLXB3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQYXJhZ3VheVwiLCBcImZsYWdcIjogXCJmbGFnLXB5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJRYXRhclwiLCBcImZsYWdcIjogXCJmbGFnLXFhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJSw6l1bmlvblwiLCBcImZsYWdcIjogXCJmbGFnLXJlXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJSb21hbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctcm9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNlcmJpYVwiLCBcImZsYWdcIjogXCJmbGFnLXJzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJSdXNzaWFuIEZlZGVyYXRpb25cIiwgXCJmbGFnXCI6IFwiZmxhZy1ydVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUndhbmRhXCIsIFwiZmxhZ1wiOiBcImZsYWctcndcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhdWRpIEFyYWJpYVwiLCBcImZsYWdcIjogXCJmbGFnLXNhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTb2xvbW9uIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1zYlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2V5Y2hlbGxlc1wiLCBcImZsYWdcIjogXCJmbGFnLXNjXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTdWRhblwiLCBcImZsYWdcIjogXCJmbGFnLXNkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTd2VkZW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1zZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2luZ2Fwb3JlXCIsIFwiZmxhZ1wiOiBcImZsYWctc2dcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IEhlbGVuYSwgQXNjZW5zaW9uIGFuZCBUcmlzdGFuIGRhIEN1bmhhXCIsIFwiZmxhZ1wiOiBcImZsYWctc2hcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNsb3ZlbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctc2lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN2YWxiYXJkIGFuZCBKYW4gTWF5ZW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1zalwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2xvdmFraWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1za1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2llcnJhIExlb25lXCIsIFwiZmxhZ1wiOiBcImZsYWctc2xcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhbiBNYXJpbm9cIiwgXCJmbGFnXCI6IFwiZmxhZy1zbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2VuZWdhbFwiLCBcImZsYWdcIjogXCJmbGFnLXNuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTb21hbGlhXCIsIFwiZmxhZ1wiOiBcImZsYWctc29cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN1cmluYW1lXCIsIFwiZmxhZ1wiOiBcImZsYWctc3JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNvdXRoIFN1ZGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctc3NcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhbyBUb21lIGFuZCBQcmluY2lwZVwiLCBcImZsYWdcIjogXCJmbGFnLXN0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFbCBTYWx2YWRvclwiLCBcImZsYWdcIjogXCJmbGFnLXN2XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTaW50IE1hYXJ0ZW4gKER1dGNoIHBhcnQpXCIsIFwiZmxhZ1wiOiBcImZsYWctc3hcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN5cmlhbiBBcmFiIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctc3lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlN3YXppbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLXN6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdXJrcyBhbmQgQ2FpY29zIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy10Y1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ2hhZFwiLCBcImZsYWdcIjogXCJmbGFnLXRkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGcmVuY2ggU291dGhlcm4gVGVycml0b3JpZXNcIiwgXCJmbGFnXCI6IFwiZmxhZy10ZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVG9nb1wiLCBcImZsYWdcIjogXCJmbGFnLXRnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUaGFpbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLXRoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUYWppa2lzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctdGpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRva2VsYXVcIiwgXCJmbGFnXCI6IFwiZmxhZy10a1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVGltb3ItTGVzdGVcIiwgXCJmbGFnXCI6IFwiZmxhZy10bFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVHVya21lbmlzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctdG1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlR1bmlzaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy10blwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVG9uZ2FcIiwgXCJmbGFnXCI6IFwiZmxhZy10b1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVHVya2V5XCIsIFwiZmxhZ1wiOiBcImZsYWctdHJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRyaW5pZGFkIGFuZCBUb2JhZ29cIiwgXCJmbGFnXCI6IFwiZmxhZy10dFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVHV2YWx1XCIsIFwiZmxhZ1wiOiBcImZsYWctdHZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRhaXdhbiwgUHJvdmluY2Ugb2YgQ2hpbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy10d1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVGFuemFuaWEsIFVuaXRlZCBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLXR6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVa3JhaW5lXCIsIFwiZmxhZ1wiOiBcImZsYWctdWFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVnYW5kYVwiLCBcImZsYWdcIjogXCJmbGFnLXVnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVbml0ZWQgU3RhdGVzIE1pbm9yIE91dGx5aW5nIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy11bVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhXCIsIFwiZmxhZ1wiOiBcImZsYWctdXNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVydWd1YXlcIiwgXCJmbGFnXCI6IFwiZmxhZy11eVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVXpiZWtpc3RhblwiLCBcImZsYWdcIjogXCJmbGFnLXV6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIb2x5IFNlZVwiLCBcImZsYWdcIjogXCJmbGFnLXZhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBWaW5jZW50IGFuZCB0aGUgR3JlbmFkaW5lc1wiLCBcImZsYWdcIjogXCJmbGFnLXZjXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJWZW5lenVlbGEsIEJvbGl2YXJpYW4gUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy12ZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVmlyZ2luIElzbGFuZHMsIEJyaXRpc2hcIiwgXCJmbGFnXCI6IFwiZmxhZy12Z1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVmlyZ2luIElzbGFuZHMsIFUuUy5cIiwgXCJmbGFnXCI6IFwiZmxhZy12aVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVmlldCBOYW1cIiwgXCJmbGFnXCI6IFwiZmxhZy12blwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVmFudWF0dVwiLCBcImZsYWdcIjogXCJmbGFnLXZ1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJXYWxsaXMgYW5kIEZ1dHVuYVwiLCBcImZsYWdcIjogXCJmbGFnLXdmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYW1vYVwiLCBcImZsYWdcIjogXCJmbGFnLXdzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJZZW1lblwiLCBcImZsYWdcIjogXCJmbGFnLXllXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYXlvdHRlXCIsIFwiZmxhZ1wiOiBcImZsYWcteXRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNvdXRoIEFmcmljYVwiLCBcImZsYWdcIjogXCJmbGFnLXphXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJaYW1iaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy16bVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiWmltYmFid2VcIiwgXCJmbGFnXCI6IFwiZmxhZy16d1wiIH0sXHJcbiAgICBdO1xyXG4gICAgcmV0dXJuIGNvdW50cmllcy5maWx0ZXIoZnVuY3Rpb24oY291bnRyeSkge1xyXG4gICAgICByZXR1cm4gY291bnRyeS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigkcXVlcnkudG9Mb3dlckNhc2UoKSkgIT0gLTE7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1NraWxsc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkd2luZG93KSB7XHJcblxyXG4gICRzY29wZS5zZWxlY3RlZFNraWxsID0gMDtcclxuICAkc2NvcGUuc2tpbGxzVmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAkc2NvcGUubGFiZWxzID0gW1wiRG93bmxvYWQgU2FsZXNcIiwgXCJJbi1TdG9yZSBTYWxlc1wiLCBcIk1haWwtT3JkZXIgU2FsZXNcIl07XHJcbiAgJHNjb3BlLmRhdGEgPSBbMzAwLCA1MDAsIDEwMF07XHJcblxyXG4gICQuZ2V0SlNPTignL3NraWxscy5qc29uJywgZnVuY3Rpb24oIGRhdGEgKSB7XHJcbiAgICAkc2NvcGUuc2tpbGxzID0gZGF0YS5maWx0ZXIoZnVuY3Rpb24oc2tpbGwpIHtcclxuICAgICAgcmV0dXJuIHNraWxsLmVuYWJsZWQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuc2V0U2VsZWN0ZWRTa2lsbCA9IGZ1bmN0aW9uIChza2lsbCkge1xyXG4gICAgICAkc2NvcGUuc2VsZWN0ZWRTa2lsbCA9IHNraWxsO1xyXG4gICAgICAkc2NvcGUuc2VsZWN0ZWRTa2lsbC5jaGFydE9wdGlvbnMgPSB7XHJcbiAgICAgICAgY3V0b3V0UGVyY2VudGFnZSA6IDgwLFxyXG4gICAgICAgIGNpcmN1bWZlcmVuY2U6IDIgKiBNYXRoLlBJLFxyXG4gICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IHRydWUsXHJcbiAgICAgICAgdG9vbHRpcHM6IHtcclxuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgICAkc2NvcGUuc2VsZWN0ZWRTa2lsbC5jaGFydFN0eWxlID0ge1xyXG4gICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogJ3VybCgvc2tpbGxzLycgKyAkc2NvcGUuc2VsZWN0ZWRTa2lsbC5pbWFnZSArICcpJyxcclxuICAgICAgICAnYmFja2dyb3VuZC1yZXBlYXQnOiAnbm8tcmVwZWF0JyxcclxuICAgICAgICAnYmFja2dyb3VuZC1zaXplJzogJzYwJScsXHJcbiAgICAgICAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiAnNTAlIDUwJSdcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnNldFNlbGVjdGVkU2tpbGwoJHNjb3BlLnNraWxsc1swXSk7XHJcblxyXG4gICAgLypcclxuICAgIGhhbGYgY2lyY2xlIHNraWxsIHdoZWVsIHRoYXQgZGlkbid0IHR1cm4gb3V0IGdyZWF0XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBkaXNwbGF5OiAkc2NvcGUuc2tpbGxzVmlzaWJsZSA/ICdibG9jaycgOiAnbm9uZScsXHJcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICBsZWZ0OiAkc2NvcGUud2hlZWxXaWR0aCAvIDIgKiBNYXRoLmNvcyhpICogKE1hdGguUEkgLyAoJHNjb3BlLnNraWxscy5sZW5ndGggLSAxKSkpICsgJHNjb3BlLndoZWVsV2lkdGggLyAyIC0gJHNjb3BlLndoZWVsV2lkdGggKiAwLjAyNSxcclxuICAgICAgdG9wOiBNYXRoLnNpbihpICogKE1hdGguUEkgLyAoJHNjb3BlLnNraWxscy5sZW5ndGggLSAxKSkpICogJCgnLnNlbGVjdGVkLXNraWxsJykuaGVpZ2h0KCkgKiAyLjUsXHJcbiAgICAgIHdpZHRoOiAkc2NvcGUud2hlZWxXaWR0aCAqIDAuMDUsXHJcbiAgICAgIGhlaWdodDogJHNjb3BlLndoZWVsV2lkdGggKiAwLjA1XHJcbiAgICB9O1xyXG4gICAgKi9cclxuXHJcbiAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgfSk7XHJcblxyXG59KTtcclxuIiwiLypqc2xpbnQgZXN2ZXJzaW9uOiA2Ki9cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi8vQW5ndWxhckpzIGNhbid0IGhhdmUgYW4gYXJyb3cgZnVuY3Rpb24gaGVyZVxyXG4uY29udHJvbGxlcignVGVuVGhpbmdzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgQm90c1N2Yykge1xyXG5cclxuICAkc2NvcGUuY2F0ZWdvcmllcyA9IFtcclxuICAgICdNdXNpYycsXHJcbiAgICAnVGVsZXZpc2lvbicsXHJcbiAgICAnTW92aWVzJyxcclxuICAgICdFbnRlcnRhaW5tZW50JyxcclxuICAgIC8vJ0N1bHR1cmUnLFxyXG4gICAgJ0dlb2dyYXBoeScsXHJcbiAgICAnSGlzdG9yeScsXHJcbiAgICAnU2NpZW5jZScsXHJcbiAgICAnR2FtaW5nJyxcclxuICAgICdTcG9ydHMnLFxyXG4gICAgJ1JlbGlnaW9uJyxcclxuICAgICdBcnQnLFxyXG4gICAgJ0xpdGVyYXR1cmUnLFxyXG4gICAgJ01pc2MnLFxyXG4gICAgJ0Z1bm55JyxcclxuICAgICdGb29kIGFuZCBEcmluaycsXHJcbiAgICAnU29jaWV0eScsXHJcbiAgICAnTmF0dXJlJyxcclxuICAgICdUZWNobm9sb2d5JyxcclxuICAgICdMYW5ndWFnZScsXHJcbiAgICAnQnVzaW5lc3MnLFxyXG4gICAgJ0ludGVybmV0J1xyXG4gIF07XHJcbiAgJHNjb3BlLmtleURvd24gPSBlID0+IHtcclxuICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcclxuICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XHJcbiAgICAgIGNhc2UgOTpcclxuICAgICAgICBpZiAoJChcIiNuZXctYmx1cmJcIikuaXMoXCI6Zm9jdXNcIikpIHtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAkc2NvcGUuYWRkVmFsdWUoKTtcclxuICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDEzOlxyXG4gICAgICAgIGlmICgkKFwiI25ldy1ibHVyYlwiKS5pcyhcIjpmb2N1c1wiKSkge1xyXG4gICAgICAgICAgJHNjb3BlLmFkZFZhbHVlKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICgkKFwiI25ldy12YWx1ZVwiKS5pcyhcIjpmb2N1c1wiKSkge1xyXG4gICAgICAgICAgJCgnI25ldy1ibHVyYicpLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG5cclxuICAgIH1cclxuICAgIC8vIHVzZSBlLmtleUNvZGVcclxuICB9O1xyXG5cclxuICAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzID0gJHNjb3BlLmNhdGVnb3JpZXMubWFwKGNhdGVnb3J5ID0+IGNhdGVnb3J5KTtcclxuICAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzLnB1c2goJ0FsbCcpO1xyXG4gICRzY29wZS5jYXRlZ29yeUZpbHRlcnMucHVzaCgnQmxhbmsnKTtcclxuICAkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIgPSAnQWxsJztcclxuXHJcbiAgJHNjb3BlLnNldENhdGVnb3J5RmlsdGVyID0gY2F0ZWdvcnkgPT4ge1xyXG4gICAgJHNjb3BlLmNhdGVnb3J5RmlsdGVyID0gY2F0ZWdvcnk7XHJcbiAgfTtcclxuICAkc2NvcGUuc2V0VXNlckZpbHRlciA9IHVzZXIgPT4ge1xyXG4gICAgJHNjb3BlLnVzZXJGaWx0ZXIgPSB1c2VyO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5maWx0ZXJlZExpc3RzID0gKCkgPT4ge1xyXG4gICAgaWYgKCEkc2NvcGUubGlzdHMpIHJldHVybiBbXTtcclxuICAgIHJldHVybiAkc2NvcGUubGlzdHMuZmlsdGVyKCh7Y2F0ZWdvcnksIGNyZWF0b3J9KSA9PiB7XHJcbiAgICAgIGlmICgkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIgPT09ICdBbGwnICYmICRzY29wZS51c2VyRmlsdGVyID09PSAnQWxsJykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9IGVsc2UgaWYgKCRzY29wZS5jYXRlZ29yeUZpbHRlciAhPT0gJ0FsbCcgJiYgJHNjb3BlLnVzZXJGaWx0ZXIgPT09ICdBbGwnKSB7XHJcbiAgICAgICAgaWYgKGNhdGVnb3J5KSB7XHJcbiAgICAgICAgICByZXR1cm4gY2F0ZWdvcnkgPT09ICRzY29wZS5jYXRlZ29yeUZpbHRlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuICRzY29wZS5jYXRlZ29yeUZpbHRlciA9PT0gJ0JsYW5rJztcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNhdGVnb3J5RmlsdGVyID09PSAnQWxsJyAmJiAkc2NvcGUudXNlckZpbHRlciAhPT0gJ0FsbCcpIHtcclxuICAgICAgICByZXR1cm4gY3JlYXRvciA9PT0gJHNjb3BlLnVzZXJGaWx0ZXI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGNhdGVnb3J5KSB7XHJcbiAgICAgICAgICByZXR1cm4gY2F0ZWdvcnkgPT09ICRzY29wZS5jYXRlZ29yeUZpbHRlciAmJiBjcmVhdG9yID09PSAkc2NvcGUudXNlckZpbHRlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuICRzY29wZS5jYXRlZ29yeUZpbHRlciA9PT0gJ0JsYW5rJyAmJiBjcmVhdG9yID09PSAkc2NvcGUudXNlckZpbHRlcjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pLmZpbHRlcigoe25hbWV9KSA9PiAhbmFtZSB8fCBuYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigkc2NvcGUuc2VhcmNoTmFtZS50b0xvd2VyQ2FzZSgpKSA+PSAwKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuJG9uKCdsb2dpbicsIF8gPT4ge1xyXG4gICAgJHNjb3BlLmdldExpc3RzKCk7XHJcbiAgfSk7XHJcblxyXG5cclxuICAkc2NvcGUuc29ydCA9IHNvcnRCeSA9PiB7XHJcbiAgICBpZiAoJHNjb3BlLnNvcnRWYWx1ZSA9PT0gc29ydEJ5KSB7XHJcbiAgICAgICRzY29wZS5zb3J0RGlyZWN0aW9uID0gISRzY29wZS5zb3J0RGlyZWN0aW9uO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJHNjb3BlLnNvcnRWYWx1ZSA9IHNvcnRCeTtcclxuICAgICAgJHNjb3BlLnNvcnREaXJlY3Rpb24gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgJHNjb3BlLnNvcnRlciA9ICgkc2NvcGUuc29ydERpcmVjdGlvbiA/ICcrJyA6ICctJykgKyAkc2NvcGUuc29ydFZhbHVlO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zb3J0VmFsdWUgPSAnZGF0ZSc7XHJcbiAgJHNjb3BlLnNvcnREaXJlY3Rpb24gPSB0cnVlO1xyXG4gICRzY29wZS5zb3J0TGlzdCA9ICd2YWx1ZSc7XHJcbiAgJHNjb3BlLnNvcnQoJ2RhdGUnKTtcclxuXHJcbiAgJHNjb3BlLmdldENhdGVnb3J5Q291bnQgPSBjYXRlZ29yeSA9PiB7XHJcbiAgICBpZiAoISRzY29wZS5saXN0cykgcmV0dXJuIDA7XHJcbiAgICByZXR1cm4gJHNjb3BlLmxpc3RzLmZpbHRlcihsaXN0ID0+IChjYXRlZ29yeSA9PT0gJ0FsbCcgfHwgbGlzdC5jYXRlZ29yeSA9PT0gY2F0ZWdvcnkpICYmICgkc2NvcGUudXNlckZpbHRlciA9PT0gJ0FsbCcgfHwgbGlzdC5jcmVhdG9yLnVzZXJuYW1lID09PSAkc2NvcGUudXNlckZpbHRlcikpLmxlbmd0aDtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0TGlzdHMgPSAoKSA9PiB7XHJcbiAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XHJcbiAgICBCb3RzU3ZjLmdldExpc3RzKCRzY29wZS5jdXJyZW50VXNlcilcclxuICAgIC50aGVuKCh7ZGF0YX0pID0+IHtcclxuICAgICAgJHNjb3BlLmxpc3RzID0gZGF0YTtcclxuICAgICAgY29uc29sZS5sb2coJHNjb3BlLmxpc3RzWzBdKTtcclxuICAgICAgJHNjb3BlLnVzZXJGaWx0ZXJzID0ge307XHJcbiAgICAgICRzY29wZS51c2VyRmlsdGVycy5BbGwgPSAkc2NvcGUubGlzdHMubGVuZ3RoO1xyXG4gICAgICAkc2NvcGUudXNlckZpbHRlcnMgPSAkc2NvcGUubGlzdHMuc29ydCgobGlzdDEsIGxpc3QyKSA9PiBsaXN0MS5jcmVhdG9yID4gbGlzdDIuY3JlYXRvcikucmVkdWNlKCh1c2Vycywge2NyZWF0b3J9KSA9PiB7XHJcbiAgICAgICAgaWYgKCF1c2Vyc1tjcmVhdG9yXSkgdXNlcnNbY3JlYXRvcl0gPSAwO1xyXG4gICAgICAgIHVzZXJzW2NyZWF0b3JdKys7XHJcbiAgICAgICAgcmV0dXJuIHVzZXJzO1xyXG4gICAgICB9LCAkc2NvcGUudXNlckZpbHRlcnMpO1xyXG4gICAgICAkc2NvcGUudXNlckNvdW50ID0gT2JqZWN0LmtleXMoJHNjb3BlLnVzZXJGaWx0ZXJzKS5sZW5ndGg7XHJcbiAgICAgICRzY29wZS51c2VyRmlsdGVyID0gJ0FsbCc7XHJcbiAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VsZWN0TGlzdCA9IGxpc3QgPT4ge1xyXG4gICAgQm90c1N2Yy5nZXRMaXN0KGxpc3QpXHJcbiAgICAudGhlbigoe2RhdGF9KSA9PiB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RlZExpc3QgPSBkYXRhO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdENhdGVnb3J5ID0gY2F0ZWdvcnkgPT4ge1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yeSA9IGNhdGVnb3J5O1xyXG4gICAgJHNjb3BlLnNlbGVjdGluZ0NhdGVnb3J5ID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmFkZExpc3QgPSAoKSA9PiB7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0ID0ge1xyXG4gICAgICBuYW1lOiAnJyxcclxuICAgICAgY3JlYXRvcjogJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCxcclxuICAgICAgZGF0ZTogbmV3IERhdGUoKSxcclxuICAgICAgdmFsdWVzOiBbXSxcclxuICAgICAgYW5zd2VyczogMCxcclxuICAgICAgaXNEeW5hbWljOiB0cnVlXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5hZGRWYWx1ZSA9ICgpID0+IHtcclxuICAgIGlmICgkc2NvcGUubmV3SXRlbS52YWx1ZSkge1xyXG4gICAgICBpZiAoXy5zb21lKCRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLCB2YWx1ZSA9PiB2YWx1ZSA9PSAkc2NvcGUubmV3SXRlbS52YWx1ZSkpIHtcclxuICAgICAgICBhbGVydChgJHskc2NvcGUubmV3SXRlbS52YWx1ZX0gaXMgYWxyZWFkeSBpbiB0aGUgbGlzdGApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICRzY29wZS5uZXdJdGVtLmNyZWF0b3IgPSAkc2NvcGUuY3VycmVudFVzZXIuX2lkO1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLnVuc2hpZnQoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSgkc2NvcGUubmV3SXRlbSkpKTtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0LmFuc3dlcnMrKztcclxuICAgICAgICAkc2NvcGUubmV3SXRlbS52YWx1ZSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5uZXdJdGVtLmJsdXJiID0gJyc7XHJcbiAgICAgICAgaWYgKCRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLmxlbmd0aCA+PSAxMCAmJiAkc2NvcGUuc2VsZWN0ZWRMaXN0Lm5hbWUgJiYgJHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yeSkge1xyXG4gICAgICAgICAgJHNjb3BlLnNhdmVMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgJCgnI25ldy12YWx1ZScpLmZvY3VzKCk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnJlcG9ydExpc3QgPSBsaXN0ID0+IHtcclxuICAgIEJvdHNTdmMucmVwb3J0TGlzdCgkc2NvcGUuY3VycmVudFVzZXIsIGxpc3QpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zYXZlTGlzdCA9IGxpc3QgPT4ge1xyXG4gICAgbGlzdC52YWx1ZXMgPSBsaXN0LnZhbHVlcy5maWx0ZXIoKHt2YWx1ZX0pID0+IHZhbHVlKTtcclxuICAgIGlmIChsaXN0LnZhbHVlcy5sZW5ndGggPj0gMTAgJiYgbGlzdC5uYW1lICYmIGxpc3QuY2F0ZWdvcnkpIHtcclxuICAgICAgJHNjb3BlLnNhdmluZyA9IHRydWU7XHJcbiAgICAgIEJvdHNTdmMuc2F2ZUxpc3QoJHNjb3BlLmN1cnJlbnRVc2VyLCBsaXN0KVxyXG4gICAgICAudGhlbigoe2RhdGF9KSA9PiB7XHJcbiAgICAgICAgaWYgKCEkc2NvcGUuc2VsZWN0ZWRMaXN0Ll9pZCkge1xyXG4gICAgICAgICAgJHNjb3BlLmxpc3RzLnVuc2hpZnQoZGF0YSk7XHJcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0TGlzdChkYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAkc2NvcGUubGlzdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5saXN0c1tpXS5faWQgPT09IGRhdGEuX2lkKSB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLmxpc3RzW2ldID0gZGF0YTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgJHNjb3BlLnNlbGVjdExpc3QobGlzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS5zYXZpbmcgPSBmYWxzZTtcclxuICAgICAgfSwgZXJyID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgJHNjb3BlLnNhdmluZyA9IGZhbHNlO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAobGlzdC52YWx1ZXMubGVuZ3RoIDwgMTApIHtcclxuICAgICAgYWxlcnQoJ0xpc3RzIG11c3QgY29udGFpbiAxMCBvciBtb3JlIHZhbHVlcyEnKTtcclxuICAgIH0gZWxzZSBpZiAoIWxpc3QubmFtZSkge1xyXG4gICAgICBmbGFzaCgnI2xpc3QtbmFtZScpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmxhc2goJyNsaXN0LWNhdGVnb3J5Jyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gZmxhc2goZWxlbWVudCkge1xyXG4gICAgY29uc3QgY29sb3IgPSAkKGVsZW1lbnQpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIik7XHJcbiAgICAkKGVsZW1lbnQpLmFuaW1hdGUoe1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI0ZBODA3MlwiXHJcbiAgICB9LCAxMDAsICgpID0+IHtcclxuICAgICAgJChlbGVtZW50KS5hbmltYXRlKHtcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yXHJcbiAgICAgIH0sIDEwMCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gICRzY29wZS5kZWxldGVMaXN0ID0gbGlzdCA9PiB7XHJcbiAgICBpZiAoIWxpc3QuX2lkKSB7XHJcbiAgICAgICRzY29wZS5saXN0cyA9ICRzY29wZS5saXN0cy5maWx0ZXIoKHtfaWR9KSA9PiBfaWQpO1xyXG4gICAgICAkc2NvcGUuc2VsZWN0ZWRMaXN0ID0gbnVsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgbGlzdD8nKSkge1xyXG4gICAgICAgIEJvdHNTdmMuZGVsZXRlTGlzdChsaXN0KVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICRzY29wZS5nZXRMaXN0cygpO1xyXG4gICAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdCA9IG51bGw7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkc2NvcGUubGlzdEJ1dHRvbkNsYXNzID0gbGlzdCA9PiB7XHJcbiAgICBjb25zdCB2YWx1ZXMgPSBsaXN0LnZhbHVlcztcclxuICAgIGNvbnN0IGJsdXJicyA9IGxpc3QuYmx1cmJzO1xyXG4gICAgaWYgKHZhbHVlcyA9PT0gYmx1cmJzICYmIGxpc3QuZGVzY3JpcHRpb24pIHtcclxuICAgICAgcmV0dXJuICdidG4tZGVmYXVsdCc7XHJcbiAgICB9IGVsc2UgaWYgKGJsdXJicyA9PT0gMCAmJiAhbGlzdC5kZXNjcmlwdGlvbikge1xyXG4gICAgICByZXR1cm4gJ2J0bi13YXJuaW5nJztcclxuICAgIH0gZWxzZSBpZiAoYmx1cmJzID09PSAwICYmIGxpc3QuZGVzY3JpcHRpb24pIHtcclxuICAgICAgcmV0dXJuICdidG4taW5mbyc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJ2J0bi1wcmltYXJ5JztcclxuICAgIH1cclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKFwiYXBwXCIsW1widWkucm91dGVyXCIsXCJ1aS5ib290c3RyYXBcIixcIm5nQW5pbWF0ZVwiLFwibmdTYW5pdGl6ZVwiLFwibmdEcmFnRHJvcFwiLFwibmdUYWdzSW5wdXRcIixcInZjUmVjYXB0Y2hhXCIsXCJjaGFydC5qc1wiLFwidGMuY2hhcnRqc1wiXSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29uZmlnKFtcIiRzdGF0ZVByb3ZpZGVyXCIsXCIkdXJsUm91dGVyUHJvdmlkZXJcIixcIiR1cmxTZXJ2aWNlUHJvdmlkZXJcIixcIiRsb2NhdGlvblByb3ZpZGVyXCIsZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsJHVybFJvdXRlclByb3ZpZGVyLCR1cmxTZXJ2aWNlUHJvdmlkZXIsJGxvY2F0aW9uUHJvdmlkZXIpeyR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoXCIvaG9tZVwiKSwkdXJsU2VydmljZVByb3ZpZGVyLmNvbmZpZy5zdHJpY3RNb2RlKCExKSwkc3RhdGVQcm92aWRlci5zdGF0ZShcImhvbWVcIix7dXJsOlwiL2hvbWVcIix0ZW1wbGF0ZVVybDpcIi9ob21lLmh0bWxcIn0pLnN0YXRlKFwicG9saWN5XCIse3VybDpcIi9wb2xpY3lcIix0ZW1wbGF0ZVVybDpcIi9wb2xpY3kuaHRtbFwifSkuc3RhdGUoXCJwcmludFwiLHt1cmw6XCIvcHJpbnRcIix0ZW1wbGF0ZVVybDpcIi9wcmludC5odG1sXCJ9KS5zdGF0ZShcImV4cGVyaWVuY2VcIix7dXJsOlwiL2V4cGVyaWVuY2VcIixjb250cm9sbGVyOlwiRXhwZXJpZW5jZUN0cmxcIix0ZW1wbGF0ZVVybDpcIi9leHBlcmllbmNlLmh0bWxcIn0pLnN0YXRlKFwic2tpbGxzXCIse3VybDpcIi9za2lsbHNcIixjb250cm9sbGVyOlwiU2tpbGxzQ3RybFwiLHRlbXBsYXRlVXJsOlwiL3NraWxscy5odG1sXCJ9KS5zdGF0ZShcImhvYmJpZXNcIix7dXJsOlwiL2hvYmJpZXNcIixjb250cm9sbGVyOlwiSG9iYmllc0N0cmxcIix0ZW1wbGF0ZVVybDpcIi9ob2JiaWVzLmh0bWxcIn0pLnN0YXRlKFwiY29udGFjdFwiLHt1cmw6XCIvY29udGFjdFwiLGNvbnRyb2xsZXI6XCJDb250YWN0Q3RybFwiLHRlbXBsYXRlVXJsOlwiL2NvbnRhY3QuaHRtbFwifSkuc3RhdGUoXCJ3b3Jrb3V0XCIse3VybDpcIi93b3Jrb3V0XCIsY29udHJvbGxlcjpcIldvcmtvdXRDdHJsXCIsdGVtcGxhdGVVcmw6XCIvd29ya291dC5odG1sXCJ9KS5zdGF0ZShcInBvc3RzXCIse3VybDpcIi9wb3N0c1wiLGNvbnRyb2xsZXI6XCJQb3N0c0N0cmxcIix0ZW1wbGF0ZVVybDpcIi9wb3N0cy5odG1sXCJ9KS5zdGF0ZShcInByb2ZpbGVcIix7dXJsOlwiL3Byb2ZpbGVcIixjb250cm9sbGVyOlwiUHJvZmlsZUN0cmxcIix0ZW1wbGF0ZVVybDpcIi9wcm9maWxlLmh0bWxcIn0pLnN0YXRlKFwibGlzdHNcIix7dXJsOlwiL2xpc3RzXCIsY29udHJvbGxlcjpcIkxpc3RzQ3RybFwiLHRlbXBsYXRlVXJsOlwibGlzdHMuaHRtbFwifSkuc3RhdGUoXCJwcmlvcml0aXplXCIse3VybDpcIi9wcmlvcml0aXplXCIsY29udHJvbGxlcjpcIlByaW9yaXRpemVDdHJsXCIsdGVtcGxhdGVVcmw6XCJwcmlvcml0aXplLmh0bWxcIn0pLnN0YXRlKFwiYnViYmxlc1wiLHt1cmw6XCIvYnViYmxlc1wiLGNvbnRyb2xsZXI6XCJCdWJibGVzQ3RybFwiLHRlbXBsYXRlVXJsOlwiYnViYmxlcy5odG1sXCJ9KS5zdGF0ZShcImFzdGVyb2lkc1wiLHt1cmw6XCIvYXN0ZXJvaWRzXCIsY29udHJvbGxlcjpcIkFzdGVyb2lkc0N0cmxcIix0ZW1wbGF0ZVVybDpcImFzdGVyb2lkcy5odG1sXCJ9KS5zdGF0ZShcImxlbW1pbmdzXCIse3VybDpcIi9sZW1taW5nc1wiLGNvbnRyb2xsZXI6XCJMZW1taW5nc0N0cmxcIix0ZW1wbGF0ZVVybDpcImxlbW1pbmdzLmh0bWxcIn0pLnN0YXRlKFwiYm90c1wiLHt1cmw6XCIvYm90c1wiLGNvbnRyb2xsZXI6XCJUZW5UaGluZ3NDdHJsXCIsdGVtcGxhdGVVcmw6XCJ0ZW50aGluZ3MuaHRtbFwifSkuc3RhdGUoXCJ0ZW50aGluZ3NcIix7dXJsOlwiL3RlbnRoaW5nc1wiLGNvbnRyb2xsZXI6XCJUZW5UaGluZ3NDdHJsXCIsdGVtcGxhdGVVcmw6XCJ0ZW50aGluZ3MuaHRtbFwifSkuc3RhdGUoXCJxdWl6LWdvb2dsZVwiLHt1cmw6XCIvZ29vZ2xlXCIsY29udHJvbGxlcjpcIlF1aXpHb29nbGVDdHJsXCIsdGVtcGxhdGVVcmw6XCJxdWl6emVzL2dvb2dsZS5odG1sXCJ9KS5zdGF0ZShcInF1aXotbG9nb3NcIix7dXJsOlwiL2xvZ29zXCIsY29udHJvbGxlcjpcIlF1aXpMb2dvc0N0cmxcIix0ZW1wbGF0ZVVybDpcInF1aXp6ZXMvbG9nb3MuaHRtbFwifSksJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtlbmFibGVkOiEwLHJlcXVpcmVCYXNlOiExfSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIldlYlNvY2tldFN2Y1wiLFtcIiRyb290U2NvcGVcIixcIiR0aW1lb3V0XCIsZnVuY3Rpb24oJHJvb3RTY29wZSwkdGltZW91dCl7dmFyIGNvbm5lY3Rpb24sY29ubmVjdD1mdW5jdGlvbigpeyhjb25uZWN0aW9uPW5ldyBXZWJTb2NrZXQoXCJodHRwczpcIj09PXdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbD9cIndzczovL1wiK3dpbmRvdy5sb2NhdGlvbi5ob3N0Olwid3M6Ly9cIit3aW5kb3cubG9jYXRpb24uaG9zdCkpLm9ub3Blbj1mdW5jdGlvbigpe2NvbnNvbGUubG9nKFwiV2Vic29ja2V0IGNvbm5lY3RlZFwiKX0sY29ubmVjdGlvbi5vbmNsb3NlPWZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKFwiV2Vic29ja2V0IGNsb3NlZC4gUmVjb25uZWN0aW5nLi4uXCIpLCR0aW1lb3V0KGNvbm5lY3QsMWUzKX0sY29ubmVjdGlvbi5vbmVycm9yPWZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKFwiRXJyb3I6IFwiK2UrXCIgLSBTdGF0ZTogXCIrY29ubmVjdGlvbi5yZWFkeVN0YXRlKX0sY29ubmVjdGlvbi5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7dmFyIHBheWxvYWQ9SlNPTi5wYXJzZShlLmRhdGEpOyRyb290U2NvcGUuJGJyb2FkY2FzdChcIndzOlwiK3BheWxvYWQudG9waWMscGF5bG9hZC5kYXRhKX19O3RoaXMuc2VuZD1mdW5jdGlvbih0b3BpYyxkYXRhKXt2YXIganNvbj1KU09OLnN0cmluZ2lmeSh7dG9waWMsZGF0YX0pO2Nvbm5lY3Rpb24uc2VuZChqc29uKX0sdGhpcy5jb25uZWN0PWNvbm5lY3R9XSkucnVuKFtcIldlYlNvY2tldFN2Y1wiLGZ1bmN0aW9uKFdlYlNvY2tldFN2Yyl7V2ViU29ja2V0U3ZjLmNvbm5lY3QoKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQXBwQ3RybFwiLFtcIiRzY29wZVwiLFwiJGxvY2F0aW9uXCIsXCJMYW5ndWFnZVN2Y1wiLFwiVXNlclN2Y1wiLGZ1bmN0aW9uKCRzY29wZSwkbG9jYXRpb24sTGFuZ3VhZ2VTdmMsVXNlclN2Yyl7ZnVuY3Rpb24gbG9naW4odXNlcil7JHNjb3BlLmxvZ2dlZElufHwod2luZG93LmxvY2FsU3RvcmFnZS51c2VyPXVzZXIuX2lkLCRzY29wZS5sb2dnZWRJbj0hMCwkc2NvcGUuY3VycmVudFVzZXI9dXNlciwkc2NvcGUuJGJyb2FkY2FzdChcImxvZ2luXCIpKX1jb25zb2xlLmxvZyhcIiVjWW91IHNuZWFreSBidWdnZXIhXCIsXCJmb250OiAyZW0gc2Fucy1zZXJpZjsgY29sb3I6IERvZGdlckJsdWU7IHRleHQtc2hhZG93OiAycHggMCAwICM0NDQsIC0ycHggMCAwICM0NDQsIDAgMnB4IDAgIzQ0NCwgMCAtMnB4IDAgIzQ0NCwgMXB4IDFweCAjNDQ0LCAtMXB4IC0xcHggMCAjNDQ0LCAxcHggLTFweCAwICM0NDQsIC0xcHggMXB4IDAgIzQ0NDtcIiksY29uc29sZS5sb2coXCJJJ20gZ2xhZCB5b3UncmUgY3VyaW91cyB3aGV0aGVyIHNvbWV0aGluZyBpcyBwb3BwaW5nIHVwIGluIGhlcmUuIEknbSBhIGJpdCBvZiBhIHN0aWNrbGVyIHdoZW4gaXQgY29tZXMgdG8gbWVzc2FnZXMgaW4gdGhlIGNvbnNvbGUgc28gSSB0cnkgdG8gbWFrZSBzdXJlIG9ubHkgdGhpbmdzIEkgd2FudCBhcmUgdmlzaWJsZS4gVGhhdCBiZWluZyBzYWlkLCBpZiB0aGVyZSBpcyBhIGJpZyBlcnJvciBoZXJlLCBJIHdvdWxkIHJlYWxseSBhcHByZWNpYXRlIHlvdSB0ZWxsaW5nIG1lIHNvIEkgY2FuIGdldCByaWQgb2YgaXQhXCIpLGNvbnNvbGUubG9nKFwiVGhlIGNvZGUgZm9yIG15IHJlc3VtZSBpcyBob3N0ZWQgb24gR2l0aHViIGlmIHlvdSByZWFsbHkgd2FudCB0byBnbyBpbnRvIGFsbCB0aGlzISA9PiBodHRwczovL2dpdGh1Yi5jb20vRmxhbmRlcnNCdXJnZXIvcmVzdW1lXCIpLCQod2luZG93KS5sb2FkKChmdW5jdGlvbigpeyQoXCIubG9hZGluZ1wiKS5mYWRlT3V0KFwic2xvd1wiKSwkKFwiLmNvbnRlbnRcIikuZmFkZUluKFwic2xvd1wiKX0pKSwkc2NvcGUudGhlbWVDb3VudGVyPTYsJHNjb3BlLnRvZGF5PW5ldyBEYXRlLCRzY29wZS55ZWFyPSRzY29wZS50b2RheS5nZXRGdWxsWWVhcigpLCRzY29wZS5yYW5kb209TWF0aC5mbG9vcigxZTYqTWF0aC5yYW5kb20oKSksJHNjb3BlLmZsaXBUaGVtZT1mdW5jdGlvbigpeyQoXCIubG9hZGluZ1wiKS5zaG93KCksJChcIi5jb250ZW50XCIpLmhpZGUoKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpeyQoXCIubG9hZGluZ1wiKS5mYWRlT3V0KFwic2xvd1wiKSwkKFwiLmNvbnRlbnRcIikuZmFkZUluKFwic2xvd1wiKX0pLDgwMCksJHNjb3BlLnRoZW1lQ291bnRlcj0kc2NvcGUudGhlbWVDb3VudGVyPDY/JHNjb3BlLnRoZW1lQ291bnRlcisxOiRzY29wZS50aGVtZUNvdW50ZXI9MX0sJC5nZXRKU09OKFwiL3NraWxscy5qc29uXCIsKGZ1bmN0aW9uKGRhdGEpeyRzY29wZS5za2lsbHM9ZGF0YS5maWx0ZXIoKGZ1bmN0aW9uKHNraWxsKXtyZXR1cm4gc2tpbGwuZW5hYmxlZH0pKX0pKSwkLmdldEpTT04oXCIvaG9iYmllcy5qc29uXCIsKGZ1bmN0aW9uKGRhdGEpeyRzY29wZS5ob2JiaWVzPWRhdGF9KSksJC5nZXRKU09OKFwiL2V4cGVyaWVuY2UuanNvblwiLChmdW5jdGlvbihkYXRhKXskc2NvcGUuam9icz1kYXRhLCRzY29wZS5qb2JzLmZvckVhY2goKGZ1bmN0aW9uKGpvYil7am9iLnN0YXJ0RGF0ZT1uZXcgRGF0ZShqb2Iuc3RhcnREYXRlKSxqb2IuZW5kRGF0ZSYmKGpvYi5lbmREYXRlPW5ldyBEYXRlKGpvYi5lbmREYXRlKSl9KSl9KSksJHNjb3BlLmdldFRpbWVTcGFuPWZ1bmN0aW9uKGpvYil7cmV0dXJuIGpvYi5zdGFydERhdGUuZ2V0RnVsbFllYXIoKSsoam9iLmVuZERhdGU/XCIgLSBcIitqb2IuZW5kRGF0ZS5nZXRGdWxsWWVhcigpOlwiIC0gVG9kYXlcIil9LCRzY29wZS5sYW5ndWFnZXM9TGFuZ3VhZ2VTdmMubGFuZ3VhZ2VzLCRzY29wZS5zZWxlY3RlZExhbmd1YWdlPUxhbmd1YWdlU3ZjLmdldExhbmd1YWdlKCksJHNjb3BlLnNlbGVjdExhbmd1YWdlPWZ1bmN0aW9uKGxhbmd1YWdlKXskc2NvcGUuc2VsZWN0ZWRMYW5ndWFnZT1MYW5ndWFnZVN2Yy5zZXRMYW5ndWFnZShsYW5ndWFnZSl9LCRzY29wZS5ob3ZlcmRpdj1mdW5jdGlvbihlLGRpdmlkKXt2YXIgbGVmdD1lLmNsaWVudFgrXCJweFwiLHRvcD1lLmNsaWVudFkrMjArXCJweFwiO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdmlkKTtyZXR1cm4gJChcIiNcIitkaXZpZCkuY3NzKFwibGVmdFwiLGxlZnQpLCQoXCIjXCIrZGl2aWQpLmNzcyhcInRvcFwiLHRvcCksJChcIiNcIitkaXZpZCkudG9nZ2xlKCksITF9LCRzY29wZS5zb2NpYWxNZWRpYT1be25hbWU6XCJsaW5rZWRpblwiLHVybDpcImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9sYXVyZW50LWRlYmFja2VyLTE2MzNhOTE2XCIsaWNvbjpcImZhLWxpbmtlZGluXCJ9LHtuYW1lOlwiZ2l0aHViXCIsdXJsOlwiaHR0cHM6Ly9naXRodWIuY29tL0ZsYW5kZXJzQnVyZ2VyXCIsaWNvbjpcImZhLWdpdGh1YlwifSx7bmFtZTpcImpzZmlkZGxlXCIsdXJsOlwiaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvdXNlci9CZWxnb0NhbmFkaWFuL2ZpZGRsZXMvXCIsaWNvbjpcImZhLWpzZmlkZGxlXCJ9LHtuYW1lOlwic3RhY2tvdmVyZmxvd1wiLHVybDpcImh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS91c2Vycy8xMDgzOTIzL2JlbGdvY2FuYWRpYW5cIixpY29uOlwiZmEtc3RhY2stb3ZlcmZsb3dcIn1dLHdpbmRvdy5sb2NhbFN0b3JhZ2UudXNlciYmVXNlclN2Yy5sb2dpbih3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXtsb2dpbihyZXNwb25zZS5kYXRhKX0pKSwkc2NvcGUuJG9uKFwibG9naW5cIiwoZnVuY3Rpb24oXyx1c2VyKXtsb2dpbih1c2VyKX0pKSwkc2NvcGUuJG9uKFwidXBkYXRlXCIsKGZ1bmN0aW9uKF8sdXNlcil7JHNjb3BlLmN1cnJlbnRVc2VyPXVzZXIsJHNjb3BlLmN1cnJlbnRVc2VyLmJpcnRoRGF0ZT1uZXcgRGF0ZSgkc2NvcGUuY3VycmVudFVzZXIuYmlydGhEYXRlKSwkc2NvcGUubG9hZGluZz0hMSxzZXRUaW1lb3V0KChmdW5jdGlvbigpeyQoXCIjbG9hZGluZy1pY29uXCIpLmZhZGVPdXQoXCJzbG93XCIpfSksMWUzKX0pKSwkc2NvcGUuJG9uKFwibG9hZGluZ1wiLChmdW5jdGlvbihfLHVzZXIpeyRzY29wZS5sb2FkaW5nPSEwLCQoXCIjbG9hZGluZy1pY29uXCIpLnNob3coKX0pKSwkc2NvcGUuJG9uKFwibG9hZGVkXCIsKGZ1bmN0aW9uKF8sdXNlcil7JHNjb3BlLmxvYWRpbmc9ITEsc2V0VGltZW91dCgoZnVuY3Rpb24oKXskKFwiI2xvYWRpbmctaWNvblwiKS5mYWRlT3V0KFwic2xvd1wiKX0pLDFlMyl9KSksJHNjb3BlLmxvZ291dD1mdW5jdGlvbigpe2ZpcmViYXNlLmF1dGgoKS5zaWduT3V0KCkudGhlbigoZnVuY3Rpb24oKXskc2NvcGUubG9nZ2VkSW49ITEsd2luZG93LmxvY2FsU3RvcmFnZS5jbGVhcigpLCRzY29wZS4kYnJvYWRjYXN0KFwibG9nb3V0XCIpfSkpLmNhdGNoKChmdW5jdGlvbihlcnJvcil7fSkpfSwkc2NvcGUuZm9ybWF0RGF0ZT1mdW5jdGlvbihkYXRlKXtyZXR1cm4oZGF0ZT1uZXcgRGF0ZShkYXRlKSkuZ2V0RGF0ZSgpK1wiLVwiK1tcIkphblwiLFwiRmViXCIsXCJNYXJcIixcIkFwclwiLFwiTWF5XCIsXCJKdW5cIixcIkp1bFwiLFwiQXVnXCIsXCJTZXBcIixcIk9jdFwiLFwiTm92XCIsXCJEZWNcIl1bZGF0ZS5nZXRNb250aCgpXStcIi1cIitkYXRlLmdldEZ1bGxZZWFyKCl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJBc3Rlcm9pZHNDdHJsXCIsW1wiJHNjb3BlXCIsXCJHYW1lU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEdhbWVTdmMpeyRzY29wZS5hbm5vdW5jZT0hMTt2YXIgY2FudmFzPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXN0ZXJvaWRzLXBhZ2VcIiksY3R4PWNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7Y3R4LmZvbnQ9XCIzMHB4IENvbWljIFNhbnMgTVNcIixjdHguZmlsbFN0eWxlPVwicmVkXCIsY3R4LnRleHRBbGlnbj1cImNlbnRlclwiO3ZhciBzaG90cz17fSxhc3Rlcm9pZHM9e30scG93ZXJ1cHM9e30sZXhwbG9zaW9ucz17fSxtYXA9e30sc3BhY2VwaWNzPTEwLHNwYWNlPU1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpzcGFjZXBpY3MpLHBvd2VydXBUeXBlcz1be25hbWU6XCJzcGVlZFwiLGFubm91bmNlbWVudDpcIk1heCBTcGVlZCDih6dcIixjeWNsZTp7cm93czoxLGNvbHVtbnM6NCxzaXplOlsxNCwzNV0saTowLGRpcmVjdGlvbjohMH0saW1nOm5ldyBJbWFnZSxhY3RpdmF0ZTpmdW5jdGlvbihzcGFjZXNoaXApe3NwYWNlc2hpcC5tYXhTcGVlZCs9MTAwfX0se25hbWU6XCJjb29sZG93blwiLGFubm91bmNlbWVudDpcIkNvb2xkb3duIOKHqVwiLGN5Y2xlOntyb3dzOjEsY29sdW1uczozLHNpemU6WzE3LDE3XSxpOjAsZGlyZWN0aW9uOiEwfSxpbWc6bmV3IEltYWdlLGFjdGl2YXRlOmZ1bmN0aW9uKHNwYWNlc2hpcCl7c3BhY2VzaGlwLmNvb2xkb3duPjAmJihzcGFjZXNoaXAuY29vbGRvd25UaW1lLT0xKX19LHtuYW1lOlwicmFuZ2VcIixhbm5vdW5jZW1lbnQ6XCJGaXJpbmcgUmFuZ2Ug4oenXCIsY3ljbGU6e3Jvd3M6NCxjb2x1bW5zOjEsc2l6ZTpbMzAsOF0saTowLGRpcmVjdGlvbjohMH0saW1nOm5ldyBJbWFnZSxhY3RpdmF0ZTpmdW5jdGlvbihzcGFjZXNoaXApe3NwYWNlc2hpcC5yYW5nZSs9NX19LHtuYW1lOlwic2hpZWxkXCIsYW5ub3VuY2VtZW50OlwiU2hpZWxkXCIsY3ljbGU6e3Jvd3M6NSxjb2x1bW5zOjEsc2l6ZTpbMTksMTldLGk6MCxkaXJlY3Rpb246ITB9LGltZzpuZXcgSW1hZ2UsYWN0aXZhdGU6ZnVuY3Rpb24oc3BhY2VzaGlwKXtzcGFjZXNoaXAuc2hpZWxkPSEwfX0se25hbWU6XCJudWtlXCIsYW5ub3VuY2VtZW50OlwiTnVrZVwiLGN5Y2xlOntyb3dzOjEsY29sdW1uczo4LHNpemU6WzE1LDE1XSxpOjAsZGlyZWN0aW9uOiEwfSxpbWc6bmV3IEltYWdlLGFjdGl2YXRlOmZ1bmN0aW9uKHNwYWNlc2hpcCl7Zm9yKHZhciBpIGluIGFzdGVyb2lkcylhc3Rlcm9pZHNbaV0uZXhwbG9kZSgpO3NwYXduQXN0ZXJvaWRzKDUpfX1dO3Bvd2VydXBUeXBlcy5mb3JFYWNoKChmdW5jdGlvbihwb3dlcnVwLGksYXJyYXkpe2FycmF5W2ldLmltZy5zcmM9XCJhc3Rlcm9pZHMvXCIrcG93ZXJ1cC5uYW1lK1wiLnBuZ1wifSkpO3ZhciBzcGFjZXNoaXAsZXhwbG9zaW9uSW1hZ2U9bmV3IEltYWdlO2Z1bmN0aW9uIGV2YWx1YXRlS2V5cygpeyRzY29wZS5wbGF5aW5nPyhtYXBbMzJdJiYwPT09c3BhY2VzaGlwLmNvb2xkb3duJiZzcGFjZXNoaXAuc2hvb3QoKSxtYXBbMzddJiYoMD09PXNwYWNlc2hpcC5yb3RhdGlvbj9zcGFjZXNoaXAucm90YXRpb249MzYwOnNwYWNlc2hpcC5yb3RhdGlvbi09MyksbWFwWzM5XSYmKDM2MD09PXNwYWNlc2hpcC5yb3RhdGlvbj9zcGFjZXNoaXAucm90YXRpb249MDpzcGFjZXNoaXAucm90YXRpb24rPTMpLG1hcFszOF0/c3BhY2VzaGlwLnNwZWVkPD1zcGFjZXNoaXAubWF4U3BlZWQmJihzcGFjZXNoaXAuc3BlZWQrPTUpOnNwYWNlc2hpcC5zcGVlZD4wJiZzcGFjZXNoaXAuc3BlZWQtLSxtYXBbNDBdJiZzcGFjZXNoaXAuc3BlZWQ+MCYmKHNwYWNlc2hpcC5zcGVlZC09MikpOm1hcFszMl0mJigkc2NvcGUucGxheWluZz0hMCwkc2NvcGUuc2NvcmU9MCxzcGFjZT1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqc3BhY2VwaWNzKSwkc2NvcGUuJGFwcGx5KCksc3BhY2VzaGlwPW5ldyBTcGFjZXNoaXAsJHNjb3BlLnNjb3JlPTAsc3Bhd25Bc3Rlcm9pZHMoNSksZnVuY3Rpb24gYXV0b1NwYXduKCl7aWYoT2JqZWN0LmtleXMoYXN0ZXJvaWRzKS5sZW5ndGg8MjAwKXt2YXIgaWQ9TWF0aC5yb3VuZCgxZTgqTWF0aC5yYW5kb20oKSk7YXN0ZXJvaWRzW2lkXT1uZXcgQXN0ZXJvaWQoaWQpfSRzY29wZS5wbGF5aW5nJiZzZXRUaW1lb3V0KChmdW5jdGlvbigpe2F1dG9TcGF3bigpfSksJHNjb3BlLnNjb3JlPDFlMz8xZTM6JHNjb3BlLnNjb3JlPDJlMz85MDA6JHNjb3BlLnNjb3JlPDNlMz84MDA6JHNjb3BlLnNjb3JlPDRlMz83MDA6JHNjb3BlLnNjb3JlPDVlMz82MDA6JHNjb3BlLnNjb3JlPDZlMz81MDA6JHNjb3BlLnNjb3JlPDdlMz80MDA6JHNjb3BlLnNjb3JlPDhlMz8zMDA6MjAwKX0oKSl9ZnVuY3Rpb24gU3BhY2VzaGlwKCl7dGhpcy53aWR0aD01MCx0aGlzLmhlaWdodD01MCx0aGlzLnNoaWVsZD0hMSx0aGlzLnJhbmdlPTgwLHRoaXMuY2Fubm9uPXt4OnRoaXMud2lkdGgvMi00LjUseTp0aGlzLmhlaWdodC8yLS4wNzgxMjUqdGhpcy5oZWlnaHR9LHRoaXMuY29vbGRvd249MCx0aGlzLmNvb2xkb3duVGltZT0yMCx0aGlzLnBvc2l0aW9uPVtjYW52YXMud2lkdGgvMi10aGlzLndpZHRoLzIsY2FudmFzLmhlaWdodC8yLXRoaXMuaGVpZ2h0LzJdLHRoaXMuaW1nPW5ldyBJbWFnZSx0aGlzLmltZy5zcmM9XCJhc3Rlcm9pZHMvc3BhY2VzaGlwLnBuZ1wiLHRoaXMuc3BlZWQ9MCx0aGlzLm1heFNwZWVkPTFlMyx0aGlzLmFuZ2xlPTAsdGhpcy5yb3RhdGlvbj0wLHRoaXMuc2hvb3Q9ZnVuY3Rpb24oKXt0aGlzLmNvb2xkb3duPXRoaXMuY29vbGRvd25UaW1lO3ZhciBpZD1NYXRoLnJvdW5kKDFlOCpNYXRoLnJhbmRvbSgpKTtzaG90c1tpZF09bmV3IFNob3QoaWQsdGhpcyl9LHRoaXMubW92ZT1mdW5jdGlvbigpe2Zvcih2YXIgaSBpbiB0aGlzLnNoaWVsZCYmKGN0eC5iZWdpblBhdGgoKSxjdHguYXJjKHRoaXMucG9zaXRpb25bMF0rdGhpcy53aWR0aC8yLHRoaXMucG9zaXRpb25bMV0rdGhpcy5oZWlnaHQvMiwzMCwwLDIqTWF0aC5QSSksY3R4LmZpbGxTdHlsZT1cInJnYigzNSwgMjM3LCA4NiwgMC41KVwiLGN0eC5zdHJva2VTdHlsZT1cInJnYig2NiwgMTY4LCAzNiwgMC44KVwiLGN0eC5saW5lV2lkdGg9NSxjdHguc3Ryb2tlKCksY3R4LmZpbGwoKSksYXN0ZXJvaWRzKXt2YXIgYXN0ZXJvaWQ9YXN0ZXJvaWRzW2ldO2lmKGhpdChhc3Rlcm9pZCx0aGlzKSl7aWYoIXRoaXMuc2hpZWxkKXJldHVybiBnYW1lT3ZlcigpO3RoaXMuc2hpZWxkPSExLGFzdGVyb2lkLmV4cGxvZGUoKX19dGhpcy5hbmdsZT10aGlzLnJvdGF0aW9uLHRoaXMuY29vbGRvd24+MCYmdGhpcy5jb29sZG93bi0tLG1vdmUodGhpcyl9fWZ1bmN0aW9uIFNob3QoaWQsc3BhY2VzaGlwKXt0aGlzLmlkPWlkLHRoaXMucG9zaXRpb249W3NwYWNlc2hpcC5wb3NpdGlvblswXStzcGFjZXNoaXAuY2Fubm9uLngrc3BhY2VzaGlwLmNhbm5vbi54Kk1hdGguY29zKChzcGFjZXNoaXAucm90YXRpb24tOTApKk1hdGguUEkvMTgwKSxzcGFjZXNoaXAucG9zaXRpb25bMV0rc3BhY2VzaGlwLmNhbm5vbi55K3NwYWNlc2hpcC5jYW5ub24ueSpNYXRoLnNpbigoc3BhY2VzaGlwLnJvdGF0aW9uLTkwKSpNYXRoLlBJLzE4MCldLHRoaXMud2lkdGg9OSx0aGlzLmhlaWdodD0xNSx0aGlzLmFuZ2xlPXNwYWNlc2hpcC5hbmdsZSx0aGlzLnJvdGF0aW9uPXNwYWNlc2hpcC5yb3RhdGlvbix0aGlzLnNwZWVkPXNwYWNlc2hpcC5zcGVlZCs1MDAsdGhpcy5saWZlc3Bhbj1zcGFjZXNoaXAucmFuZ2UsdGhpcy5pbWc9bmV3IEltYWdlLHRoaXMuaW1nLnNyYz1cImFzdGVyb2lkcy9zaG90LnBuZ1wiLHRoaXMubW92ZT1mdW5jdGlvbigpe3RoaXMubGlmZXNwYW4tLSxtb3ZlKHRoaXMpfX1mdW5jdGlvbiBBc3Rlcm9pZChpZCl7dGhpcy5pZD1pZCx0aGlzLndpZHRoPTUwKk1hdGgucmFuZG9tKCkrMjAsdGhpcy5oZWlnaHQ9dGhpcy53aWR0aCx0aGlzLnBvc2l0aW9uPWdldEVudHJ5UG9zaXRpb24odGhpcy53aWR0aCx0aGlzLmhlaWdodCksdGhpcy5hbmdsZT0zNjAqTWF0aC5yYW5kb20oKSx0aGlzLnJvdGF0aW9uPTM2MCpNYXRoLnJhbmRvbSgpLHRoaXMucm90YXRpb25TcGVlZD02Kk1hdGgucmFuZG9tKCktMyx0aGlzLnNwZWVkPTMwMCpNYXRoLnJhbmRvbSgpKzIsdGhpcy5pbWc9bmV3IEltYWdlLHRoaXMuaW1nLnNyYz1cImFzdGVyb2lkcy9hc3Rlcm9pZFwiKyhNYXRoLnJvdW5kKDYqTWF0aC5yYW5kb20oKSkrMSkrXCIucG5nXCIsdGhpcy5leHBsb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cGxvc2lvbnNbdGhpcy5pZF09bmV3IEV4cGxvc2lvbih0aGlzKSxkZWxldGUgYXN0ZXJvaWRzW3RoaXMuaWRdfSx0aGlzLm1vdmU9ZnVuY3Rpb24oKXtmb3IodmFyIGkgaW4gdGhpcy5yb3RhdGlvbis9dGhpcy5yb3RhdGlvblNwZWVkLHRoaXMucm90YXRpb24+MzYwP3RoaXMucm90YXRpb249dGhpcy5yb3RhdGlvbi0zNjA6dGhpcy5yb3RhdGlvbjwwJiYodGhpcy5yb3RhdGlvbj0zNjArdGhpcy5yb3RhdGlvbiksc2hvdHMpe3ZhciBzaG90PXNob3RzW2ldO2lmKGhpdChzaG90LHRoaXMpKXt0aGlzLmV4cGxvZGUoKTt2YXIgcG9pbnRzPU1hdGguZmxvb3IoKHNob3Quc3BlZWQtNTAwKS8xMCs3MC10aGlzLndpZHRoKTtNYXRoLmZsb29yKChwb2ludHMrJHNjb3BlLnNjb3JlKS8xMDApPk1hdGguZmxvb3IoJHNjb3BlLnNjb3JlLzEwMCkmJnNwYXduUG93ZXJ1cCgpLCRzY29wZS5zY29yZSs9cG9pbnRzLCRzY29wZS4kYXBwbHkoKSxkZWxldGUgc2hvdHNbaV19fW1vdmUodGhpcyl9fWZ1bmN0aW9uIEV4cGxvc2lvbihvYmplY3Qpe3RoaXMucG9zaXRpb249W29iamVjdC5wb3NpdGlvblswXSxvYmplY3QucG9zaXRpb25bMV1dLHRoaXMud2lkdGg9b2JqZWN0LndpZHRoLHRoaXMuaGVpZ2h0PW9iamVjdC5oZWlnaHQsdGhpcy5zcGVlZD0wLHRoaXMuYW5nbGU9MzYwKk1hdGgucmFuZG9tKCksdGhpcy5jeWNsZT17cm93czo2LGNvbHVtbnM6OCxzaXplOlsyNTYsMjU2XSxpOjAsZGlyZWN0aW9uOiEwfSx0aGlzLmxpZmVzcGFuPTQ3LHRoaXMuaW1nPWV4cGxvc2lvbkltYWdlLHRoaXMubW92ZT1mdW5jdGlvbigpe3RoaXMubGlmZXNwYW4tLSxtb3ZlKHRoaXMpLHRoaXMuY3ljbGUuZGlyZWN0aW9uP3RoaXMuY3ljbGUuaSsrOnRoaXMuY3ljbGUuaS0tfX1mdW5jdGlvbiBQb3dlcnVwKGlkKXt0aGlzLmlkPWlkLHRoaXMucG93ZXJ1cD1wb3dlcnVwVHlwZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnBvd2VydXBUeXBlcy5sZW5ndGgpXSx0aGlzLmN5Y2xlPXRoaXMucG93ZXJ1cC5jeWNsZSx0aGlzLmxpZmVzcGFuPTFlMyx0aGlzLmN5Y2xlLnNpemVbMV0+dGhpcy5jeWNsZS5zaXplWzBdPyh0aGlzLmhlaWdodD00MCx0aGlzLndpZHRoPU1hdGgucm91bmQodGhpcy5oZWlnaHQvdGhpcy5jeWNsZS5zaXplWzFdKnRoaXMuY3ljbGUuc2l6ZVswXSkpOih0aGlzLndpZHRoPTQwLHRoaXMuaGVpZ2h0PU1hdGgucm91bmQodGhpcy53aWR0aC90aGlzLmN5Y2xlLnNpemVbMF0qdGhpcy5jeWNsZS5zaXplWzFdKSksdGhpcy5wb3NpdGlvbj1nZXRFbnRyeVBvc2l0aW9uKHRoaXMud2lkdGgsdGhpcy5oZWlnaHQpLHRoaXMuaW1nPXRoaXMucG93ZXJ1cC5pbWcsdGhpcy5hbmdsZT0zNjAqTWF0aC5yYW5kb20oKSx0aGlzLnNwZWVkPTE1MCpNYXRoLnJhbmRvbSgpKzUwO3ZhciBkZWxheT01O3RoaXMubW92ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxpZmVzcGFuPD0wP2RlbGV0ZSBwb3dlcnVwc1t0aGlzLmlkXTpoaXQoc3BhY2VzaGlwLHRoaXMpPygkc2NvcGUuYW5ub3VuY2U9ITAsJHNjb3BlLmFubm91bmNlbWVudD10aGlzLnBvd2VydXAuYW5ub3VuY2VtZW50LCRzY29wZS4kYXBwbHkoKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpeyRzY29wZS5hbm5vdW5jZT0hMSwkc2NvcGUuJGFwcGx5KCl9KSwxZTMpLHRoaXMucG93ZXJ1cC5hY3RpdmF0ZShzcGFjZXNoaXApLGRlbGV0ZSBwb3dlcnVwc1t0aGlzLmlkXSk6KHRoaXMubGlmZXNwYW4tLSxtb3ZlKHRoaXMpLHZvaWQoZGVsYXk8PTA/KHRoaXMuY3ljbGUuZGlyZWN0aW9uP3RoaXMuY3ljbGUuaSsrOnRoaXMuY3ljbGUuaS0tLGRlbGF5PTUpOmRlbGF5LS0pKX19ZnVuY3Rpb24gbW92ZShvYmplY3Qpe2lmKG9iamVjdC5wb3NpdGlvblswXSs9b2JqZWN0LnNwZWVkLzEwMCpNYXRoLmNvcygob2JqZWN0LmFuZ2xlLTkwKSpNYXRoLlBJLzE4MCksb2JqZWN0LnBvc2l0aW9uWzFdKz1vYmplY3Quc3BlZWQvMTAwKk1hdGguc2luKChvYmplY3QuYW5nbGUtOTApKk1hdGguUEkvMTgwKSxvYmplY3QucG9zaXRpb25bMF0+Y2FudmFzLndpZHRoP29iamVjdC5wb3NpdGlvblswXT0tb2JqZWN0LndpZHRoOm9iamVjdC5wb3NpdGlvblswXTwtb2JqZWN0LndpZHRoJiYob2JqZWN0LnBvc2l0aW9uWzBdPWNhbnZhcy53aWR0aCksb2JqZWN0LnBvc2l0aW9uWzFdPmNhbnZhcy5oZWlnaHQ/b2JqZWN0LnBvc2l0aW9uWzFdPS1vYmplY3QuaGVpZ2h0Om9iamVjdC5wb3NpdGlvblsxXTwtb2JqZWN0LmhlaWdodCYmKG9iamVjdC5wb3NpdGlvblsxXT1jYW52YXMuaGVpZ2h0KSxjdHguc2F2ZSgpLGN0eC50cmFuc2xhdGUob2JqZWN0LnBvc2l0aW9uWzBdLG9iamVjdC5wb3NpdGlvblsxXSksY3R4LnRyYW5zbGF0ZShvYmplY3Qud2lkdGgvMixvYmplY3QuaGVpZ2h0LzIpLGN0eC5yb3RhdGUob2JqZWN0LnJvdGF0aW9uKk1hdGguUEkvMTgwKSxvYmplY3QuY3ljbGUpe3ZhciBjb2x1bW49b2JqZWN0LmN5Y2xlLmklb2JqZWN0LmN5Y2xlLmNvbHVtbnMscm93PU1hdGguZmxvb3Iob2JqZWN0LmN5Y2xlLmkvb2JqZWN0LmN5Y2xlLmNvbHVtbnMpO2N0eC5kcmF3SW1hZ2Uob2JqZWN0LmltZyxvYmplY3QuY3ljbGUuc2l6ZVswXSpjb2x1bW4sb2JqZWN0LmN5Y2xlLnNpemVbMV0qcm93LG9iamVjdC5jeWNsZS5zaXplWzBdLG9iamVjdC5jeWNsZS5zaXplWzFdLC1vYmplY3Qud2lkdGgvMiwtb2JqZWN0LmhlaWdodC8yLG9iamVjdC53aWR0aCxvYmplY3QuaGVpZ2h0KSxvYmplY3QuY3ljbGUuaTw9MD8ob2JqZWN0LmN5Y2xlLmk9MCxvYmplY3QuY3ljbGUuZGlyZWN0aW9uPSEwKTpvYmplY3QuY3ljbGUuaT49b2JqZWN0LmN5Y2xlLmNvbHVtbnMqb2JqZWN0LmN5Y2xlLnJvd3MmJihvYmplY3QuY3ljbGUuaT1vYmplY3QuY3ljbGUuY29sdW1ucypvYmplY3QuY3ljbGUucm93cy0xLG9iamVjdC5jeWNsZS5kaXJlY3Rpb249ITEpfWVsc2UgY3R4LmRyYXdJbWFnZShvYmplY3QuaW1nLC1vYmplY3Qud2lkdGgvMiwtb2JqZWN0LmhlaWdodC8yLG9iamVjdC53aWR0aCxvYmplY3QuaGVpZ2h0KTtjdHgucmVzdG9yZSgpfWZ1bmN0aW9uIGdldEVudHJ5UG9zaXRpb24od2lkdGgsaGVpZ2h0KXt2YXIgeCxncmlkWD0yKk1hdGgucmFuZG9tKCksZ3JpZFk9MipNYXRoLnJhbmRvbSgpLHk9MDtyZXR1cm4gZ3JpZFg+PTE/KHg9TWF0aC5yYW5kb20oKSpjYW52YXMud2lkdGgseT15Pj0xPzAtaGVpZ2h0OmNhbnZhcy5oZWlnaHQpOih5PU1hdGgucmFuZG9tKCkqY2FudmFzLmhlaWdodCx4PWdyaWRZPj0xPzAtd2lkdGg6Y2FudmFzLndpZHRoKSxbeCx5XX1mdW5jdGlvbiBoaXQob2JqZWN0MSxvYmplY3QyKXtyZXR1cm4gb2JqZWN0MS5wb3NpdGlvblswXTxvYmplY3QyLnBvc2l0aW9uWzBdK29iamVjdDIud2lkdGgmJm9iamVjdDIucG9zaXRpb25bMF08b2JqZWN0MS5wb3NpdGlvblswXStvYmplY3QxLndpZHRoJiZvYmplY3QxLnBvc2l0aW9uWzFdPG9iamVjdDIucG9zaXRpb25bMV0rb2JqZWN0Mi5oZWlnaHQmJm9iamVjdDIucG9zaXRpb25bMV08b2JqZWN0MS5wb3NpdGlvblsxXStvYmplY3QxLmhlaWdodH1mdW5jdGlvbiBzcGF3bkFzdGVyb2lkcyhhbW91bnQpe3ZhciBpPTA7ZG97dmFyIGlkPU1hdGgucm91bmQoMWU4Kk1hdGgucmFuZG9tKCkpO2FzdGVyb2lkc1tpZF09bmV3IEFzdGVyb2lkKGlkKX13aGlsZShpKys8PWFtb3VudCl9ZnVuY3Rpb24gc3Bhd25Qb3dlcnVwKCl7aWYoT2JqZWN0LmtleXMocG93ZXJ1cHMpLmxlbmd0aDwzKXt2YXIgaWQ9TWF0aC5yb3VuZCgxZTgqTWF0aC5yYW5kb20oKSk7cG93ZXJ1cHNbaWRdPW5ldyBQb3dlcnVwKGlkKX19ZnVuY3Rpb24gZ2FtZU92ZXIoKXtmb3IodmFyIGkgaW4gJHNjb3BlLnBsYXlpbmc9ITEsYXN0ZXJvaWRzKWFzdGVyb2lkc1tpXS5leHBsb2RlKCk7c2hvdHM9e30sJHNjb3BlLmxvZ2dlZEluPyRzY29wZS5jdXJyZW50VXNlci5oaWdoc2NvcmUuYXN0ZXJvaWRzPCRzY29wZS5zY29yZSYmKCRzY29wZS5jdXJyZW50VXNlci5oaWdoc2NvcmUuYXN0ZXJvaWRzPSRzY29wZS5zY29yZSxHYW1lU3ZjLnNldEhpZ2hzY29yZShcImFzdGVyb2lkc1wiLCRzY29wZS5jdXJyZW50VXNlci5faWQsJHNjb3BlLnNjb3JlKSk6JHNjb3BlLmhpZ2hzY29yZTwkc2NvcGUuc2NvcmUmJigkc2NvcGUuaGlnaHNjb3JlPSRzY29wZS5zY29yZSl9ZnVuY3Rpb24gcmVzaXplQ2FudmFzKCl7Y29uc29sZS5sb2cod2luZG93LmlubmVyV2lkdGgpLGNhbnZhcy53aWR0aD13aW5kb3cuaW5uZXJXaWR0aCxjYW52YXMuaGVpZ2h0PXdpbmRvdy5pbm5lckhlaWdodC0oY2FudmFzLndpZHRoPD03Njg/NTA6MTA1KX1leHBsb3Npb25JbWFnZS5zcmM9XCJhc3Rlcm9pZHMvZXhwbG9zaW9uLnBuZ1wiLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLChmdW5jdGlvbihlKXttYXBbZS5rZXlDb2RlfHxlLndoaWNoXT0hMH0pLCEwKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsKGZ1bmN0aW9uKGUpe21hcFtlLmtleUNvZGV8fGUud2hpY2hdPSExfSksITApLCRzY29wZS5oaWdoc2NvcmU9MCx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHJlc2l6ZUNhbnZhcywhMSkscmVzaXplQ2FudmFzKCkscmVxdWVzdEFuaW1hdGlvbkZyYW1lKChmdW5jdGlvbiBkcmF3KCl7Zm9yKHZhciBpIGluIGN0eC5jbGVhclJlY3QoMCwwLGNhbnZhcy53aWR0aCxjYW52YXMuaGVpZ2h0KSxzaG90cylzaG90c1tpXS5saWZlc3Bhbjw9MD9kZWxldGUgc2hvdHNbaV06c2hvdHNbaV0ubW92ZSgpO2ZvcihpIGluIGFzdGVyb2lkcylhc3Rlcm9pZHNbaV0ubW92ZSgpO2ZvcihpIGluIHBvd2VydXBzKXBvd2VydXBzW2ldLm1vdmUoKTtmb3IoaSBpbiBleHBsb3Npb25zKWV4cGxvc2lvbnNbaV0ubGlmZXNwYW48PTA/ZGVsZXRlIGV4cGxvc2lvbnNbaV06ZXhwbG9zaW9uc1tpXS5tb3ZlKCk7aWYoZXZhbHVhdGVLZXlzKCksJHNjb3BlLnBsYXlpbmcpc3BhY2VzaGlwLm1vdmUoKTtlbHNle3ZhciBncmFkaWVudD1jdHguY3JlYXRlTGluZWFyR3JhZGllbnQoMCwwLGNhbnZhcy53aWR0aCwwKTtncmFkaWVudC5hZGRDb2xvclN0b3AoXCIwXCIsXCJyZ2IoXCIrTWF0aC5mbG9vcigyNTYtMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIilcIiksZ3JhZGllbnQuYWRkQ29sb3JTdG9wKFwiMC4yNVwiLFwicmdiKFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDI1Ni0yNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIpXCIpLGdyYWRpZW50LmFkZENvbG9yU3RvcChcIjAuNVwiLFwicmdiKFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigyNTYtMjU2KnRhbGx5LzEwMCkrXCIpXCIpLGdyYWRpZW50LmFkZENvbG9yU3RvcChcIjAuNzVcIixcInJnYihcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigyNTYtMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiKVwiKSxncmFkaWVudC5hZGRDb2xvclN0b3AoXCIxLjBcIixcInJnYihcIitNYXRoLmZsb29yKDI1Ni0yNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiKVwiKSxjdHguZmlsbFN0eWxlPWdyYWRpZW50LGN0eC5mb250PVwiNjBweCBNb25vdG9uXCIsY3R4LmZpbGxUZXh0KFwiQXN0ZXJvaWRzXCIsY2FudmFzLndpZHRoLzItY3R4Lm1lYXN1cmVUZXh0KFwiQXN0ZXJvaWRzXCIpLndpZHRoLzIsY2FudmFzLmhlaWdodC8yKSxjdHguZm9udD1cIjIwcHggQWxkcmljaFwiLGN0eC5maWxsVGV4dChcIlByZXNzIHNwYWNlIHRvIHN0YXJ0XCIsY2FudmFzLndpZHRoLzItY3R4Lm1lYXN1cmVUZXh0KFwiUHJlc3Mgc3BhY2UgdG8gc3RhcnRcIikud2lkdGgvMixjYW52YXMuaGVpZ2h0LzIrMjApLGN0eC5maWxsVGV4dChcIkRlc2lnbmVkIGFuZCBkZXZlbG9wZWQgYnkgTGF1cmVudCBEZWJhY2tlclwiLGNhbnZhcy53aWR0aC8yLWN0eC5tZWFzdXJlVGV4dChcIkRlc2lnbmVkIGFuZCBkZXZlbG9wZWQgYnkgTGF1cmVudCBEZWJhY2tlclwiKS53aWR0aC8yLGNhbnZhcy5oZWlnaHQtMzApfSh0YWxseSs9ZGlyZWN0aW9uPzE6LTEpPjEwMD8odGFsbHk9MTAwLGRpcmVjdGlvbj0hMSk6dGFsbHk8MCYmKHRhbGx5PTAsZGlyZWN0aW9uPSEwKTtyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyl9KSk7dmFyIHRhbGx5PTAsZGlyZWN0aW9uPSEwOyRzY29wZS5zcGFjZT1mdW5jdGlvbigpe3JldHVybntiYWNrZ3JvdW5kSW1hZ2U6J3VybChcImFzdGVyb2lkcy9zcGFjZScrc3BhY2UrJy5qcGdcIiknfX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkJ1YmJsZXNDdHJsXCIsW1wiJHNjb3BlXCIsZnVuY3Rpb24oJHNjb3BlKXt2YXIgY2FudmFzPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnViYmxlcy1wYWdlXCIpLGN0eD1jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLGJ1YmJsZXM9W10sY29sb3JzPVtcIiNmZmMzMDBcIixcIiNmZjU3MzNcIixcIiNjNzAwMzlcIixcIiM5MDBjM2VcIixcIiM1NzE4NDVcIl07ZnVuY3Rpb24gQnViYmxlKCl7dGhpcy5saWZlc3Bhbj0wLHRoaXMucmFkaXVzPTEsdGhpcy5leHBhbmRpbmc9ITAsdGhpcy5zcGVlZD1NYXRoLnJvdW5kKDMqTWF0aC5yYW5kb20oKSksdGhpcy5jaXJjdW1mZXJlbmNlPU1hdGgucm91bmQoNTAqTWF0aC5yYW5kb20oKSkrNSx0aGlzLm1heFJhZGl1cz1NYXRoLnJvdW5kKDIwMCpNYXRoLnJhbmRvbSgpKSsyMCx0aGlzLng9TWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKmNhbnZhcy53aWR0aCksdGhpcy55PU1hdGgucm91bmQoTWF0aC5yYW5kb20oKSpjYW52YXMuaGVpZ2h0KSx0aGlzLnZ4PU1hdGgucmFuZG9tKCk+PS41PzE6LTEsdGhpcy52eT1NYXRoLnJhbmRvbSgpPj0uNT8xOi0xfXJlcXVlc3RBbmltYXRpb25GcmFtZSgoZnVuY3Rpb24gZmlsdGVyQnViYmxlcygpe2J1YmJsZXMucHVzaChuZXcgQnViYmxlKSxidWJibGVzPWJ1YmJsZXMuZmlsdGVyKChmdW5jdGlvbihidWJibGUpe3JldHVybiBidWJibGUucmFkaXVzPT09YnViYmxlLm1heFJhZGl1cyYmKGJ1YmJsZS5leHBhbmRpbmc9ITEpLGJ1YmJsZS54Kz1idWJibGUudngqYnViYmxlLnNwZWVkLGJ1YmJsZS55Kz1idWJibGUudnkqYnViYmxlLnNwZWVkLGJ1YmJsZS5yYWRpdXMrPWJ1YmJsZS5leHBhbmRpbmc/MTotMSxidWJibGUucmFkaXVzPjB9KSksY3R4LmNsZWFyUmVjdCgwLDAsY2FudmFzLndpZHRoLGNhbnZhcy5oZWlnaHQpLGJ1YmJsZXMuZm9yRWFjaCgoZnVuY3Rpb24oYnViYmxlKXtjb2xvcnNbTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoKmJ1YmJsZS5yYWRpdXMvYnViYmxlLm1heFJhZGl1cyldLGN0eC5iZWdpblBhdGgoKSxjdHguYXJjKGJ1YmJsZS54LGJ1YmJsZS55LGJ1YmJsZS5yYWRpdXMsMCwyKk1hdGguUEkpLGN0eC5maWxsU3R5bGU9Y29sb3JzW01hdGgucm91bmQoY29sb3JzLmxlbmd0aCpidWJibGUucmFkaXVzL2J1YmJsZS5tYXhSYWRpdXMpXSxjdHguZmlsbCgpLGN0eC5zdHJva2VTdHlsZT1jb2xvcnNbY29sb3JzLmxlbmd0aC1NYXRoLnJvdW5kKGNvbG9ycy5sZW5ndGgqYnViYmxlLnJhZGl1cy9idWJibGUubWF4UmFkaXVzKV0sY3R4LmxpbmVXaWR0aD1idWJibGUuY2lyY3VtZmVyZW5jZSpidWJibGUucmFkaXVzL2J1YmJsZS5tYXhSYWRpdXMsY3R4LnN0cm9rZSgpfSkpLHJlcXVlc3RBbmltYXRpb25GcmFtZShmaWx0ZXJCdWJibGVzKX0pKSxmdW5jdGlvbigpe2Z1bmN0aW9uIHJlc2l6ZUNhbnZhcygpe2NhbnZhcy53aWR0aD13aW5kb3cuaW5uZXJXaWR0aCxjYW52YXMuaGVpZ2h0PXdpbmRvdy5pbm5lckhlaWdodC0oY2FudmFzLndpZHRoPD03Njg/NTU6MTExKX13aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHJlc2l6ZUNhbnZhcywhMSkscmVzaXplQ2FudmFzKCl9KCl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkNvbnRhY3RDdHJsXCIsW1wiJHNjb3BlXCIsXCJFbWFpbFN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxFbWFpbFN2Yyl7JHNjb3BlLm9wdGlvbnM9W3tuYW1lOlwiU3BhbVwiLHRleHQ6XCJJIGFtIGEgc3BhbSBib3QgYW5kIGF1dG9tYXRpY2FsbHkgY2hlY2sgdGhlIGZpcnN0IG9wdGlvbiBJIGZpbmQhXCJ9LHtuYW1lOlwiT3Bwb3J0dW5pdGl5XCIsdGV4dDpcIllvdSBzZWVtIHRvIGhhdmUgdGhlIHNraWxscyBJIHNlZWssIEknZCBsaWtlIHRvIHRhbGsgYWJvdXQgc29tZSBvcHBvcnR1bml0aWVzLlwifSx7bmFtZTpcIlJlc3VtZVwiLHRleHQ6XCJJIGRpZyB0aGUgcmVzdW1lLCBob3cgZGlkIHlvdSBtYWtlIGl0P1wifSx7bmFtZTpcIk90aGVyXCIsdGV4dDpcIlN1bXRpbiBlbHNlIVwifV0sJHNjb3BlLmNvbnRhY3Q9e2VtYWlsOlwiXCIsbmFtZTpcIlwiLHBob25lOlwiXCIsYWJvdXQ6XCJcIixtZXNzYWdlOlwiXCJ9LCRzY29wZS5zZW5kPWZ1bmN0aW9uKCl7JHNjb3BlLnNlbmRpbmc9ITAsY29uc29sZS5sb2coXCJoZXJlXCIpLEVtYWlsU3ZjLnNlbmQoe2VtYWlsOiRzY29wZS5jb250YWN0LmVtYWlsLG5hbWU6JHNjb3BlLmNvbnRhY3QubmFtZSxwaG9uZTokc2NvcGUuY29udGFjdC5waG9uZSxhYm91dDokc2NvcGUuY29udGFjdC5hYm91dCxtZXNzYWdlOiRzY29wZS5jb250YWN0Lm1lc3NhZ2V9KS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLnNlbnQ9ITAsY29uc29sZS5sb2coXCJTVUNDRVNTLiBzdGF0dXM9JWQsIHRleHQ9JXNcIixyZXNwb25zZS5zdGF0dXMscmVzcG9uc2UudGV4dCksY29uc29sZS5sb2cocmVzcG9uc2UpfSksKGZ1bmN0aW9uKGVycil7JHNjb3BlLnNlbmRpbmc9ITEsY29uc29sZS5sb2coXCJGQUlMRUQuIGVycm9yPVwiLGVycil9KSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJFeHBlcmllbmNlQ3RybFwiLFtcIiRzY29wZVwiLGZ1bmN0aW9uKCRzY29wZSl7JHNjb3BlLmdldFNraWxsPWZ1bmN0aW9uKHNraWxsQ29kZSl7aWYoJHNjb3BlLnNraWxscylyZXR1cm4gJHNjb3BlLnNraWxscy5maW5kKChmdW5jdGlvbihza2lsbCl7cmV0dXJuIHNraWxsLmNvZGU9PT1za2lsbENvZGV9KSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJIb2JiaWVzQ3RybFwiLFtcIiRzY29wZVwiLFwiJHdpbmRvd1wiLGZ1bmN0aW9uKCRzY29wZSwkd2luZG93KXskc2NvcGUuaG9iYnlTZWxlY3RvclZpc2libGU9ITEsJC5nZXRKU09OKFwiaHR0cHM6Ly93d3cucmVkZGl0LmNvbS91c2VyL2JlbGdvY2FuYWRpYW4vYWJvdXQvLmpzb25cIiwoZnVuY3Rpb24ocmVzcG9uc2Upe30pKSwkc2NvcGUuc2VsZWN0ZWRIb2JieT0kc2NvcGUuaG9iYmllc1swXSwkc2NvcGUuc2VsZWN0SG9iYnk9ZnVuY3Rpb24oaG9iYnkpeyRzY29wZS5zZWxlY3RlZEhvYmJ5PWhvYmJ5LCRzY29wZS5ob2JieVNlbGVjdG9yVmlzaWJsZT0hMX0sJHNjb3BlLnNob3dIb2JieT1mdW5jdGlvbih2YWx1ZSxpbmRleCxhcnJheSl7cmV0dXJuISF2YWx1ZS5pbWFnZXMmJnZhbHVlLmltYWdlcy5sZW5ndGg+MH19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkxlbW1pbmdzQ3RybFwiLFtcIiRzY29wZVwiLFwiR2FtZVN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxHYW1lU3ZjKXt2YXIgTEVGVD0wLFJJR0hUPTEsY2FudmFzPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVtbWluZ3MtcGFnZVwiKSxjdHg9Y2FudmFzLmdldENvbnRleHQoXCIyZFwiKSxsZW1taW5nc0ltYWdlPW5ldyBJbWFnZTtsZW1taW5nc0ltYWdlLnNyYz1cImxlbW1pbmdzL2xlbW1pbmdzLnBuZ1wiO3ZhciBkZWNvckltYWdlPW5ldyBJbWFnZTtkZWNvckltYWdlLnNyYz1cImxlbW1pbmdzL2RlY29yLnBuZ1wiO3ZhciBsZW1taW5ncz17fSxzdGFydGVkPSExLGFjdGlvbnM9e3dhbGs6e3N0YXJ0OlswLDBdLGVuZDpbMzIwLDIwXSxjb2x1bW5zOjgscm93czoxLHJldmVyc2U6ITF9LGh1aDp7c3RhcnQ6WzMyMCwwXSxlbmQ6WzY0MCwyMF0sY29sdW1uczo4LHJvd3M6MSxyZXZlcnNlOiEwfSxmYWxsOntzdGFydDpbMCw4MF0sZW5kOlsxNjAsMTAwXSxjb2x1bW5zOjQscm93czoxLHJldmVyc2U6ITF9LGZseTp7c3RhcnQ6WzE2MCw4MF0sZW5kOls0ODAsMTEwXSxjb2x1bW5zOjgscm93czoxLHJldmVyc2U6ITF9LHN0b3A6e3N0YXJ0OlswLDEyMF0sZW5kOls2NDAsMTQwXSxjb2x1bW5zOjE2LHJvd3M6MSxyZXZlcnNlOiExfSxjbGltYjp7c3RhcnQ6WzAsMTYwXSxlbmQ6WzY0MCwxODVdLGNvbHVtbnM6MTYscm93czoxLHJldmVyc2U6ITF9LGJ1aWxkOntzdGFydDpbMCwyMDBdLGVuZDpbNjQwLDIyNV0sY29sdW1uczoxNixyb3dzOjEscmV2ZXJzZTohMX0scHVuY2g6e3N0YXJ0OlswLDI0MF0sZW5kOls2NDAsMzAwXSxjb2x1bW5zOjE2LHJvd3M6MixyZXZlcnNlOiExfSxkaWc6e3N0YXJ0OlswLDMyMF0sZW5kOlszMjAsMzQ1XSxjb2x1bW5zOjgscm93czoxLHJldmVyc2U6ITF9fTtmdW5jdGlvbiBMZW1taW5nKGluaXQpe3RoaXMucG9zaXRpb249W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooY2FudmFzLndpZHRoLTIwMCkpKzEwMCxNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGNhbnZhcy5oZWlnaHQtMjAwKSkrMTAwXSx0aGlzLmRpcmVjdGlvbj0yKk1hdGgucmFuZG9tKCk+MT9MRUZUOlJJR0hULHRoaXMuYWN0PWZ1bmN0aW9uKGFjdGlvbil7dGhpcy5hY3Rpb249YWN0aW9uc1thY3Rpb25dLHRoaXMuY3ljbGU9MCx0aGlzLndpZHRoPSh0aGlzLmFjdGlvbi5lbmRbMF0tdGhpcy5hY3Rpb24uc3RhcnRbMF0pL3RoaXMuYWN0aW9uLmNvbHVtbnMsdGhpcy5oZWlnaHQ9KHRoaXMuYWN0aW9uLmVuZFsxXS10aGlzLmFjdGlvbi5zdGFydFsxXS0yMCoodGhpcy5hY3Rpb24ucm93cy0xKSkvdGhpcy5hY3Rpb24ucm93cyx0aGlzLmFuaW1hdGlvbj0hMH0sdGhpcy5hY3QoaW5pdCksdGhpcy5tb3ZlPWZ1bmN0aW9uKCl7Y3R4LnNhdmUoKSxjdHgudHJhbnNsYXRlKHRoaXMucG9zaXRpb25bMF0sdGhpcy5wb3NpdGlvblsxXSksY3R4LnRyYW5zbGF0ZSh0aGlzLndpZHRoLzIsdGhpcy5oZWlnaHQvMiksdGhpcy5kaXJlY3Rpb249PT1MRUZUJiZjdHguc2NhbGUoLTEsMSk7dmFyIGNvbHVtbj10aGlzLmN5Y2xlJXRoaXMuYWN0aW9uLmNvbHVtbnMscm93PU1hdGguZmxvb3IodGhpcy5jeWNsZS90aGlzLmFjdGlvbi5jb2x1bW5zKTtjdHguZHJhd0ltYWdlKGxlbW1pbmdzSW1hZ2UsdGhpcy53aWR0aCpjb2x1bW4rdGhpcy5hY3Rpb24uc3RhcnRbMF0sKHRoaXMuaGVpZ2h0KzIwKSpyb3crdGhpcy5hY3Rpb24uc3RhcnRbMV0sdGhpcy53aWR0aCx0aGlzLmhlaWdodCwwLDAsMip0aGlzLndpZHRoLDIqdGhpcy5oZWlnaHQpLGN0eC5yZXN0b3JlKCksdGhpcy5hY3Rpb24ucmV2ZXJzZT90aGlzLmFuaW1hdGlvbj8odGhpcy5jeWNsZSsrLHRoaXMuY3ljbGU+PXRoaXMuYWN0aW9uLmNvbHVtbnMqdGhpcy5hY3Rpb24ucm93cyYmKHRoaXMuYW5pbWF0aW9uPSF0aGlzLmFuaW1hdGlvbix0aGlzLmN5Y2xlLS0pKToodGhpcy5jeWNsZS0tLHRoaXMuY3ljbGU8MCYmKHRoaXMuYW5pbWF0aW9uPSF0aGlzLmFuaW1hdGlvbix0aGlzLmN5Y2xlPTApKToodGhpcy5jeWNsZSsrLHRoaXMuY3ljbGU+PXRoaXMuYWN0aW9uLmNvbHVtbnMqdGhpcy5hY3Rpb24ucm93cyYmKHRoaXMuY3ljbGU9MCkpfX1mdW5jdGlvbiByZXNpemVDYW52YXMoKXtjYW52YXMud2lkdGg9d2luZG93LmlubmVyV2lkdGgsY2FudmFzLmhlaWdodD13aW5kb3cuaW5uZXJIZWlnaHQtKGNhbnZhcy53aWR0aDw9NzY4PzUwOjEwNSl9d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixyZXNpemVDYW52YXMsITEpLHJlc2l6ZUNhbnZhcygpLE9iamVjdC5rZXlzKGFjdGlvbnMpLmZvckVhY2goKGZ1bmN0aW9uKGFjdGlvbil7bGVtbWluZ3NbTWF0aC5yb3VuZCgxZTgqTWF0aC5yYW5kb20oKSldPW5ldyBMZW1taW5nKGFjdGlvbil9KSk7bGV0IGhhdGNoPW5ldyBmdW5jdGlvbigpe3RoaXMucG9zaXRpb249WzIwLDIwXSx0aGlzLmFjdGlvbj17c3RhcnQ6WzAsMF0sZW5kOls4Miw1MDBdLGNvbHVtbnM6MSxyb3dzOjEwfSx0aGlzLndpZHRoPSh0aGlzLmFjdGlvbi5lbmRbMF0tdGhpcy5hY3Rpb24uc3RhcnRbMF0pL3RoaXMuYWN0aW9uLmNvbHVtbnMsdGhpcy5oZWlnaHQ9KHRoaXMuYWN0aW9uLmVuZFsxXS10aGlzLmFjdGlvbi5zdGFydFsxXSkvdGhpcy5hY3Rpb24ucm93cyx0aGlzLmN5Y2xlPTAsdGhpcy5vcGVuPWZ1bmN0aW9uKCl7dmFyIGNvbHVtbixyb3c7Y3R4LnNhdmUoKSxjdHgudHJhbnNsYXRlKHRoaXMucG9zaXRpb25bMF0sdGhpcy5wb3NpdGlvblsxXSksY3R4LnRyYW5zbGF0ZSh0aGlzLndpZHRoLzIsdGhpcy5oZWlnaHQvMiksc3RhcnRlZD8oY29sdW1uPXRoaXMuY3ljbGUldGhpcy5hY3Rpb24uY29sdW1ucyxyb3c9TWF0aC5mbG9vcih0aGlzLmN5Y2xlL3RoaXMuYWN0aW9uLmNvbHVtbnMpLHRoaXMuY3ljbGU8OSYmdGhpcy5jeWNsZSsrKTooY29sdW1uPTAscm93PTApLGN0eC5kcmF3SW1hZ2UoZGVjb3JJbWFnZSx0aGlzLndpZHRoKmNvbHVtbit0aGlzLmFjdGlvbi5zdGFydFswXSx0aGlzLmhlaWdodCpyb3crdGhpcy5hY3Rpb24uc3RhcnRbMV0tMSx0aGlzLndpZHRoLHRoaXMuaGVpZ2h0LDAsMCwyKnRoaXMud2lkdGgsMip0aGlzLmhlaWdodCksY3R4LnJlc3RvcmUoKX19OyFmdW5jdGlvbiBkcmF3KCl7aWYoY3R4LmNsZWFyUmVjdCgwLDAsY2FudmFzLndpZHRoLGNhbnZhcy5oZWlnaHQpLHN0YXJ0ZWQpZm9yKHZhciBpIGluIGxlbW1pbmdzKWxlbW1pbmdzW2ldLm1vdmUoKTtlbHNlIGN0eC5iZWdpblBhdGgoKSxjdHguZm9udD1cIjQwcHggTW9ub3RvblwiLGN0eC5saW5lV2lkdGg9XCIxMFwiLGN0eC5zdHJva2VTdHlsZT1cImJsdWVcIixjdHgucmVjdCgxNSxjYW52YXMuaGVpZ2h0LTQ1LGN0eC5tZWFzdXJlVGV4dChcIlN0YXJ0XCIpLndpZHRoKzIwLGN0eC5tZWFzdXJlVGV4dChcIlN0YXJ0XCIpLmhlaWdodCtjYW52YXMuaGVpZ2h0LTQ1KSxjdHguZmlsbCgpLGN0eC5maWxsVGV4dChcIlN0YXJ0XCIsMjAsY2FudmFzLmhlaWdodC01MCk7aGF0Y2gub3BlbigpLHN0YXJ0ZWQ9ITAsc2V0VGltZW91dCgoZnVuY3Rpb24oKXtkcmF3KCl9KSwxNTApfSgpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJMaXN0c0N0cmxcIixbXCIkc2NvcGVcIixcIiRsb2NhdGlvblwiLFwiQ2F0ZWdvcmllc1N2Y1wiLGZ1bmN0aW9uKCRzY29wZSwkbG9jYXRpb24sQ2F0ZWdvcmllc1N2Yyl7JHNjb3BlLnNob3dDYXRlZ29yeT0hMCwkc2NvcGUuaW5pdD1mdW5jdGlvbigpe0NhdGVnb3JpZXNTdmMuZ2V0Q2F0ZWdvcmllcygpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXtmb3IodmFyIGkgaW4gJHNjb3BlLmNhdGVnb3JpZXM9cmVzcG9uc2UuZGF0YSwkc2NvcGUudGFza3M9W10sJHNjb3BlLmNhdGVnb3JpZXMpZm9yKHZhciBqIGluICRzY29wZS5jYXRlZ29yaWVzW2ldLnRhc2tzKSRzY29wZS50YXNrcy5wdXNoKHtjYXRlZ29yeTokc2NvcGUuY2F0ZWdvcmllc1tpXS5uYW1lLHRhc2s6JHNjb3BlLmNhdGVnb3JpZXNbaV0udGFza3Nbal0ubmFtZX0pfSkpfSwkc2NvcGUuc2VsZWN0Q2F0ZWdvcnk9ZnVuY3Rpb24oY2F0ZWdvcnkpe2Zvcih2YXIgaSBpbiAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeT1jYXRlZ29yeSwkc2NvcGUuc2VsZWN0ZWRUYXNrcz1bXSwkc2NvcGUuc2VsZWN0YWJsZVRhc2tzPVtdLCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzKSRzY29wZS5zZWxlY3RhYmxlVGFza3MucHVzaCgkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXSk7JHNjb3BlLnNob3dDYXRlZ29yeT0hMSwkc2NvcGUuZW50ZXJlZENhdGVnb3J5PVwiXCJ9LCRzY29wZS5uZXdDYXRlZ29yeT1mdW5jdGlvbihjYXRlZ29yeSl7Zm9yKHZhciBmb3VuZD0hMSxpPTA7aTwkc2NvcGUuY2F0ZWdvcmllcy5sZW5ndGg7aSsrKSRzY29wZS5jYXRlZ29yaWVzW2ldLm5hbWU9PT1jYXRlZ29yeSYmKCRzY29wZS5zZWxlY3RDYXRlZ29yeSgkc2NvcGUuY2F0ZWdvcmllc1tpXSksZm91bmQ9ITApO2ZvdW5kfHxDYXRlZ29yaWVzU3ZjLmFkZENhdGVnb3J5KHtjYXRlZ29yeX0pLnRoZW4oKGZ1bmN0aW9uKGNhdGVnb3J5KXskc2NvcGUuaW5pdCgpLCRzY29wZS5zZWxlY3RDYXRlZ29yeShjYXRlZ29yeSl9KSksJHNjb3BlLmVudGVyZWRDYXRlZ29yeT1cIlwifSwkc2NvcGUubmV3VGFzaz1mdW5jdGlvbih0YXNrKXt2YXIgZm91bmQ9ITE7Zm9yKHZhciBpIGluICRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzKSRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldLm5hbWU9PT10YXNrJiYoZm91bmQ9ITAsJHNjb3BlLnNlbGVjdFRhc2soJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0pKTtmb3VuZHx8Q2F0ZWdvcmllc1N2Yy5hZGRUYXNrKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5Lm5hbWUse3Rhc2t9KS50aGVuKChmdW5jdGlvbigpeyRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzLnB1c2goe25hbWU6dGFza30pLCRzY29wZS5hZGRUYXNrKCRzY29wZS5zZWxlY3RlZFRhc2tzLCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzWyRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzLmxlbmd0aC0xXSl9KSksJHNjb3BlLmVudGVyZWRUYXNrPVwiXCJ9LCRzY29wZS5zZWxlY3RUYXNrPWZ1bmN0aW9uKHRhc2speyRzY29wZS5hZGRUYXNrKCRzY29wZS5zZWxlY3RlZFRhc2tzLHRhc2spLCRzY29wZS5yZW1vdmVUYXNrKCRzY29wZS5zZWxlY3RhYmxlVGFza3MsdGFzayksJHNjb3BlLmVudGVyZWRUYXNrPVwiXCJ9LCRzY29wZS51bnNlbGVjdFRhc2s9ZnVuY3Rpb24odGFzayl7JHNjb3BlLmFkZFRhc2soJHNjb3BlLnNlbGVjdGFibGVUYXNrcyx0YXNrKSwkc2NvcGUucmVtb3ZlVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcyx0YXNrKX0sJHNjb3BlLmFkZFRhc2s9ZnVuY3Rpb24odGFza0xpc3QsdGFzayl7dGFza0xpc3QucHVzaCh0YXNrKX0sJHNjb3BlLnJlbW92ZVRhc2s9ZnVuY3Rpb24odGFza0xpc3QsdGFzayl7dGFza0xpc3Quc3BsaWNlKHRhc2tMaXN0LmluZGV4T2YodGFzayksMSl9LCRzY29wZS5zdGFydFByaW9yaXRpemluZz1mdW5jdGlvbigpe0NhdGVnb3JpZXNTdmMuc2V0UHJpb3JpdHlMaXN0KCRzY29wZS5zZWxlY3RlZFRhc2tzKSwkbG9jYXRpb24ucGF0aChcIi9wcmlvcml0aXplXCIpfSwkc2NvcGUuZ2V0UXVlc3Rpb25zPWZ1bmN0aW9uKCl7aWYoISRzY29wZS5zZWxlY3RlZFRhc2tzKXJldHVyblwiXCI7Zm9yKHZhciBjb3VudGVyPTAsaT0kc2NvcGUuc2VsZWN0ZWRUYXNrcy5sZW5ndGgtMTtpPjA7aS0tKWNvdW50ZXIrPWk7cmV0dXJuIGNvdW50ZXJ9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJMb2dpbkN0cmxcIixbXCIkc2NvcGVcIixcIiRsb2NhdGlvblwiLFwiVXNlclN2Y1wiLGZ1bmN0aW9uKCRzY29wZSwkbG9jYXRpb24sVXNlclN2Yyl7dmFyIHVpPW5ldyBmaXJlYmFzZXVpLmF1dGguQXV0aFVJKGZpcmViYXNlLmF1dGgoKSk7ZnVuY3Rpb24gc3RhcnRVSSgpe3VpLnN0YXJ0KFwiI2ZpcmViYXNldWktYXV0aC1jb250YWluZXJcIix7Y2FsbGJhY2tzOntzaWduSW5TdWNjZXNzOmZ1bmN0aW9uKGN1cnJlbnRVc2VyLGNyZWRlbnRpYWwscmVkaXJlY3RVcmwpe3JldHVybiBmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXIuZ2V0SWRUb2tlbighMCkudGhlbigoZnVuY3Rpb24oaWRUb2tlbil7VXNlclN2Yy5hdXRoZW50aWNhdGUoe2Rpc3BsYXlOYW1lOmN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lLGVtYWlsOmN1cnJlbnRVc2VyLmVtYWlsLHBob3RvVVJMOmN1cnJlbnRVc2VyLnBob3RvVVJMLGVtYWlsVmVyaWZpZWQ6Y3VycmVudFVzZXIuZW1haWxWZXJpZmllZCxpZFRva2VufSkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS4kZW1pdChcImxvZ2luXCIscmVzcG9uc2UuZGF0YSksJChcIiNtb2RhbC1sb2dpblwiKS5tb2RhbChcImhpZGVcIil9KSwoZnVuY3Rpb24oKXskc2NvcGUuJGVtaXQoXCJwb3B1cFwiLHttZXNzYWdlOlwiTG9naW4gRmFpbGVkXCIsdHlwZTpcImFsZXJ0LWRhbmdlclwifSl9KSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGVycm9yKXt9KSksITF9LHNpZ25JbkZhaWx1cmU6ZnVuY3Rpb24oZXJyb3Ipe2lmKFwiZmlyZWJhc2V1aS9hbm9ueW1vdXMtdXBncmFkZS1tZXJnZS1jb25mbGljdFwiIT1lcnJvci5jb2RlKXJldHVybiBQcm9taXNlLnJlc29sdmUoKTt2YXIgY3JlZD1lcnJvci5jcmVkZW50aWFsO3JldHVybiBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aENyZWRlbnRpYWwoY3JlZCl9LHVpU2hvd246ZnVuY3Rpb24oKXtkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRlclwiKS5zdHlsZS5kaXNwbGF5PVwibm9uZVwifX0sc2lnbkluU3VjY2Vzc1VybDpcIi9ob21lXCIsc2lnbkluT3B0aW9uczpbZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQsZmlyZWJhc2UuYXV0aC5GYWNlYm9va0F1dGhQcm92aWRlci5QUk9WSURFUl9JRF0sc2lnbkluRmxvdzpcInBvcHVwXCJ9KX0kc2NvcGUuJG9uKFwibG9nb3V0XCIsKGZ1bmN0aW9uKGV2ZW50KXt1aS5yZXNldCgpLHN0YXJ0VUkoKX0pKSxzdGFydFVJKCl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlBvc3RzQ3RybFwiLFtcIiRzY29wZVwiLFwiJGZpbHRlclwiLFwiUG9zdHNTdmNcIixmdW5jdGlvbigkc2NvcGUsJGZpbHRlcixQb3N0c1N2Yyl7JHNjb3BlLmFkZFBvc3Q9ZnVuY3Rpb24oKXskc2NvcGUucG9zdEJvZHkmJlBvc3RzU3ZjLmNyZWF0ZSh7Ym9keTokc2NvcGUucG9zdEJvZHl9KS50aGVuKChmdW5jdGlvbihwb3N0KXskc2NvcGUucG9zdEJvZHk9bnVsbH0pKX0sUG9zdHNTdmMuZmV0Y2goKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLnBvc3RzPXJlc3BvbnNlLmRhdGF9KSksJHNjb3BlLiRvbihcIndzOm5ld19wb3N0XCIsKGZ1bmN0aW9uKF8scG9zdCl7JHNjb3BlLiRhcHBseSgoZnVuY3Rpb24oKXtQb3N0c1N2Yy5nZXRQb3N0KHBvc3QpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUucG9zdHMudW5zaGlmdChyZXNwb25zZS5kYXRhKX0pKX0pKX0pKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiUHJpb3JpdGl6ZUN0cmxcIixbXCIkc2NvcGVcIixcIiRsb2NhdGlvblwiLFwiQ2F0ZWdvcmllc1N2Y1wiLGZ1bmN0aW9uKCRzY29wZSwkbG9jYXRpb24sQ2F0ZWdvcmllc1N2Yyl7JHNjb3BlLnByaW9yaXR5TGlzdD1DYXRlZ29yaWVzU3ZjLmdldFByaW9yaXR5TGlzdCgpLCRzY29wZS5wcmlvcml0eUxpc3Q/KCRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uPTEsJHNjb3BlLmN1cnJlbnRRdWVzdGlvbj0xLCRzY29wZS5kb25lPSExKTokbG9jYXRpb24ucGF0aChcIi9saXN0c1wiKSwkc2NvcGUubWFrZUNob2ljZT1mdW5jdGlvbihjaG9pY2Upe2Zvcih2YXIgaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KSRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQ9PT0kc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbiYmKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlPTE9PT1jaG9pY2U/JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZTokc2NvcGUucHJpb3JpdHlMaXN0W2ldLnNlY29uZENob2ljZSk7JHNjb3BlLnNlbGVjdGVkUXVlc3Rpb249PT0kc2NvcGUuY3VycmVudFF1ZXN0aW9uJiYoJHNjb3BlLmN1cnJlbnRRdWVzdGlvbj0kc2NvcGUuY3VycmVudFF1ZXN0aW9uPT09JHNjb3BlLnByaW9yaXR5TGlzdC5sZW5ndGg/MTokc2NvcGUuY3VycmVudFF1ZXN0aW9uKzEpLCRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uPSRzY29wZS5jdXJyZW50UXVlc3Rpb247dmFyIGZvdW5kPSExO2ZvcihpIGluICRzY29wZS5wcmlvcml0eUxpc3QpaWYoXCJcIj09PSRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlKXtmb3VuZD0hMDticmVha31mb3VuZHx8KCQoXCIjcHJpb3JpdGl6ZUNob2ljZXNcIikuaGlkZSgzMDApLCRzY29wZS5kb25lPSEwKX0sJHNjb3BlLmdldEJ1dHRvblZhbHVlPWZ1bmN0aW9uKGNob2ljZSl7aWYoISRzY29wZS5wcmlvcml0eUxpc3QpcmV0dXJuXCJcIjtmb3IodmFyIGk9MDtpPCRzY29wZS5wcmlvcml0eUxpc3QubGVuZ3RoO2krKylpZigkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkPT09JHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24pcmV0dXJuIDE9PT1jaG9pY2U/JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZTokc2NvcGUucHJpb3JpdHlMaXN0W2ldLnNlY29uZENob2ljZX0sJHNjb3BlLnNlbGVjdFF1ZXN0aW9uPWZ1bmN0aW9uKHF1ZXN0aW9uKXskc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbj1xdWVzdGlvbn0sJHNjb3BlLmdldEZpbHRlcmVkUHJpb3JpdHlMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuICRzY29wZS5wcmlvcml0eUxpc3Q/JHNjb3BlLnByaW9yaXR5TGlzdC5zb3J0KChmdW5jdGlvbihhLGIpe3JldHVybiBhLmlkLWIuaWR9KSkuZmlsdGVyKChmdW5jdGlvbihxdWVzdGlvbil7cmV0dXJuXCJcIiE9PXF1ZXN0aW9uLmNob2ljZXx8cXVlc3Rpb24uaWQ9PT0kc2NvcGUuY3VycmVudFF1ZXN0aW9ufSkpOltdfSwkc2NvcGUuZ2V0Q2hvaWNlc01hZGU9ZnVuY3Rpb24oKXtpZighJHNjb3BlLnByaW9yaXR5TGlzdClyZXR1cm5cIlwiO3ZhciBjaG9pY2VzTWFkZT0wO2Zvcih2YXIgaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KVwiXCIhPT0kc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSYmY2hvaWNlc01hZGUrKztyZXR1cm4gY2hvaWNlc01hZGV9LCRzY29wZS5nZXRCdXR0b25DbGFzcz1mdW5jdGlvbihjaG9pY2Upe2lmKCEkc2NvcGUucHJpb3JpdHlMaXN0KXJldHVyblwiXCI7Zm9yKHZhciBpIGluICRzY29wZS5wcmlvcml0eUxpc3QpaWYoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZD09PSRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uKXJldHVyblwiXCI9PT0kc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZT9cImJ0bi1wcmltYXJ5XCI6MT09PWNob2ljZT8kc2NvcGUucHJpb3JpdHlMaXN0W2ldLmZpcnN0Q2hvaWNlPT09JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2U/XCJidG4tc3VjY2Vzc1wiOlwiYnRuLWRhbmdlclwiOiRzY29wZS5wcmlvcml0eUxpc3RbaV0uc2Vjb25kQ2hvaWNlPT09JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2U/XCJidG4tc3VjY2Vzc1wiOlwiYnRuLWRhbmdlclwifSwkc2NvcGUuc2hvd0Nob2ljZXM9ZnVuY3Rpb24oKXskKFwiI3ByaW9yaXRpemVDaG9pY2VzXCIpLnNob3coMWUzKSwkKFwiI3Jldmlld0Nob2ljZXNcIikuaGlkZSgpfSwkc2NvcGUuY2hhcnRDbGljaz1mdW5jdGlvbihldmVudCl7JHNjb3BlLmNoYXJ0JiZjb25zb2xlLmxvZygkc2NvcGUuY2hhcnQuZ2V0U2VnbWVudHNBdEV2ZW50KGV2ZW50KSl9LCRzY29wZS5zaG93UmVzdWx0cz1mdW5jdGlvbigpe2Zvcih2YXIgaSBpbiAkc2NvcGUuZGF0YT1bXSwkc2NvcGUub3B0aW9ucz17cmVzcG9uc2l2ZTohMCxzZWdtZW50U2hvd1N0cm9rZTohMCxzZWdtZW50U3Ryb2tlQ29sb3I6XCIjZmZmXCIsc2VnbWVudFN0cm9rZVdpZHRoOjIscGVyY2VudGFnZUlubmVyQ3V0b3V0OjAsYW5pbWF0aW9uU3RlcHM6MTAwLGFuaW1hdGlvbkVhc2luZzpcImVhc2VPdXRCb3VuY2VcIixhbmltYXRlUm90YXRlOiEwLGFuaW1hdGVTY2FsZTohMSxsZWdlbmRUZW1wbGF0ZTonPGgzIGNsYXNzPVwidGMtY2hhcnQtanMtbGVnZW5kXCIgc3R5bGU9XCJwYWRkaW5nOjVweFwiPjwlIGZvciAodmFyIGk9MDsgaTxzZWdtZW50cy5sZW5ndGg7IGkrKyl7JT48ZGl2IGNsYXNzPVwibGFiZWxcIiBzdHlsZT1cImZsb2F0OmxlZnQ7bWFyZ2luOjVweDtiYWNrZ3JvdW5kLWNvbG9yOjwlPXNlZ21lbnRzW2ldLmZpbGxDb2xvciU+XCI+PCVpZihzZWdtZW50c1tpXS5sYWJlbCl7JT48JT1zZWdtZW50c1tpXS5sYWJlbCU+PCV9JT48L2Rpdj48JX0lPjwvaDM+J30sQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzKWZvcih2YXIgaiBpbiBDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXM9MCwkc2NvcGUucHJpb3JpdHlMaXN0KUNhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS5uYW1lPT09JHNjb3BlLnByaW9yaXR5TGlzdFtqXS5jaG9pY2UmJkNhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS52b3RlcysrO2ZvcihpIGluIENhdGVnb3JpZXNTdmMuY2hvaWNlcy5zb3J0KChmdW5jdGlvbihhLGIpe3JldHVybiBhLnZvdGVzPGIudm90ZXN9KSksQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzKSRzY29wZS5kYXRhLnB1c2goe3ZhbHVlOkNhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS52b3RlcyxsYWJlbDpDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0ubmFtZX0pOyQoXCIjcHJpb3JpdGl6ZVJlc3VsdFwiKS5oaWRlKCksJChcIiNwcmlvcml0aXplQ2hvaWNlc1wiKS5oaWRlKCksJChcIiNwcmlvcml0eVJlc3VsdHNcIikuc2hvdygxZTMpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiUHJvZmlsZUN0cmxcIixbXCIkc2NvcGVcIixcIiRsb2NhdGlvblwiLFwiVXNlclN2Y1wiLGZ1bmN0aW9uKCRzY29wZSwkbG9jYXRpb24sVXNlclN2Yyl7JHNjb3BlLmN1cnJlbnRVc2VyPygkKFwiI3NleC1pbmRpY2F0b3JcIikub2Zmc2V0KHtsZWZ0OiRzY29wZS5jdXJyZW50VXNlci5nZW5kZXIuc2V4LzIwMCokKFwiI3NleFwiKS53aWR0aCgpKyQoXCIjc2V4XCIpLm9mZnNldCgpLmxlZnR9KSwkKFwiI2lkZW50aXR5LWluZGljYXRvclwiKS5vZmZzZXQoe2xlZnQ6JHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlci5pZGVudGl0eS8yMDAqJChcIiNpZGVudGl0eVwiKS53aWR0aCgpKyQoXCIjaWRlbnRpdHlcIikub2Zmc2V0KCkubGVmdH0pKTokbG9jYXRpb24ucGF0aChcIi9cIiksJHNjb3BlLnNleGVzPVtcIk1hbGVcIixcIkZ0TSBNYWxlXCIsXCJJbnRlcnNleFwiLFwiTXRGIEZlbWFsZVwiLFwiRmVtYWxlXCJdLCRzY29wZS5pZGVudGl0aWVzPVtcIk1hblwiLFwiQmlnZW5kZXJcIixcIlBhbmdlbmRlclwiLFwiQWdlbmRlclwiLFwiUG9seWdlbmRlclwiLFwiR2VuZGVyZmx1aWRcIixcIkdlbmRlcnF1ZWVyXCIsXCJRdWVlclwiLFwiV29tYW5cIl0sJHNjb3BlLmRhdGVPcHRpb25zPXttYXhEYXRlOm5ldyBEYXRlLG1pbkRhdGU6bmV3IERhdGUoMTkwMCwxLDEpLGluaXREYXRlOm5ldyBEYXRlKDJlMywxLDEpLGRhdGVwaWNrZXJNb2RlOlwieWVhclwifSwkc2NvcGUuZ2VuZGVyPWZ1bmN0aW9uKGFycmF5LHBlcmNlbnRhZ2Upe3JldHVybiBhcnJheVtNYXRoLnJvdW5kKHBlcmNlbnRhZ2UvMjAwKihhcnJheS5sZW5ndGgtMSkpXX0sJHNjb3BlLnN0YXJ0U2xpZGVyPWZ1bmN0aW9uKCl7fSwkc2NvcGUuZHJhZ1NsaWRlcj1mdW5jdGlvbihldmVudCx1aSx0eXBlKXskc2NvcGUuY3VycmVudFVzZXIuZ2VuZGVyW3R5cGVdPU1hdGgucm91bmQoKCQoXCIjXCIrdHlwZStcIi1pbmRpY2F0b3JcIikub2Zmc2V0KCkubGVmdC0kKFwiI1wiK3R5cGUpLm9mZnNldCgpLmxlZnQpLygkKFwiI1wiK3R5cGUpLndpZHRoKCktJChcIiNcIit0eXBlK1wiLWluZGljYXRvclwiKS53aWR0aCgpKSoyMDApLCRzY29wZS4kYXBwbHkoKX0sJHNjb3BlLnN0b3BTbGlkZXI9ZnVuY3Rpb24oKXt9LCRzY29wZS51c2VybmFtZVRvZ2dsZT0hMCwkc2NvcGUucGFzc3dvcmRUb2dnbGU9ITAsJHNjb3BlLnRvZ2dsZVVzZXJuYW1lPWZ1bmN0aW9uKCl7JHNjb3BlLnVzZXJuYW1lVG9nZ2xlPSEkc2NvcGUudXNlcm5hbWVUb2dnbGUsJHNjb3BlLm5ld1VzZXJuYW1lPSRzY29wZS5jdXJyZW50VXNlci51c2VybmFtZX0sJHNjb3BlLnRvZ2dsZVBhc3N3b3JkPWZ1bmN0aW9uKCl7JHNjb3BlLm5ld1Bhc3N3b3JkPW51bGwsJHNjb3BlLmNvbmZpcm1QYXNzd29yZD1udWxsLCRzY29wZS5wYXNzd29yZFRvZ2dsZT0hJHNjb3BlLnBhc3N3b3JkVG9nZ2xlfSwkc2NvcGUuY2hlY2tQYXNzd29yZD1mdW5jdGlvbihwYXNzd29yZCl7aWYocGFzc3dvcmQpe3ZhciB1c2VyPSRzY29wZS5jdXJyZW50VXNlci5faWQ7VXNlclN2Yy5jaGVja1Bhc3N3b3JkKHVzZXIscGFzc3dvcmQpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUudG9nZ2xlUGFzc3dvcmQoKX0pLChmdW5jdGlvbigpe3ZhciBvcmlnaW5hbEJnPSQoXCIucGFzc3dvcmRcIikuY3NzKFwiYmFja2dyb3VuZENvbG9yXCIpOyQoXCIucGFzc3dvcmRcIikuYW5pbWF0ZSh7YmFja2dyb3VuZENvbG9yOlwiI0ZGQjZDMVwifSwyMDApLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjpvcmlnaW5hbEJnfSwyMDApfSkpfX0sJHNjb3BlLmNoYW5nZVBhc3N3b3JkPWZ1bmN0aW9uKG9sZFBhc3N3b3JkLG5ld1Bhc3N3b3JkLGNvbmZpcm1QYXNzd29yZCl7aWYobmV3UGFzc3dvcmQpaWYobmV3UGFzc3dvcmQ9PWNvbmZpcm1QYXNzd29yZCl7dmFyIHVzZXI9JHNjb3BlLmN1cnJlbnRVc2VyLl9pZDtVc2VyU3ZjLmNoYW5nZVBhc3N3b3JkKHVzZXIsb2xkUGFzc3dvcmQsbmV3UGFzc3dvcmQpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuJGVtaXQoXCJwb3B1cFwiLHttZXNzYWdlOlwiUGFzc3dvcmQgQ2hhbmdlZFwiLHR5cGU6XCJhbGVydC1zdWNjZXNzXCJ9KSwkc2NvcGUub2xkUGFzc3dvcmQ9bnVsbCwkc2NvcGUudG9nZ2xlUGFzc3dvcmQoKX0pLChmdW5jdGlvbigpeyRzY29wZS4kZW1pdChcInBvcHVwXCIse21lc3NhZ2U6XCJQYXNzd29yZCBDaGFuZ2UgRmFpbGVkXCIsdHlwZTpcImFsZXJ0LWRhbmdlclwifSl9KSl9ZWxzZXt2YXIgb3JpZ2luYWxCZz0kKFwiLnBhc3N3b3JkXCIpLmNzcyhcImJhY2tncm91bmRDb2xvclwiKTskKFwiLnBhc3N3b3JkXCIpLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjpcIiNGRkI2QzFcIn0sMjAwKS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6b3JpZ2luYWxCZ30sMjAwKX19LCRzY29wZS5jaGFuZ2VVc2VybmFtZT1mdW5jdGlvbih1c2VybmFtZSl7JHNjb3BlLiRlbWl0KFwibG9hZGluZ1wiKSxVc2VyU3ZjLmNoYW5nZVVzZXJuYW1lKCRzY29wZS5jdXJyZW50VXNlci5faWQsdXNlcm5hbWUpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuJGVtaXQoXCJ1cGRhdGVcIixyZXNwb25zZS5kYXRhKX0pLChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwicG9wdXBcIix7bWVzc2FnZTp1c2VybmFtZStcIiBhbHJlYWR5IGluIHVzZVwiLHR5cGU6XCJhbGVydC1kYW5nZXJcIn0pfSkpfSwkc2NvcGUudXBkYXRlVXNlcj1mdW5jdGlvbigpeyRzY29wZS5jdXJyZW50VXNlciYmKCRzY29wZS4kZW1pdChcImxvYWRpbmdcIiksVXNlclN2Yy51cGRhdGVVc2VyKCRzY29wZS5jdXJyZW50VXNlcikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS4kZW1pdChcInVwZGF0ZVwiLHJlc3BvbnNlLmRhdGEpfSkpKX0sJHNjb3BlLiR3YXRjaChcImN1cnJlbnRVc2VyLmZsYWdzLmxlbmd0aFwiLChmdW5jdGlvbihsZW5ndGgpeyRzY29wZS51cGRhdGVVc2VyKCl9KSksJHNjb3BlLmxvYWRDb3VudHJpZXM9ZnVuY3Rpb24oJHF1ZXJ5KXtyZXR1cm5be25hbWU6XCJBbmRvcnJhXCIsZmxhZzpcImZsYWctYWRcIix0aWRiaXQ6XCJcIn0se25hbWU6XCJVbml0ZWQgQXJhYiBFbWlyYXRlc1wiLGZsYWc6XCJmbGFnLWFlXCJ9LHtuYW1lOlwiQWZnaGFuaXN0YW5cIixmbGFnOlwiZmxhZy1hZlwifSx7bmFtZTpcIkFudGlndWEgYW5kIEJhcmJ1ZGFcIixmbGFnOlwiZmxhZy1hZ1wifSx7bmFtZTpcIkFuZ3VpbGxhXCIsZmxhZzpcImZsYWctYWlcIn0se25hbWU6XCJBbGJhbmlhXCIsZmxhZzpcImZsYWctYWxcIn0se25hbWU6XCJBcm1lbmlhXCIsZmxhZzpcImZsYWctYW1cIn0se25hbWU6XCJBbmdvbGFcIixmbGFnOlwiZmxhZy1hb1wifSx7bmFtZTpcIkFudGFyY3RpY2FcIixmbGFnOlwiZmxhZy1hcVwifSx7bmFtZTpcIkFyZ2VudGluYVwiLGZsYWc6XCJmbGFnLWFyXCJ9LHtuYW1lOlwiQW1lcmljYW4gU29tb2FcIixmbGFnOlwiZmxhZy1hc1wifSx7bmFtZTpcIkF1c3RyaWFcIixmbGFnOlwiZmxhZy1hdFwifSx7bmFtZTpcIkF1c3RyYWxpYVwiLGZsYWc6XCJmbGFnLWF1XCJ9LHtuYW1lOlwiQXJ1YmFcIixmbGFnOlwiZmxhZy1hd1wifSx7bmFtZTpcIsOFbGFuZCBJc2xhbmRzXCIsZmxhZzpcImZsYWctYXhcIn0se25hbWU6XCJBemVyYmFpamFuXCIsZmxhZzpcImZsYWctYXpcIn0se25hbWU6XCJCb3NuaWEgYW5kIEhlcnplZ292aW5hXCIsZmxhZzpcImZsYWctYmFcIn0se25hbWU6XCJCYXJiYWRvc1wiLGZsYWc6XCJmbGFnLWJiXCJ9LHtuYW1lOlwiQmFuZ2xhZGVzaFwiLGZsYWc6XCJmbGFnLWJkXCJ9LHtuYW1lOlwiQmVsZ2l1bVwiLGZsYWc6XCJmbGFnLWJlXCJ9LHtuYW1lOlwiQnVya2luYSBGYXNvXCIsZmxhZzpcImZsYWctYmZcIn0se25hbWU6XCJCdWxnYXJpYVwiLGZsYWc6XCJmbGFnLWJnXCJ9LHtuYW1lOlwiQmFocmFpblwiLGZsYWc6XCJmbGFnLWJoXCJ9LHtuYW1lOlwiQnVydW5kaVwiLGZsYWc6XCJmbGFnLWJpXCJ9LHtuYW1lOlwiQmVuaW5cIixmbGFnOlwiZmxhZy1ialwifSx7bmFtZTpcIlNhaW50IEJhcnRow6lsZW15XCIsZmxhZzpcImZsYWctYmxcIn0se25hbWU6XCJCZXJtdWRhXCIsZmxhZzpcImZsYWctYm1cIn0se25hbWU6XCJCcnVuZWkgXCIsZmxhZzpcImZsYWctYm5cIn0se25hbWU6XCJCb2xpdmlhLCBQbHVyaW5hdGlvbmFsIFN0YXRlIG9mXCIsZmxhZzpcImZsYWctYm9cIn0se25hbWU6XCJCb25haXJlLCBTaW50IEV1c3RhdGl1cyBhbmQgU2FiYVwiLGZsYWc6XCJmbGFnLWJxXCJ9LHtuYW1lOlwiQnJhemlsXCIsZmxhZzpcImZsYWctYnJcIn0se25hbWU6XCJCYWhhbWFzXCIsZmxhZzpcImZsYWctYnNcIn0se25hbWU6XCJCaHV0YW5cIixmbGFnOlwiZmxhZy1idFwifSx7bmFtZTpcIkJvdXZldCBJc2xhbmRcIixmbGFnOlwiZmxhZy1idlwifSx7bmFtZTpcIkJvdHN3YW5hXCIsZmxhZzpcImZsYWctYndcIn0se25hbWU6XCJCZWxhcnVzXCIsZmxhZzpcImZsYWctYnlcIn0se25hbWU6XCJCZWxpemVcIixmbGFnOlwiZmxhZy1ielwifSx7bmFtZTpcIkNhbmFkYVwiLGZsYWc6XCJmbGFnLWNhXCJ9LHtuYW1lOlwiQ29jb3MgKEtlZWxpbmcpIElzbGFuZHNcIixmbGFnOlwiZmxhZy1jY1wifSx7bmFtZTpcIkNvbmdvLCB0aGUgRGVtb2NyYXRpYyBSZXB1YmxpYyBvZiB0aGVcIixmbGFnOlwiZmxhZy1jZFwifSx7bmFtZTpcIkNlbnRyYWwgQWZyaWNhbiBSZXB1YmxpY1wiLGZsYWc6XCJmbGFnLWNmXCJ9LHtuYW1lOlwiQ29uZ29cIixmbGFnOlwiZmxhZy1jZ1wifSx7bmFtZTpcIlN3aXR6ZXJsYW5kXCIsZmxhZzpcImZsYWctY2hcIn0se25hbWU6XCJDw7R0ZSBkJ0l2b2lyZVwiLGZsYWc6XCJmbGFnLWNpXCJ9LHtuYW1lOlwiQ29vayBJc2xhbmRzXCIsZmxhZzpcImZsYWctY2tcIn0se25hbWU6XCJDaGlsZVwiLGZsYWc6XCJmbGFnLWNsXCJ9LHtuYW1lOlwiQ2FtZXJvb25cIixmbGFnOlwiZmxhZy1jbVwifSx7bmFtZTpcIkNoaW5hXCIsZmxhZzpcImZsYWctY25cIn0se25hbWU6XCJDb2xvbWJpYVwiLGZsYWc6XCJmbGFnLWNvXCJ9LHtuYW1lOlwiQ29zdGEgUmljYVwiLGZsYWc6XCJmbGFnLWNyXCJ9LHtuYW1lOlwiQ3ViYVwiLGZsYWc6XCJmbGFnLWN1XCJ9LHtuYW1lOlwiQ2FibyBWZXJkZVwiLGZsYWc6XCJmbGFnLWN2XCJ9LHtuYW1lOlwiQ3VyYcOnYW9cIixmbGFnOlwiZmxhZy1jd1wifSx7bmFtZTpcIkNocmlzdG1hcyBJc2xhbmRcIixmbGFnOlwiZmxhZy1jeFwifSx7bmFtZTpcIkN5cHJ1c1wiLGZsYWc6XCJmbGFnLWN5XCJ9LHtuYW1lOlwiQ3plY2ggUmVwdWJsaWNcIixmbGFnOlwiZmxhZy1jelwifSx7bmFtZTpcIkdlcm1hbnlcIixmbGFnOlwiZmxhZy1kZVwifSx7bmFtZTpcIkRqaWJvdXRpXCIsZmxhZzpcImZsYWctZGpcIn0se25hbWU6XCJEZW5tYXJrXCIsZmxhZzpcImZsYWctZGtcIn0se25hbWU6XCJEb21pbmljYVwiLGZsYWc6XCJmbGFnLWRtXCJ9LHtuYW1lOlwiRG9taW5pY2FuIFJlcHVibGljXCIsZmxhZzpcImZsYWctZG9cIn0se25hbWU6XCJBbGdlcmlhXCIsZmxhZzpcImZsYWctZHpcIn0se25hbWU6XCJFY3VhZG9yXCIsZmxhZzpcImZsYWctZWNcIn0se25hbWU6XCJFc3RvbmlhXCIsZmxhZzpcImZsYWctZWVcIn0se25hbWU6XCJFZ3lwdFwiLGZsYWc6XCJmbGFnLWVnXCJ9LHtuYW1lOlwiV2VzdGVybiBTYWhhcmFcIixmbGFnOlwiZmxhZy1laFwifSx7bmFtZTpcIkVyaXRyZWFcIixmbGFnOlwiZmxhZy1lclwifSx7bmFtZTpcIlNwYWluXCIsZmxhZzpcImZsYWctZXNcIn0se25hbWU6XCJFdGhpb3BpYVwiLGZsYWc6XCJmbGFnLWV0XCJ9LHtuYW1lOlwiRmlubGFuZFwiLGZsYWc6XCJmbGFnLWZpXCJ9LHtuYW1lOlwiRmlqaVwiLGZsYWc6XCJmbGFnLWZqXCJ9LHtuYW1lOlwiRmFsa2xhbmQgSXNsYW5kcyAoTWFsdmluYXMpXCIsZmxhZzpcImZsYWctZmtcIn0se25hbWU6XCJNaWNyb25lc2lhLCBGZWRlcmF0ZWQgU3RhdGVzIG9mXCIsZmxhZzpcImZsYWctZm1cIn0se25hbWU6XCJGYXJvZSBJc2xhbmRzXCIsZmxhZzpcImZsYWctZm9cIn0se25hbWU6XCJGcmFuY2VcIixmbGFnOlwiZmxhZy1mclwifSx7bmFtZTpcIkdhYm9uXCIsZmxhZzpcImZsYWctZ2FcIn0se25hbWU6XCJVbml0ZWQgS2luZ2RvbSBvZiBHcmVhdCBCcml0YWluIGFuZCBOb3J0aGVybiBJcmVsYW5kXCIsZmxhZzpcImZsYWctZ2JcIn0se25hbWU6XCJHcmVuYWRhXCIsZmxhZzpcImZsYWctZ2RcIn0se25hbWU6XCJHZW9yZ2lhXCIsZmxhZzpcImZsYWctZ2VcIn0se25hbWU6XCJGcmVuY2ggR3VpYW5hXCIsZmxhZzpcImZsYWctZ2ZcIn0se25hbWU6XCJHdWVybnNleVwiLGZsYWc6XCJmbGFnLWdnXCJ9LHtuYW1lOlwiR2hhbmFcIixmbGFnOlwiZmxhZy1naFwifSx7bmFtZTpcIkdpYnJhbHRhclwiLGZsYWc6XCJmbGFnLWdpXCJ9LHtuYW1lOlwiR3JlZW5sYW5kXCIsZmxhZzpcImZsYWctZ2xcIn0se25hbWU6XCJHYW1iaWFcIixmbGFnOlwiZmxhZy1nbVwifSx7bmFtZTpcIkd1aW5lYVwiLGZsYWc6XCJmbGFnLWduXCJ9LHtuYW1lOlwiR3VhZGVsb3VwZVwiLGZsYWc6XCJmbGFnLWdwXCJ9LHtuYW1lOlwiRXF1YXRvcmlhbCBHdWluZWFcIixmbGFnOlwiZmxhZy1ncVwifSx7bmFtZTpcIkdyZWVjZVwiLGZsYWc6XCJmbGFnLWdyXCJ9LHtuYW1lOlwiU291dGggR2VvcmdpYSBhbmQgdGhlIFNvdXRoIFNhbmR3aWNoIElzbGFuZHNcIixmbGFnOlwiZmxhZy1nc1wifSx7bmFtZTpcIkd1YXRlbWFsYVwiLGZsYWc6XCJmbGFnLWd0XCJ9LHtuYW1lOlwiR3VhbVwiLGZsYWc6XCJmbGFnLWd1XCJ9LHtuYW1lOlwiR3VpbmVhLUJpc3NhdVwiLGZsYWc6XCJmbGFnLWd3XCJ9LHtuYW1lOlwiR3V5YW5hXCIsZmxhZzpcImZsYWctZ3lcIn0se25hbWU6XCJIb25nIEtvbmdcIixmbGFnOlwiZmxhZy1oa1wifSx7bmFtZTpcIkhlYXJkIElzbGFuZCBhbmQgTWNEb25hbGQgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWhtXCJ9LHtuYW1lOlwiSG9uZHVyYXNcIixmbGFnOlwiZmxhZy1oblwifSx7bmFtZTpcIkNyb2F0aWFcIixmbGFnOlwiZmxhZy1oclwifSx7bmFtZTpcIkhhaXRpXCIsZmxhZzpcImZsYWctaHRcIn0se25hbWU6XCJIdW5nYXJ5XCIsZmxhZzpcImZsYWctaHVcIn0se25hbWU6XCJJbmRvbmVzaWFcIixmbGFnOlwiZmxhZy1pZFwifSx7bmFtZTpcIklyZWxhbmRcIixmbGFnOlwiZmxhZy1pZVwifSx7bmFtZTpcIklzcmFlbFwiLGZsYWc6XCJmbGFnLWlsXCJ9LHtuYW1lOlwiSXNsZSBvZiBNYW5cIixmbGFnOlwiZmxhZy1pbVwifSx7bmFtZTpcIkluZGlhXCIsZmxhZzpcImZsYWctaW5cIn0se25hbWU6XCJCcml0aXNoIEluZGlhbiBPY2VhbiBUZXJyaXRvcnlcIixmbGFnOlwiZmxhZy1pb1wifSx7bmFtZTpcIklyYXFcIixmbGFnOlwiZmxhZy1pcVwifSx7bmFtZTpcIklyYW4sIElzbGFtaWMgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1pclwifSx7bmFtZTpcIkljZWxhbmRcIixmbGFnOlwiZmxhZy1pc1wifSx7bmFtZTpcIkl0YWx5XCIsZmxhZzpcImZsYWctaXRcIn0se25hbWU6XCJKZXJzZXlcIixmbGFnOlwiZmxhZy1qZVwifSx7bmFtZTpcIkphbWFpY2FcIixmbGFnOlwiZmxhZy1qbVwifSx7bmFtZTpcIkpvcmRhblwiLGZsYWc6XCJmbGFnLWpvXCJ9LHtuYW1lOlwiSmFwYW5cIixmbGFnOlwiZmxhZy1qcFwifSx7bmFtZTpcIktlbnlhXCIsZmxhZzpcImZsYWcta2VcIn0se25hbWU6XCJLeXJneXpzdGFuXCIsZmxhZzpcImZsYWcta2dcIn0se25hbWU6XCJDYW1ib2RpYVwiLGZsYWc6XCJmbGFnLWtoXCJ9LHtuYW1lOlwiS2lyaWJhdGlcIixmbGFnOlwiZmxhZy1raVwifSx7bmFtZTpcIkNvbW9yb3NcIixmbGFnOlwiZmxhZy1rbVwifSx7bmFtZTpcIlNhaW50IEtpdHRzIGFuZCBOZXZpc1wiLGZsYWc6XCJmbGFnLWtuXCJ9LHtuYW1lOlwiS29yZWEsIERlbW9jcmF0aWMgUGVvcGxlJ3MgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1rcFwifSx7bmFtZTpcIktvcmVhLCBSZXB1YmxpYyBvZlwiLGZsYWc6XCJmbGFnLWtyXCJ9LHtuYW1lOlwiS3V3YWl0XCIsZmxhZzpcImZsYWcta3dcIn0se25hbWU6XCJDYXltYW4gSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWt5XCJ9LHtuYW1lOlwiS2F6YWtoc3RhblwiLGZsYWc6XCJmbGFnLWt6XCJ9LHtuYW1lOlwiTGFvIFBlb3BsZSdzIERlbW9jcmF0aWMgUmVwdWJsaWNcIixmbGFnOlwiZmxhZy1sYVwifSx7bmFtZTpcIkxlYmFub25cIixmbGFnOlwiZmxhZy1sYlwifSx7bmFtZTpcIlNhaW50IEx1Y2lhXCIsZmxhZzpcImZsYWctbGNcIn0se25hbWU6XCJMaWVjaHRlbnN0ZWluXCIsZmxhZzpcImZsYWctbGlcIn0se25hbWU6XCJTcmkgTGFua2FcIixmbGFnOlwiZmxhZy1sa1wifSx7bmFtZTpcIkxpYmVyaWFcIixmbGFnOlwiZmxhZy1sclwifSx7bmFtZTpcIkxlc290aG9cIixmbGFnOlwiZmxhZy1sc1wifSx7bmFtZTpcIkxpdGh1YW5pYVwiLGZsYWc6XCJmbGFnLWx0XCJ9LHtuYW1lOlwiTHV4ZW1ib3VyZ1wiLGZsYWc6XCJmbGFnLWx1XCJ9LHtuYW1lOlwiTGF0dmlhXCIsZmxhZzpcImZsYWctbHZcIn0se25hbWU6XCJMaWJ5YVwiLGZsYWc6XCJmbGFnLWx5XCJ9LHtuYW1lOlwiTW9yb2Njb1wiLGZsYWc6XCJmbGFnLW1hXCJ9LHtuYW1lOlwiTW9uYWNvXCIsZmxhZzpcImZsYWctbWNcIn0se25hbWU6XCJNb2xkb3ZhLCBSZXB1YmxpYyBvZlwiLGZsYWc6XCJmbGFnLW1kXCJ9LHtuYW1lOlwiTW9udGVuZWdyb1wiLGZsYWc6XCJmbGFnLW1lXCJ9LHtuYW1lOlwiU2FpbnQgTWFydGluIChGcmVuY2ggcGFydClcIixmbGFnOlwiZmxhZy1tZlwifSx7bmFtZTpcIk1hZGFnYXNjYXJcIixmbGFnOlwiZmxhZy1tZ1wifSx7bmFtZTpcIk1hcnNoYWxsIElzbGFuZHNcIixmbGFnOlwiZmxhZy1taFwifSx7bmFtZTpcIk1hY2Vkb25pYSwgdGhlIGZvcm1lciBZdWdvc2xhdiBSZXB1YmxpYyBvZlwiLGZsYWc6XCJmbGFnLW1rXCJ9LHtuYW1lOlwiTWFsaVwiLGZsYWc6XCJmbGFnLW1sXCJ9LHtuYW1lOlwiTXlhbm1hclwiLGZsYWc6XCJmbGFnLW1tXCJ9LHtuYW1lOlwiTW9uZ29saWFcIixmbGFnOlwiZmxhZy1tblwifSx7bmFtZTpcIk1hY2FvXCIsZmxhZzpcImZsYWctbW9cIn0se25hbWU6XCJOb3J0aGVybiBNYXJpYW5hIElzbGFuZHNcIixmbGFnOlwiZmxhZy1tcFwifSx7bmFtZTpcIk1hcnRpbmlxdWVcIixmbGFnOlwiZmxhZy1tcVwifSx7bmFtZTpcIk1hdXJpdGFuaWFcIixmbGFnOlwiZmxhZy1tclwifSx7bmFtZTpcIk1vbnRzZXJyYXRcIixmbGFnOlwiZmxhZy1tc1wifSx7bmFtZTpcIk1hbHRhXCIsZmxhZzpcImZsYWctbXRcIn0se25hbWU6XCJNYXVyaXRpdXNcIixmbGFnOlwiZmxhZy1tdVwifSx7bmFtZTpcIk1hbGRpdmVzXCIsZmxhZzpcImZsYWctbXZcIn0se25hbWU6XCJNYWxhd2lcIixmbGFnOlwiZmxhZy1td1wifSx7bmFtZTpcIk1leGljb1wiLGZsYWc6XCJmbGFnLW14XCJ9LHtuYW1lOlwiTWFsYXlzaWFcIixmbGFnOlwiZmxhZy1teVwifSx7bmFtZTpcIk1vemFtYmlxdWVcIixmbGFnOlwiZmxhZy1telwifSx7bmFtZTpcIk5hbWliaWFcIixmbGFnOlwiZmxhZy1uYVwifSx7bmFtZTpcIk5ldyBDYWxlZG9uaWFcIixmbGFnOlwiZmxhZy1uY1wifSx7bmFtZTpcIk5pZ2VyXCIsZmxhZzpcImZsYWctbmVcIn0se25hbWU6XCJOb3Jmb2xrIElzbGFuZFwiLGZsYWc6XCJmbGFnLW5mXCJ9LHtuYW1lOlwiTmlnZXJpYVwiLGZsYWc6XCJmbGFnLW5nXCJ9LHtuYW1lOlwiTmljYXJhZ3VhXCIsZmxhZzpcImZsYWctbmlcIn0se25hbWU6XCJOZXRoZXJsYW5kc1wiLGZsYWc6XCJmbGFnLW5sXCJ9LHtuYW1lOlwiTm9yd2F5XCIsZmxhZzpcImZsYWctbm9cIn0se25hbWU6XCJOZXBhbFwiLGZsYWc6XCJmbGFnLW5wXCJ9LHtuYW1lOlwiTmF1cnVcIixmbGFnOlwiZmxhZy1uclwifSx7bmFtZTpcIk5pdWVcIixmbGFnOlwiZmxhZy1udVwifSx7bmFtZTpcIk5ldyBaZWFsYW5kXCIsZmxhZzpcImZsYWctbnpcIn0se25hbWU6XCJPbWFuXCIsZmxhZzpcImZsYWctb21cIn0se25hbWU6XCJQYW5hbWFcIixmbGFnOlwiZmxhZy1wYVwifSx7bmFtZTpcIlBlcnVcIixmbGFnOlwiZmxhZy1wZVwifSx7bmFtZTpcIkZyZW5jaCBQb2x5bmVzaWFcIixmbGFnOlwiZmxhZy1wZlwifSx7bmFtZTpcIlBhcHVhIE5ldyBHdWluZWFcIixmbGFnOlwiZmxhZy1wZ1wifSx7bmFtZTpcIlBoaWxpcHBpbmVzXCIsZmxhZzpcImZsYWctcGhcIn0se25hbWU6XCJQYWtpc3RhblwiLGZsYWc6XCJmbGFnLXBrXCJ9LHtuYW1lOlwiUG9sYW5kXCIsZmxhZzpcImZsYWctcGxcIn0se25hbWU6XCJTYWludCBQaWVycmUgYW5kIE1pcXVlbG9uXCIsZmxhZzpcImZsYWctcG1cIn0se25hbWU6XCJQaXRjYWlyblwiLGZsYWc6XCJmbGFnLXBuXCJ9LHtuYW1lOlwiUHVlcnRvIFJpY29cIixmbGFnOlwiZmxhZy1wclwifSx7bmFtZTpcIlBhbGVzdGluZSwgU3RhdGUgb2ZcIixmbGFnOlwiZmxhZy1wc1wifSx7bmFtZTpcIlBvcnR1Z2FsXCIsZmxhZzpcImZsYWctcHRcIn0se25hbWU6XCJQYWxhdVwiLGZsYWc6XCJmbGFnLXB3XCJ9LHtuYW1lOlwiUGFyYWd1YXlcIixmbGFnOlwiZmxhZy1weVwifSx7bmFtZTpcIlFhdGFyXCIsZmxhZzpcImZsYWctcWFcIn0se25hbWU6XCJSw6l1bmlvblwiLGZsYWc6XCJmbGFnLXJlXCJ9LHtuYW1lOlwiUm9tYW5pYVwiLGZsYWc6XCJmbGFnLXJvXCJ9LHtuYW1lOlwiU2VyYmlhXCIsZmxhZzpcImZsYWctcnNcIn0se25hbWU6XCJSdXNzaWFuIEZlZGVyYXRpb25cIixmbGFnOlwiZmxhZy1ydVwifSx7bmFtZTpcIlJ3YW5kYVwiLGZsYWc6XCJmbGFnLXJ3XCJ9LHtuYW1lOlwiU2F1ZGkgQXJhYmlhXCIsZmxhZzpcImZsYWctc2FcIn0se25hbWU6XCJTb2xvbW9uIElzbGFuZHNcIixmbGFnOlwiZmxhZy1zYlwifSx7bmFtZTpcIlNleWNoZWxsZXNcIixmbGFnOlwiZmxhZy1zY1wifSx7bmFtZTpcIlN1ZGFuXCIsZmxhZzpcImZsYWctc2RcIn0se25hbWU6XCJTd2VkZW5cIixmbGFnOlwiZmxhZy1zZVwifSx7bmFtZTpcIlNpbmdhcG9yZVwiLGZsYWc6XCJmbGFnLXNnXCJ9LHtuYW1lOlwiU2FpbnQgSGVsZW5hLCBBc2NlbnNpb24gYW5kIFRyaXN0YW4gZGEgQ3VuaGFcIixmbGFnOlwiZmxhZy1zaFwifSx7bmFtZTpcIlNsb3ZlbmlhXCIsZmxhZzpcImZsYWctc2lcIn0se25hbWU6XCJTdmFsYmFyZCBhbmQgSmFuIE1heWVuXCIsZmxhZzpcImZsYWctc2pcIn0se25hbWU6XCJTbG92YWtpYVwiLGZsYWc6XCJmbGFnLXNrXCJ9LHtuYW1lOlwiU2llcnJhIExlb25lXCIsZmxhZzpcImZsYWctc2xcIn0se25hbWU6XCJTYW4gTWFyaW5vXCIsZmxhZzpcImZsYWctc21cIn0se25hbWU6XCJTZW5lZ2FsXCIsZmxhZzpcImZsYWctc25cIn0se25hbWU6XCJTb21hbGlhXCIsZmxhZzpcImZsYWctc29cIn0se25hbWU6XCJTdXJpbmFtZVwiLGZsYWc6XCJmbGFnLXNyXCJ9LHtuYW1lOlwiU291dGggU3VkYW5cIixmbGFnOlwiZmxhZy1zc1wifSx7bmFtZTpcIlNhbyBUb21lIGFuZCBQcmluY2lwZVwiLGZsYWc6XCJmbGFnLXN0XCJ9LHtuYW1lOlwiRWwgU2FsdmFkb3JcIixmbGFnOlwiZmxhZy1zdlwifSx7bmFtZTpcIlNpbnQgTWFhcnRlbiAoRHV0Y2ggcGFydClcIixmbGFnOlwiZmxhZy1zeFwifSx7bmFtZTpcIlN5cmlhbiBBcmFiIFJlcHVibGljXCIsZmxhZzpcImZsYWctc3lcIn0se25hbWU6XCJTd2F6aWxhbmRcIixmbGFnOlwiZmxhZy1zelwifSx7bmFtZTpcIlR1cmtzIGFuZCBDYWljb3MgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLXRjXCJ9LHtuYW1lOlwiQ2hhZFwiLGZsYWc6XCJmbGFnLXRkXCJ9LHtuYW1lOlwiRnJlbmNoIFNvdXRoZXJuIFRlcnJpdG9yaWVzXCIsZmxhZzpcImZsYWctdGZcIn0se25hbWU6XCJUb2dvXCIsZmxhZzpcImZsYWctdGdcIn0se25hbWU6XCJUaGFpbGFuZFwiLGZsYWc6XCJmbGFnLXRoXCJ9LHtuYW1lOlwiVGFqaWtpc3RhblwiLGZsYWc6XCJmbGFnLXRqXCJ9LHtuYW1lOlwiVG9rZWxhdVwiLGZsYWc6XCJmbGFnLXRrXCJ9LHtuYW1lOlwiVGltb3ItTGVzdGVcIixmbGFnOlwiZmxhZy10bFwifSx7bmFtZTpcIlR1cmttZW5pc3RhblwiLGZsYWc6XCJmbGFnLXRtXCJ9LHtuYW1lOlwiVHVuaXNpYVwiLGZsYWc6XCJmbGFnLXRuXCJ9LHtuYW1lOlwiVG9uZ2FcIixmbGFnOlwiZmxhZy10b1wifSx7bmFtZTpcIlR1cmtleVwiLGZsYWc6XCJmbGFnLXRyXCJ9LHtuYW1lOlwiVHJpbmlkYWQgYW5kIFRvYmFnb1wiLGZsYWc6XCJmbGFnLXR0XCJ9LHtuYW1lOlwiVHV2YWx1XCIsZmxhZzpcImZsYWctdHZcIn0se25hbWU6XCJUYWl3YW4sIFByb3ZpbmNlIG9mIENoaW5hXCIsZmxhZzpcImZsYWctdHdcIn0se25hbWU6XCJUYW56YW5pYSwgVW5pdGVkIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWctdHpcIn0se25hbWU6XCJVa3JhaW5lXCIsZmxhZzpcImZsYWctdWFcIn0se25hbWU6XCJVZ2FuZGFcIixmbGFnOlwiZmxhZy11Z1wifSx7bmFtZTpcIlVuaXRlZCBTdGF0ZXMgTWlub3IgT3V0bHlpbmcgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLXVtXCJ9LHtuYW1lOlwiVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhXCIsZmxhZzpcImZsYWctdXNcIn0se25hbWU6XCJVcnVndWF5XCIsZmxhZzpcImZsYWctdXlcIn0se25hbWU6XCJVemJla2lzdGFuXCIsZmxhZzpcImZsYWctdXpcIn0se25hbWU6XCJIb2x5IFNlZVwiLGZsYWc6XCJmbGFnLXZhXCJ9LHtuYW1lOlwiU2FpbnQgVmluY2VudCBhbmQgdGhlIEdyZW5hZGluZXNcIixmbGFnOlwiZmxhZy12Y1wifSx7bmFtZTpcIlZlbmV6dWVsYSwgQm9saXZhcmlhbiBSZXB1YmxpYyBvZlwiLGZsYWc6XCJmbGFnLXZlXCJ9LHtuYW1lOlwiVmlyZ2luIElzbGFuZHMsIEJyaXRpc2hcIixmbGFnOlwiZmxhZy12Z1wifSx7bmFtZTpcIlZpcmdpbiBJc2xhbmRzLCBVLlMuXCIsZmxhZzpcImZsYWctdmlcIn0se25hbWU6XCJWaWV0IE5hbVwiLGZsYWc6XCJmbGFnLXZuXCJ9LHtuYW1lOlwiVmFudWF0dVwiLGZsYWc6XCJmbGFnLXZ1XCJ9LHtuYW1lOlwiV2FsbGlzIGFuZCBGdXR1bmFcIixmbGFnOlwiZmxhZy13ZlwifSx7bmFtZTpcIlNhbW9hXCIsZmxhZzpcImZsYWctd3NcIn0se25hbWU6XCJZZW1lblwiLGZsYWc6XCJmbGFnLXllXCJ9LHtuYW1lOlwiTWF5b3R0ZVwiLGZsYWc6XCJmbGFnLXl0XCJ9LHtuYW1lOlwiU291dGggQWZyaWNhXCIsZmxhZzpcImZsYWctemFcIn0se25hbWU6XCJaYW1iaWFcIixmbGFnOlwiZmxhZy16bVwifSx7bmFtZTpcIlppbWJhYndlXCIsZmxhZzpcImZsYWctendcIn1dLmZpbHRlcigoZnVuY3Rpb24oY291bnRyeSl7cmV0dXJuLTEhPWNvdW50cnkubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJHF1ZXJ5LnRvTG93ZXJDYXNlKCkpfSkpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiU2tpbGxzQ3RybFwiLFtcIiRzY29wZVwiLFwiJHdpbmRvd1wiLGZ1bmN0aW9uKCRzY29wZSwkd2luZG93KXskc2NvcGUuc2VsZWN0ZWRTa2lsbD0wLCRzY29wZS5za2lsbHNWaXNpYmxlPSExLCRzY29wZS5sYWJlbHM9W1wiRG93bmxvYWQgU2FsZXNcIixcIkluLVN0b3JlIFNhbGVzXCIsXCJNYWlsLU9yZGVyIFNhbGVzXCJdLCRzY29wZS5kYXRhPVszMDAsNTAwLDEwMF0sJC5nZXRKU09OKFwiL3NraWxscy5qc29uXCIsKGZ1bmN0aW9uKGRhdGEpeyRzY29wZS5za2lsbHM9ZGF0YS5maWx0ZXIoKGZ1bmN0aW9uKHNraWxsKXtyZXR1cm4gc2tpbGwuZW5hYmxlZH0pKSwkc2NvcGUuc2V0U2VsZWN0ZWRTa2lsbD1mdW5jdGlvbihza2lsbCl7JHNjb3BlLnNlbGVjdGVkU2tpbGw9c2tpbGwsJHNjb3BlLnNlbGVjdGVkU2tpbGwuY2hhcnRPcHRpb25zPXtjdXRvdXRQZXJjZW50YWdlOjgwLGNpcmN1bWZlcmVuY2U6MipNYXRoLlBJLG1haW50YWluQXNwZWN0UmF0aW86ITAsdG9vbHRpcHM6e2VuYWJsZWQ6ITF9fSwkc2NvcGUuc2VsZWN0ZWRTa2lsbC5jaGFydFN0eWxlPXtcImJhY2tncm91bmQtaW1hZ2VcIjpcInVybCgvc2tpbGxzL1wiKyRzY29wZS5zZWxlY3RlZFNraWxsLmltYWdlK1wiKVwiLFwiYmFja2dyb3VuZC1yZXBlYXRcIjpcIm5vLXJlcGVhdFwiLFwiYmFja2dyb3VuZC1zaXplXCI6XCI2MCVcIixcImJhY2tncm91bmQtcG9zaXRpb25cIjpcIjUwJSA1MCVcIn19LCRzY29wZS5zZXRTZWxlY3RlZFNraWxsKCRzY29wZS5za2lsbHNbMF0pLCRzY29wZS4kYXBwbHkoKX0pKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiVGVuVGhpbmdzQ3RybFwiLFtcIiRzY29wZVwiLFwiQm90c1N2Y1wiLGZ1bmN0aW9uKCRzY29wZSxCb3RzU3ZjKXtmdW5jdGlvbiBmbGFzaChlbGVtZW50KXtjb25zdCBjb2xvcj0kKGVsZW1lbnQpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIik7JChlbGVtZW50KS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6XCIjRkE4MDcyXCJ9LDEwMCwoKT0+eyQoZWxlbWVudCkuYW5pbWF0ZSh7YmFja2dyb3VuZENvbG9yOmNvbG9yfSwxMDApfSl9JHNjb3BlLmNhdGVnb3JpZXM9W1wiTXVzaWNcIixcIlRlbGV2aXNpb25cIixcIk1vdmllc1wiLFwiRW50ZXJ0YWlubWVudFwiLFwiR2VvZ3JhcGh5XCIsXCJIaXN0b3J5XCIsXCJTY2llbmNlXCIsXCJHYW1pbmdcIixcIlNwb3J0c1wiLFwiUmVsaWdpb25cIixcIkFydFwiLFwiTGl0ZXJhdHVyZVwiLFwiTWlzY1wiLFwiRnVubnlcIixcIkZvb2QgYW5kIERyaW5rXCIsXCJTb2NpZXR5XCIsXCJOYXR1cmVcIixcIlRlY2hub2xvZ3lcIixcIkxhbmd1YWdlXCIsXCJCdXNpbmVzc1wiLFwiSW50ZXJuZXRcIl0sJHNjb3BlLmtleURvd249ZT0+e3N3aXRjaCgoZT1lfHx3aW5kb3cuZXZlbnQpLmtleUNvZGUpe2Nhc2UgOTokKFwiI25ldy1ibHVyYlwiKS5pcyhcIjpmb2N1c1wiKSYmc2V0VGltZW91dCgoKT0+eyRzY29wZS5hZGRWYWx1ZSgpfSwxMDApO2JyZWFrO2Nhc2UgMTM6JChcIiNuZXctYmx1cmJcIikuaXMoXCI6Zm9jdXNcIik/JHNjb3BlLmFkZFZhbHVlKCk6JChcIiNuZXctdmFsdWVcIikuaXMoXCI6Zm9jdXNcIikmJiQoXCIjbmV3LWJsdXJiXCIpLmZvY3VzKCl9fSwkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzPSRzY29wZS5jYXRlZ29yaWVzLm1hcChjYXRlZ29yeT0+Y2F0ZWdvcnkpLCRzY29wZS5jYXRlZ29yeUZpbHRlcnMucHVzaChcIkFsbFwiKSwkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzLnB1c2goXCJCbGFua1wiKSwkc2NvcGUuY2F0ZWdvcnlGaWx0ZXI9XCJBbGxcIiwkc2NvcGUuc2V0Q2F0ZWdvcnlGaWx0ZXI9Y2F0ZWdvcnk9Pnskc2NvcGUuY2F0ZWdvcnlGaWx0ZXI9Y2F0ZWdvcnl9LCRzY29wZS5zZXRVc2VyRmlsdGVyPXVzZXI9Pnskc2NvcGUudXNlckZpbHRlcj11c2VyfSwkc2NvcGUuZmlsdGVyZWRMaXN0cz0oKT0+JHNjb3BlLmxpc3RzPyRzY29wZS5saXN0cy5maWx0ZXIoKHtjYXRlZ29yeSxjcmVhdG9yfSk9PlwiQWxsXCI9PT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXImJlwiQWxsXCI9PT0kc2NvcGUudXNlckZpbHRlcnx8KFwiQWxsXCIhPT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXImJlwiQWxsXCI9PT0kc2NvcGUudXNlckZpbHRlcj9jYXRlZ29yeT9jYXRlZ29yeT09PSRzY29wZS5jYXRlZ29yeUZpbHRlcjpcIkJsYW5rXCI9PT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXI6XCJBbGxcIj09PSRzY29wZS5jYXRlZ29yeUZpbHRlciYmXCJBbGxcIiE9PSRzY29wZS51c2VyRmlsdGVyP2NyZWF0b3I9PT0kc2NvcGUudXNlckZpbHRlcjpjYXRlZ29yeT9jYXRlZ29yeT09PSRzY29wZS5jYXRlZ29yeUZpbHRlciYmY3JlYXRvcj09PSRzY29wZS51c2VyRmlsdGVyOlwiQmxhbmtcIj09PSRzY29wZS5jYXRlZ29yeUZpbHRlciYmY3JlYXRvcj09PSRzY29wZS51c2VyRmlsdGVyKSkuZmlsdGVyKCh7bmFtZX0pPT4hbmFtZXx8bmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJHNjb3BlLnNlYXJjaE5hbWUudG9Mb3dlckNhc2UoKSk+PTApOltdLCRzY29wZS4kb24oXCJsb2dpblwiLF89Pnskc2NvcGUuZ2V0TGlzdHMoKX0pLCRzY29wZS5zb3J0PXNvcnRCeT0+eyRzY29wZS5zb3J0VmFsdWU9PT1zb3J0Qnk/JHNjb3BlLnNvcnREaXJlY3Rpb249ISRzY29wZS5zb3J0RGlyZWN0aW9uOigkc2NvcGUuc29ydFZhbHVlPXNvcnRCeSwkc2NvcGUuc29ydERpcmVjdGlvbj0hMCksJHNjb3BlLnNvcnRlcj0oJHNjb3BlLnNvcnREaXJlY3Rpb24/XCIrXCI6XCItXCIpKyRzY29wZS5zb3J0VmFsdWV9LCRzY29wZS5zb3J0VmFsdWU9XCJkYXRlXCIsJHNjb3BlLnNvcnREaXJlY3Rpb249ITAsJHNjb3BlLnNvcnRMaXN0PVwidmFsdWVcIiwkc2NvcGUuc29ydChcImRhdGVcIiksJHNjb3BlLmdldENhdGVnb3J5Q291bnQ9Y2F0ZWdvcnk9PiRzY29wZS5saXN0cz8kc2NvcGUubGlzdHMuZmlsdGVyKGxpc3Q9PiEoXCJBbGxcIiE9PWNhdGVnb3J5JiZsaXN0LmNhdGVnb3J5IT09Y2F0ZWdvcnl8fFwiQWxsXCIhPT0kc2NvcGUudXNlckZpbHRlciYmbGlzdC5jcmVhdG9yLnVzZXJuYW1lIT09JHNjb3BlLnVzZXJGaWx0ZXIpKS5sZW5ndGg6MCwkc2NvcGUuZ2V0TGlzdHM9KCk9Pnskc2NvcGUubG9hZGluZz0hMCxCb3RzU3ZjLmdldExpc3RzKCRzY29wZS5jdXJyZW50VXNlcikudGhlbigoe2RhdGF9KT0+eyRzY29wZS5saXN0cz1kYXRhLGNvbnNvbGUubG9nKCRzY29wZS5saXN0c1swXSksJHNjb3BlLnVzZXJGaWx0ZXJzPXt9LCRzY29wZS51c2VyRmlsdGVycy5BbGw9JHNjb3BlLmxpc3RzLmxlbmd0aCwkc2NvcGUudXNlckZpbHRlcnM9JHNjb3BlLmxpc3RzLnNvcnQoKGxpc3QxLGxpc3QyKT0+bGlzdDEuY3JlYXRvcj5saXN0Mi5jcmVhdG9yKS5yZWR1Y2UoKHVzZXJzLHtjcmVhdG9yfSk9Pih1c2Vyc1tjcmVhdG9yXXx8KHVzZXJzW2NyZWF0b3JdPTApLHVzZXJzW2NyZWF0b3JdKyssdXNlcnMpLCRzY29wZS51c2VyRmlsdGVycyksJHNjb3BlLnVzZXJDb3VudD1PYmplY3Qua2V5cygkc2NvcGUudXNlckZpbHRlcnMpLmxlbmd0aCwkc2NvcGUudXNlckZpbHRlcj1cIkFsbFwiLCRzY29wZS5sb2FkaW5nPSExfSl9LCRzY29wZS5zZWxlY3RMaXN0PWxpc3Q9PntCb3RzU3ZjLmdldExpc3QobGlzdCkudGhlbigoe2RhdGF9KT0+eyRzY29wZS5zZWxlY3RlZExpc3Q9ZGF0YX0pfSwkc2NvcGUuc2VsZWN0Q2F0ZWdvcnk9Y2F0ZWdvcnk9Pnskc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3J5PWNhdGVnb3J5LCRzY29wZS5zZWxlY3RpbmdDYXRlZ29yeT0hMX0sJHNjb3BlLmFkZExpc3Q9KCk9Pnskc2NvcGUuc2VsZWN0ZWRMaXN0PXtuYW1lOlwiXCIsY3JlYXRvcjokc2NvcGUuY3VycmVudFVzZXIuX2lkLGRhdGU6bmV3IERhdGUsdmFsdWVzOltdLGFuc3dlcnM6MCxpc0R5bmFtaWM6ITB9fSwkc2NvcGUuYWRkVmFsdWU9KCk9Pnskc2NvcGUubmV3SXRlbS52YWx1ZSYmKF8uc29tZSgkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcyx2YWx1ZT0+dmFsdWU9PSRzY29wZS5uZXdJdGVtLnZhbHVlKT9hbGVydChgJHskc2NvcGUubmV3SXRlbS52YWx1ZX0gaXMgYWxyZWFkeSBpbiB0aGUgbGlzdGApOigkc2NvcGUubmV3SXRlbS5jcmVhdG9yPSRzY29wZS5jdXJyZW50VXNlci5faWQsJHNjb3BlLnNlbGVjdGVkTGlzdC52YWx1ZXMudW5zaGlmdChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KCRzY29wZS5uZXdJdGVtKSkpLCRzY29wZS5zZWxlY3RlZExpc3QuYW5zd2VycysrLCRzY29wZS5uZXdJdGVtLnZhbHVlPVwiXCIsJHNjb3BlLm5ld0l0ZW0uYmx1cmI9XCJcIiwkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcy5sZW5ndGg+PTEwJiYkc2NvcGUuc2VsZWN0ZWRMaXN0Lm5hbWUmJiRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcnkmJiRzY29wZS5zYXZlTGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KSkpLCQoXCIjbmV3LXZhbHVlXCIpLmZvY3VzKCl9LCRzY29wZS5yZXBvcnRMaXN0PWxpc3Q9PntCb3RzU3ZjLnJlcG9ydExpc3QoJHNjb3BlLmN1cnJlbnRVc2VyLGxpc3QpfSwkc2NvcGUuc2F2ZUxpc3Q9bGlzdD0+e2xpc3QudmFsdWVzPWxpc3QudmFsdWVzLmZpbHRlcigoe3ZhbHVlfSk9PnZhbHVlKSxsaXN0LnZhbHVlcy5sZW5ndGg+PTEwJiZsaXN0Lm5hbWUmJmxpc3QuY2F0ZWdvcnk/KCRzY29wZS5zYXZpbmc9ITAsQm90c1N2Yy5zYXZlTGlzdCgkc2NvcGUuY3VycmVudFVzZXIsbGlzdCkudGhlbigoe2RhdGF9KT0+e2lmKCRzY29wZS5zZWxlY3RlZExpc3QuX2lkKXtmb3IobGV0IGk9MDtpPCRzY29wZS5saXN0cy5sZW5ndGg7aSsrKWlmKCRzY29wZS5saXN0c1tpXS5faWQ9PT1kYXRhLl9pZCl7JHNjb3BlLmxpc3RzW2ldPWRhdGE7YnJlYWt9JHNjb3BlLnNlbGVjdExpc3QobGlzdCl9ZWxzZSAkc2NvcGUubGlzdHMudW5zaGlmdChkYXRhKSwkc2NvcGUuc2VsZWN0TGlzdChkYXRhKTskc2NvcGUuc2F2aW5nPSExfSxlcnI9Pntjb25zb2xlLmVycm9yKGVyciksJHNjb3BlLnNhdmluZz0hMX0pKTpsaXN0LnZhbHVlcy5sZW5ndGg8MTA/YWxlcnQoXCJMaXN0cyBtdXN0IGNvbnRhaW4gMTAgb3IgbW9yZSB2YWx1ZXMhXCIpOmxpc3QubmFtZT9mbGFzaChcIiNsaXN0LWNhdGVnb3J5XCIpOmZsYXNoKFwiI2xpc3QtbmFtZVwiKX0sJHNjb3BlLmRlbGV0ZUxpc3Q9bGlzdD0+e2xpc3QuX2lkP2NvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgbGlzdD9cIikmJkJvdHNTdmMuZGVsZXRlTGlzdChsaXN0KS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLmdldExpc3RzKCksJHNjb3BlLnNlbGVjdGVkTGlzdD1udWxsfSk6KCRzY29wZS5saXN0cz0kc2NvcGUubGlzdHMuZmlsdGVyKCh7X2lkfSk9Pl9pZCksJHNjb3BlLnNlbGVjdGVkTGlzdD1udWxsKX0sJHNjb3BlLmxpc3RCdXR0b25DbGFzcz1saXN0PT57Y29uc3QgdmFsdWVzPWxpc3QudmFsdWVzLGJsdXJicz1saXN0LmJsdXJicztyZXR1cm4gdmFsdWVzPT09Ymx1cmJzJiZsaXN0LmRlc2NyaXB0aW9uP1wiYnRuLWRlZmF1bHRcIjowIT09Ymx1cmJzfHxsaXN0LmRlc2NyaXB0aW9uPzA9PT1ibHVyYnMmJmxpc3QuZGVzY3JpcHRpb24/XCJidG4taW5mb1wiOlwiYnRuLXByaW1hcnlcIjpcImJ0bi13YXJuaW5nXCJ9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJXb3Jrb3V0Q3RybFwiLFtcIiRzY29wZVwiLGZ1bmN0aW9uKCRzY29wZSl7JHNjb3BlLnRpbWVSZW1haW5pbmc9MCwkc2NvcGUudGltZUV4ZXJjaXNpbmc9MzAsJHNjb3BlLnRpbWVSZXN0aW5nPTEwLCRzY29wZS5yZXN0PSExO3ZhciBleGVyY2lzaW5nLHNvdW5kcz17b246bmV3IEF1ZGlvKFwib24ud2F2XCIpLG9mZjpuZXcgQXVkaW8oXCJvZmYud2F2XCIpLHN3aXRjaDpuZXcgQXVkaW8oXCJzd2l0Y2gud2F2XCIpfSxleGVyY2lzZXM9W3tuYW1lOlwiSnVtcGluZyBKYWNrc1wiLHNwbGl0OiExfSx7bmFtZTpcIldhbGwgU2l0XCIsc3BsaXQ6ITF9LHtuYW1lOlwiUHVzaC1VcFwiLHNwbGl0OiExfSx7bmFtZTpcIkNydW5jaFwiLHNwbGl0OiExfSx7bmFtZTpcIlN0ZXAtVXBcIixzcGxpdDohMH0se25hbWU6XCJTcXVhdFwiLHNwbGl0OiExfSx7bmFtZTpcIlRyaWNlcHMgRGlwXCIsc3BsaXQ6ITF9LHtuYW1lOlwiUGxhbmtcIixzcGxpdDohMX0se25hbWU6XCJIaWdoIEtuZWVzXCIsc3BsaXQ6ITF9LHtuYW1lOlwiTHVuZ2VcIixzcGxpdDohMX0se25hbWU6XCJQdXNoLVVwIHdpdGggUm90YXRpb25cIixzcGxpdDohMX0se25hbWU6XCJTaWRlIFBsYW5rXCIsc3BsaXQ6ITB9XTskc2NvcGUucHJvZ3Jlc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZXhlcmNpc2VzLmxlbmd0aC1NYXRoLmZsb29yKCRzY29wZS50aW1lUmVtYWluaW5nLygkc2NvcGUudGltZUV4ZXJjaXNpbmcrJHNjb3BlLnRpbWVSZXN0aW5nKSkrXCIvXCIrZXhlcmNpc2VzLmxlbmd0aH0sJHNjb3BlLndvcmtvdXQ9ZnVuY3Rpb24oKXt2YXIgZXhjZXJjaXNlVGltZT0kc2NvcGUudGltZUV4ZXJjaXNpbmcrJHNjb3BlLnRpbWVSZXN0aW5nOyRzY29wZS50aW1lUmVtYWluaW5nPyhjbGVhckludGVydmFsKGV4ZXJjaXNpbmcpLCRzY29wZS50aW1lcj1cIlwiLCRzY29wZS50aW1lUmVtYWluaW5nPTAsJHNjb3BlLnJlc3Q9ITEsJHNjb3BlLmV4ZXJjaXNlPXtuYW1lOlwiXCIsc3BsaXQ6ITF9KTooJHNjb3BlLnRpbWVSZW1haW5pbmc9ZXhlcmNpc2VzLmxlbmd0aCpleGNlcmNpc2VUaW1lLGV4ZXJjaXNpbmc9c2V0SW50ZXJ2YWwoKGZ1bmN0aW9uKCl7aWYoJHNjb3BlLnRpbWVSZW1haW5pbmctLSwwPT09JHNjb3BlLnRpbWVSZW1haW5pbmcpcmV0dXJuICRzY29wZS5leGVyY2lzZT17bmFtZTpcIkZpbmlzaGVkISBDb25ncmF0cyFcIixzcGxpdDohMX0sJHNjb3BlLnRpbWVyPVwiXCIsJHNjb3BlLnRpbWVSZW1haW5pbmc9MCwkc2NvcGUucmVzdD0hMSwkc2NvcGUuJGFwcGx5KCksY2xlYXJJbnRlcnZhbChleGVyY2lzaW5nKTt2YXIgY3VycmVudEV4ZXJjaXNlPU1hdGguZmxvb3IoJHNjb3BlLnRpbWVSZW1haW5pbmcvZXhjZXJjaXNlVGltZSksdGltZXI9JHNjb3BlLnRpbWVSZW1haW5pbmctY3VycmVudEV4ZXJjaXNlKmV4Y2VyY2lzZVRpbWU7JHNjb3BlLnRpbWVyPXRpbWVyPiRzY29wZS50aW1lRXhlcmNpc2luZz90aW1lci0kc2NvcGUudGltZUV4ZXJjaXNpbmc6dGltZXIsdGltZXI+JHNjb3BlLnRpbWVFeGVyY2lzaW5nPyRzY29wZS5yZXN0PSEwOiRzY29wZS5yZXN0PSExLCRzY29wZS5leGVyY2lzZT1leGVyY2lzZXNbZXhlcmNpc2VzLmxlbmd0aC1jdXJyZW50RXhlcmNpc2UtMV0sdGltZXI9PT0kc2NvcGUudGltZUV4ZXJjaXNpbmc/c291bmRzLm9uLnBsYXkoKTowPT09dGltZXI/c291bmRzLm9mZi5wbGF5KCk6JHNjb3BlLmV4ZXJjaXNlLnNwbGl0JiZ0aW1lcj09PU1hdGguZmxvb3IoJHNjb3BlLnRpbWVFeGVyY2lzaW5nLzIpJiZzb3VuZHMuc3dpdGNoLnBsYXkoKSwkc2NvcGUuJGFwcGx5KCl9KSwxZTMpKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZGlyZWN0aXZlKFwiaGVhZFwiLFtcIiRyb290U2NvcGVcIixcIiRzdGF0ZVwiLFwiJGNvbXBpbGVcIixcIiRpbnRlcnBvbGF0ZVwiLGZ1bmN0aW9uKCRyb290U2NvcGUsJHN0YXRlLCRjb21waWxlLCRpbnRlcnBvbGF0ZSl7dmFyIGdldFN0eWxlPWZ1bmN0aW9uKHRlbXBsYXRlU3R5bGVVcmwpe3ZhciBzdHlsZT17aHJlZjp0ZW1wbGF0ZVN0eWxlVXJsLHJlbDpcInN0eWxlc2hlZXRcIn07cmV0dXJuIHN0eWxlLmhyZWYubWF0Y2goL1xcLmxlc3MkLykmJihzdHlsZS5yZWw9XCJzdHlsZXNoZWV0L2xlc3NcIiksc3R5bGV9O3JldHVybntyZXN0cmljdDpcIkVcIixsaW5rOmZ1bmN0aW9uKHNjb3BlLGVsZW0pe3Njb3BlLnRlbXBsYXRlU3R5bGVzPVtdO3ZhciBodG1sPSc8bGluayBuZy1hdHRyLXJlbD1cInt7c3R5bGUucmVsfX1cIiBuZy1yZXBlYXQ9XCJzdHlsZSBpbiB0ZW1wbGF0ZVN0eWxlc1wiIG5nLWhyZWY9XCJ7e3N0eWxlLmhyZWZ9fVwiPic7aHRtbD0oaHRtbD1odG1sLnJlcGxhY2UoL1xce1xcey9nLCRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpKSkucmVwbGFjZSgvXFx9XFx9L2csJGludGVycG9sYXRlLmVuZFN5bWJvbCgpKSxlbGVtLmFwcGVuZCgkY29tcGlsZShodG1sKShzY29wZSkpLCRyb290U2NvcGUuJG9uKFwiJHN0YXRlQ2hhbmdlU3RhcnRcIiwoZnVuY3Rpb24oZXZlbnQsdG9TdGF0ZSx0b1BhcmFtcyxmcm9tU3RhdGUsZnJvbVBhcmFtcyl7c2NvcGUudGVtcGxhdGVTdHlsZXM9ZnVuY3Rpb24oc3RhdGUpe2Zvcih2YXIgc3RhdGVzPXt9O1wiXCIhPT1zdGF0ZS5uYW1lOyl7dmFyIHBhcmVudD0kc3RhdGUuZ2V0KFwiXlwiLHN0YXRlKTtzdGF0ZXNbcGFyZW50Lm5hbWVdfHwoc3RhdGVzW3BhcmVudC5uYW1lXT17fSksc3RhdGUudGVtcGxhdGVTdHlsZVVybCYmKHN0YXRlc1twYXJlbnQubmFtZV1bXCJcIl18fChzdGF0ZXNbcGFyZW50Lm5hbWVdW1wiXCJdPWdldFN0eWxlKHN0YXRlLnRlbXBsYXRlU3R5bGVVcmwpKSksc3RhdGUudmlld3MmJl8uZm9yRWFjaChzdGF0ZS52aWV3cywoZnVuY3Rpb24odmlldyxrZXkpe2lmKHZpZXcudGVtcGxhdGVTdHlsZVVybClyZXR1cm4oa2V5PWtleS5zcGxpdChcIkBcIikpWzFdPyhzdGF0ZXNba2V5WzFdXXx8KHN0YXRlc1trZXlbMV1dPXt9KSx2b2lkKHN0YXRlc1trZXlbMV1dW2tleVswXV18fChzdGF0ZXNba2V5WzFdXVtrZXlbMF1dPWdldFN0eWxlKHZpZXcudGVtcGxhdGVTdHlsZVVybCkpKSk6dm9pZChzdGF0ZXNbcGFyZW50Lm5hbWVdW2tleVswXV09Z2V0U3R5bGUodmlldy50ZW1wbGF0ZVN0eWxlVXJsKSl9KSksc3RhdGU9cGFyZW50fXZhciBmbGF0PVtdO3JldHVybiBfLmZvckVhY2goc3RhdGVzLChmdW5jdGlvbih2aWV3cyl7Xy5mb3JFYWNoKHZpZXdzLChmdW5jdGlvbihzdHlsZSl7Xy5pbmNsdWRlcyhmbGF0LHN0eWxlKXx8ZmxhdC5wdXNoKHN0eWxlKX0pKX0pKSxmbGF0LnJldmVyc2UoKSxmbGF0fSh0b1N0YXRlKX0pKX19fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJCb3RzU3ZjXCIsW1wiJGh0dHBcIixmdW5jdGlvbigkaHR0cCl7dGhpcy5nZXRMaXN0cz1mdW5jdGlvbih1c2VyKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9ib3RzL2xpc3RzXCIpfSx0aGlzLmdldExpc3Q9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvYm90cy9saXN0cy9cIitsaXN0Ll9pZCl9LHRoaXMuc2F2ZUxpc3Q9ZnVuY3Rpb24odXNlcixsaXN0KXtyZXR1cm4gJGh0dHAucHV0KFwiL2FwaS9ib3RzL2xpc3RzXCIse3VzZXIsbGlzdH0pfSx0aGlzLnJlcG9ydExpc3Q9ZnVuY3Rpb24odXNlcixsaXN0KXskaHR0cC5nZXQoXCIvYXBpL2JvdHMvbGlzdHMvXCIrbGlzdC5faWQrXCIvcmVwb3J0L1wiK3VzZXIuX2lkKX0sdGhpcy5kZWxldGVMaXN0PWZ1bmN0aW9uKGxpc3Qpe3JldHVybiAkaHR0cC5kZWxldGUoXCIvYXBpL2JvdHMvbGlzdHMvXCIrbGlzdC5faWQpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiQ2F0ZWdvcmllc1N2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3ZhciBzdmM9dGhpcztzdmMuZ2V0Q2F0ZWdvcmllcz1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2NhdGVnb3JpZXNcIil9LHN2Yy5nZXRUYXNrcz1mdW5jdGlvbihjYXRlZ29yeSl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvY2F0ZWdvcmllcy9cIitjYXRlZ29yeSl9LHN2Yy5hZGRDYXRlZ29yeT1mdW5jdGlvbihjYXRlZ29yeSl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL2NhdGVnb3JpZXMvXCIsY2F0ZWdvcnkpfSxzdmMuYWRkVGFzaz1mdW5jdGlvbihjYXRlZ29yeSx0YXNrKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvY2F0ZWdvcmllcy9cIitjYXRlZ29yeStcIi90YXNrc1wiLHRhc2spfSxzdmMuc2V0UHJpb3JpdHlMaXN0PWZ1bmN0aW9uKGxpc3Qpe3N2Yy5jaG9pY2VzPWxpc3Qsc3ZjLnByaW9yaXR5TGlzdD1bXTtmb3IodmFyIGk9MDtpPGxpc3QubGVuZ3RoO2krKylmb3IodmFyIGo9aSsxO2o8bGlzdC5sZW5ndGg7aisrKXt2YXIgcmFuZG9tPU1hdGgucm91bmQoTWF0aC5yYW5kb20oKSk7c3ZjLnByaW9yaXR5TGlzdC5wdXNoKHtpZDowLGZpcnN0Q2hvaWNlOmxpc3RbMD09PXJhbmRvbT9pOmpdLm5hbWUsc2Vjb25kQ2hvaWNlOmxpc3RbMD09PXJhbmRvbT9qOmldLm5hbWUsY2hvaWNlOlwiXCJ9KX1mb3IoaSBpbiBmdW5jdGlvbihhcnJheSl7dmFyIHQsaSxtPWFycmF5Lmxlbmd0aDtmb3IoO207KWk9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKm0tLSksdD1hcnJheVttXSxhcnJheVttXT1hcnJheVtpXSxhcnJheVtpXT10fShzdmMucHJpb3JpdHlMaXN0KSxzdmMucHJpb3JpdHlMaXN0KXN2Yy5wcmlvcml0eUxpc3RbaV0uaWQ9aSsxfSxzdmMuZ2V0UHJpb3JpdHlMaXN0PWZ1bmN0aW9uKGxpc3Qpe3JldHVybiBzdmMucHJpb3JpdHlMaXN0fX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiRW1haWxTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLnNlbmQ9ZnVuY3Rpb24oZW1haWwpe3JldHVybiBjb25zb2xlLmxvZyhlbWFpbCksJGh0dHAucG9zdChcIi9hcGkvZW1haWxcIixlbWFpbCl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJGaWxlU3ZjXCIsW1wiJGh0dHBcIixmdW5jdGlvbigkaHR0cCl7dGhpcy5nZXRJbWFnZXM9ZnVuY3Rpb24oZm9sZGVyKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9maWxlcy9pbWFnZXMvXCIrZm9sZGVyKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIkdhbWVTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLmdldEhpZ2hzY29yZT1mdW5jdGlvbihnYW1lLHVzZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2dhbWVzL1wiK2dhbWUrXCIvXCIrdXNlcitcIi9oaWdoc2NvcmVcIil9LHRoaXMuc2V0SGlnaHNjb3JlPWZ1bmN0aW9uKGdhbWUsdXNlcixzY29yZSl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL2dhbWVzL1wiK2dhbWUrXCIvXCIrdXNlcitcIi9oaWdoc2NvcmVcIix7c2NvcmV9KX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIkxhbmd1YWdlU3ZjXCIsKGZ1bmN0aW9uKCl7dmFyIHN2Yz10aGlzO3N2Yy5sYW5ndWFnZXM9W3tjb2RlOlwiRU5cIixuYW1lOlwiRW5nbGlzaFwiLGZsYWc6XCJmbGFnLWljb24tZ2JcIn0se2NvZGU6XCJOTFwiLG5hbWU6XCJOZWRlcmxhbmRzXCIsZmxhZzpcImZsYWctaWNvbi1ubFwifSx7Y29kZTpcIkZSXCIsbmFtZTpcIkZyYW7Dp2Fpc1wiLGZsYWc6XCJmbGFnLWljb24tZnJcIn1dLHN2Yy50ZXh0PVt7Y29kZTpcIkVOXCJ9LHtjb2RlOlwiTkxcIn0se2NvZGU6XCJGUlwifV0sc3ZjLnNlbGVjdGVkTGFuZ3VhZ2U9c3ZjLmxhbmd1YWdlc1swXSxzdmMuc2V0TGFuZ3VhZ2U9ZnVuY3Rpb24obGFuZ3VhZ2Upe3JldHVybiBzdmMuc2VsZWN0ZWRMYW5ndWFnZT1sYW5ndWFnZSxsYW5ndWFnZX0sc3ZjLmdldExhbmd1YWdlPWZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5zZWxlY3RlZExhbmd1YWdlfX0pKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiUG9zdHNTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLmZldGNoPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvcG9zdHNcIil9LHRoaXMuY3JlYXRlPWZ1bmN0aW9uKHBvc3Qpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS9wb3N0c1wiLHBvc3QpfSx0aGlzLmdldFBvc3Q9ZnVuY3Rpb24ocG9zdCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvcG9zdHMvXCIrcG9zdC5faWQpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiVXNlclN2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3ZhciBzdmM9dGhpcztzdmMuZ2V0VXNlcj1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3VzZXJzXCIpfSxzdmMuc2V0VG9rZW49ZnVuY3Rpb24odG9rZW4pe3JldHVybiAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIlgtQXV0aFwiXT10b2tlbixzdmMuZ2V0VXNlcigpfSxzdmMuYXV0aGVudGljYXRlPWZ1bmN0aW9uKHVzZXIpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9hdXRoZW50aWNhdGVcIix7dXNlcn0pLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXtyZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS50b2tlbj1yZXNwb25zZS5kYXRhLHN2Yy5zZXRUb2tlbihyZXNwb25zZS5kYXRhKX0pKX0sc3ZjLmxvZ2luPWZ1bmN0aW9uKHVzZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3VzZXJzL1wiK3VzZXIrXCIvbG9naW5cIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2Upe3JldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuPXJlc3BvbnNlLmRhdGEsc3ZjLnNldFRva2VuKHJlc3BvbnNlLmRhdGEpfSkpfSxzdmMudXBkYXRlVXNlcj1mdW5jdGlvbih1c2VyKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlci5faWQse3VzZXJ9KS50aGVuKChmdW5jdGlvbigpe3JldHVybiBzdmMuZ2V0VXNlcigpfSkpfSxzdmMuY2hlY2tQYXNzd29yZD1mdW5jdGlvbih1c2VyLHBhc3N3b3JkKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlcitcIi92ZXJpZmljYXRpb25cIix7cGFzc3dvcmR9KX0sc3ZjLmNoYW5nZVBhc3N3b3JkPWZ1bmN0aW9uKHVzZXIsb2xkUGFzc3dvcmQsbmV3UGFzc3dvcmQpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9cIit1c2VyK1wiL3Bhc3N3b3JkXCIse29sZFBhc3N3b3JkLG5ld1Bhc3N3b3JkfSl9LHN2Yy5jaGFuZ2VVc2VybmFtZT1mdW5jdGlvbih1c2VyLG5ld1VzZXJuYW1lKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlcitcIi91c2VybmFtZVwiLHtuZXdVc2VybmFtZX0pLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5nZXRVc2VyKCl9KSl9LHN2Yy5sb2dvdXQ9ZnVuY3Rpb24oKXt3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCksJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJYLUF1dGhcIl09XCJcIn0sc3ZjLmNyZWF0ZVVzZXI9ZnVuY3Rpb24odXNlcm5hbWUscGFzc3dvcmQpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vyc1wiLHt1c2VybmFtZSxwYXNzd29yZH0pLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSxwYXNzd29yZCl9KSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJRdWl6R29vZ2xlQ3RybFwiLFtcIiRzY29wZVwiLFwiRmlsZVN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxGaWxlU3ZjKXtGaWxlU3ZjLmdldEltYWdlcyhcImdvb2dsZVwiKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLmltYWdlcz1yZXNwb25zZS5kYXRhfSkpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJRdWl6TG9nb3NDdHJsXCIsW1wiJHNjb3BlXCIsXCJGaWxlU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEZpbGVTdmMpe0ZpbGVTdmMuZ2V0SW1hZ2VzKFwibG9nb3NcIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5pbWFnZXM9cmVzcG9uc2UuZGF0YX0pKX1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1dvcmtvdXRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xyXG5cclxuICAkc2NvcGUudGltZVJlbWFpbmluZyA9IDA7XHJcbiAgJHNjb3BlLnRpbWVFeGVyY2lzaW5nID0gMzA7XHJcbiAgJHNjb3BlLnRpbWVSZXN0aW5nID0gMTA7XHJcbiAgJHNjb3BlLnJlc3QgPSBmYWxzZTtcclxuXHJcbiAgdmFyIHNvdW5kcyA9IHtcclxuICAgIG9uOiBuZXcgQXVkaW8oJ29uLndhdicpLFxyXG4gICAgb2ZmOiBuZXcgQXVkaW8oJ29mZi53YXYnKSxcclxuICAgIHN3aXRjaDogbmV3IEF1ZGlvKCdzd2l0Y2gud2F2JyksXHJcbiAgfTtcclxuXHJcblxyXG4gIHZhciBleGVyY2lzZXMgPSBbXHJcbiAgICB7bmFtZTogJ0p1bXBpbmcgSmFja3MnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdXYWxsIFNpdCcsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1B1c2gtVXAnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdDcnVuY2gnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdTdGVwLVVwJywgc3BsaXQ6IHRydWV9LFxyXG4gICAge25hbWU6ICdTcXVhdCcsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1RyaWNlcHMgRGlwJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnUGxhbmsnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdIaWdoIEtuZWVzJywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnTHVuZ2UnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdQdXNoLVVwIHdpdGggUm90YXRpb24nLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdTaWRlIFBsYW5rJywgc3BsaXQ6IHRydWV9XHJcbiAgXTtcclxuXHJcbiAgdmFyIGV4ZXJjaXNpbmc7XHJcblxyXG4gICRzY29wZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIChleGVyY2lzZXMubGVuZ3RoIC0gTWF0aC5mbG9vcigkc2NvcGUudGltZVJlbWFpbmluZyAvICgkc2NvcGUudGltZUV4ZXJjaXNpbmcgKyAkc2NvcGUudGltZVJlc3RpbmcpKSkgKyAnLycgKyBleGVyY2lzZXMubGVuZ3RoO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS53b3Jrb3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZXhjZXJjaXNlVGltZSA9ICRzY29wZS50aW1lRXhlcmNpc2luZyArICRzY29wZS50aW1lUmVzdGluZztcclxuICAgIGlmICghJHNjb3BlLnRpbWVSZW1haW5pbmcpIHtcclxuICAgICAgJHNjb3BlLnRpbWVSZW1haW5pbmcgPSBleGVyY2lzZXMubGVuZ3RoICogZXhjZXJjaXNlVGltZTtcclxuICAgICAgZXhlcmNpc2luZyA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICRzY29wZS50aW1lUmVtYWluaW5nLS07XHJcbiAgICAgICAgaWYgKCRzY29wZS50aW1lUmVtYWluaW5nID09PSAwKSB7XHJcbiAgICAgICAgICAkc2NvcGUuZXhlcmNpc2UgPSB7bmFtZTogJ0ZpbmlzaGVkISBDb25ncmF0cyEnLCBzcGxpdDogZmFsc2V9O1xyXG4gICAgICAgICAgJHNjb3BlLnRpbWVyID0gJyc7XHJcbiAgICAgICAgICAkc2NvcGUudGltZVJlbWFpbmluZyA9IDA7XHJcbiAgICAgICAgICAkc2NvcGUucmVzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgcmV0dXJuIGNsZWFySW50ZXJ2YWwoZXhlcmNpc2luZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjdXJyZW50RXhlcmNpc2UgPSBNYXRoLmZsb29yKCRzY29wZS50aW1lUmVtYWluaW5nIC8gZXhjZXJjaXNlVGltZSk7XHJcbiAgICAgICAgdmFyIHRpbWVyID0gJHNjb3BlLnRpbWVSZW1haW5pbmcgLSBjdXJyZW50RXhlcmNpc2UgKiBleGNlcmNpc2VUaW1lO1xyXG4gICAgICAgICRzY29wZS50aW1lciA9IHRpbWVyID4gJHNjb3BlLnRpbWVFeGVyY2lzaW5nID8gdGltZXIgLSAkc2NvcGUudGltZUV4ZXJjaXNpbmcgOiB0aW1lcjtcclxuICAgICAgICBpZiAodGltZXIgPiAkc2NvcGUudGltZUV4ZXJjaXNpbmcpIHtcclxuICAgICAgICAgICRzY29wZS5yZXN0ID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJHNjb3BlLnJlc3QgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLmV4ZXJjaXNlID0gZXhlcmNpc2VzW2V4ZXJjaXNlcy5sZW5ndGggLSBjdXJyZW50RXhlcmNpc2UgLSAxXTtcclxuICAgICAgICBpZiAodGltZXIgPT09ICRzY29wZS50aW1lRXhlcmNpc2luZykge1xyXG4gICAgICAgICAgc291bmRzLm9uLnBsYXkoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRpbWVyID09PSAwKSB7XHJcbiAgICAgICAgICBzb3VuZHMub2ZmLnBsYXkoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5leGVyY2lzZS5zcGxpdCAmJiB0aW1lciA9PT0gTWF0aC5mbG9vcigkc2NvcGUudGltZUV4ZXJjaXNpbmcgLyAyKSkge1xyXG4gICAgICAgICAgc291bmRzLnN3aXRjaC5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjbGVhckludGVydmFsKGV4ZXJjaXNpbmcpO1xyXG4gICAgICAkc2NvcGUudGltZXIgPSAnJztcclxuICAgICAgJHNjb3BlLnRpbWVSZW1haW5pbmcgPSAwO1xyXG4gICAgICAkc2NvcGUucmVzdCA9IGZhbHNlO1xyXG4gICAgICAkc2NvcGUuZXhlcmNpc2UgPSB7bmFtZTogJycsIHNwbGl0OiBmYWxzZX07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuXHQuZGlyZWN0aXZlKCdoZWFkJywgW1xyXG5cdFx0JyRyb290U2NvcGUnLFxyXG5cdFx0JyRzdGF0ZScsXHJcblx0XHQnJGNvbXBpbGUnLFxyXG5cdFx0JyRpbnRlcnBvbGF0ZScsXHJcblx0XHRmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHN0YXRlLCAkY29tcGlsZSwgJGludGVycG9sYXRlKSB7XHJcblxyXG5cdFx0XHR2YXIgZ2V0U3R5bGUgPSBmdW5jdGlvbiBnZXRTdHlsZSh0ZW1wbGF0ZVN0eWxlVXJsKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzdHlsZSA9IHtcclxuXHRcdFx0XHRcdGhyZWY6IHRlbXBsYXRlU3R5bGVVcmwsXHJcblx0XHRcdFx0XHRyZWw6ICdzdHlsZXNoZWV0J1xyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdGlmIChzdHlsZS5ocmVmLm1hdGNoKC9cXC5sZXNzJC8pKSB7XHJcblx0XHRcdFx0XHRzdHlsZS5yZWwgPSAnc3R5bGVzaGVldC9sZXNzJztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBzdHlsZTtcclxuXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHR2YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gZ2V0U3R5bGVzKHN0YXRlKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzdGF0ZXMgPSB7fTtcclxuXHJcblx0XHRcdFx0Ly9DaGVjayBzdGF0ZSBmb3Igc3R5bGVzXHJcblx0XHRcdFx0d2hpbGUgKHN0YXRlLm5hbWUgIT09ICcnKSB7XHJcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gJHN0YXRlLmdldCgnXicsIHN0YXRlKTtcclxuXHJcblx0XHRcdFx0XHQvL0luaXRpYXRlIG91ciB2aWV3IGxpc3RcclxuXHRcdFx0XHRcdGlmICghc3RhdGVzW3BhcmVudC5uYW1lXSkge1xyXG5cdFx0XHRcdFx0XHRzdGF0ZXNbcGFyZW50Lm5hbWVdID0ge307XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly9DaGVjayB0aGUgdGVtcGxhdGVTdHlsZVxyXG5cdFx0XHRcdFx0aWYgKHN0YXRlLnRlbXBsYXRlU3R5bGVVcmwpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNbcGFyZW50Lm5hbWVdWycnXSkge1xyXG5cdFx0XHRcdFx0XHRcdHN0YXRlc1twYXJlbnQubmFtZV1bJyddID0gZ2V0U3R5bGUoc3RhdGUudGVtcGxhdGVTdHlsZVVybCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvL0NoZWNrIHZpZXdzXHJcblx0XHRcdFx0XHRpZiAoc3RhdGUudmlld3MpIHtcclxuXHRcdFx0XHRcdFx0Xy5mb3JFYWNoKHN0YXRlLnZpZXdzLCBmdW5jdGlvbiAodmlldywga2V5KSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vQ2hlY2sgaWYgd2UgaGF2ZSBhIHN0eWxlXHJcblx0XHRcdFx0XHRcdFx0aWYgKCF2aWV3LnRlbXBsYXRlU3R5bGVVcmwpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vQ2hlY2sgaWYgd2UgYXJlIHRhcmdldGluZyBzb21lIHBhcmVudFxyXG5cdFx0XHRcdFx0XHRcdGlmICgoa2V5ID0ga2V5LnNwbGl0KCdAJykpWzFdKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvL0NoZWNrIGlmIHdlIGhhdmUgc3R5bGVzIGZvciB0aGF0IHBhcmVudFxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNba2V5WzFdXSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZXNba2V5WzFdXSA9IHt9O1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vUGxhY2UgdGhlIHN0eWxlIG9uIHNvbWUgcGFyZW50J3Mgdmlld1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFzdGF0ZXNba2V5WzFdXVtrZXlbMF1dKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlc1trZXlbMV1dW2tleVswXV0gPSBnZXRTdHlsZSh2aWV3LnRlbXBsYXRlU3R5bGVVcmwpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vUGxhY2UgdGhlIHN0eWxlIG9uIG91ciBwYXJlbnQncyB2aWV3XHJcblx0XHRcdFx0XHRcdFx0c3RhdGVzW3BhcmVudC5uYW1lXVtrZXlbMF1dID0gZ2V0U3R5bGUodmlldy50ZW1wbGF0ZVN0eWxlVXJsKTtcclxuXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vQ29udGludWUgd2l0aCB0aGUgcGFyZW50XHJcblx0XHRcdFx0XHRzdGF0ZSA9IHBhcmVudDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vRmxhdHRlbiB0aGUgbGlzdFxyXG5cdFx0XHRcdHZhciBmbGF0ID0gW107XHJcblx0XHRcdFx0Xy5mb3JFYWNoKHN0YXRlcywgZnVuY3Rpb24gKHZpZXdzKSB7XHJcblxyXG5cdFx0XHRcdFx0Xy5mb3JFYWNoKHZpZXdzLCBmdW5jdGlvbiAoc3R5bGUpIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmICghXy5pbmNsdWRlcyhmbGF0LCBzdHlsZSkpIHtcclxuXHRcdFx0XHRcdFx0XHRmbGF0LnB1c2goc3R5bGUpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQvL1JldmVyc2UgaXQgc28gd2UgaGF2ZSBhIHByb3BlciBoaWVyYXJjaHlcclxuXHRcdFx0XHRmbGF0LnJldmVyc2UoKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGZsYXQ7XHJcblxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRyZXN0cmljdDogJ0UnLFxyXG5cdFx0XHRcdGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbSkge1xyXG5cclxuXHRcdFx0XHRcdHNjb3BlLnRlbXBsYXRlU3R5bGVzID0gW107XHJcblxyXG5cdFx0XHRcdFx0dmFyIGh0bWwgPSAnPGxpbmsgbmctYXR0ci1yZWw9XCJ7e3N0eWxlLnJlbH19XCIgbmctcmVwZWF0PVwic3R5bGUgaW4gdGVtcGxhdGVTdHlsZXNcIiBuZy1ocmVmPVwie3tzdHlsZS5ocmVmfX1cIj4nO1xyXG5cclxuXHRcdFx0XHRcdGh0bWwgPSBodG1sLnJlcGxhY2UoL1xce1xcey9nLCAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSk7XHJcblx0XHRcdFx0XHRodG1sID0gaHRtbC5yZXBsYWNlKC9cXH1cXH0vZywgJGludGVycG9sYXRlLmVuZFN5bWJvbCgpKTtcclxuXHJcblx0XHRcdFx0XHRlbGVtLmFwcGVuZCgkY29tcGlsZShodG1sKShzY29wZSkpO1xyXG5cclxuXHRcdFx0XHRcdCRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG5cclxuXHRcdFx0XHRcdFx0c2NvcGUudGVtcGxhdGVTdHlsZXMgPSBnZXRTdHlsZXModG9TdGF0ZSk7XHJcblxyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHR9XHJcblx0XSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnQm90c1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZ2V0TGlzdHMgPSBmdW5jdGlvbiAodXNlcikge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9ib3RzL2xpc3RzJyk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldExpc3QgPSBmdW5jdGlvbiAobGlzdCkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9ib3RzL2xpc3RzLycgKyBsaXN0Ll9pZCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLnNhdmVMaXN0ID0gZnVuY3Rpb24gKHVzZXIsIGxpc3QpIHtcclxuICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvYm90cy9saXN0cycsIHtcclxuICAgICAgdXNlcjogdXNlcixcclxuICAgICAgbGlzdDogbGlzdFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLnJlcG9ydExpc3QgPSBmdW5jdGlvbiAodXNlciwgbGlzdCkge1xyXG4gICAgJGh0dHAuZ2V0KCcvYXBpL2JvdHMvbGlzdHMvJyArIGxpc3QuX2lkICsgJy9yZXBvcnQvJyArIHVzZXIuX2lkKTtcclxuICB9O1xyXG5cclxuICBzdmMuZGVsZXRlTGlzdCA9IGZ1bmN0aW9uIChsaXN0KSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL2JvdHMvbGlzdHMvJyArIGxpc3QuX2lkKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnQ2F0ZWdvcmllc1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZ2V0Q2F0ZWdvcmllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY2F0ZWdvcmllcycpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRUYXNrcyA9IGZ1bmN0aW9uIChjYXRlZ29yeSkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jYXRlZ29yaWVzLycgKyBjYXRlZ29yeSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmFkZENhdGVnb3J5ID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jYXRlZ29yaWVzLycsIGNhdGVnb3J5KTtcclxuICB9O1xyXG5cclxuICBzdmMuYWRkVGFzayA9IGZ1bmN0aW9uIChjYXRlZ29yeSwgdGFzaykge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY2F0ZWdvcmllcy8nICsgY2F0ZWdvcnkgKyAnL3Rhc2tzJywgdGFzayk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLnNldFByaW9yaXR5TGlzdCA9IGZ1bmN0aW9uKGxpc3QpIHtcclxuICAgIHN2Yy5jaG9pY2VzID0gbGlzdDtcclxuICAgIHN2Yy5wcmlvcml0eUxpc3QgPSBbXTtcclxuICAgIC8vTWFrZSBhIG5ldyBjaG9pY2UgbGlzdFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IGxpc3QubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICB2YXIgcmFuZG9tID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKTtcclxuICAgICAgICBzdmMucHJpb3JpdHlMaXN0LnB1c2goe1xyXG4gICAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgICBmaXJzdENob2ljZTogbGlzdFtyYW5kb20gPT09IDAgPyBpIDogal0ubmFtZSxcclxuICAgICAgICAgIHNlY29uZENob2ljZTogbGlzdFtyYW5kb20gPT09IDAgPyBqIDogaV0ubmFtZSxcclxuICAgICAgICAgIGNob2ljZTogJydcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2h1ZmZsZShzdmMucHJpb3JpdHlMaXN0KTtcclxuICAgIGZvciAoaSBpbiBzdmMucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHN2Yy5wcmlvcml0eUxpc3RbaV0uaWQgPSBpICsgMTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzdmMuZ2V0UHJpb3JpdHlMaXN0ID0gZnVuY3Rpb24obGlzdCkge1xyXG4gICAgcmV0dXJuIHN2Yy5wcmlvcml0eUxpc3Q7XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xyXG4gICAgdmFyIG0gPSBhcnJheS5sZW5ndGgsIHQsIGk7XHJcbiAgICAvLyBXaGlsZSB0aGVyZSByZW1haW4gZWxlbWVudHMgdG8gc2h1ZmZsZeKAplxyXG4gICAgd2hpbGUgKG0pIHtcclxuICAgICAgLy8gUGljayBhIHJlbWFpbmluZyBlbGVtZW504oCmXHJcbiAgICAgIGkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtLS0pO1xyXG4gICAgICAvLyBBbmQgc3dhcCBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQuXHJcbiAgICAgIC8vYXJyYXlbbV0uZmlyc3RDaG9pY2U7XHJcbiAgICAgIHQgPSBhcnJheVttXTtcclxuICAgICAgYXJyYXlbbV0gPSBhcnJheVtpXTtcclxuICAgICAgYXJyYXlbaV0gPSB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH1cclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLnNlcnZpY2UoJ0VtYWlsU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gIHN2Yy5zZW5kID0gZnVuY3Rpb24gKGVtYWlsKSB7XHJcbiAgICBjb25zb2xlLmxvZyhlbWFpbCk7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9lbWFpbCcsIGVtYWlsKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnRmlsZVN2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gICAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gICAgc3ZjLmdldEltYWdlcyA9IGZ1bmN0aW9uIChmb2xkZXIpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9maWxlcy9pbWFnZXMvJyArIGZvbGRlcik7XHJcbiAgICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnR2FtZVN2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gICAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gICAgc3ZjLmdldEhpZ2hzY29yZSA9IGZ1bmN0aW9uIChnYW1lLCB1c2VyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvZ2FtZXMvJyArIGdhbWUgKyAnLycgKyB1c2VyICsgJy9oaWdoc2NvcmUnKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLnNldEhpZ2hzY29yZSA9IGZ1bmN0aW9uIChnYW1lLCB1c2VyLCBzY29yZSkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9nYW1lcy8nICsgZ2FtZSArICcvJyArIHVzZXIgKyAnL2hpZ2hzY29yZScsIHtcclxuICAgICAgICBzY29yZTogc2NvcmVcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnTGFuZ3VhZ2VTdmMnLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gIHN2Yy5sYW5ndWFnZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIkVOXCIsXHJcbiAgICAgIFwibmFtZVwiOiBcIkVuZ2xpc2hcIixcclxuICAgICAgXCJmbGFnXCI6IFwiZmxhZy1pY29uLWdiXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIk5MXCIsXHJcbiAgICAgIFwibmFtZVwiOiBcIk5lZGVybGFuZHNcIixcclxuICAgICAgXCJmbGFnXCI6IFwiZmxhZy1pY29uLW5sXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwiY29kZVwiOiBcIkZSXCIsXHJcbiAgICAgIFwibmFtZVwiOiBcIkZyYW7Dp2Fpc1wiLFxyXG4gICAgICBcImZsYWdcIjogXCJmbGFnLWljb24tZnJcIlxyXG4gICAgfVxyXG4gIF07XHJcblxyXG4gIHN2Yy50ZXh0ID0gW1xyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJFTlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJOTFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJGUlwiXHJcbiAgICB9XHJcbiAgXTtcclxuXHJcbiAgc3ZjLnNlbGVjdGVkTGFuZ3VhZ2UgPSBzdmMubGFuZ3VhZ2VzWzBdO1xyXG5cclxuICBzdmMuc2V0TGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZ3VhZ2UpIHtcclxuICAgIHN2Yy5zZWxlY3RlZExhbmd1YWdlID0gbGFuZ3VhZ2U7XHJcbiAgICByZXR1cm4gbGFuZ3VhZ2U7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldExhbmd1YWdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHN2Yy5zZWxlY3RlZExhbmd1YWdlO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRQb3N0ID0gZnVuY3Rpb24gKHBvc3QpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMvJyArIHBvc3QuX2lkKTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKTtcclxuICB9O1xyXG5cclxuICBzdmMuc2V0VG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHRva2VuO1xyXG4gICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmF1dGhlbnRpY2F0ZSA9IGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy9hdXRoZW50aWNhdGUnLCB7XHJcbiAgICAgIHVzZXI6IHVzZXJcclxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW4gPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICByZXR1cm4gc3ZjLnNldFRva2VuKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmxvZ2luID0gZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvJyArIHVzZXIgKyAnL2xvZ2luJylcclxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgcmV0dXJuIHN2Yy5zZXRUb2tlbihyZXNwb25zZS5kYXRhKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHN2Yy51cGRhdGVVc2VyID0gZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzLycgKyB1c2VyLl9pZCwge1xyXG4gICAgICB1c2VyOiB1c2VyXHJcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBzdmMuY2hlY2tQYXNzd29yZCA9IGZ1bmN0aW9uICh1c2VyLCBwYXNzd29yZCkge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvJyArIHVzZXIgKyAnL3ZlcmlmaWNhdGlvbicsIHtcclxuICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBzdmMuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbiAodXNlciwgb2xkUGFzc3dvcmQsIG5ld1Bhc3N3b3JkKSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy8nICsgdXNlciArICcvcGFzc3dvcmQnLCB7XHJcbiAgICAgIG9sZFBhc3N3b3JkOiBvbGRQYXNzd29yZCxcclxuICAgICAgbmV3UGFzc3dvcmQgOiBuZXdQYXNzd29yZFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmNoYW5nZVVzZXJuYW1lID0gZnVuY3Rpb24gKHVzZXIsIG5ld1VzZXJuYW1lKSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy8nICsgdXNlciArICcvdXNlcm5hbWUnLCB7XHJcbiAgICAgIG5ld1VzZXJuYW1lOiBuZXdVc2VybmFtZVxyXG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKTtcclxuICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9ICcnO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5jcmVhdGVVc2VyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XHJcbiAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcclxuICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXHJcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1F1aXpHb29nbGVDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgRmlsZVN2Yykge1xyXG4gIEZpbGVTdmMuZ2V0SW1hZ2VzKCdnb29nbGUnKVxyXG4gIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAkc2NvcGUuaW1hZ2VzID0gcmVzcG9uc2UuZGF0YTtcclxuICB9KTtcclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUXVpekxvZ29zQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEZpbGVTdmMpIHtcclxuICBGaWxlU3ZjLmdldEltYWdlcygnbG9nb3MnKVxyXG4gIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAkc2NvcGUuaW1hZ2VzID0gcmVzcG9uc2UuZGF0YTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==
