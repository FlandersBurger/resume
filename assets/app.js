angular.module("app",["ui.router","ui.bootstrap","ngAnimate","ngSanitize","ngDragDrop","vcRecaptcha","chart.js"]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){t.otherwise("/home"),e.state("home",{url:"/home",templateUrl:"/home.html"}).state("policy",{url:"/policy",templateUrl:"/policy.html"}).state("print",{url:"/print",templateUrl:"/print.html"}).state("experience",{url:"/experience",controller:"ExperienceCtrl",templateUrl:"/experience.html"}).state("skills",{url:"/skills",controller:"SkillsCtrl",templateUrl:"/skills.html"}).state("hobbies",{url:"/hobbies",controller:"HobbiesCtrl",templateUrl:"/hobbies.html"}).state("contact",{url:"/contact",controller:"ContactCtrl",templateUrl:"/contact.html"}).state("workout",{url:"/workout",controller:"WorkoutCtrl",templateUrl:"/workout.html"}).state("top-priority",{url:"/top-priority",controller:"TopPriorityCtrl",templateUrl:"/top-priority.html"}).state("posts",{url:"/posts",controller:"PostsCtrl",templateUrl:"/posts.html"}).state("profile",{url:"/profile",controller:"ProfileCtrl",templateUrl:"/profile.html"}),n.html5Mode({enabled:!0,requireBase:!1})}]),angular.module("app").service("WebSocketSvc",["$rootScope","$timeout",function(n,t){var o,a=function(){(o=new WebSocket("https:"===window.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host)).onopen=function(){console.log("Websocket connected")},o.onclose=function(e){console.log("Websocket closed. Reconnecting..."),t(a,1e3)},o.onerror=function(e){console.log("Error: "+e+" - State: "+o.readyState)},o.onmessage=function(e){var t=JSON.parse(e.data);n.$broadcast("ws:"+t.topic,t.data)}};this.send=function(e,t){var n=JSON.stringify({topic:e,data:t});o.send(n)},this.connect=a}]).run(["WebSocketSvc",function(e){e.connect()}]),angular.module("app").controller("AppCtrl",["$scope","$location","LanguageSvc","UserSvc",function(n,e,t,o){console.log("%cYou sneaky bugger!","font: 2em sans-serif; color: DodgerBlue; text-shadow: 2px 0 0 #444, -2px 0 0 #444, 0 2px 0 #444, 0 -2px 0 #444, 1px 1px #444, -1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444;"),console.log("I'm glad you're curious whether something is popping up in here. I'm a bit of a stickler when it comes to messages in the console so I try to make sure only things I want are visible. That being said, if there is a big error here, I would really appreciate you telling me so I can get rid of it!"),console.log("The code for my resume is hosted on Github if you really want to go into all this! => https://github.com/FlandersBurger/resume"),$(window).load(function(){$(".loading").fadeOut("slow"),$(".content").fadeIn("slow")}),n.themeCounter=6,n.today=new Date,n.year=n.today.getFullYear(),n.random=Math.floor(1e6*Math.random()),n.flipTheme=function(){$(".loading").show(),$(".content").hide(),setTimeout(function(){$(".loading").fadeOut("slow"),$(".content").fadeIn("slow")},800),n.themeCounter=n.themeCounter<6?n.themeCounter+1:n.themeCounter=1},$.getJSON("/skills.json",function(e){n.skills=e.filter(function(e){return e.enabled})}),$.getJSON("/hobbies.json",function(e){n.hobbies=e}),$.getJSON("/experience.json",function(e){n.jobs=e,n.jobs.forEach(function(e){e.startDate=new Date(e.startDate),e.endDate&&(e.endDate=new Date(e.endDate))})}),n.getTimeSpan=function(e){return e.startDate.getFullYear()+(e.endDate?" - "+e.endDate.getFullYear():" - Today")},n.languages=t.languages,n.selectedLanguage=t.getLanguage(),n.selectLanguage=function(e){n.selectedLanguage=t.setLanguage(e)},n.hoverdiv=function(e,t){var n=e.clientX+"px",o=e.clientY+20+"px";document.getElementById(t);return $("#"+t).css("left",n),$("#"+t).css("top",o),$("#"+t).toggle(),!1},n.socialMedia=[{name:"linkedin",url:"https://www.linkedin.com/in/laurent-debacker-1633a916",icon:"fa-linkedin"},{name:"github",url:"https://github.com/FlandersBurger",icon:"fa-github"},{name:"jsfiddle",url:"https://jsfiddle.net/user/BelgoCanadian/fiddles/",icon:"fa-jsfiddle"},{name:"stackoverflow",url:"http://stackoverflow.com/users/1083923/belgocanadian",icon:"fa-stack-overflow"}],window.localStorage.user&&o.login(window.localStorage.user).then(function(e){n.loggedIn=!0,n.currentUser=e.data}),n.$on("login",function(e,t){window.localStorage.user=t._id,n.loggedIn=!0,n.currentUser=t}),n.$on("update",function(e,t){n.currentUser=t,n.currentUser.birthDate=new Date(n.currentUser.birthDate),n.loading=!1,setTimeout(function(){$("#loading-icon").fadeOut("slow")},1e3)}),n.$on("loading",function(e,t){n.loading=!0,$("#loading-icon").show()}),n.$on("loaded",function(e,t){n.loading=!1,setTimeout(function(){$("#loading-icon").fadeOut("slow")},1e3)}),n.logout=function(){firebase.auth().signOut().then(function(){n.loggedIn=!1,window.localStorage.clear(),n.$broadcast("logout")}).catch(function(e){})}}]),angular.module("app").controller("ContactCtrl",["$scope","EmailSvc",function(t,e){t.options=[{name:"Spam",text:"I am a spam bot and automatically check the first option I find!"},{name:"Opportunitiy",text:"You seem to have the skills I seek, I'd like to talk about some opportunities."},{name:"Resume",text:"I dig the resume, how did you make it?"},{name:"Other",text:"Sumtin else!"}],t.contact={email:"",name:"",phone:"",about:"",message:""},t.send=function(){t.sending=!0,console.log("here"),e.send({email:t.contact.email,name:t.contact.name,phone:t.contact.phone,about:t.contact.about,message:t.contact.message}).then(function(e){t.sent=!0,console.log("SUCCESS. status=%d, text=%s",e.status,e.text),console.log(e)},function(e){t.sending=!1,console.log("FAILED. error=",e)})}}]),angular.module("app").controller("ExperienceCtrl",["$scope",function(e){e.getSkill=function(t){if(e.skills)return e.skills.find(function(e){return e.code===t})}}]),angular.module("app").controller("HobbiesCtrl",["$scope","$window",function(t,e){t.hobbySelectorVisible=!1,$.getJSON("https://www.reddit.com/user/belgocanadian/about/.json",function(e){}),t.selectedHobby=t.hobbies[0],t.selectHobby=function(e){t.selectedHobby=e,t.hobbySelectorVisible=!1},t.showHobby=function(e,t,n){return!!e.images&&0<e.images.length}}]),angular.module("app").controller("ListsCtrl",["$scope","$location","CategoriesSvc",function(o,e,a){o.showCategory=!0,o.init=function(){a.getCategories().success(function(e){o.categories=e,o.tasks=[];for(var t=0;t<o.categories.length;t++)for(var n=0;n<o.categories[t].tasks.length;n++)o.tasks.push({category:o.categories[t].name,task:o.categories[t].tasks[n].name})})},o.selectCategory=function(e){o.selectedCategory=e,o.selectedTasks=[],o.selectableTasks=[];for(var t=0;t<o.selectedCategory.tasks.length;t++)o.selectableTasks.push(o.selectedCategory.tasks[t]);o.showCategory=!1,o.enteredCategory=null},o.newCategory=function(e){for(var t=!1,n=0;n<o.categories.length;n++)o.categories[n].name===e&&(o.selectCategory(o.categories[n]),t=!0);t||a.addCategory({category:e}).success(function(e){o.init(),o.selectCategory(e)}),o.enteredCategory=null},o.newTask=function(e){for(var t=!1,n=0;n<o.selectedCategory.tasks.length;n++)o.selectedCategory.tasks[n].name===e&&(t=!0,o.selectTask(o.selectedCategory.tasks[n]));t||a.addTask(o.selectedCategory.name,{task:e}).success(function(){o.selectedCategory.tasks.push({name:e}),o.addTask(o.selectedTasks,o.selectedCategory.tasks[o.selectedCategory.tasks.length-1])}),o.enteredTask=null},o.selectTask=function(e){o.addTask(o.selectedTasks,e),o.removeTask(o.selectableTasks,e),o.enteredTask=null},o.unselectTask=function(e){o.addTask(o.selectableTasks,e),o.removeTask(o.selectedTasks,e)},o.addTask=function(e,t){e.push(t)},o.removeTask=function(e,t){e.splice(e.indexOf(t),1)},o.startPrioritizing=function(){a.setPriorityList(o.selectedTasks),e.path("/prioritize")},o.getQuestions=function(){if(!o.selectedTasks)return"";for(var e=0,t=o.selectedTasks.length-1;0<t;t--)e+=t;return e}}]),angular.module("app").controller("LoginCtrl",["$scope","$location","UserSvc",function(o,a,r){var t=new firebaseui.auth.AuthUI(firebase.auth());function n(){t.start("#firebaseui-auth-container",{callbacks:{signInSuccess:function(t,e,n){return firebase.auth().currentUser.getIdToken(!0).then(function(e){r.authenticate({displayName:t.displayName,email:t.email,photoURL:t.photoURL,emailVerified:t.emailVerified,idToken:e}).then(function(e){o.$emit("login",e.data),$("#modal-login").modal("hide"),a.path("/")},function(){o.$emit("popup",{message:"Login Failed",type:"alert-danger"})})}).catch(function(e){}),!1},signInFailure:function(e){if("firebaseui/anonymous-upgrade-merge-conflict"!=e.code)return Promise.resolve();var t=e.credential;return firebase.auth().signInWithCredential(t)},uiShown:function(){document.getElementById("loader").style.display="none"}},signInSuccessUrl:"/home",signInOptions:[firebase.auth.GoogleAuthProvider.PROVIDER_ID,firebase.auth.FacebookAuthProvider.PROVIDER_ID],signInFlow:"popup"})}o.$on("logout",function(e){t.reset(),n()}),n()}]),angular.module("app").controller("PostsCtrl",["$scope","$filter","PostsSvc",function(n,e,o){n.addPost=function(){n.postBody&&o.create({body:n.postBody}).success(function(e){n.postBody=null})},o.fetch().success(function(e){n.posts=e,n.filteredPosts=e}),n.$on("ws:new_post",function(e,t){n.$apply(function(){o.getPost(t).then(function(e){n.posts.unshift(e.data)})})})}]),angular.module("app").controller("ProfileCtrl",["$scope","$location","UserSvc",function(r,e,s){r.currentUser?($("#sex-indicator").offset({left:r.currentUser.gender.sex/200*$("#sex").width()+$("#sex").offset().left}),$("#identity-indicator").offset({left:r.currentUser.gender.identity/200*$("#identity").width()+$("#identity").offset().left})):e.path("/"),r.sexes=["Male","FtM Male","Intersex","MtF Female","Female"],r.identities=["Man","Bigender","Pangender","Agender","Polygender","Genderfluid","Genderqueer","Queer","Woman"],r.dateOptions={maxDate:new Date,minDate:new Date(1900,1,1),initDate:new Date(2e3,1,1),datepickerMode:"year"},r.gender=function(e,t){return e[Math.round(t/200*(e.length-1))]},r.startSlider=function(){},r.dragSlider=function(e,t,n){r.currentUser.gender[n]=Math.round(($("#"+n+"-indicator").offset().left-$("#"+n).offset().left)/($("#"+n).width()-$("#"+n+"-indicator").width())*200),r.$apply()},r.stopSlider=function(){},r.usernameToggle=!0,r.passwordToggle=!0,r.toggleUsername=function(){r.usernameToggle=!r.usernameToggle,r.newUsername=r.currentUser.username},r.togglePassword=function(){r.newPassword=null,r.confirmPassword=null,r.passwordToggle=!r.passwordToggle},r.checkPassword=function(e){if(e){var t=r.currentUser._id;s.checkPassword(t,e).then(function(e){r.togglePassword()},function(){var e=$(".password").css("backgroundColor");$(".password").animate({backgroundColor:"#FFB6C1"},200).animate({backgroundColor:e},200)})}},r.changePassword=function(e,t,n){if(t)if(t==n){var o=r.currentUser._id;s.changePassword(o,e,t).then(function(e){r.$emit("popup",{message:"Password Changed",type:"alert-success"}),r.oldPassword=null,r.togglePassword()},function(){r.$emit("popup",{message:"Password Change Failed",type:"alert-danger"})})}else{var a=$(".password").css("backgroundColor");$(".password").animate({backgroundColor:"#FFB6C1"},200).animate({backgroundColor:a},200)}},r.changeUsername=function(t){r.$emit("loading"),s.changeUsername(r.currentUser._id,t).then(function(e){r.$emit("update",e.data)},function(e){r.$emit("popup",{message:t+" already in use",type:"alert-danger"})})},r.updateUser=function(){r.$emit("loading"),s.updateUser(r.currentUser).then(function(e){r.$emit("update",e.data)})}}]),angular.module("app").controller("SkillsCtrl",["$scope","$window",function(t,e){t.selectedSkill=0,t.skillsVisible=!1,t.labels=["Download Sales","In-Store Sales","Mail-Order Sales"],t.data=[300,500,100],$.getJSON("/skills.json",function(e){t.skills=e.filter(function(e){return e.enabled}),t.setSelectedSkill=function(e){t.selectedSkill=e,t.selectedSkill.chartOptions={cutoutPercentage:80,circumference:2*Math.PI,maintainAspectRatio:!0,tooltips:{enabled:!1}},t.selectedSkill.chartStyle={"background-image":"url(/skills/"+t.selectedSkill.image+")","background-repeat":"no-repeat","background-size":"60%","background-position":"50% 50%"}},t.setSelectedSkill(t.skills[0]),t.$apply()})}]),angular.module("app").controller("TopPriorityCtrl",["$scope",function(a){var r,o,g,p=[],s=[],f=800,h=400,m=8,k=4;function n(e){this.score=0,this.name=e,this.choose=function(){this.score++}}function t(e){for(var t in this.tasks=[],e)this.tasks[t]=new n(e[t].item);this.choose=function(e){for(var t in this.tasks)this.tasks[t].name==e&&this.tasks[t].choose()}}function e(e,t){this.avatar=[e,t],this.name="",this.tasks=[],this.setTasks=function(e){for(var t=0;t<e.length;t++)this.tasks[t]=new n(e[t].name)},this.choose=function(e){for(var t in this.tasks)this.tasks[t].name==e&&this.tasks[t].choose()},this.score=function(e){for(var t in this.tasks)if(this.tasks[t].name==e)return this.tasks[t].score}}function i(){for(var e,t,n=!0;n;){n=!1,e=Math.floor(Math.random()*m),t=Math.floor(Math.random()*k);for(var o=0;o<p.length;o++)p[o].avatar[0]==e&&p[o].avatar[1]==t&&(n=!0)}l("#Avatar",e,t)}function l(e,t,n){$(e).css("background-position-x",f/m*-t),$(e).css("background-position-y",h/k*-n),s[0]=t,s[1]=n}a.defaultLists={blank:{caption:"Blank List",message:"What needs to be prioritized?",list:["","",""]},chores:{caption:"Chores",message:"What chores need to be done?",list:["Laundry","Dishes","Sweeping","Groceries","Tidy"]},restaurants:{caption:"Restaurants",message:"What do you want to eat?",list:["Chinese","Japanese","American","Indian","Greek","Italian","Korean","Thai","Vietnamese","Mexican"]},pokemon:{caption:"Pokemon",message:"Which do you gotta catch?",list:["Pikachu","Squirtle","Charmander","Bulbasaur","Pidgeotto","Snorlax"]},genres:{caption:"Movie Genres",message:"What shall we watch tonight?",list:["Comedy","Drama","Thriller","Action","Horror","Animated","Adventure","Documentary","Musical","Science Fiction"]}},a.list=[],a.choose_type=function(e){$("#TypeSection").hide(),a.list=a.defaultLists[e].list.map(function(e){return{item:e}}),$("#InputTitle").text(a.defaultLists[e].message),$("#InputSection").show()},a.removeListItem=function(e){a.list.splice(e,1)},a.addListItem=function(){a.list.push({item:""})},a.choose_avatar=function(){p[p.length]=new e(s[0],s[1]),p[p.length-1].setTasks(g.tasks),a.prioritize()},a.start=function(){a.list=a.list.filter(function(e){return e.item});var e=function(e){var t,n={};for(t in e){if(n[e[t].item])return e[t].item;n[e[t].item]=!0}return!0}(a.list);return a.list.length<2?(alert("Oi, there're 2 textboxes for a reason!"),a.choose_type("blank"),!1):!0!==e?(alert("Seems like you prefer "+e+"."),!1):($("#InputSection").hide(),p=[],g=new t(a.list),i(),$(".Top").slideDown("slow"),void $("#AvatarSection").fadeIn())},a.prioritize=function(){var e,t,n,o;for(o=0,n=g.tasks.length,r=[],$("#AvatarSection").hide(),e=0;e<n-1;e++)for(t=e+1;t<n;t++)r[o]=[],r[o][0]=g.tasks[e].name,r[o][1]=g.tasks[t].name,r[o][2]=0,o++;!function(e){var t,n,o=e.length;for(;0!==o;)n=Math.floor(Math.random()*o),t=e[o-=1],e[o]=e[n],e[n]=t}(r),a.new_choice(),$("#PrioritizeSection").fadeIn()},a.next_player=function(){$("#ResultSection").hide(),$("#btnMultiplayer").val("Final results"),i(),$("#AvatarSection").fadeIn()},a.multiplayer=function(){1===p.length?a.restart():a.final_results()},a.restart=function(){for($("#ResultSection").hide(),$("#FinalSection").hide(),$(".Top").slideUp(),$(".ListItem").val("");2<$(".ListItem").length;)$(".ListItem").last().parent().remove();$("#FinalResultList th").remove(),$("#FinalResultList tr").remove(),$("#btnMultiplayer").val("Restart"),$("#TypeSection").fadeIn(),$(".ListItem").first().focus()},a.new_choice=function(){var e,t;for(e=0;e<r.length;e++)if(0===r[e][2]){var n=Math.round(Math.random());return document.getElementById("choice1").value=r[e][n],document.getElementById("choice2").value=r[e][1-n],o=e,t=Math.round(100*e/r.length),$(".progress-bar").css("width",t+"%").attr("aria-valuenow",t),document.getElementById("ChoicesLeft").innerHTML=t+"%",!1}},a.choose=function(e){var t;g.choose(r[o][e]),p[p.length-1].choose(r[o][e]);var n=r[o][2]=1;for(t=0;t<r.length;t++)0===r[t][2]&&(n=0);1==n?function(){var e,t;for($(".progress-bar").css("width","100%").attr("aria-valuenow",100),document.getElementById("ChoicesLeft").innerHTML="100%",document.getElementById("ResultList").innerHTML="",$("#PrioritizeSection").hide(),t=p.length-1,p[t].tasks.sort(function(e,t){return t[0]-e[0]}),e=0;e<p[t].tasks.length;e++){var n=document.createElement("LI"),o=document.createTextNode(p[t].tasks[e].name+": "+p[t].tasks[e].score+" vote"+(1==p[t].tasks[e].score?"":"s"));n.appendChild(o),document.getElementById("ResultList").appendChild(n)}$("#ResultSection").fadeIn()}():a.new_choice()},a.final_results=function(){var e,t;$("#ResultSection").hide(),$(".Top").slideUp(),g.tasks.sort(function(e,t){return t[0]-e[0]});var n=document.createElement("THEAD"),o=document.createElement("TR");for(o.appendChild(document.createElement("TH")),e=0;e<p.length;e++){var a="th"+e,r=document.createElement("TH");r.setAttribute("id",a),r.style.backgroundImage="url('http://i.imgur.com/IcP5F1m.png')",r.style.width=50,r.style.height=65,r.style.backgroundPosition=-p[e].avatar[0]*(f/m)+"px "+-p[e].avatar[1]*(h/k)+"px",o.appendChild(r)}var s=document.createElement("TD");s.appendChild(document.createTextNode("Total")),s.style.height=65,o.appendChild(s),n.appendChild(o),document.getElementById("FinalResultList").appendChild(n);var i=document.createElement("TBODY");for(e=0;e<g.tasks.length;e++){var l=document.createElement("TR"),c=document.createElement("TD");for(c.appendChild(document.createTextNode(g.tasks[e].name)),l.appendChild(c),t=0;t<p.length;t++){var u=document.createElement("TD");u.appendChild(document.createTextNode(p[t].score(g.tasks[e].name))),l.appendChild(u)}var d=document.createElement("TD");d.appendChild(document.createTextNode(g.tasks[e].score)),l.appendChild(d),i.appendChild(l)}document.getElementById("FinalResultList").appendChild(i),$("#FinalSection").fadeIn()},$(document).ready(function(){$(".ListItem").first().focus(),$("#Avatars").click(function(e){$(this).offset();var t=document.getElementById("Avatars"),n=t.clientWidth,o=t.clientHeight,a=(e.pageX-$(this).offset().left)/n*f;a=Math.floor(a/(f/m));var r=(e.pageY-$(this).offset().top)/o*h;!function(e,t){for(var n=0;n<p.length;n++)if(p[n].avatar[0]==e&&p[n].avatar[1]==t)return alert("Copycat!"),i();l("#Avatar",e,t)}(a,r=Math.floor(r/(h/k)))})})}]),angular.module("app").controller("WorkoutCtrl",["$scope",function(n){n.timeRemaining=0;var o,a=[{name:"Jumping Jacks",split:n.rest=!1},{name:"Wall Sit",split:!1},{name:"Push-Up",split:!1},{name:"Crunch",split:!1},{name:"Step-Up",split:!0},{name:"Squat",split:!1},{name:"Triceps Dip",split:!1},{name:"Plank",split:!1},{name:"High Knees",split:!1},{name:"Lunge",split:!1},{name:"Push-Up with Rotation",split:!1},{name:"Side Plank",split:!0}];n.workout=function(){n.timeRemaining?(clearInterval(o),n.timer="",n.timeRemaining=0,n.rest=!1,n.exercise={name:"",split:!1}):(n.timeRemaining=45*a.length,o=setInterval(function(){if(n.timeRemaining--,0===n.timeRemaining)return n.exercise={name:"Finished! Congrats!",split:!1},n.timer="",n.timeRemaining=0,n.rest=!1,n.$apply(),clearInterval(o);var e=Math.floor(n.timeRemaining/45),t=n.timeRemaining-45*e;n.timer=30<t?t-30:t,n.rest=30<t,n.exercise=a[a.length-e-1],n.$apply()},1e3))}}]),angular.module("app").directive("head",["$rootScope","$state","$compile","$interpolate",function(n,s,o,a){var i=function(e){var t={href:e,rel:"stylesheet"};return t.href.match(/\.less$/)&&(t.rel="stylesheet/less"),t};return{restrict:"E",link:function(r,e){r.templateStyles=[];var t='<link ng-attr-rel="{{style.rel}}" ng-repeat="style in templateStyles" ng-href="{{style.href}}">';t=(t=t.replace(/\{\{/g,a.startSymbol())).replace(/\}\}/g,a.endSymbol()),e.append(o(t)(r)),n.$on("$stateChangeStart",function(e,t,n,o,a){r.templateStyles=function(e){for(var n={};""!==e.name;){var o=s.get("^",e);n[o.name]||(n[o.name]={}),e.templateStyleUrl&&(n[o.name][""]||(n[o.name][""]=i(e.templateStyleUrl))),e.views&&_.forEach(e.views,function(e,t){if(e.templateStyleUrl)return(t=t.split("@"))[1]?(n[t[1]]||(n[t[1]]={}),void(n[t[1]][t[0]]||(n[t[1]][t[0]]=i(e.templateStyleUrl)))):void(n[o.name][t[0]]=i(e.templateStyleUrl))}),e=o}var t=[];return _.forEach(n,function(e){_.forEach(e,function(e){_.includes(t,e)||t.push(e)})}),t.reverse(),t}(t)})}}}]),angular.module("app").service("CategoriesSvc",["$http",function(n){var a=this;a.getCategories=function(){return n.get("/api/categories")},a.getTasks=function(e){return n.get("/api/categories/"+e)},a.addCategory=function(e){return n.post("/api/categories/",e)},a.addTask=function(e,t){return n.post("/api/categories/"+e+"/tasks",t)},a.setPriorityList=function(e){a.choices=e,a.priorityList=[];for(var t=0;t<e.length;t++)for(var n=t+1;n<e.length;n++){var o=Math.round(Math.random());a.priorityList.push({id:0,firstChoice:e[0===o?t:n].name,secondChoice:e[0===o?n:t].name,choice:""})}!function(e){var t,n,o=e.length;for(;o;)n=Math.floor(Math.random()*o--),e[o].firstChoice,t=e[o],e[o]=e[n],e[n]=t}(a.priorityList);for(t=0;t<a.priorityList.length;t++)a.priorityList[t].id=t+1},a.getPriorityList=function(e){return a.priorityList}}]),angular.module("app").service("EmailSvc",["$http",function(t){this.send=function(e){return console.log(e),t.post("/api/email",e)}}]),angular.module("app").service("LanguageSvc",function(){var t=this;t.languages=[{code:"EN",name:"English",flag:"flag-icon-gb"},{code:"NL",name:"Nederlands",flag:"flag-icon-nl"},{code:"FR",name:"Français",flag:"flag-icon-fr"}],t.text=[{code:"EN"},{code:"NL"},{code:"FR"}],t.selectedLanguage=t.languages[0],t.setLanguage=function(e){return t.selectedLanguage=e},t.getLanguage=function(){return t.selectedLanguage}}),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)},this.getPost=function(e){return t.get("/api/posts/"+e._id)}}]),angular.module("app").service("UserSvc",["$http",function(o){var n=this;n.getUser=function(){return o.get("/api/users")},n.setToken=function(e){return o.defaults.headers.common["X-Auth"]=e,n.getUser()},n.authenticate=function(e){return o.post("/api/users/authenticate",{user:e}).then(function(e){return window.localStorage.token=e.data,n.setToken(e.data)})},n.login=function(e){return o.get("/api/users/"+e+"/login").then(function(e){return window.localStorage.token=e.data,n.setToken(e.data)})},n.updateUser=function(e){return o.post("/api/users/"+e._id,{user:e}).then(function(){return n.getUser()})},n.checkPassword=function(e,t){return o.post("/api/users/"+e+"/verification",{password:t})},n.changePassword=function(e,t,n){return o.post("/api/users/"+e+"/password",{oldPassword:t,newPassword:n})},n.changeUsername=function(e,t){return o.post("/api/users/"+e+"/username",{newUsername:t}).then(function(){return n.getUser()})},n.logout=function(){window.localStorage.clear(),o.defaults.headers.common["X-Auth"]=""},n.createUser=function(e,t){return o.post("/api/users",{username:e,password:t}).then(function(){return n.login(e,t)})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
