var defaultDiacriticsRemovalMap = [{
  base: "A",
  letters: /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g
}, {
  base: "AA",
  letters: /[\uA732]/g
}, {
  base: "AE",
  letters: /[\u00C6\u01FC\u01E2]/g
}, {
  base: "AO",
  letters: /[\uA734]/g
}, {
  base: "AU",
  letters: /[\uA736]/g
}, {
  base: "AV",
  letters: /[\uA738\uA73A]/g
}, {
  base: "AY",
  letters: /[\uA73C]/g
}, {
  base: "B",
  letters: /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g
}, {
  base: "C",
  letters: /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g
}, {
  base: "D",
  letters: /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g
}, {
  base: "DZ",
  letters: /[\u01F1\u01C4]/g
}, {
  base: "Dz",
  letters: /[\u01F2\u01C5]/g
}, {
  base: "E",
  letters: /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g
}, {
  base: "F",
  letters: /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g
}, {
  base: "G",
  letters: /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g
}, {
  base: "H",
  letters: /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g
}, {
  base: "I",
  letters: /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g
}, {
  base: "J",
  letters: /[\u004A\u24BF\uFF2A\u0134\u0248]/g
}, {
  base: "K",
  letters: /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g
}, {
  base: "L",
  letters: /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g
}, {
  base: "LJ",
  letters: /[\u01C7]/g
}, {
  base: "Lj",
  letters: /[\u01C8]/g
}, {
  base: "M",
  letters: /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g
}, {
  base: "N",
  letters: /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g
}, {
  base: "NJ",
  letters: /[\u01CA]/g
}, {
  base: "Nj",
  letters: /[\u01CB]/g
}, {
  base: "O",
  letters: /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g
}, {
  base: "OI",
  letters: /[\u01A2]/g
}, {
  base: "OO",
  letters: /[\uA74E]/g
}, {
  base: "OU",
  letters: /[\u0222]/g
}, {
  base: "P",
  letters: /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g
}, {
  base: "Q",
  letters: /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g
}, {
  base: "R",
  letters: /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g
}, {
  base: "S",
  letters: /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g
}, {
  base: "T",
  letters: /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g
}, {
  base: "TZ",
  letters: /[\uA728]/g
}, {
  base: "U",
  letters: /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g
}, {
  base: "V",
  letters: /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g
}, {
  base: "VY",
  letters: /[\uA760]/g
}, {
  base: "W",
  letters: /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g
}, {
  base: "X",
  letters: /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g
}, {
  base: "Y",
  letters: /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g
}, {
  base: "Z",
  letters: /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g
}, {
  base: "a",
  letters: /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
}, {
  base: "aa",
  letters: /[\uA733]/g
}, {
  base: "ae",
  letters: /[\u00E6\u01FD\u01E3]/g
}, {
  base: "ao",
  letters: /[\uA735]/g
}, {
  base: "au",
  letters: /[\uA737]/g
}, {
  base: "av",
  letters: /[\uA739\uA73B]/g
}, {
  base: "ay",
  letters: /[\uA73D]/g
}, {
  base: "b",
  letters: /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g
}, {
  base: "c",
  letters: /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
}, {
  base: "d",
  letters: /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
}, {
  base: "dz",
  letters: /[\u01F3\u01C6]/g
}, {
  base: "e",
  letters: /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
}, {
  base: "f",
  letters: /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g
}, {
  base: "g",
  letters: /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
}, {
  base: "h",
  letters: /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
}, {
  base: "hv",
  letters: /[\u0195]/g
}, {
  base: "i",
  letters: /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
}, {
  base: "j",
  letters: /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g
}, {
  base: "k",
  letters: /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
}, {
  base: "l",
  letters: /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
}, {
  base: "lj",
  letters: /[\u01C9]/g
}, {
  base: "m",
  letters: /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g
}, {
  base: "n",
  letters: /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
}, {
  base: "nj",
  letters: /[\u01CC]/g
}, {
  base: "o",
  letters: /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
}, {
  base: "oi",
  letters: /[\u01A3]/g
}, {
  base: "ou",
  letters: /[\u0223]/g
}, {
  base: "oo",
  letters: /[\uA74F]/g
}, {
  base: "p",
  letters: /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g
}, {
  base: "q",
  letters: /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g
}, {
  base: "r",
  letters: /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
}, {
  base: "s",
  letters: /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
}, {
  base: "t",
  letters: /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
}, {
  base: "tz",
  letters: /[\uA729]/g
}, {
  base: "u",
  letters: /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
}, {
  base: "v",
  letters: /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g
}, {
  base: "vy",
  letters: /[\uA761]/g
}, {
  base: "w",
  letters: /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g
}, {
  base: "x",
  letters: /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g
}, {
  base: "y",
  letters: /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
}, {
  base: "z",
  letters: /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
}],
    domains = [".com", ".org", ".net", ".ac", ".ad", ".ae", ".af", ".ag", ".ai", ".al", ".am", ".ao", ".aq", ".ar", ".as", ".at", ".au", ".aw", ".ax", ".az", ".ba", ".bb", ".bd", ".be", ".bf", ".bg", ".bh", ".bi", ".bj", ".bm", ".bn", ".bo", ".bq", ".br", ".bs", ".bt", ".bw", ".by", ".bz", ".ca", ".cc", ".cd", ".cf", ".cg", ".ch", ".ci", ".ck", ".cl", ".cm", ".cn", ".co", ".cr", ".cu", ".cv", ".cw", ".cx", ".cy", ".cz", ".de", ".dj", ".dk", ".dm", ".do", ".dz", ".ec", ".ee", ".eg", ".eh", ".er", ".es", ".et", ".eu", ".fi", ".fj", ".fk", ".fm", ".fo", ".fr", ".ga", ".gd", ".ge", ".gf", ".gg", ".gh", ".gi", ".gl", ".gm", ".gn", ".gp", ".gq", ".gr", ".gs", ".gt", ".gu", ".gw", ".gy", ".hk", ".hm", ".hn", ".hr", ".ht", ".hu", ".id", ".ie", ".il", ".im", ".in", ".io", ".iq", ".ir", ".is", ".it", ".je", ".jm", ".jo", ".jp", ".ke", ".kg", ".kh", ".ki", ".km", ".kn", ".kp", ".kr", ".kw", ".ky", ".kz", ".la", ".lb", ".lc", ".li", ".lk", ".lr", ".ls", ".lt", ".lu", ".lv", ".ly", ".ma", ".mc", ".md", ".me", ".mg", ".mh", ".mk", ".ml", ".mm", ".mn", ".mo", ".mp", ".mq", ".mr", ".ms", ".mt", ".mu", ".mv", ".mw", ".mx", ".my", ".mz", ".na", ".nc", ".ne", ".nf", ".ng", ".ni", ".nl", ".no", ".np", ".nr", ".nu", ".nz", ".om", ".pa", ".pe", ".pf", ".pg", ".ph", ".pk", ".pl", ".pm", ".pn", ".pr", ".ps", ".pt", ".pw", ".py", ".qa", ".re", ".ro", ".rs", ".ru", ".rw", ".sa", ".sb", ".sc", ".sd", ".se", ".sg", ".sh", ".si", ".sk", ".sl", ".sm", ".sn", ".so", ".sr", ".ss", ".st", ".su", ".sv", ".sx", ".sy", ".sz", ".tc", ".td", ".tf", ".tg", ".th", ".tj", ".tk", ".tl", ".tm", ".tn", ".to", ".tr", ".tt", ".tv", ".tw", ".tz", ".ua", ".ug", ".uk", ".us", ".uy", ".uz", ".va", ".vc", ".ve", ".vg", ".vi", ".vn", ".vu", ".wf", ".ws", ".ye", ".yt", ".za", ".zm", ".zw"];

String.prototype.removeDiacritics = function () {
  return defaultDiacriticsRemovalMap.reduce((result, letter) => result.replace(letter.letters, letter.base), this);
};

const SPECIAL_CHARACTERS = "\\\\/ !?@#$%^&*()_+:.{},;\\-'``’‘\"";
String.prototype.removeSpecialCharacters = function () {
  return this.replace(new RegExp(`[${SPECIAL_CHARACTERS}]`, "gi"), "");
}, String.prototype.removeAllButLetters = function () {
  return this.toLowerCase().removeDiacritics().removeSpecialCharacters();
}, String.prototype.conceal = function (extra) {
  return this.replace(new RegExp(`[^${SPECIAL_CHARACTERS}${extra}]`, "gi"), "⁎");
}, String.prototype.capitalize = function () {
  return this.charAt(0).toUpperCase() + this.slice(1);
}, String.prototype.removeHTML = function () {
  return this.replace(">", "≻").replace("<", "≺");
}, String.prototype.angleBrackets = function () {
  return this.replace("<", "&lt;").replace(">", "&gt;");
}, String.prototype.replaceArray = function (find, replace) {
  for (var replaceString = this, i = 0; i < find.length; i++) replaceString = replaceString.replace(find[i], replace[i]);

  return replaceString;
}, String.prototype.maskURLs = function () {
  return this.replaceArray(["https://", "http://"], "nope://").replaceArray(domains, ".nope");
}, Number.prototype.makeReadable = function () {
  return this.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}, Number.prototype.makePercentage = function (decimals) {
  return decimals || (decimals = 2), (100 * this).toFixed(decimals) + "%";
}, Array.prototype.getRandom = function (n) {
  if (n > this.length) return this;
  const result = new Array(n);
  let len = this.length;
  const taken = new Array(len);

  for (; n--;) {
    const x = Math.floor(Math.random() * len);
    result[n] = this[x in taken ? taken[x] : x], taken[x] = --len in taken ? taken[len] : len;
  }

  return result;
};

const sortObject = (obj, direction) => {
  let arr = [];

  for (const key in obj) arr.push([key, obj[key]]);

  arr.sort((a, b) => direction ? a[1] - b[1] : b[1] - a[1]);
  let objSorted = {};
  return arr.forEach(item => objSorted[item[0]] = item[1]), objSorted;
};

angular.module("app", ["ui.router", "ui.bootstrap", "ngAnimate", "ngSanitize", "ngDragDrop", "ngTagsInput", "vcRecaptcha", "chart.js", "tc.chartjs"]), angular.module("app").config(["$stateProvider", "$urlRouterProvider", "$urlServiceProvider", "$locationProvider", function ($stateProvider, $urlRouterProvider, $urlServiceProvider, $locationProvider) {
  $urlRouterProvider.otherwise("/home"), $urlServiceProvider.config.strictMode(!1), $stateProvider.state("home", {
    url: "/home",
    templateUrl: "/home.html"
  }).state("policy", {
    url: "/policy",
    templateUrl: "/policy.html"
  }).state("print", {
    url: "/print",
    templateUrl: "/print.html"
  }).state("experience", {
    url: "/experience",
    controller: "ExperienceCtrl",
    templateUrl: "/experience.html"
  }).state("skills", {
    url: "/skills",
    controller: "SkillsCtrl",
    templateUrl: "/skills.html"
  }).state("hobbies", {
    url: "/hobbies",
    controller: "HobbiesCtrl",
    templateUrl: "/hobbies.html"
  }).state("contact", {
    url: "/contact",
    controller: "ContactCtrl",
    templateUrl: "/contact.html"
  }).state("workout", {
    url: "/workout",
    controller: "WorkoutCtrl",
    templateUrl: "/workout.html"
  }).state("posts", {
    url: "/posts",
    controller: "PostsCtrl",
    templateUrl: "/posts.html"
  }).state("profile", {
    url: "/profile",
    controller: "ProfileCtrl",
    templateUrl: "/profile.html"
  }).state("lists", {
    url: "/lists",
    controller: "ListsCtrl",
    templateUrl: "lists.html"
  }).state("prioritize", {
    url: "/prioritize",
    controller: "PrioritizeCtrl",
    templateUrl: "prioritize.html"
  }).state("bubbles", {
    url: "/bubbles",
    controller: "BubblesCtrl",
    templateUrl: "bubbles.html"
  }).state("asteroids", {
    url: "/asteroids",
    controller: "AsteroidsCtrl",
    templateUrl: "asteroids.html"
  }).state("lemmings", {
    url: "/lemmings",
    controller: "LemmingsCtrl",
    templateUrl: "lemmings.html"
  }).state("bots", {
    url: "/bots",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("tenthings", {
    url: "/tenthings",
    controller: "TenThingsCtrl",
    templateUrl: "tenthings.html"
  }).state("tenthings-admin", {
    url: "/tenthings-admin",
    controller: "TenThingsAdminCtrl",
    templateUrl: "tenthings-admin.html"
  }).state("tenthings-curate", {
    url: "/tenthings-curate",
    controller: "TenThingsCurateCtrl",
    templateUrl: "tenthings-curate.html"
  }).state("tenthings-game", {
    url: "/tenthings/:game",
    controller: "TenThingsGameCtrl",
    templateUrl: "tenthings-game.html"
  }).state("quiz-google", {
    url: "/google",
    controller: "QuizGoogleCtrl",
    templateUrl: "quizzes/google.html"
  }).state("quiz-logos", {
    url: "/logos",
    controller: "QuizLogosCtrl",
    templateUrl: "quizzes/logos.html"
  }).state("quiz-animals", {
    url: "/animals",
    controller: "QuizAnimalsCtrl",
    templateUrl: "quizzes/animals.html"
  }).state("quiz-skeletons", {
    url: "/skeletons",
    controller: "QuizSkeletonsCtrl",
    templateUrl: "quizzes/skeletons.html"
  }).state("quiz-movies", {
    url: "/movies",
    controller: "QuizMoviesCtrl",
    templateUrl: "quizzes/movies.html"
  }).state("charades", {
    url: "/charades",
    controller: "CharadesCtrl",
    templateUrl: "/charades.html"
  }), $locationProvider.html5Mode({
    enabled: !0,
    requireBase: !1
  });
}]), angular.module("app").service("WebSocketSvc", ["$rootScope", "$timeout", function ($rootScope, $timeout) {
  var connection,
      connect = function () {
    (connection = new WebSocket("https:" === window.location.protocol ? "wss://" + window.location.host : "ws://" + window.location.host)).onopen = function () {
      console.log("Websocket connected");
    }, connection.onclose = function (e) {
      console.log("Websocket closed. Reconnecting..."), $timeout(connect, 1e3);
    }, connection.onerror = function (e) {
      console.log("Error: " + e + " - State: " + connection.readyState);
    }, connection.onmessage = function (e) {
      var payload = JSON.parse(e.data);
      $rootScope.$broadcast("ws:" + payload.topic, payload.data);
    };
  };

  this.send = function (topic, data) {
    var json = JSON.stringify({
      topic,
      data
    });
    connection.send(json);
  }, this.connect = connect;
}]).run(["WebSocketSvc", function (WebSocketSvc) {
  WebSocketSvc.connect();
}]), angular.module("app").controller("AppCtrl", ["$scope", "$location", "LanguageSvc", "UserSvc", function ($scope, $location, LanguageSvc, UserSvc) {
  function login(user) {
    $scope.loggedIn || (window.localStorage.user = user._id, $scope.loggedIn = !0, $scope.currentUser = user, $scope.$broadcast("login"));
  }

  console.log("%cYou sneaky bugger!", "font: 2em sans-serif; color: DodgerBlue; text-shadow: 2px 0 0 #444, -2px 0 0 #444, 0 2px 0 #444, 0 -2px 0 #444, 1px 1px #444, -1px -1px 0 #444, 1px -1px 0 #444, -1px 1px 0 #444;"), console.log("I'm glad you're curious whether something is popping up in here. I'm a bit of a stickler when it comes to messages in the console so I try to make sure only things I want are visible. That being said, if there is a big error here, I would really appreciate you telling me so I can get rid of it!"), console.log("The code for my resume is hosted on Github if you really want to go into all this! => https://github.com/FlandersBurger/resume"), $(window).load(function () {
    $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
  }), $scope.themeCounter = 6, $scope.today = new Date(), $scope.year = $scope.today.getFullYear(), $scope.random = Math.floor(1e6 * Math.random()), $scope.flipTheme = function () {
    $(".loading").show(), $(".content").hide(), setTimeout(function () {
      $(".loading").fadeOut("slow"), $(".content").fadeIn("slow");
    }, 800), $scope.themeCounter = $scope.themeCounter < 6 ? $scope.themeCounter + 1 : $scope.themeCounter = 1;
  }, $.getJSON("/skills.json", function (data) {
    $scope.skills = data.filter(function (skill) {
      return skill.enabled;
    });
  }), $.getJSON("/hobbies.json", function (data) {
    $scope.hobbies = data;
  }), $.getJSON("/experience.json", function (data) {
    $scope.jobs = data, $scope.jobs.forEach(function (job) {
      job.startDate = new Date(job.startDate), job.endDate && (job.endDate = new Date(job.endDate));
    });
  }), $.getJSON("/charades.json", function (data) {
    $scope.charades = data;
  }), $scope.getTimeSpan = function (job) {
    return job.startDate.getFullYear() + (job.endDate ? " - " + job.endDate.getFullYear() : " - Today");
  }, $scope.languages = LanguageSvc.languages, $scope.selectedLanguage = LanguageSvc.getLanguage(), $scope.selectLanguage = function (language) {
    $scope.selectedLanguage = LanguageSvc.setLanguage(language);
  }, $scope.hoverdiv = function (e, divid) {
    var left = e.clientX + "px",
        top = e.clientY + 20 + "px";
    document.getElementById(divid);
    return $("#" + divid).css("left", left), $("#" + divid).css("top", top), $("#" + divid).toggle(), !1;
  }, $scope.socialMedia = [{
    name: "linkedin",
    url: "https://www.linkedin.com/in/laurent-debacker-1633a916",
    icon: "fa-linkedin"
  }, {
    name: "github",
    url: "https://github.com/FlandersBurger",
    icon: "fa-github"
  }, {
    name: "jsfiddle",
    url: "https://jsfiddle.net/user/BelgoCanadian/fiddles/",
    icon: "fa-jsfiddle"
  }, {
    name: "stackoverflow",
    url: "http://stackoverflow.com/users/1083923/belgocanadian",
    icon: "fa-stack-overflow"
  }], window.localStorage.user && UserSvc.login(window.localStorage.user).then(function (response) {
    login(response.data);
  }), $scope.$on("login", function (_, user) {
    login(user);
  }), $scope.$on("update", function (_, user) {
    $scope.currentUser = user, $scope.currentUser.birthDate = new Date($scope.currentUser.birthDate), $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.$on("loading", function (_, user) {
    $scope.loading = !0, $("#loading-icon").show();
  }), $scope.$on("loaded", function (_, user) {
    $scope.loading = !1, setTimeout(function () {
      $("#loading-icon").fadeOut("slow");
    }, 1e3);
  }), $scope.logout = function () {
    firebase.auth().signOut().then(function () {
      $scope.loggedIn = !1, window.localStorage.clear(), $scope.$broadcast("logout");
    }).catch(function (error) {});
  }, $scope.formatDate = function (date) {
    return (date = new Date(date)).getDate() + "-" + ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][date.getMonth()] + "-" + date.getFullYear();
  }, String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };
}]), angular.module("app").controller("AsteroidsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  $scope.announce = !1;
  var canvas = document.getElementById("asteroids-page"),
      ctx = canvas.getContext("2d");
  ctx.font = "30px Comic Sans MS", ctx.fillStyle = "red", ctx.textAlign = "center";
  var shots = {},
      asteroids = {},
      powerups = {},
      explosions = {},
      map = {},
      space = Math.floor(10 * Math.random()),
      powerupTypes = [{
    name: "speed",
    announcement: "Max Speed ⇧",
    cycle: {
      rows: 1,
      columns: 4,
      size: [14, 35],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.maxSpeed += 100;
    }
  }, {
    name: "cooldown",
    announcement: "Cooldown ⇩",
    cycle: {
      rows: 1,
      columns: 3,
      size: [17, 17],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.cooldown > 0 && (spaceship.cooldownTime -= 1);
    }
  }, {
    name: "range",
    announcement: "Firing Range ⇧",
    cycle: {
      rows: 4,
      columns: 1,
      size: [30, 8],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.range += 5;
    }
  }, {
    name: "shield",
    announcement: "Shield",
    cycle: {
      rows: 5,
      columns: 1,
      size: [19, 19],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      spaceship.shield = !0;
    }
  }, {
    name: "nuke",
    announcement: "Nuke",
    cycle: {
      rows: 1,
      columns: 8,
      size: [15, 15],
      i: 0,
      direction: !0
    },
    img: new Image(),
    activate: function (spaceship) {
      for (var i in asteroids) asteroids[i].explode();

      spawnAsteroids(5);
    }
  }];
  powerupTypes.forEach(function (powerup, i, array) {
    array[i].img.src = "asteroids/" + powerup.name + ".png";
  });
  var spaceship,
      explosionImage = new Image();

  function evaluateKeys() {
    $scope.playing ? (map[32] && 0 === spaceship.cooldown && spaceship.shoot(), map[37] && (0 === spaceship.rotation ? spaceship.rotation = 360 : spaceship.rotation -= 3), map[39] && (360 === spaceship.rotation ? spaceship.rotation = 0 : spaceship.rotation += 3), map[38] ? spaceship.speed <= spaceship.maxSpeed && (spaceship.speed += 5) : spaceship.speed > 0 && spaceship.speed--, map[40] && spaceship.speed > 0 && (spaceship.speed -= 2)) : map[32] && ($scope.playing = !0, $scope.score = 0, space = Math.floor(10 * Math.random()), $scope.$apply(), spaceship = new Spaceship(), $scope.score = 0, spawnAsteroids(5), function autoSpawn() {
      if (Object.keys(asteroids).length < 200) {
        var id = Math.round(1e8 * Math.random());
        asteroids[id] = new Asteroid(id);
      }

      $scope.playing && setTimeout(function () {
        autoSpawn();
      }, $scope.score < 1e3 ? 1e3 : $scope.score < 2e3 ? 900 : $scope.score < 3e3 ? 800 : $scope.score < 4e3 ? 700 : $scope.score < 5e3 ? 600 : $scope.score < 6e3 ? 500 : $scope.score < 7e3 ? 400 : $scope.score < 8e3 ? 300 : 200);
    }());
  }

  function Spaceship() {
    this.width = 50, this.height = 50, this.shield = !1, this.range = 80, this.cannon = {
      x: this.width / 2 - 4.5,
      y: this.height / 2 - .078125 * this.height
    }, this.cooldown = 0, this.cooldownTime = 20, this.position = [canvas.width / 2 - this.width / 2, canvas.height / 2 - this.height / 2], this.img = new Image(), this.img.src = "asteroids/spaceship.png", this.speed = 0, this.maxSpeed = 1e3, this.angle = 0, this.rotation = 0, this.shoot = function () {
      this.cooldown = this.cooldownTime;
      var id = Math.round(1e8 * Math.random());
      shots[id] = new Shot(id, this);
    }, this.move = function () {
      for (var i in this.shield && (ctx.beginPath(), ctx.arc(this.position[0] + this.width / 2, this.position[1] + this.height / 2, 30, 0, 2 * Math.PI), ctx.fillStyle = "rgb(35, 237, 86, 0.5)", ctx.strokeStyle = "rgb(66, 168, 36, 0.8)", ctx.lineWidth = 5, ctx.stroke(), ctx.fill()), asteroids) {
        var asteroid = asteroids[i];

        if (hit(asteroid, this)) {
          if (!this.shield) return gameOver();
          this.shield = !1, asteroid.explode();
        }
      }

      this.angle = this.rotation, this.cooldown > 0 && this.cooldown--, move(this);
    };
  }

  function Shot(id, spaceship) {
    this.id = id, this.position = [spaceship.position[0] + spaceship.cannon.x + spaceship.cannon.x * Math.cos((spaceship.rotation - 90) * Math.PI / 180), spaceship.position[1] + spaceship.cannon.y + spaceship.cannon.y * Math.sin((spaceship.rotation - 90) * Math.PI / 180)], this.width = 9, this.height = 15, this.angle = spaceship.angle, this.rotation = spaceship.rotation, this.speed = spaceship.speed + 500, this.lifespan = spaceship.range, this.img = new Image(), this.img.src = "asteroids/shot.png", this.move = function () {
      this.lifespan--, move(this);
    };
  }

  function Asteroid(id) {
    this.id = id, this.width = 50 * Math.random() + 20, this.height = this.width, this.position = getEntryPosition(this.width, this.height), this.angle = 360 * Math.random(), this.rotation = 360 * Math.random(), this.rotationSpeed = 6 * Math.random() - 3, this.speed = 300 * Math.random() + 2, this.img = new Image(), this.img.src = "asteroids/asteroid" + (Math.round(6 * Math.random()) + 1) + ".png", this.explode = function () {
      return explosions[this.id] = new Explosion(this), delete asteroids[this.id];
    }, this.move = function () {
      for (var i in this.rotation += this.rotationSpeed, this.rotation > 360 ? this.rotation = this.rotation - 360 : this.rotation < 0 && (this.rotation = 360 + this.rotation), shots) {
        var shot = shots[i];

        if (hit(shot, this)) {
          this.explode();
          var points = Math.floor((shot.speed - 500) / 10 + 70 - this.width);
          Math.floor((points + $scope.score) / 100) > Math.floor($scope.score / 100) && spawnPowerup(), $scope.score += points, $scope.$apply(), delete shots[i];
        }
      }

      move(this);
    };
  }

  function Explosion(object) {
    this.position = [object.position[0], object.position[1]], this.width = object.width, this.height = object.height, this.speed = 0, this.angle = 360 * Math.random(), this.cycle = {
      rows: 6,
      columns: 8,
      size: [256, 256],
      i: 0,
      direction: !0
    }, this.lifespan = 47, this.img = explosionImage, this.move = function () {
      this.lifespan--, move(this), this.cycle.direction ? this.cycle.i++ : this.cycle.i--;
    };
  }

  function Powerup(id) {
    this.id = id, this.powerup = powerupTypes[Math.floor(Math.random() * powerupTypes.length)], this.cycle = this.powerup.cycle, this.lifespan = 1e3, this.cycle.size[1] > this.cycle.size[0] ? (this.height = 40, this.width = Math.round(this.height / this.cycle.size[1] * this.cycle.size[0])) : (this.width = 40, this.height = Math.round(this.width / this.cycle.size[0] * this.cycle.size[1])), this.position = getEntryPosition(this.width, this.height), this.img = this.powerup.img, this.angle = 360 * Math.random(), this.speed = 150 * Math.random() + 50;
    var delay = 5;

    this.move = function () {
      return this.lifespan <= 0 ? delete powerups[this.id] : hit(spaceship, this) ? ($scope.announce = !0, $scope.announcement = this.powerup.announcement, $scope.$apply(), setTimeout(function () {
        $scope.announce = !1, $scope.$apply();
      }, 1e3), this.powerup.activate(spaceship), delete powerups[this.id]) : (this.lifespan--, move(this), void (delay <= 0 ? (this.cycle.direction ? this.cycle.i++ : this.cycle.i--, delay = 5) : delay--));
    };
  }

  function move(object) {
    if (object.position[0] += object.speed / 100 * Math.cos((object.angle - 90) * Math.PI / 180), object.position[1] += object.speed / 100 * Math.sin((object.angle - 90) * Math.PI / 180), object.position[0] > canvas.width ? object.position[0] = -object.width : object.position[0] < -object.width && (object.position[0] = canvas.width), object.position[1] > canvas.height ? object.position[1] = -object.height : object.position[1] < -object.height && (object.position[1] = canvas.height), ctx.save(), ctx.translate(object.position[0], object.position[1]), ctx.translate(object.width / 2, object.height / 2), ctx.rotate(object.rotation * Math.PI / 180), object.cycle) {
      var column = object.cycle.i % object.cycle.columns,
          row = Math.floor(object.cycle.i / object.cycle.columns);
      ctx.drawImage(object.img, object.cycle.size[0] * column, object.cycle.size[1] * row, object.cycle.size[0], object.cycle.size[1], -object.width / 2, -object.height / 2, object.width, object.height), object.cycle.i <= 0 ? (object.cycle.i = 0, object.cycle.direction = !0) : object.cycle.i >= object.cycle.columns * object.cycle.rows && (object.cycle.i = object.cycle.columns * object.cycle.rows - 1, object.cycle.direction = !1);
    } else ctx.drawImage(object.img, -object.width / 2, -object.height / 2, object.width, object.height);

    ctx.restore();
  }

  function getEntryPosition(width, height) {
    var x,
        gridX = 2 * Math.random(),
        gridY = 2 * Math.random(),
        y = 0;
    return gridX >= 1 ? (x = Math.random() * canvas.width, y = y >= 1 ? 0 - height : canvas.height) : (y = Math.random() * canvas.height, x = gridY >= 1 ? 0 - width : canvas.width), [x, y];
  }

  function hit(object1, object2) {
    return object1.position[0] < object2.position[0] + object2.width && object2.position[0] < object1.position[0] + object1.width && object1.position[1] < object2.position[1] + object2.height && object2.position[1] < object1.position[1] + object1.height;
  }

  function spawnAsteroids(amount) {
    var i = 0;

    do {
      var id = Math.round(1e8 * Math.random());
      asteroids[id] = new Asteroid(id);
    } while (i++ <= amount);
  }

  function spawnPowerup() {
    if (Object.keys(powerups).length < 3) {
      var id = Math.round(1e8 * Math.random());
      powerups[id] = new Powerup(id);
    }
  }

  function gameOver() {
    for (var i in $scope.playing = !1, asteroids) asteroids[i].explode();

    shots = {}, $scope.loggedIn ? $scope.currentUser.highscore.asteroids < $scope.score && ($scope.currentUser.highscore.asteroids = $scope.score, GameSvc.setHighscore("asteroids", $scope.currentUser._id, $scope.score)) : $scope.highscore < $scope.score && ($scope.highscore = $scope.score);
  }

  function resizeCanvas() {
    console.log(window.innerWidth), canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }

  explosionImage.src = "asteroids/explosion.png", window.addEventListener("keydown", function (e) {
    map[e.keyCode || e.which] = !0;
  }, !0), window.addEventListener("keyup", function (e) {
    map[e.keyCode || e.which] = !1;
  }, !0), $scope.highscore = 0, window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), requestAnimationFrame(function draw() {
    for (var i in ctx.clearRect(0, 0, canvas.width, canvas.height), shots) shots[i].lifespan <= 0 ? delete shots[i] : shots[i].move();

    for (i in asteroids) asteroids[i].move();

    for (i in powerups) powerups[i].move();

    for (i in explosions) explosions[i].lifespan <= 0 ? delete explosions[i] : explosions[i].move();

    if (evaluateKeys(), $scope.playing) spaceship.move();else {
      var gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
      gradient.addColorStop("0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.25", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("0.5", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + ")"), gradient.addColorStop("0.75", "rgb(" + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), gradient.addColorStop("1.0", "rgb(" + Math.floor(256 - 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + "," + Math.floor(0 + 256 * tally / 100) + ")"), ctx.fillStyle = gradient, ctx.font = "60px Monoton", ctx.fillText("Asteroids", canvas.width / 2 - ctx.measureText("Asteroids").width / 2, canvas.height / 2), ctx.font = "20px Aldrich", ctx.fillText("Press space to start", canvas.width / 2 - ctx.measureText("Press space to start").width / 2, canvas.height / 2 + 20), ctx.fillText("Designed and developed by Laurent Debacker", canvas.width / 2 - ctx.measureText("Designed and developed by Laurent Debacker").width / 2, canvas.height - 30);
    }
    (tally += direction ? 1 : -1) > 100 ? (tally = 100, direction = !1) : tally < 0 && (tally = 0, direction = !0);
    requestAnimationFrame(draw);
  });
  var tally = 0,
      direction = !0;

  $scope.space = function () {
    return {
      backgroundImage: 'url("asteroids/space' + space + '.jpg")'
    };
  };
}]), angular.module("app").controller("BubblesCtrl", ["$scope", function ($scope) {
  var canvas = document.getElementById("bubbles-page"),
      ctx = canvas.getContext("2d"),
      bubbles = [],
      colors = ["#ffc300", "#ff5733", "#c70039", "#900c3e", "#571845"];

  function Bubble() {
    this.lifespan = 0, this.radius = 1, this.expanding = !0, this.speed = Math.round(3 * Math.random()), this.circumference = Math.round(50 * Math.random()) + 5, this.maxRadius = Math.round(200 * Math.random()) + 20, this.x = Math.round(Math.random() * canvas.width), this.y = Math.round(Math.random() * canvas.height), this.vx = Math.random() >= .5 ? 1 : -1, this.vy = Math.random() >= .5 ? 1 : -1;
  }

  requestAnimationFrame(function filterBubbles() {
    bubbles.push(new Bubble()), bubbles = bubbles.filter(function (bubble) {
      return bubble.radius === bubble.maxRadius && (bubble.expanding = !1), bubble.x += bubble.vx * bubble.speed, bubble.y += bubble.vy * bubble.speed, bubble.radius += bubble.expanding ? 1 : -1, bubble.radius > 0;
    }), ctx.clearRect(0, 0, canvas.width, canvas.height), bubbles.forEach(function (bubble) {
      Math.round(colors.length * bubble.radius / bubble.maxRadius), ctx.beginPath(), ctx.arc(bubble.x, bubble.y, bubble.radius, 0, 2 * Math.PI), ctx.fillStyle = colors[Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.fill(), ctx.strokeStyle = colors[colors.length - Math.round(colors.length * bubble.radius / bubble.maxRadius)], ctx.lineWidth = bubble.circumference * bubble.radius / bubble.maxRadius, ctx.stroke();
    }), requestAnimationFrame(filterBubbles);
  }), function () {
    function resizeCanvas() {
      canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 55 : 111);
    }

    window.addEventListener("resize", resizeCanvas, !1), resizeCanvas();
  }();
}]), angular.module("app").controller("CharadesCtrl", ["$scope", function ($scope) {
  $scope.selectWord = category => {
    $scope.word = $scope.charades[category][Math.floor(Math.random() * $scope.charades[category].length)], console.log($scope.word);
  };
}]), angular.module("app").controller("ContactCtrl", ["$scope", "EmailSvc", function ($scope, EmailSvc) {
  $scope.options = [{
    name: "Spam",
    text: "I am a spam bot and automatically check the first option I find!"
  }, {
    name: "Opportunitiy",
    text: "You seem to have the skills I seek, I'd like to talk about some opportunities."
  }, {
    name: "Resume",
    text: "I dig the resume, how did you make it?"
  }, {
    name: "Other",
    text: "Sumtin else!"
  }], $scope.contact = {
    email: "",
    name: "",
    phone: "",
    about: "",
    message: ""
  }, $scope.send = function () {
    $scope.sending = !0, console.log("here"), EmailSvc.send({
      email: $scope.contact.email,
      name: $scope.contact.name,
      phone: $scope.contact.phone,
      about: $scope.contact.about,
      message: $scope.contact.message
    }).then(function (response) {
      $scope.sent = !0, console.log("SUCCESS. status=%d, text=%s", response.status, response.text), console.log(response);
    }, function (err) {
      $scope.sending = !1, console.log("FAILED. error=", err);
    });
  };
}]), angular.module("app").controller("ExperienceCtrl", ["$scope", function ($scope) {
  $scope.getSkill = function (skillCode) {
    if ($scope.skills) return $scope.skills.find(function (skill) {
      return skill.code === skillCode;
    });
  };
}]), angular.module("app").controller("HobbiesCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.hobbySelectorVisible = !1, $.getJSON("https://www.reddit.com/user/belgocanadian/about/.json", function (response) {}), $scope.selectedHobby = $scope.hobbies[0], $scope.selectHobby = function (hobby) {
    $scope.selectedHobby = hobby, $scope.hobbySelectorVisible = !1;
  }, $scope.showHobby = function (value, index, array) {
    return !!value.images && value.images.length > 0;
  };
}]), angular.module("app").controller("LemmingsCtrl", ["$scope", "GameSvc", function ($scope, GameSvc) {
  var canvas = document.getElementById("lemmings-page"),
      ctx = canvas.getContext("2d"),
      lemmingsImage = new Image();
  lemmingsImage.src = "lemmings/lemmings.png";
  var decorImage = new Image();
  decorImage.src = "lemmings/decor.png";
  var lemmings = {},
      started = !1,
      actions = {
    walk: {
      start: [0, 0],
      end: [320, 20],
      columns: 8,
      rows: 1,
      reverse: !1
    },
    huh: {
      start: [320, 0],
      end: [640, 20],
      columns: 8,
      rows: 1,
      reverse: !0
    },
    fall: {
      start: [0, 80],
      end: [160, 100],
      columns: 4,
      rows: 1,
      reverse: !1
    },
    fly: {
      start: [160, 80],
      end: [480, 110],
      columns: 8,
      rows: 1,
      reverse: !1
    },
    stop: {
      start: [0, 120],
      end: [640, 140],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    climb: {
      start: [0, 160],
      end: [640, 185],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    build: {
      start: [0, 200],
      end: [640, 225],
      columns: 16,
      rows: 1,
      reverse: !1
    },
    punch: {
      start: [0, 240],
      end: [640, 300],
      columns: 16,
      rows: 2,
      reverse: !1
    },
    dig: {
      start: [0, 320],
      end: [320, 345],
      columns: 8,
      rows: 1,
      reverse: !1
    }
  };

  function Lemming(init) {
    this.position = [Math.floor(Math.random() * (canvas.width - 200)) + 100, Math.floor(Math.random() * (canvas.height - 200)) + 100], this.direction = 2 * Math.random() > 1 ? 0 : 1, this.act = function (action) {
      this.action = actions[action], this.cycle = 0, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1] - 20 * (this.action.rows - 1)) / this.action.rows, this.animation = !0;
    }, this.act(init), this.move = function () {
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), 0 === this.direction && ctx.scale(-1, 1);
      var column = this.cycle % this.action.columns,
          row = Math.floor(this.cycle / this.action.columns);
      ctx.drawImage(lemmingsImage, this.width * column + this.action.start[0], (this.height + 20) * row + this.action.start[1], this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore(), this.action.reverse ? this.animation ? (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.animation = !this.animation, this.cycle--)) : (this.cycle--, this.cycle < 0 && (this.animation = !this.animation, this.cycle = 0)) : (this.cycle++, this.cycle >= this.action.columns * this.action.rows && (this.cycle = 0));
    };
  }

  function resizeCanvas() {
    canvas.width = window.innerWidth, canvas.height = window.innerHeight - (canvas.width <= 768 ? 50 : 105);
  }

  window.addEventListener("resize", resizeCanvas, !1), resizeCanvas(), Object.keys(actions).forEach(function (action) {
    lemmings[Math.round(1e8 * Math.random())] = new Lemming(action);
  });
  let hatch = new function () {
    this.position = [20, 20], this.action = {
      start: [0, 0],
      end: [82, 500],
      columns: 1,
      rows: 10
    }, this.width = (this.action.end[0] - this.action.start[0]) / this.action.columns, this.height = (this.action.end[1] - this.action.start[1]) / this.action.rows, this.cycle = 0, this.open = function () {
      var column, row;
      ctx.save(), ctx.translate(this.position[0], this.position[1]), ctx.translate(this.width / 2, this.height / 2), started ? (column = this.cycle % this.action.columns, row = Math.floor(this.cycle / this.action.columns), this.cycle < 9 && this.cycle++) : (column = 0, row = 0), ctx.drawImage(decorImage, this.width * column + this.action.start[0], this.height * row + this.action.start[1] - 1, this.width, this.height, 0, 0, 2 * this.width, 2 * this.height), ctx.restore();
    };
  }();
  !function draw() {
    if (ctx.clearRect(0, 0, canvas.width, canvas.height), started) for (var i in lemmings) lemmings[i].move();else ctx.beginPath(), ctx.font = "40px Monoton", ctx.lineWidth = "10", ctx.strokeStyle = "blue", ctx.rect(15, canvas.height - 45, ctx.measureText("Start").width + 20, ctx.measureText("Start").height + canvas.height - 45), ctx.fill(), ctx.fillText("Start", 20, canvas.height - 50);
    hatch.open(), started = !0, setTimeout(function () {
      draw();
    }, 150);
  }();
}]), angular.module("app").controller("ListsCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.showCategory = !0, $scope.init = function () {
    CategoriesSvc.getCategories().then(function (response) {
      for (var i in $scope.categories = response.data, $scope.tasks = [], $scope.categories) for (var j in $scope.categories[i].tasks) $scope.tasks.push({
        category: $scope.categories[i].name,
        task: $scope.categories[i].tasks[j].name
      });
    });
  }, $scope.selectCategory = function (category) {
    for (var i in $scope.selectedCategory = category, $scope.selectedTasks = [], $scope.selectableTasks = [], $scope.selectedCategory.tasks) $scope.selectableTasks.push($scope.selectedCategory.tasks[i]);

    $scope.showCategory = !1, $scope.enteredCategory = "";
  }, $scope.newCategory = function (category) {
    for (var found = !1, i = 0; i < $scope.categories.length; i++) $scope.categories[i].name === category && ($scope.selectCategory($scope.categories[i]), found = !0);

    found || CategoriesSvc.addCategory({
      category
    }).then(function (category) {
      $scope.init(), $scope.selectCategory(category);
    }), $scope.enteredCategory = "";
  }, $scope.newTask = function (task) {
    var found = !1;

    for (var i in $scope.selectedCategory.tasks) $scope.selectedCategory.tasks[i].name === task && (found = !0, $scope.selectTask($scope.selectedCategory.tasks[i]));

    found || CategoriesSvc.addTask($scope.selectedCategory.name, {
      task
    }).then(function () {
      $scope.selectedCategory.tasks.push({
        name: task
      }), $scope.addTask($scope.selectedTasks, $scope.selectedCategory.tasks[$scope.selectedCategory.tasks.length - 1]);
    }), $scope.enteredTask = "";
  }, $scope.selectTask = function (task) {
    $scope.addTask($scope.selectedTasks, task), $scope.removeTask($scope.selectableTasks, task), $scope.enteredTask = "";
  }, $scope.unselectTask = function (task) {
    $scope.addTask($scope.selectableTasks, task), $scope.removeTask($scope.selectedTasks, task);
  }, $scope.addTask = function (taskList, task) {
    taskList.push(task);
  }, $scope.removeTask = function (taskList, task) {
    taskList.splice(taskList.indexOf(task), 1);
  }, $scope.startPrioritizing = function () {
    CategoriesSvc.setPriorityList($scope.selectedTasks), $location.path("/prioritize");
  }, $scope.getQuestions = function () {
    if (!$scope.selectedTasks) return "";

    for (var counter = 0, i = $scope.selectedTasks.length - 1; i > 0; i--) counter += i;

    return counter;
  };
}]), angular.module("app").controller("LoginCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  var ui = new firebaseui.auth.AuthUI(firebase.auth());

  function startUI() {
    ui.start("#firebaseui-auth-container", {
      callbacks: {
        signInSuccess: function (currentUser, credential, redirectUrl) {
          return firebase.auth().currentUser.getIdToken(!0).then(function (idToken) {
            UserSvc.authenticate({
              displayName: currentUser.displayName,
              email: currentUser.email,
              photoURL: currentUser.photoURL,
              emailVerified: currentUser.emailVerified,
              idToken
            }).then(function (response) {
              $scope.$emit("login", response.data), $("#modal-login").modal("hide");
            }, function () {
              $scope.$emit("popup", {
                message: "Login Failed",
                type: "alert-danger"
              });
            });
          }).catch(function (error) {}), !1;
        },
        signInFailure: function (error) {
          if ("firebaseui/anonymous-upgrade-merge-conflict" != error.code) return Promise.resolve();
          var cred = error.credential;
          return firebase.auth().signInWithCredential(cred);
        },
        uiShown: function () {
          document.getElementById("loader").style.display = "none";
        }
      },
      signInSuccessUrl: "/home",
      signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID],
      signInFlow: "popup"
    });
  }

  $scope.$on("logout", function (event) {
    ui.reset(), startUI();
  }), startUI();
}]), angular.module("app").controller("PostsCtrl", ["$scope", "$filter", "PostsSvc", function ($scope, $filter, PostsSvc) {
  $scope.addPost = function () {
    $scope.postBody && PostsSvc.create({
      body: $scope.postBody
    }).then(function (post) {
      $scope.postBody = null;
    });
  }, PostsSvc.fetch().then(function (response) {
    $scope.posts = response.data;
  }), $scope.$on("ws:new_post", function (_, post) {
    $scope.$apply(function () {
      PostsSvc.getPost(post).then(function (response) {
        $scope.posts.unshift(response.data);
      });
    });
  });
}]), angular.module("app").controller("PrioritizeCtrl", ["$scope", "$location", "CategoriesSvc", function ($scope, $location, CategoriesSvc) {
  $scope.priorityList = CategoriesSvc.getPriorityList(), $scope.priorityList ? ($scope.selectedQuestion = 1, $scope.currentQuestion = 1, $scope.done = !1) : $location.path("/lists"), $scope.makeChoice = function (choice) {
    for (var i in $scope.priorityList) $scope.priorityList[i].id === $scope.selectedQuestion && ($scope.priorityList[i].choice = 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice);

    $scope.selectedQuestion === $scope.currentQuestion && ($scope.currentQuestion = $scope.currentQuestion === $scope.priorityList.length ? 1 : $scope.currentQuestion + 1), $scope.selectedQuestion = $scope.currentQuestion;
    var found = !1;

    for (i in $scope.priorityList) if ("" === $scope.priorityList[i].choice) {
      found = !0;
      break;
    }

    found || ($("#prioritizeChoices").hide(300), $scope.done = !0);
  }, $scope.getButtonValue = function (choice) {
    if (!$scope.priorityList) return "";

    for (var i = 0; i < $scope.priorityList.length; i++) if ($scope.priorityList[i].id === $scope.selectedQuestion) return 1 === choice ? $scope.priorityList[i].firstChoice : $scope.priorityList[i].secondChoice;
  }, $scope.selectQuestion = function (question) {
    $scope.selectedQuestion = question;
  }, $scope.getFilteredPriorityList = function () {
    return $scope.priorityList ? $scope.priorityList.sort(function (a, b) {
      return a.id - b.id;
    }).filter(function (question) {
      return "" !== question.choice || question.id === $scope.currentQuestion;
    }) : [];
  }, $scope.getChoicesMade = function () {
    if (!$scope.priorityList) return "";
    var choicesMade = 0;

    for (var i in $scope.priorityList) "" !== $scope.priorityList[i].choice && choicesMade++;

    return choicesMade;
  }, $scope.getButtonClass = function (choice) {
    if (!$scope.priorityList) return "";

    for (var i in $scope.priorityList) if ($scope.priorityList[i].id === $scope.selectedQuestion) return "" === $scope.priorityList[i].choice ? "btn-primary" : 1 === choice ? $scope.priorityList[i].firstChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger" : $scope.priorityList[i].secondChoice === $scope.priorityList[i].choice ? "btn-success" : "btn-danger";
  }, $scope.showChoices = function () {
    $("#prioritizeChoices").show(1e3), $("#reviewChoices").hide();
  }, $scope.chartClick = function (event) {
    $scope.chart && console.log($scope.chart.getSegmentsAtEvent(event));
  }, $scope.showResults = function () {
    for (var i in $scope.data = [], $scope.options = {
      responsive: !0,
      segmentShowStroke: !0,
      segmentStrokeColor: "#fff",
      segmentStrokeWidth: 2,
      percentageInnerCutout: 0,
      animationSteps: 100,
      animationEasing: "easeOutBounce",
      animateRotate: !0,
      animateScale: !1,
      legendTemplate: '<h3 class="tc-chart-js-legend" style="padding:5px"><% for (var i=0; i<segments.length; i++){%><div class="label" style="float:left;margin:5px;background-color:<%=segments[i].fillColor%>"><%if(segments[i].label){%><%=segments[i].label%><%}%></div><%}%></h3>'
    }, CategoriesSvc.choices) for (var j in CategoriesSvc.choices[i].votes = 0, $scope.priorityList) CategoriesSvc.choices[i].name === $scope.priorityList[j].choice && CategoriesSvc.choices[i].votes++;

    for (i in CategoriesSvc.choices.sort(function (a, b) {
      return a.votes < b.votes;
    }), CategoriesSvc.choices) $scope.data.push({
      value: CategoriesSvc.choices[i].votes,
      label: CategoriesSvc.choices[i].name
    });

    $("#prioritizeResult").hide(), $("#prioritizeChoices").hide(), $("#priorityResults").show(1e3);
  };
}]), angular.module("app").controller("ProfileCtrl", ["$scope", "$location", "UserSvc", function ($scope, $location, UserSvc) {
  $scope.currentUser ? ($("#sex-indicator").offset({
    left: $scope.currentUser.gender.sex / 200 * $("#sex").width() + $("#sex").offset().left
  }), $("#identity-indicator").offset({
    left: $scope.currentUser.gender.identity / 200 * $("#identity").width() + $("#identity").offset().left
  })) : $location.path("/"), $scope.sexes = ["Male", "FtM Male", "Intersex", "MtF Female", "Female"], $scope.identities = ["Man", "Bigender", "Pangender", "Agender", "Polygender", "Genderfluid", "Genderqueer", "Queer", "Woman"], $scope.dateOptions = {
    maxDate: new Date(),
    minDate: new Date(1900, 1, 1),
    initDate: new Date(2e3, 1, 1),
    datepickerMode: "year"
  }, $scope.gender = function (array, percentage) {
    return array[Math.round(percentage / 200 * (array.length - 1))];
  }, $scope.startSlider = function () {}, $scope.dragSlider = function (event, ui, type) {
    $scope.currentUser.gender[type] = Math.round(($("#" + type + "-indicator").offset().left - $("#" + type).offset().left) / ($("#" + type).width() - $("#" + type + "-indicator").width()) * 200), $scope.$apply();
  }, $scope.stopSlider = function () {}, $scope.usernameToggle = !0, $scope.passwordToggle = !0, $scope.toggleUsername = function () {
    $scope.usernameToggle = !$scope.usernameToggle, $scope.newUsername = $scope.currentUser.username;
  }, $scope.togglePassword = function () {
    $scope.newPassword = null, $scope.confirmPassword = null, $scope.passwordToggle = !$scope.passwordToggle;
  }, $scope.checkPassword = function (password) {
    if (password) {
      var user = $scope.currentUser._id;
      UserSvc.checkPassword(user, password).then(function (response) {
        $scope.togglePassword();
      }, function () {
        var originalBg = $(".password").css("backgroundColor");
        $(".password").animate({
          backgroundColor: "#FFB6C1"
        }, 200).animate({
          backgroundColor: originalBg
        }, 200);
      });
    }
  }, $scope.changePassword = function (oldPassword, newPassword, confirmPassword) {
    if (newPassword) if (newPassword == confirmPassword) {
      var user = $scope.currentUser._id;
      UserSvc.changePassword(user, oldPassword, newPassword).then(function (response) {
        $scope.$emit("popup", {
          message: "Password Changed",
          type: "alert-success"
        }), $scope.oldPassword = null, $scope.togglePassword();
      }, function () {
        $scope.$emit("popup", {
          message: "Password Change Failed",
          type: "alert-danger"
        });
      });
    } else {
      var originalBg = $(".password").css("backgroundColor");
      $(".password").animate({
        backgroundColor: "#FFB6C1"
      }, 200).animate({
        backgroundColor: originalBg
      }, 200);
    }
  }, $scope.changeUsername = function (username) {
    $scope.$emit("loading"), UserSvc.changeUsername($scope.currentUser._id, username).then(function (response) {
      $scope.$emit("update", response.data);
    }, function (response) {
      $scope.$emit("popup", {
        message: username + " already in use",
        type: "alert-danger"
      });
    });
  }, $scope.updateUser = function () {
    $scope.currentUser && ($scope.$emit("loading"), UserSvc.updateUser($scope.currentUser).then(function (response) {
      $scope.$emit("update", response.data);
    }));
  }, $scope.$watch("currentUser.flags.length", function (length) {
    $scope.updateUser();
  }), $scope.loadCountries = function ($query) {
    return [{
      name: "Andorra",
      flag: "flag-ad",
      tidbit: ""
    }, {
      name: "United Arab Emirates",
      flag: "flag-ae"
    }, {
      name: "Afghanistan",
      flag: "flag-af"
    }, {
      name: "Antigua and Barbuda",
      flag: "flag-ag"
    }, {
      name: "Anguilla",
      flag: "flag-ai"
    }, {
      name: "Albania",
      flag: "flag-al"
    }, {
      name: "Armenia",
      flag: "flag-am"
    }, {
      name: "Angola",
      flag: "flag-ao"
    }, {
      name: "Antarctica",
      flag: "flag-aq"
    }, {
      name: "Argentina",
      flag: "flag-ar"
    }, {
      name: "American Somoa",
      flag: "flag-as"
    }, {
      name: "Austria",
      flag: "flag-at"
    }, {
      name: "Australia",
      flag: "flag-au"
    }, {
      name: "Aruba",
      flag: "flag-aw"
    }, {
      name: "Åland Islands",
      flag: "flag-ax"
    }, {
      name: "Azerbaijan",
      flag: "flag-az"
    }, {
      name: "Bosnia and Herzegovina",
      flag: "flag-ba"
    }, {
      name: "Barbados",
      flag: "flag-bb"
    }, {
      name: "Bangladesh",
      flag: "flag-bd"
    }, {
      name: "Belgium",
      flag: "flag-be"
    }, {
      name: "Burkina Faso",
      flag: "flag-bf"
    }, {
      name: "Bulgaria",
      flag: "flag-bg"
    }, {
      name: "Bahrain",
      flag: "flag-bh"
    }, {
      name: "Burundi",
      flag: "flag-bi"
    }, {
      name: "Benin",
      flag: "flag-bj"
    }, {
      name: "Saint Barthélemy",
      flag: "flag-bl"
    }, {
      name: "Bermuda",
      flag: "flag-bm"
    }, {
      name: "Brunei ",
      flag: "flag-bn"
    }, {
      name: "Bolivia, Plurinational State of",
      flag: "flag-bo"
    }, {
      name: "Bonaire, Sint Eustatius and Saba",
      flag: "flag-bq"
    }, {
      name: "Brazil",
      flag: "flag-br"
    }, {
      name: "Bahamas",
      flag: "flag-bs"
    }, {
      name: "Bhutan",
      flag: "flag-bt"
    }, {
      name: "Bouvet Island",
      flag: "flag-bv"
    }, {
      name: "Botswana",
      flag: "flag-bw"
    }, {
      name: "Belarus",
      flag: "flag-by"
    }, {
      name: "Belize",
      flag: "flag-bz"
    }, {
      name: "Canada",
      flag: "flag-ca"
    }, {
      name: "Cocos (Keeling) Islands",
      flag: "flag-cc"
    }, {
      name: "Congo, the Democratic Republic of the",
      flag: "flag-cd"
    }, {
      name: "Central African Republic",
      flag: "flag-cf"
    }, {
      name: "Congo",
      flag: "flag-cg"
    }, {
      name: "Switzerland",
      flag: "flag-ch"
    }, {
      name: "Côte d'Ivoire",
      flag: "flag-ci"
    }, {
      name: "Cook Islands",
      flag: "flag-ck"
    }, {
      name: "Chile",
      flag: "flag-cl"
    }, {
      name: "Cameroon",
      flag: "flag-cm"
    }, {
      name: "China",
      flag: "flag-cn"
    }, {
      name: "Colombia",
      flag: "flag-co"
    }, {
      name: "Costa Rica",
      flag: "flag-cr"
    }, {
      name: "Cuba",
      flag: "flag-cu"
    }, {
      name: "Cabo Verde",
      flag: "flag-cv"
    }, {
      name: "Curaçao",
      flag: "flag-cw"
    }, {
      name: "Christmas Island",
      flag: "flag-cx"
    }, {
      name: "Cyprus",
      flag: "flag-cy"
    }, {
      name: "Czech Republic",
      flag: "flag-cz"
    }, {
      name: "Germany",
      flag: "flag-de"
    }, {
      name: "Djibouti",
      flag: "flag-dj"
    }, {
      name: "Denmark",
      flag: "flag-dk"
    }, {
      name: "Dominica",
      flag: "flag-dm"
    }, {
      name: "Dominican Republic",
      flag: "flag-do"
    }, {
      name: "Algeria",
      flag: "flag-dz"
    }, {
      name: "Ecuador",
      flag: "flag-ec"
    }, {
      name: "Estonia",
      flag: "flag-ee"
    }, {
      name: "Egypt",
      flag: "flag-eg"
    }, {
      name: "Western Sahara",
      flag: "flag-eh"
    }, {
      name: "Eritrea",
      flag: "flag-er"
    }, {
      name: "Spain",
      flag: "flag-es"
    }, {
      name: "Ethiopia",
      flag: "flag-et"
    }, {
      name: "Finland",
      flag: "flag-fi"
    }, {
      name: "Fiji",
      flag: "flag-fj"
    }, {
      name: "Falkland Islands (Malvinas)",
      flag: "flag-fk"
    }, {
      name: "Micronesia, Federated States of",
      flag: "flag-fm"
    }, {
      name: "Faroe Islands",
      flag: "flag-fo"
    }, {
      name: "France",
      flag: "flag-fr"
    }, {
      name: "Gabon",
      flag: "flag-ga"
    }, {
      name: "United Kingdom of Great Britain and Northern Ireland",
      flag: "flag-gb"
    }, {
      name: "Grenada",
      flag: "flag-gd"
    }, {
      name: "Georgia",
      flag: "flag-ge"
    }, {
      name: "French Guiana",
      flag: "flag-gf"
    }, {
      name: "Guernsey",
      flag: "flag-gg"
    }, {
      name: "Ghana",
      flag: "flag-gh"
    }, {
      name: "Gibraltar",
      flag: "flag-gi"
    }, {
      name: "Greenland",
      flag: "flag-gl"
    }, {
      name: "Gambia",
      flag: "flag-gm"
    }, {
      name: "Guinea",
      flag: "flag-gn"
    }, {
      name: "Guadeloupe",
      flag: "flag-gp"
    }, {
      name: "Equatorial Guinea",
      flag: "flag-gq"
    }, {
      name: "Greece",
      flag: "flag-gr"
    }, {
      name: "South Georgia and the South Sandwich Islands",
      flag: "flag-gs"
    }, {
      name: "Guatemala",
      flag: "flag-gt"
    }, {
      name: "Guam",
      flag: "flag-gu"
    }, {
      name: "Guinea-Bissau",
      flag: "flag-gw"
    }, {
      name: "Guyana",
      flag: "flag-gy"
    }, {
      name: "Hong Kong",
      flag: "flag-hk"
    }, {
      name: "Heard Island and McDonald Islands",
      flag: "flag-hm"
    }, {
      name: "Honduras",
      flag: "flag-hn"
    }, {
      name: "Croatia",
      flag: "flag-hr"
    }, {
      name: "Haiti",
      flag: "flag-ht"
    }, {
      name: "Hungary",
      flag: "flag-hu"
    }, {
      name: "Indonesia",
      flag: "flag-id"
    }, {
      name: "Ireland",
      flag: "flag-ie"
    }, {
      name: "Israel",
      flag: "flag-il"
    }, {
      name: "Isle of Man",
      flag: "flag-im"
    }, {
      name: "India",
      flag: "flag-in"
    }, {
      name: "British Indian Ocean Territory",
      flag: "flag-io"
    }, {
      name: "Iraq",
      flag: "flag-iq"
    }, {
      name: "Iran, Islamic Republic of",
      flag: "flag-ir"
    }, {
      name: "Iceland",
      flag: "flag-is"
    }, {
      name: "Italy",
      flag: "flag-it"
    }, {
      name: "Jersey",
      flag: "flag-je"
    }, {
      name: "Jamaica",
      flag: "flag-jm"
    }, {
      name: "Jordan",
      flag: "flag-jo"
    }, {
      name: "Japan",
      flag: "flag-jp"
    }, {
      name: "Kenya",
      flag: "flag-ke"
    }, {
      name: "Kyrgyzstan",
      flag: "flag-kg"
    }, {
      name: "Cambodia",
      flag: "flag-kh"
    }, {
      name: "Kiribati",
      flag: "flag-ki"
    }, {
      name: "Comoros",
      flag: "flag-km"
    }, {
      name: "Saint Kitts and Nevis",
      flag: "flag-kn"
    }, {
      name: "Korea, Democratic People's Republic of",
      flag: "flag-kp"
    }, {
      name: "Korea, Republic of",
      flag: "flag-kr"
    }, {
      name: "Kuwait",
      flag: "flag-kw"
    }, {
      name: "Cayman Islands",
      flag: "flag-ky"
    }, {
      name: "Kazakhstan",
      flag: "flag-kz"
    }, {
      name: "Lao People's Democratic Republic",
      flag: "flag-la"
    }, {
      name: "Lebanon",
      flag: "flag-lb"
    }, {
      name: "Saint Lucia",
      flag: "flag-lc"
    }, {
      name: "Liechtenstein",
      flag: "flag-li"
    }, {
      name: "Sri Lanka",
      flag: "flag-lk"
    }, {
      name: "Liberia",
      flag: "flag-lr"
    }, {
      name: "Lesotho",
      flag: "flag-ls"
    }, {
      name: "Lithuania",
      flag: "flag-lt"
    }, {
      name: "Luxembourg",
      flag: "flag-lu"
    }, {
      name: "Latvia",
      flag: "flag-lv"
    }, {
      name: "Libya",
      flag: "flag-ly"
    }, {
      name: "Morocco",
      flag: "flag-ma"
    }, {
      name: "Monaco",
      flag: "flag-mc"
    }, {
      name: "Moldova, Republic of",
      flag: "flag-md"
    }, {
      name: "Montenegro",
      flag: "flag-me"
    }, {
      name: "Saint Martin (French part)",
      flag: "flag-mf"
    }, {
      name: "Madagascar",
      flag: "flag-mg"
    }, {
      name: "Marshall Islands",
      flag: "flag-mh"
    }, {
      name: "Macedonia, the former Yugoslav Republic of",
      flag: "flag-mk"
    }, {
      name: "Mali",
      flag: "flag-ml"
    }, {
      name: "Myanmar",
      flag: "flag-mm"
    }, {
      name: "Mongolia",
      flag: "flag-mn"
    }, {
      name: "Macao",
      flag: "flag-mo"
    }, {
      name: "Northern Mariana Islands",
      flag: "flag-mp"
    }, {
      name: "Martinique",
      flag: "flag-mq"
    }, {
      name: "Mauritania",
      flag: "flag-mr"
    }, {
      name: "Montserrat",
      flag: "flag-ms"
    }, {
      name: "Malta",
      flag: "flag-mt"
    }, {
      name: "Mauritius",
      flag: "flag-mu"
    }, {
      name: "Maldives",
      flag: "flag-mv"
    }, {
      name: "Malawi",
      flag: "flag-mw"
    }, {
      name: "Mexico",
      flag: "flag-mx"
    }, {
      name: "Malaysia",
      flag: "flag-my"
    }, {
      name: "Mozambique",
      flag: "flag-mz"
    }, {
      name: "Namibia",
      flag: "flag-na"
    }, {
      name: "New Caledonia",
      flag: "flag-nc"
    }, {
      name: "Niger",
      flag: "flag-ne"
    }, {
      name: "Norfolk Island",
      flag: "flag-nf"
    }, {
      name: "Nigeria",
      flag: "flag-ng"
    }, {
      name: "Nicaragua",
      flag: "flag-ni"
    }, {
      name: "Netherlands",
      flag: "flag-nl"
    }, {
      name: "Norway",
      flag: "flag-no"
    }, {
      name: "Nepal",
      flag: "flag-np"
    }, {
      name: "Nauru",
      flag: "flag-nr"
    }, {
      name: "Niue",
      flag: "flag-nu"
    }, {
      name: "New Zealand",
      flag: "flag-nz"
    }, {
      name: "Oman",
      flag: "flag-om"
    }, {
      name: "Panama",
      flag: "flag-pa"
    }, {
      name: "Peru",
      flag: "flag-pe"
    }, {
      name: "French Polynesia",
      flag: "flag-pf"
    }, {
      name: "Papua New Guinea",
      flag: "flag-pg"
    }, {
      name: "Philippines",
      flag: "flag-ph"
    }, {
      name: "Pakistan",
      flag: "flag-pk"
    }, {
      name: "Poland",
      flag: "flag-pl"
    }, {
      name: "Saint Pierre and Miquelon",
      flag: "flag-pm"
    }, {
      name: "Pitcairn",
      flag: "flag-pn"
    }, {
      name: "Puerto Rico",
      flag: "flag-pr"
    }, {
      name: "Palestine, State of",
      flag: "flag-ps"
    }, {
      name: "Portugal",
      flag: "flag-pt"
    }, {
      name: "Palau",
      flag: "flag-pw"
    }, {
      name: "Paraguay",
      flag: "flag-py"
    }, {
      name: "Qatar",
      flag: "flag-qa"
    }, {
      name: "Réunion",
      flag: "flag-re"
    }, {
      name: "Romania",
      flag: "flag-ro"
    }, {
      name: "Serbia",
      flag: "flag-rs"
    }, {
      name: "Russian Federation",
      flag: "flag-ru"
    }, {
      name: "Rwanda",
      flag: "flag-rw"
    }, {
      name: "Saudi Arabia",
      flag: "flag-sa"
    }, {
      name: "Solomon Islands",
      flag: "flag-sb"
    }, {
      name: "Seychelles",
      flag: "flag-sc"
    }, {
      name: "Sudan",
      flag: "flag-sd"
    }, {
      name: "Sweden",
      flag: "flag-se"
    }, {
      name: "Singapore",
      flag: "flag-sg"
    }, {
      name: "Saint Helena, Ascension and Tristan da Cunha",
      flag: "flag-sh"
    }, {
      name: "Slovenia",
      flag: "flag-si"
    }, {
      name: "Svalbard and Jan Mayen",
      flag: "flag-sj"
    }, {
      name: "Slovakia",
      flag: "flag-sk"
    }, {
      name: "Sierra Leone",
      flag: "flag-sl"
    }, {
      name: "San Marino",
      flag: "flag-sm"
    }, {
      name: "Senegal",
      flag: "flag-sn"
    }, {
      name: "Somalia",
      flag: "flag-so"
    }, {
      name: "Suriname",
      flag: "flag-sr"
    }, {
      name: "South Sudan",
      flag: "flag-ss"
    }, {
      name: "Sao Tome and Principe",
      flag: "flag-st"
    }, {
      name: "El Salvador",
      flag: "flag-sv"
    }, {
      name: "Sint Maarten (Dutch part)",
      flag: "flag-sx"
    }, {
      name: "Syrian Arab Republic",
      flag: "flag-sy"
    }, {
      name: "Swaziland",
      flag: "flag-sz"
    }, {
      name: "Turks and Caicos Islands",
      flag: "flag-tc"
    }, {
      name: "Chad",
      flag: "flag-td"
    }, {
      name: "French Southern Territories",
      flag: "flag-tf"
    }, {
      name: "Togo",
      flag: "flag-tg"
    }, {
      name: "Thailand",
      flag: "flag-th"
    }, {
      name: "Tajikistan",
      flag: "flag-tj"
    }, {
      name: "Tokelau",
      flag: "flag-tk"
    }, {
      name: "Timor-Leste",
      flag: "flag-tl"
    }, {
      name: "Turkmenistan",
      flag: "flag-tm"
    }, {
      name: "Tunisia",
      flag: "flag-tn"
    }, {
      name: "Tonga",
      flag: "flag-to"
    }, {
      name: "Turkey",
      flag: "flag-tr"
    }, {
      name: "Trinidad and Tobago",
      flag: "flag-tt"
    }, {
      name: "Tuvalu",
      flag: "flag-tv"
    }, {
      name: "Taiwan, Province of China",
      flag: "flag-tw"
    }, {
      name: "Tanzania, United Republic of",
      flag: "flag-tz"
    }, {
      name: "Ukraine",
      flag: "flag-ua"
    }, {
      name: "Uganda",
      flag: "flag-ug"
    }, {
      name: "United States Minor Outlying Islands",
      flag: "flag-um"
    }, {
      name: "United States of America",
      flag: "flag-us"
    }, {
      name: "Uruguay",
      flag: "flag-uy"
    }, {
      name: "Uzbekistan",
      flag: "flag-uz"
    }, {
      name: "Holy See",
      flag: "flag-va"
    }, {
      name: "Saint Vincent and the Grenadines",
      flag: "flag-vc"
    }, {
      name: "Venezuela, Bolivarian Republic of",
      flag: "flag-ve"
    }, {
      name: "Virgin Islands, British",
      flag: "flag-vg"
    }, {
      name: "Virgin Islands, U.S.",
      flag: "flag-vi"
    }, {
      name: "Viet Nam",
      flag: "flag-vn"
    }, {
      name: "Vanuatu",
      flag: "flag-vu"
    }, {
      name: "Wallis and Futuna",
      flag: "flag-wf"
    }, {
      name: "Samoa",
      flag: "flag-ws"
    }, {
      name: "Yemen",
      flag: "flag-ye"
    }, {
      name: "Mayotte",
      flag: "flag-yt"
    }, {
      name: "South Africa",
      flag: "flag-za"
    }, {
      name: "Zambia",
      flag: "flag-zm"
    }, {
      name: "Zimbabwe",
      flag: "flag-zw"
    }].filter(function (country) {
      return -1 != country.name.toLowerCase().indexOf($query.toLowerCase());
    });
  };
}]), angular.module("app").controller("SkillsCtrl", ["$scope", "$window", function ($scope, $window) {
  $scope.selectedSkill = 0, $scope.skillsVisible = !1, $scope.labels = ["Download Sales", "In-Store Sales", "Mail-Order Sales"], $scope.data = [300, 500, 100], $.getJSON("/skills.json", function (data) {
    $scope.skills = data.filter(function (skill) {
      return skill.enabled;
    }), $scope.setSelectedSkill = function (skill) {
      $scope.selectedSkill = skill, $scope.selectedSkill.chartOptions = {
        cutoutPercentage: 80,
        circumference: 2 * Math.PI,
        maintainAspectRatio: !0,
        tooltips: {
          enabled: !1
        }
      }, $scope.selectedSkill.chartStyle = {
        "background-image": "url(/skills/" + $scope.selectedSkill.image + ")",
        "background-repeat": "no-repeat",
        "background-size": "60%",
        "background-position": "50% 50%"
      };
    }, $scope.setSelectedSkill($scope.skills[0]), $scope.$apply();
  });
}]), angular.module("app").controller("TenThingsCtrl", ["$scope", "TenThingsSvc", function ($scope, TenThingsSvc) {
  function flash(element) {
    const color = $(element).css("background-color");
    $(element).animate({
      backgroundColor: "#FA8072"
    }, 100, () => {
      $(element).animate({
        backgroundColor: color
      }, 100);
    });
  }

  $scope.search = {
    name: "",
    values: ""
  }, TenThingsSvc.getCategories().then(response => {
    $scope.categories = response.data, $scope.categoryFilters = $scope.categories.map(category => category), $scope.categoryFilters.push("All"), $scope.categoryFilters.push("Blank"), $scope.categoryFilter = "All", $scope.updateFilter = "all";
  }), TenThingsSvc.getLanguages().then(response => {
    $scope.languages = response.data, $scope.languageFilters = $scope.languages.map(language => language), $scope.languageFilters.push({
      name: "All",
      code: "all"
    }), $scope.languageFilter = {
      name: "All",
      code: "all"
    };
  }), $scope.keyDown = e => {
    switch ((e = e || window.event).keyCode) {
      case 9:
        $("#new-blurb").is(":focus") && setTimeout(() => {
          $scope.addValue();
        }, 100);
        break;

      case 13:
        $("#new-blurb").is(":focus") ? $scope.addValue() : $("#new-value").is(":focus") && $("#new-blurb").focus();
    }
  }, $scope.searchName = "", $scope.newItem = {}, $scope.setCategoryFilter = category => $scope.categoryFilter = category, $scope.setUserFilter = user => $scope.userFilter = user, $scope.setUpdateFilter = type => $scope.updateFilter = type, $scope.setLanguageFilter = language => $scope.languageFilter = language, $scope.filteredLists = () => $scope.lists ? $scope.lists.filter(({
    isDynamic
  }) => "all" === $scope.updateFilter || !("static" === $scope.updateFilter && !0 === isDynamic || "dynamic" === $scope.updateFilter && !1 === isDynamic)).filter(({
    categories
  }) => "All" === $scope.categoryFilter || (categories.length > 0 ? categories.indexOf($scope.categoryFilter) >= 0 : "Blank" === $scope.categoryFilter)).filter(({
    creator
  }) => "All" === $scope.userFilter || creator === $scope.userFilter).filter(({
    language
  }) => "all" === $scope.languageFilter.code || language === $scope.languageFilter.code) : [], $scope.$on("login", _ => {
    $scope.getLists();
  }), $scope.sort = (sortValue, sortLabel) => {
    $scope.sortLabel = sortLabel, $scope.sortValue === sortValue ? $scope.sortDirection = !$scope.sortDirection : ($scope.sortValue = sortValue, $scope.sortDirection = !0), $scope.sorter = ($scope.sortDirection ? "+" : "-") + $scope.sortValue;
  }, $scope.sortList = "value", $scope.sortValue = "date", $scope.sortDirection = !0, $scope.sort("date", "Creation Date"), $scope.getLanguageCount = language => {
    if (!$scope.lists) return 0;
    const count = $scope.lists.filter(list => ("All" === $scope.categoryFilter || list.categories.includes($scope.categoryFilter)) && ("all" === language.code || list.language === language.code) && ("All" === $scope.userFilter || list.creator === $scope.userFilter) && ("all" === $scope.updateFilter || list.isDynamic === ("dynamic" === $scope.updateFilter))).length;
    return `${count} - ${Math.round(count / $scope.lists.length * 100)}%`;
  }, $scope.getCategoryCount = category => {
    if (!$scope.lists) return 0;
    const count = $scope.lists.filter(list => !(!("All" === category || list.categories.indexOf(category) >= 0) || "all" !== $scope.languageFilter.code && list.language !== $scope.languageFilter.code || "All" !== $scope.userFilter && list.creator !== $scope.userFilter || "all" !== $scope.updateFilter && list.isDynamic !== ("dynamic" === $scope.updateFilter))).length;
    return `${count} - ${Math.round(count / $scope.lists.length * 100)}%`;
  }, $scope.getUpdateCount = type => {
    if (!$scope.lists) return 0;
    const count = $scope.lists.filter(list => "all" === type || list.isDynamic && "dynamic" === type || !list.isDynamic && "static" === type).length;
    return `${count} - ${Math.round(count / $scope.lists.length * 100)}%`;
  }, $scope.getLists = () => {
    $scope.loading || ($scope.loading = !0, TenThingsSvc.getLists().then(({
      data
    }) => {
      $scope.lists = data, $scope.userFilters = {}, $scope.userFilters.All = $scope.lists.length, $scope.userFilters = $scope.lists.sort((list1, list2) => list1.creator > list2.creator).reduce((users, {
        creator
      }) => (users[creator] || (users[creator] = 0), users[creator]++, users), $scope.userFilters), $scope.userCount = Object.keys($scope.userFilters).length, $scope.userFilters = sortObject($scope.userFilters, !1), $scope.userFilter = "All", $scope.loading = !1;
    }));
  }, $scope.selectList = list => {
    TenThingsSvc.getList(list).then(({
      data
    }) => {
      $scope.selectedList = data;
    });
  }, $scope.selectCategory = category => {
    $scope.selectedList.category = category, $("#category-select").hide();
  }, $scope.getCategoryClass = category => $scope.selectedList && $scope.selectedList.categories.indexOf(category) >= 0 ? "btn-success" : "btn-default", $scope.toggleCategory = category => {
    const categoryIndex = $scope.selectedList.categories.indexOf(category);
    categoryIndex >= 0 ? $scope.selectedList.categories.splice(categoryIndex, 1) : $scope.selectedList.categories.push(category);
  }, $scope.selectLanguage = language => {
    $scope.selectedList.language = language.code;
    const nonEnglishIndex = $scope.selectedList.categories.indexOf("Non-English");
    "EN" !== language.code && nonEnglishIndex < 0 ? $scope.selectedList.categories.push("Non-English") : "EN" === language.code && nonEnglishIndex >= 0 && $scope.selectedList.categories.splice(nonEnglishIndex, 1);
  }, $scope.addList = () => {
    const currentLanguage = $scope.selectedList ? $scope.selectedList.language : "EN";
    $scope.selectedList = {
      name: "",
      creator: $scope.currentUser._id,
      date: new Date(),
      values: [],
      answers: 0,
      isDynamic: !0,
      category: "",
      categories: [],
      language: currentLanguage
    };
  }, $scope.hasDuplicate = () => $scope.selectedList && $scope.newItem.value && _.some($scope.selectedList.values, answer => answer.value.removeAllButLetters() == $scope.newItem.value.removeAllButLetters()), $scope.addValue = () => {
    $scope.newItem.value && (_.some($scope.selectedList.values, answer => answer.value.removeAllButLetters() == $scope.newItem.value.removeAllButLetters()) ? alert($scope.newItem.value + " is already in the list") : ($scope.newItem.creator = $scope.currentUser._id, $scope.selectedList.values.unshift(JSON.parse(JSON.stringify($scope.newItem))), $scope.selectedList.answers++, $scope.newItem.value = "", $scope.newItem.blurb = "", $scope.selectedList.values.length >= 10 && $scope.selectedList.name && $scope.selectedList.categories.length > 0 && $scope.saveList($scope.selectedList))), $("#new-value").focus();
  }, $scope.reportList = list => {
    list.reported = !0, TenThingsSvc.reportList($scope.currentUser, list);
  }, $scope.saveList = list => {
    $scope.saving || (list.values = list.values.filter(({
      value
    }) => value), list.values.length >= 10 && list.name && list.categories.length > 0 ? ($scope.saving = !0, TenThingsSvc.saveList($scope.currentUser, list).then(({
      data
    }) => {
      if ($scope.selectedList._id) {
        for (let i = 0; i < $scope.lists.length; i++) if ($scope.lists[i]._id === data._id) {
          $scope.lists[i] = data;
          break;
        }

        $scope.selectList(list);
      } else $scope.lists.unshift(data), $scope.selectList(data);

      $scope.saving = !1;
    }, err => {
      console.error(err), $scope.saving = !1;
    })) : list.values.length < 10 ? alert("Lists must contain 10 or more values!") : list.name ? flash(".list-category") : flash("#list-name"));
  }, $scope.deleteList = list => {
    list._id ? confirm("Are you sure you want to delete this list?") && TenThingsSvc.deleteList(list).then(response => {
      $scope.getLists(), $scope.selectedList = null;
    }) : ($scope.lists = $scope.lists.filter(({
      _id
    }) => _id), $scope.selectedList = null);
  }, $scope.listButtonClass = list => {
    const values = list.values.length,
          blurbs = list.blurbs;
    return values === blurbs && list.description ? "btn-default" : 0 !== blurbs || list.description ? 0 === blurbs && list.description ? "btn-info" : "btn-primary" : "btn-warning";
  }, $scope.getMoviePics = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getMoviePics($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  }, $scope.getTVPics = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getTVPics($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  }, $scope.getActorPics = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getActorPics($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  }, $scope.getBookPics = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getBookPics($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  }, $scope.getMusicVideos = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getMusicVideos($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  }, $scope.getPics = () => {
    $scope.gettingBlurbs = !0, TenThingsSvc.getPics($scope.selectedList).then(response => {
      $scope.selectList($scope.selectedList), $scope.gettingBlurbs = !1;
    });
  };
}]), angular.module("app").controller("TenThingsAdminCtrl", ["$scope", "TenThingsSvc", "UserSvc", function ($scope, TenThingsSvc, UserSvc) {
  $scope.$on("login", _ => {
    $scope.currentUser.admin && getUsers();
  }), $scope.getQueue = () => {
    $scope.loading = !0, TenThingsSvc.getQueue().then(response => {
      $scope.queue = response.data.replace("/n", "<br/>"), $scope.loading = !1;
    });
  }, $scope.getQueue(), TenThingsSvc.getPause().then(response => {
    $scope.paused = response.data, console.log($scope.paused);
  });

  const getUsers = () => {
    $scope.loading = !0, UserSvc.getUsers().then(response => {
      $scope.users = response.data.filter(user => !user.admin), $scope.loading = !1;
    });
  };

  $scope.toggleBan = user => {
    $scope.loading = !0, UserSvc.toggleBan(user._id).then(response => {
      getUsers();
    });
  }, $scope.togglePause = user => {
    TenThingsSvc.togglePause().then(response => {
      $scope.paused = response.data, console.log($scope.paused);
    });
  };
}]), angular.module("app").controller("TenThingsCurateCtrl", ["$scope", "TenThingsSvc", function ($scope, TenThingsSvc) {
  $scope.$on("login", _ => {
    getLists();
  });

  const getLists = () => {
    TenThingsSvc.getLists().then(({
      data
    }) => {
      $scope.lists = data, console.log(data);
    });
  };
}]), angular.module("app").controller("TenThingsGameCtrl", ["$scope", "$stateParams", "TenThingsSvc", function ($scope, $stateParams, TenThingsSvc) {
  $scope.$on("login", _ => {
    $scope.currentUser.admin && getUsers();
  }), $stateParams.game && TenThingsSvc.getGame($stateParams.game).then(response => {
    $scope.game = response.data, console.log($scope.game);
  });
}]), angular.module("app").controller("WorkoutCtrl", ["$scope", function ($scope) {
  $scope.timeRemaining = 0, $scope.timeExercising = 30, $scope.timeResting = 10, $scope.rest = !1;
  var exercising,
      sounds = {
    on: new Audio("on.wav"),
    off: new Audio("off.wav"),
    switch: new Audio("switch.wav")
  },
      exercises = [{
    name: "Jumping Jacks",
    split: !1
  }, {
    name: "Wall Sit",
    split: !1
  }, {
    name: "Push-Up",
    split: !1
  }, {
    name: "Crunch",
    split: !1
  }, {
    name: "Step-Up",
    split: !0
  }, {
    name: "Squat",
    split: !1
  }, {
    name: "Triceps Dip",
    split: !1
  }, {
    name: "Plank",
    split: !1
  }, {
    name: "High Knees",
    split: !1
  }, {
    name: "Lunge",
    split: !1
  }, {
    name: "Push-Up with Rotation",
    split: !1
  }, {
    name: "Side Plank",
    split: !0
  }];
  $scope.progress = function () {
    return exercises.length - Math.floor($scope.timeRemaining / ($scope.timeExercising + $scope.timeResting)) + "/" + exercises.length;
  }, $scope.workout = function () {
    var excerciseTime = $scope.timeExercising + $scope.timeResting;
    $scope.timeRemaining ? (clearInterval(exercising), $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.exercise = {
      name: "",
      split: !1
    }) : ($scope.timeRemaining = exercises.length * excerciseTime, exercising = setInterval(function () {
      if ($scope.timeRemaining--, 0 === $scope.timeRemaining) return $scope.exercise = {
        name: "Finished! Congrats!",
        split: !1
      }, $scope.timer = "", $scope.timeRemaining = 0, $scope.rest = !1, $scope.$apply(), clearInterval(exercising);
      var currentExercise = Math.floor($scope.timeRemaining / excerciseTime),
          timer = $scope.timeRemaining - currentExercise * excerciseTime;
      $scope.timer = timer > $scope.timeExercising ? timer - $scope.timeExercising : timer, timer > $scope.timeExercising ? $scope.rest = !0 : $scope.rest = !1, $scope.exercise = exercises[exercises.length - currentExercise - 1], timer === $scope.timeExercising ? sounds.on.play() : 0 === timer ? sounds.off.play() : $scope.exercise.split && timer === Math.floor($scope.timeExercising / 2) && sounds.switch.play(), $scope.$apply();
    }, 1e3));
  };
}]), angular.module("app").directive("head", ["$rootScope", "$state", "$compile", "$interpolate", function ($rootScope, $state, $compile, $interpolate) {
  var getStyle = function (templateStyleUrl) {
    var style = {
      href: templateStyleUrl,
      rel: "stylesheet"
    };
    return style.href.match(/\.less$/) && (style.rel = "stylesheet/less"), style;
  };

  return {
    restrict: "E",
    link: function (scope, elem) {
      scope.templateStyles = [];
      var html = '<link ng-attr-rel="{{style.rel}}" ng-repeat="style in templateStyles" ng-href="{{style.href}}">';
      html = (html = html.replace(/\{\{/g, $interpolate.startSymbol())).replace(/\}\}/g, $interpolate.endSymbol()), elem.append($compile(html)(scope)), $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
        scope.templateStyles = function (state) {
          for (var states = {}; "" !== state.name;) {
            var parent = $state.get("^", state);
            states[parent.name] || (states[parent.name] = {}), state.templateStyleUrl && (states[parent.name][""] || (states[parent.name][""] = getStyle(state.templateStyleUrl))), state.views && _.forEach(state.views, function (view, key) {
              if (view.templateStyleUrl) return (key = key.split("@"))[1] ? (states[key[1]] || (states[key[1]] = {}), void (states[key[1]][key[0]] || (states[key[1]][key[0]] = getStyle(view.templateStyleUrl)))) : void (states[parent.name][key[0]] = getStyle(view.templateStyleUrl));
            }), state = parent;
          }

          var flat = [];
          return _.forEach(states, function (views) {
            _.forEach(views, function (style) {
              _.includes(flat, style) || flat.push(style);
            });
          }), flat.reverse(), flat;
        }(toState);
      });
    }
  };
}]), angular.module("app").service("CategoriesSvc", ["$http", function ($http) {
  var svc = this;
  svc.getCategories = function () {
    return $http.get("/api/categories");
  }, svc.getTasks = function (category) {
    return $http.get("/api/categories/" + category);
  }, svc.addCategory = function (category) {
    return $http.post("/api/categories/", category);
  }, svc.addTask = function (category, task) {
    return $http.post("/api/categories/" + category + "/tasks", task);
  }, svc.setPriorityList = function (list) {
    svc.choices = list, svc.priorityList = [];

    for (var i = 0; i < list.length; i++) for (var j = i + 1; j < list.length; j++) {
      var random = Math.round(Math.random());
      svc.priorityList.push({
        id: 0,
        firstChoice: list[0 === random ? i : j].name,
        secondChoice: list[0 === random ? j : i].name,
        choice: ""
      });
    }

    for (i in function (array) {
      var t,
          i,
          m = array.length;

      for (; m;) i = Math.floor(Math.random() * m--), t = array[m], array[m] = array[i], array[i] = t;
    }(svc.priorityList), svc.priorityList) svc.priorityList[i].id = i + 1;
  }, svc.getPriorityList = function (list) {
    return svc.priorityList;
  };
}]), angular.module("app").service("EmailSvc", ["$http", function ($http) {
  this.send = function (email) {
    return console.log(email), $http.post("/api/email", email);
  };
}]), angular.module("app").service("FileSvc", ["$http", function ($http) {
  this.getImages = function (folder) {
    return $http.get("/api/files/images/" + folder);
  }, this.getSounds = function (folder) {
    return $http.get("/api/files/sounds/" + folder);
  };
}]), angular.module("app").service("GameSvc", ["$http", function ($http) {
  this.getHighscore = function (game, user) {
    return $http.get("/api/games/" + game + "/" + user + "/highscore");
  }, this.setHighscore = function (game, user, score) {
    return $http.post("/api/games/" + game + "/" + user + "/highscore", {
      score
    });
  };
}]), angular.module("app").service("LanguageSvc", function () {
  var svc = this;
  svc.languages = [{
    code: "EN",
    name: "English",
    flag: "flag-icon-gb"
  }, {
    code: "NL",
    name: "Nederlands",
    flag: "flag-icon-nl"
  }, {
    code: "FR",
    name: "Français",
    flag: "flag-icon-fr"
  }], svc.text = [{
    code: "EN"
  }, {
    code: "NL"
  }, {
    code: "FR"
  }], svc.selectedLanguage = svc.languages[0], svc.setLanguage = function (language) {
    return svc.selectedLanguage = language, language;
  }, svc.getLanguage = function () {
    return svc.selectedLanguage;
  };
}), angular.module("app").service("PostsSvc", ["$http", function ($http) {
  this.fetch = function () {
    return $http.get("/api/posts");
  }, this.create = function (post) {
    return $http.post("/api/posts", post);
  }, this.getPost = function (post) {
    return $http.get("/api/posts/" + post._id);
  };
}]), angular.module("app").service("TenThingsSvc", ["$http", function ($http) {
  var svc = this;
  svc.getQueue = function () {
    return $http.get("/bots/tenthings/queue");
  }, svc.getLists = function () {
    return $http.get("/api/tenthings/lists");
  }, svc.getCategories = () => $http.get("/api/tenthings/categories"), svc.getLanguages = () => $http.get("/api/tenthings/languages"), svc.getList = function (list) {
    return $http.get("/api/tenthings/lists/" + list._id);
  }, svc.saveList = function (user, list) {
    return $http.put("/api/tenthings/lists", {
      user,
      list
    });
  }, svc.reportList = function (user, list) {
    $http.get("/api/tenthings/lists/" + list._id + "/report/" + user._id);
  }, svc.deleteList = function (list) {
    return $http.delete("/api/tenthings/lists/" + list._id);
  }, svc.getMoviePics = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/movies`);
  }, svc.getTVPics = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/tv`);
  }, svc.getActorPics = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/actors`);
  }, svc.getBookPics = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/books`);
  }, svc.getMusicVideos = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/musicvideos`);
  }, svc.getPics = function (list) {
    return $http.get(`/api/tenthings/lists/${list._id}/pics`);
  }, svc.getPause = function () {
    return $http.get("/api/tenthings/pause");
  }, svc.togglePause = function () {
    return $http.post("/api/tenthings/pause");
  }, svc.getGame = function (id) {
    return $http.get("/api/tenthings/game/" + id);
  };
}]), angular.module("app").service("UserSvc", ["$http", function ($http) {
  var svc = this;
  svc.getUser = function () {
    return $http.get("/api/users");
  }, svc.getUsers = function () {
    return $http.get("/api/users/all");
  }, svc.toggleBan = function (id) {
    return $http.get("/api/users/ban/" + id);
  }, svc.setToken = function (token) {
    return $http.defaults.headers.common["X-Auth"] = token, svc.getUser();
  }, svc.authenticate = function (user) {
    return $http.post("/api/users/authenticate", {
      user
    }).then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.login = function (user) {
    return $http.get("/api/users/" + user + "/login").then(function (response) {
      return window.localStorage.token = response.data, svc.setToken(response.data);
    });
  }, svc.updateUser = function (user) {
    return $http.post("/api/users/" + user._id, {
      user
    }).then(function () {
      return svc.getUser();
    });
  }, svc.checkPassword = function (user, password) {
    return $http.post("/api/users/" + user + "/verification", {
      password
    });
  }, svc.changePassword = function (user, oldPassword, newPassword) {
    return $http.post("/api/users/" + user + "/password", {
      oldPassword,
      newPassword
    });
  }, svc.changeUsername = function (user, newUsername) {
    return $http.post("/api/users/" + user + "/username", {
      newUsername
    }).then(function () {
      return svc.getUser();
    });
  }, svc.logout = function () {
    window.localStorage.clear(), $http.defaults.headers.common["X-Auth"] = "";
  }, svc.createUser = function (username, password) {
    return $http.post("/api/users", {
      username,
      password
    }).then(function () {
      return svc.login(username, password);
    });
  };
}]), angular.module("app").controller("QuizAnimalsCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getSounds("animals").then(function (response) {
    $scope.animals = _.shuffle(response.data.map(animal => ({
      sound: animal,
      name: animal.substring(0, animal.indexOf(".")).replace("_", " ").capitalize()
    })));

    for (let animal of $scope.animals) animal.answers = _.shuffle([animal.name, ...getRandomAnimals(animal.name)]);

    console.log($scope.animals);
  }), $scope.guess = (animal, guess) => {
    animal.guess = guess;
  };

  const getRandomAnimals = name => _.shuffle($scope.animals.filter(animal => name !== animal.name).map(animal => animal.name)).slice(0, 5);

  $scope.getScore = () => `${$scope.animals.filter(animal => animal.name === animal.guess).length}/${$scope.animals.length}`, $scope.isScoreVisible = () => $scope.animals.filter(animal => animal.guess).length === $scope.animals.length;
}]), angular.module("app").controller("QuizGoogleCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("google").then(function (response) {
    $scope.images = response.data;
  });
}]), angular.module("app").controller("QuizLogosCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("logos").then(function (response) {
    $scope.images = response.data;
  });
}]), angular.module("app").controller("QuizMoviesCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("movies").then(function (response) {
    $scope.images = response.data;
  });
}]), angular.module("app").controller("QuizSkeletonsCtrl", ["$scope", "FileSvc", function ($scope, FileSvc) {
  FileSvc.getImages("skeletons").then(function (response) {
    $scope.animals = _.shuffle(response.data.map(animal => ({
      image: animal,
      name: animal.substring(0, animal.indexOf(".")).replace("_", " ").capitalize()
    })));

    for (let animal of $scope.animals) animal.answers = _.shuffle([animal.name, ...getRandomAnimals(animal.name)]);

    console.log($scope.animals);
  }), $scope.guess = (animal, guess) => {
    animal.guess = guess;
  };

  const getRandomAnimals = name => _.shuffle($scope.animals.filter(animal => name !== animal.name).map(animal => animal.name)).slice(0, 10);

  $scope.getScore = () => `${$scope.animals.filter(animal => animal.name === animal.guess).length}/${$scope.animals.length}`, $scope.isScoreVisible = () => $scope.animals.filter(animal => animal.guess).length === $scope.animals.length;
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3RvdHlwZXMuanMiLCJhcHAuanMiLCJtb2R1bGUuanMiLCJyb3V0ZXMuanMiLCJ3ZWJzb2NrZXRzLmpzIiwiY29udHJvbGxlcnMvYXBwLmN0cmwuanMiLCJjb250cm9sbGVycy9hc3Rlcm9pZHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2J1YmJsZXMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2NoYXJhZGVzLmN0cmwuanMiLCJjb250cm9sbGVycy9jb250YWN0LmN0cmwuanMiLCJjb250cm9sbGVycy9leHBlcmllbmNlLmN0cmwuanMiLCJjb250cm9sbGVycy9ob2JiaWVzLmN0cmwuanMiLCJjb250cm9sbGVycy9sZW1taW5ncy5jdHJsLmpzIiwiY29udHJvbGxlcnMvbGlzdHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL2xvZ2luLmN0cmwuanMiLCJjb250cm9sbGVycy9wb3N0cy5jdHJsLmpzIiwiY29udHJvbGxlcnMvcHJpb3JpdGl6ZS5jdHJsLmpzIiwiY29udHJvbGxlcnMvcHJvZmlsZS5jdHJsLmpzIiwiY29udHJvbGxlcnMvc2tpbGxzLmN0cmwuanMiLCJjb250cm9sbGVycy90ZW50aGluZ3MuY3RybC5qcyIsImNvbnRyb2xsZXJzL3RlbnRoaW5nc2FkbWluLmN0cmwuanMiLCJjb250cm9sbGVycy90ZW50aGluZ3NjdXJhdGUuY3RybC5qcyIsImNvbnRyb2xsZXJzL3RlbnRoaW5nc2dhbWUuY3RybC5qcyIsImNvbnRyb2xsZXJzL3dvcmtvdXQuY3RybC5qcyIsImRpcmVjdGl2ZXMvdWktcm91dGVyLXN0eWxlcy5kaXIuanMiLCJzZXJ2aWNlcy9jYXRlZ29yaWVzLnN2Yy5qcyIsInNlcnZpY2VzL2VtYWlsLnN2Yy5qcyIsInNlcnZpY2VzL2ZpbGUuc3ZjLmpzIiwic2VydmljZXMvZ2FtZS5zdmMuanMiLCJzZXJ2aWNlcy9sYW5ndWFnZS5zdmMuanMiLCJzZXJ2aWNlcy9wb3N0cy5zdmMuanMiLCJzZXJ2aWNlcy90ZW50aGluZ3Muc3ZjLmpzIiwic2VydmljZXMvdXNlci5zdmMuanMiLCJjb250cm9sbGVycy9xdWl6emVzL2FuaW1hbHMuY3RybC5qcyIsImNvbnRyb2xsZXJzL3F1aXp6ZXMvZ29vZ2xlLmN0cmwuanMiLCJjb250cm9sbGVycy9xdWl6emVzL2xvZ29zLmN0cmwuanMiLCJjb250cm9sbGVycy9xdWl6emVzL21vdmllcy5jdHJsLmpzIiwiY29udHJvbGxlcnMvcXVpenplcy9za2VsZXRvbnMuY3RybC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxNYXAiLCJiYXNlIiwibGV0dGVycyIsImRvbWFpbnMiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJyZW1vdmVEaWFjcml0aWNzIiwicmVkdWNlIiwicmVzdWx0IiwibGV0dGVyIiwicmVwbGFjZSIsInRoaXMiLCJTUEVDSUFMX0NIQVJBQ1RFUlMiLCJyZW1vdmVTcGVjaWFsQ2hhcmFjdGVycyIsIlJlZ0V4cCIsInJlbW92ZUFsbEJ1dExldHRlcnMiLCJ0b0xvd2VyQ2FzZSIsImNvbmNlYWwiLCJleHRyYSIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwicmVtb3ZlSFRNTCIsImFuZ2xlQnJhY2tldHMiLCJyZXBsYWNlQXJyYXkiLCJmaW5kIiwicmVwbGFjZVN0cmluZyIsImkiLCJsZW5ndGgiLCJtYXNrVVJMcyIsIk51bWJlciIsIm1ha2VSZWFkYWJsZSIsInRvU3RyaW5nIiwibWFrZVBlcmNlbnRhZ2UiLCJkZWNpbWFscyIsInRvRml4ZWQiLCJBcnJheSIsImdldFJhbmRvbSIsIm4iLCJsZW4iLCJ0YWtlbiIsIngiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJzb3J0T2JqZWN0Iiwib2JqIiwiZGlyZWN0aW9uIiwiYXJyIiwia2V5IiwicHVzaCIsInNvcnQiLCJhIiwiYiIsIm9ialNvcnRlZCIsImZvckVhY2giLCJpdGVtIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJHVybFNlcnZpY2VQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwib3RoZXJ3aXNlIiwic3RyaWN0TW9kZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiaHRtbDVNb2RlIiwiZW5hYmxlZCIsInJlcXVpcmVCYXNlIiwic2VydmljZSIsIiRyb290U2NvcGUiLCIkdGltZW91dCIsImNvbm5lY3Rpb24iLCJjb25uZWN0IiwiV2ViU29ja2V0Iiwid2luZG93IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3QiLCJvbm9wZW4iLCJjb25zb2xlIiwibG9nIiwib25jbG9zZSIsImUiLCJvbmVycm9yIiwicmVhZHlTdGF0ZSIsIm9ubWVzc2FnZSIsInBheWxvYWQiLCJKU09OIiwicGFyc2UiLCJkYXRhIiwiJGJyb2FkY2FzdCIsInRvcGljIiwic2VuZCIsImpzb24iLCJzdHJpbmdpZnkiLCJydW4iLCJXZWJTb2NrZXRTdmMiLCIkc2NvcGUiLCIkbG9jYXRpb24iLCJMYW5ndWFnZVN2YyIsIlVzZXJTdmMiLCJsb2dpbiIsInVzZXIiLCJsb2dnZWRJbiIsImxvY2FsU3RvcmFnZSIsIl9pZCIsImN1cnJlbnRVc2VyIiwiJCIsImxvYWQiLCJmYWRlT3V0IiwiZmFkZUluIiwidGhlbWVDb3VudGVyIiwidG9kYXkiLCJEYXRlIiwieWVhciIsImdldEZ1bGxZZWFyIiwiZmxpcFRoZW1lIiwic2hvdyIsImhpZGUiLCJzZXRUaW1lb3V0IiwiZ2V0SlNPTiIsInNraWxscyIsImZpbHRlciIsInNraWxsIiwiaG9iYmllcyIsImpvYnMiLCJqb2IiLCJzdGFydERhdGUiLCJlbmREYXRlIiwiY2hhcmFkZXMiLCJnZXRUaW1lU3BhbiIsImxhbmd1YWdlcyIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJnZXRMYW5ndWFnZSIsInNlbGVjdExhbmd1YWdlIiwibGFuZ3VhZ2UiLCJzZXRMYW5ndWFnZSIsImhvdmVyZGl2IiwiZGl2aWQiLCJsZWZ0IiwiY2xpZW50WCIsInRvcCIsImNsaWVudFkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3NzIiwidG9nZ2xlIiwic29jaWFsTWVkaWEiLCJuYW1lIiwiaWNvbiIsInRoZW4iLCJyZXNwb25zZSIsIiRvbiIsIl8iLCJiaXJ0aERhdGUiLCJsb2FkaW5nIiwibG9nb3V0IiwiZmlyZWJhc2UiLCJhdXRoIiwic2lnbk91dCIsImNsZWFyIiwiY2F0Y2giLCJlcnJvciIsImZvcm1hdERhdGUiLCJkYXRlIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwiR2FtZVN2YyIsImFubm91bmNlIiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImZvbnQiLCJmaWxsU3R5bGUiLCJ0ZXh0QWxpZ24iLCJzaG90cyIsImFzdGVyb2lkcyIsInBvd2VydXBzIiwiZXhwbG9zaW9ucyIsIm1hcCIsInNwYWNlIiwicG93ZXJ1cFR5cGVzIiwiYW5ub3VuY2VtZW50IiwiY3ljbGUiLCJyb3dzIiwiY29sdW1ucyIsInNpemUiLCJpbWciLCJJbWFnZSIsImFjdGl2YXRlIiwic3BhY2VzaGlwIiwibWF4U3BlZWQiLCJjb29sZG93biIsImNvb2xkb3duVGltZSIsInJhbmdlIiwic2hpZWxkIiwiZXhwbG9kZSIsInNwYXduQXN0ZXJvaWRzIiwicG93ZXJ1cCIsImFycmF5Iiwic3JjIiwiZXhwbG9zaW9uSW1hZ2UiLCJldmFsdWF0ZUtleXMiLCJwbGF5aW5nIiwic2hvb3QiLCJyb3RhdGlvbiIsInNwZWVkIiwic2NvcmUiLCIkYXBwbHkiLCJTcGFjZXNoaXAiLCJhdXRvU3Bhd24iLCJPYmplY3QiLCJrZXlzIiwiaWQiLCJyb3VuZCIsIkFzdGVyb2lkIiwid2lkdGgiLCJoZWlnaHQiLCJjYW5ub24iLCJ5IiwicG9zaXRpb24iLCJhbmdsZSIsIlNob3QiLCJtb3ZlIiwiYmVnaW5QYXRoIiwiYXJjIiwiUEkiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZSIsImZpbGwiLCJhc3Rlcm9pZCIsImhpdCIsImdhbWVPdmVyIiwiY29zIiwic2luIiwibGlmZXNwYW4iLCJnZXRFbnRyeVBvc2l0aW9uIiwicm90YXRpb25TcGVlZCIsIkV4cGxvc2lvbiIsInNob3QiLCJwb2ludHMiLCJzcGF3blBvd2VydXAiLCJvYmplY3QiLCJQb3dlcnVwIiwiZGVsYXkiLCJzYXZlIiwidHJhbnNsYXRlIiwicm90YXRlIiwiY29sdW1uIiwicm93IiwiZHJhd0ltYWdlIiwicmVzdG9yZSIsImdyaWRYIiwiZ3JpZFkiLCJvYmplY3QxIiwib2JqZWN0MiIsImFtb3VudCIsImhpZ2hzY29yZSIsInNldEhpZ2hzY29yZSIsInJlc2l6ZUNhbnZhcyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImFkZEV2ZW50TGlzdGVuZXIiLCJrZXlDb2RlIiwid2hpY2giLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkcmF3IiwiY2xlYXJSZWN0IiwiZ3JhZGllbnQiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImFkZENvbG9yU3RvcCIsInRhbGx5IiwiZmlsbFRleHQiLCJtZWFzdXJlVGV4dCIsImJhY2tncm91bmRJbWFnZSIsImJ1YmJsZXMiLCJjb2xvcnMiLCJCdWJibGUiLCJyYWRpdXMiLCJleHBhbmRpbmciLCJjaXJjdW1mZXJlbmNlIiwibWF4UmFkaXVzIiwidngiLCJ2eSIsImZpbHRlckJ1YmJsZXMiLCJidWJibGUiLCJzZWxlY3RXb3JkIiwiY2F0ZWdvcnkiLCJ3b3JkIiwiRW1haWxTdmMiLCJvcHRpb25zIiwidGV4dCIsImNvbnRhY3QiLCJlbWFpbCIsInBob25lIiwiYWJvdXQiLCJtZXNzYWdlIiwic2VuZGluZyIsInNlbnQiLCJzdGF0dXMiLCJlcnIiLCJnZXRTa2lsbCIsInNraWxsQ29kZSIsImNvZGUiLCIkd2luZG93IiwiaG9iYnlTZWxlY3RvclZpc2libGUiLCJzZWxlY3RlZEhvYmJ5Iiwic2VsZWN0SG9iYnkiLCJob2JieSIsInNob3dIb2JieSIsInZhbHVlIiwiaW5kZXgiLCJpbWFnZXMiLCJsZW1taW5nc0ltYWdlIiwiZGVjb3JJbWFnZSIsImxlbW1pbmdzIiwic3RhcnRlZCIsImFjdGlvbnMiLCJ3YWxrIiwic3RhcnQiLCJlbmQiLCJyZXZlcnNlIiwiaHVoIiwiZmFsbCIsImZseSIsInN0b3AiLCJjbGltYiIsImJ1aWxkIiwicHVuY2giLCJkaWciLCJMZW1taW5nIiwiaW5pdCIsImFjdCIsImFjdGlvbiIsImFuaW1hdGlvbiIsInNjYWxlIiwiaGF0Y2giLCJvcGVuIiwicmVjdCIsIkNhdGVnb3JpZXNTdmMiLCJzaG93Q2F0ZWdvcnkiLCJnZXRDYXRlZ29yaWVzIiwiY2F0ZWdvcmllcyIsInRhc2tzIiwiaiIsInRhc2siLCJzZWxlY3RDYXRlZ29yeSIsInNlbGVjdGVkQ2F0ZWdvcnkiLCJzZWxlY3RlZFRhc2tzIiwic2VsZWN0YWJsZVRhc2tzIiwiZW50ZXJlZENhdGVnb3J5IiwibmV3Q2F0ZWdvcnkiLCJmb3VuZCIsImFkZENhdGVnb3J5IiwibmV3VGFzayIsInNlbGVjdFRhc2siLCJhZGRUYXNrIiwiZW50ZXJlZFRhc2siLCJyZW1vdmVUYXNrIiwidW5zZWxlY3RUYXNrIiwidGFza0xpc3QiLCJzcGxpY2UiLCJpbmRleE9mIiwic3RhcnRQcmlvcml0aXppbmciLCJzZXRQcmlvcml0eUxpc3QiLCJwYXRoIiwiZ2V0UXVlc3Rpb25zIiwiY291bnRlciIsInVpIiwiZmlyZWJhc2V1aSIsIkF1dGhVSSIsInN0YXJ0VUkiLCJjYWxsYmFja3MiLCJzaWduSW5TdWNjZXNzIiwiY3JlZGVudGlhbCIsInJlZGlyZWN0VXJsIiwiZ2V0SWRUb2tlbiIsImlkVG9rZW4iLCJhdXRoZW50aWNhdGUiLCJkaXNwbGF5TmFtZSIsInBob3RvVVJMIiwiZW1haWxWZXJpZmllZCIsIiRlbWl0IiwibW9kYWwiLCJ0eXBlIiwic2lnbkluRmFpbHVyZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiY3JlZCIsInNpZ25JbldpdGhDcmVkZW50aWFsIiwidWlTaG93biIsInN0eWxlIiwiZGlzcGxheSIsInNpZ25JblN1Y2Nlc3NVcmwiLCJzaWduSW5PcHRpb25zIiwiR29vZ2xlQXV0aFByb3ZpZGVyIiwiUFJPVklERVJfSUQiLCJGYWNlYm9va0F1dGhQcm92aWRlciIsInNpZ25JbkZsb3ciLCJldmVudCIsInJlc2V0IiwiJGZpbHRlciIsIlBvc3RzU3ZjIiwiYWRkUG9zdCIsInBvc3RCb2R5IiwiY3JlYXRlIiwiYm9keSIsInBvc3QiLCJmZXRjaCIsInBvc3RzIiwiZ2V0UG9zdCIsInVuc2hpZnQiLCJwcmlvcml0eUxpc3QiLCJnZXRQcmlvcml0eUxpc3QiLCJzZWxlY3RlZFF1ZXN0aW9uIiwiY3VycmVudFF1ZXN0aW9uIiwiZG9uZSIsIm1ha2VDaG9pY2UiLCJjaG9pY2UiLCJmaXJzdENob2ljZSIsInNlY29uZENob2ljZSIsImdldEJ1dHRvblZhbHVlIiwic2VsZWN0UXVlc3Rpb24iLCJxdWVzdGlvbiIsImdldEZpbHRlcmVkUHJpb3JpdHlMaXN0IiwiZ2V0Q2hvaWNlc01hZGUiLCJjaG9pY2VzTWFkZSIsImdldEJ1dHRvbkNsYXNzIiwic2hvd0Nob2ljZXMiLCJjaGFydENsaWNrIiwiY2hhcnQiLCJnZXRTZWdtZW50c0F0RXZlbnQiLCJzaG93UmVzdWx0cyIsInJlc3BvbnNpdmUiLCJzZWdtZW50U2hvd1N0cm9rZSIsInNlZ21lbnRTdHJva2VDb2xvciIsInNlZ21lbnRTdHJva2VXaWR0aCIsInBlcmNlbnRhZ2VJbm5lckN1dG91dCIsImFuaW1hdGlvblN0ZXBzIiwiYW5pbWF0aW9uRWFzaW5nIiwiYW5pbWF0ZVJvdGF0ZSIsImFuaW1hdGVTY2FsZSIsImxlZ2VuZFRlbXBsYXRlIiwiY2hvaWNlcyIsInZvdGVzIiwibGFiZWwiLCJvZmZzZXQiLCJnZW5kZXIiLCJzZXgiLCJpZGVudGl0eSIsInNleGVzIiwiaWRlbnRpdGllcyIsImRhdGVPcHRpb25zIiwibWF4RGF0ZSIsIm1pbkRhdGUiLCJpbml0RGF0ZSIsImRhdGVwaWNrZXJNb2RlIiwicGVyY2VudGFnZSIsInN0YXJ0U2xpZGVyIiwiZHJhZ1NsaWRlciIsInN0b3BTbGlkZXIiLCJ1c2VybmFtZVRvZ2dsZSIsInBhc3N3b3JkVG9nZ2xlIiwidG9nZ2xlVXNlcm5hbWUiLCJuZXdVc2VybmFtZSIsInVzZXJuYW1lIiwidG9nZ2xlUGFzc3dvcmQiLCJuZXdQYXNzd29yZCIsImNvbmZpcm1QYXNzd29yZCIsImNoZWNrUGFzc3dvcmQiLCJwYXNzd29yZCIsIm9yaWdpbmFsQmciLCJhbmltYXRlIiwiYmFja2dyb3VuZENvbG9yIiwiY2hhbmdlUGFzc3dvcmQiLCJvbGRQYXNzd29yZCIsImNoYW5nZVVzZXJuYW1lIiwidXBkYXRlVXNlciIsIiR3YXRjaCIsImxvYWRDb3VudHJpZXMiLCIkcXVlcnkiLCJmbGFnIiwidGlkYml0IiwiY291bnRyeSIsInNlbGVjdGVkU2tpbGwiLCJza2lsbHNWaXNpYmxlIiwibGFiZWxzIiwic2V0U2VsZWN0ZWRTa2lsbCIsImNoYXJ0T3B0aW9ucyIsImN1dG91dFBlcmNlbnRhZ2UiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwidG9vbHRpcHMiLCJjaGFydFN0eWxlIiwiYmFja2dyb3VuZC1pbWFnZSIsImltYWdlIiwiYmFja2dyb3VuZC1yZXBlYXQiLCJiYWNrZ3JvdW5kLXNpemUiLCJiYWNrZ3JvdW5kLXBvc2l0aW9uIiwiVGVuVGhpbmdzU3ZjIiwiZmxhc2giLCJlbGVtZW50IiwiY29sb3IiLCJzZWFyY2giLCJ2YWx1ZXMiLCJjYXRlZ29yeUZpbHRlcnMiLCJjYXRlZ29yeUZpbHRlciIsInVwZGF0ZUZpbHRlciIsImdldExhbmd1YWdlcyIsImxhbmd1YWdlRmlsdGVycyIsImxhbmd1YWdlRmlsdGVyIiwia2V5RG93biIsImlzIiwiYWRkVmFsdWUiLCJmb2N1cyIsInNlYXJjaE5hbWUiLCJuZXdJdGVtIiwic2V0Q2F0ZWdvcnlGaWx0ZXIiLCJzZXRVc2VyRmlsdGVyIiwidXNlckZpbHRlciIsInNldFVwZGF0ZUZpbHRlciIsInNldExhbmd1YWdlRmlsdGVyIiwiZmlsdGVyZWRMaXN0cyIsImxpc3RzIiwiaXNEeW5hbWljIiwiY3JlYXRvciIsImdldExpc3RzIiwic29ydFZhbHVlIiwic29ydExhYmVsIiwic29ydERpcmVjdGlvbiIsInNvcnRlciIsInNvcnRMaXN0IiwiZ2V0TGFuZ3VhZ2VDb3VudCIsImNvdW50IiwibGlzdCIsImluY2x1ZGVzIiwiZ2V0Q2F0ZWdvcnlDb3VudCIsImdldFVwZGF0ZUNvdW50IiwidXNlckZpbHRlcnMiLCJBbGwiLCJsaXN0MSIsImxpc3QyIiwidXNlcnMiLCJ1c2VyQ291bnQiLCJzZWxlY3RMaXN0IiwiZ2V0TGlzdCIsInNlbGVjdGVkTGlzdCIsImdldENhdGVnb3J5Q2xhc3MiLCJ0b2dnbGVDYXRlZ29yeSIsImNhdGVnb3J5SW5kZXgiLCJub25FbmdsaXNoSW5kZXgiLCJhZGRMaXN0IiwiY3VycmVudExhbmd1YWdlIiwiYW5zd2VycyIsImhhc0R1cGxpY2F0ZSIsInNvbWUiLCJhbnN3ZXIiLCJhbGVydCIsImJsdXJiIiwic2F2ZUxpc3QiLCJyZXBvcnRMaXN0IiwicmVwb3J0ZWQiLCJzYXZpbmciLCJkZWxldGVMaXN0IiwiY29uZmlybSIsImxpc3RCdXR0b25DbGFzcyIsImJsdXJicyIsImRlc2NyaXB0aW9uIiwiZ2V0TW92aWVQaWNzIiwiZ2V0dGluZ0JsdXJicyIsImdldFRWUGljcyIsImdldEFjdG9yUGljcyIsImdldEJvb2tQaWNzIiwiZ2V0TXVzaWNWaWRlb3MiLCJnZXRQaWNzIiwiYWRtaW4iLCJnZXRVc2VycyIsImdldFF1ZXVlIiwicXVldWUiLCJnZXRQYXVzZSIsInBhdXNlZCIsInRvZ2dsZUJhbiIsInRvZ2dsZVBhdXNlIiwiJHN0YXRlUGFyYW1zIiwiZ2FtZSIsImdldEdhbWUiLCJ0aW1lUmVtYWluaW5nIiwidGltZUV4ZXJjaXNpbmciLCJ0aW1lUmVzdGluZyIsInJlc3QiLCJleGVyY2lzaW5nIiwic291bmRzIiwib24iLCJBdWRpbyIsIm9mZiIsInN3aXRjaCIsImV4ZXJjaXNlcyIsInNwbGl0IiwicHJvZ3Jlc3MiLCJ3b3Jrb3V0IiwiZXhjZXJjaXNlVGltZSIsImNsZWFySW50ZXJ2YWwiLCJ0aW1lciIsImV4ZXJjaXNlIiwic2V0SW50ZXJ2YWwiLCJjdXJyZW50RXhlcmNpc2UiLCJwbGF5IiwiZGlyZWN0aXZlIiwiJHN0YXRlIiwiJGNvbXBpbGUiLCIkaW50ZXJwb2xhdGUiLCJnZXRTdHlsZSIsInRlbXBsYXRlU3R5bGVVcmwiLCJocmVmIiwicmVsIiwibWF0Y2giLCJyZXN0cmljdCIsImxpbmsiLCJzY29wZSIsImVsZW0iLCJ0ZW1wbGF0ZVN0eWxlcyIsImh0bWwiLCJzdGFydFN5bWJvbCIsImVuZFN5bWJvbCIsImFwcGVuZCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJzdGF0ZXMiLCJwYXJlbnQiLCJnZXQiLCJ2aWV3cyIsInZpZXciLCJmbGF0IiwiZ2V0U3R5bGVzIiwiJGh0dHAiLCJzdmMiLCJnZXRUYXNrcyIsInQiLCJtIiwic2h1ZmZsZSIsImdldEltYWdlcyIsImZvbGRlciIsImdldFNvdW5kcyIsImdldEhpZ2hzY29yZSIsInB1dCIsImRlbGV0ZSIsImdldFVzZXIiLCJzZXRUb2tlbiIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiY3JlYXRlVXNlciIsIkZpbGVTdmMiLCJhbmltYWxzIiwiYW5pbWFsIiwic291bmQiLCJzdWJzdHJpbmciLCJnZXRSYW5kb21BbmltYWxzIiwiZ3Vlc3MiLCJnZXRTY29yZSIsImlzU2NvcmVWaXNpYmxlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSwyQkFBQUEsR0FBQSxDQUNBO0FBQ0FDLEVBQUFBLElBQUFBLEVBQUEsR0FEQTtBQUVBQyxFQUFBQSxPQUFBQSxFQUNBO0FBSEEsQ0FEQSxFQU1BO0FBQ0FELEVBQUFBLElBQUFBLEVBQUEsSUFEQTtBQUVBQyxFQUFBQSxPQUFBQSxFQUFBO0FBRkEsQ0FOQSxFQVVBO0FBQ0FELEVBQUFBLElBQUFBLEVBQUEsSUFEQTtBQUVBQyxFQUFBQSxPQUFBQSxFQUFBO0FBRkEsQ0FWQSxFQWNBO0FBQ0FELEVBQUFBLElBQUFBLEVBQUEsSUFEQTtBQUVBQyxFQUFBQSxPQUFBQSxFQUFBO0FBRkEsQ0FkQSxFQWtCQTtBQUNBRCxFQUFBQSxJQUFBQSxFQUFB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O0FBSEEsQ0E1V0EsQ0FBQTtBQUFBLElBa1hBQyxPQUFBQSxHQUFBLENBQ0EsTUFEQSxFQUVBLE1BRkEsRUFHQSxNQUhBLEVBSUEsS0FKQSxFQUtBLEtBTEEsRUFNQSxLQU5BLEVBT0EsS0FQQSxFQVFBLEtBUkEsRUFTQSxLQVRBLEVBVUEsS0FWQSxFQVdBLEtBWEEsRUFZQSxLQVpBLEVBYUEsS0FiQSxFQWNBLEtBZEEsRUFlQSxLQWZBLEVBZ0JBLEtBaEJBLEVBaUJBLEtBakJBLEVBa0JBLEtBbEJBLEVBbUJBLEtBbkJBLEVBb0JBLEtBcEJBLEVBcUJBLEtBckJBLEVBc0JBLEtBdEJBLEVBdUJBLEtBdkJBLEVBd0JBLEtBeEJBLEVBeUJBLEtBekJBLEVBMEJBLEtBMUJBLEVBMkJBLEtBM0JBLEVBNEJBLEtBNUJBLEVBNkJBLEtBN0JBLEVBOEJBLEtBOUJBLEVBK0JBLEtBL0JBLEVBZ0NBLEtBaENBLEVBaUNBLEtBakNBLEVBa0NBLEtBbENBLEVBbUNBLEtBbkNBLEVBb0NBLEtBcENBLEVBcUNBLEtBckNBLEVBc0NBLEtBdENBLEVBdUNBLEtBdkNBLEVBd0NBLEtBeENBLEVBeUNBLEtBekNBLEVBMENBLEtBMUNBLEVBMkNBLEtBM0NBLEVBNENBLEtBNUNBLEVBNkNBLEtBN0NBLEVBOENBLEtBOUNBLEVBK0NBLEtBL0NBLEVBZ0RBLEtBaERBLEVBaURBLEtBakRBLEVBa0RBLEtBbERBLEVBbURBLEtBbkRBLEVBb0RBLEtBcERBLEVBcURBLEtBckRBLEVBc0RBLEtBdERBLEVBdURBLEtBdkRBLEVBd0RBLEtBeERBLEVBeURBLEtBekRBLEVBMERBLEtBMURBLEVBMkRBLEtBM0RBLEVBNERBLEtBNURBLEVBNkRBLEtBN0RBLEVBOERBLEtBOURBLEVBK0RBLEtBL0RBLEVBZ0VBLEtBaEVBLEVBaUVBLEtBakVBLEVBa0VBLEtBbEVBLEVBbUVBLEtBbkVBLEVBb0VBLEtBcEVBLEVBcUVBLEtBckVBLEVBc0VBLEtBdEVBLEVBdUVBLEtBdkVBLEVBd0VBLEtBeEVBLEVBeUVBLEtBekVBLEVBMEVBLEtBMUVBLEVBMkVBLEtBM0VBLEVBNEVBLEtBNUVBLEVBNkVBLEtBN0VBLEVBOEVBLEtBOUVBLEVBK0VBLEtBL0VBLEVBZ0ZBLEtBaEZBLEVBaUZBLEtBakZBLEVBa0ZBLEtBbEZBLEVBbUZBLEtBbkZBLEVBb0ZBLEtBcEZBLEVBcUZBLEtBckZBLEVBc0ZBLEtBdEZBLEVBdUZBLEtBdkZBLEVBd0ZBLEtBeEZBLEVBeUZBLEtBekZBLEVBMEZBLEtBMUZBLEVBMkZBLEtBM0ZBLEVBNEZBLEtBNUZBLEVBNkZBLEtBN0ZBLEVBOEZBLEtBOUZBLEVBK0ZBLEtBL0ZBLEVBZ0dBLEtBaEdBLEVBaUdBLEtBakdBLEVBa0dBLEtBbEdBLEVBbUdBLEtBbkdBLEVBb0dBLEtBcEdBLEVBcUdBLEtBckdBLEVBc0dBLEtBdEdBLEVBdUdBLEtBdkdBLEVBd0dBLEtBeEdBLEVBeUdBLEtBekdBLEVBMEdBLEtBMUdBLEVBMkdBLEtBM0dBLEVBNEdBLEtBNUdBLEVBNkdBLEtBN0dBLEVBOEdBLEtBOUdBLEVBK0dBLEtBL0dBLEVBZ0hBLEtBaEhBLEVBaUhBLEtBakhBLEVBa0hBLEtBbEhBLEVBbUhBLEtBbkhBLEVBb0hBLEtBcEhBLEVBcUhBLEtBckhBLEVBc0hBLEtBdEhBLEVBdUhBLEtBdkhBLEVBd0hBLEtBeEhBLEVBeUhBLEtBekhBLEVBMEhBLEtBMUhBLEVBMkhBLEtBM0hBLEVBNEhBLEtBNUhBLEVBNkhBLEtBN0hBLEVBOEhBLEtBOUhBLEVBK0hBLEtBL0hBLEVBZ0lBLEtBaElBLEVBaUlBLEtBaklBLEVBa0lBLEtBbElBLEVBbUlBLEtBbklBLEVBb0lBLEtBcElBLEVBcUlBLEtBcklBLEVBc0lBLEtBdElBLEVBdUlBLEtBdklBLEVBd0lBLEtBeElBLEVBeUlBLEtBeklBLEVBMElBLEtBMUlBLEVBMklBLEtBM0lBLEVBNElBLEtBNUlBLEVBNklBLEtBN0lBLEVBOElBLEtBOUlBLEVBK0lBLEtBL0lBLEVBZ0pBLEtBaEpBLEVBaUpBLEtBakpBLEVBa0pBLEtBbEpBLEVBbUpBLEtBbkpBLEVBb0pBLEtBcEpBLEVBcUpBLEtBckpBLEVBc0pBLEtBdEpBLEVBdUpBLEtBdkpBLEVBd0pBLEtBeEpBLEVBeUpBLEtBekpBLEVBMEpBLEtBMUpBLEVBMkpBLEtBM0pBLEVBNEpBLEtBNUpBLEVBNkpBLEtBN0pBLEVBOEpBLEtBOUpBLEVBK0pBLEtBL0pBLEVBZ0tBLEtBaEtBLEVBaUtBLEtBaktBLEVBa0tBLEtBbEtBLEVBbUtBLEtBbktBLEVBb0tBLEtBcEtBLEVBcUtBLEtBcktBLEVBc0tBLEtBdEtBLEVBdUtBLEtBdktBLEVBd0tBLEtBeEtBLEVBeUtBLEtBektBLEVBMEtBLEtBMUtBLEVBMktBLEtBM0tBLEVBNEtBLEtBNUtBLEVBNktBLEtBN0tBLEVBOEtBLEtBOUtBLEVBK0tBLEtBL0tBLEVBZ0xBLEtBaExBLEVBaUxBLEtBakxBLEVBa0xBLEtBbExBLEVBbUxBLEtBbkxBLEVBb0xBLEtBcExBLEVBcUxBLEtBckxBLEVBc0xBLEtBdExBLEVBdUxBLEtBdkxBLEVBd0xBLEtBeExBLEVBeUxBLEtBekxBLEVBMExBLEtBMUxBLEVBMkxBLEtBM0xBLEVBNExBLEtBNUxBLEVBNkxBLEtBN0xBLEVBOExBLEtBOUxBLEVBK0xBLEtBL0xBLEVBZ01BLEtBaE1BLEVBaU1BLEtBak1BLEVBa01BLEtBbE1BLEVBbU1BLEtBbk1BLEVBb01BLEtBcE1BLEVBcU1BLEtBck1BLEVBc01BLEtBdE1BLEVBdU1BLEtBdk1BLEVBd01BLEtBeE1BLEVBeU1BLEtBek1BLEVBME1BLEtBMU1BLEVBMk1BLEtBM01BLEVBNE1BLEtBNU1BLEVBNk1BLEtBN01BLEVBOE1BLEtBOU1BLEVBK01BLEtBL01BLEVBZ05BLEtBaE5BLEVBaU5BLEtBak5BLEVBa05BLEtBbE5BLEVBbU5BLEtBbk5BLEVBb05BLEtBcE5BLEVBcU5BLEtBck5BLEVBc05BLEtBdE5BLEVBdU5BLEtBdk5BLEVBd05BLEtBeE5BLEVBeU5BLEtBek5BLEVBME5BLEtBMU5BLEVBMk5BLEtBM05BLEVBNE5BLEtBNU5BLEVBNk5BLEtBN05BLEVBOE5BLEtBOU5BLEVBK05BLEtBL05BLEVBZ09BLEtBaE9BLEVB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QUEsR0FBQSxHQUFBM08sQ0FBQSxHQUFBLEdBQUEsR0FBQUEsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxJQUFBLE1BQUEyTyxLQUFBLEdBQUEsR0FBQTNPLENBQUEsR0FBQSxHQUFBd08sQ0FEQUEsRUFFQUEsUUFBQUEsQ0FBQUUsWUFBQUYsQ0FBQSxLQUFBQSxFQUFBLFNBQUF4TyxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLElBQUEsTUFBQTJPLEtBQUEsR0FBQSxHQUFBM08sQ0FBQSxHQUFBLEdBQUEsR0FBQUEsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxJQUFBLE1BQUEyTyxLQUFBLEdBQUEsR0FBQTNPLENBQUEsR0FBQSxHQUFBLEdBQUFBLElBQUFBLENBQUFDLEtBQUFELENBQUEsTUFBQSxNQUFBMk8sS0FBQSxHQUFBLEdBQUEzTyxDQUFBLEdBQUEsR0FBQXdPLENBRkFBLEVBR0FBLFFBQUFBLENBQUFFLFlBQUFGLENBQUEsTUFBQUEsRUFBQSxTQUFBeE8sSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxJQUFBLE1BQUEyTyxLQUFBLEdBQUEsR0FBQTNPLENBQUEsR0FBQSxHQUFBLEdBQUFBLElBQUFBLENBQUFDLEtBQUFELENBQUEsTUFBQSxNQUFBMk8sS0FBQSxHQUFBLEdBQUEzTyxDQUFBLEdBQUEsR0FBQSxHQUFBQSxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLElBQUEsTUFBQTJPLEtBQUEsR0FBQSxHQUFBM08sQ0FBQSxHQUFBLEdBQUF3TyxDQUhBQSxFQUlBQSxRQUFBQSxDQUFBRSxZQUFBRixDQUFBLEtBQUFBLEVBQUEsU0FBQXhPLElBQUFBLENBQUFDLEtBQUFELENBQUEsTUFBQSxNQUFBMk8sS0FBQSxHQUFBLEdBQUEzTyxDQUFBLEdBQUEsR0FBQSxHQUFBQSxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBLElBQUEsTUFBQTJPLEtBQUEsR0FBQSxHQUFBM08sQ0FBQSxHQUFBLEdBQUEsR0FBQUEsSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQSxJQUFBLE1BQUEyTyxLQUFBLEdBQUEsR0FBQTNPLENBQUEsR0FBQSxHQUFBd08sQ0FKQUEsRUFLQW5HLEdBQUFBLENBQUFHLFNBQUFILEdBQUFtRyxRQUxBQSxFQU1BbkcsR0FBQUEsQ0FBQUUsSUFBQUYsR0FBQSxjQU5BbUcsRUFPQW5HLEdBQUFBLENBQUF1RyxRQUFBdkcsQ0FBQSxXQUFBQSxFQUFBRCxNQUFBQSxDQUFBK0MsS0FBQS9DLEdBQUEsQ0FBQUEsR0FBQUMsR0FBQUEsQ0FBQXdHLFdBQUF4RyxDQUFBLFdBQUFBLEVBQUE4QyxLQUFBOUMsR0FBQSxDQUFBQSxFQUFBRCxNQUFBQSxDQUFBZ0QsTUFBQWhELEdBQUEsQ0FBQUMsQ0FQQW1HLEVBUUFuRyxHQUFBQSxDQUFBRSxJQUFBRixHQUFBLGNBUkFtRyxFQVNBbkcsR0FBQUEsQ0FBQXVHLFFBQUF2RyxDQUFBLHNCQUFBQSxFQUFBRCxNQUFBQSxDQUFBK0MsS0FBQS9DLEdBQUEsQ0FBQUEsR0FBQUMsR0FBQUEsQ0FBQXdHLFdBQUF4RyxDQUFBLHNCQUFBQSxFQUFBOEMsS0FBQTlDLEdBQUEsQ0FBQUEsRUFBQUQsTUFBQUEsQ0FBQWdELE1BQUFoRCxHQUFBLENBQUFBLEdBQUEsRUFBQUMsQ0FUQW1HLEVBVUFuRyxHQUFBQSxDQUFBdUcsUUFBQXZHLENBQUEsNENBQUFBLEVBQUFELE1BQUFBLENBQUErQyxLQUFBL0MsR0FBQSxDQUFBQSxHQUFBQyxHQUFBQSxDQUFBd0csV0FBQXhHLENBQUEsNENBQUFBLEVBQUE4QyxLQUFBOUMsR0FBQSxDQUFBQSxFQUFBRCxNQUFBQSxDQUFBZ0QsTUFBQWhELEdBQUEsRUFBQUMsQ0FWQW1HO0FBVUE7QUFBQSxLQUVBRyxLQUFBQSxJQUFBdE8sU0FBQUEsR0FBQSxDQUFBQSxHQUFBLENBQUEsQ0FGQSxJQUdBLEdBSEEsSUFJQXNPLEtBQUFBLEdBQUEsR0FBQUEsRUFDQXRPLFNBQUFBLEdBQUFBLENBQUEsQ0FMQSxJQU1Bc08sS0FBQUEsR0FBQSxDQUFBQSxLQUNBQSxLQUFBQSxHQUFBLENBQUFBLEVBQ0F0TyxTQUFBQSxHQUFBQSxDQUFBLENBRkFzTyxDQU5BO0FBVUFOLElBQUFBLHFCQUFBQSxDQUFBQyxJQUFBRCxDQUFBQTtBQUFBQyxHQXBEQUQsQ0FsYUFqRTtBQW9hQSxNQUFBdUUsS0FBQUEsR0FBQSxDQUFBO0FBQUEsTUFDQXRPLFNBQUFBLEdBQUFBLENBQUEsQ0FEQTs7QUFxREF1RCxFQUFBQSxNQUFBQSxDQUFBbUYsS0FBQW5GLEdBQUEsWUFBQTtBQUNBLFdBQUE7QUFDQWtMLE1BQUFBLGVBQUFBLEVBQUEseUJBQUEvRixLQUFBLEdBQUE7QUFEQSxLQUFBO0FBQ0EsR0FGQW5GO0FBRUEsQ0F4a0JBLENBREE3QyxDSk9BQSxFS1BBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsYUFEQUEsRUFDQSxDQUFBLFFBQUEsRUFBQSxVQUFBNkMsTUFBQSxFQUFBQTtBQUVBLE1BQUF3RSxNQUFBQSxHQUFBMUIsUUFBQUEsQ0FBQUMsY0FBQUQsQ0FBQSxjQUFBQSxDQUFBO0FBQUEsTUFDQTJCLEdBQUFBLEdBQUFELE1BQUFBLENBQUFFLFVBQUFGLENBQUEsSUFBQUEsQ0FEQTtBQUFBLE1BRUEyRyxPQUFBQSxHQUFBLEVBRkE7QUFBQSxNQUdBQyxNQUFBQSxHQUFBLENBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsQ0FIQTs7QUFLQSxXQUFBQyxNQUFBLEdBQUFBO0FBQ0FqUixTQUFBdU8sUUFBQXZPLEdBQUEsQ0FBQUEsRUFDQUEsS0FBQWtSLE1BQUFsUixHQUFBLENBREFBLEVBRUFBLEtBQUFtUixTQUFBblIsR0FBQW1SLENBQUEsQ0FGQW5SLEVBR0FBLEtBQUF5TSxLQUFBek0sR0FBQWdDLElBQUFBLENBQUFpTCxLQUFBakwsQ0FBQSxJQUFBQSxJQUFBQSxDQUFBRSxNQUFBRixFQUFBQSxDQUhBaEMsRUFJQUEsS0FBQW9SLGFBQUFwUixHQUFBZ0MsSUFBQUEsQ0FBQWlMLEtBQUFqTCxDQUFBLEtBQUFBLElBQUFBLENBQUFFLE1BQUFGLEVBQUFBLElBQUEsQ0FKQWhDLEVBS0FBLEtBQUFxUixTQUFBclIsR0FBQWdDLElBQUFBLENBQUFpTCxLQUFBakwsQ0FBQSxNQUFBQSxJQUFBQSxDQUFBRSxNQUFBRixFQUFBQSxJQUFBLEVBTEFoQyxFQU1BQSxLQUFBK0IsQ0FBQS9CLEdBQUFnQyxJQUFBQSxDQUFBaUwsS0FBQWpMLENBQUFBLElBQUFBLENBQUFFLE1BQUFGLEtBQUFvSSxNQUFBQSxDQUFBK0MsS0FBQW5MLENBTkFoQyxFQU9BQSxLQUFBc04sQ0FBQXROLEdBQUFnQyxJQUFBQSxDQUFBaUwsS0FBQWpMLENBQUFBLElBQUFBLENBQUFFLE1BQUFGLEtBQUFvSSxNQUFBQSxDQUFBZ0QsTUFBQXBMLENBUEFoQyxFQVFBQSxLQUFBc1IsRUFBQXRSLEdBQUFnQyxJQUFBQSxDQUFBRSxNQUFBRixNQUFBLEVBQUFBLEdBQUEsQ0FBQUEsR0FBQSxDQUFBLENBUkFoQyxFQVNBQSxLQUFBdVIsRUFBQXZSLEdBQUFnQyxJQUFBQSxDQUFBRSxNQUFBRixNQUFBLEVBQUFBLEdBQUEsQ0FBQUEsR0FBQSxDQUFBLENBVEFoQztBQXlDQXFROztBQUFBQSxFQUFBQSxxQkFBQUEsQ0FmQSxTQUFBbUIsYUFBQSxHQUFBQTtBQUNBVCxJQUFBQSxPQUFBQSxDQUFBdk8sSUFBQXVPLENBQUEsSUFBQUUsTUFBQSxFQUFBRixHQUNBQSxPQUFBQSxHQUFBQSxPQUFBQSxDQUFBMUosTUFBQTBKLENBQUEsVUFBQVUsTUFBQSxFQUFBQTtBQU9BLGFBTkFBLE1BQUFBLENBQUFQLE1BQUFPLEtBQUFBLE1BQUFBLENBQUFKLFNBQUFJLEtBQ0FBLE1BQUFBLENBQUFOLFNBQUFNLEdBQUFOLENBQUEsQ0FEQU0sR0FHQUEsTUFBQUEsQ0FBQTFQLENBQUEwUCxJQUFBQSxNQUFBQSxDQUFBSCxFQUFBRyxHQUFBQSxNQUFBQSxDQUFBaEYsS0FIQWdGLEVBSUFBLE1BQUFBLENBQUFuRSxDQUFBbUUsSUFBQUEsTUFBQUEsQ0FBQUYsRUFBQUUsR0FBQUEsTUFBQUEsQ0FBQWhGLEtBSkFnRixFQUtBQSxNQUFBQSxDQUFBUCxNQUFBTyxJQUFBQSxNQUFBQSxDQUFBTixTQUFBTSxHQUFBLENBQUFBLEdBQUEsQ0FBQSxDQUxBQSxFQU1BQSxNQUFBQSxDQUFBUCxNQUFBTyxHQUFBLENBQUE7QUFBQSxLQVBBVixDQURBQSxFQWRBMUcsR0FBQUEsQ0FBQWtHLFNBQUFsRyxDQUFBLENBQUFBLEVBQUEsQ0FBQUEsRUFBQUQsTUFBQUEsQ0FBQStDLEtBQUE5QyxFQUFBRCxNQUFBQSxDQUFBZ0QsTUFBQS9DLENBY0EwRyxFQWJBQSxPQUFBQSxDQUFBbE8sT0FBQWtPLENBQUEsVUFBQVUsTUFBQSxFQUFBQTtBQUNBelAsTUFBQUEsSUFBQUEsQ0FBQWlMLEtBQUFqTCxDQUFBZ1AsTUFBQUEsQ0FBQTlQLE1BQUE4UCxHQUFBUyxNQUFBQSxDQUFBUCxNQUFBRixHQUFBUyxNQUFBQSxDQUFBSixTQUFBclAsR0FDQXFJLEdBQUFBLENBQUFzRCxTQUFBdEQsRUFEQXJJLEVBRUFxSSxHQUFBQSxDQUFBdUQsR0FBQXZELENBQUFvSCxNQUFBQSxDQUFBMVAsQ0FBQXNJLEVBQUFvSCxNQUFBQSxDQUFBbkUsQ0FBQWpELEVBQUFvSCxNQUFBQSxDQUFBUCxNQUFBN0csRUFBQSxDQUFBQSxFQUFBLElBQUFySSxJQUFBQSxDQUFBNkwsRUFBQXhELENBRkFySSxFQUdBcUksR0FBQUEsQ0FBQUcsU0FBQUgsR0FBQTJHLE1BQUFBLENBQUFoUCxJQUFBQSxDQUFBaUwsS0FBQWpMLENBQUFnUCxNQUFBQSxDQUFBOVAsTUFBQThQLEdBQUFTLE1BQUFBLENBQUFQLE1BQUFGLEdBQUFTLE1BQUFBLENBQUFKLFNBQUFyUCxDQUFBZ1AsQ0FIQWhQLEVBSUFxSSxHQUFBQSxDQUFBNEQsSUFBQTVELEVBSkFySSxFQUtBcUksR0FBQUEsQ0FBQXlELFdBQUF6RCxHQUFBMkcsTUFBQUEsQ0FBQUEsTUFBQUEsQ0FBQTlQLE1BQUE4UCxHQUFBaFAsSUFBQUEsQ0FBQWlMLEtBQUFqTCxDQUFBZ1AsTUFBQUEsQ0FBQTlQLE1BQUE4UCxHQUFBUyxNQUFBQSxDQUFBUCxNQUFBRixHQUFBUyxNQUFBQSxDQUFBSixTQUFBclAsQ0FBQWdQLENBTEFoUCxFQU1BcUksR0FBQUEsQ0FBQTBELFNBQUExRCxHQUFBb0gsTUFBQUEsQ0FBQUwsYUFBQUssR0FBQUEsTUFBQUEsQ0FBQVAsTUFBQU8sR0FBQUEsTUFBQUEsQ0FBQUosU0FOQXJQLEVBT0FxSSxHQUFBQSxDQUFBMkQsTUFBQTNELEVBUEFySTtBQU9BZ00sS0FSQStDLENBYUFBLEVBV0FWLHFCQUFBQSxDQUFBbUIsYUFBQW5CLENBWEFVO0FBV0FTLEdBR0FuQixDQUFBQSxFQUdBLFlBQUE7QUFrQkEsYUFBQU4sWUFBQSxHQUFBQTtBQUNBM0YsTUFBQUEsTUFBQUEsQ0FBQStDLEtBQUEvQyxHQUFBL0YsTUFBQUEsQ0FBQTJMLFVBQUE1RixFQUNBQSxNQUFBQSxDQUFBZ0QsTUFBQWhELEdBQUEvRixNQUFBQSxDQUFBNEwsV0FBQTVMLElBQUErRixNQUFBQSxDQUFBK0MsS0FBQS9DLElBQUEsR0FBQUEsR0FBQSxFQUFBQSxHQUFBLEdBQUEvRixDQURBK0Y7QUFUQS9GOztBQUFBQSxJQUFBQSxNQUFBQSxDQUFBNkwsZ0JBQUE3TCxDQUFBLFFBQUFBLEVBQUEwTCxZQUFBMUwsRUFBQTBMLENBQUEsQ0FBQTFMLEdBR0EwTCxZQUFBQSxFQUhBMUw7QUFWQSxHQUFBLEVBSEFnTTtBQUdBLENBcERBLENBREF0TixDTE9BQSxFTVBBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQUFZLFVBQUFaLENBQUEsY0FBQUEsRUFBQSxDQUFBLFFBQUEsRUFBQSxVQUFBNkMsTUFBQSxFQUFBQTtBQUNBQSxFQUFBQSxNQUFBQSxDQUFBOEwsVUFBQTlMLEdBQUErTCxRQUFBQSxJQUFBQTtBUDh3REUvTCxJQUFBQSxNQUFBQSxDQUFPZ00sSUFBUGhNLEdBQ0NBLE1BQUFBLENBQU9nQyxRQUFQaEMsQ0FBZ0IrTCxRQUFoQi9MLEVBQ0M1RCxJQUFBQSxDQUFLQyxLQUFMRCxDQUFXQSxJQUFBQSxDQUFLRSxNQUFMRixLQUFnQjRELE1BQUFBLENBQU9nQyxRQUFQaEMsQ0FBZ0IrTCxRQUFoQi9MLEVBQTBCMUUsTUFBckRjLENBREQ0RCxDQUREQSxFQUlBbEIsT0FBQUEsQ0FBUUMsR0FBUkQsQ0FBWWtCLE1BQUFBLENBQU9nTSxJQUFuQmxOLENBSkFrQjtBQUltQmdNLEdPbHhEckJoTTtBUGt4RHFCZ00sQ09ueERyQixDQUFBN08sQ05PQUEsRU9QQUEsT0FBQUEsQ0FBQUMsTUFBQUQsQ0FBQSxLQUFBQSxFQUNBWSxVQURBWixDQUNBLGFBREFBLEVBQ0EsQ0FBQSxRQUFBLEVBQUEsVUFBQSxFQUFBLFVBQUE2QyxNQUFBLEVBQUFpTSxRQUFBLEVBQUFBO0FBRUFqTSxFQUFBQSxNQUFBQSxDQUFBa00sT0FBQWxNLEdBQUEsQ0FDQTtBQUNBbUQsSUFBQUEsSUFBQUEsRUFBQSxNQURBO0FBRUFnSixJQUFBQSxJQUFBQSxFQUFBO0FBRkEsR0FEQSxFQUtBO0FBQ0FoSixJQUFBQSxJQUFBQSxFQUFBLGNBREE7QUFFQWdKLElBQUFBLElBQUFBLEVBQUE7QUFGQSxHQUxBLEVBU0E7QUFDQWhKLElBQUFBLElBQUFBLEVBQUEsUUFEQTtBQUVBZ0osSUFBQUEsSUFBQUEsRUFBQTtBQUZBLEdBVEEsRUFhQTtBQUNBaEosSUFBQUEsSUFBQUEsRUFBQSxPQURBO0FBRUFnSixJQUFBQSxJQUFBQSxFQUFBO0FBRkEsR0FiQSxDQUFBbk0sRUFvQkFBLE1BQUFBLENBQUFvTSxPQUFBcE0sR0FBQTtBQUNBcU0sSUFBQUEsS0FBQUEsRUFBQSxFQURBO0FBRUFsSixJQUFBQSxJQUFBQSxFQUFBLEVBRkE7QUFHQW1KLElBQUFBLEtBQUFBLEVBQUEsRUFIQTtBQUlBQyxJQUFBQSxLQUFBQSxFQUFBLEVBSkE7QUFLQUMsSUFBQUEsT0FBQUEsRUFBQTtBQUxBLEdBcEJBeE0sRUE0QkFBLE1BQUFBLENBQUFMLElBQUFLLEdBQUEsWUFBQTtBQUNBQSxJQUFBQSxNQUFBQSxDQUFBeU0sT0FBQXpNLEdBQUF5TSxDQUFBLENBQUF6TSxFQUNBbEIsT0FBQUEsQ0FBQUMsR0FBQUQsQ0FBQSxNQUFBQSxDQURBa0IsRUFFQWlNLFFBQUFBLENBQUF0TSxJQUFBc00sQ0FBQTtBQUNBSSxNQUFBQSxLQUFBQSxFQUFBck0sTUFBQUEsQ0FBQW9NLE9BQUFwTSxDQUFBcU0sS0FEQTtBQUVBbEosTUFBQUEsSUFBQUEsRUFBQW5ELE1BQUFBLENBQUFvTSxPQUFBcE0sQ0FBQW1ELElBRkE7QUFHQW1KLE1BQUFBLEtBQUFBLEVBQUF0TSxNQUFBQSxDQUFBb00sT0FBQXBNLENBQUFzTSxLQUhBO0FBSUFDLE1BQUFBLEtBQUFBLEVBQUF2TSxNQUFBQSxDQUFBb00sT0FBQXBNLENBQUF1TSxLQUpBO0FBS0FDLE1BQUFBLE9BQUFBLEVBQUF4TSxNQUFBQSxDQUFBb00sT0FBQXBNLENBQUF3TTtBQUxBLEtBQUFQLEVBT0E1SSxJQVBBNEksQ0FPQSxVQUFBM0ksUUFBQSxFQUFBQTtBQUNBdEQsTUFBQUEsTUFBQUEsQ0FBQTBNLElBQUExTSxHQUFBME0sQ0FBQSxDQUFBMU0sRUFDQWxCLE9BQUFBLENBQUFDLEdBQUFELENBQUEsNkJBQUFBLEVBQUF3RSxRQUFBQSxDQUFBcUosTUFBQTdOLEVBQUF3RSxRQUFBQSxDQUFBNkksSUFBQXJOLENBREFrQixFQUVBbEIsT0FBQUEsQ0FBQUMsR0FBQUQsQ0FBQXdFLFFBQUF4RSxDQUZBa0I7QUFFQXNELEtBVkEySSxFQVdBLFVBQUFXLEdBQUEsRUFBQUE7QUFDQTVNLE1BQUFBLE1BQUFBLENBQUF5TSxPQUFBek0sR0FBQXlNLENBQUEsQ0FBQXpNLEVBQ0FsQixPQUFBQSxDQUFBQyxHQUFBRCxDQUFBLGdCQUFBQSxFQUFBOE4sR0FBQTlOLENBREFrQjtBQUNBNE0sS0FiQVgsQ0FGQWpNO0FBZUE0TSxHQTVDQTVNO0FBNENBNE0sQ0E5Q0EsQ0FEQXpQLENQT0FBLEVRUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxnQkFEQUEsRUFDQSxDQUFBLFFBQUEsRUFBQSxVQUFBNkMsTUFBQSxFQUFBQTtBQUVBQSxFQUFBQSxNQUFBQSxDQUFBNk0sUUFBQTdNLEdBQUEsVUFBQThNLFNBQUEsRUFBQUE7QUFDQSxRQUFBOU0sTUFBQUEsQ0FBQXdCLE1BQUEsRUFDQSxPQUFBeEIsTUFBQUEsQ0FBQXdCLE1BQUF4QixDQUFBN0UsSUFBQTZFLENBQUEsVUFBQTBCLEtBQUEsRUFBQUE7QUFDQSxhQUFBQSxLQUFBQSxDQUFBcUwsSUFBQXJMLEtBQUFvTCxTQUFBO0FBQUFBLEtBREE5TSxDQUFBO0FBQ0E4TSxHQUhBOU07QUFHQThNLENBTEEsQ0FEQTNQLENST0FBLEVTUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxhQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBNkMsTUFBQSxFQUFBZ04sT0FBQSxFQUFBQTtBQUVBaE4sRUFBQUEsTUFBQUEsQ0FBQWlOLG9CQUFBak4sR0FBQWlOLENBQUEsQ0FBQWpOLEVBRUFVLENBQUFBLENBQUFhLE9BQUFiLENBQUEsdURBQUFBLEVBQUEsVUFBQTRDLFFBQUEsRUFBQUEsQ0FBQUEsQ0FBQTVDLENBRkFWLEVBTUFBLE1BQUFBLENBQUFrTixhQUFBbE4sR0FBQUEsTUFBQUEsQ0FBQTJCLE9BQUEzQixDQUFBLENBQUFBLENBTkFBLEVBUUFBLE1BQUFBLENBQUFtTixXQUFBbk4sR0FBQSxVQUFBb04sS0FBQSxFQUFBQTtBQUNBcE4sSUFBQUEsTUFBQUEsQ0FBQWtOLGFBQUFsTixHQUFBb04sS0FBQXBOLEVBQ0FBLE1BQUFBLENBQUFpTixvQkFBQWpOLEdBQUFpTixDQUFBLENBREFqTjtBQUNBLEdBVkFBLEVBYUFBLE1BQUFBLENBQUFxTixTQUFBck4sR0FBQSxVQUFBc04sS0FBQSxFQUFBQyxLQUFBLEVBQUFqSCxLQUFBLEVBQUFBO0FBQ0EsV0FBQSxDQUFBLENBQUFnSCxLQUFBQSxDQUFBRSxNQUFBLElBQ0FGLEtBQUFBLENBQUFFLE1BQUFGLENBQUFoUyxNQUFBZ1MsR0FBQSxDQURBO0FBQ0EsR0FmQXROO0FBZUEsQ0FqQkEsQ0FEQTdDLENUT0FBLEVVUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxjQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxVQUFBNkMsTUFBQSxFQUFBc0UsT0FBQSxFQUFBQTtBQUVBLE1BR0FFLE1BQUFBLEdBQUExQixRQUFBQSxDQUFBQyxjQUFBRCxDQUFBLGVBQUFBLENBSEE7QUFBQSxNQUlBMkIsR0FBQUEsR0FBQUQsTUFBQUEsQ0FBQUUsVUFBQUYsQ0FBQSxJQUFBQSxDQUpBO0FBQUEsTUFLQWlKLGFBQUFBLEdBQUEsSUFBQTlILEtBQUEsRUFMQTtBQU1BOEgsRUFBQUEsYUFBQUEsQ0FBQWxILEdBQUFrSCxHQUFBLHVCQUFBQTtBQUNBLE1BQUFDLFVBQUFBLEdBQUEsSUFBQS9ILEtBQUEsRUFBQTtBQUNBK0gsRUFBQUEsVUFBQUEsQ0FBQW5ILEdBQUFtSCxHQUFBLG9CQUFBQTtBQUNBLE1BQUFDLFFBQUFBLEdBQUEsRUFBQTtBQUFBLE1BQ0FDLE9BQUFBLEdBQUFBLENBQUEsQ0FEQTtBQUFBLE1BR0FDLE9BQUFBLEdBQUE7QUFDQUMsSUFBQUEsSUFBQUEsRUFBQTtBQUNBQyxNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEVBQUEsQ0FGQTtBQUdBeEksTUFBQUEsT0FBQUEsRUFBQSxDQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBMEksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBREE7QUFRQUMsSUFBQUEsR0FBQUEsRUFBQTtBQUNBSCxNQUFBQSxLQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEVBQUEsQ0FGQTtBQUdBeEksTUFBQUEsT0FBQUEsRUFBQSxDQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBMEksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBUkE7QUFlQUUsSUFBQUEsSUFBQUEsRUFBQTtBQUNBSixNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FGQTtBQUdBeEksTUFBQUEsT0FBQUEsRUFBQSxDQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBMEksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBZkE7QUFzQkFHLElBQUFBLEdBQUFBLEVBQUE7QUFDQUwsTUFBQUEsS0FBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxFQUFBLENBREE7QUFFQUMsTUFBQUEsR0FBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLENBRkE7QUFHQXhJLE1BQUFBLE9BQUFBLEVBQUEsQ0FIQTtBQUlBRCxNQUFBQSxJQUFBQSxFQUFBLENBSkE7QUFLQTBJLE1BQUFBLE9BQUFBLEVBQUFBLENBQUE7QUFMQSxLQXRCQTtBQTZCQUksSUFBQUEsSUFBQUEsRUFBQTtBQUNBTixNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FGQTtBQUdBeEksTUFBQUEsT0FBQUEsRUFBQSxFQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBMEksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBN0JBO0FBb0NBSyxJQUFBQSxLQUFBQSxFQUFBO0FBQ0FQLE1BQUFBLEtBQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsR0FBQSxDQURBO0FBRUFDLE1BQUFBLEdBQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUZBO0FBR0F4SSxNQUFBQSxPQUFBQSxFQUFBLEVBSEE7QUFJQUQsTUFBQUEsSUFBQUEsRUFBQSxDQUpBO0FBS0EwSSxNQUFBQSxPQUFBQSxFQUFBQSxDQUFBO0FBTEEsS0FwQ0E7QUEyQ0FNLElBQUFBLEtBQUFBLEVBQUE7QUFDQVIsTUFBQUEsS0FBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxHQUFBLENBREE7QUFFQUMsTUFBQUEsR0FBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLENBRkE7QUFHQXhJLE1BQUFBLE9BQUFBLEVBQUEsRUFIQTtBQUlBRCxNQUFBQSxJQUFBQSxFQUFBLENBSkE7QUFLQTBJLE1BQUFBLE9BQUFBLEVBQUFBLENBQUE7QUFMQSxLQTNDQTtBQWtEQU8sSUFBQUEsS0FBQUEsRUFBQTtBQUNBVCxNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FGQTtBQUdBeEksTUFBQUEsT0FBQUEsRUFBQSxFQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUEsQ0FKQTtBQUtBMEksTUFBQUEsT0FBQUEsRUFBQUEsQ0FBQTtBQUxBLEtBbERBO0FBeURBUSxJQUFBQSxHQUFBQSxFQUFBO0FBQ0FWLE1BQUFBLEtBQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsR0FBQSxDQURBO0FBRUFDLE1BQUFBLEdBQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUZBO0FBR0F4SSxNQUFBQSxPQUFBQSxFQUFBLENBSEE7QUFJQUQsTUFBQUEsSUFBQUEsRUFBQSxDQUpBO0FBS0EwSSxNQUFBQSxPQUFBQSxFQUFBQSxDQUFBO0FBTEE7QUF6REEsR0FIQTs7QUFxRUEsV0FBQVMsT0FBQSxDQUFBQyxJQUFBLEVBQUFBO0FBQ0F2VSxTQUFBdU4sUUFBQXZOLEdBQUEsQ0FBQWdDLElBQUFBLENBQUFDLEtBQUFELENBQUFBLElBQUFBLENBQUFFLE1BQUFGLE1BQUFvSSxNQUFBQSxDQUFBK0MsS0FBQS9DLEdBQUEsR0FBQXBJLENBQUFBLElBQUEsR0FBQSxFQUFBQSxJQUFBQSxDQUFBQyxLQUFBRCxDQUFBQSxJQUFBQSxDQUFBRSxNQUFBRixNQUFBb0ksTUFBQUEsQ0FBQWdELE1BQUFoRCxHQUFBLEdBQUFwSSxDQUFBQSxJQUFBLEdBQUEsQ0FBQWhDLEVBQ0FBLEtBQUFxQyxTQUFBckMsR0FBQSxJQUFBZ0MsSUFBQUEsQ0FBQUUsTUFBQUYsRUFBQSxHQUFBLENBQUEsR0FoRkEsQ0FnRkEsR0EvRUEsQ0E4RUFoQyxFQUVBQSxLQUFBd1UsR0FBQXhVLEdBQUEsVUFBQXlVLE1BQUEsRUFBQUE7QUFDQXpVLFdBQUF5VSxNQUFBelUsR0FBQXlULE9BQUFBLENBQUFnQixNQUFBaEIsQ0FBQXpULEVBQ0FBLEtBQUFrTCxLQUFBbEwsR0FBQSxDQURBQSxFQUVBQSxLQUFBbU4sS0FBQW5OLEdBQUFtTixDQUFBbk4sS0FBQXlVLE1BQUF6VSxDQUFBNFQsR0FBQTVULENBQUEsQ0FBQUEsSUFBQUEsS0FBQXlVLE1BQUF6VSxDQUFBMlQsS0FBQTNULENBQUEsQ0FBQUEsQ0FBQW1OLElBQUFuTixLQUFBeVUsTUFBQXpVLENBQUFvTCxPQUZBcEwsRUFHQUEsS0FBQW9OLE1BQUFwTixHQUFBb04sQ0FBQXBOLEtBQUF5VSxNQUFBelUsQ0FBQTRULEdBQUE1VCxDQUFBLENBQUFBLElBQUFBLEtBQUF5VSxNQUFBelUsQ0FBQTJULEtBQUEzVCxDQUFBLENBQUFBLENBQUFBLEdBQUEsTUFBQUEsS0FBQXlVLE1BQUF6VSxDQUFBbUwsSUFBQW5MLEdBQUEsQ0FBQSxDQUFBb04sSUFBQXBOLEtBQUF5VSxNQUFBelUsQ0FBQW1MLElBSEFuTCxFQUlBQSxLQUFBMFUsU0FBQTFVLEdBQUEwVSxDQUFBLENBSkExVTtBQUlBLEtBUEFBLEVBU0FBLEtBQUF3VSxHQUFBeFUsQ0FBQXVVLElBQUF2VSxDQVRBQSxFQVVBQSxLQUFBME4sSUFBQTFOLEdBQUEsWUFBQTtBQUNBcUssTUFBQUEsR0FBQUEsQ0FBQTRFLElBQUE1RSxJQUNBQSxHQUFBQSxDQUFBNkUsU0FBQTdFLENBQUFySyxLQUFBdU4sUUFBQXZOLENBQUEsQ0FBQUEsQ0FBQXFLLEVBQUFySyxLQUFBdU4sUUFBQXZOLENBQUEsQ0FBQUEsQ0FBQXFLLENBREFBLEVBRUFBLEdBQUFBLENBQUE2RSxTQUFBN0UsQ0FBQXJLLEtBQUFtTixLQUFBbk4sR0FBQSxDQUFBcUssRUFBQXJLLEtBQUFvTixNQUFBcE4sR0FBQSxDQUFBcUssQ0FGQUEsRUExRkEsTUE2RkFySyxLQUFBcUMsU0E3RkEsSUE4RkFnSSxHQUFBQSxDQUFBc0ssS0FBQXRLLENBQUFzSyxDQUFBLENBQUF0SyxFQUFBLENBQUFBLENBSkFBO0FBTUEsVUFBQStFLE1BQUFBLEdBQUFwUCxLQUFBa0wsS0FBQWxMLEdBQUFBLEtBQUF5VSxNQUFBelUsQ0FBQW9MLE9BQUE7QUFBQSxVQUNBaUUsR0FBQUEsR0FBQXJOLElBQUFBLENBQUFDLEtBQUFELENBQUFoQyxLQUFBa0wsS0FBQWxMLEdBQUFBLEtBQUF5VSxNQUFBelUsQ0FBQW9MLE9BQUFwSixDQURBO0FBRUFxSSxNQUFBQSxHQUFBQSxDQUFBaUYsU0FBQWpGLENBQUFnSixhQUFBaEosRUFBQXJLLEtBQUFtTixLQUFBbk4sR0FBQW9QLE1BQUFwUCxHQUFBQSxLQUFBeVUsTUFBQXpVLENBQUEyVCxLQUFBM1QsQ0FBQSxDQUFBQSxDQUFBcUssRUFBQSxDQUFBckssS0FBQW9OLE1BQUFwTixHQUFBLEVBQUEsSUFBQXFQLEdBQUEsR0FBQXJQLEtBQUF5VSxNQUFBelUsQ0FBQTJULEtBQUEzVCxDQUFBLENBQUFBLENBQUFxSyxFQUFBckssS0FBQW1OLEtBQUE5QyxFQUFBckssS0FBQW9OLE1BQUEvQyxFQUFBLENBQUFBLEVBQUEsQ0FBQUEsRUFBQSxJQUFBckssS0FBQW1OLEtBQUE5QyxFQUFBLElBQUFySyxLQUFBb04sTUFBQS9DLEdBQ0FBLEdBQUFBLENBQUFrRixPQUFBbEYsRUFEQUEsRUFFQXJLLEtBQUF5VSxNQUFBelUsQ0FBQTZULE9BQUE3VCxHQUNBQSxLQUFBMFUsU0FBQTFVLElBQ0FBLEtBQUFrTCxLQUFBbEwsSUFDQUEsS0FBQWtMLEtBQUFsTCxJQUFBQSxLQUFBeVUsTUFBQXpVLENBQUFvTCxPQUFBcEwsR0FBQUEsS0FBQXlVLE1BQUF6VSxDQUFBbUwsSUFBQW5MLEtBQ0FBLEtBQUEwVSxTQUFBMVUsR0FBQTBVLENBQUExVSxLQUFBMFUsU0FBQTFVLEVBQ0FBLEtBQUFrTCxLQUFBbEwsRUFGQUEsQ0FGQUEsS0FPQUEsS0FBQWtMLEtBQUFsTCxJQUNBQSxLQUFBa0wsS0FBQWxMLEdBQUEsQ0FBQUEsS0FDQUEsS0FBQTBVLFNBQUExVSxHQUFBMFUsQ0FBQTFVLEtBQUEwVSxTQUFBMVUsRUFDQUEsS0FBQWtMLEtBQUFsTCxHQUFBLENBRkFBLENBUkFBLENBREFBLElBZUFBLEtBQUFrTCxLQUFBbEwsSUFDQUEsS0FBQWtMLEtBQUFsTCxJQUFBQSxLQUFBeVUsTUFBQXpVLENBQUFvTCxPQUFBcEwsR0FBQUEsS0FBQXlVLE1BQUF6VSxDQUFBbUwsSUFBQW5MLEtBQ0FBLEtBQUFrTCxLQUFBbEwsR0FBQSxDQURBQSxDQWhCQUEsQ0FGQXFLO0FBbUJBLEtBdENBcks7QUE0RkE7O0FBQUEsV0FBQStQLFlBQUEsR0FBQUE7QUFDQTNGLElBQUFBLE1BQUFBLENBQUErQyxLQUFBL0MsR0FBQS9GLE1BQUFBLENBQUEyTCxVQUFBNUYsRUFDQUEsTUFBQUEsQ0FBQWdELE1BQUFoRCxHQUFBL0YsTUFBQUEsQ0FBQTRMLFdBQUE1TCxJQUFBK0YsTUFBQUEsQ0FBQStDLEtBQUEvQyxJQUFBLEdBQUFBLEdBQUEsRUFBQUEsR0FBQSxHQUFBL0YsQ0FEQStGO0FBUkEvRjs7QUFBQUEsRUFBQUEsTUFBQUEsQ0FBQTZMLGdCQUFBN0wsQ0FBQSxRQUFBQSxFQUFBMEwsWUFBQTFMLEVBQUEwTCxDQUFBLENBQUExTCxHQUVBMEwsWUFBQUEsRUFGQTFMLEVBVEF5SSxNQUFBQSxDQUFBQyxJQUFBRCxDQUFBMkcsT0FBQTNHLEVBQUFqSyxPQUFBaUssQ0FBQSxVQUFBMkgsTUFBQSxFQUFBQTtBQUNBbEIsSUFBQUEsUUFBQUEsQ0FBQXZSLElBQUFBLENBQUFpTCxLQUFBakwsQ0FBQSxNQUFBQSxJQUFBQSxDQUFBRSxNQUFBRixFQUFBQSxDQUFBdVIsQ0FBQUEsR0FBQSxJQUFBZSxPQUFBLENBQUFHLE1BQUEsQ0FBQWxCO0FBQUFrQixHQURBM0gsQ0FTQXpJO0FBY0EsTUFBQXVRLEtBQUFBLEdBQUEsSUF2REEsWUFBQTtBQUNBNVUsU0FBQXVOLFFBQUF2TixHQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQUEsRUFDQUEsS0FBQXlVLE1BQUF6VSxHQUFBO0FBQ0EyVCxNQUFBQSxLQUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FEQTtBQUVBQyxNQUFBQSxHQUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEdBQUEsQ0FGQTtBQUdBeEksTUFBQUEsT0FBQUEsRUFBQSxDQUhBO0FBSUFELE1BQUFBLElBQUFBLEVBQUE7QUFKQSxLQURBbkwsRUFPQUEsS0FBQW1OLEtBQUFuTixHQUFBbU4sQ0FBQW5OLEtBQUF5VSxNQUFBelUsQ0FBQTRULEdBQUE1VCxDQUFBLENBQUFBLElBQUFBLEtBQUF5VSxNQUFBelUsQ0FBQTJULEtBQUEzVCxDQUFBLENBQUFBLENBQUFtTixJQUFBbk4sS0FBQXlVLE1BQUF6VSxDQUFBb0wsT0FQQXBMLEVBUUFBLEtBQUFvTixNQUFBcE4sR0FBQW9OLENBQUFwTixLQUFBeVUsTUFBQXpVLENBQUE0VCxHQUFBNVQsQ0FBQSxDQUFBQSxJQUFBQSxLQUFBeVUsTUFBQXpVLENBQUEyVCxLQUFBM1QsQ0FBQSxDQUFBQSxDQUFBb04sSUFBQXBOLEtBQUF5VSxNQUFBelUsQ0FBQW1MLElBUkFuTCxFQVNBQSxLQUFBa0wsS0FBQWxMLEdBQUEsQ0FUQUEsRUFVQUEsS0FBQTZVLElBQUE3VSxHQUFBLFlBQUE7QUFJQSxVQUFBb1AsTUFBQSxFQUFBQyxHQUFBO0FBSEFoRixNQUFBQSxHQUFBQSxDQUFBNEUsSUFBQTVFLElBQ0FBLEdBQUFBLENBQUE2RSxTQUFBN0UsQ0FBQXJLLEtBQUF1TixRQUFBdk4sQ0FBQSxDQUFBQSxDQUFBcUssRUFBQXJLLEtBQUF1TixRQUFBdk4sQ0FBQSxDQUFBQSxDQUFBcUssQ0FEQUEsRUFFQUEsR0FBQUEsQ0FBQTZFLFNBQUE3RSxDQUFBckssS0FBQW1OLEtBQUFuTixHQUFBLENBQUFxSyxFQUFBckssS0FBQW9OLE1BQUFwTixHQUFBLENBQUFxSyxDQUZBQSxFQUlBbUosT0FBQUEsSUFDQXBFLE1BQUFBLEdBQUFwUCxLQUFBa0wsS0FBQWxMLEdBQUFBLEtBQUF5VSxNQUFBelUsQ0FBQW9MLE9BQUFnRSxFQUNBQyxHQUFBQSxHQUFBck4sSUFBQUEsQ0FBQUMsS0FBQUQsQ0FBQWhDLEtBQUFrTCxLQUFBbEwsR0FBQUEsS0FBQXlVLE1BQUF6VSxDQUFBb0wsT0FBQXBKLENBREFvTixFQUVBcFAsS0FBQWtMLEtBQUFsTCxHQUFBLENBQUFBLElBQ0FBLEtBQUFrTCxLQUFBbEwsRUFKQXdULEtBT0FwRSxNQUFBQSxHQUFBLENBQUFBLEVBQ0FDLEdBQUFBLEdBQUEsQ0FSQW1FLENBSkFuSixFQWNBQSxHQUFBQSxDQUFBaUYsU0FBQWpGLENBQUFpSixVQUFBakosRUFBQXJLLEtBQUFtTixLQUFBbk4sR0FBQW9QLE1BQUFwUCxHQUFBQSxLQUFBeVUsTUFBQXpVLENBQUEyVCxLQUFBM1QsQ0FBQSxDQUFBQSxDQUFBcUssRUFBQXJLLEtBQUFvTixNQUFBcE4sR0FBQXFQLEdBQUFyUCxHQUFBQSxLQUFBeVUsTUFBQXpVLENBQUEyVCxLQUFBM1QsQ0FBQSxDQUFBQSxDQUFBQSxHQUFBLENBQUFxSyxFQUFBckssS0FBQW1OLEtBQUE5QyxFQUFBckssS0FBQW9OLE1BQUEvQyxFQUFBLENBQUFBLEVBQUEsQ0FBQUEsRUFBQSxJQUFBckssS0FBQW1OLEtBQUE5QyxFQUFBLElBQUFySyxLQUFBb04sTUFBQS9DLENBZEFBLEVBZUFBLEdBQUFBLENBQUFrRixPQUFBbEYsRUFmQUE7QUFlQWtGLEtBMUJBdlA7QUEwQkF1UCxHQTRCQSxFQUFBO0FBNUJBQSxHQStCQSxTQUFBZSxJQUFBLEdBQUFBO0FBRUEsUUFEQWpHLEdBQUFBLENBQUFrRyxTQUFBbEcsQ0FBQSxDQUFBQSxFQUFBLENBQUFBLEVBQUFELE1BQUFBLENBQUErQyxLQUFBOUMsRUFBQUQsTUFBQUEsQ0FBQWdELE1BQUEvQyxHQUNBbUosT0FBQSxFQVNBLEtBQUEsSUFBQXZTLENBQUEsSUFBQXNTLFFBQUEsRUFDQUEsUUFBQUEsQ0FBQXRTLENBQUFzUyxDQUFBQSxDQUFBN0YsSUFBQTZGLEdBVkEsS0FDQWxKLEdBQUFBLENBQUFzRCxTQUFBdEQsSUFDQUEsR0FBQUEsQ0FBQUUsSUFBQUYsR0FBQSxjQURBQSxFQUVBQSxHQUFBQSxDQUFBMEQsU0FBQTFELEdBQUEsSUFGQUEsRUFHQUEsR0FBQUEsQ0FBQXlELFdBQUF6RCxHQUFBLE1BSEFBLEVBSUFBLEdBQUFBLENBQUF5SyxJQUFBekssQ0FBQSxFQUFBQSxFQUFBRCxNQUFBQSxDQUFBZ0QsTUFBQWhELEdBQUEsRUFBQUMsRUFBQUEsR0FBQUEsQ0FBQXdHLFdBQUF4RyxDQUFBLE9BQUFBLEVBQUE4QyxLQUFBOUMsR0FBQSxFQUFBQSxFQUFBQSxHQUFBQSxDQUFBd0csV0FBQXhHLENBQUEsT0FBQUEsRUFBQStDLE1BQUEvQyxHQUFBRCxNQUFBQSxDQUFBZ0QsTUFBQS9DLEdBQUEsRUFBQUEsQ0FKQUEsRUFLQUEsR0FBQUEsQ0FBQTRELElBQUE1RCxFQUxBQSxFQU1BQSxHQUFBQSxDQUFBdUcsUUFBQXZHLENBQUEsT0FBQUEsRUFBQSxFQUFBQSxFQUFBRCxNQUFBQSxDQUFBZ0QsTUFBQWhELEdBQUEsRUFBQUMsQ0FOQUE7QUFZQXVLLElBQUFBLEtBQUFBLENBQUFDLElBQUFELElBQ0FwQixPQUFBQSxHQUFBQSxDQUFBLENBREFvQixFQUVBMU4sVUFBQUEsQ0FBQSxZQUFBO0FBQ0FvSixNQUFBQSxJQUFBQTtBQUFBQSxLQURBcEosRUFFQSxHQUZBQSxDQUZBME47QUFqQkF0RSxHQUVBLEVBL0JBZjtBQTZCQWUsQ0FyTEEsQ0FEQXZOLENWT0FBLEVXUEFBLE9BQUFBLENBQUFDLE1BQUFELENBQUEsS0FBQUEsRUFDQVksVUFEQVosQ0FDQSxXQURBQSxFQUNBLENBQUEsUUFBQSxFQUFBLFdBQUEsRUFBQSxlQUFBLEVBQUEsVUFBQTZDLE1BQUEsRUFBQUMsU0FBQSxFQUFBa1AsYUFBQSxFQUFBQTtBQUVBblAsRUFBQUEsTUFBQUEsQ0FBQW9QLFlBQUFwUCxHQUFBb1AsQ0FBQSxDQUFBcFAsRUFFQUEsTUFBQUEsQ0FBQTJPLElBQUEzTyxHQUFBLFlBQUE7QUFDQW1QLElBQUFBLGFBQUFBLENBQUFFLGFBQUFGLEdBQ0E5TCxJQURBOEwsQ0FDQSxVQUFBN0wsUUFBQSxFQUFBQTtBQUdBLFdBQUEsSUFBQWpJLENBQUEsSUFGQTJFLE1BQUFBLENBQUFzUCxVQUFBdFAsR0FBQXNELFFBQUFBLENBQUE5RCxJQUFBUSxFQUNBQSxNQUFBQSxDQUFBdVAsS0FBQXZQLEdBQUEsRUFEQUEsRUFFQUEsTUFBQUEsQ0FBQXNQLFVBQUEsRUFDQSxLQUFBLElBQUFFLENBQUEsSUFBQXhQLE1BQUFBLENBQUFzUCxVQUFBdFAsQ0FBQTNFLENBQUEyRSxFQUFBdVAsS0FBQSxFQUNBdlAsTUFBQUEsQ0FBQXVQLEtBQUF2UCxDQUFBcEQsSUFBQW9ELENBQUE7QUFDQStMLFFBQUFBLFFBQUFBLEVBQUEvTCxNQUFBQSxDQUFBc1AsVUFBQXRQLENBQUEzRSxDQUFBMkUsRUFBQW1ELElBREE7QUFFQXNNLFFBQUFBLElBQUFBLEVBQUF6UCxNQUFBQSxDQUFBc1AsVUFBQXRQLENBQUEzRSxDQUFBMkUsRUFBQXVQLEtBQUF2UCxDQUFBd1AsQ0FBQXhQLEVBQUFtRDtBQUZBLE9BQUFuRDtBQUVBbUQsS0FSQWdNO0FBUUFoTSxHQVhBbkQsRUFrQkFBLE1BQUFBLENBQUEwUCxjQUFBMVAsR0FBQSxVQUFBK0wsUUFBQSxFQUFBQTtBQUlBLFNBQUEsSUFBQTFRLENBQUEsSUFIQTJFLE1BQUFBLENBQUEyUCxnQkFBQTNQLEdBQUErTCxRQUFBL0wsRUFDQUEsTUFBQUEsQ0FBQTRQLGFBQUE1UCxHQUFBLEVBREFBLEVBRUFBLE1BQUFBLENBQUE2UCxlQUFBN1AsR0FBQSxFQUZBQSxFQUdBQSxNQUFBQSxDQUFBMlAsZ0JBQUEzUCxDQUFBdVAsS0FBQSxFQUNBdlAsTUFBQUEsQ0FBQTZQLGVBQUE3UCxDQUFBcEQsSUFBQW9ELENBQUFBLE1BQUFBLENBQUEyUCxnQkFBQTNQLENBQUF1UCxLQUFBdlAsQ0FBQTNFLENBQUEyRSxDQUFBQTs7QUFFQUEsSUFBQUEsTUFBQUEsQ0FBQW9QLFlBQUFwUCxHQUFBb1AsQ0FBQSxDQUFBcFAsRUFDQUEsTUFBQUEsQ0FBQThQLGVBQUE5UCxHQUFBLEVBREFBO0FBQ0EsR0ExQkFBLEVBNkJBQSxNQUFBQSxDQUFBK1AsV0FBQS9QLEdBQUEsVUFBQStMLFFBQUEsRUFBQUE7QUFFQSxTQURBLElBQUFpRSxLQUFBQSxHQUFBQSxDQUFBLENBQUEsRUFDQTNVLENBQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBQSxHQUFBMkUsTUFBQUEsQ0FBQXNQLFVBQUF0UCxDQUFBMUUsTUFBQSxFQUFBRCxDQUFBQSxFQUFBLEVBQ0EyRSxNQUFBQSxDQUFBc1AsVUFBQXRQLENBQUEzRSxDQUFBMkUsRUFBQW1ELElBQUFuRCxLQUFBK0wsUUFBQS9MLEtBQ0FBLE1BQUFBLENBQUEwUCxjQUFBMVAsQ0FBQUEsTUFBQUEsQ0FBQXNQLFVBQUF0UCxDQUFBM0UsQ0FBQTJFLENBQUFBLEdBQ0FnUSxLQUFBQSxHQUFBQSxDQUFBLENBRkFoUTs7QUFLQWdRLElBQUFBLEtBQUFBLElBQ0FiLGFBQUFBLENBQUFjLFdBQUFkLENBQUE7QUFDQXBELE1BQUFBO0FBREEsS0FBQW9ELEVBRUE5TCxJQUZBOEwsQ0FFQSxVQUFBcEQsUUFBQSxFQUFBQTtBQUNBL0wsTUFBQUEsTUFBQUEsQ0FBQTJPLElBQUEzTyxJQUNBQSxNQUFBQSxDQUFBMFAsY0FBQTFQLENBQUErTCxRQUFBL0wsQ0FEQUE7QUFDQStMLEtBSkFvRCxDQURBYSxFQVFBaFEsTUFBQUEsQ0FBQThQLGVBQUE5UCxHQUFBLEVBUkFnUTtBQVFBLEdBN0NBaFEsRUFnREFBLE1BQUFBLENBQUFrUSxPQUFBbFEsR0FBQSxVQUFBeVAsSUFBQSxFQUFBQTtBQUNBLFFBQUFPLEtBQUFBLEdBQUFBLENBQUEsQ0FBQTs7QUFDQSxTQUFBLElBQUEzVSxDQUFBLElBQUEyRSxNQUFBQSxDQUFBMlAsZ0JBQUEzUCxDQUFBdVAsS0FBQSxFQUNBdlAsTUFBQUEsQ0FBQTJQLGdCQUFBM1AsQ0FBQXVQLEtBQUF2UCxDQUFBM0UsQ0FBQTJFLEVBQUFtRCxJQUFBbkQsS0FBQXlQLElBQUF6UCxLQUNBZ1EsS0FBQUEsR0FBQUEsQ0FBQSxDQUFBQSxFQUNBaFEsTUFBQUEsQ0FBQW1RLFVBQUFuUSxDQUFBQSxNQUFBQSxDQUFBMlAsZ0JBQUEzUCxDQUFBdVAsS0FBQXZQLENBQUEzRSxDQUFBMkUsQ0FBQUEsQ0FGQUE7O0FBS0FnUSxJQUFBQSxLQUFBQSxJQUNBYixhQUFBQSxDQUFBaUIsT0FBQWpCLENBQUFuUCxNQUFBQSxDQUFBMlAsZ0JBQUEzUCxDQUFBbUQsSUFBQWdNLEVBQUE7QUFDQU0sTUFBQUE7QUFEQSxLQUFBTixFQUVBOUwsSUFGQThMLENBRUEsWUFBQTtBQUNBblAsTUFBQUEsTUFBQUEsQ0FBQTJQLGdCQUFBM1AsQ0FBQXVQLEtBQUF2UCxDQUFBcEQsSUFBQW9ELENBQUE7QUFBQW1ELFFBQUFBLElBQUFBLEVBQUFzTTtBQUFBLE9BQUF6UCxHQUNBQSxNQUFBQSxDQUFBb1EsT0FBQXBRLENBQUFBLE1BQUFBLENBQUE0UCxhQUFBNVAsRUFBQUEsTUFBQUEsQ0FBQTJQLGdCQUFBM1AsQ0FBQXVQLEtBQUF2UCxDQUFBQSxNQUFBQSxDQUFBMlAsZ0JBQUEzUCxDQUFBdVAsS0FBQXZQLENBQUExRSxNQUFBMEUsR0FBQSxDQUFBQSxDQUFBQSxDQURBQTtBQUNBLEtBSkFtUCxDQURBYSxFQVFBaFEsTUFBQUEsQ0FBQXFRLFdBQUFyUSxHQUFBLEVBUkFnUTtBQVFBLEdBaEVBaFEsRUFtRUFBLE1BQUFBLENBQUFtUSxVQUFBblEsR0FBQSxVQUFBeVAsSUFBQSxFQUFBQTtBQUNBelAsSUFBQUEsTUFBQUEsQ0FBQW9RLE9BQUFwUSxDQUFBQSxNQUFBQSxDQUFBNFAsYUFBQTVQLEVBQUF5UCxJQUFBelAsR0FDQUEsTUFBQUEsQ0FBQXNRLFVBQUF0USxDQUFBQSxNQUFBQSxDQUFBNlAsZUFBQTdQLEVBQUF5UCxJQUFBelAsQ0FEQUEsRUFFQUEsTUFBQUEsQ0FBQXFRLFdBQUFyUSxHQUFBLEVBRkFBO0FBRUEsR0F0RUFBLEVBeUVBQSxNQUFBQSxDQUFBdVEsWUFBQXZRLEdBQUEsVUFBQXlQLElBQUEsRUFBQUE7QUFDQXpQLElBQUFBLE1BQUFBLENBQUFvUSxPQUFBcFEsQ0FBQUEsTUFBQUEsQ0FBQTZQLGVBQUE3UCxFQUFBeVAsSUFBQXpQLEdBQ0FBLE1BQUFBLENBQUFzUSxVQUFBdFEsQ0FBQUEsTUFBQUEsQ0FBQTRQLGFBQUE1UCxFQUFBeVAsSUFBQXpQLENBREFBO0FBQ0F5UCxHQTNFQXpQLEVBOEVBQSxNQUFBQSxDQUFBb1EsT0FBQXBRLEdBQUEsVUFBQXdRLFFBQUEsRUFBQWYsSUFBQSxFQUFBQTtBQUNBZSxJQUFBQSxRQUFBQSxDQUFBNVQsSUFBQTRULENBQUFmLElBQUFlO0FBQUFmLEdBL0VBelAsRUFrRkFBLE1BQUFBLENBQUFzUSxVQUFBdFEsR0FBQSxVQUFBd1EsUUFBQSxFQUFBZixJQUFBLEVBQUFBO0FBQ0FlLElBQUFBLFFBQUFBLENBQUFDLE1BQUFELENBQUFBLFFBQUFBLENBQUFFLE9BQUFGLENBQUFmLElBQUFlLENBQUFBLEVBQUEsQ0FBQUE7QUFBQSxHQW5GQXhRLEVBc0ZBQSxNQUFBQSxDQUFBMlEsaUJBQUEzUSxHQUFBLFlBQUE7QUFDQW1QLElBQUFBLGFBQUFBLENBQUF5QixlQUFBekIsQ0FBQW5QLE1BQUFBLENBQUE0UCxhQUFBVCxHQUNBbFAsU0FBQUEsQ0FBQTRRLElBQUE1USxDQUFBLGFBQUFBLENBREFrUDtBQUNBLEdBeEZBblAsRUEyRkFBLE1BQUFBLENBQUE4USxZQUFBOVEsR0FBQSxZQUFBO0FBQ0EsUUFBQSxDQUFBQSxNQUFBQSxDQUFBNFAsYUFBQSxFQUFBLE9BQUEsRUFBQTs7QUFFQSxTQURBLElBQUFtQixPQUFBQSxHQUFBLENBQUEsRUFDQTFWLENBQUFBLEdBQUEyRSxNQUFBQSxDQUFBNFAsYUFBQTVQLENBQUExRSxNQUFBMEUsR0FBQSxDQUFBLEVBQUEzRSxDQUFBQSxHQUFBLENBQUEsRUFBQUEsQ0FBQUEsRUFBQSxFQUNBMFYsT0FBQUEsSUFBQTFWLENBQUEwVjs7QUFFQSxXQUFBQSxPQUFBO0FBQUFBLEdBakdBL1E7QUFpR0ErUSxDQW5HQSxDQURBNVQsQ1hPQUEsRVlQQUEsT0FBQUEsQ0FBQUMsTUFBQUQsQ0FBQSxLQUFBQSxFQUNBWSxVQURBWixDQUNBLFdBREFBLEVBQ0EsQ0FBQSxRQUFBLEVBQUEsV0FBQSxFQUFBLFNBQUEsRUFBQSxVQUFBNkMsTUFBQSxFQUFBQyxTQUFBLEVBQUFFLE9BQUEsRUFBQUE7QUFHQSxNQUFBNlEsRUFBQUEsR0FBQSxJQUFBQyxVQUFBQSxDQUFBcE4sSUFBQW9OLENBQUFDLE1BQUEsQ0FBQXROLFFBQUFBLENBQUFDLElBQUFELEVBQUEsQ0FBQTs7QUFPQSxXQUFBdU4sT0FBQSxHQUFBQTtBQUNBSCxJQUFBQSxFQUFBQSxDQUFBakQsS0FBQWlELENBQUEsNEJBQUFBLEVBQUE7QUFFQUksTUFBQUEsU0FBQUEsRUFBQTtBQUNBQyxRQUFBQSxhQUFBQSxFQUFBLFVBQUE1USxXQUFBLEVBQUE2USxVQUFBLEVBQUFDLFdBQUEsRUFBQUE7QUF3QkEsaUJBdEJBM04sUUFBQUEsQ0FBQUMsSUFBQUQsR0FBQW5ELFdBQUFtRCxDQUFBNE4sVUFBQTVOLENBQUE0TixDQUFBLENBQUE1TixFQUFBUCxJQUFBTyxDQUFBLFVBQUE2TixPQUFBLEVBQUFBO0FBQ0F0UixZQUFBQSxPQUFBQSxDQUFBdVIsWUFBQXZSLENBQUE7QUFDQXdSLGNBQUFBLFdBQUFBLEVBQUFsUixXQUFBQSxDQUFBa1IsV0FEQTtBQUVBdEYsY0FBQUEsS0FBQUEsRUFBQTVMLFdBQUFBLENBQUE0TCxLQUZBO0FBR0F1RixjQUFBQSxRQUFBQSxFQUFBblIsV0FBQUEsQ0FBQW1SLFFBSEE7QUFJQUMsY0FBQUEsYUFBQUEsRUFBQXBSLFdBQUFBLENBQUFvUixhQUpBO0FBS0FKLGNBQUFBO0FBTEEsYUFBQXRSLEVBT0FrRCxJQVBBbEQsQ0FPQSxVQUFBbUQsUUFBQSxFQUFBQTtBQUNBdEQsY0FBQUEsTUFBQUEsQ0FBQThSLEtBQUE5UixDQUFBLE9BQUFBLEVBQUFzRCxRQUFBQSxDQUFBOUQsSUFBQVEsR0FDQVUsQ0FBQUEsQ0FBQSxjQUFBQSxDQUFBQSxDQUFBcVIsS0FBQXJSLENBQUEsTUFBQUEsQ0FEQVY7QUFDQSxhQVRBRyxFQVdBLFlBQUE7QUFDQUgsY0FBQUEsTUFBQUEsQ0FBQThSLEtBQUE5UixDQUFBLE9BQUFBLEVBQUE7QUFDQXdNLGdCQUFBQSxPQUFBQSxFQUFBLGNBREE7QUFFQXdGLGdCQUFBQSxJQUFBQSxFQUFBO0FBRkEsZUFBQWhTO0FBRUEsYUFkQUc7QUFjQSxXQWZBeUQsRUFtQkFJLEtBbkJBSixDQW1CQSxVQUFBSyxLQUFBLEVBQUFBLENBQUFBLENBbkJBTCxHQW1CQUssQ0FHQSxDQUFBO0FBQUEsU0F6QkE7QUE4QkFnTyxRQUFBQSxhQUFBQSxFQUFBLFVBQUFoTyxLQUFBLEVBQUFBO0FBR0EsY0FBQSxpREFBQUEsS0FBQUEsQ0FBQThJLElBQUEsRUFDQSxPQUFBbUYsT0FBQUEsQ0FBQUMsT0FBQUQsRUFBQTtBQUdBLGNBQUFFLElBQUFBLEdBQUFuTyxLQUFBQSxDQUFBcU4sVUFBQTtBQUtBLGlCQUFBMU4sUUFBQUEsQ0FBQUMsSUFBQUQsR0FBQXlPLG9CQUFBek8sQ0FBQXdPLElBQUF4TyxDQUFBO0FBQUF3TyxTQTFDQTtBQTRDQUUsUUFBQUEsT0FBQUEsRUFBQSxZQUFBO0FBR0F4UCxVQUFBQSxRQUFBQSxDQUFBQyxjQUFBRCxDQUFBLFFBQUFBLEVBQUF5UCxLQUFBelAsQ0FBQTBQLE9BQUExUCxHQUFBLE1BQUFBO0FBQUE7QUEvQ0EsT0FGQTtBQW9EQTJQLE1BQUFBLGdCQUFBQSxFQUFBLE9BcERBO0FBcURBQyxNQUFBQSxhQUFBQSxFQUFBLENBRUE5TyxRQUFBQSxDQUFBQyxJQUFBRCxDQUFBK08sa0JBQUEvTyxDQUFBZ1AsV0FGQSxFQUdBaFAsUUFBQUEsQ0FBQUMsSUFBQUQsQ0FBQWlQLG9CQUFBalAsQ0FBQWdQLFdBSEEsQ0FyREE7QUE0REFFLE1BQUFBLFVBQUFBLEVBQUE7QUE1REEsS0FBQTlCO0FBTkFoUjs7QUFBQUEsRUFBQUEsTUFBQUEsQ0FBQXVELEdBQUF2RCxDQUFBLFFBQUFBLEVBQUEsVUFBQStTLEtBQUEsRUFBQUE7QUFDQS9CLElBQUFBLEVBQUFBLENBQUFnQyxLQUFBaEMsSUFDQUcsT0FBQUEsRUFEQUg7QUFDQUcsR0FGQW5SLEdBdUVBbVIsT0FBQUEsRUF2RUFuUjtBQXVFQW1SLENBNUVBLENBREFoVSxDWk9BQSxFYVBBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsV0FEQUEsRUFDQSxDQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFBLFVBQUE2QyxNQUFBLEVBQUFpVCxPQUFBLEVBQUFDLFFBQUEsRUFBQUE7QUFFQWxULEVBQUFBLE1BQUFBLENBQUFtVCxPQUFBblQsR0FBQSxZQUFBO0FBQ0FBLElBQUFBLE1BQUFBLENBQUFvVCxRQUFBcFQsSUFDQWtULFFBQUFBLENBQUFHLE1BQUFILENBQUE7QUFDQUksTUFBQUEsSUFBQUEsRUFBQXRULE1BQUFBLENBQUFvVDtBQURBLEtBQUFGLEVBRUE3UCxJQUZBNlAsQ0FFQSxVQUFBSyxJQUFBLEVBQUFBO0FBQ0F2VCxNQUFBQSxNQUFBQSxDQUFBb1QsUUFBQXBULEdBQUEsSUFBQUE7QUFBQSxLQUhBa1QsQ0FEQWxUO0FBSUEsR0FMQUEsRUFVQWtULFFBQUFBLENBQUFNLEtBQUFOLEdBQ0E3UCxJQURBNlAsQ0FDQSxVQUFBNVAsUUFBQSxFQUFBQTtBQUNBdEQsSUFBQUEsTUFBQUEsQ0FBQXlULEtBQUF6VCxHQUFBc0QsUUFBQUEsQ0FBQTlELElBQUFRO0FBQUFSLEdBRkEwVCxDQVZBbFQsRUFlQUEsTUFBQUEsQ0FBQXVELEdBQUF2RCxDQUFBLGFBQUFBLEVBQUEsVUFBQXdELENBQUEsRUFBQStQLElBQUEsRUFBQUE7QUFDQXZULElBQUFBLE1BQUFBLENBQUErRyxNQUFBL0csQ0FBQSxZQUFBO0FBQ0FrVCxNQUFBQSxRQUFBQSxDQUFBUSxPQUFBUixDQUFBSyxJQUFBTCxFQUNBN1AsSUFEQTZQLENBQ0EsVUFBQTVQLFFBQUEsRUFBQUE7QUFDQXRELFFBQUFBLE1BQUFBLENBQUF5VCxLQUFBelQsQ0FBQTJULE9BQUEzVCxDQUFBc0QsUUFBQUEsQ0FBQTlELElBQUFRO0FBQUFSLE9BRkEwVDtBQUVBMVQsS0FIQVE7QUFHQVIsR0FKQVEsQ0FmQUE7QUFtQkFSLENBckJBLENBREFyQyxDYk9BQSxFY1BBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsZ0JBREFBLEVBQ0EsQ0FBQSxRQUFBLEVBQUEsV0FBQSxFQUFBLGVBQUEsRUFBQSxVQUFBNkMsTUFBQSxFQUFBQyxTQUFBLEVBQUFrUCxhQUFBLEVBQUFBO0FBRUFuUCxFQUFBQSxNQUFBQSxDQUFBNFQsWUFBQTVULEdBQUFtUCxhQUFBQSxDQUFBMEUsZUFBQTFFLEVBQUFuUCxFQUVBQSxNQUFBQSxDQUFBNFQsWUFBQTVULElBR0FBLE1BQUFBLENBQUE4VCxnQkFBQTlULEdBQUEsQ0FBQUEsRUFDQUEsTUFBQUEsQ0FBQStULGVBQUEvVCxHQUFBLENBREFBLEVBRUFBLE1BQUFBLENBQUFnVSxJQUFBaFUsR0FBQWdVLENBQUEsQ0FMQWhVLElBQ0FDLFNBQUFBLENBQUE0USxJQUFBNVEsQ0FBQSxRQUFBQSxDQUhBRCxFQVVBQSxNQUFBQSxDQUFBaVUsVUFBQWpVLEdBQUEsVUFBQWtVLE1BQUEsRUFBQUE7QUFDQSxTQUFBLElBQUE3WSxDQUFBLElBQUEyRSxNQUFBQSxDQUFBNFQsWUFBQSxFQUNBNVQsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUFBM0UsQ0FBQTJFLEVBQUFvSCxFQUFBcEgsS0FBQUEsTUFBQUEsQ0FBQThULGdCQUFBOVQsS0FDQUEsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUFBM0UsQ0FBQTJFLEVBQUFrVSxNQUFBbFUsR0FBQSxNQUFBa1UsTUFBQSxHQUFBbFUsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUFBM0UsQ0FBQTJFLEVBQUFtVSxXQUFBLEdBQUFuVSxNQUFBQSxDQUFBNFQsWUFBQTVULENBQUEzRSxDQUFBMkUsRUFBQW9VLFlBREFwVTs7QUFJQUEsSUFBQUEsTUFBQUEsQ0FBQThULGdCQUFBOVQsS0FBQUEsTUFBQUEsQ0FBQStULGVBQUEvVCxLQUNBQSxNQUFBQSxDQUFBK1QsZUFBQS9ULEdBQUFBLE1BQUFBLENBQUErVCxlQUFBL1QsS0FBQUEsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUFBMUUsTUFBQTBFLEdBQUEsQ0FBQUEsR0FBQUEsTUFBQUEsQ0FBQStULGVBQUEvVCxHQUFBLENBREFBLEdBR0FBLE1BQUFBLENBQUE4VCxnQkFBQTlULEdBQUFBLE1BQUFBLENBQUErVCxlQUhBL1Q7QUFJQSxRQUFBZ1EsS0FBQUEsR0FBQUEsQ0FBQSxDQUFBOztBQUNBLFNBQUEzVSxDQUFBLElBQUEyRSxNQUFBQSxDQUFBNFQsWUFBQSxFQUNBLElBQUEsT0FBQTVULE1BQUFBLENBQUE0VCxZQUFBNVQsQ0FBQTNFLENBQUEyRSxFQUFBa1UsTUFBQSxFQUFBO0FBQ0FsRSxNQUFBQSxLQUFBQSxHQUFBQSxDQUFBLENBQUFBO0FBQ0E7QUFHQUE7O0FBQUFBLElBQUFBLEtBQUFBLEtBQ0F0UCxDQUFBQSxDQUFBLG9CQUFBQSxDQUFBQSxDQUFBVyxJQUFBWCxDQUFBLEdBQUFBLEdBQ0FWLE1BQUFBLENBQUFnVSxJQUFBaFUsR0FBQWdVLENBQUEsQ0FGQWhFLENBQUFBO0FBRUEsR0E3QkFoUSxFQWlDQUEsTUFBQUEsQ0FBQXFVLGNBQUFyVSxHQUFBLFVBQUFrVSxNQUFBLEVBQUFBO0FBQ0EsUUFBQSxDQUFBbFUsTUFBQUEsQ0FBQTRULFlBQUEsRUFDQSxPQUFBLEVBQUE7O0FBRUEsU0FBQSxJQUFBdlksQ0FBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUFBLEdBQUEyRSxNQUFBQSxDQUFBNFQsWUFBQTVULENBQUExRSxNQUFBLEVBQUFELENBQUFBLEVBQUEsRUFDQSxJQUFBMkUsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUFBM0UsQ0FBQTJFLEVBQUFvSCxFQUFBcEgsS0FBQUEsTUFBQUEsQ0FBQThULGdCQUFBLEVBQ0EsT0FBQSxNQUFBSSxNQUFBLEdBQUFsVSxNQUFBQSxDQUFBNFQsWUFBQTVULENBQUEzRSxDQUFBMkUsRUFBQW1VLFdBQUEsR0FBQW5VLE1BQUFBLENBQUE0VCxZQUFBNVQsQ0FBQTNFLENBQUEyRSxFQUFBb1UsWUFBQTtBQUFBQSxHQXZDQXBVLEVBNENBQSxNQUFBQSxDQUFBc1UsY0FBQXRVLEdBQUEsVUFBQXVVLFFBQUEsRUFBQUE7QUFDQXZVLElBQUFBLE1BQUFBLENBQUE4VCxnQkFBQTlULEdBQUF1VSxRQUFBdlU7QUFBQXVVLEdBN0NBdlUsRUFnREFBLE1BQUFBLENBQUF3VSx1QkFBQXhVLEdBQUEsWUFBQTtBQUNBLFdBQUFBLE1BQUFBLENBQUE0VCxZQUFBNVQsR0FHQUEsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUNBbkQsSUFEQW1ELENBQ0EsVUFBQWxELENBQUEsRUFBQUMsQ0FBQSxFQUFBQTtBQUFBLGFBQUFELENBQUFBLENBQUFzSyxFQUFBdEssR0FBQUMsQ0FBQUEsQ0FBQXFLLEVBQUE7QUFBQUEsS0FEQXBILEVBRUF5QixNQUZBekIsQ0FFQSxVQUFBdVUsUUFBQSxFQUFBQTtBQUFBLGFBQUEsT0FBQUEsUUFBQUEsQ0FBQUwsTUFBQSxJQUFBSyxRQUFBQSxDQUFBbk4sRUFBQW1OLEtBQUF2VSxNQUFBQSxDQUFBK1QsZUFBQTtBQUFBQSxLQUZBL1QsQ0FIQUEsR0FDQSxFQURBO0FBQ0EsR0FsREFBLEVBeURBQSxNQUFBQSxDQUFBeVUsY0FBQXpVLEdBQUEsWUFBQTtBQUNBLFFBQUEsQ0FBQUEsTUFBQUEsQ0FBQTRULFlBQUEsRUFDQSxPQUFBLEVBQUE7QUFFQSxRQUFBYyxXQUFBQSxHQUFBLENBQUE7O0FBQ0EsU0FBQSxJQUFBclosQ0FBQSxJQUFBMkUsTUFBQUEsQ0FBQTRULFlBQUEsRUFDQSxPQUFBNVQsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUFBM0UsQ0FBQTJFLEVBQUFrVSxNQUFBLElBQ0FRLFdBQUFBLEVBREE7O0FBSUEsV0FBQUEsV0FBQTtBQUFBQSxHQW5FQTFVLEVBc0VBQSxNQUFBQSxDQUFBMlUsY0FBQTNVLEdBQUEsVUFBQWtVLE1BQUEsRUFBQUE7QUFDQSxRQUFBLENBQUFsVSxNQUFBQSxDQUFBNFQsWUFBQSxFQUNBLE9BQUEsRUFBQTs7QUFFQSxTQUFBLElBQUF2WSxDQUFBLElBQUEyRSxNQUFBQSxDQUFBNFQsWUFBQSxFQUNBLElBQUE1VCxNQUFBQSxDQUFBNFQsWUFBQTVULENBQUEzRSxDQUFBMkUsRUFBQW9ILEVBQUFwSCxLQUFBQSxNQUFBQSxDQUFBOFQsZ0JBQUEsRUFDQSxPQUFBLE9BQUE5VCxNQUFBQSxDQUFBNFQsWUFBQTVULENBQUEzRSxDQUFBMkUsRUFBQWtVLE1BQUEsR0FDQSxhQURBLEdBR0EsTUFBQUEsTUFBQSxHQUNBbFUsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUFBM0UsQ0FBQTJFLEVBQUFtVSxXQUFBblUsS0FBQUEsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUFBM0UsQ0FBQTJFLEVBQUFrVSxNQUFBbFUsR0FBQSxhQUFBQSxHQUFBLFlBREEsR0FHQUEsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUFBM0UsQ0FBQTJFLEVBQUFvVSxZQUFBcFUsS0FBQUEsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUFBM0UsQ0FBQTJFLEVBQUFrVSxNQUFBbFUsR0FBQSxhQUFBQSxHQUFBLFlBTkE7QUFNQSxHQWxGQUEsRUF3RkFBLE1BQUFBLENBQUE0VSxXQUFBNVUsR0FBQSxZQUFBO0FBQ0FVLElBQUFBLENBQUFBLENBQUEsb0JBQUFBLENBQUFBLENBQUFVLElBQUFWLENBQUEsR0FBQUEsR0FDQUEsQ0FBQUEsQ0FBQSxnQkFBQUEsQ0FBQUEsQ0FBQVcsSUFBQVgsRUFEQUE7QUFDQVcsR0ExRkFyQixFQTZGQUEsTUFBQUEsQ0FBQTZVLFVBQUE3VSxHQUFBLFVBQUErUyxLQUFBLEVBQUFBO0FBQ0EvUyxJQUFBQSxNQUFBQSxDQUFBOFUsS0FBQTlVLElBR0FsQixPQUFBQSxDQUFBQyxHQUFBRCxDQUFBa0IsTUFBQUEsQ0FBQThVLEtBQUE5VSxDQUFBK1Usa0JBQUEvVSxDQUFBK1MsS0FBQS9TLENBQUFsQixDQUhBa0I7QUFHQStTLEdBakdBL1MsRUFxR0FBLE1BQUFBLENBQUFnVixXQUFBaFYsR0FBQSxZQUFBO0FBa0NBLFNBQUEsSUFBQTNFLENBQUEsSUFoQ0EyRSxNQUFBQSxDQUFBUixJQUFBUSxHQUFBLEVBQUFBLEVBQ0FBLE1BQUFBLENBQUFrTSxPQUFBbE0sR0FBQTtBQUVBaVYsTUFBQUEsVUFBQUEsRUFBQUEsQ0FBQSxDQUZBO0FBS0FDLE1BQUFBLGlCQUFBQSxFQUFBQSxDQUFBLENBTEE7QUFRQUMsTUFBQUEsa0JBQUFBLEVBQUEsTUFSQTtBQVdBQyxNQUFBQSxrQkFBQUEsRUFBQSxDQVhBO0FBY0FDLE1BQUFBLHFCQUFBQSxFQUFBLENBZEE7QUFpQkFDLE1BQUFBLGNBQUFBLEVBQUEsR0FqQkE7QUFvQkFDLE1BQUFBLGVBQUFBLEVBQUEsZUFwQkE7QUF1QkFDLE1BQUFBLGFBQUFBLEVBQUFBLENBQUEsQ0F2QkE7QUEwQkFDLE1BQUFBLFlBQUFBLEVBQUFBLENBQUEsQ0ExQkE7QUE2QkFDLE1BQUFBLGNBQUFBLEVBQUE7QUE3QkEsS0FEQTFWLEVBZ0NBbVAsYUFBQUEsQ0FBQXdHLE9BQUEsRUFFQSxLQUFBLElBQUFuRyxDQUFBLElBREFMLGFBQUFBLENBQUF3RyxPQUFBeEcsQ0FBQTlULENBQUE4VCxFQUFBeUcsS0FBQXpHLEdBQUEsQ0FBQUEsRUFDQW5QLE1BQUFBLENBQUE0VCxZQUFBLEVBQ0F6RSxhQUFBQSxDQUFBd0csT0FBQXhHLENBQUE5VCxDQUFBOFQsRUFBQWhNLElBQUFnTSxLQUFBblAsTUFBQUEsQ0FBQTRULFlBQUE1VCxDQUFBd1AsQ0FBQXhQLEVBQUFrVSxNQUFBL0UsSUFDQUEsYUFBQUEsQ0FBQXdHLE9BQUF4RyxDQUFBOVQsQ0FBQThULEVBQUF5RyxLQUFBekcsRUFEQUE7O0FBTUEsU0FBQTlULENBQUEsSUFEQThULGFBQUFBLENBQUF3RyxPQUFBeEcsQ0FBQXRTLElBQUFzUyxDQUFBLFVBQUFyUyxDQUFBLEVBQUFDLENBQUEsRUFBQUE7QUFBQSxhQUFBRCxDQUFBQSxDQUFBOFksS0FBQTlZLEdBQUFDLENBQUFBLENBQUE2WSxLQUFBO0FBQUFBLEtBQUF6RyxHQUNBQSxhQUFBQSxDQUFBd0csT0FBQSxFQUNBM1YsTUFBQUEsQ0FBQVIsSUFBQVEsQ0FBQXBELElBQUFvRCxDQUFBO0FBQ0FzTixNQUFBQSxLQUFBQSxFQUFBNkIsYUFBQUEsQ0FBQXdHLE9BQUF4RyxDQUFBOVQsQ0FBQThULEVBQUF5RyxLQURBO0FBRUFDLE1BQUFBLEtBQUFBLEVBQUExRyxhQUFBQSxDQUFBd0csT0FBQXhHLENBQUE5VCxDQUFBOFQsRUFBQWhNO0FBRkEsS0FBQW5EOztBQUtBVSxJQUFBQSxDQUFBQSxDQUFBLG1CQUFBQSxDQUFBQSxDQUFBVyxJQUFBWCxJQUNBQSxDQUFBQSxDQUFBLG9CQUFBQSxDQUFBQSxDQUFBVyxJQUFBWCxFQURBQSxFQUVBQSxDQUFBQSxDQUFBLGtCQUFBQSxDQUFBQSxDQUFBVSxJQUFBVixDQUFBLEdBQUFBLENBRkFBO0FBRUEsR0F4SkFWO0FBd0pBLENBMUpBLENBREE3QyxDZE9BQSxFZVBBQSxPQUFBQSxDQUFBQyxNQUFBRCxDQUFBLEtBQUFBLEVBQ0FZLFVBREFaLENBQ0EsYUFEQUEsRUFDQSxDQUFBLFFBQUEsRUFBQSxXQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUE2QyxNQUFBLEVBQUFDLFNBQUEsRUFBQUUsT0FBQSxFQUFBQTtBQUVBSCxFQUFBQSxNQUFBQSxDQUFBUyxXQUFBVCxJQUdBVSxDQUFBQSxDQUFBLGdCQUFBQSxDQUFBQSxDQUFBb1YsTUFBQXBWLENBQUE7QUFBQWdDLElBQUFBLElBQUFBLEVBQUExQyxNQUFBQSxDQUFBUyxXQUFBVCxDQUFBK1YsTUFBQS9WLENBQUFnVyxHQUFBaFcsR0FBQSxHQUFBQSxHQUFBVSxDQUFBQSxDQUFBLE1BQUFBLENBQUFBLENBQUE2RyxLQUFBN0csRUFBQVYsR0FBQVUsQ0FBQUEsQ0FBQSxNQUFBQSxDQUFBQSxDQUFBb1YsTUFBQXBWLEdBQUFnQztBQUFBLEdBQUFoQyxHQUNBQSxDQUFBQSxDQUFBLHFCQUFBQSxDQUFBQSxDQUFBb1YsTUFBQXBWLENBQUE7QUFBQWdDLElBQUFBLElBQUFBLEVBQUExQyxNQUFBQSxDQUFBUyxXQUFBVCxDQUFBK1YsTUFBQS9WLENBQUFpVyxRQUFBalcsR0FBQSxHQUFBQSxHQUFBVSxDQUFBQSxDQUFBLFdBQUFBLENBQUFBLENBQUE2RyxLQUFBN0csRUFBQVYsR0FBQVUsQ0FBQUEsQ0FBQSxXQUFBQSxDQUFBQSxDQUFBb1YsTUFBQXBWLEdBQUFnQztBQUFBLEdBQUFoQyxDQUpBVixJQUNBQyxTQUFBQSxDQUFBNFEsSUFBQTVRLENBQUEsR0FBQUEsQ0FEQUQsRUFPQUEsTUFBQUEsQ0FBQWtXLEtBQUFsVyxHQUFBLENBQ0EsTUFEQSxFQUVBLFVBRkEsRUFHQSxVQUhBLEVBSUEsWUFKQSxFQUtBLFFBTEEsQ0FQQUEsRUFjQUEsTUFBQUEsQ0FBQW1XLFVBQUFuVyxHQUFBLENBQ0EsS0FEQSxFQUVBLFVBRkEsRUFHQSxXQUhBLEVBSUEsU0FKQSxFQUtBLFlBTEEsRUFNQSxhQU5BLEVBT0EsYUFQQSxFQVFBLE9BUkEsRUFTQSxPQVRBLENBZEFBLEVBMEJBQSxNQUFBQSxDQUFBb1csV0FBQXBXLEdBQUE7QUFDQXFXLElBQUFBLE9BQUFBLEVBQUEsSUFBQXJWLElBQUEsRUFEQTtBQUVBc1YsSUFBQUEsT0FBQUEsRUFBQSxJQUFBdFYsSUFBQSxDQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxDQUZBO0FBR0F1VixJQUFBQSxRQUFBQSxFQUFBLElBQUF2VixJQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLENBSEE7QUFJQXdWLElBQUFBLGNBQUFBLEVBQUE7QUFKQSxHQTFCQXhXLEVBaUNBQSxNQUFBQSxDQUFBK1YsTUFBQS9WLEdBQUEsVUFBQXNHLEtBQUEsRUFBQW1RLFVBQUEsRUFBQUE7QUFDQSxXQUFBblEsS0FBQUEsQ0FBQWxLLElBQUFBLENBQUFpTCxLQUFBakwsQ0FBQXFhLFVBQUFBLEdBQUEsR0FBQUEsSUFBQW5RLEtBQUFBLENBQUFoTCxNQUFBZ0wsR0FBQSxDQUFBbVEsQ0FBQXJhLENBQUFrSyxDQUFBO0FBQUEsR0FsQ0F0RyxFQXFDQUEsTUFBQUEsQ0FBQTBXLFdBQUExVyxHQUFBLFlBQUEsQ0FBQSxDQXJDQUEsRUF3Q0FBLE1BQUFBLENBQUEyVyxVQUFBM1csR0FBQSxVQUFBK1MsS0FBQSxFQUFBL0IsRUFBQSxFQUFBZ0IsSUFBQSxFQUFBQTtBQUNBaFMsSUFBQUEsTUFBQUEsQ0FBQVMsV0FBQVQsQ0FBQStWLE1BQUEvVixDQUFBZ1MsSUFBQWhTLElBQUE1RCxJQUFBQSxDQUFBaUwsS0FBQWpMLENBQUFpTCxDQUFBM0csQ0FBQUEsQ0FBQSxNQUFBc1IsSUFBQSxHQUFBLFlBQUF0UixDQUFBQSxDQUFBb1YsTUFBQXBWLEdBQUFnQyxJQUFBaEMsR0FBQUEsQ0FBQUEsQ0FBQSxNQUFBc1IsSUFBQXRSLENBQUFBLENBQUFvVixNQUFBcFYsR0FBQWdDLElBQUEyRSxLQUFBM0csQ0FBQUEsQ0FBQSxNQUFBc1IsSUFBQXRSLENBQUFBLENBQUE2RyxLQUFBN0csS0FBQUEsQ0FBQUEsQ0FBQSxNQUFBc1IsSUFBQSxHQUFBLFlBQUF0UixDQUFBQSxDQUFBNkcsS0FBQTdHLEVBQUEyRyxJQUFBLEdBQUFqTCxDQUFBNEQsRUFDQUEsTUFBQUEsQ0FBQStHLE1BQUEvRyxFQURBQTtBQUNBK0csR0ExQ0EvRyxFQTRDQUEsTUFBQUEsQ0FBQTRXLFVBQUE1VyxHQUFBLFlBQUEsQ0FBQSxDQTVDQUEsRUFnREFBLE1BQUFBLENBQUE2VyxjQUFBN1csR0FBQTZXLENBQUEsQ0FoREE3VyxFQWlEQUEsTUFBQUEsQ0FBQThXLGNBQUE5VyxHQUFBOFcsQ0FBQSxDQWpEQTlXLEVBbURBQSxNQUFBQSxDQUFBK1csY0FBQS9XLEdBQUEsWUFBQTtBQUNBQSxJQUFBQSxNQUFBQSxDQUFBNlcsY0FBQTdXLEdBQUE2VyxDQUFBN1csTUFBQUEsQ0FBQTZXLGNBQUE3VyxFQUNBQSxNQUFBQSxDQUFBZ1gsV0FBQWhYLEdBQUFBLE1BQUFBLENBQUFTLFdBQUFULENBQUFpWCxRQURBalg7QUFDQWlYLEdBckRBalgsRUF3REFBLE1BQUFBLENBQUFrWCxjQUFBbFgsR0FBQSxZQUFBO0FBQ0FBLElBQUFBLE1BQUFBLENBQUFtWCxXQUFBblgsR0FBQSxJQUFBQSxFQUNBQSxNQUFBQSxDQUFBb1gsZUFBQXBYLEdBQUEsSUFEQUEsRUFFQUEsTUFBQUEsQ0FBQThXLGNBQUE5VyxHQUFBOFcsQ0FBQTlXLE1BQUFBLENBQUE4VyxjQUZBOVc7QUFFQThXLEdBM0RBOVcsRUE4REFBLE1BQUFBLENBQUFxWCxhQUFBclgsR0FBQSxVQUFBc1gsUUFBQSxFQUFBQTtBQUNBLFFBQUFBLFFBQUEsRUFBQTtBQUNBLFVBQUFqWCxJQUFBQSxHQUFBTCxNQUFBQSxDQUFBUyxXQUFBVCxDQUFBUSxHQUFBO0FBQ0FMLE1BQUFBLE9BQUFBLENBQUFrWCxhQUFBbFgsQ0FBQUUsSUFBQUYsRUFBQW1YLFFBQUFuWCxFQUNBa0QsSUFEQWxELENBQ0EsVUFBQW1ELFFBQUEsRUFBQUE7QUFDQXRELFFBQUFBLE1BQUFBLENBQUFrWCxjQUFBbFg7QUFBQWtYLE9BRkEvVyxFQUdBLFlBQUE7QUFDQSxZQUFBb1gsVUFBQUEsR0FBQTdXLENBQUFBLENBQUEsV0FBQUEsQ0FBQUEsQ0FBQXNDLEdBQUF0QyxDQUFBLGlCQUFBQSxDQUFBO0FBQ0FBLFFBQUFBLENBQUFBLENBQUEsV0FBQUEsQ0FBQUEsQ0FBQThXLE9BQUE5VyxDQUFBO0FBQUErVyxVQUFBQSxlQUFBQSxFQUFBO0FBQUEsU0FBQS9XLEVBQUEsR0FBQUEsRUFBQThXLE9BQUE5VyxDQUFBO0FBQUErVyxVQUFBQSxlQUFBQSxFQUFBRjtBQUFBLFNBQUE3VyxFQUFBLEdBQUFBO0FBQUEsT0FMQVA7QUFLQTtBQUFBLEdBdEVBSCxFQTJFQUEsTUFBQUEsQ0FBQTBYLGNBQUExWCxHQUFBLFVBQUEyWCxXQUFBLEVBQUFSLFdBQUEsRUFBQUMsZUFBQSxFQUFBQTtBQUNBLFFBQUFELFdBQUEsRUFDQSxJQUFBQSxXQUFBQSxJQUFBQyxlQUFBLEVBQUE7QUFDQSxVQUFBL1csSUFBQUEsR0FBQUwsTUFBQUEsQ0FBQVMsV0FBQVQsQ0FBQVEsR0FBQTtBQUNBTCxNQUFBQSxPQUFBQSxDQUFBdVgsY0FBQXZYLENBQUFFLElBQUFGLEVBQUF3WCxXQUFBeFgsRUFBQWdYLFdBQUFoWCxFQUNBa0QsSUFEQWxELENBQ0EsVUFBQW1ELFFBQUEsRUFBQUE7QUFDQXRELFFBQUFBLE1BQUFBLENBQUE4UixLQUFBOVIsQ0FBQSxPQUFBQSxFQUFBO0FBQ0F3TSxVQUFBQSxPQUFBQSxFQUFBLGtCQURBO0FBRUF3RixVQUFBQSxJQUFBQSxFQUFBO0FBRkEsU0FBQWhTLEdBSUFBLE1BQUFBLENBQUEyWCxXQUFBM1gsR0FBQSxJQUpBQSxFQUtBQSxNQUFBQSxDQUFBa1gsY0FBQWxYLEVBTEFBO0FBS0FrWCxPQVBBL1csRUFRQSxZQUFBO0FBQ0FILFFBQUFBLE1BQUFBLENBQUE4UixLQUFBOVIsQ0FBQSxPQUFBQSxFQUFBO0FBQ0F3TSxVQUFBQSxPQUFBQSxFQUFBLHdCQURBO0FBRUF3RixVQUFBQSxJQUFBQSxFQUFBO0FBRkEsU0FBQWhTO0FBRUEsT0FYQUc7QUFXQSxLQWJBLE1BZ0JBO0FBQ0EsVUFBQW9YLFVBQUFBLEdBQUE3VyxDQUFBQSxDQUFBLFdBQUFBLENBQUFBLENBQUFzQyxHQUFBdEMsQ0FBQSxpQkFBQUEsQ0FBQTtBQUNBQSxNQUFBQSxDQUFBQSxDQUFBLFdBQUFBLENBQUFBLENBQUE4VyxPQUFBOVcsQ0FBQTtBQUFBK1csUUFBQUEsZUFBQUEsRUFBQTtBQUFBLE9BQUEvVyxFQUFBLEdBQUFBLEVBQUE4VyxPQUFBOVcsQ0FBQTtBQUFBK1csUUFBQUEsZUFBQUEsRUFBQUY7QUFBQSxPQUFBN1csRUFBQSxHQUFBQTtBQUFBO0FBQUEsR0EvRkFWLEVBb0dBQSxNQUFBQSxDQUFBNFgsY0FBQTVYLEdBQUEsVUFBQWlYLFFBQUEsRUFBQUE7QUFDQWpYLElBQUFBLE1BQUFBLENBQUE4UixLQUFBOVIsQ0FBQSxTQUFBQSxHQUNBRyxPQUFBQSxDQUFBeVgsY0FBQXpYLENBQUFILE1BQUFBLENBQUFTLFdBQUFULENBQUFRLEdBQUFMLEVBQUE4VyxRQUFBOVcsRUFDQWtELElBREFsRCxDQUNBLFVBQUFtRCxRQUFBLEVBQUFBO0FBQ0F0RCxNQUFBQSxNQUFBQSxDQUFBOFIsS0FBQTlSLENBQUEsUUFBQUEsRUFBQXNELFFBQUFBLENBQUE5RCxJQUFBUTtBQUFBUixLQUZBVyxFQUdBLFVBQUFtRCxRQUFBLEVBQUFBO0FBQ0F0RCxNQUFBQSxNQUFBQSxDQUFBOFIsS0FBQTlSLENBQUEsT0FBQUEsRUFBQTtBQUNBd00sUUFBQUEsT0FBQUEsRUFBQXlLLFFBQUFBLEdBQUEsaUJBREE7QUFFQWpGLFFBQUFBLElBQUFBLEVBQUE7QUFGQSxPQUFBaFM7QUFFQSxLQU5BRyxDQURBSDtBQU9BLEdBNUdBQSxFQWlIQUEsTUFBQUEsQ0FBQTZYLFVBQUE3WCxHQUFBLFlBQUE7QUFDQUEsSUFBQUEsTUFBQUEsQ0FBQVMsV0FBQVQsS0FDQUEsTUFBQUEsQ0FBQThSLEtBQUE5UixDQUFBLFNBQUFBLEdBQ0FHLE9BQUFBLENBQUEwWCxVQUFBMVgsQ0FBQUgsTUFBQUEsQ0FBQVMsV0FBQU4sRUFDQWtELElBREFsRCxDQUNBLFVBQUFtRCxRQUFBLEVBQUFBO0FBQ0F0RCxNQUFBQSxNQUFBQSxDQUFBOFIsS0FBQTlSLENBQUEsUUFBQUEsRUFBQXNELFFBQUFBLENBQUE5RCxJQUFBUTtBQUFBUixLQUZBVyxDQUZBSDtBQUlBUixHQXRIQVEsRUE0SEFBLE1BQUFBLENBQUE4WCxNQUFBOVgsQ0FBQSwwQkFBQUEsRUFBQSxVQUFBMUUsTUFBQSxFQUFBQTtBQUNBMEUsSUFBQUEsTUFBQUEsQ0FBQTZYLFVBQUE3WDtBQUFBNlgsR0FEQTdYLENBNUhBQSxFQWdJQUEsTUFBQUEsQ0FBQStYLGFBQUEvWCxHQUFBLFVBQUFnWSxNQUFBLEVBQUFBO0FBNFBBLFdBM1BBLENBQ0E7QUFBQTdVLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUFDLE1BQUFBLE1BQUFBLEVBQUE7QUFBQSxLQURBLEVBRUE7QUFBQS9VLE1BQUFBLElBQUFBLEVBQUEsc0JBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQUZBLEVBR0E7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsYUFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBSEEsRUFJQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxxQkFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBSkEsRUFLQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FMQSxFQU1BO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQU5BLEVBT0E7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBUEEsRUFRQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxRQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FSQSxFQVNBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQVRBLEVBVUE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsV0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBVkEsRUFXQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxnQkFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBWEEsRUFZQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FaQSxFQWFBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFdBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWJBLEVBY0E7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBZEEsRUFlQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxlQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FmQSxFQWdCQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxZQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FoQkEsRUFpQkE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsd0JBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWpCQSxFQWtCQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FsQkEsRUFtQkE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsWUFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbkJBLEVBb0JBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXBCQSxFQXFCQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxjQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FyQkEsRUFzQkE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsVUFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdEJBLEVBdUJBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXZCQSxFQXdCQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F4QkEsRUF5QkE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBekJBLEVBMEJBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLGtCQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0ExQkEsRUEyQkE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBM0JBLEVBNEJBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7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QTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdERBLEVBdURBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXZEQSxFQXdEQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxnQkFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBeERBLEVBeURBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXpEQSxFQTBEQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxVQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0ExREEsRUEyREE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBM0RBLEVBNERBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTVEQSxFQTZEQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxvQkFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBN0RBLEVBOERBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTlEQSxFQStEQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0EvREEsRUFnRUE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBaEVBLEVBaUVBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLE9BQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWpFQSxFQWtFQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxnQkFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbEVBLEVBbUVBO0FBQUE5VSxNQUFBQSxJ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QTVGQSxFQTZGQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxlQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E3RkEsRUE4RkE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBOUZBLEVBK0ZBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFdBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQS9GQSxFQWdHQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxtQ0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBaEdBLEVBaUdBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWpHQSxFQWtHQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FsR0EsRUFtR0E7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbkdBLEVBb0dBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXBHQSxFQXFHQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxXQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FyR0EsRUFzR0E7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdEdBLEVBdUdBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXZHQSxFQXdHQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxhQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F4R0EsRUF5R0E7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsT0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEs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QUEsU0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbklBLEVBb0lBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXBJQSxFQXFJQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxXQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FySUEsRUFzSUE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsWUFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdElBLEVBdUlBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXZJQSxFQXdJQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxPQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F4SUEsRUF5SUE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBeklBLEVBMElBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFFBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTFJQSxFQTJJQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxzQkFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBM0lBLEVBNElBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTVJQSxFQTZJQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSw0QkFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBN0lBLEVBOElBO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFlBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTlJQSxFQStJQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxrQkFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBL0lBLEVBZ0pBO0FBQUE5VSxN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QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQW5NQSxFQW9NQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxPQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FwTUEsRUFxTUE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsUUFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBck1BLEVBc01BO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFdBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXRNQSxFQXVNQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSw4Q0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdk1BLEVBd01BO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQXhNQSxFQXlNQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSx3QkFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBek1BLEVBME1BO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTFNQSxFQTJNQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxjQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0EzTUEsRUE0TUE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsWUFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBNU1BLEVBNk1BO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFNBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTdNQSxFQThNQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxTQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0E5TUEsRUErTUE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsVUFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBL01BLEVBZ05BO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLGFBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWhOQSxFQWlOQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSx1QkFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBak5BLEVBa05BO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLGFBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQWxOQSxFQW1OQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSwyQkFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBbk5BLEVBb05BO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLHNCQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0FwTkEsRUFxTkE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsV0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBck5BLEVBc05BO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLDBCQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F0TkEsRUF1TkE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsTUFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBdk5BLEVBd05BO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLDZCQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0F4TkEsRUF5TkE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsTUFBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBek5BLEVBME5BO0FBQUE5VSxNQUFBQSxJQUFBQSxFQUFBLFVBQUE7QUFBQThVLE1BQUFBLElBQUFBLEVBQUE7QUFBQSxLQTFOQSxFQTJOQTtBQUFBOVUsTUFBQUEsSUFBQUEsRUFBQSxZQUFBO0FBQUE4VSxNQUFBQSxJQUFBQSxFQUFBO0FBQUEsS0EzTkEsRUE0TkE7QUFBQTlVLE1BQUFBLElBQUFBLEVBQUEsU0FBQTtBQUFBOFUsTUFBQUEsSUFBQUEsRUFBQTtBQUFBLEtBNU5BLEVBNk5BO0FB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LE1BQUFBLENBQUE3ZixJQUFBNmYsS0FBQUEsTUFBQUEsQ0FBQUksS0FBQXBqQixFQUFBMUUsTUFBQUEsSUFBQTBFLE1BQUFBLENBQUEraUIsT0FBQS9pQixDQUFBMUUsTUFBQUEsRUFBQTBFLEVBRUFBLE1BQUFBLENBQUFzakIsY0FBQXRqQixHQUFBLE1BQUFBLE1BQUFBLENBQUEraUIsT0FBQS9pQixDQUFBeUIsTUFBQXpCLENBQUFnakIsTUFBQUEsSUFBQUEsTUFBQUEsQ0FBQUksS0FBQXBqQixFQUFBMUUsTUFBQTBFLEtBQUFBLE1BQUFBLENBQUEraUIsT0FBQS9pQixDQUFBMUUsTUFGQTBFO0FBRUExRSxDQXRCQSxDQURBNkIsQ25DT0FBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxNYXAgPSBbXHJcbiAge1xyXG4gICAgYmFzZTogJ0EnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDQxXFx1MjRCNlxcdUZGMjFcXHUwMEMwXFx1MDBDMVxcdTAwQzJcXHUxRUE2XFx1MUVBNFxcdTFFQUFcXHUxRUE4XFx1MDBDM1xcdTAxMDBcXHUwMTAyXFx1MUVCMFxcdTFFQUVcXHUxRUI0XFx1MUVCMlxcdTAyMjZcXHUwMUUwXFx1MDBDNFxcdTAxREVcXHUxRUEyXFx1MDBDNVxcdTAxRkFcXHUwMUNEXFx1MDIwMFxcdTAyMDJcXHUxRUEwXFx1MUVBQ1xcdTFFQjZcXHUxRTAwXFx1MDEwNFxcdTAyM0FcXHUyQzZGXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0FBJyxcclxuICAgIGxldHRlcnM6IC9bXFx1QTczMl0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdBRScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwQzZcXHUwMUZDXFx1MDFFMl0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdBTycsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdUE3MzRdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnQVUnLFxyXG4gICAgbGV0dGVyczogL1tcXHVBNzM2XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0FWJyxcclxuICAgIGxldHRlcnM6IC9bXFx1QTczOFxcdUE3M0FdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnQVknLFxyXG4gICAgbGV0dGVyczogL1tcXHVBNzNDXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0InLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMDQyXFx1MjRCN1xcdUZGMjJcXHUxRTAyXFx1MUUwNFxcdTFFMDZcXHUwMjQzXFx1MDE4MlxcdTAxODFdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnQycsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNDNcXHUyNEI4XFx1RkYyM1xcdTAxMDZcXHUwMTA4XFx1MDEwQVxcdTAxMENcXHUwMEM3XFx1MUUwOFxcdTAxODdcXHUwMjNCXFx1QTczRV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdEJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA0NFxcdTI0QjlcXHVGRjI0XFx1MUUwQVxcdTAxMEVcXHUxRTBDXFx1MUUxMFxcdTFFMTJcXHUxRTBFXFx1MDExMFxcdTAxOEJcXHUwMThBXFx1MDE4OVxcdUE3NzldL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnRFonLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMUYxXFx1MDFDNF0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdEeicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAxRjJcXHUwMUM1XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0UnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDQ1XFx1MjRCQVxcdUZGMjVcXHUwMEM4XFx1MDBDOVxcdTAwQ0FcXHUxRUMwXFx1MUVCRVxcdTFFQzRcXHUxRUMyXFx1MUVCQ1xcdTAxMTJcXHUxRTE0XFx1MUUxNlxcdTAxMTRcXHUwMTE2XFx1MDBDQlxcdTFFQkFcXHUwMTFBXFx1MDIwNFxcdTAyMDZcXHUxRUI4XFx1MUVDNlxcdTAyMjhcXHUxRTFDXFx1MDExOFxcdTFFMThcXHUxRTFBXFx1MDE5MFxcdTAxOEVdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnRicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNDZcXHUyNEJCXFx1RkYyNlxcdTFFMUVcXHUwMTkxXFx1QTc3Ql0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdHJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA0N1xcdTI0QkNcXHVGRjI3XFx1MDFGNFxcdTAxMUNcXHUxRTIwXFx1MDExRVxcdTAxMjBcXHUwMUU2XFx1MDEyMlxcdTAxRTRcXHUwMTkzXFx1QTdBMFxcdUE3N0RcXHVBNzdFXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0gnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDQ4XFx1MjRCRFxcdUZGMjhcXHUwMTI0XFx1MUUyMlxcdTFFMjZcXHUwMjFFXFx1MUUyNFxcdTFFMjhcXHUxRTJBXFx1MDEyNlxcdTJDNjdcXHUyQzc1XFx1QTc4RF0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdJJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA0OVxcdTI0QkVcXHVGRjI5XFx1MDBDQ1xcdTAwQ0RcXHUwMENFXFx1MDEyOFxcdTAxMkFcXHUwMTJDXFx1MDEzMFxcdTAwQ0ZcXHUxRTJFXFx1MUVDOFxcdTAxQ0ZcXHUwMjA4XFx1MDIwQVxcdTFFQ0FcXHUwMTJFXFx1MUUyQ1xcdTAxOTddL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnSicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNEFcXHUyNEJGXFx1RkYyQVxcdTAxMzRcXHUwMjQ4XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0snLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDRCXFx1MjRDMFxcdUZGMkJcXHUxRTMwXFx1MDFFOFxcdTFFMzJcXHUwMTM2XFx1MUUzNFxcdTAxOThcXHUyQzY5XFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTdBMl0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdMJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA0Q1xcdTI0QzFcXHVGRjJDXFx1MDEzRlxcdTAxMzlcXHUwMTNEXFx1MUUzNlxcdTFFMzhcXHUwMTNCXFx1MUUzQ1xcdTFFM0FcXHUwMTQxXFx1MDIzRFxcdTJDNjJcXHUyQzYwXFx1QTc0OFxcdUE3NDZcXHVBNzgwXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ0xKJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDFDN10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdMaicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAxQzhdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnTScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNERcXHUyNEMyXFx1RkYyRFxcdTFFM0VcXHUxRTQwXFx1MUU0MlxcdTJDNkVcXHUwMTlDXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ04nLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDRFXFx1MjRDM1xcdUZGMkVcXHUwMUY4XFx1MDE0M1xcdTAwRDFcXHUxRTQ0XFx1MDE0N1xcdTFFNDZcXHUwMTQ1XFx1MUU0QVxcdTFFNDhcXHUwMjIwXFx1MDE5RFxcdUE3OTBcXHVBN0E0XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ05KJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDFDQV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdOaicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAxQ0JdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnTycsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNEZcXHUyNEM0XFx1RkYyRlxcdTAwRDJcXHUwMEQzXFx1MDBENFxcdTFFRDJcXHUxRUQwXFx1MUVENlxcdTFFRDRcXHUwMEQ1XFx1MUU0Q1xcdTAyMkNcXHUxRTRFXFx1MDE0Q1xcdTFFNTBcXHUxRTUyXFx1MDE0RVxcdTAyMkVcXHUwMjMwXFx1MDBENlxcdTAyMkFcXHUxRUNFXFx1MDE1MFxcdTAxRDFcXHUwMjBDXFx1MDIwRVxcdTAxQTBcXHUxRURDXFx1MUVEQVxcdTFFRTBcXHUxRURFXFx1MUVFMlxcdTFFQ0NcXHUxRUQ4XFx1MDFFQVxcdTAxRUNcXHUwMEQ4XFx1MDFGRVxcdTAxODZcXHUwMTlGXFx1QTc0QVxcdUE3NENdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnT0knLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMUEyXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ09PJyxcclxuICAgIGxldHRlcnM6IC9bXFx1QTc0RV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdPVScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAyMjJdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnUCcsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNTBcXHUyNEM1XFx1RkYzMFxcdTFFNTRcXHUxRTU2XFx1MDFBNFxcdTJDNjNcXHVBNzUwXFx1QTc1MlxcdUE3NTRdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnUScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNTFcXHUyNEM2XFx1RkYzMVxcdUE3NTZcXHVBNzU4XFx1MDI0QV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdSJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA1MlxcdTI0QzdcXHVGRjMyXFx1MDE1NFxcdTFFNThcXHUwMTU4XFx1MDIxMFxcdTAyMTJcXHUxRTVBXFx1MUU1Q1xcdTAxNTZcXHUxRTVFXFx1MDI0Q1xcdTJDNjRcXHVBNzVBXFx1QTdBNlxcdUE3ODJdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnUycsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNTNcXHUyNEM4XFx1RkYzM1xcdTFFOUVcXHUwMTVBXFx1MUU2NFxcdTAxNUNcXHUxRTYwXFx1MDE2MFxcdTFFNjZcXHUxRTYyXFx1MUU2OFxcdTAyMThcXHUwMTVFXFx1MkM3RVxcdUE3QThcXHVBNzg0XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ1QnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDU0XFx1MjRDOVxcdUZGMzRcXHUxRTZBXFx1MDE2NFxcdTFFNkNcXHUwMjFBXFx1MDE2MlxcdTFFNzBcXHUxRTZFXFx1MDE2NlxcdTAxQUNcXHUwMUFFXFx1MDIzRVxcdUE3ODZdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnVFonLFxyXG4gICAgbGV0dGVyczogL1tcXHVBNzI4XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ1UnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDU1XFx1MjRDQVxcdUZGMzVcXHUwMEQ5XFx1MDBEQVxcdTAwREJcXHUwMTY4XFx1MUU3OFxcdTAxNkFcXHUxRTdBXFx1MDE2Q1xcdTAwRENcXHUwMURCXFx1MDFEN1xcdTAxRDVcXHUwMUQ5XFx1MUVFNlxcdTAxNkVcXHUwMTcwXFx1MDFEM1xcdTAyMTRcXHUwMjE2XFx1MDFBRlxcdTFFRUFcXHUxRUU4XFx1MUVFRVxcdTFFRUNcXHUxRUYwXFx1MUVFNFxcdTFFNzJcXHUwMTcyXFx1MUU3NlxcdTFFNzRcXHUwMjQ0XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ1YnLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMDU2XFx1MjRDQlxcdUZGMzZcXHUxRTdDXFx1MUU3RVxcdTAxQjJcXHVBNzVFXFx1MDI0NV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdWWScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdUE3NjBdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnVycsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNTdcXHUyNENDXFx1RkYzN1xcdTFFODBcXHUxRTgyXFx1MDE3NFxcdTFFODZcXHUxRTg0XFx1MUU4OFxcdTJDNzJdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnWCcsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNThcXHUyNENEXFx1RkYzOFxcdTFFOEFcXHUxRThDXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ1knLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDU5XFx1MjRDRVxcdUZGMzlcXHUxRUYyXFx1MDBERFxcdTAxNzZcXHUxRUY4XFx1MDIzMlxcdTFFOEVcXHUwMTc4XFx1MUVGNlxcdTFFRjRcXHUwMUIzXFx1MDI0RVxcdTFFRkVdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnWicsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNUFcXHUyNENGXFx1RkYzQVxcdTAxNzlcXHUxRTkwXFx1MDE3QlxcdTAxN0RcXHUxRTkyXFx1MUU5NFxcdTAxQjVcXHUwMjI0XFx1MkM3RlxcdTJDNkJcXHVBNzYyXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2EnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDYxXFx1MjREMFxcdUZGNDFcXHUxRTlBXFx1MDBFMFxcdTAwRTFcXHUwMEUyXFx1MUVBN1xcdTFFQTVcXHUxRUFCXFx1MUVBOVxcdTAwRTNcXHUwMTAxXFx1MDEwM1xcdTFFQjFcXHUxRUFGXFx1MUVCNVxcdTFFQjNcXHUwMjI3XFx1MDFFMVxcdTAwRTRcXHUwMURGXFx1MUVBM1xcdTAwRTVcXHUwMUZCXFx1MDFDRVxcdTAyMDFcXHUwMjAzXFx1MUVBMVxcdTFFQURcXHUxRUI3XFx1MUUwMVxcdTAxMDVcXHUyQzY1XFx1MDI1MF0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdhYScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdUE3MzNdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnYWUnLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMEU2XFx1MDFGRFxcdTAxRTNdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnYW8nLFxyXG4gICAgbGV0dGVyczogL1tcXHVBNzM1XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2F1JyxcclxuICAgIGxldHRlcnM6IC9bXFx1QTczN10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdhdicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdUE3MzlcXHVBNzNCXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2F5JyxcclxuICAgIGxldHRlcnM6IC9bXFx1QTczRF0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdiJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDA2MlxcdTI0RDFcXHVGRjQyXFx1MUUwM1xcdTFFMDVcXHUxRTA3XFx1MDE4MFxcdTAxODNcXHUwMjUzXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2MnLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMDYzXFx1MjREMlxcdUZGNDNcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDBFN1xcdTFFMDlcXHUwMTg4XFx1MDIzQ1xcdUE3M0ZcXHUyMTg0XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2QnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDY0XFx1MjREM1xcdUZGNDRcXHUxRTBCXFx1MDEwRlxcdTFFMERcXHUxRTExXFx1MUUxM1xcdTFFMEZcXHUwMTExXFx1MDE4Q1xcdTAyNTZcXHUwMjU3XFx1QTc3QV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdkeicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAxRjNcXHUwMUM2XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2UnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDY1XFx1MjRENFxcdUZGNDVcXHUwMEU4XFx1MDBFOVxcdTAwRUFcXHUxRUMxXFx1MUVCRlxcdTFFQzVcXHUxRUMzXFx1MUVCRFxcdTAxMTNcXHUxRTE1XFx1MUUxN1xcdTAxMTVcXHUwMTE3XFx1MDBFQlxcdTFFQkJcXHUwMTFCXFx1MDIwNVxcdTAyMDdcXHUxRUI5XFx1MUVDN1xcdTAyMjlcXHUxRTFEXFx1MDExOVxcdTFFMTlcXHUxRTFCXFx1MDI0N1xcdTAyNUJcXHUwMUREXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2YnLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMDY2XFx1MjRENVxcdUZGNDZcXHUxRTFGXFx1MDE5MlxcdUE3N0NdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnZycsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNjdcXHUyNEQ2XFx1RkY0N1xcdTAxRjVcXHUwMTFEXFx1MUUyMVxcdTAxMUZcXHUwMTIxXFx1MDFFN1xcdTAxMjNcXHUwMUU1XFx1MDI2MFxcdUE3QTFcXHUxRDc5XFx1QTc3Rl0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdoJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA2OFxcdTI0RDdcXHVGRjQ4XFx1MDEyNVxcdTFFMjNcXHUxRTI3XFx1MDIxRlxcdTFFMjVcXHUxRTI5XFx1MUUyQlxcdTFFOTZcXHUwMTI3XFx1MkM2OFxcdTJDNzZcXHUwMjY1XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ2h2JyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDE5NV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdpJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA2OVxcdTI0RDhcXHVGRjQ5XFx1MDBFQ1xcdTAwRURcXHUwMEVFXFx1MDEyOVxcdTAxMkJcXHUwMTJEXFx1MDBFRlxcdTFFMkZcXHUxRUM5XFx1MDFEMFxcdTAyMDlcXHUwMjBCXFx1MUVDQlxcdTAxMkZcXHUxRTJEXFx1MDI2OFxcdTAxMzFdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnaicsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNkFcXHUyNEQ5XFx1RkY0QVxcdTAxMzVcXHUwMUYwXFx1MDI0OV0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdrJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA2QlxcdTI0REFcXHVGRjRCXFx1MUUzMVxcdTAxRTlcXHUxRTMzXFx1MDEzN1xcdTFFMzVcXHUwMTk5XFx1MkM2QVxcdUE3NDFcXHVBNzQzXFx1QTc0NVxcdUE3QTNdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnbCcsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNkNcXHUyNERCXFx1RkY0Q1xcdTAxNDBcXHUwMTNBXFx1MDEzRVxcdTFFMzdcXHUxRTM5XFx1MDEzQ1xcdTFFM0RcXHUxRTNCXFx1MDE3RlxcdTAxNDJcXHUwMTlBXFx1MDI2QlxcdTJDNjFcXHVBNzQ5XFx1QTc4MVxcdUE3NDddL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnbGonLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMUM5XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ20nLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMDZEXFx1MjREQ1xcdUZGNERcXHUxRTNGXFx1MUU0MVxcdTFFNDNcXHUwMjcxXFx1MDI2Rl0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICduJyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA2RVxcdTI0RERcXHVGRjRFXFx1MDFGOVxcdTAxNDRcXHUwMEYxXFx1MUU0NVxcdTAxNDhcXHUxRTQ3XFx1MDE0NlxcdTFFNEJcXHUxRTQ5XFx1MDE5RVxcdTAyNzJcXHUwMTQ5XFx1QTc5MVxcdUE3QTVdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnbmonLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMUNDXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ28nLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDZGXFx1MjRERVxcdUZGNEZcXHUwMEYyXFx1MDBGM1xcdTAwRjRcXHUxRUQzXFx1MUVEMVxcdTFFRDdcXHUxRUQ1XFx1MDBGNVxcdTFFNERcXHUwMjJEXFx1MUU0RlxcdTAxNERcXHUxRTUxXFx1MUU1M1xcdTAxNEZcXHUwMjJGXFx1MDIzMVxcdTAwRjZcXHUwMjJCXFx1MUVDRlxcdTAxNTFcXHUwMUQyXFx1MDIwRFxcdTAyMEZcXHUwMUExXFx1MUVERFxcdTFFREJcXHUxRUUxXFx1MUVERlxcdTFFRTNcXHUxRUNEXFx1MUVEOVxcdTAxRUJcXHUwMUVEXFx1MDBGOFxcdTAxRkZcXHUwMjU0XFx1QTc0QlxcdUE3NERcXHUwMjc1XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ29pJyxcclxuICAgIGxldHRlcnM6IC9bXFx1MDFBM10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICdvdScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAyMjNdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAnb28nLFxyXG4gICAgbGV0dGVyczogL1tcXHVBNzRGXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ3AnLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMDcwXFx1MjRERlxcdUZGNTBcXHUxRTU1XFx1MUU1N1xcdTAxQTVcXHUxRDdEXFx1QTc1MVxcdUE3NTNcXHVBNzU1XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ3EnLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMDcxXFx1MjRFMFxcdUZGNTFcXHUwMjRCXFx1QTc1N1xcdUE3NTldL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAncicsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNzJcXHUyNEUxXFx1RkY1MlxcdTAxNTVcXHUxRTU5XFx1MDE1OVxcdTAyMTFcXHUwMjEzXFx1MUU1QlxcdTFFNURcXHUwMTU3XFx1MUU1RlxcdTAyNERcXHUwMjdEXFx1QTc1QlxcdUE3QTdcXHVBNzgzXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ3MnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDczXFx1MjRFMlxcdUZGNTNcXHUwMERGXFx1MDE1QlxcdTFFNjVcXHUwMTVEXFx1MUU2MVxcdTAxNjFcXHUxRTY3XFx1MUU2M1xcdTFFNjlcXHUwMjE5XFx1MDE1RlxcdTAyM0ZcXHVBN0E5XFx1QTc4NVxcdTFFOUJdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAndCcsXHJcbiAgICBsZXR0ZXJzOlxyXG4gICAgICAvW1xcdTAwNzRcXHUyNEUzXFx1RkY1NFxcdTFFNkJcXHUxRTk3XFx1MDE2NVxcdTFFNkRcXHUwMjFCXFx1MDE2M1xcdTFFNzFcXHUxRTZGXFx1MDE2N1xcdTAxQURcXHUwMjg4XFx1MkM2NlxcdUE3ODddL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAndHonLFxyXG4gICAgbGV0dGVyczogL1tcXHVBNzI5XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ3UnLFxyXG4gICAgbGV0dGVyczpcclxuICAgICAgL1tcXHUwMDc1XFx1MjRFNFxcdUZGNTVcXHUwMEY5XFx1MDBGQVxcdTAwRkJcXHUwMTY5XFx1MUU3OVxcdTAxNkJcXHUxRTdCXFx1MDE2RFxcdTAwRkNcXHUwMURDXFx1MDFEOFxcdTAxRDZcXHUwMURBXFx1MUVFN1xcdTAxNkZcXHUwMTcxXFx1MDFENFxcdTAyMTVcXHUwMjE3XFx1MDFCMFxcdTFFRUJcXHUxRUU5XFx1MUVFRlxcdTFFRURcXHUxRUYxXFx1MUVFNVxcdTFFNzNcXHUwMTczXFx1MUU3N1xcdTFFNzVcXHUwMjg5XS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ3YnLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMDc2XFx1MjRFNVxcdUZGNTZcXHUxRTdEXFx1MUU3RlxcdTAyOEJcXHVBNzVGXFx1MDI4Q10vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICd2eScsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdUE3NjFdL2csXHJcbiAgfSxcclxuICB7XHJcbiAgICBiYXNlOiAndycsXHJcbiAgICBsZXR0ZXJzOiAvW1xcdTAwNzdcXHUyNEU2XFx1RkY1N1xcdTFFODFcXHUxRTgzXFx1MDE3NVxcdTFFODdcXHUxRTg1XFx1MUU5OFxcdTFFODlcXHUyQzczXS9nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgYmFzZTogJ3gnLFxyXG4gICAgbGV0dGVyczogL1tcXHUwMDc4XFx1MjRFN1xcdUZGNThcXHUxRThCXFx1MUU4RF0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICd5JyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA3OVxcdTI0RThcXHVGRjU5XFx1MUVGM1xcdTAwRkRcXHUwMTc3XFx1MUVGOVxcdTAyMzNcXHUxRThGXFx1MDBGRlxcdTFFRjdcXHUxRTk5XFx1MUVGNVxcdTAxQjRcXHUwMjRGXFx1MUVGRl0vZyxcclxuICB9LFxyXG4gIHtcclxuICAgIGJhc2U6ICd6JyxcclxuICAgIGxldHRlcnM6XHJcbiAgICAgIC9bXFx1MDA3QVxcdTI0RTlcXHVGRjVBXFx1MDE3QVxcdTFFOTFcXHUwMTdDXFx1MDE3RVxcdTFFOTNcXHUxRTk1XFx1MDFCNlxcdTAyMjVcXHUwMjQwXFx1MkM2Q1xcdUE3NjNdL2csXHJcbiAgfSxcclxuXTtcclxudmFyIGRvbWFpbnMgPSBbXHJcbiAgJy5jb20nLFxyXG4gICcub3JnJyxcclxuICAnLm5ldCcsXHJcbiAgJy5hYycsXHJcbiAgJy5hZCcsXHJcbiAgJy5hZScsXHJcbiAgJy5hZicsXHJcbiAgJy5hZycsXHJcbiAgJy5haScsXHJcbiAgJy5hbCcsXHJcbiAgJy5hbScsXHJcbiAgJy5hbycsXHJcbiAgJy5hcScsXHJcbiAgJy5hcicsXHJcbiAgJy5hcycsXHJcbiAgJy5hdCcsXHJcbiAgJy5hdScsXHJcbiAgJy5hdycsXHJcbiAgJy5heCcsXHJcbiAgJy5heicsXHJcbiAgJy5iYScsXHJcbiAgJy5iYicsXHJcbiAgJy5iZCcsXHJcbiAgJy5iZScsXHJcbiAgJy5iZicsXHJcbiAgJy5iZycsXHJcbiAgJy5iaCcsXHJcbiAgJy5iaScsXHJcbiAgJy5iaicsXHJcbiAgJy5ibScsXHJcbiAgJy5ibicsXHJcbiAgJy5ibycsXHJcbiAgJy5icScsXHJcbiAgJy5icicsXHJcbiAgJy5icycsXHJcbiAgJy5idCcsXHJcbiAgJy5idycsXHJcbiAgJy5ieScsXHJcbiAgJy5ieicsXHJcbiAgJy5jYScsXHJcbiAgJy5jYycsXHJcbiAgJy5jZCcsXHJcbiAgJy5jZicsXHJcbiAgJy5jZycsXHJcbiAgJy5jaCcsXHJcbiAgJy5jaScsXHJcbiAgJy5jaycsXHJcbiAgJy5jbCcsXHJcbiAgJy5jbScsXHJcbiAgJy5jbicsXHJcbiAgJy5jbycsXHJcbiAgJy5jcicsXHJcbiAgJy5jdScsXHJcbiAgJy5jdicsXHJcbiAgJy5jdycsXHJcbiAgJy5jeCcsXHJcbiAgJy5jeScsXHJcbiAgJy5jeicsXHJcbiAgJy5kZScsXHJcbiAgJy5kaicsXHJcbiAgJy5kaycsXHJcbiAgJy5kbScsXHJcbiAgJy5kbycsXHJcbiAgJy5keicsXHJcbiAgJy5lYycsXHJcbiAgJy5lZScsXHJcbiAgJy5lZycsXHJcbiAgJy5laCcsXHJcbiAgJy5lcicsXHJcbiAgJy5lcycsXHJcbiAgJy5ldCcsXHJcbiAgJy5ldScsXHJcbiAgJy5maScsXHJcbiAgJy5maicsXHJcbiAgJy5maycsXHJcbiAgJy5mbScsXHJcbiAgJy5mbycsXHJcbiAgJy5mcicsXHJcbiAgJy5nYScsXHJcbiAgJy5nZCcsXHJcbiAgJy5nZScsXHJcbiAgJy5nZicsXHJcbiAgJy5nZycsXHJcbiAgJy5naCcsXHJcbiAgJy5naScsXHJcbiAgJy5nbCcsXHJcbiAgJy5nbScsXHJcbiAgJy5nbicsXHJcbiAgJy5ncCcsXHJcbiAgJy5ncScsXHJcbiAgJy5ncicsXHJcbiAgJy5ncycsXHJcbiAgJy5ndCcsXHJcbiAgJy5ndScsXHJcbiAgJy5ndycsXHJcbiAgJy5neScsXHJcbiAgJy5oaycsXHJcbiAgJy5obScsXHJcbiAgJy5obicsXHJcbiAgJy5ocicsXHJcbiAgJy5odCcsXHJcbiAgJy5odScsXHJcbiAgJy5pZCcsXHJcbiAgJy5pZScsXHJcbiAgJy5pbCcsXHJcbiAgJy5pbScsXHJcbiAgJy5pbicsXHJcbiAgJy5pbycsXHJcbiAgJy5pcScsXHJcbiAgJy5pcicsXHJcbiAgJy5pcycsXHJcbiAgJy5pdCcsXHJcbiAgJy5qZScsXHJcbiAgJy5qbScsXHJcbiAgJy5qbycsXHJcbiAgJy5qcCcsXHJcbiAgJy5rZScsXHJcbiAgJy5rZycsXHJcbiAgJy5raCcsXHJcbiAgJy5raScsXHJcbiAgJy5rbScsXHJcbiAgJy5rbicsXHJcbiAgJy5rcCcsXHJcbiAgJy5rcicsXHJcbiAgJy5rdycsXHJcbiAgJy5reScsXHJcbiAgJy5reicsXHJcbiAgJy5sYScsXHJcbiAgJy5sYicsXHJcbiAgJy5sYycsXHJcbiAgJy5saScsXHJcbiAgJy5saycsXHJcbiAgJy5scicsXHJcbiAgJy5scycsXHJcbiAgJy5sdCcsXHJcbiAgJy5sdScsXHJcbiAgJy5sdicsXHJcbiAgJy5seScsXHJcbiAgJy5tYScsXHJcbiAgJy5tYycsXHJcbiAgJy5tZCcsXHJcbiAgJy5tZScsXHJcbiAgJy5tZycsXHJcbiAgJy5taCcsXHJcbiAgJy5taycsXHJcbiAgJy5tbCcsXHJcbiAgJy5tbScsXHJcbiAgJy5tbicsXHJcbiAgJy5tbycsXHJcbiAgJy5tcCcsXHJcbiAgJy5tcScsXHJcbiAgJy5tcicsXHJcbiAgJy5tcycsXHJcbiAgJy5tdCcsXHJcbiAgJy5tdScsXHJcbiAgJy5tdicsXHJcbiAgJy5tdycsXHJcbiAgJy5teCcsXHJcbiAgJy5teScsXHJcbiAgJy5teicsXHJcbiAgJy5uYScsXHJcbiAgJy5uYycsXHJcbiAgJy5uZScsXHJcbiAgJy5uZicsXHJcbiAgJy5uZycsXHJcbiAgJy5uaScsXHJcbiAgJy5ubCcsXHJcbiAgJy5ubycsXHJcbiAgJy5ucCcsXHJcbiAgJy5ucicsXHJcbiAgJy5udScsXHJcbiAgJy5ueicsXHJcbiAgJy5vbScsXHJcbiAgJy5wYScsXHJcbiAgJy5wZScsXHJcbiAgJy5wZicsXHJcbiAgJy5wZycsXHJcbiAgJy5waCcsXHJcbiAgJy5waycsXHJcbiAgJy5wbCcsXHJcbiAgJy5wbScsXHJcbiAgJy5wbicsXHJcbiAgJy5wcicsXHJcbiAgJy5wcycsXHJcbiAgJy5wdCcsXHJcbiAgJy5wdycsXHJcbiAgJy5weScsXHJcbiAgJy5xYScsXHJcbiAgJy5yZScsXHJcbiAgJy5ybycsXHJcbiAgJy5ycycsXHJcbiAgJy5ydScsXHJcbiAgJy5ydycsXHJcbiAgJy5zYScsXHJcbiAgJy5zYicsXHJcbiAgJy5zYycsXHJcbiAgJy5zZCcsXHJcbiAgJy5zZScsXHJcbiAgJy5zZycsXHJcbiAgJy5zaCcsXHJcbiAgJy5zaScsXHJcbiAgJy5zaycsXHJcbiAgJy5zbCcsXHJcbiAgJy5zbScsXHJcbiAgJy5zbicsXHJcbiAgJy5zbycsXHJcbiAgJy5zcicsXHJcbiAgJy5zcycsXHJcbiAgJy5zdCcsXHJcbiAgJy5zdScsXHJcbiAgJy5zdicsXHJcbiAgJy5zeCcsXHJcbiAgJy5zeScsXHJcbiAgJy5zeicsXHJcbiAgJy50YycsXHJcbiAgJy50ZCcsXHJcbiAgJy50ZicsXHJcbiAgJy50ZycsXHJcbiAgJy50aCcsXHJcbiAgJy50aicsXHJcbiAgJy50aycsXHJcbiAgJy50bCcsXHJcbiAgJy50bScsXHJcbiAgJy50bicsXHJcbiAgJy50bycsXHJcbiAgJy50cicsXHJcbiAgJy50dCcsXHJcbiAgJy50dicsXHJcbiAgJy50dycsXHJcbiAgJy50eicsXHJcbiAgJy51YScsXHJcbiAgJy51ZycsXHJcbiAgJy51aycsXHJcbiAgJy51cycsXHJcbiAgJy51eScsXHJcbiAgJy51eicsXHJcbiAgJy52YScsXHJcbiAgJy52YycsXHJcbiAgJy52ZScsXHJcbiAgJy52ZycsXHJcbiAgJy52aScsXHJcbiAgJy52bicsXHJcbiAgJy52dScsXHJcbiAgJy53ZicsXHJcbiAgJy53cycsXHJcbiAgJy55ZScsXHJcbiAgJy55dCcsXHJcbiAgJy56YScsXHJcbiAgJy56bScsXHJcbiAgJy56dycsXHJcbl07XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLnJlbW92ZURpYWNyaXRpY3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIGRlZmF1bHREaWFjcml0aWNzUmVtb3ZhbE1hcC5yZWR1Y2UoKHJlc3VsdCwgbGV0dGVyKSA9PiB7XHJcbiAgICByZXR1cm4gcmVzdWx0LnJlcGxhY2UobGV0dGVyLmxldHRlcnMsIGxldHRlci5iYXNlKTtcclxuICB9LCB0aGlzKTtcclxufTtcclxuXHJcbmNvbnN0IFNQRUNJQUxfQ0hBUkFDVEVSUyA9ICdcXFxcXFxcXC8gIT9AIyQlXiYqKClfKzoue30sO1xcXFwtXFwnYGDigJnigJhcIic7XHJcblN0cmluZy5wcm90b3R5cGUucmVtb3ZlU3BlY2lhbENoYXJhY3RlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIHRoaXMucmVwbGFjZShuZXcgUmVnRXhwKGBbJHtTUEVDSUFMX0NIQVJBQ1RFUlN9XWAsICdnaScpLCAnJyk7XHJcbn07XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLnJlbW92ZUFsbEJ1dExldHRlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIHRoaXMudG9Mb3dlckNhc2UoKS5yZW1vdmVEaWFjcml0aWNzKCkucmVtb3ZlU3BlY2lhbENoYXJhY3RlcnMoKTtcclxufTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUuY29uY2VhbCA9IGZ1bmN0aW9uIChleHRyYSkge1xyXG4gIHJldHVybiB0aGlzLnJlcGxhY2UobmV3IFJlZ0V4cChgW14ke1NQRUNJQUxfQ0hBUkFDVEVSU30ke2V4dHJhfV1gLCAnZ2knKSwgJ+KBjicpO1xyXG59O1xyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5jYXBpdGFsaXplID0gZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiB0aGlzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5zbGljZSgxKTtcclxufTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUucmVtb3ZlSFRNTCA9IGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gdGhpcy5yZXBsYWNlKCc+JywgJ1xcdTIyN0InKS5yZXBsYWNlKCc8JywgJ1xcdTIyN0EnKTtcclxufTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUuYW5nbGVCcmFja2V0cyA9IGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gdGhpcy5yZXBsYWNlKCc8JywgJyZsdDsnKS5yZXBsYWNlKCc+JywgJyZndDsnKTtcclxufTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFycmF5ID0gZnVuY3Rpb24gKGZpbmQsIHJlcGxhY2UpIHtcclxuICB2YXIgcmVwbGFjZVN0cmluZyA9IHRoaXM7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaW5kLmxlbmd0aDsgaSsrKSB7XHJcbiAgICByZXBsYWNlU3RyaW5nID0gcmVwbGFjZVN0cmluZy5yZXBsYWNlKGZpbmRbaV0sIHJlcGxhY2VbaV0pO1xyXG4gIH1cclxuICByZXR1cm4gcmVwbGFjZVN0cmluZztcclxufTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUubWFza1VSTHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIHRoaXMucmVwbGFjZUFycmF5KFsnaHR0cHM6Ly8nLCAnaHR0cDovLyddLCAnbm9wZTovLycpLnJlcGxhY2VBcnJheShkb21haW5zLCAnLm5vcGUnKTtcclxufTtcclxuXHJcbk51bWJlci5wcm90b3R5cGUubWFrZVJlYWRhYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiB0aGlzLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgJywnKTtcclxufTtcclxuXHJcbk51bWJlci5wcm90b3R5cGUubWFrZVBlcmNlbnRhZ2UgPSBmdW5jdGlvbiAoZGVjaW1hbHMpIHtcclxuICBpZiAoIWRlY2ltYWxzKSBkZWNpbWFscyA9IDI7XHJcbiAgcmV0dXJuIGAkeyh0aGlzICogMTAwKS50b0ZpeGVkKGRlY2ltYWxzKX0lYDtcclxufTtcclxuXHJcbkFycmF5LnByb3RvdHlwZS5nZXRSYW5kb20gPSBmdW5jdGlvbiAobikge1xyXG4gIGlmIChuID4gdGhpcy5sZW5ndGgpIHtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkobik7XHJcbiAgbGV0IGxlbiA9IHRoaXMubGVuZ3RoO1xyXG4gIGNvbnN0IHRha2VuID0gbmV3IEFycmF5KGxlbik7XHJcbiAgd2hpbGUgKG4tLSkge1xyXG4gICAgY29uc3QgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGxlbik7XHJcbiAgICByZXN1bHRbbl0gPSB0aGlzW3ggaW4gdGFrZW4gPyB0YWtlblt4XSA6IHhdO1xyXG4gICAgdGFrZW5beF0gPSAtLWxlbiBpbiB0YWtlbiA/IHRha2VuW2xlbl0gOiBsZW47XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG5jb25zdCBzb3J0T2JqZWN0ID0gKG9iaiwgZGlyZWN0aW9uKSA9PiB7XHJcbiAgbGV0IGFyciA9IFtdO1xyXG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgYXJyLnB1c2goW2tleSwgb2JqW2tleV1dKTtcclxuICB9XHJcbiAgYXJyLnNvcnQoKGEsIGIpID0+IChkaXJlY3Rpb24gPyBhWzFdIC0gYlsxXSA6IGJbMV0gLSBhWzFdKSk7XHJcbiAgbGV0IG9ialNvcnRlZCA9IHt9O1xyXG4gIGFyci5mb3JFYWNoKChpdGVtKSA9PiAob2JqU29ydGVkW2l0ZW1bMF1dID0gaXRlbVsxXSkpO1xyXG4gIC8vYXJyLnNvcnQoZnVuY3Rpb24oYSwgYikgeyBhLnZhbHVlLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShiLnZhbHVlLnRvTG93ZXJDYXNlKCkpOyB9KTsgLy91c2UgdGhpcyB0byBzb3J0IGFzIHN0cmluZ3NcclxuICByZXR1cm4gb2JqU29ydGVkOyAvLyByZXR1cm5zIGFycmF5XHJcbn07XHJcbiIsInZhciBkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxNYXA9W3tiYXNlOlwiQVwiLGxldHRlcnM6L1tcXHUwMDQxXFx1MjRCNlxcdUZGMjFcXHUwMEMwXFx1MDBDMVxcdTAwQzJcXHUxRUE2XFx1MUVBNFxcdTFFQUFcXHUxRUE4XFx1MDBDM1xcdTAxMDBcXHUwMTAyXFx1MUVCMFxcdTFFQUVcXHUxRUI0XFx1MUVCMlxcdTAyMjZcXHUwMUUwXFx1MDBDNFxcdTAxREVcXHUxRUEyXFx1MDBDNVxcdTAxRkFcXHUwMUNEXFx1MDIwMFxcdTAyMDJcXHUxRUEwXFx1MUVBQ1xcdTFFQjZcXHUxRTAwXFx1MDEwNFxcdTAyM0FcXHUyQzZGXS9nfSx7YmFzZTpcIkFBXCIsbGV0dGVyczovW1xcdUE3MzJdL2d9LHtiYXNlOlwiQUVcIixsZXR0ZXJzOi9bXFx1MDBDNlxcdTAxRkNcXHUwMUUyXS9nfSx7YmFzZTpcIkFPXCIsbGV0dGVyczovW1xcdUE3MzRdL2d9LHtiYXNlOlwiQVVcIixsZXR0ZXJzOi9bXFx1QTczNl0vZ30se2Jhc2U6XCJBVlwiLGxldHRlcnM6L1tcXHVBNzM4XFx1QTczQV0vZ30se2Jhc2U6XCJBWVwiLGxldHRlcnM6L1tcXHVBNzNDXS9nfSx7YmFzZTpcIkJcIixsZXR0ZXJzOi9bXFx1MDA0MlxcdTI0QjdcXHVGRjIyXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MDI0M1xcdTAxODJcXHUwMTgxXS9nfSx7YmFzZTpcIkNcIixsZXR0ZXJzOi9bXFx1MDA0M1xcdTI0QjhcXHVGRjIzXFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAwQzdcXHUxRTA4XFx1MDE4N1xcdTAyM0JcXHVBNzNFXS9nfSx7YmFzZTpcIkRcIixsZXR0ZXJzOi9bXFx1MDA0NFxcdTI0QjlcXHVGRjI0XFx1MUUwQVxcdTAxMEVcXHUxRTBDXFx1MUUxMFxcdTFFMTJcXHUxRTBFXFx1MDExMFxcdTAxOEJcXHUwMThBXFx1MDE4OVxcdUE3NzldL2d9LHtiYXNlOlwiRFpcIixsZXR0ZXJzOi9bXFx1MDFGMVxcdTAxQzRdL2d9LHtiYXNlOlwiRHpcIixsZXR0ZXJzOi9bXFx1MDFGMlxcdTAxQzVdL2d9LHtiYXNlOlwiRVwiLGxldHRlcnM6L1tcXHUwMDQ1XFx1MjRCQVxcdUZGMjVcXHUwMEM4XFx1MDBDOVxcdTAwQ0FcXHUxRUMwXFx1MUVCRVxcdTFFQzRcXHUxRUMyXFx1MUVCQ1xcdTAxMTJcXHUxRTE0XFx1MUUxNlxcdTAxMTRcXHUwMTE2XFx1MDBDQlxcdTFFQkFcXHUwMTFBXFx1MDIwNFxcdTAyMDZcXHUxRUI4XFx1MUVDNlxcdTAyMjhcXHUxRTFDXFx1MDExOFxcdTFFMThcXHUxRTFBXFx1MDE5MFxcdTAxOEVdL2d9LHtiYXNlOlwiRlwiLGxldHRlcnM6L1tcXHUwMDQ2XFx1MjRCQlxcdUZGMjZcXHUxRTFFXFx1MDE5MVxcdUE3N0JdL2d9LHtiYXNlOlwiR1wiLGxldHRlcnM6L1tcXHUwMDQ3XFx1MjRCQ1xcdUZGMjdcXHUwMUY0XFx1MDExQ1xcdTFFMjBcXHUwMTFFXFx1MDEyMFxcdTAxRTZcXHUwMTIyXFx1MDFFNFxcdTAxOTNcXHVBN0EwXFx1QTc3RFxcdUE3N0VdL2d9LHtiYXNlOlwiSFwiLGxldHRlcnM6L1tcXHUwMDQ4XFx1MjRCRFxcdUZGMjhcXHUwMTI0XFx1MUUyMlxcdTFFMjZcXHUwMjFFXFx1MUUyNFxcdTFFMjhcXHUxRTJBXFx1MDEyNlxcdTJDNjdcXHUyQzc1XFx1QTc4RF0vZ30se2Jhc2U6XCJJXCIsbGV0dGVyczovW1xcdTAwNDlcXHUyNEJFXFx1RkYyOVxcdTAwQ0NcXHUwMENEXFx1MDBDRVxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMzBcXHUwMENGXFx1MUUyRVxcdTFFQzhcXHUwMUNGXFx1MDIwOFxcdTAyMEFcXHUxRUNBXFx1MDEyRVxcdTFFMkNcXHUwMTk3XS9nfSx7YmFzZTpcIkpcIixsZXR0ZXJzOi9bXFx1MDA0QVxcdTI0QkZcXHVGRjJBXFx1MDEzNFxcdTAyNDhdL2d9LHtiYXNlOlwiS1wiLGxldHRlcnM6L1tcXHUwMDRCXFx1MjRDMFxcdUZGMkJcXHUxRTMwXFx1MDFFOFxcdTFFMzJcXHUwMTM2XFx1MUUzNFxcdTAxOThcXHUyQzY5XFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTdBMl0vZ30se2Jhc2U6XCJMXCIsbGV0dGVyczovW1xcdTAwNENcXHUyNEMxXFx1RkYyQ1xcdTAxM0ZcXHUwMTM5XFx1MDEzRFxcdTFFMzZcXHUxRTM4XFx1MDEzQlxcdTFFM0NcXHUxRTNBXFx1MDE0MVxcdTAyM0RcXHUyQzYyXFx1MkM2MFxcdUE3NDhcXHVBNzQ2XFx1QTc4MF0vZ30se2Jhc2U6XCJMSlwiLGxldHRlcnM6L1tcXHUwMUM3XS9nfSx7YmFzZTpcIkxqXCIsbGV0dGVyczovW1xcdTAxQzhdL2d9LHtiYXNlOlwiTVwiLGxldHRlcnM6L1tcXHUwMDREXFx1MjRDMlxcdUZGMkRcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUyQzZFXFx1MDE5Q10vZ30se2Jhc2U6XCJOXCIsbGV0dGVyczovW1xcdTAwNEVcXHUyNEMzXFx1RkYyRVxcdTAxRjhcXHUwMTQzXFx1MDBEMVxcdTFFNDRcXHUwMTQ3XFx1MUU0NlxcdTAxNDVcXHUxRTRBXFx1MUU0OFxcdTAyMjBcXHUwMTlEXFx1QTc5MFxcdUE3QTRdL2d9LHtiYXNlOlwiTkpcIixsZXR0ZXJzOi9bXFx1MDFDQV0vZ30se2Jhc2U6XCJOalwiLGxldHRlcnM6L1tcXHUwMUNCXS9nfSx7YmFzZTpcIk9cIixsZXR0ZXJzOi9bXFx1MDA0RlxcdTI0QzRcXHVGRjJGXFx1MDBEMlxcdTAwRDNcXHUwMEQ0XFx1MUVEMlxcdTFFRDBcXHUxRUQ2XFx1MUVENFxcdTAwRDVcXHUxRTRDXFx1MDIyQ1xcdTFFNEVcXHUwMTRDXFx1MUU1MFxcdTFFNTJcXHUwMTRFXFx1MDIyRVxcdTAyMzBcXHUwMEQ2XFx1MDIyQVxcdTFFQ0VcXHUwMTUwXFx1MDFEMVxcdTAyMENcXHUwMjBFXFx1MDFBMFxcdTFFRENcXHUxRURBXFx1MUVFMFxcdTFFREVcXHUxRUUyXFx1MUVDQ1xcdTFFRDhcXHUwMUVBXFx1MDFFQ1xcdTAwRDhcXHUwMUZFXFx1MDE4NlxcdTAxOUZcXHVBNzRBXFx1QTc0Q10vZ30se2Jhc2U6XCJPSVwiLGxldHRlcnM6L1tcXHUwMUEyXS9nfSx7YmFzZTpcIk9PXCIsbGV0dGVyczovW1xcdUE3NEVdL2d9LHtiYXNlOlwiT1VcIixsZXR0ZXJzOi9bXFx1MDIyMl0vZ30se2Jhc2U6XCJQXCIsbGV0dGVyczovW1xcdTAwNTBcXHUyNEM1XFx1RkYzMFxcdTFFNTRcXHUxRTU2XFx1MDFBNFxcdTJDNjNcXHVBNzUwXFx1QTc1MlxcdUE3NTRdL2d9LHtiYXNlOlwiUVwiLGxldHRlcnM6L1tcXHUwMDUxXFx1MjRDNlxcdUZGMzFcXHVBNzU2XFx1QTc1OFxcdTAyNEFdL2d9LHtiYXNlOlwiUlwiLGxldHRlcnM6L1tcXHUwMDUyXFx1MjRDN1xcdUZGMzJcXHUwMTU0XFx1MUU1OFxcdTAxNThcXHUwMjEwXFx1MDIxMlxcdTFFNUFcXHUxRTVDXFx1MDE1NlxcdTFFNUVcXHUwMjRDXFx1MkM2NFxcdUE3NUFcXHVBN0E2XFx1QTc4Ml0vZ30se2Jhc2U6XCJTXCIsbGV0dGVyczovW1xcdTAwNTNcXHUyNEM4XFx1RkYzM1xcdTFFOUVcXHUwMTVBXFx1MUU2NFxcdTAxNUNcXHUxRTYwXFx1MDE2MFxcdTFFNjZcXHUxRTYyXFx1MUU2OFxcdTAyMThcXHUwMTVFXFx1MkM3RVxcdUE3QThcXHVBNzg0XS9nfSx7YmFzZTpcIlRcIixsZXR0ZXJzOi9bXFx1MDA1NFxcdTI0QzlcXHVGRjM0XFx1MUU2QVxcdTAxNjRcXHUxRTZDXFx1MDIxQVxcdTAxNjJcXHUxRTcwXFx1MUU2RVxcdTAxNjZcXHUwMUFDXFx1MDFBRVxcdTAyM0VcXHVBNzg2XS9nfSx7YmFzZTpcIlRaXCIsbGV0dGVyczovW1xcdUE3MjhdL2d9LHtiYXNlOlwiVVwiLGxldHRlcnM6L1tcXHUwMDU1XFx1MjRDQVxcdUZGMzVcXHUwMEQ5XFx1MDBEQVxcdTAwREJcXHUwMTY4XFx1MUU3OFxcdTAxNkFcXHUxRTdBXFx1MDE2Q1xcdTAwRENcXHUwMURCXFx1MDFEN1xcdTAxRDVcXHUwMUQ5XFx1MUVFNlxcdTAxNkVcXHUwMTcwXFx1MDFEM1xcdTAyMTRcXHUwMjE2XFx1MDFBRlxcdTFFRUFcXHUxRUU4XFx1MUVFRVxcdTFFRUNcXHUxRUYwXFx1MUVFNFxcdTFFNzJcXHUwMTcyXFx1MUU3NlxcdTFFNzRcXHUwMjQ0XS9nfSx7YmFzZTpcIlZcIixsZXR0ZXJzOi9bXFx1MDA1NlxcdTI0Q0JcXHVGRjM2XFx1MUU3Q1xcdTFFN0VcXHUwMUIyXFx1QTc1RVxcdTAyNDVdL2d9LHtiYXNlOlwiVllcIixsZXR0ZXJzOi9bXFx1QTc2MF0vZ30se2Jhc2U6XCJXXCIsbGV0dGVyczovW1xcdTAwNTdcXHUyNENDXFx1RkYzN1xcdTFFODBcXHUxRTgyXFx1MDE3NFxcdTFFODZcXHUxRTg0XFx1MUU4OFxcdTJDNzJdL2d9LHtiYXNlOlwiWFwiLGxldHRlcnM6L1tcXHUwMDU4XFx1MjRDRFxcdUZGMzhcXHUxRThBXFx1MUU4Q10vZ30se2Jhc2U6XCJZXCIsbGV0dGVyczovW1xcdTAwNTlcXHUyNENFXFx1RkYzOVxcdTFFRjJcXHUwMEREXFx1MDE3NlxcdTFFRjhcXHUwMjMyXFx1MUU4RVxcdTAxNzhcXHUxRUY2XFx1MUVGNFxcdTAxQjNcXHUwMjRFXFx1MUVGRV0vZ30se2Jhc2U6XCJaXCIsbGV0dGVyczovW1xcdTAwNUFcXHUyNENGXFx1RkYzQVxcdTAxNzlcXHUxRTkwXFx1MDE3QlxcdTAxN0RcXHUxRTkyXFx1MUU5NFxcdTAxQjVcXHUwMjI0XFx1MkM3RlxcdTJDNkJcXHVBNzYyXS9nfSx7YmFzZTpcImFcIixsZXR0ZXJzOi9bXFx1MDA2MVxcdTI0RDBcXHVGRjQxXFx1MUU5QVxcdTAwRTBcXHUwMEUxXFx1MDBFMlxcdTFFQTdcXHUxRUE1XFx1MUVBQlxcdTFFQTlcXHUwMEUzXFx1MDEwMVxcdTAxMDNcXHUxRUIxXFx1MUVBRlxcdTFFQjVcXHUxRUIzXFx1MDIyN1xcdTAxRTFcXHUwMEU0XFx1MDFERlxcdTFFQTNcXHUwMEU1XFx1MDFGQlxcdTAxQ0VcXHUwMjAxXFx1MDIwM1xcdTFFQTFcXHUxRUFEXFx1MUVCN1xcdTFFMDFcXHUwMTA1XFx1MkM2NVxcdTAyNTBdL2d9LHtiYXNlOlwiYWFcIixsZXR0ZXJzOi9bXFx1QTczM10vZ30se2Jhc2U6XCJhZVwiLGxldHRlcnM6L1tcXHUwMEU2XFx1MDFGRFxcdTAxRTNdL2d9LHtiYXNlOlwiYW9cIixsZXR0ZXJzOi9bXFx1QTczNV0vZ30se2Jhc2U6XCJhdVwiLGxldHRlcnM6L1tcXHVBNzM3XS9nfSx7YmFzZTpcImF2XCIsbGV0dGVyczovW1xcdUE3MzlcXHVBNzNCXS9nfSx7YmFzZTpcImF5XCIsbGV0dGVyczovW1xcdUE3M0RdL2d9LHtiYXNlOlwiYlwiLGxldHRlcnM6L1tcXHUwMDYyXFx1MjREMVxcdUZGNDJcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUwMTgwXFx1MDE4M1xcdTAyNTNdL2d9LHtiYXNlOlwiY1wiLGxldHRlcnM6L1tcXHUwMDYzXFx1MjREMlxcdUZGNDNcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDBFN1xcdTFFMDlcXHUwMTg4XFx1MDIzQ1xcdUE3M0ZcXHUyMTg0XS9nfSx7YmFzZTpcImRcIixsZXR0ZXJzOi9bXFx1MDA2NFxcdTI0RDNcXHVGRjQ0XFx1MUUwQlxcdTAxMEZcXHUxRTBEXFx1MUUxMVxcdTFFMTNcXHUxRTBGXFx1MDExMVxcdTAxOENcXHUwMjU2XFx1MDI1N1xcdUE3N0FdL2d9LHtiYXNlOlwiZHpcIixsZXR0ZXJzOi9bXFx1MDFGM1xcdTAxQzZdL2d9LHtiYXNlOlwiZVwiLGxldHRlcnM6L1tcXHUwMDY1XFx1MjRENFxcdUZGNDVcXHUwMEU4XFx1MDBFOVxcdTAwRUFcXHUxRUMxXFx1MUVCRlxcdTFFQzVcXHUxRUMzXFx1MUVCRFxcdTAxMTNcXHUxRTE1XFx1MUUxN1xcdTAxMTVcXHUwMTE3XFx1MDBFQlxcdTFFQkJcXHUwMTFCXFx1MDIwNVxcdTAyMDdcXHUxRUI5XFx1MUVDN1xcdTAyMjlcXHUxRTFEXFx1MDExOVxcdTFFMTlcXHUxRTFCXFx1MDI0N1xcdTAyNUJcXHUwMUREXS9nfSx7YmFzZTpcImZcIixsZXR0ZXJzOi9bXFx1MDA2NlxcdTI0RDVcXHVGRjQ2XFx1MUUxRlxcdTAxOTJcXHVBNzdDXS9nfSx7YmFzZTpcImdcIixsZXR0ZXJzOi9bXFx1MDA2N1xcdTI0RDZcXHVGRjQ3XFx1MDFGNVxcdTAxMURcXHUxRTIxXFx1MDExRlxcdTAxMjFcXHUwMUU3XFx1MDEyM1xcdTAxRTVcXHUwMjYwXFx1QTdBMVxcdTFENzlcXHVBNzdGXS9nfSx7YmFzZTpcImhcIixsZXR0ZXJzOi9bXFx1MDA2OFxcdTI0RDdcXHVGRjQ4XFx1MDEyNVxcdTFFMjNcXHUxRTI3XFx1MDIxRlxcdTFFMjVcXHUxRTI5XFx1MUUyQlxcdTFFOTZcXHUwMTI3XFx1MkM2OFxcdTJDNzZcXHUwMjY1XS9nfSx7YmFzZTpcImh2XCIsbGV0dGVyczovW1xcdTAxOTVdL2d9LHtiYXNlOlwiaVwiLGxldHRlcnM6L1tcXHUwMDY5XFx1MjREOFxcdUZGNDlcXHUwMEVDXFx1MDBFRFxcdTAwRUVcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMEVGXFx1MUUyRlxcdTFFQzlcXHUwMUQwXFx1MDIwOVxcdTAyMEJcXHUxRUNCXFx1MDEyRlxcdTFFMkRcXHUwMjY4XFx1MDEzMV0vZ30se2Jhc2U6XCJqXCIsbGV0dGVyczovW1xcdTAwNkFcXHUyNEQ5XFx1RkY0QVxcdTAxMzVcXHUwMUYwXFx1MDI0OV0vZ30se2Jhc2U6XCJrXCIsbGV0dGVyczovW1xcdTAwNkJcXHUyNERBXFx1RkY0QlxcdTFFMzFcXHUwMUU5XFx1MUUzM1xcdTAxMzdcXHUxRTM1XFx1MDE5OVxcdTJDNkFcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBN0EzXS9nfSx7YmFzZTpcImxcIixsZXR0ZXJzOi9bXFx1MDA2Q1xcdTI0REJcXHVGRjRDXFx1MDE0MFxcdTAxM0FcXHUwMTNFXFx1MUUzN1xcdTFFMzlcXHUwMTNDXFx1MUUzRFxcdTFFM0JcXHUwMTdGXFx1MDE0MlxcdTAxOUFcXHUwMjZCXFx1MkM2MVxcdUE3NDlcXHVBNzgxXFx1QTc0N10vZ30se2Jhc2U6XCJsalwiLGxldHRlcnM6L1tcXHUwMUM5XS9nfSx7YmFzZTpcIm1cIixsZXR0ZXJzOi9bXFx1MDA2RFxcdTI0RENcXHVGRjREXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MDI3MVxcdTAyNkZdL2d9LHtiYXNlOlwiblwiLGxldHRlcnM6L1tcXHUwMDZFXFx1MjRERFxcdUZGNEVcXHUwMUY5XFx1MDE0NFxcdTAwRjFcXHUxRTQ1XFx1MDE0OFxcdTFFNDdcXHUwMTQ2XFx1MUU0QlxcdTFFNDlcXHUwMTlFXFx1MDI3MlxcdTAxNDlcXHVBNzkxXFx1QTdBNV0vZ30se2Jhc2U6XCJualwiLGxldHRlcnM6L1tcXHUwMUNDXS9nfSx7YmFzZTpcIm9cIixsZXR0ZXJzOi9bXFx1MDA2RlxcdTI0REVcXHVGRjRGXFx1MDBGMlxcdTAwRjNcXHUwMEY0XFx1MUVEM1xcdTFFRDFcXHUxRUQ3XFx1MUVENVxcdTAwRjVcXHUxRTREXFx1MDIyRFxcdTFFNEZcXHUwMTREXFx1MUU1MVxcdTFFNTNcXHUwMTRGXFx1MDIyRlxcdTAyMzFcXHUwMEY2XFx1MDIyQlxcdTFFQ0ZcXHUwMTUxXFx1MDFEMlxcdTAyMERcXHUwMjBGXFx1MDFBMVxcdTFFRERcXHUxRURCXFx1MUVFMVxcdTFFREZcXHUxRUUzXFx1MUVDRFxcdTFFRDlcXHUwMUVCXFx1MDFFRFxcdTAwRjhcXHUwMUZGXFx1MDI1NFxcdUE3NEJcXHVBNzREXFx1MDI3NV0vZ30se2Jhc2U6XCJvaVwiLGxldHRlcnM6L1tcXHUwMUEzXS9nfSx7YmFzZTpcIm91XCIsbGV0dGVyczovW1xcdTAyMjNdL2d9LHtiYXNlOlwib29cIixsZXR0ZXJzOi9bXFx1QTc0Rl0vZ30se2Jhc2U6XCJwXCIsbGV0dGVyczovW1xcdTAwNzBcXHUyNERGXFx1RkY1MFxcdTFFNTVcXHUxRTU3XFx1MDFBNVxcdTFEN0RcXHVBNzUxXFx1QTc1M1xcdUE3NTVdL2d9LHtiYXNlOlwicVwiLGxldHRlcnM6L1tcXHUwMDcxXFx1MjRFMFxcdUZGNTFcXHUwMjRCXFx1QTc1N1xcdUE3NTldL2d9LHtiYXNlOlwiclwiLGxldHRlcnM6L1tcXHUwMDcyXFx1MjRFMVxcdUZGNTJcXHUwMTU1XFx1MUU1OVxcdTAxNTlcXHUwMjExXFx1MDIxM1xcdTFFNUJcXHUxRTVEXFx1MDE1N1xcdTFFNUZcXHUwMjREXFx1MDI3RFxcdUE3NUJcXHVBN0E3XFx1QTc4M10vZ30se2Jhc2U6XCJzXCIsbGV0dGVyczovW1xcdTAwNzNcXHUyNEUyXFx1RkY1M1xcdTAwREZcXHUwMTVCXFx1MUU2NVxcdTAxNURcXHUxRTYxXFx1MDE2MVxcdTFFNjdcXHUxRTYzXFx1MUU2OVxcdTAyMTlcXHUwMTVGXFx1MDIzRlxcdUE3QTlcXHVBNzg1XFx1MUU5Ql0vZ30se2Jhc2U6XCJ0XCIsbGV0dGVyczovW1xcdTAwNzRcXHUyNEUzXFx1RkY1NFxcdTFFNkJcXHUxRTk3XFx1MDE2NVxcdTFFNkRcXHUwMjFCXFx1MDE2M1xcdTFFNzFcXHUxRTZGXFx1MDE2N1xcdTAxQURcXHUwMjg4XFx1MkM2NlxcdUE3ODddL2d9LHtiYXNlOlwidHpcIixsZXR0ZXJzOi9bXFx1QTcyOV0vZ30se2Jhc2U6XCJ1XCIsbGV0dGVyczovW1xcdTAwNzVcXHUyNEU0XFx1RkY1NVxcdTAwRjlcXHUwMEZBXFx1MDBGQlxcdTAxNjlcXHUxRTc5XFx1MDE2QlxcdTFFN0JcXHUwMTZEXFx1MDBGQ1xcdTAxRENcXHUwMUQ4XFx1MDFENlxcdTAxREFcXHUxRUU3XFx1MDE2RlxcdTAxNzFcXHUwMUQ0XFx1MDIxNVxcdTAyMTdcXHUwMUIwXFx1MUVFQlxcdTFFRTlcXHUxRUVGXFx1MUVFRFxcdTFFRjFcXHUxRUU1XFx1MUU3M1xcdTAxNzNcXHUxRTc3XFx1MUU3NVxcdTAyODldL2d9LHtiYXNlOlwidlwiLGxldHRlcnM6L1tcXHUwMDc2XFx1MjRFNVxcdUZGNTZcXHUxRTdEXFx1MUU3RlxcdTAyOEJcXHVBNzVGXFx1MDI4Q10vZ30se2Jhc2U6XCJ2eVwiLGxldHRlcnM6L1tcXHVBNzYxXS9nfSx7YmFzZTpcIndcIixsZXR0ZXJzOi9bXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzNdL2d9LHtiYXNlOlwieFwiLGxldHRlcnM6L1tcXHUwMDc4XFx1MjRFN1xcdUZGNThcXHUxRThCXFx1MUU4RF0vZ30se2Jhc2U6XCJ5XCIsbGV0dGVyczovW1xcdTAwNzlcXHUyNEU4XFx1RkY1OVxcdTFFRjNcXHUwMEZEXFx1MDE3N1xcdTFFRjlcXHUwMjMzXFx1MUU4RlxcdTAwRkZcXHUxRUY3XFx1MUU5OVxcdTFFRjVcXHUwMUI0XFx1MDI0RlxcdTFFRkZdL2d9LHtiYXNlOlwielwiLGxldHRlcnM6L1tcXHUwMDdBXFx1MjRFOVxcdUZGNUFcXHUwMTdBXFx1MUU5MVxcdTAxN0NcXHUwMTdFXFx1MUU5M1xcdTFFOTVcXHUwMUI2XFx1MDIyNVxcdTAyNDBcXHUyQzZDXFx1QTc2M10vZ31dLGRvbWFpbnM9W1wiLmNvbVwiLFwiLm9yZ1wiLFwiLm5ldFwiLFwiLmFjXCIsXCIuYWRcIixcIi5hZVwiLFwiLmFmXCIsXCIuYWdcIixcIi5haVwiLFwiLmFsXCIsXCIuYW1cIixcIi5hb1wiLFwiLmFxXCIsXCIuYXJcIixcIi5hc1wiLFwiLmF0XCIsXCIuYXVcIixcIi5hd1wiLFwiLmF4XCIsXCIuYXpcIixcIi5iYVwiLFwiLmJiXCIsXCIuYmRcIixcIi5iZVwiLFwiLmJmXCIsXCIuYmdcIixcIi5iaFwiLFwiLmJpXCIsXCIuYmpcIixcIi5ibVwiLFwiLmJuXCIsXCIuYm9cIixcIi5icVwiLFwiLmJyXCIsXCIuYnNcIixcIi5idFwiLFwiLmJ3XCIsXCIuYnlcIixcIi5ielwiLFwiLmNhXCIsXCIuY2NcIixcIi5jZFwiLFwiLmNmXCIsXCIuY2dcIixcIi5jaFwiLFwiLmNpXCIsXCIuY2tcIixcIi5jbFwiLFwiLmNtXCIsXCIuY25cIixcIi5jb1wiLFwiLmNyXCIsXCIuY3VcIixcIi5jdlwiLFwiLmN3XCIsXCIuY3hcIixcIi5jeVwiLFwiLmN6XCIsXCIuZGVcIixcIi5kalwiLFwiLmRrXCIsXCIuZG1cIixcIi5kb1wiLFwiLmR6XCIsXCIuZWNcIixcIi5lZVwiLFwiLmVnXCIsXCIuZWhcIixcIi5lclwiLFwiLmVzXCIsXCIuZXRcIixcIi5ldVwiLFwiLmZpXCIsXCIuZmpcIixcIi5ma1wiLFwiLmZtXCIsXCIuZm9cIixcIi5mclwiLFwiLmdhXCIsXCIuZ2RcIixcIi5nZVwiLFwiLmdmXCIsXCIuZ2dcIixcIi5naFwiLFwiLmdpXCIsXCIuZ2xcIixcIi5nbVwiLFwiLmduXCIsXCIuZ3BcIixcIi5ncVwiLFwiLmdyXCIsXCIuZ3NcIixcIi5ndFwiLFwiLmd1XCIsXCIuZ3dcIixcIi5neVwiLFwiLmhrXCIsXCIuaG1cIixcIi5oblwiLFwiLmhyXCIsXCIuaHRcIixcIi5odVwiLFwiLmlkXCIsXCIuaWVcIixcIi5pbFwiLFwiLmltXCIsXCIuaW5cIixcIi5pb1wiLFwiLmlxXCIsXCIuaXJcIixcIi5pc1wiLFwiLml0XCIsXCIuamVcIixcIi5qbVwiLFwiLmpvXCIsXCIuanBcIixcIi5rZVwiLFwiLmtnXCIsXCIua2hcIixcIi5raVwiLFwiLmttXCIsXCIua25cIixcIi5rcFwiLFwiLmtyXCIsXCIua3dcIixcIi5reVwiLFwiLmt6XCIsXCIubGFcIixcIi5sYlwiLFwiLmxjXCIsXCIubGlcIixcIi5sa1wiLFwiLmxyXCIsXCIubHNcIixcIi5sdFwiLFwiLmx1XCIsXCIubHZcIixcIi5seVwiLFwiLm1hXCIsXCIubWNcIixcIi5tZFwiLFwiLm1lXCIsXCIubWdcIixcIi5taFwiLFwiLm1rXCIsXCIubWxcIixcIi5tbVwiLFwiLm1uXCIsXCIubW9cIixcIi5tcFwiLFwiLm1xXCIsXCIubXJcIixcIi5tc1wiLFwiLm10XCIsXCIubXVcIixcIi5tdlwiLFwiLm13XCIsXCIubXhcIixcIi5teVwiLFwiLm16XCIsXCIubmFcIixcIi5uY1wiLFwiLm5lXCIsXCIubmZcIixcIi5uZ1wiLFwiLm5pXCIsXCIubmxcIixcIi5ub1wiLFwiLm5wXCIsXCIubnJcIixcIi5udVwiLFwiLm56XCIsXCIub21cIixcIi5wYVwiLFwiLnBlXCIsXCIucGZcIixcIi5wZ1wiLFwiLnBoXCIsXCIucGtcIixcIi5wbFwiLFwiLnBtXCIsXCIucG5cIixcIi5wclwiLFwiLnBzXCIsXCIucHRcIixcIi5wd1wiLFwiLnB5XCIsXCIucWFcIixcIi5yZVwiLFwiLnJvXCIsXCIucnNcIixcIi5ydVwiLFwiLnJ3XCIsXCIuc2FcIixcIi5zYlwiLFwiLnNjXCIsXCIuc2RcIixcIi5zZVwiLFwiLnNnXCIsXCIuc2hcIixcIi5zaVwiLFwiLnNrXCIsXCIuc2xcIixcIi5zbVwiLFwiLnNuXCIsXCIuc29cIixcIi5zclwiLFwiLnNzXCIsXCIuc3RcIixcIi5zdVwiLFwiLnN2XCIsXCIuc3hcIixcIi5zeVwiLFwiLnN6XCIsXCIudGNcIixcIi50ZFwiLFwiLnRmXCIsXCIudGdcIixcIi50aFwiLFwiLnRqXCIsXCIudGtcIixcIi50bFwiLFwiLnRtXCIsXCIudG5cIixcIi50b1wiLFwiLnRyXCIsXCIudHRcIixcIi50dlwiLFwiLnR3XCIsXCIudHpcIixcIi51YVwiLFwiLnVnXCIsXCIudWtcIixcIi51c1wiLFwiLnV5XCIsXCIudXpcIixcIi52YVwiLFwiLnZjXCIsXCIudmVcIixcIi52Z1wiLFwiLnZpXCIsXCIudm5cIixcIi52dVwiLFwiLndmXCIsXCIud3NcIixcIi55ZVwiLFwiLnl0XCIsXCIuemFcIixcIi56bVwiLFwiLnp3XCJdO1N0cmluZy5wcm90b3R5cGUucmVtb3ZlRGlhY3JpdGljcz1mdW5jdGlvbigpe3JldHVybiBkZWZhdWx0RGlhY3JpdGljc1JlbW92YWxNYXAucmVkdWNlKChyZXN1bHQsbGV0dGVyKT0+cmVzdWx0LnJlcGxhY2UobGV0dGVyLmxldHRlcnMsbGV0dGVyLmJhc2UpLHRoaXMpfTtjb25zdCBTUEVDSUFMX0NIQVJBQ1RFUlM9XCJcXFxcXFxcXC8gIT9AIyQlXiYqKClfKzoue30sO1xcXFwtJ2Bg4oCZ4oCYXFxcIlwiO1N0cmluZy5wcm90b3R5cGUucmVtb3ZlU3BlY2lhbENoYXJhY3RlcnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXBsYWNlKG5ldyBSZWdFeHAoYFske1NQRUNJQUxfQ0hBUkFDVEVSU31dYCxcImdpXCIpLFwiXCIpfSxTdHJpbmcucHJvdG90eXBlLnJlbW92ZUFsbEJ1dExldHRlcnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b0xvd2VyQ2FzZSgpLnJlbW92ZURpYWNyaXRpY3MoKS5yZW1vdmVTcGVjaWFsQ2hhcmFjdGVycygpfSxTdHJpbmcucHJvdG90eXBlLmNvbmNlYWw9ZnVuY3Rpb24oZXh0cmEpe3JldHVybiB0aGlzLnJlcGxhY2UobmV3IFJlZ0V4cChgW14ke1NQRUNJQUxfQ0hBUkFDVEVSU30ke2V4dHJhfV1gLFwiZ2lcIiksXCLigY5cIil9LFN0cmluZy5wcm90b3R5cGUuY2FwaXRhbGl6ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3RoaXMuc2xpY2UoMSl9LFN0cmluZy5wcm90b3R5cGUucmVtb3ZlSFRNTD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcGxhY2UoXCI+XCIsXCLiibtcIikucmVwbGFjZShcIjxcIixcIuKJulwiKX0sU3RyaW5nLnByb3RvdHlwZS5hbmdsZUJyYWNrZXRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVwbGFjZShcIjxcIixcIiZsdDtcIikucmVwbGFjZShcIj5cIixcIiZndDtcIil9LFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFycmF5PWZ1bmN0aW9uKGZpbmQscmVwbGFjZSl7Zm9yKHZhciByZXBsYWNlU3RyaW5nPXRoaXMsaT0wO2k8ZmluZC5sZW5ndGg7aSsrKXJlcGxhY2VTdHJpbmc9cmVwbGFjZVN0cmluZy5yZXBsYWNlKGZpbmRbaV0scmVwbGFjZVtpXSk7cmV0dXJuIHJlcGxhY2VTdHJpbmd9LFN0cmluZy5wcm90b3R5cGUubWFza1VSTHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXBsYWNlQXJyYXkoW1wiaHR0cHM6Ly9cIixcImh0dHA6Ly9cIl0sXCJub3BlOi8vXCIpLnJlcGxhY2VBcnJheShkb21haW5zLFwiLm5vcGVcIil9LE51bWJlci5wcm90b3R5cGUubWFrZVJlYWRhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLFwiLFwiKX0sTnVtYmVyLnByb3RvdHlwZS5tYWtlUGVyY2VudGFnZT1mdW5jdGlvbihkZWNpbWFscyl7cmV0dXJuIGRlY2ltYWxzfHwoZGVjaW1hbHM9MiksKDEwMCp0aGlzKS50b0ZpeGVkKGRlY2ltYWxzKStcIiVcIn0sQXJyYXkucHJvdG90eXBlLmdldFJhbmRvbT1mdW5jdGlvbihuKXtpZihuPnRoaXMubGVuZ3RoKXJldHVybiB0aGlzO2NvbnN0IHJlc3VsdD1uZXcgQXJyYXkobik7bGV0IGxlbj10aGlzLmxlbmd0aDtjb25zdCB0YWtlbj1uZXcgQXJyYXkobGVuKTtmb3IoO24tLTspe2NvbnN0IHg9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmxlbik7cmVzdWx0W25dPXRoaXNbeCBpbiB0YWtlbj90YWtlblt4XTp4XSx0YWtlblt4XT0tLWxlbiBpbiB0YWtlbj90YWtlbltsZW5dOmxlbn1yZXR1cm4gcmVzdWx0fTtjb25zdCBzb3J0T2JqZWN0PShvYmosZGlyZWN0aW9uKT0+e2xldCBhcnI9W107Zm9yKGNvbnN0IGtleSBpbiBvYmopYXJyLnB1c2goW2tleSxvYmpba2V5XV0pO2Fyci5zb3J0KChhLGIpPT5kaXJlY3Rpb24/YVsxXS1iWzFdOmJbMV0tYVsxXSk7bGV0IG9ialNvcnRlZD17fTtyZXR1cm4gYXJyLmZvckVhY2goaXRlbT0+b2JqU29ydGVkW2l0ZW1bMF1dPWl0ZW1bMV0pLG9ialNvcnRlZH07YW5ndWxhci5tb2R1bGUoXCJhcHBcIixbXCJ1aS5yb3V0ZXJcIixcInVpLmJvb3RzdHJhcFwiLFwibmdBbmltYXRlXCIsXCJuZ1Nhbml0aXplXCIsXCJuZ0RyYWdEcm9wXCIsXCJuZ1RhZ3NJbnB1dFwiLFwidmNSZWNhcHRjaGFcIixcImNoYXJ0LmpzXCIsXCJ0Yy5jaGFydGpzXCJdKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb25maWcoW1wiJHN0YXRlUHJvdmlkZXJcIixcIiR1cmxSb3V0ZXJQcm92aWRlclwiLFwiJHVybFNlcnZpY2VQcm92aWRlclwiLFwiJGxvY2F0aW9uUHJvdmlkZXJcIixmdW5jdGlvbigkc3RhdGVQcm92aWRlciwkdXJsUm91dGVyUHJvdmlkZXIsJHVybFNlcnZpY2VQcm92aWRlciwkbG9jYXRpb25Qcm92aWRlcil7JHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9ob21lXCIpLCR1cmxTZXJ2aWNlUHJvdmlkZXIuY29uZmlnLnN0cmljdE1vZGUoITEpLCRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLHt1cmw6XCIvaG9tZVwiLHRlbXBsYXRlVXJsOlwiL2hvbWUuaHRtbFwifSkuc3RhdGUoXCJwb2xpY3lcIix7dXJsOlwiL3BvbGljeVwiLHRlbXBsYXRlVXJsOlwiL3BvbGljeS5odG1sXCJ9KS5zdGF0ZShcInByaW50XCIse3VybDpcIi9wcmludFwiLHRlbXBsYXRlVXJsOlwiL3ByaW50Lmh0bWxcIn0pLnN0YXRlKFwiZXhwZXJpZW5jZVwiLHt1cmw6XCIvZXhwZXJpZW5jZVwiLGNvbnRyb2xsZXI6XCJFeHBlcmllbmNlQ3RybFwiLHRlbXBsYXRlVXJsOlwiL2V4cGVyaWVuY2UuaHRtbFwifSkuc3RhdGUoXCJza2lsbHNcIix7dXJsOlwiL3NraWxsc1wiLGNvbnRyb2xsZXI6XCJTa2lsbHNDdHJsXCIsdGVtcGxhdGVVcmw6XCIvc2tpbGxzLmh0bWxcIn0pLnN0YXRlKFwiaG9iYmllc1wiLHt1cmw6XCIvaG9iYmllc1wiLGNvbnRyb2xsZXI6XCJIb2JiaWVzQ3RybFwiLHRlbXBsYXRlVXJsOlwiL2hvYmJpZXMuaHRtbFwifSkuc3RhdGUoXCJjb250YWN0XCIse3VybDpcIi9jb250YWN0XCIsY29udHJvbGxlcjpcIkNvbnRhY3RDdHJsXCIsdGVtcGxhdGVVcmw6XCIvY29udGFjdC5odG1sXCJ9KS5zdGF0ZShcIndvcmtvdXRcIix7dXJsOlwiL3dvcmtvdXRcIixjb250cm9sbGVyOlwiV29ya291dEN0cmxcIix0ZW1wbGF0ZVVybDpcIi93b3Jrb3V0Lmh0bWxcIn0pLnN0YXRlKFwicG9zdHNcIix7dXJsOlwiL3Bvc3RzXCIsY29udHJvbGxlcjpcIlBvc3RzQ3RybFwiLHRlbXBsYXRlVXJsOlwiL3Bvc3RzLmh0bWxcIn0pLnN0YXRlKFwicHJvZmlsZVwiLHt1cmw6XCIvcHJvZmlsZVwiLGNvbnRyb2xsZXI6XCJQcm9maWxlQ3RybFwiLHRlbXBsYXRlVXJsOlwiL3Byb2ZpbGUuaHRtbFwifSkuc3RhdGUoXCJsaXN0c1wiLHt1cmw6XCIvbGlzdHNcIixjb250cm9sbGVyOlwiTGlzdHNDdHJsXCIsdGVtcGxhdGVVcmw6XCJsaXN0cy5odG1sXCJ9KS5zdGF0ZShcInByaW9yaXRpemVcIix7dXJsOlwiL3ByaW9yaXRpemVcIixjb250cm9sbGVyOlwiUHJpb3JpdGl6ZUN0cmxcIix0ZW1wbGF0ZVVybDpcInByaW9yaXRpemUuaHRtbFwifSkuc3RhdGUoXCJidWJibGVzXCIse3VybDpcIi9idWJibGVzXCIsY29udHJvbGxlcjpcIkJ1YmJsZXNDdHJsXCIsdGVtcGxhdGVVcmw6XCJidWJibGVzLmh0bWxcIn0pLnN0YXRlKFwiYXN0ZXJvaWRzXCIse3VybDpcIi9hc3Rlcm9pZHNcIixjb250cm9sbGVyOlwiQXN0ZXJvaWRzQ3RybFwiLHRlbXBsYXRlVXJsOlwiYXN0ZXJvaWRzLmh0bWxcIn0pLnN0YXRlKFwibGVtbWluZ3NcIix7dXJsOlwiL2xlbW1pbmdzXCIsY29udHJvbGxlcjpcIkxlbW1pbmdzQ3RybFwiLHRlbXBsYXRlVXJsOlwibGVtbWluZ3MuaHRtbFwifSkuc3RhdGUoXCJib3RzXCIse3VybDpcIi9ib3RzXCIsY29udHJvbGxlcjpcIlRlblRoaW5nc0N0cmxcIix0ZW1wbGF0ZVVybDpcInRlbnRoaW5ncy5odG1sXCJ9KS5zdGF0ZShcInRlbnRoaW5nc1wiLHt1cmw6XCIvdGVudGhpbmdzXCIsY29udHJvbGxlcjpcIlRlblRoaW5nc0N0cmxcIix0ZW1wbGF0ZVVybDpcInRlbnRoaW5ncy5odG1sXCJ9KS5zdGF0ZShcInRlbnRoaW5ncy1hZG1pblwiLHt1cmw6XCIvdGVudGhpbmdzLWFkbWluXCIsY29udHJvbGxlcjpcIlRlblRoaW5nc0FkbWluQ3RybFwiLHRlbXBsYXRlVXJsOlwidGVudGhpbmdzLWFkbWluLmh0bWxcIn0pLnN0YXRlKFwidGVudGhpbmdzLWN1cmF0ZVwiLHt1cmw6XCIvdGVudGhpbmdzLWN1cmF0ZVwiLGNvbnRyb2xsZXI6XCJUZW5UaGluZ3NDdXJhdGVDdHJsXCIsdGVtcGxhdGVVcmw6XCJ0ZW50aGluZ3MtY3VyYXRlLmh0bWxcIn0pLnN0YXRlKFwidGVudGhpbmdzLWdhbWVcIix7dXJsOlwiL3RlbnRoaW5ncy86Z2FtZVwiLGNvbnRyb2xsZXI6XCJUZW5UaGluZ3NHYW1lQ3RybFwiLHRlbXBsYXRlVXJsOlwidGVudGhpbmdzLWdhbWUuaHRtbFwifSkuc3RhdGUoXCJxdWl6LWdvb2dsZVwiLHt1cmw6XCIvZ29vZ2xlXCIsY29udHJvbGxlcjpcIlF1aXpHb29nbGVDdHJsXCIsdGVtcGxhdGVVcmw6XCJxdWl6emVzL2dvb2dsZS5odG1sXCJ9KS5zdGF0ZShcInF1aXotbG9nb3NcIix7dXJsOlwiL2xvZ29zXCIsY29udHJvbGxlcjpcIlF1aXpMb2dvc0N0cmxcIix0ZW1wbGF0ZVVybDpcInF1aXp6ZXMvbG9nb3MuaHRtbFwifSkuc3RhdGUoXCJxdWl6LWFuaW1hbHNcIix7dXJsOlwiL2FuaW1hbHNcIixjb250cm9sbGVyOlwiUXVpekFuaW1hbHNDdHJsXCIsdGVtcGxhdGVVcmw6XCJxdWl6emVzL2FuaW1hbHMuaHRtbFwifSkuc3RhdGUoXCJxdWl6LXNrZWxldG9uc1wiLHt1cmw6XCIvc2tlbGV0b25zXCIsY29udHJvbGxlcjpcIlF1aXpTa2VsZXRvbnNDdHJsXCIsdGVtcGxhdGVVcmw6XCJxdWl6emVzL3NrZWxldG9ucy5odG1sXCJ9KS5zdGF0ZShcInF1aXotbW92aWVzXCIse3VybDpcIi9tb3ZpZXNcIixjb250cm9sbGVyOlwiUXVpek1vdmllc0N0cmxcIix0ZW1wbGF0ZVVybDpcInF1aXp6ZXMvbW92aWVzLmh0bWxcIn0pLnN0YXRlKFwiY2hhcmFkZXNcIix7dXJsOlwiL2NoYXJhZGVzXCIsY29udHJvbGxlcjpcIkNoYXJhZGVzQ3RybFwiLHRlbXBsYXRlVXJsOlwiL2NoYXJhZGVzLmh0bWxcIn0pLCRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh7ZW5hYmxlZDohMCxyZXF1aXJlQmFzZTohMX0pfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJXZWJTb2NrZXRTdmNcIixbXCIkcm9vdFNjb3BlXCIsXCIkdGltZW91dFwiLGZ1bmN0aW9uKCRyb290U2NvcGUsJHRpbWVvdXQpe3ZhciBjb25uZWN0aW9uLGNvbm5lY3Q9ZnVuY3Rpb24oKXsoY29ubmVjdGlvbj1uZXcgV2ViU29ja2V0KFwiaHR0cHM6XCI9PT13aW5kb3cubG9jYXRpb24ucHJvdG9jb2w/XCJ3c3M6Ly9cIit3aW5kb3cubG9jYXRpb24uaG9zdDpcIndzOi8vXCIrd2luZG93LmxvY2F0aW9uLmhvc3QpKS5vbm9wZW49ZnVuY3Rpb24oKXtjb25zb2xlLmxvZyhcIldlYnNvY2tldCBjb25uZWN0ZWRcIil9LGNvbm5lY3Rpb24ub25jbG9zZT1mdW5jdGlvbihlKXtjb25zb2xlLmxvZyhcIldlYnNvY2tldCBjbG9zZWQuIFJlY29ubmVjdGluZy4uLlwiKSwkdGltZW91dChjb25uZWN0LDFlMyl9LGNvbm5lY3Rpb24ub25lcnJvcj1mdW5jdGlvbihlKXtjb25zb2xlLmxvZyhcIkVycm9yOiBcIitlK1wiIC0gU3RhdGU6IFwiK2Nvbm5lY3Rpb24ucmVhZHlTdGF0ZSl9LGNvbm5lY3Rpb24ub25tZXNzYWdlPWZ1bmN0aW9uKGUpe3ZhciBwYXlsb2FkPUpTT04ucGFyc2UoZS5kYXRhKTskcm9vdFNjb3BlLiRicm9hZGNhc3QoXCJ3czpcIitwYXlsb2FkLnRvcGljLHBheWxvYWQuZGF0YSl9fTt0aGlzLnNlbmQ9ZnVuY3Rpb24odG9waWMsZGF0YSl7dmFyIGpzb249SlNPTi5zdHJpbmdpZnkoe3RvcGljLGRhdGF9KTtjb25uZWN0aW9uLnNlbmQoanNvbil9LHRoaXMuY29ubmVjdD1jb25uZWN0fV0pLnJ1bihbXCJXZWJTb2NrZXRTdmNcIixmdW5jdGlvbihXZWJTb2NrZXRTdmMpe1dlYlNvY2tldFN2Yy5jb25uZWN0KCl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkFwcEN0cmxcIixbXCIkc2NvcGVcIixcIiRsb2NhdGlvblwiLFwiTGFuZ3VhZ2VTdmNcIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLExhbmd1YWdlU3ZjLFVzZXJTdmMpe2Z1bmN0aW9uIGxvZ2luKHVzZXIpeyRzY29wZS5sb2dnZWRJbnx8KHdpbmRvdy5sb2NhbFN0b3JhZ2UudXNlcj11c2VyLl9pZCwkc2NvcGUubG9nZ2VkSW49ITAsJHNjb3BlLmN1cnJlbnRVc2VyPXVzZXIsJHNjb3BlLiRicm9hZGNhc3QoXCJsb2dpblwiKSl9Y29uc29sZS5sb2coXCIlY1lvdSBzbmVha3kgYnVnZ2VyIVwiLFwiZm9udDogMmVtIHNhbnMtc2VyaWY7IGNvbG9yOiBEb2RnZXJCbHVlOyB0ZXh0LXNoYWRvdzogMnB4IDAgMCAjNDQ0LCAtMnB4IDAgMCAjNDQ0LCAwIDJweCAwICM0NDQsIDAgLTJweCAwICM0NDQsIDFweCAxcHggIzQ0NCwgLTFweCAtMXB4IDAgIzQ0NCwgMXB4IC0xcHggMCAjNDQ0LCAtMXB4IDFweCAwICM0NDQ7XCIpLGNvbnNvbGUubG9nKFwiSSdtIGdsYWQgeW91J3JlIGN1cmlvdXMgd2hldGhlciBzb21ldGhpbmcgaXMgcG9wcGluZyB1cCBpbiBoZXJlLiBJJ20gYSBiaXQgb2YgYSBzdGlja2xlciB3aGVuIGl0IGNvbWVzIHRvIG1lc3NhZ2VzIGluIHRoZSBjb25zb2xlIHNvIEkgdHJ5IHRvIG1ha2Ugc3VyZSBvbmx5IHRoaW5ncyBJIHdhbnQgYXJlIHZpc2libGUuIFRoYXQgYmVpbmcgc2FpZCwgaWYgdGhlcmUgaXMgYSBiaWcgZXJyb3IgaGVyZSwgSSB3b3VsZCByZWFsbHkgYXBwcmVjaWF0ZSB5b3UgdGVsbGluZyBtZSBzbyBJIGNhbiBnZXQgcmlkIG9mIGl0IVwiKSxjb25zb2xlLmxvZyhcIlRoZSBjb2RlIGZvciBteSByZXN1bWUgaXMgaG9zdGVkIG9uIEdpdGh1YiBpZiB5b3UgcmVhbGx5IHdhbnQgdG8gZ28gaW50byBhbGwgdGhpcyEgPT4gaHR0cHM6Ly9naXRodWIuY29tL0ZsYW5kZXJzQnVyZ2VyL3Jlc3VtZVwiKSwkKHdpbmRvdykubG9hZCgoZnVuY3Rpb24oKXskKFwiLmxvYWRpbmdcIikuZmFkZU91dChcInNsb3dcIiksJChcIi5jb250ZW50XCIpLmZhZGVJbihcInNsb3dcIil9KSksJHNjb3BlLnRoZW1lQ291bnRlcj02LCRzY29wZS50b2RheT1uZXcgRGF0ZSwkc2NvcGUueWVhcj0kc2NvcGUudG9kYXkuZ2V0RnVsbFllYXIoKSwkc2NvcGUucmFuZG9tPU1hdGguZmxvb3IoMWU2Kk1hdGgucmFuZG9tKCkpLCRzY29wZS5mbGlwVGhlbWU9ZnVuY3Rpb24oKXskKFwiLmxvYWRpbmdcIikuc2hvdygpLCQoXCIuY29udGVudFwiKS5oaWRlKCksc2V0VGltZW91dCgoZnVuY3Rpb24oKXskKFwiLmxvYWRpbmdcIikuZmFkZU91dChcInNsb3dcIiksJChcIi5jb250ZW50XCIpLmZhZGVJbihcInNsb3dcIil9KSw4MDApLCRzY29wZS50aGVtZUNvdW50ZXI9JHNjb3BlLnRoZW1lQ291bnRlcjw2PyRzY29wZS50aGVtZUNvdW50ZXIrMTokc2NvcGUudGhlbWVDb3VudGVyPTF9LCQuZ2V0SlNPTihcIi9za2lsbHMuanNvblwiLChmdW5jdGlvbihkYXRhKXskc2NvcGUuc2tpbGxzPWRhdGEuZmlsdGVyKChmdW5jdGlvbihza2lsbCl7cmV0dXJuIHNraWxsLmVuYWJsZWR9KSl9KSksJC5nZXRKU09OKFwiL2hvYmJpZXMuanNvblwiLChmdW5jdGlvbihkYXRhKXskc2NvcGUuaG9iYmllcz1kYXRhfSkpLCQuZ2V0SlNPTihcIi9leHBlcmllbmNlLmpzb25cIiwoZnVuY3Rpb24oZGF0YSl7JHNjb3BlLmpvYnM9ZGF0YSwkc2NvcGUuam9icy5mb3JFYWNoKChmdW5jdGlvbihqb2Ipe2pvYi5zdGFydERhdGU9bmV3IERhdGUoam9iLnN0YXJ0RGF0ZSksam9iLmVuZERhdGUmJihqb2IuZW5kRGF0ZT1uZXcgRGF0ZShqb2IuZW5kRGF0ZSkpfSkpfSkpLCQuZ2V0SlNPTihcIi9jaGFyYWRlcy5qc29uXCIsKGZ1bmN0aW9uKGRhdGEpeyRzY29wZS5jaGFyYWRlcz1kYXRhfSkpLCRzY29wZS5nZXRUaW1lU3Bhbj1mdW5jdGlvbihqb2Ipe3JldHVybiBqb2Iuc3RhcnREYXRlLmdldEZ1bGxZZWFyKCkrKGpvYi5lbmREYXRlP1wiIC0gXCIram9iLmVuZERhdGUuZ2V0RnVsbFllYXIoKTpcIiAtIFRvZGF5XCIpfSwkc2NvcGUubGFuZ3VhZ2VzPUxhbmd1YWdlU3ZjLmxhbmd1YWdlcywkc2NvcGUuc2VsZWN0ZWRMYW5ndWFnZT1MYW5ndWFnZVN2Yy5nZXRMYW5ndWFnZSgpLCRzY29wZS5zZWxlY3RMYW5ndWFnZT1mdW5jdGlvbihsYW5ndWFnZSl7JHNjb3BlLnNlbGVjdGVkTGFuZ3VhZ2U9TGFuZ3VhZ2VTdmMuc2V0TGFuZ3VhZ2UobGFuZ3VhZ2UpfSwkc2NvcGUuaG92ZXJkaXY9ZnVuY3Rpb24oZSxkaXZpZCl7dmFyIGxlZnQ9ZS5jbGllbnRYK1wicHhcIix0b3A9ZS5jbGllbnRZKzIwK1wicHhcIjtkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaXZpZCk7cmV0dXJuICQoXCIjXCIrZGl2aWQpLmNzcyhcImxlZnRcIixsZWZ0KSwkKFwiI1wiK2RpdmlkKS5jc3MoXCJ0b3BcIix0b3ApLCQoXCIjXCIrZGl2aWQpLnRvZ2dsZSgpLCExfSwkc2NvcGUuc29jaWFsTWVkaWE9W3tuYW1lOlwibGlua2VkaW5cIix1cmw6XCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vbGF1cmVudC1kZWJhY2tlci0xNjMzYTkxNlwiLGljb246XCJmYS1saW5rZWRpblwifSx7bmFtZTpcImdpdGh1YlwiLHVybDpcImh0dHBzOi8vZ2l0aHViLmNvbS9GbGFuZGVyc0J1cmdlclwiLGljb246XCJmYS1naXRodWJcIn0se25hbWU6XCJqc2ZpZGRsZVwiLHVybDpcImh0dHBzOi8vanNmaWRkbGUubmV0L3VzZXIvQmVsZ29DYW5hZGlhbi9maWRkbGVzL1wiLGljb246XCJmYS1qc2ZpZGRsZVwifSx7bmFtZTpcInN0YWNrb3ZlcmZsb3dcIix1cmw6XCJodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTA4MzkyMy9iZWxnb2NhbmFkaWFuXCIsaWNvbjpcImZhLXN0YWNrLW92ZXJmbG93XCJ9XSx3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXImJlVzZXJTdmMubG9naW4od2luZG93LmxvY2FsU3RvcmFnZS51c2VyKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7bG9naW4ocmVzcG9uc2UuZGF0YSl9KSksJHNjb3BlLiRvbihcImxvZ2luXCIsKGZ1bmN0aW9uKF8sdXNlcil7bG9naW4odXNlcil9KSksJHNjb3BlLiRvbihcInVwZGF0ZVwiLChmdW5jdGlvbihfLHVzZXIpeyRzY29wZS5jdXJyZW50VXNlcj11c2VyLCRzY29wZS5jdXJyZW50VXNlci5iaXJ0aERhdGU9bmV3IERhdGUoJHNjb3BlLmN1cnJlbnRVc2VyLmJpcnRoRGF0ZSksJHNjb3BlLmxvYWRpbmc9ITEsc2V0VGltZW91dCgoZnVuY3Rpb24oKXskKFwiI2xvYWRpbmctaWNvblwiKS5mYWRlT3V0KFwic2xvd1wiKX0pLDFlMyl9KSksJHNjb3BlLiRvbihcImxvYWRpbmdcIiwoZnVuY3Rpb24oXyx1c2VyKXskc2NvcGUubG9hZGluZz0hMCwkKFwiI2xvYWRpbmctaWNvblwiKS5zaG93KCl9KSksJHNjb3BlLiRvbihcImxvYWRlZFwiLChmdW5jdGlvbihfLHVzZXIpeyRzY29wZS5sb2FkaW5nPSExLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7JChcIiNsb2FkaW5nLWljb25cIikuZmFkZU91dChcInNsb3dcIil9KSwxZTMpfSkpLCRzY29wZS5sb2dvdXQ9ZnVuY3Rpb24oKXtmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpLnRoZW4oKGZ1bmN0aW9uKCl7JHNjb3BlLmxvZ2dlZEluPSExLHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKSwkc2NvcGUuJGJyb2FkY2FzdChcImxvZ291dFwiKX0pKS5jYXRjaCgoZnVuY3Rpb24oZXJyb3Ipe30pKX0sJHNjb3BlLmZvcm1hdERhdGU9ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuKGRhdGU9bmV3IERhdGUoZGF0ZSkpLmdldERhdGUoKStcIi1cIitbXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCJdW2RhdGUuZ2V0TW9udGgoKV0rXCItXCIrZGF0ZS5nZXRGdWxsWWVhcigpfSxTdHJpbmcucHJvdG90eXBlLmNhcGl0YWxpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0aGlzLnNsaWNlKDEpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQXN0ZXJvaWRzQ3RybFwiLFtcIiRzY29wZVwiLFwiR2FtZVN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxHYW1lU3ZjKXskc2NvcGUuYW5ub3VuY2U9ITE7dmFyIGNhbnZhcz1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFzdGVyb2lkcy1wYWdlXCIpLGN0eD1jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO2N0eC5mb250PVwiMzBweCBDb21pYyBTYW5zIE1TXCIsY3R4LmZpbGxTdHlsZT1cInJlZFwiLGN0eC50ZXh0QWxpZ249XCJjZW50ZXJcIjt2YXIgc2hvdHM9e30sYXN0ZXJvaWRzPXt9LHBvd2VydXBzPXt9LGV4cGxvc2lvbnM9e30sbWFwPXt9LHNwYWNlPU1hdGguZmxvb3IoMTAqTWF0aC5yYW5kb20oKSkscG93ZXJ1cFR5cGVzPVt7bmFtZTpcInNwZWVkXCIsYW5ub3VuY2VtZW50OlwiTWF4IFNwZWVkIOKHp1wiLGN5Y2xlOntyb3dzOjEsY29sdW1uczo0LHNpemU6WzE0LDM1XSxpOjAsZGlyZWN0aW9uOiEwfSxpbWc6bmV3IEltYWdlLGFjdGl2YXRlOmZ1bmN0aW9uKHNwYWNlc2hpcCl7c3BhY2VzaGlwLm1heFNwZWVkKz0xMDB9fSx7bmFtZTpcImNvb2xkb3duXCIsYW5ub3VuY2VtZW50OlwiQ29vbGRvd24g4oepXCIsY3ljbGU6e3Jvd3M6MSxjb2x1bW5zOjMsc2l6ZTpbMTcsMTddLGk6MCxkaXJlY3Rpb246ITB9LGltZzpuZXcgSW1hZ2UsYWN0aXZhdGU6ZnVuY3Rpb24oc3BhY2VzaGlwKXtzcGFjZXNoaXAuY29vbGRvd24+MCYmKHNwYWNlc2hpcC5jb29sZG93blRpbWUtPTEpfX0se25hbWU6XCJyYW5nZVwiLGFubm91bmNlbWVudDpcIkZpcmluZyBSYW5nZSDih6dcIixjeWNsZTp7cm93czo0LGNvbHVtbnM6MSxzaXplOlszMCw4XSxpOjAsZGlyZWN0aW9uOiEwfSxpbWc6bmV3IEltYWdlLGFjdGl2YXRlOmZ1bmN0aW9uKHNwYWNlc2hpcCl7c3BhY2VzaGlwLnJhbmdlKz01fX0se25hbWU6XCJzaGllbGRcIixhbm5vdW5jZW1lbnQ6XCJTaGllbGRcIixjeWNsZTp7cm93czo1LGNvbHVtbnM6MSxzaXplOlsxOSwxOV0saTowLGRpcmVjdGlvbjohMH0saW1nOm5ldyBJbWFnZSxhY3RpdmF0ZTpmdW5jdGlvbihzcGFjZXNoaXApe3NwYWNlc2hpcC5zaGllbGQ9ITB9fSx7bmFtZTpcIm51a2VcIixhbm5vdW5jZW1lbnQ6XCJOdWtlXCIsY3ljbGU6e3Jvd3M6MSxjb2x1bW5zOjgsc2l6ZTpbMTUsMTVdLGk6MCxkaXJlY3Rpb246ITB9LGltZzpuZXcgSW1hZ2UsYWN0aXZhdGU6ZnVuY3Rpb24oc3BhY2VzaGlwKXtmb3IodmFyIGkgaW4gYXN0ZXJvaWRzKWFzdGVyb2lkc1tpXS5leHBsb2RlKCk7c3Bhd25Bc3Rlcm9pZHMoNSl9fV07cG93ZXJ1cFR5cGVzLmZvckVhY2goKGZ1bmN0aW9uKHBvd2VydXAsaSxhcnJheSl7YXJyYXlbaV0uaW1nLnNyYz1cImFzdGVyb2lkcy9cIitwb3dlcnVwLm5hbWUrXCIucG5nXCJ9KSk7dmFyIHNwYWNlc2hpcCxleHBsb3Npb25JbWFnZT1uZXcgSW1hZ2U7ZnVuY3Rpb24gZXZhbHVhdGVLZXlzKCl7JHNjb3BlLnBsYXlpbmc/KG1hcFszMl0mJjA9PT1zcGFjZXNoaXAuY29vbGRvd24mJnNwYWNlc2hpcC5zaG9vdCgpLG1hcFszN10mJigwPT09c3BhY2VzaGlwLnJvdGF0aW9uP3NwYWNlc2hpcC5yb3RhdGlvbj0zNjA6c3BhY2VzaGlwLnJvdGF0aW9uLT0zKSxtYXBbMzldJiYoMzYwPT09c3BhY2VzaGlwLnJvdGF0aW9uP3NwYWNlc2hpcC5yb3RhdGlvbj0wOnNwYWNlc2hpcC5yb3RhdGlvbis9MyksbWFwWzM4XT9zcGFjZXNoaXAuc3BlZWQ8PXNwYWNlc2hpcC5tYXhTcGVlZCYmKHNwYWNlc2hpcC5zcGVlZCs9NSk6c3BhY2VzaGlwLnNwZWVkPjAmJnNwYWNlc2hpcC5zcGVlZC0tLG1hcFs0MF0mJnNwYWNlc2hpcC5zcGVlZD4wJiYoc3BhY2VzaGlwLnNwZWVkLT0yKSk6bWFwWzMyXSYmKCRzY29wZS5wbGF5aW5nPSEwLCRzY29wZS5zY29yZT0wLHNwYWNlPU1hdGguZmxvb3IoMTAqTWF0aC5yYW5kb20oKSksJHNjb3BlLiRhcHBseSgpLHNwYWNlc2hpcD1uZXcgU3BhY2VzaGlwLCRzY29wZS5zY29yZT0wLHNwYXduQXN0ZXJvaWRzKDUpLGZ1bmN0aW9uIGF1dG9TcGF3bigpe2lmKE9iamVjdC5rZXlzKGFzdGVyb2lkcykubGVuZ3RoPDIwMCl7dmFyIGlkPU1hdGgucm91bmQoMWU4Kk1hdGgucmFuZG9tKCkpO2FzdGVyb2lkc1tpZF09bmV3IEFzdGVyb2lkKGlkKX0kc2NvcGUucGxheWluZyYmc2V0VGltZW91dCgoZnVuY3Rpb24oKXthdXRvU3Bhd24oKX0pLCRzY29wZS5zY29yZTwxZTM/MWUzOiRzY29wZS5zY29yZTwyZTM/OTAwOiRzY29wZS5zY29yZTwzZTM/ODAwOiRzY29wZS5zY29yZTw0ZTM/NzAwOiRzY29wZS5zY29yZTw1ZTM/NjAwOiRzY29wZS5zY29yZTw2ZTM/NTAwOiRzY29wZS5zY29yZTw3ZTM/NDAwOiRzY29wZS5zY29yZTw4ZTM/MzAwOjIwMCl9KCkpfWZ1bmN0aW9uIFNwYWNlc2hpcCgpe3RoaXMud2lkdGg9NTAsdGhpcy5oZWlnaHQ9NTAsdGhpcy5zaGllbGQ9ITEsdGhpcy5yYW5nZT04MCx0aGlzLmNhbm5vbj17eDp0aGlzLndpZHRoLzItNC41LHk6dGhpcy5oZWlnaHQvMi0uMDc4MTI1KnRoaXMuaGVpZ2h0fSx0aGlzLmNvb2xkb3duPTAsdGhpcy5jb29sZG93blRpbWU9MjAsdGhpcy5wb3NpdGlvbj1bY2FudmFzLndpZHRoLzItdGhpcy53aWR0aC8yLGNhbnZhcy5oZWlnaHQvMi10aGlzLmhlaWdodC8yXSx0aGlzLmltZz1uZXcgSW1hZ2UsdGhpcy5pbWcuc3JjPVwiYXN0ZXJvaWRzL3NwYWNlc2hpcC5wbmdcIix0aGlzLnNwZWVkPTAsdGhpcy5tYXhTcGVlZD0xZTMsdGhpcy5hbmdsZT0wLHRoaXMucm90YXRpb249MCx0aGlzLnNob290PWZ1bmN0aW9uKCl7dGhpcy5jb29sZG93bj10aGlzLmNvb2xkb3duVGltZTt2YXIgaWQ9TWF0aC5yb3VuZCgxZTgqTWF0aC5yYW5kb20oKSk7c2hvdHNbaWRdPW5ldyBTaG90KGlkLHRoaXMpfSx0aGlzLm1vdmU9ZnVuY3Rpb24oKXtmb3IodmFyIGkgaW4gdGhpcy5zaGllbGQmJihjdHguYmVnaW5QYXRoKCksY3R4LmFyYyh0aGlzLnBvc2l0aW9uWzBdK3RoaXMud2lkdGgvMix0aGlzLnBvc2l0aW9uWzFdK3RoaXMuaGVpZ2h0LzIsMzAsMCwyKk1hdGguUEkpLGN0eC5maWxsU3R5bGU9XCJyZ2IoMzUsIDIzNywgODYsIDAuNSlcIixjdHguc3Ryb2tlU3R5bGU9XCJyZ2IoNjYsIDE2OCwgMzYsIDAuOClcIixjdHgubGluZVdpZHRoPTUsY3R4LnN0cm9rZSgpLGN0eC5maWxsKCkpLGFzdGVyb2lkcyl7dmFyIGFzdGVyb2lkPWFzdGVyb2lkc1tpXTtpZihoaXQoYXN0ZXJvaWQsdGhpcykpe2lmKCF0aGlzLnNoaWVsZClyZXR1cm4gZ2FtZU92ZXIoKTt0aGlzLnNoaWVsZD0hMSxhc3Rlcm9pZC5leHBsb2RlKCl9fXRoaXMuYW5nbGU9dGhpcy5yb3RhdGlvbix0aGlzLmNvb2xkb3duPjAmJnRoaXMuY29vbGRvd24tLSxtb3ZlKHRoaXMpfX1mdW5jdGlvbiBTaG90KGlkLHNwYWNlc2hpcCl7dGhpcy5pZD1pZCx0aGlzLnBvc2l0aW9uPVtzcGFjZXNoaXAucG9zaXRpb25bMF0rc3BhY2VzaGlwLmNhbm5vbi54K3NwYWNlc2hpcC5jYW5ub24ueCpNYXRoLmNvcygoc3BhY2VzaGlwLnJvdGF0aW9uLTkwKSpNYXRoLlBJLzE4MCksc3BhY2VzaGlwLnBvc2l0aW9uWzFdK3NwYWNlc2hpcC5jYW5ub24ueStzcGFjZXNoaXAuY2Fubm9uLnkqTWF0aC5zaW4oKHNwYWNlc2hpcC5yb3RhdGlvbi05MCkqTWF0aC5QSS8xODApXSx0aGlzLndpZHRoPTksdGhpcy5oZWlnaHQ9MTUsdGhpcy5hbmdsZT1zcGFjZXNoaXAuYW5nbGUsdGhpcy5yb3RhdGlvbj1zcGFjZXNoaXAucm90YXRpb24sdGhpcy5zcGVlZD1zcGFjZXNoaXAuc3BlZWQrNTAwLHRoaXMubGlmZXNwYW49c3BhY2VzaGlwLnJhbmdlLHRoaXMuaW1nPW5ldyBJbWFnZSx0aGlzLmltZy5zcmM9XCJhc3Rlcm9pZHMvc2hvdC5wbmdcIix0aGlzLm1vdmU9ZnVuY3Rpb24oKXt0aGlzLmxpZmVzcGFuLS0sbW92ZSh0aGlzKX19ZnVuY3Rpb24gQXN0ZXJvaWQoaWQpe3RoaXMuaWQ9aWQsdGhpcy53aWR0aD01MCpNYXRoLnJhbmRvbSgpKzIwLHRoaXMuaGVpZ2h0PXRoaXMud2lkdGgsdGhpcy5wb3NpdGlvbj1nZXRFbnRyeVBvc2l0aW9uKHRoaXMud2lkdGgsdGhpcy5oZWlnaHQpLHRoaXMuYW5nbGU9MzYwKk1hdGgucmFuZG9tKCksdGhpcy5yb3RhdGlvbj0zNjAqTWF0aC5yYW5kb20oKSx0aGlzLnJvdGF0aW9uU3BlZWQ9NipNYXRoLnJhbmRvbSgpLTMsdGhpcy5zcGVlZD0zMDAqTWF0aC5yYW5kb20oKSsyLHRoaXMuaW1nPW5ldyBJbWFnZSx0aGlzLmltZy5zcmM9XCJhc3Rlcm9pZHMvYXN0ZXJvaWRcIisoTWF0aC5yb3VuZCg2Kk1hdGgucmFuZG9tKCkpKzEpK1wiLnBuZ1wiLHRoaXMuZXhwbG9kZT1mdW5jdGlvbigpe3JldHVybiBleHBsb3Npb25zW3RoaXMuaWRdPW5ldyBFeHBsb3Npb24odGhpcyksZGVsZXRlIGFzdGVyb2lkc1t0aGlzLmlkXX0sdGhpcy5tb3ZlPWZ1bmN0aW9uKCl7Zm9yKHZhciBpIGluIHRoaXMucm90YXRpb24rPXRoaXMucm90YXRpb25TcGVlZCx0aGlzLnJvdGF0aW9uPjM2MD90aGlzLnJvdGF0aW9uPXRoaXMucm90YXRpb24tMzYwOnRoaXMucm90YXRpb248MCYmKHRoaXMucm90YXRpb249MzYwK3RoaXMucm90YXRpb24pLHNob3RzKXt2YXIgc2hvdD1zaG90c1tpXTtpZihoaXQoc2hvdCx0aGlzKSl7dGhpcy5leHBsb2RlKCk7dmFyIHBvaW50cz1NYXRoLmZsb29yKChzaG90LnNwZWVkLTUwMCkvMTArNzAtdGhpcy53aWR0aCk7TWF0aC5mbG9vcigocG9pbnRzKyRzY29wZS5zY29yZSkvMTAwKT5NYXRoLmZsb29yKCRzY29wZS5zY29yZS8xMDApJiZzcGF3blBvd2VydXAoKSwkc2NvcGUuc2NvcmUrPXBvaW50cywkc2NvcGUuJGFwcGx5KCksZGVsZXRlIHNob3RzW2ldfX1tb3ZlKHRoaXMpfX1mdW5jdGlvbiBFeHBsb3Npb24ob2JqZWN0KXt0aGlzLnBvc2l0aW9uPVtvYmplY3QucG9zaXRpb25bMF0sb2JqZWN0LnBvc2l0aW9uWzFdXSx0aGlzLndpZHRoPW9iamVjdC53aWR0aCx0aGlzLmhlaWdodD1vYmplY3QuaGVpZ2h0LHRoaXMuc3BlZWQ9MCx0aGlzLmFuZ2xlPTM2MCpNYXRoLnJhbmRvbSgpLHRoaXMuY3ljbGU9e3Jvd3M6Nixjb2x1bW5zOjgsc2l6ZTpbMjU2LDI1Nl0saTowLGRpcmVjdGlvbjohMH0sdGhpcy5saWZlc3Bhbj00Nyx0aGlzLmltZz1leHBsb3Npb25JbWFnZSx0aGlzLm1vdmU9ZnVuY3Rpb24oKXt0aGlzLmxpZmVzcGFuLS0sbW92ZSh0aGlzKSx0aGlzLmN5Y2xlLmRpcmVjdGlvbj90aGlzLmN5Y2xlLmkrKzp0aGlzLmN5Y2xlLmktLX19ZnVuY3Rpb24gUG93ZXJ1cChpZCl7dGhpcy5pZD1pZCx0aGlzLnBvd2VydXA9cG93ZXJ1cFR5cGVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpwb3dlcnVwVHlwZXMubGVuZ3RoKV0sdGhpcy5jeWNsZT10aGlzLnBvd2VydXAuY3ljbGUsdGhpcy5saWZlc3Bhbj0xZTMsdGhpcy5jeWNsZS5zaXplWzFdPnRoaXMuY3ljbGUuc2l6ZVswXT8odGhpcy5oZWlnaHQ9NDAsdGhpcy53aWR0aD1NYXRoLnJvdW5kKHRoaXMuaGVpZ2h0L3RoaXMuY3ljbGUuc2l6ZVsxXSp0aGlzLmN5Y2xlLnNpemVbMF0pKToodGhpcy53aWR0aD00MCx0aGlzLmhlaWdodD1NYXRoLnJvdW5kKHRoaXMud2lkdGgvdGhpcy5jeWNsZS5zaXplWzBdKnRoaXMuY3ljbGUuc2l6ZVsxXSkpLHRoaXMucG9zaXRpb249Z2V0RW50cnlQb3NpdGlvbih0aGlzLndpZHRoLHRoaXMuaGVpZ2h0KSx0aGlzLmltZz10aGlzLnBvd2VydXAuaW1nLHRoaXMuYW5nbGU9MzYwKk1hdGgucmFuZG9tKCksdGhpcy5zcGVlZD0xNTAqTWF0aC5yYW5kb20oKSs1MDt2YXIgZGVsYXk9NTt0aGlzLm1vdmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5saWZlc3Bhbjw9MD9kZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF06aGl0KHNwYWNlc2hpcCx0aGlzKT8oJHNjb3BlLmFubm91bmNlPSEwLCRzY29wZS5hbm5vdW5jZW1lbnQ9dGhpcy5wb3dlcnVwLmFubm91bmNlbWVudCwkc2NvcGUuJGFwcGx5KCksc2V0VGltZW91dCgoZnVuY3Rpb24oKXskc2NvcGUuYW5ub3VuY2U9ITEsJHNjb3BlLiRhcHBseSgpfSksMWUzKSx0aGlzLnBvd2VydXAuYWN0aXZhdGUoc3BhY2VzaGlwKSxkZWxldGUgcG93ZXJ1cHNbdGhpcy5pZF0pOih0aGlzLmxpZmVzcGFuLS0sbW92ZSh0aGlzKSx2b2lkKGRlbGF5PD0wPyh0aGlzLmN5Y2xlLmRpcmVjdGlvbj90aGlzLmN5Y2xlLmkrKzp0aGlzLmN5Y2xlLmktLSxkZWxheT01KTpkZWxheS0tKSl9fWZ1bmN0aW9uIG1vdmUob2JqZWN0KXtpZihvYmplY3QucG9zaXRpb25bMF0rPW9iamVjdC5zcGVlZC8xMDAqTWF0aC5jb3MoKG9iamVjdC5hbmdsZS05MCkqTWF0aC5QSS8xODApLG9iamVjdC5wb3NpdGlvblsxXSs9b2JqZWN0LnNwZWVkLzEwMCpNYXRoLnNpbigob2JqZWN0LmFuZ2xlLTkwKSpNYXRoLlBJLzE4MCksb2JqZWN0LnBvc2l0aW9uWzBdPmNhbnZhcy53aWR0aD9vYmplY3QucG9zaXRpb25bMF09LW9iamVjdC53aWR0aDpvYmplY3QucG9zaXRpb25bMF08LW9iamVjdC53aWR0aCYmKG9iamVjdC5wb3NpdGlvblswXT1jYW52YXMud2lkdGgpLG9iamVjdC5wb3NpdGlvblsxXT5jYW52YXMuaGVpZ2h0P29iamVjdC5wb3NpdGlvblsxXT0tb2JqZWN0LmhlaWdodDpvYmplY3QucG9zaXRpb25bMV08LW9iamVjdC5oZWlnaHQmJihvYmplY3QucG9zaXRpb25bMV09Y2FudmFzLmhlaWdodCksY3R4LnNhdmUoKSxjdHgudHJhbnNsYXRlKG9iamVjdC5wb3NpdGlvblswXSxvYmplY3QucG9zaXRpb25bMV0pLGN0eC50cmFuc2xhdGUob2JqZWN0LndpZHRoLzIsb2JqZWN0LmhlaWdodC8yKSxjdHgucm90YXRlKG9iamVjdC5yb3RhdGlvbipNYXRoLlBJLzE4MCksb2JqZWN0LmN5Y2xlKXt2YXIgY29sdW1uPW9iamVjdC5jeWNsZS5pJW9iamVjdC5jeWNsZS5jb2x1bW5zLHJvdz1NYXRoLmZsb29yKG9iamVjdC5jeWNsZS5pL29iamVjdC5jeWNsZS5jb2x1bW5zKTtjdHguZHJhd0ltYWdlKG9iamVjdC5pbWcsb2JqZWN0LmN5Y2xlLnNpemVbMF0qY29sdW1uLG9iamVjdC5jeWNsZS5zaXplWzFdKnJvdyxvYmplY3QuY3ljbGUuc2l6ZVswXSxvYmplY3QuY3ljbGUuc2l6ZVsxXSwtb2JqZWN0LndpZHRoLzIsLW9iamVjdC5oZWlnaHQvMixvYmplY3Qud2lkdGgsb2JqZWN0LmhlaWdodCksb2JqZWN0LmN5Y2xlLmk8PTA/KG9iamVjdC5jeWNsZS5pPTAsb2JqZWN0LmN5Y2xlLmRpcmVjdGlvbj0hMCk6b2JqZWN0LmN5Y2xlLmk+PW9iamVjdC5jeWNsZS5jb2x1bW5zKm9iamVjdC5jeWNsZS5yb3dzJiYob2JqZWN0LmN5Y2xlLmk9b2JqZWN0LmN5Y2xlLmNvbHVtbnMqb2JqZWN0LmN5Y2xlLnJvd3MtMSxvYmplY3QuY3ljbGUuZGlyZWN0aW9uPSExKX1lbHNlIGN0eC5kcmF3SW1hZ2Uob2JqZWN0LmltZywtb2JqZWN0LndpZHRoLzIsLW9iamVjdC5oZWlnaHQvMixvYmplY3Qud2lkdGgsb2JqZWN0LmhlaWdodCk7Y3R4LnJlc3RvcmUoKX1mdW5jdGlvbiBnZXRFbnRyeVBvc2l0aW9uKHdpZHRoLGhlaWdodCl7dmFyIHgsZ3JpZFg9MipNYXRoLnJhbmRvbSgpLGdyaWRZPTIqTWF0aC5yYW5kb20oKSx5PTA7cmV0dXJuIGdyaWRYPj0xPyh4PU1hdGgucmFuZG9tKCkqY2FudmFzLndpZHRoLHk9eT49MT8wLWhlaWdodDpjYW52YXMuaGVpZ2h0KTooeT1NYXRoLnJhbmRvbSgpKmNhbnZhcy5oZWlnaHQseD1ncmlkWT49MT8wLXdpZHRoOmNhbnZhcy53aWR0aCksW3gseV19ZnVuY3Rpb24gaGl0KG9iamVjdDEsb2JqZWN0Mil7cmV0dXJuIG9iamVjdDEucG9zaXRpb25bMF08b2JqZWN0Mi5wb3NpdGlvblswXStvYmplY3QyLndpZHRoJiZvYmplY3QyLnBvc2l0aW9uWzBdPG9iamVjdDEucG9zaXRpb25bMF0rb2JqZWN0MS53aWR0aCYmb2JqZWN0MS5wb3NpdGlvblsxXTxvYmplY3QyLnBvc2l0aW9uWzFdK29iamVjdDIuaGVpZ2h0JiZvYmplY3QyLnBvc2l0aW9uWzFdPG9iamVjdDEucG9zaXRpb25bMV0rb2JqZWN0MS5oZWlnaHR9ZnVuY3Rpb24gc3Bhd25Bc3Rlcm9pZHMoYW1vdW50KXt2YXIgaT0wO2Rve3ZhciBpZD1NYXRoLnJvdW5kKDFlOCpNYXRoLnJhbmRvbSgpKTthc3Rlcm9pZHNbaWRdPW5ldyBBc3Rlcm9pZChpZCl9d2hpbGUoaSsrPD1hbW91bnQpfWZ1bmN0aW9uIHNwYXduUG93ZXJ1cCgpe2lmKE9iamVjdC5rZXlzKHBvd2VydXBzKS5sZW5ndGg8Myl7dmFyIGlkPU1hdGgucm91bmQoMWU4Kk1hdGgucmFuZG9tKCkpO3Bvd2VydXBzW2lkXT1uZXcgUG93ZXJ1cChpZCl9fWZ1bmN0aW9uIGdhbWVPdmVyKCl7Zm9yKHZhciBpIGluICRzY29wZS5wbGF5aW5nPSExLGFzdGVyb2lkcylhc3Rlcm9pZHNbaV0uZXhwbG9kZSgpO3Nob3RzPXt9LCRzY29wZS5sb2dnZWRJbj8kc2NvcGUuY3VycmVudFVzZXIuaGlnaHNjb3JlLmFzdGVyb2lkczwkc2NvcGUuc2NvcmUmJigkc2NvcGUuY3VycmVudFVzZXIuaGlnaHNjb3JlLmFzdGVyb2lkcz0kc2NvcGUuc2NvcmUsR2FtZVN2Yy5zZXRIaWdoc2NvcmUoXCJhc3Rlcm9pZHNcIiwkc2NvcGUuY3VycmVudFVzZXIuX2lkLCRzY29wZS5zY29yZSkpOiRzY29wZS5oaWdoc2NvcmU8JHNjb3BlLnNjb3JlJiYoJHNjb3BlLmhpZ2hzY29yZT0kc2NvcGUuc2NvcmUpfWZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpe2NvbnNvbGUubG9nKHdpbmRvdy5pbm5lcldpZHRoKSxjYW52YXMud2lkdGg9d2luZG93LmlubmVyV2lkdGgsY2FudmFzLmhlaWdodD13aW5kb3cuaW5uZXJIZWlnaHQtKGNhbnZhcy53aWR0aDw9NzY4PzUwOjEwNSl9ZXhwbG9zaW9uSW1hZ2Uuc3JjPVwiYXN0ZXJvaWRzL2V4cGxvc2lvbi5wbmdcIix3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwoZnVuY3Rpb24oZSl7bWFwW2Uua2V5Q29kZXx8ZS53aGljaF09ITB9KSwhMCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLChmdW5jdGlvbihlKXttYXBbZS5rZXlDb2RlfHxlLndoaWNoXT0hMX0pLCEwKSwkc2NvcGUuaGlnaHNjb3JlPTAsd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixyZXNpemVDYW52YXMsITEpLHJlc2l6ZUNhbnZhcygpLHJlcXVlc3RBbmltYXRpb25GcmFtZSgoZnVuY3Rpb24gZHJhdygpe2Zvcih2YXIgaSBpbiBjdHguY2xlYXJSZWN0KDAsMCxjYW52YXMud2lkdGgsY2FudmFzLmhlaWdodCksc2hvdHMpc2hvdHNbaV0ubGlmZXNwYW48PTA/ZGVsZXRlIHNob3RzW2ldOnNob3RzW2ldLm1vdmUoKTtmb3IoaSBpbiBhc3Rlcm9pZHMpYXN0ZXJvaWRzW2ldLm1vdmUoKTtmb3IoaSBpbiBwb3dlcnVwcylwb3dlcnVwc1tpXS5tb3ZlKCk7Zm9yKGkgaW4gZXhwbG9zaW9ucylleHBsb3Npb25zW2ldLmxpZmVzcGFuPD0wP2RlbGV0ZSBleHBsb3Npb25zW2ldOmV4cGxvc2lvbnNbaV0ubW92ZSgpO2lmKGV2YWx1YXRlS2V5cygpLCRzY29wZS5wbGF5aW5nKXNwYWNlc2hpcC5tb3ZlKCk7ZWxzZXt2YXIgZ3JhZGllbnQ9Y3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsMCxjYW52YXMud2lkdGgsMCk7Z3JhZGllbnQuYWRkQ29sb3JTdG9wKFwiMFwiLFwicmdiKFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIixcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIpXCIpLGdyYWRpZW50LmFkZENvbG9yU3RvcChcIjAuMjVcIixcInJnYihcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigyNTYtMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiKVwiKSxncmFkaWVudC5hZGRDb2xvclN0b3AoXCIwLjVcIixcInJnYihcIitNYXRoLmZsb29yKDArMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiKVwiKSxncmFkaWVudC5hZGRDb2xvclN0b3AoXCIwLjc1XCIsXCJyZ2IoXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMjU2LTI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIilcIiksZ3JhZGllbnQuYWRkQ29sb3JTdG9wKFwiMS4wXCIsXCJyZ2IoXCIrTWF0aC5mbG9vcigyNTYtMjU2KnRhbGx5LzEwMCkrXCIsXCIrTWF0aC5mbG9vcigwKzI1Nip0YWxseS8xMDApK1wiLFwiK01hdGguZmxvb3IoMCsyNTYqdGFsbHkvMTAwKStcIilcIiksY3R4LmZpbGxTdHlsZT1ncmFkaWVudCxjdHguZm9udD1cIjYwcHggTW9ub3RvblwiLGN0eC5maWxsVGV4dChcIkFzdGVyb2lkc1wiLGNhbnZhcy53aWR0aC8yLWN0eC5tZWFzdXJlVGV4dChcIkFzdGVyb2lkc1wiKS53aWR0aC8yLGNhbnZhcy5oZWlnaHQvMiksY3R4LmZvbnQ9XCIyMHB4IEFsZHJpY2hcIixjdHguZmlsbFRleHQoXCJQcmVzcyBzcGFjZSB0byBzdGFydFwiLGNhbnZhcy53aWR0aC8yLWN0eC5tZWFzdXJlVGV4dChcIlByZXNzIHNwYWNlIHRvIHN0YXJ0XCIpLndpZHRoLzIsY2FudmFzLmhlaWdodC8yKzIwKSxjdHguZmlsbFRleHQoXCJEZXNpZ25lZCBhbmQgZGV2ZWxvcGVkIGJ5IExhdXJlbnQgRGViYWNrZXJcIixjYW52YXMud2lkdGgvMi1jdHgubWVhc3VyZVRleHQoXCJEZXNpZ25lZCBhbmQgZGV2ZWxvcGVkIGJ5IExhdXJlbnQgRGViYWNrZXJcIikud2lkdGgvMixjYW52YXMuaGVpZ2h0LTMwKX0odGFsbHkrPWRpcmVjdGlvbj8xOi0xKT4xMDA/KHRhbGx5PTEwMCxkaXJlY3Rpb249ITEpOnRhbGx5PDAmJih0YWxseT0wLGRpcmVjdGlvbj0hMCk7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpfSkpO3ZhciB0YWxseT0wLGRpcmVjdGlvbj0hMDskc2NvcGUuc3BhY2U9ZnVuY3Rpb24oKXtyZXR1cm57YmFja2dyb3VuZEltYWdlOid1cmwoXCJhc3Rlcm9pZHMvc3BhY2UnK3NwYWNlKycuanBnXCIpJ319fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJCdWJibGVzQ3RybFwiLFtcIiRzY29wZVwiLGZ1bmN0aW9uKCRzY29wZSl7dmFyIGNhbnZhcz1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1YmJsZXMtcGFnZVwiKSxjdHg9Y2FudmFzLmdldENvbnRleHQoXCIyZFwiKSxidWJibGVzPVtdLGNvbG9ycz1bXCIjZmZjMzAwXCIsXCIjZmY1NzMzXCIsXCIjYzcwMDM5XCIsXCIjOTAwYzNlXCIsXCIjNTcxODQ1XCJdO2Z1bmN0aW9uIEJ1YmJsZSgpe3RoaXMubGlmZXNwYW49MCx0aGlzLnJhZGl1cz0xLHRoaXMuZXhwYW5kaW5nPSEwLHRoaXMuc3BlZWQ9TWF0aC5yb3VuZCgzKk1hdGgucmFuZG9tKCkpLHRoaXMuY2lyY3VtZmVyZW5jZT1NYXRoLnJvdW5kKDUwKk1hdGgucmFuZG9tKCkpKzUsdGhpcy5tYXhSYWRpdXM9TWF0aC5yb3VuZCgyMDAqTWF0aC5yYW5kb20oKSkrMjAsdGhpcy54PU1hdGgucm91bmQoTWF0aC5yYW5kb20oKSpjYW52YXMud2lkdGgpLHRoaXMueT1NYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkqY2FudmFzLmhlaWdodCksdGhpcy52eD1NYXRoLnJhbmRvbSgpPj0uNT8xOi0xLHRoaXMudnk9TWF0aC5yYW5kb20oKT49LjU/MTotMX1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uIGZpbHRlckJ1YmJsZXMoKXtidWJibGVzLnB1c2gobmV3IEJ1YmJsZSksYnViYmxlcz1idWJibGVzLmZpbHRlcigoZnVuY3Rpb24oYnViYmxlKXtyZXR1cm4gYnViYmxlLnJhZGl1cz09PWJ1YmJsZS5tYXhSYWRpdXMmJihidWJibGUuZXhwYW5kaW5nPSExKSxidWJibGUueCs9YnViYmxlLnZ4KmJ1YmJsZS5zcGVlZCxidWJibGUueSs9YnViYmxlLnZ5KmJ1YmJsZS5zcGVlZCxidWJibGUucmFkaXVzKz1idWJibGUuZXhwYW5kaW5nPzE6LTEsYnViYmxlLnJhZGl1cz4wfSkpLGN0eC5jbGVhclJlY3QoMCwwLGNhbnZhcy53aWR0aCxjYW52YXMuaGVpZ2h0KSxidWJibGVzLmZvckVhY2goKGZ1bmN0aW9uKGJ1YmJsZSl7TWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoKmJ1YmJsZS5yYWRpdXMvYnViYmxlLm1heFJhZGl1cyksY3R4LmJlZ2luUGF0aCgpLGN0eC5hcmMoYnViYmxlLngsYnViYmxlLnksYnViYmxlLnJhZGl1cywwLDIqTWF0aC5QSSksY3R4LmZpbGxTdHlsZT1jb2xvcnNbTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoKmJ1YmJsZS5yYWRpdXMvYnViYmxlLm1heFJhZGl1cyldLGN0eC5maWxsKCksY3R4LnN0cm9rZVN0eWxlPWNvbG9yc1tjb2xvcnMubGVuZ3RoLU1hdGgucm91bmQoY29sb3JzLmxlbmd0aCpidWJibGUucmFkaXVzL2J1YmJsZS5tYXhSYWRpdXMpXSxjdHgubGluZVdpZHRoPWJ1YmJsZS5jaXJjdW1mZXJlbmNlKmJ1YmJsZS5yYWRpdXMvYnViYmxlLm1heFJhZGl1cyxjdHguc3Ryb2tlKCl9KSkscmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZpbHRlckJ1YmJsZXMpfSkpLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcmVzaXplQ2FudmFzKCl7Y2FudmFzLndpZHRoPXdpbmRvdy5pbm5lcldpZHRoLGNhbnZhcy5oZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0LShjYW52YXMud2lkdGg8PTc2OD81NToxMTEpfXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIscmVzaXplQ2FudmFzLCExKSxyZXNpemVDYW52YXMoKX0oKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQ2hhcmFkZXNDdHJsXCIsW1wiJHNjb3BlXCIsZnVuY3Rpb24oJHNjb3BlKXskc2NvcGUuc2VsZWN0V29yZD1jYXRlZ29yeT0+eyRzY29wZS53b3JkPSRzY29wZS5jaGFyYWRlc1tjYXRlZ29yeV1bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKiRzY29wZS5jaGFyYWRlc1tjYXRlZ29yeV0ubGVuZ3RoKV0sY29uc29sZS5sb2coJHNjb3BlLndvcmQpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiQ29udGFjdEN0cmxcIixbXCIkc2NvcGVcIixcIkVtYWlsU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEVtYWlsU3ZjKXskc2NvcGUub3B0aW9ucz1be25hbWU6XCJTcGFtXCIsdGV4dDpcIkkgYW0gYSBzcGFtIGJvdCBhbmQgYXV0b21hdGljYWxseSBjaGVjayB0aGUgZmlyc3Qgb3B0aW9uIEkgZmluZCFcIn0se25hbWU6XCJPcHBvcnR1bml0aXlcIix0ZXh0OlwiWW91IHNlZW0gdG8gaGF2ZSB0aGUgc2tpbGxzIEkgc2VlaywgSSdkIGxpa2UgdG8gdGFsayBhYm91dCBzb21lIG9wcG9ydHVuaXRpZXMuXCJ9LHtuYW1lOlwiUmVzdW1lXCIsdGV4dDpcIkkgZGlnIHRoZSByZXN1bWUsIGhvdyBkaWQgeW91IG1ha2UgaXQ/XCJ9LHtuYW1lOlwiT3RoZXJcIix0ZXh0OlwiU3VtdGluIGVsc2UhXCJ9XSwkc2NvcGUuY29udGFjdD17ZW1haWw6XCJcIixuYW1lOlwiXCIscGhvbmU6XCJcIixhYm91dDpcIlwiLG1lc3NhZ2U6XCJcIn0sJHNjb3BlLnNlbmQ9ZnVuY3Rpb24oKXskc2NvcGUuc2VuZGluZz0hMCxjb25zb2xlLmxvZyhcImhlcmVcIiksRW1haWxTdmMuc2VuZCh7ZW1haWw6JHNjb3BlLmNvbnRhY3QuZW1haWwsbmFtZTokc2NvcGUuY29udGFjdC5uYW1lLHBob25lOiRzY29wZS5jb250YWN0LnBob25lLGFib3V0OiRzY29wZS5jb250YWN0LmFib3V0LG1lc3NhZ2U6JHNjb3BlLmNvbnRhY3QubWVzc2FnZX0pLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuc2VudD0hMCxjb25zb2xlLmxvZyhcIlNVQ0NFU1MuIHN0YXR1cz0lZCwgdGV4dD0lc1wiLHJlc3BvbnNlLnN0YXR1cyxyZXNwb25zZS50ZXh0KSxjb25zb2xlLmxvZyhyZXNwb25zZSl9KSwoZnVuY3Rpb24oZXJyKXskc2NvcGUuc2VuZGluZz0hMSxjb25zb2xlLmxvZyhcIkZBSUxFRC4gZXJyb3I9XCIsZXJyKX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkV4cGVyaWVuY2VDdHJsXCIsW1wiJHNjb3BlXCIsZnVuY3Rpb24oJHNjb3BlKXskc2NvcGUuZ2V0U2tpbGw9ZnVuY3Rpb24oc2tpbGxDb2RlKXtpZigkc2NvcGUuc2tpbGxzKXJldHVybiAkc2NvcGUuc2tpbGxzLmZpbmQoKGZ1bmN0aW9uKHNraWxsKXtyZXR1cm4gc2tpbGwuY29kZT09PXNraWxsQ29kZX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIkhvYmJpZXNDdHJsXCIsW1wiJHNjb3BlXCIsXCIkd2luZG93XCIsZnVuY3Rpb24oJHNjb3BlLCR3aW5kb3cpeyRzY29wZS5ob2JieVNlbGVjdG9yVmlzaWJsZT0hMSwkLmdldEpTT04oXCJodHRwczovL3d3dy5yZWRkaXQuY29tL3VzZXIvYmVsZ29jYW5hZGlhbi9hYm91dC8uanNvblwiLChmdW5jdGlvbihyZXNwb25zZSl7fSkpLCRzY29wZS5zZWxlY3RlZEhvYmJ5PSRzY29wZS5ob2JiaWVzWzBdLCRzY29wZS5zZWxlY3RIb2JieT1mdW5jdGlvbihob2JieSl7JHNjb3BlLnNlbGVjdGVkSG9iYnk9aG9iYnksJHNjb3BlLmhvYmJ5U2VsZWN0b3JWaXNpYmxlPSExfSwkc2NvcGUuc2hvd0hvYmJ5PWZ1bmN0aW9uKHZhbHVlLGluZGV4LGFycmF5KXtyZXR1cm4hIXZhbHVlLmltYWdlcyYmdmFsdWUuaW1hZ2VzLmxlbmd0aD4wfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiTGVtbWluZ3NDdHJsXCIsW1wiJHNjb3BlXCIsXCJHYW1lU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEdhbWVTdmMpe3ZhciBjYW52YXM9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsZW1taW5ncy1wYWdlXCIpLGN0eD1jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLGxlbW1pbmdzSW1hZ2U9bmV3IEltYWdlO2xlbW1pbmdzSW1hZ2Uuc3JjPVwibGVtbWluZ3MvbGVtbWluZ3MucG5nXCI7dmFyIGRlY29ySW1hZ2U9bmV3IEltYWdlO2RlY29ySW1hZ2Uuc3JjPVwibGVtbWluZ3MvZGVjb3IucG5nXCI7dmFyIGxlbW1pbmdzPXt9LHN0YXJ0ZWQ9ITEsYWN0aW9ucz17d2Fsazp7c3RhcnQ6WzAsMF0sZW5kOlszMjAsMjBdLGNvbHVtbnM6OCxyb3dzOjEscmV2ZXJzZTohMX0saHVoOntzdGFydDpbMzIwLDBdLGVuZDpbNjQwLDIwXSxjb2x1bW5zOjgscm93czoxLHJldmVyc2U6ITB9LGZhbGw6e3N0YXJ0OlswLDgwXSxlbmQ6WzE2MCwxMDBdLGNvbHVtbnM6NCxyb3dzOjEscmV2ZXJzZTohMX0sZmx5OntzdGFydDpbMTYwLDgwXSxlbmQ6WzQ4MCwxMTBdLGNvbHVtbnM6OCxyb3dzOjEscmV2ZXJzZTohMX0sc3RvcDp7c3RhcnQ6WzAsMTIwXSxlbmQ6WzY0MCwxNDBdLGNvbHVtbnM6MTYscm93czoxLHJldmVyc2U6ITF9LGNsaW1iOntzdGFydDpbMCwxNjBdLGVuZDpbNjQwLDE4NV0sY29sdW1uczoxNixyb3dzOjEscmV2ZXJzZTohMX0sYnVpbGQ6e3N0YXJ0OlswLDIwMF0sZW5kOls2NDAsMjI1XSxjb2x1bW5zOjE2LHJvd3M6MSxyZXZlcnNlOiExfSxwdW5jaDp7c3RhcnQ6WzAsMjQwXSxlbmQ6WzY0MCwzMDBdLGNvbHVtbnM6MTYscm93czoyLHJldmVyc2U6ITF9LGRpZzp7c3RhcnQ6WzAsMzIwXSxlbmQ6WzMyMCwzNDVdLGNvbHVtbnM6OCxyb3dzOjEscmV2ZXJzZTohMX19O2Z1bmN0aW9uIExlbW1pbmcoaW5pdCl7dGhpcy5wb3NpdGlvbj1bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihjYW52YXMud2lkdGgtMjAwKSkrMTAwLE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooY2FudmFzLmhlaWdodC0yMDApKSsxMDBdLHRoaXMuZGlyZWN0aW9uPTIqTWF0aC5yYW5kb20oKT4xPzA6MSx0aGlzLmFjdD1mdW5jdGlvbihhY3Rpb24pe3RoaXMuYWN0aW9uPWFjdGlvbnNbYWN0aW9uXSx0aGlzLmN5Y2xlPTAsdGhpcy53aWR0aD0odGhpcy5hY3Rpb24uZW5kWzBdLXRoaXMuYWN0aW9uLnN0YXJ0WzBdKS90aGlzLmFjdGlvbi5jb2x1bW5zLHRoaXMuaGVpZ2h0PSh0aGlzLmFjdGlvbi5lbmRbMV0tdGhpcy5hY3Rpb24uc3RhcnRbMV0tMjAqKHRoaXMuYWN0aW9uLnJvd3MtMSkpL3RoaXMuYWN0aW9uLnJvd3MsdGhpcy5hbmltYXRpb249ITB9LHRoaXMuYWN0KGluaXQpLHRoaXMubW92ZT1mdW5jdGlvbigpe2N0eC5zYXZlKCksY3R4LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uWzBdLHRoaXMucG9zaXRpb25bMV0pLGN0eC50cmFuc2xhdGUodGhpcy53aWR0aC8yLHRoaXMuaGVpZ2h0LzIpLDA9PT10aGlzLmRpcmVjdGlvbiYmY3R4LnNjYWxlKC0xLDEpO3ZhciBjb2x1bW49dGhpcy5jeWNsZSV0aGlzLmFjdGlvbi5jb2x1bW5zLHJvdz1NYXRoLmZsb29yKHRoaXMuY3ljbGUvdGhpcy5hY3Rpb24uY29sdW1ucyk7Y3R4LmRyYXdJbWFnZShsZW1taW5nc0ltYWdlLHRoaXMud2lkdGgqY29sdW1uK3RoaXMuYWN0aW9uLnN0YXJ0WzBdLCh0aGlzLmhlaWdodCsyMCkqcm93K3RoaXMuYWN0aW9uLnN0YXJ0WzFdLHRoaXMud2lkdGgsdGhpcy5oZWlnaHQsMCwwLDIqdGhpcy53aWR0aCwyKnRoaXMuaGVpZ2h0KSxjdHgucmVzdG9yZSgpLHRoaXMuYWN0aW9uLnJldmVyc2U/dGhpcy5hbmltYXRpb24/KHRoaXMuY3ljbGUrKyx0aGlzLmN5Y2xlPj10aGlzLmFjdGlvbi5jb2x1bW5zKnRoaXMuYWN0aW9uLnJvd3MmJih0aGlzLmFuaW1hdGlvbj0hdGhpcy5hbmltYXRpb24sdGhpcy5jeWNsZS0tKSk6KHRoaXMuY3ljbGUtLSx0aGlzLmN5Y2xlPDAmJih0aGlzLmFuaW1hdGlvbj0hdGhpcy5hbmltYXRpb24sdGhpcy5jeWNsZT0wKSk6KHRoaXMuY3ljbGUrKyx0aGlzLmN5Y2xlPj10aGlzLmFjdGlvbi5jb2x1bW5zKnRoaXMuYWN0aW9uLnJvd3MmJih0aGlzLmN5Y2xlPTApKX19ZnVuY3Rpb24gcmVzaXplQ2FudmFzKCl7Y2FudmFzLndpZHRoPXdpbmRvdy5pbm5lcldpZHRoLGNhbnZhcy5oZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0LShjYW52YXMud2lkdGg8PTc2OD81MDoxMDUpfXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIscmVzaXplQ2FudmFzLCExKSxyZXNpemVDYW52YXMoKSxPYmplY3Qua2V5cyhhY3Rpb25zKS5mb3JFYWNoKChmdW5jdGlvbihhY3Rpb24pe2xlbW1pbmdzW01hdGgucm91bmQoMWU4Kk1hdGgucmFuZG9tKCkpXT1uZXcgTGVtbWluZyhhY3Rpb24pfSkpO2xldCBoYXRjaD1uZXcgZnVuY3Rpb24oKXt0aGlzLnBvc2l0aW9uPVsyMCwyMF0sdGhpcy5hY3Rpb249e3N0YXJ0OlswLDBdLGVuZDpbODIsNTAwXSxjb2x1bW5zOjEscm93czoxMH0sdGhpcy53aWR0aD0odGhpcy5hY3Rpb24uZW5kWzBdLXRoaXMuYWN0aW9uLnN0YXJ0WzBdKS90aGlzLmFjdGlvbi5jb2x1bW5zLHRoaXMuaGVpZ2h0PSh0aGlzLmFjdGlvbi5lbmRbMV0tdGhpcy5hY3Rpb24uc3RhcnRbMV0pL3RoaXMuYWN0aW9uLnJvd3MsdGhpcy5jeWNsZT0wLHRoaXMub3Blbj1mdW5jdGlvbigpe3ZhciBjb2x1bW4scm93O2N0eC5zYXZlKCksY3R4LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uWzBdLHRoaXMucG9zaXRpb25bMV0pLGN0eC50cmFuc2xhdGUodGhpcy53aWR0aC8yLHRoaXMuaGVpZ2h0LzIpLHN0YXJ0ZWQ/KGNvbHVtbj10aGlzLmN5Y2xlJXRoaXMuYWN0aW9uLmNvbHVtbnMscm93PU1hdGguZmxvb3IodGhpcy5jeWNsZS90aGlzLmFjdGlvbi5jb2x1bW5zKSx0aGlzLmN5Y2xlPDkmJnRoaXMuY3ljbGUrKyk6KGNvbHVtbj0wLHJvdz0wKSxjdHguZHJhd0ltYWdlKGRlY29ySW1hZ2UsdGhpcy53aWR0aCpjb2x1bW4rdGhpcy5hY3Rpb24uc3RhcnRbMF0sdGhpcy5oZWlnaHQqcm93K3RoaXMuYWN0aW9uLnN0YXJ0WzFdLTEsdGhpcy53aWR0aCx0aGlzLmhlaWdodCwwLDAsMip0aGlzLndpZHRoLDIqdGhpcy5oZWlnaHQpLGN0eC5yZXN0b3JlKCl9fTshZnVuY3Rpb24gZHJhdygpe2lmKGN0eC5jbGVhclJlY3QoMCwwLGNhbnZhcy53aWR0aCxjYW52YXMuaGVpZ2h0KSxzdGFydGVkKWZvcih2YXIgaSBpbiBsZW1taW5ncylsZW1taW5nc1tpXS5tb3ZlKCk7ZWxzZSBjdHguYmVnaW5QYXRoKCksY3R4LmZvbnQ9XCI0MHB4IE1vbm90b25cIixjdHgubGluZVdpZHRoPVwiMTBcIixjdHguc3Ryb2tlU3R5bGU9XCJibHVlXCIsY3R4LnJlY3QoMTUsY2FudmFzLmhlaWdodC00NSxjdHgubWVhc3VyZVRleHQoXCJTdGFydFwiKS53aWR0aCsyMCxjdHgubWVhc3VyZVRleHQoXCJTdGFydFwiKS5oZWlnaHQrY2FudmFzLmhlaWdodC00NSksY3R4LmZpbGwoKSxjdHguZmlsbFRleHQoXCJTdGFydFwiLDIwLGNhbnZhcy5oZWlnaHQtNTApO2hhdGNoLm9wZW4oKSxzdGFydGVkPSEwLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZHJhdygpfSksMTUwKX0oKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiTGlzdHNDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIkNhdGVnb3JpZXNTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLENhdGVnb3JpZXNTdmMpeyRzY29wZS5zaG93Q2F0ZWdvcnk9ITAsJHNjb3BlLmluaXQ9ZnVuY3Rpb24oKXtDYXRlZ29yaWVzU3ZjLmdldENhdGVnb3JpZXMoKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7Zm9yKHZhciBpIGluICRzY29wZS5jYXRlZ29yaWVzPXJlc3BvbnNlLmRhdGEsJHNjb3BlLnRhc2tzPVtdLCRzY29wZS5jYXRlZ29yaWVzKWZvcih2YXIgaiBpbiAkc2NvcGUuY2F0ZWdvcmllc1tpXS50YXNrcykkc2NvcGUudGFza3MucHVzaCh7Y2F0ZWdvcnk6JHNjb3BlLmNhdGVnb3JpZXNbaV0ubmFtZSx0YXNrOiRzY29wZS5jYXRlZ29yaWVzW2ldLnRhc2tzW2pdLm5hbWV9KX0pKX0sJHNjb3BlLnNlbGVjdENhdGVnb3J5PWZ1bmN0aW9uKGNhdGVnb3J5KXtmb3IodmFyIGkgaW4gJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnk9Y2F0ZWdvcnksJHNjb3BlLnNlbGVjdGVkVGFza3M9W10sJHNjb3BlLnNlbGVjdGFibGVUYXNrcz1bXSwkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcykkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLnB1c2goJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0pOyRzY29wZS5zaG93Q2F0ZWdvcnk9ITEsJHNjb3BlLmVudGVyZWRDYXRlZ29yeT1cIlwifSwkc2NvcGUubmV3Q2F0ZWdvcnk9ZnVuY3Rpb24oY2F0ZWdvcnkpe2Zvcih2YXIgZm91bmQ9ITEsaT0wO2k8JHNjb3BlLmNhdGVnb3JpZXMubGVuZ3RoO2krKykkc2NvcGUuY2F0ZWdvcmllc1tpXS5uYW1lPT09Y2F0ZWdvcnkmJigkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkoJHNjb3BlLmNhdGVnb3JpZXNbaV0pLGZvdW5kPSEwKTtmb3VuZHx8Q2F0ZWdvcmllc1N2Yy5hZGRDYXRlZ29yeSh7Y2F0ZWdvcnl9KS50aGVuKChmdW5jdGlvbihjYXRlZ29yeSl7JHNjb3BlLmluaXQoKSwkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnkpfSkpLCRzY29wZS5lbnRlcmVkQ2F0ZWdvcnk9XCJcIn0sJHNjb3BlLm5ld1Rhc2s9ZnVuY3Rpb24odGFzayl7dmFyIGZvdW5kPSExO2Zvcih2YXIgaSBpbiAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcykkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXS5uYW1lPT09dGFzayYmKGZvdW5kPSEwLCRzY29wZS5zZWxlY3RUYXNrKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldKSk7Zm91bmR8fENhdGVnb3JpZXNTdmMuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS5uYW1lLHt0YXNrfSkudGhlbigoZnVuY3Rpb24oKXskc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcy5wdXNoKHtuYW1lOnRhc2t9KSwkc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcywkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1skc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcy5sZW5ndGgtMV0pfSkpLCRzY29wZS5lbnRlcmVkVGFzaz1cIlwifSwkc2NvcGUuc2VsZWN0VGFzaz1mdW5jdGlvbih0YXNrKXskc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcyx0YXNrKSwkc2NvcGUucmVtb3ZlVGFzaygkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLHRhc2spLCRzY29wZS5lbnRlcmVkVGFzaz1cIlwifSwkc2NvcGUudW5zZWxlY3RUYXNrPWZ1bmN0aW9uKHRhc2speyRzY29wZS5hZGRUYXNrKCRzY29wZS5zZWxlY3RhYmxlVGFza3MsdGFzayksJHNjb3BlLnJlbW92ZVRhc2soJHNjb3BlLnNlbGVjdGVkVGFza3MsdGFzayl9LCRzY29wZS5hZGRUYXNrPWZ1bmN0aW9uKHRhc2tMaXN0LHRhc2spe3Rhc2tMaXN0LnB1c2godGFzayl9LCRzY29wZS5yZW1vdmVUYXNrPWZ1bmN0aW9uKHRhc2tMaXN0LHRhc2spe3Rhc2tMaXN0LnNwbGljZSh0YXNrTGlzdC5pbmRleE9mKHRhc2spLDEpfSwkc2NvcGUuc3RhcnRQcmlvcml0aXppbmc9ZnVuY3Rpb24oKXtDYXRlZ29yaWVzU3ZjLnNldFByaW9yaXR5TGlzdCgkc2NvcGUuc2VsZWN0ZWRUYXNrcyksJGxvY2F0aW9uLnBhdGgoXCIvcHJpb3JpdGl6ZVwiKX0sJHNjb3BlLmdldFF1ZXN0aW9ucz1mdW5jdGlvbigpe2lmKCEkc2NvcGUuc2VsZWN0ZWRUYXNrcylyZXR1cm5cIlwiO2Zvcih2YXIgY291bnRlcj0wLGk9JHNjb3BlLnNlbGVjdGVkVGFza3MubGVuZ3RoLTE7aT4wO2ktLSljb3VudGVyKz1pO3JldHVybiBjb3VudGVyfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiTG9naW5DdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLFVzZXJTdmMpe3ZhciB1aT1uZXcgZmlyZWJhc2V1aS5hdXRoLkF1dGhVSShmaXJlYmFzZS5hdXRoKCkpO2Z1bmN0aW9uIHN0YXJ0VUkoKXt1aS5zdGFydChcIiNmaXJlYmFzZXVpLWF1dGgtY29udGFpbmVyXCIse2NhbGxiYWNrczp7c2lnbkluU3VjY2VzczpmdW5jdGlvbihjdXJyZW50VXNlcixjcmVkZW50aWFsLHJlZGlyZWN0VXJsKXtyZXR1cm4gZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLmdldElkVG9rZW4oITApLnRoZW4oKGZ1bmN0aW9uKGlkVG9rZW4pe1VzZXJTdmMuYXV0aGVudGljYXRlKHtkaXNwbGF5TmFtZTpjdXJyZW50VXNlci5kaXNwbGF5TmFtZSxlbWFpbDpjdXJyZW50VXNlci5lbWFpbCxwaG90b1VSTDpjdXJyZW50VXNlci5waG90b1VSTCxlbWFpbFZlcmlmaWVkOmN1cnJlbnRVc2VyLmVtYWlsVmVyaWZpZWQsaWRUb2tlbn0pLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuJGVtaXQoXCJsb2dpblwiLHJlc3BvbnNlLmRhdGEpLCQoXCIjbW9kYWwtbG9naW5cIikubW9kYWwoXCJoaWRlXCIpfSksKGZ1bmN0aW9uKCl7JHNjb3BlLiRlbWl0KFwicG9wdXBcIix7bWVzc2FnZTpcIkxvZ2luIEZhaWxlZFwiLHR5cGU6XCJhbGVydC1kYW5nZXJcIn0pfSkpfSkpLmNhdGNoKChmdW5jdGlvbihlcnJvcil7fSkpLCExfSxzaWduSW5GYWlsdXJlOmZ1bmN0aW9uKGVycm9yKXtpZihcImZpcmViYXNldWkvYW5vbnltb3VzLXVwZ3JhZGUtbWVyZ2UtY29uZmxpY3RcIiE9ZXJyb3IuY29kZSlyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7dmFyIGNyZWQ9ZXJyb3IuY3JlZGVudGlhbDtyZXR1cm4gZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDcmVkZW50aWFsKGNyZWQpfSx1aVNob3duOmZ1bmN0aW9uKCl7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2FkZXJcIikuc3R5bGUuZGlzcGxheT1cIm5vbmVcIn19LHNpZ25JblN1Y2Nlc3NVcmw6XCIvaG9tZVwiLHNpZ25Jbk9wdGlvbnM6W2ZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIuUFJPVklERVJfSURdLHNpZ25JbkZsb3c6XCJwb3B1cFwifSl9JHNjb3BlLiRvbihcImxvZ291dFwiLChmdW5jdGlvbihldmVudCl7dWkucmVzZXQoKSxzdGFydFVJKCl9KSksc3RhcnRVSSgpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJQb3N0c0N0cmxcIixbXCIkc2NvcGVcIixcIiRmaWx0ZXJcIixcIlBvc3RzU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRmaWx0ZXIsUG9zdHNTdmMpeyRzY29wZS5hZGRQb3N0PWZ1bmN0aW9uKCl7JHNjb3BlLnBvc3RCb2R5JiZQb3N0c1N2Yy5jcmVhdGUoe2JvZHk6JHNjb3BlLnBvc3RCb2R5fSkudGhlbigoZnVuY3Rpb24ocG9zdCl7JHNjb3BlLnBvc3RCb2R5PW51bGx9KSl9LFBvc3RzU3ZjLmZldGNoKCkudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5wb3N0cz1yZXNwb25zZS5kYXRhfSkpLCRzY29wZS4kb24oXCJ3czpuZXdfcG9zdFwiLChmdW5jdGlvbihfLHBvc3QpeyRzY29wZS4kYXBwbHkoKGZ1bmN0aW9uKCl7UG9zdHNTdmMuZ2V0UG9zdChwb3N0KS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLnBvc3RzLnVuc2hpZnQocmVzcG9uc2UuZGF0YSl9KSl9KSl9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlByaW9yaXRpemVDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIkNhdGVnb3JpZXNTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLENhdGVnb3JpZXNTdmMpeyRzY29wZS5wcmlvcml0eUxpc3Q9Q2F0ZWdvcmllc1N2Yy5nZXRQcmlvcml0eUxpc3QoKSwkc2NvcGUucHJpb3JpdHlMaXN0Pygkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbj0xLCRzY29wZS5jdXJyZW50UXVlc3Rpb249MSwkc2NvcGUuZG9uZT0hMSk6JGxvY2F0aW9uLnBhdGgoXCIvbGlzdHNcIiksJHNjb3BlLm1ha2VDaG9pY2U9ZnVuY3Rpb24oY2hvaWNlKXtmb3IodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkPT09JHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24mJigkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZT0xPT09Y2hvaWNlPyRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2U6JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2UpOyRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uPT09JHNjb3BlLmN1cnJlbnRRdWVzdGlvbiYmKCRzY29wZS5jdXJyZW50UXVlc3Rpb249JHNjb3BlLmN1cnJlbnRRdWVzdGlvbj09PSRzY29wZS5wcmlvcml0eUxpc3QubGVuZ3RoPzE6JHNjb3BlLmN1cnJlbnRRdWVzdGlvbisxKSwkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbj0kc2NvcGUuY3VycmVudFF1ZXN0aW9uO3ZhciBmb3VuZD0hMTtmb3IoaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KWlmKFwiXCI9PT0kc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSl7Zm91bmQ9ITA7YnJlYWt9Zm91bmR8fCgkKFwiI3ByaW9yaXRpemVDaG9pY2VzXCIpLmhpZGUoMzAwKSwkc2NvcGUuZG9uZT0hMCl9LCRzY29wZS5nZXRCdXR0b25WYWx1ZT1mdW5jdGlvbihjaG9pY2Upe2lmKCEkc2NvcGUucHJpb3JpdHlMaXN0KXJldHVyblwiXCI7Zm9yKHZhciBpPTA7aTwkc2NvcGUucHJpb3JpdHlMaXN0Lmxlbmd0aDtpKyspaWYoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZD09PSRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uKXJldHVybiAxPT09Y2hvaWNlPyRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2U6JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2V9LCRzY29wZS5zZWxlY3RRdWVzdGlvbj1mdW5jdGlvbihxdWVzdGlvbil7JHNjb3BlLnNlbGVjdGVkUXVlc3Rpb249cXVlc3Rpb259LCRzY29wZS5nZXRGaWx0ZXJlZFByaW9yaXR5TGlzdD1mdW5jdGlvbigpe3JldHVybiAkc2NvcGUucHJpb3JpdHlMaXN0PyRzY29wZS5wcmlvcml0eUxpc3Quc29ydCgoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5pZC1iLmlkfSkpLmZpbHRlcigoZnVuY3Rpb24ocXVlc3Rpb24pe3JldHVyblwiXCIhPT1xdWVzdGlvbi5jaG9pY2V8fHF1ZXN0aW9uLmlkPT09JHNjb3BlLmN1cnJlbnRRdWVzdGlvbn0pKTpbXX0sJHNjb3BlLmdldENob2ljZXNNYWRlPWZ1bmN0aW9uKCl7aWYoISRzY29wZS5wcmlvcml0eUxpc3QpcmV0dXJuXCJcIjt2YXIgY2hvaWNlc01hZGU9MDtmb3IodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdClcIlwiIT09JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UmJmNob2ljZXNNYWRlKys7cmV0dXJuIGNob2ljZXNNYWRlfSwkc2NvcGUuZ2V0QnV0dG9uQ2xhc3M9ZnVuY3Rpb24oY2hvaWNlKXtpZighJHNjb3BlLnByaW9yaXR5TGlzdClyZXR1cm5cIlwiO2Zvcih2YXIgaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KWlmKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQ9PT0kc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbilyZXR1cm5cIlwiPT09JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2U/XCJidG4tcHJpbWFyeVwiOjE9PT1jaG9pY2U/JHNjb3BlLnByaW9yaXR5TGlzdFtpXS5maXJzdENob2ljZT09PSRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlP1wiYnRuLXN1Y2Nlc3NcIjpcImJ0bi1kYW5nZXJcIjokc2NvcGUucHJpb3JpdHlMaXN0W2ldLnNlY29uZENob2ljZT09PSRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlP1wiYnRuLXN1Y2Nlc3NcIjpcImJ0bi1kYW5nZXJcIn0sJHNjb3BlLnNob3dDaG9pY2VzPWZ1bmN0aW9uKCl7JChcIiNwcmlvcml0aXplQ2hvaWNlc1wiKS5zaG93KDFlMyksJChcIiNyZXZpZXdDaG9pY2VzXCIpLmhpZGUoKX0sJHNjb3BlLmNoYXJ0Q2xpY2s9ZnVuY3Rpb24oZXZlbnQpeyRzY29wZS5jaGFydCYmY29uc29sZS5sb2coJHNjb3BlLmNoYXJ0LmdldFNlZ21lbnRzQXRFdmVudChldmVudCkpfSwkc2NvcGUuc2hvd1Jlc3VsdHM9ZnVuY3Rpb24oKXtmb3IodmFyIGkgaW4gJHNjb3BlLmRhdGE9W10sJHNjb3BlLm9wdGlvbnM9e3Jlc3BvbnNpdmU6ITAsc2VnbWVudFNob3dTdHJva2U6ITAsc2VnbWVudFN0cm9rZUNvbG9yOlwiI2ZmZlwiLHNlZ21lbnRTdHJva2VXaWR0aDoyLHBlcmNlbnRhZ2VJbm5lckN1dG91dDowLGFuaW1hdGlvblN0ZXBzOjEwMCxhbmltYXRpb25FYXNpbmc6XCJlYXNlT3V0Qm91bmNlXCIsYW5pbWF0ZVJvdGF0ZTohMCxhbmltYXRlU2NhbGU6ITEsbGVnZW5kVGVtcGxhdGU6JzxoMyBjbGFzcz1cInRjLWNoYXJ0LWpzLWxlZ2VuZFwiIHN0eWxlPVwicGFkZGluZzo1cHhcIj48JSBmb3IgKHZhciBpPTA7IGk8c2VnbWVudHMubGVuZ3RoOyBpKyspeyU+PGRpdiBjbGFzcz1cImxhYmVsXCIgc3R5bGU9XCJmbG9hdDpsZWZ0O21hcmdpbjo1cHg7YmFja2dyb3VuZC1jb2xvcjo8JT1zZWdtZW50c1tpXS5maWxsQ29sb3IlPlwiPjwlaWYoc2VnbWVudHNbaV0ubGFiZWwpeyU+PCU9c2VnbWVudHNbaV0ubGFiZWwlPjwlfSU+PC9kaXY+PCV9JT48L2gzPid9LENhdGVnb3JpZXNTdmMuY2hvaWNlcylmb3IodmFyIGogaW4gQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLnZvdGVzPTAsJHNjb3BlLnByaW9yaXR5TGlzdClDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0ubmFtZT09PSRzY29wZS5wcmlvcml0eUxpc3Rbal0uY2hvaWNlJiZDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMrKztmb3IoaSBpbiBDYXRlZ29yaWVzU3ZjLmNob2ljZXMuc29ydCgoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS52b3RlczxiLnZvdGVzfSkpLENhdGVnb3JpZXNTdmMuY2hvaWNlcykkc2NvcGUuZGF0YS5wdXNoKHt2YWx1ZTpDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMsbGFiZWw6Q2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLm5hbWV9KTskKFwiI3ByaW9yaXRpemVSZXN1bHRcIikuaGlkZSgpLCQoXCIjcHJpb3JpdGl6ZUNob2ljZXNcIikuaGlkZSgpLCQoXCIjcHJpb3JpdHlSZXN1bHRzXCIpLnNob3coMWUzKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlByb2ZpbGVDdHJsXCIsW1wiJHNjb3BlXCIsXCIkbG9jYXRpb25cIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLFVzZXJTdmMpeyRzY29wZS5jdXJyZW50VXNlcj8oJChcIiNzZXgtaW5kaWNhdG9yXCIpLm9mZnNldCh7bGVmdDokc2NvcGUuY3VycmVudFVzZXIuZ2VuZGVyLnNleC8yMDAqJChcIiNzZXhcIikud2lkdGgoKSskKFwiI3NleFwiKS5vZmZzZXQoKS5sZWZ0fSksJChcIiNpZGVudGl0eS1pbmRpY2F0b3JcIikub2Zmc2V0KHtsZWZ0OiRzY29wZS5jdXJyZW50VXNlci5nZW5kZXIuaWRlbnRpdHkvMjAwKiQoXCIjaWRlbnRpdHlcIikud2lkdGgoKSskKFwiI2lkZW50aXR5XCIpLm9mZnNldCgpLmxlZnR9KSk6JGxvY2F0aW9uLnBhdGgoXCIvXCIpLCRzY29wZS5zZXhlcz1bXCJNYWxlXCIsXCJGdE0gTWFsZVwiLFwiSW50ZXJzZXhcIixcIk10RiBGZW1hbGVcIixcIkZlbWFsZVwiXSwkc2NvcGUuaWRlbnRpdGllcz1bXCJNYW5cIixcIkJpZ2VuZGVyXCIsXCJQYW5nZW5kZXJcIixcIkFnZW5kZXJcIixcIlBvbHlnZW5kZXJcIixcIkdlbmRlcmZsdWlkXCIsXCJHZW5kZXJxdWVlclwiLFwiUXVlZXJcIixcIldvbWFuXCJdLCRzY29wZS5kYXRlT3B0aW9ucz17bWF4RGF0ZTpuZXcgRGF0ZSxtaW5EYXRlOm5ldyBEYXRlKDE5MDAsMSwxKSxpbml0RGF0ZTpuZXcgRGF0ZSgyZTMsMSwxKSxkYXRlcGlja2VyTW9kZTpcInllYXJcIn0sJHNjb3BlLmdlbmRlcj1mdW5jdGlvbihhcnJheSxwZXJjZW50YWdlKXtyZXR1cm4gYXJyYXlbTWF0aC5yb3VuZChwZXJjZW50YWdlLzIwMCooYXJyYXkubGVuZ3RoLTEpKV19LCRzY29wZS5zdGFydFNsaWRlcj1mdW5jdGlvbigpe30sJHNjb3BlLmRyYWdTbGlkZXI9ZnVuY3Rpb24oZXZlbnQsdWksdHlwZSl7JHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlclt0eXBlXT1NYXRoLnJvdW5kKCgkKFwiI1wiK3R5cGUrXCItaW5kaWNhdG9yXCIpLm9mZnNldCgpLmxlZnQtJChcIiNcIit0eXBlKS5vZmZzZXQoKS5sZWZ0KS8oJChcIiNcIit0eXBlKS53aWR0aCgpLSQoXCIjXCIrdHlwZStcIi1pbmRpY2F0b3JcIikud2lkdGgoKSkqMjAwKSwkc2NvcGUuJGFwcGx5KCl9LCRzY29wZS5zdG9wU2xpZGVyPWZ1bmN0aW9uKCl7fSwkc2NvcGUudXNlcm5hbWVUb2dnbGU9ITAsJHNjb3BlLnBhc3N3b3JkVG9nZ2xlPSEwLCRzY29wZS50b2dnbGVVc2VybmFtZT1mdW5jdGlvbigpeyRzY29wZS51c2VybmFtZVRvZ2dsZT0hJHNjb3BlLnVzZXJuYW1lVG9nZ2xlLCRzY29wZS5uZXdVc2VybmFtZT0kc2NvcGUuY3VycmVudFVzZXIudXNlcm5hbWV9LCRzY29wZS50b2dnbGVQYXNzd29yZD1mdW5jdGlvbigpeyRzY29wZS5uZXdQYXNzd29yZD1udWxsLCRzY29wZS5jb25maXJtUGFzc3dvcmQ9bnVsbCwkc2NvcGUucGFzc3dvcmRUb2dnbGU9ISRzY29wZS5wYXNzd29yZFRvZ2dsZX0sJHNjb3BlLmNoZWNrUGFzc3dvcmQ9ZnVuY3Rpb24ocGFzc3dvcmQpe2lmKHBhc3N3b3JkKXt2YXIgdXNlcj0kc2NvcGUuY3VycmVudFVzZXIuX2lkO1VzZXJTdmMuY2hlY2tQYXNzd29yZCh1c2VyLHBhc3N3b3JkKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCl9KSwoZnVuY3Rpb24oKXt2YXIgb3JpZ2luYWxCZz0kKFwiLnBhc3N3b3JkXCIpLmNzcyhcImJhY2tncm91bmRDb2xvclwiKTskKFwiLnBhc3N3b3JkXCIpLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjpcIiNGRkI2QzFcIn0sMjAwKS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6b3JpZ2luYWxCZ30sMjAwKX0pKX19LCRzY29wZS5jaGFuZ2VQYXNzd29yZD1mdW5jdGlvbihvbGRQYXNzd29yZCxuZXdQYXNzd29yZCxjb25maXJtUGFzc3dvcmQpe2lmKG5ld1Bhc3N3b3JkKWlmKG5ld1Bhc3N3b3JkPT1jb25maXJtUGFzc3dvcmQpe3ZhciB1c2VyPSRzY29wZS5jdXJyZW50VXNlci5faWQ7VXNlclN2Yy5jaGFuZ2VQYXNzd29yZCh1c2VyLG9sZFBhc3N3b3JkLG5ld1Bhc3N3b3JkKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwicG9wdXBcIix7bWVzc2FnZTpcIlBhc3N3b3JkIENoYW5nZWRcIix0eXBlOlwiYWxlcnQtc3VjY2Vzc1wifSksJHNjb3BlLm9sZFBhc3N3b3JkPW51bGwsJHNjb3BlLnRvZ2dsZVBhc3N3b3JkKCl9KSwoZnVuY3Rpb24oKXskc2NvcGUuJGVtaXQoXCJwb3B1cFwiLHttZXNzYWdlOlwiUGFzc3dvcmQgQ2hhbmdlIEZhaWxlZFwiLHR5cGU6XCJhbGVydC1kYW5nZXJcIn0pfSkpfWVsc2V7dmFyIG9yaWdpbmFsQmc9JChcIi5wYXNzd29yZFwiKS5jc3MoXCJiYWNrZ3JvdW5kQ29sb3JcIik7JChcIi5wYXNzd29yZFwiKS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6XCIjRkZCNkMxXCJ9LDIwMCkuYW5pbWF0ZSh7YmFja2dyb3VuZENvbG9yOm9yaWdpbmFsQmd9LDIwMCl9fSwkc2NvcGUuY2hhbmdlVXNlcm5hbWU9ZnVuY3Rpb24odXNlcm5hbWUpeyRzY29wZS4kZW1pdChcImxvYWRpbmdcIiksVXNlclN2Yy5jaGFuZ2VVc2VybmFtZSgkc2NvcGUuY3VycmVudFVzZXIuX2lkLHVzZXJuYW1lKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLiRlbWl0KFwidXBkYXRlXCIscmVzcG9uc2UuZGF0YSl9KSwoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS4kZW1pdChcInBvcHVwXCIse21lc3NhZ2U6dXNlcm5hbWUrXCIgYWxyZWFkeSBpbiB1c2VcIix0eXBlOlwiYWxlcnQtZGFuZ2VyXCJ9KX0pKX0sJHNjb3BlLnVwZGF0ZVVzZXI9ZnVuY3Rpb24oKXskc2NvcGUuY3VycmVudFVzZXImJigkc2NvcGUuJGVtaXQoXCJsb2FkaW5nXCIpLFVzZXJTdmMudXBkYXRlVXNlcigkc2NvcGUuY3VycmVudFVzZXIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuJGVtaXQoXCJ1cGRhdGVcIixyZXNwb25zZS5kYXRhKX0pKSl9LCRzY29wZS4kd2F0Y2goXCJjdXJyZW50VXNlci5mbGFncy5sZW5ndGhcIiwoZnVuY3Rpb24obGVuZ3RoKXskc2NvcGUudXBkYXRlVXNlcigpfSkpLCRzY29wZS5sb2FkQ291bnRyaWVzPWZ1bmN0aW9uKCRxdWVyeSl7cmV0dXJuW3tuYW1lOlwiQW5kb3JyYVwiLGZsYWc6XCJmbGFnLWFkXCIsdGlkYml0OlwiXCJ9LHtuYW1lOlwiVW5pdGVkIEFyYWIgRW1pcmF0ZXNcIixmbGFnOlwiZmxhZy1hZVwifSx7bmFtZTpcIkFmZ2hhbmlzdGFuXCIsZmxhZzpcImZsYWctYWZcIn0se25hbWU6XCJBbnRpZ3VhIGFuZCBCYXJidWRhXCIsZmxhZzpcImZsYWctYWdcIn0se25hbWU6XCJBbmd1aWxsYVwiLGZsYWc6XCJmbGFnLWFpXCJ9LHtuYW1lOlwiQWxiYW5pYVwiLGZsYWc6XCJmbGFnLWFsXCJ9LHtuYW1lOlwiQXJtZW5pYVwiLGZsYWc6XCJmbGFnLWFtXCJ9LHtuYW1lOlwiQW5nb2xhXCIsZmxhZzpcImZsYWctYW9cIn0se25hbWU6XCJBbnRhcmN0aWNhXCIsZmxhZzpcImZsYWctYXFcIn0se25hbWU6XCJBcmdlbnRpbmFcIixmbGFnOlwiZmxhZy1hclwifSx7bmFtZTpcIkFtZXJpY2FuIFNvbW9hXCIsZmxhZzpcImZsYWctYXNcIn0se25hbWU6XCJBdXN0cmlhXCIsZmxhZzpcImZsYWctYXRcIn0se25hbWU6XCJBdXN0cmFsaWFcIixmbGFnOlwiZmxhZy1hdVwifSx7bmFtZTpcIkFydWJhXCIsZmxhZzpcImZsYWctYXdcIn0se25hbWU6XCLDhWxhbmQgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWF4XCJ9LHtuYW1lOlwiQXplcmJhaWphblwiLGZsYWc6XCJmbGFnLWF6XCJ9LHtuYW1lOlwiQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYVwiLGZsYWc6XCJmbGFnLWJhXCJ9LHtuYW1lOlwiQmFyYmFkb3NcIixmbGFnOlwiZmxhZy1iYlwifSx7bmFtZTpcIkJhbmdsYWRlc2hcIixmbGFnOlwiZmxhZy1iZFwifSx7bmFtZTpcIkJlbGdpdW1cIixmbGFnOlwiZmxhZy1iZVwifSx7bmFtZTpcIkJ1cmtpbmEgRmFzb1wiLGZsYWc6XCJmbGFnLWJmXCJ9LHtuYW1lOlwiQnVsZ2FyaWFcIixmbGFnOlwiZmxhZy1iZ1wifSx7bmFtZTpcIkJhaHJhaW5cIixmbGFnOlwiZmxhZy1iaFwifSx7bmFtZTpcIkJ1cnVuZGlcIixmbGFnOlwiZmxhZy1iaVwifSx7bmFtZTpcIkJlbmluXCIsZmxhZzpcImZsYWctYmpcIn0se25hbWU6XCJTYWludCBCYXJ0aMOpbGVteVwiLGZsYWc6XCJmbGFnLWJsXCJ9LHtuYW1lOlwiQmVybXVkYVwiLGZsYWc6XCJmbGFnLWJtXCJ9LHtuYW1lOlwiQnJ1bmVpIFwiLGZsYWc6XCJmbGFnLWJuXCJ9LHtuYW1lOlwiQm9saXZpYSwgUGx1cmluYXRpb25hbCBTdGF0ZSBvZlwiLGZsYWc6XCJmbGFnLWJvXCJ9LHtuYW1lOlwiQm9uYWlyZSwgU2ludCBFdXN0YXRpdXMgYW5kIFNhYmFcIixmbGFnOlwiZmxhZy1icVwifSx7bmFtZTpcIkJyYXppbFwiLGZsYWc6XCJmbGFnLWJyXCJ9LHtuYW1lOlwiQmFoYW1hc1wiLGZsYWc6XCJmbGFnLWJzXCJ9LHtuYW1lOlwiQmh1dGFuXCIsZmxhZzpcImZsYWctYnRcIn0se25hbWU6XCJCb3V2ZXQgSXNsYW5kXCIsZmxhZzpcImZsYWctYnZcIn0se25hbWU6XCJCb3Rzd2FuYVwiLGZsYWc6XCJmbGFnLWJ3XCJ9LHtuYW1lOlwiQmVsYXJ1c1wiLGZsYWc6XCJmbGFnLWJ5XCJ9LHtuYW1lOlwiQmVsaXplXCIsZmxhZzpcImZsYWctYnpcIn0se25hbWU6XCJDYW5hZGFcIixmbGFnOlwiZmxhZy1jYVwifSx7bmFtZTpcIkNvY29zIChLZWVsaW5nKSBJc2xhbmRzXCIsZmxhZzpcImZsYWctY2NcIn0se25hbWU6XCJDb25nbywgdGhlIERlbW9jcmF0aWMgUmVwdWJsaWMgb2YgdGhlXCIsZmxhZzpcImZsYWctY2RcIn0se25hbWU6XCJDZW50cmFsIEFmcmljYW4gUmVwdWJsaWNcIixmbGFnOlwiZmxhZy1jZlwifSx7bmFtZTpcIkNvbmdvXCIsZmxhZzpcImZsYWctY2dcIn0se25hbWU6XCJTd2l0emVybGFuZFwiLGZsYWc6XCJmbGFnLWNoXCJ9LHtuYW1lOlwiQ8O0dGUgZCdJdm9pcmVcIixmbGFnOlwiZmxhZy1jaVwifSx7bmFtZTpcIkNvb2sgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWNrXCJ9LHtuYW1lOlwiQ2hpbGVcIixmbGFnOlwiZmxhZy1jbFwifSx7bmFtZTpcIkNhbWVyb29uXCIsZmxhZzpcImZsYWctY21cIn0se25hbWU6XCJDaGluYVwiLGZsYWc6XCJmbGFnLWNuXCJ9LHtuYW1lOlwiQ29sb21iaWFcIixmbGFnOlwiZmxhZy1jb1wifSx7bmFtZTpcIkNvc3RhIFJpY2FcIixmbGFnOlwiZmxhZy1jclwifSx7bmFtZTpcIkN1YmFcIixmbGFnOlwiZmxhZy1jdVwifSx7bmFtZTpcIkNhYm8gVmVyZGVcIixmbGFnOlwiZmxhZy1jdlwifSx7bmFtZTpcIkN1cmHDp2FvXCIsZmxhZzpcImZsYWctY3dcIn0se25hbWU6XCJDaHJpc3RtYXMgSXNsYW5kXCIsZmxhZzpcImZsYWctY3hcIn0se25hbWU6XCJDeXBydXNcIixmbGFnOlwiZmxhZy1jeVwifSx7bmFtZTpcIkN6ZWNoIFJlcHVibGljXCIsZmxhZzpcImZsYWctY3pcIn0se25hbWU6XCJHZXJtYW55XCIsZmxhZzpcImZsYWctZGVcIn0se25hbWU6XCJEamlib3V0aVwiLGZsYWc6XCJmbGFnLWRqXCJ9LHtuYW1lOlwiRGVubWFya1wiLGZsYWc6XCJmbGFnLWRrXCJ9LHtuYW1lOlwiRG9taW5pY2FcIixmbGFnOlwiZmxhZy1kbVwifSx7bmFtZTpcIkRvbWluaWNhbiBSZXB1YmxpY1wiLGZsYWc6XCJmbGFnLWRvXCJ9LHtuYW1lOlwiQWxnZXJpYVwiLGZsYWc6XCJmbGFnLWR6XCJ9LHtuYW1lOlwiRWN1YWRvclwiLGZsYWc6XCJmbGFnLWVjXCJ9LHtuYW1lOlwiRXN0b25pYVwiLGZsYWc6XCJmbGFnLWVlXCJ9LHtuYW1lOlwiRWd5cHRcIixmbGFnOlwiZmxhZy1lZ1wifSx7bmFtZTpcIldlc3Rlcm4gU2FoYXJhXCIsZmxhZzpcImZsYWctZWhcIn0se25hbWU6XCJFcml0cmVhXCIsZmxhZzpcImZsYWctZXJcIn0se25hbWU6XCJTcGFpblwiLGZsYWc6XCJmbGFnLWVzXCJ9LHtuYW1lOlwiRXRoaW9waWFcIixmbGFnOlwiZmxhZy1ldFwifSx7bmFtZTpcIkZpbmxhbmRcIixmbGFnOlwiZmxhZy1maVwifSx7bmFtZTpcIkZpamlcIixmbGFnOlwiZmxhZy1malwifSx7bmFtZTpcIkZhbGtsYW5kIElzbGFuZHMgKE1hbHZpbmFzKVwiLGZsYWc6XCJmbGFnLWZrXCJ9LHtuYW1lOlwiTWljcm9uZXNpYSwgRmVkZXJhdGVkIFN0YXRlcyBvZlwiLGZsYWc6XCJmbGFnLWZtXCJ9LHtuYW1lOlwiRmFyb2UgSXNsYW5kc1wiLGZsYWc6XCJmbGFnLWZvXCJ9LHtuYW1lOlwiRnJhbmNlXCIsZmxhZzpcImZsYWctZnJcIn0se25hbWU6XCJHYWJvblwiLGZsYWc6XCJmbGFnLWdhXCJ9LHtuYW1lOlwiVW5pdGVkIEtpbmdkb20gb2YgR3JlYXQgQnJpdGFpbiBhbmQgTm9ydGhlcm4gSXJlbGFuZFwiLGZsYWc6XCJmbGFnLWdiXCJ9LHtuYW1lOlwiR3JlbmFkYVwiLGZsYWc6XCJmbGFnLWdkXCJ9LHtuYW1lOlwiR2VvcmdpYVwiLGZsYWc6XCJmbGFnLWdlXCJ9LHtuYW1lOlwiRnJlbmNoIEd1aWFuYVwiLGZsYWc6XCJmbGFnLWdmXCJ9LHtuYW1lOlwiR3Vlcm5zZXlcIixmbGFnOlwiZmxhZy1nZ1wifSx7bmFtZTpcIkdoYW5hXCIsZmxhZzpcImZsYWctZ2hcIn0se25hbWU6XCJHaWJyYWx0YXJcIixmbGFnOlwiZmxhZy1naVwifSx7bmFtZTpcIkdyZWVubGFuZFwiLGZsYWc6XCJmbGFnLWdsXCJ9LHtuYW1lOlwiR2FtYmlhXCIsZmxhZzpcImZsYWctZ21cIn0se25hbWU6XCJHdWluZWFcIixmbGFnOlwiZmxhZy1nblwifSx7bmFtZTpcIkd1YWRlbG91cGVcIixmbGFnOlwiZmxhZy1ncFwifSx7bmFtZTpcIkVxdWF0b3JpYWwgR3VpbmVhXCIsZmxhZzpcImZsYWctZ3FcIn0se25hbWU6XCJHcmVlY2VcIixmbGFnOlwiZmxhZy1nclwifSx7bmFtZTpcIlNvdXRoIEdlb3JnaWEgYW5kIHRoZSBTb3V0aCBTYW5kd2ljaCBJc2xhbmRzXCIsZmxhZzpcImZsYWctZ3NcIn0se25hbWU6XCJHdWF0ZW1hbGFcIixmbGFnOlwiZmxhZy1ndFwifSx7bmFtZTpcIkd1YW1cIixmbGFnOlwiZmxhZy1ndVwifSx7bmFtZTpcIkd1aW5lYS1CaXNzYXVcIixmbGFnOlwiZmxhZy1nd1wifSx7bmFtZTpcIkd1eWFuYVwiLGZsYWc6XCJmbGFnLWd5XCJ9LHtuYW1lOlwiSG9uZyBLb25nXCIsZmxhZzpcImZsYWctaGtcIn0se25hbWU6XCJIZWFyZCBJc2xhbmQgYW5kIE1jRG9uYWxkIElzbGFuZHNcIixmbGFnOlwiZmxhZy1obVwifSx7bmFtZTpcIkhvbmR1cmFzXCIsZmxhZzpcImZsYWctaG5cIn0se25hbWU6XCJDcm9hdGlhXCIsZmxhZzpcImZsYWctaHJcIn0se25hbWU6XCJIYWl0aVwiLGZsYWc6XCJmbGFnLWh0XCJ9LHtuYW1lOlwiSHVuZ2FyeVwiLGZsYWc6XCJmbGFnLWh1XCJ9LHtuYW1lOlwiSW5kb25lc2lhXCIsZmxhZzpcImZsYWctaWRcIn0se25hbWU6XCJJcmVsYW5kXCIsZmxhZzpcImZsYWctaWVcIn0se25hbWU6XCJJc3JhZWxcIixmbGFnOlwiZmxhZy1pbFwifSx7bmFtZTpcIklzbGUgb2YgTWFuXCIsZmxhZzpcImZsYWctaW1cIn0se25hbWU6XCJJbmRpYVwiLGZsYWc6XCJmbGFnLWluXCJ9LHtuYW1lOlwiQnJpdGlzaCBJbmRpYW4gT2NlYW4gVGVycml0b3J5XCIsZmxhZzpcImZsYWctaW9cIn0se25hbWU6XCJJcmFxXCIsZmxhZzpcImZsYWctaXFcIn0se25hbWU6XCJJcmFuLCBJc2xhbWljIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWctaXJcIn0se25hbWU6XCJJY2VsYW5kXCIsZmxhZzpcImZsYWctaXNcIn0se25hbWU6XCJJdGFseVwiLGZsYWc6XCJmbGFnLWl0XCJ9LHtuYW1lOlwiSmVyc2V5XCIsZmxhZzpcImZsYWctamVcIn0se25hbWU6XCJKYW1haWNhXCIsZmxhZzpcImZsYWctam1cIn0se25hbWU6XCJKb3JkYW5cIixmbGFnOlwiZmxhZy1qb1wifSx7bmFtZTpcIkphcGFuXCIsZmxhZzpcImZsYWctanBcIn0se25hbWU6XCJLZW55YVwiLGZsYWc6XCJmbGFnLWtlXCJ9LHtuYW1lOlwiS3lyZ3l6c3RhblwiLGZsYWc6XCJmbGFnLWtnXCJ9LHtuYW1lOlwiQ2FtYm9kaWFcIixmbGFnOlwiZmxhZy1raFwifSx7bmFtZTpcIktpcmliYXRpXCIsZmxhZzpcImZsYWcta2lcIn0se25hbWU6XCJDb21vcm9zXCIsZmxhZzpcImZsYWcta21cIn0se25hbWU6XCJTYWludCBLaXR0cyBhbmQgTmV2aXNcIixmbGFnOlwiZmxhZy1rblwifSx7bmFtZTpcIktvcmVhLCBEZW1vY3JhdGljIFBlb3BsZSdzIFJlcHVibGljIG9mXCIsZmxhZzpcImZsYWcta3BcIn0se25hbWU6XCJLb3JlYSwgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1rclwifSx7bmFtZTpcIkt1d2FpdFwiLGZsYWc6XCJmbGFnLWt3XCJ9LHtuYW1lOlwiQ2F5bWFuIElzbGFuZHNcIixmbGFnOlwiZmxhZy1reVwifSx7bmFtZTpcIkthemFraHN0YW5cIixmbGFnOlwiZmxhZy1relwifSx7bmFtZTpcIkxhbyBQZW9wbGUncyBEZW1vY3JhdGljIFJlcHVibGljXCIsZmxhZzpcImZsYWctbGFcIn0se25hbWU6XCJMZWJhbm9uXCIsZmxhZzpcImZsYWctbGJcIn0se25hbWU6XCJTYWludCBMdWNpYVwiLGZsYWc6XCJmbGFnLWxjXCJ9LHtuYW1lOlwiTGllY2h0ZW5zdGVpblwiLGZsYWc6XCJmbGFnLWxpXCJ9LHtuYW1lOlwiU3JpIExhbmthXCIsZmxhZzpcImZsYWctbGtcIn0se25hbWU6XCJMaWJlcmlhXCIsZmxhZzpcImZsYWctbHJcIn0se25hbWU6XCJMZXNvdGhvXCIsZmxhZzpcImZsYWctbHNcIn0se25hbWU6XCJMaXRodWFuaWFcIixmbGFnOlwiZmxhZy1sdFwifSx7bmFtZTpcIkx1eGVtYm91cmdcIixmbGFnOlwiZmxhZy1sdVwifSx7bmFtZTpcIkxhdHZpYVwiLGZsYWc6XCJmbGFnLWx2XCJ9LHtuYW1lOlwiTGlieWFcIixmbGFnOlwiZmxhZy1seVwifSx7bmFtZTpcIk1vcm9jY29cIixmbGFnOlwiZmxhZy1tYVwifSx7bmFtZTpcIk1vbmFjb1wiLGZsYWc6XCJmbGFnLW1jXCJ9LHtuYW1lOlwiTW9sZG92YSwgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1tZFwifSx7bmFtZTpcIk1vbnRlbmVncm9cIixmbGFnOlwiZmxhZy1tZVwifSx7bmFtZTpcIlNhaW50IE1hcnRpbiAoRnJlbmNoIHBhcnQpXCIsZmxhZzpcImZsYWctbWZcIn0se25hbWU6XCJNYWRhZ2FzY2FyXCIsZmxhZzpcImZsYWctbWdcIn0se25hbWU6XCJNYXJzaGFsbCBJc2xhbmRzXCIsZmxhZzpcImZsYWctbWhcIn0se25hbWU6XCJNYWNlZG9uaWEsIHRoZSBmb3JtZXIgWXVnb3NsYXYgUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy1ta1wifSx7bmFtZTpcIk1hbGlcIixmbGFnOlwiZmxhZy1tbFwifSx7bmFtZTpcIk15YW5tYXJcIixmbGFnOlwiZmxhZy1tbVwifSx7bmFtZTpcIk1vbmdvbGlhXCIsZmxhZzpcImZsYWctbW5cIn0se25hbWU6XCJNYWNhb1wiLGZsYWc6XCJmbGFnLW1vXCJ9LHtuYW1lOlwiTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzXCIsZmxhZzpcImZsYWctbXBcIn0se25hbWU6XCJNYXJ0aW5pcXVlXCIsZmxhZzpcImZsYWctbXFcIn0se25hbWU6XCJNYXVyaXRhbmlhXCIsZmxhZzpcImZsYWctbXJcIn0se25hbWU6XCJNb250c2VycmF0XCIsZmxhZzpcImZsYWctbXNcIn0se25hbWU6XCJNYWx0YVwiLGZsYWc6XCJmbGFnLW10XCJ9LHtuYW1lOlwiTWF1cml0aXVzXCIsZmxhZzpcImZsYWctbXVcIn0se25hbWU6XCJNYWxkaXZlc1wiLGZsYWc6XCJmbGFnLW12XCJ9LHtuYW1lOlwiTWFsYXdpXCIsZmxhZzpcImZsYWctbXdcIn0se25hbWU6XCJNZXhpY29cIixmbGFnOlwiZmxhZy1teFwifSx7bmFtZTpcIk1hbGF5c2lhXCIsZmxhZzpcImZsYWctbXlcIn0se25hbWU6XCJNb3phbWJpcXVlXCIsZmxhZzpcImZsYWctbXpcIn0se25hbWU6XCJOYW1pYmlhXCIsZmxhZzpcImZsYWctbmFcIn0se25hbWU6XCJOZXcgQ2FsZWRvbmlhXCIsZmxhZzpcImZsYWctbmNcIn0se25hbWU6XCJOaWdlclwiLGZsYWc6XCJmbGFnLW5lXCJ9LHtuYW1lOlwiTm9yZm9sayBJc2xhbmRcIixmbGFnOlwiZmxhZy1uZlwifSx7bmFtZTpcIk5pZ2VyaWFcIixmbGFnOlwiZmxhZy1uZ1wifSx7bmFtZTpcIk5pY2FyYWd1YVwiLGZsYWc6XCJmbGFnLW5pXCJ9LHtuYW1lOlwiTmV0aGVybGFuZHNcIixmbGFnOlwiZmxhZy1ubFwifSx7bmFtZTpcIk5vcndheVwiLGZsYWc6XCJmbGFnLW5vXCJ9LHtuYW1lOlwiTmVwYWxcIixmbGFnOlwiZmxhZy1ucFwifSx7bmFtZTpcIk5hdXJ1XCIsZmxhZzpcImZsYWctbnJcIn0se25hbWU6XCJOaXVlXCIsZmxhZzpcImZsYWctbnVcIn0se25hbWU6XCJOZXcgWmVhbGFuZFwiLGZsYWc6XCJmbGFnLW56XCJ9LHtuYW1lOlwiT21hblwiLGZsYWc6XCJmbGFnLW9tXCJ9LHtuYW1lOlwiUGFuYW1hXCIsZmxhZzpcImZsYWctcGFcIn0se25hbWU6XCJQZXJ1XCIsZmxhZzpcImZsYWctcGVcIn0se25hbWU6XCJGcmVuY2ggUG9seW5lc2lhXCIsZmxhZzpcImZsYWctcGZcIn0se25hbWU6XCJQYXB1YSBOZXcgR3VpbmVhXCIsZmxhZzpcImZsYWctcGdcIn0se25hbWU6XCJQaGlsaXBwaW5lc1wiLGZsYWc6XCJmbGFnLXBoXCJ9LHtuYW1lOlwiUGFraXN0YW5cIixmbGFnOlwiZmxhZy1wa1wifSx7bmFtZTpcIlBvbGFuZFwiLGZsYWc6XCJmbGFnLXBsXCJ9LHtuYW1lOlwiU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvblwiLGZsYWc6XCJmbGFnLXBtXCJ9LHtuYW1lOlwiUGl0Y2Fpcm5cIixmbGFnOlwiZmxhZy1wblwifSx7bmFtZTpcIlB1ZXJ0byBSaWNvXCIsZmxhZzpcImZsYWctcHJcIn0se25hbWU6XCJQYWxlc3RpbmUsIFN0YXRlIG9mXCIsZmxhZzpcImZsYWctcHNcIn0se25hbWU6XCJQb3J0dWdhbFwiLGZsYWc6XCJmbGFnLXB0XCJ9LHtuYW1lOlwiUGFsYXVcIixmbGFnOlwiZmxhZy1wd1wifSx7bmFtZTpcIlBhcmFndWF5XCIsZmxhZzpcImZsYWctcHlcIn0se25hbWU6XCJRYXRhclwiLGZsYWc6XCJmbGFnLXFhXCJ9LHtuYW1lOlwiUsOpdW5pb25cIixmbGFnOlwiZmxhZy1yZVwifSx7bmFtZTpcIlJvbWFuaWFcIixmbGFnOlwiZmxhZy1yb1wifSx7bmFtZTpcIlNlcmJpYVwiLGZsYWc6XCJmbGFnLXJzXCJ9LHtuYW1lOlwiUnVzc2lhbiBGZWRlcmF0aW9uXCIsZmxhZzpcImZsYWctcnVcIn0se25hbWU6XCJSd2FuZGFcIixmbGFnOlwiZmxhZy1yd1wifSx7bmFtZTpcIlNhdWRpIEFyYWJpYVwiLGZsYWc6XCJmbGFnLXNhXCJ9LHtuYW1lOlwiU29sb21vbiBJc2xhbmRzXCIsZmxhZzpcImZsYWctc2JcIn0se25hbWU6XCJTZXljaGVsbGVzXCIsZmxhZzpcImZsYWctc2NcIn0se25hbWU6XCJTdWRhblwiLGZsYWc6XCJmbGFnLXNkXCJ9LHtuYW1lOlwiU3dlZGVuXCIsZmxhZzpcImZsYWctc2VcIn0se25hbWU6XCJTaW5nYXBvcmVcIixmbGFnOlwiZmxhZy1zZ1wifSx7bmFtZTpcIlNhaW50IEhlbGVuYSwgQXNjZW5zaW9uIGFuZCBUcmlzdGFuIGRhIEN1bmhhXCIsZmxhZzpcImZsYWctc2hcIn0se25hbWU6XCJTbG92ZW5pYVwiLGZsYWc6XCJmbGFnLXNpXCJ9LHtuYW1lOlwiU3ZhbGJhcmQgYW5kIEphbiBNYXllblwiLGZsYWc6XCJmbGFnLXNqXCJ9LHtuYW1lOlwiU2xvdmFraWFcIixmbGFnOlwiZmxhZy1za1wifSx7bmFtZTpcIlNpZXJyYSBMZW9uZVwiLGZsYWc6XCJmbGFnLXNsXCJ9LHtuYW1lOlwiU2FuIE1hcmlub1wiLGZsYWc6XCJmbGFnLXNtXCJ9LHtuYW1lOlwiU2VuZWdhbFwiLGZsYWc6XCJmbGFnLXNuXCJ9LHtuYW1lOlwiU29tYWxpYVwiLGZsYWc6XCJmbGFnLXNvXCJ9LHtuYW1lOlwiU3VyaW5hbWVcIixmbGFnOlwiZmxhZy1zclwifSx7bmFtZTpcIlNvdXRoIFN1ZGFuXCIsZmxhZzpcImZsYWctc3NcIn0se25hbWU6XCJTYW8gVG9tZSBhbmQgUHJpbmNpcGVcIixmbGFnOlwiZmxhZy1zdFwifSx7bmFtZTpcIkVsIFNhbHZhZG9yXCIsZmxhZzpcImZsYWctc3ZcIn0se25hbWU6XCJTaW50IE1hYXJ0ZW4gKER1dGNoIHBhcnQpXCIsZmxhZzpcImZsYWctc3hcIn0se25hbWU6XCJTeXJpYW4gQXJhYiBSZXB1YmxpY1wiLGZsYWc6XCJmbGFnLXN5XCJ9LHtuYW1lOlwiU3dhemlsYW5kXCIsZmxhZzpcImZsYWctc3pcIn0se25hbWU6XCJUdXJrcyBhbmQgQ2FpY29zIElzbGFuZHNcIixmbGFnOlwiZmxhZy10Y1wifSx7bmFtZTpcIkNoYWRcIixmbGFnOlwiZmxhZy10ZFwifSx7bmFtZTpcIkZyZW5jaCBTb3V0aGVybiBUZXJyaXRvcmllc1wiLGZsYWc6XCJmbGFnLXRmXCJ9LHtuYW1lOlwiVG9nb1wiLGZsYWc6XCJmbGFnLXRnXCJ9LHtuYW1lOlwiVGhhaWxhbmRcIixmbGFnOlwiZmxhZy10aFwifSx7bmFtZTpcIlRhamlraXN0YW5cIixmbGFnOlwiZmxhZy10alwifSx7bmFtZTpcIlRva2VsYXVcIixmbGFnOlwiZmxhZy10a1wifSx7bmFtZTpcIlRpbW9yLUxlc3RlXCIsZmxhZzpcImZsYWctdGxcIn0se25hbWU6XCJUdXJrbWVuaXN0YW5cIixmbGFnOlwiZmxhZy10bVwifSx7bmFtZTpcIlR1bmlzaWFcIixmbGFnOlwiZmxhZy10blwifSx7bmFtZTpcIlRvbmdhXCIsZmxhZzpcImZsYWctdG9cIn0se25hbWU6XCJUdXJrZXlcIixmbGFnOlwiZmxhZy10clwifSx7bmFtZTpcIlRyaW5pZGFkIGFuZCBUb2JhZ29cIixmbGFnOlwiZmxhZy10dFwifSx7bmFtZTpcIlR1dmFsdVwiLGZsYWc6XCJmbGFnLXR2XCJ9LHtuYW1lOlwiVGFpd2FuLCBQcm92aW5jZSBvZiBDaGluYVwiLGZsYWc6XCJmbGFnLXR3XCJ9LHtuYW1lOlwiVGFuemFuaWEsIFVuaXRlZCBSZXB1YmxpYyBvZlwiLGZsYWc6XCJmbGFnLXR6XCJ9LHtuYW1lOlwiVWtyYWluZVwiLGZsYWc6XCJmbGFnLXVhXCJ9LHtuYW1lOlwiVWdhbmRhXCIsZmxhZzpcImZsYWctdWdcIn0se25hbWU6XCJVbml0ZWQgU3RhdGVzIE1pbm9yIE91dGx5aW5nIElzbGFuZHNcIixmbGFnOlwiZmxhZy11bVwifSx7bmFtZTpcIlVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYVwiLGZsYWc6XCJmbGFnLXVzXCJ9LHtuYW1lOlwiVXJ1Z3VheVwiLGZsYWc6XCJmbGFnLXV5XCJ9LHtuYW1lOlwiVXpiZWtpc3RhblwiLGZsYWc6XCJmbGFnLXV6XCJ9LHtuYW1lOlwiSG9seSBTZWVcIixmbGFnOlwiZmxhZy12YVwifSx7bmFtZTpcIlNhaW50IFZpbmNlbnQgYW5kIHRoZSBHcmVuYWRpbmVzXCIsZmxhZzpcImZsYWctdmNcIn0se25hbWU6XCJWZW5lenVlbGEsIEJvbGl2YXJpYW4gUmVwdWJsaWMgb2ZcIixmbGFnOlwiZmxhZy12ZVwifSx7bmFtZTpcIlZpcmdpbiBJc2xhbmRzLCBCcml0aXNoXCIsZmxhZzpcImZsYWctdmdcIn0se25hbWU6XCJWaXJnaW4gSXNsYW5kcywgVS5TLlwiLGZsYWc6XCJmbGFnLXZpXCJ9LHtuYW1lOlwiVmlldCBOYW1cIixmbGFnOlwiZmxhZy12blwifSx7bmFtZTpcIlZhbnVhdHVcIixmbGFnOlwiZmxhZy12dVwifSx7bmFtZTpcIldhbGxpcyBhbmQgRnV0dW5hXCIsZmxhZzpcImZsYWctd2ZcIn0se25hbWU6XCJTYW1vYVwiLGZsYWc6XCJmbGFnLXdzXCJ9LHtuYW1lOlwiWWVtZW5cIixmbGFnOlwiZmxhZy15ZVwifSx7bmFtZTpcIk1heW90dGVcIixmbGFnOlwiZmxhZy15dFwifSx7bmFtZTpcIlNvdXRoIEFmcmljYVwiLGZsYWc6XCJmbGFnLXphXCJ9LHtuYW1lOlwiWmFtYmlhXCIsZmxhZzpcImZsYWctem1cIn0se25hbWU6XCJaaW1iYWJ3ZVwiLGZsYWc6XCJmbGFnLXp3XCJ9XS5maWx0ZXIoKGZ1bmN0aW9uKGNvdW50cnkpe3JldHVybi0xIT1jb3VudHJ5Lm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCRxdWVyeS50b0xvd2VyQ2FzZSgpKX0pKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlNraWxsc0N0cmxcIixbXCIkc2NvcGVcIixcIiR3aW5kb3dcIixmdW5jdGlvbigkc2NvcGUsJHdpbmRvdyl7JHNjb3BlLnNlbGVjdGVkU2tpbGw9MCwkc2NvcGUuc2tpbGxzVmlzaWJsZT0hMSwkc2NvcGUubGFiZWxzPVtcIkRvd25sb2FkIFNhbGVzXCIsXCJJbi1TdG9yZSBTYWxlc1wiLFwiTWFpbC1PcmRlciBTYWxlc1wiXSwkc2NvcGUuZGF0YT1bMzAwLDUwMCwxMDBdLCQuZ2V0SlNPTihcIi9za2lsbHMuanNvblwiLChmdW5jdGlvbihkYXRhKXskc2NvcGUuc2tpbGxzPWRhdGEuZmlsdGVyKChmdW5jdGlvbihza2lsbCl7cmV0dXJuIHNraWxsLmVuYWJsZWR9KSksJHNjb3BlLnNldFNlbGVjdGVkU2tpbGw9ZnVuY3Rpb24oc2tpbGwpeyRzY29wZS5zZWxlY3RlZFNraWxsPXNraWxsLCRzY29wZS5zZWxlY3RlZFNraWxsLmNoYXJ0T3B0aW9ucz17Y3V0b3V0UGVyY2VudGFnZTo4MCxjaXJjdW1mZXJlbmNlOjIqTWF0aC5QSSxtYWludGFpbkFzcGVjdFJhdGlvOiEwLHRvb2x0aXBzOntlbmFibGVkOiExfX0sJHNjb3BlLnNlbGVjdGVkU2tpbGwuY2hhcnRTdHlsZT17XCJiYWNrZ3JvdW5kLWltYWdlXCI6XCJ1cmwoL3NraWxscy9cIiskc2NvcGUuc2VsZWN0ZWRTa2lsbC5pbWFnZStcIilcIixcImJhY2tncm91bmQtcmVwZWF0XCI6XCJuby1yZXBlYXRcIixcImJhY2tncm91bmQtc2l6ZVwiOlwiNjAlXCIsXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6XCI1MCUgNTAlXCJ9fSwkc2NvcGUuc2V0U2VsZWN0ZWRTa2lsbCgkc2NvcGUuc2tpbGxzWzBdKSwkc2NvcGUuJGFwcGx5KCl9KSl9XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIlRlblRoaW5nc0N0cmxcIixbXCIkc2NvcGVcIixcIlRlblRoaW5nc1N2Y1wiLGZ1bmN0aW9uKCRzY29wZSxUZW5UaGluZ3NTdmMpe2Z1bmN0aW9uIGZsYXNoKGVsZW1lbnQpe2NvbnN0IGNvbG9yPSQoZWxlbWVudCkuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiKTskKGVsZW1lbnQpLmFuaW1hdGUoe2JhY2tncm91bmRDb2xvcjpcIiNGQTgwNzJcIn0sMTAwLCgpPT57JChlbGVtZW50KS5hbmltYXRlKHtiYWNrZ3JvdW5kQ29sb3I6Y29sb3J9LDEwMCl9KX0kc2NvcGUuc2VhcmNoPXtuYW1lOlwiXCIsdmFsdWVzOlwiXCJ9LFRlblRoaW5nc1N2Yy5nZXRDYXRlZ29yaWVzKCkudGhlbihyZXNwb25zZT0+eyRzY29wZS5jYXRlZ29yaWVzPXJlc3BvbnNlLmRhdGEsJHNjb3BlLmNhdGVnb3J5RmlsdGVycz0kc2NvcGUuY2F0ZWdvcmllcy5tYXAoY2F0ZWdvcnk9PmNhdGVnb3J5KSwkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzLnB1c2goXCJBbGxcIiksJHNjb3BlLmNhdGVnb3J5RmlsdGVycy5wdXNoKFwiQmxhbmtcIiksJHNjb3BlLmNhdGVnb3J5RmlsdGVyPVwiQWxsXCIsJHNjb3BlLnVwZGF0ZUZpbHRlcj1cImFsbFwifSksVGVuVGhpbmdzU3ZjLmdldExhbmd1YWdlcygpLnRoZW4ocmVzcG9uc2U9Pnskc2NvcGUubGFuZ3VhZ2VzPXJlc3BvbnNlLmRhdGEsJHNjb3BlLmxhbmd1YWdlRmlsdGVycz0kc2NvcGUubGFuZ3VhZ2VzLm1hcChsYW5ndWFnZT0+bGFuZ3VhZ2UpLCRzY29wZS5sYW5ndWFnZUZpbHRlcnMucHVzaCh7bmFtZTpcIkFsbFwiLGNvZGU6XCJhbGxcIn0pLCRzY29wZS5sYW5ndWFnZUZpbHRlcj17bmFtZTpcIkFsbFwiLGNvZGU6XCJhbGxcIn19KSwkc2NvcGUua2V5RG93bj1lPT57c3dpdGNoKChlPWV8fHdpbmRvdy5ldmVudCkua2V5Q29kZSl7Y2FzZSA5OiQoXCIjbmV3LWJsdXJiXCIpLmlzKFwiOmZvY3VzXCIpJiZzZXRUaW1lb3V0KCgpPT57JHNjb3BlLmFkZFZhbHVlKCl9LDEwMCk7YnJlYWs7Y2FzZSAxMzokKFwiI25ldy1ibHVyYlwiKS5pcyhcIjpmb2N1c1wiKT8kc2NvcGUuYWRkVmFsdWUoKTokKFwiI25ldy12YWx1ZVwiKS5pcyhcIjpmb2N1c1wiKSYmJChcIiNuZXctYmx1cmJcIikuZm9jdXMoKX19LCRzY29wZS5zZWFyY2hOYW1lPVwiXCIsJHNjb3BlLm5ld0l0ZW09e30sJHNjb3BlLnNldENhdGVnb3J5RmlsdGVyPWNhdGVnb3J5PT4kc2NvcGUuY2F0ZWdvcnlGaWx0ZXI9Y2F0ZWdvcnksJHNjb3BlLnNldFVzZXJGaWx0ZXI9dXNlcj0+JHNjb3BlLnVzZXJGaWx0ZXI9dXNlciwkc2NvcGUuc2V0VXBkYXRlRmlsdGVyPXR5cGU9PiRzY29wZS51cGRhdGVGaWx0ZXI9dHlwZSwkc2NvcGUuc2V0TGFuZ3VhZ2VGaWx0ZXI9bGFuZ3VhZ2U9PiRzY29wZS5sYW5ndWFnZUZpbHRlcj1sYW5ndWFnZSwkc2NvcGUuZmlsdGVyZWRMaXN0cz0oKT0+JHNjb3BlLmxpc3RzPyRzY29wZS5saXN0cy5maWx0ZXIoKHtpc0R5bmFtaWN9KT0+XCJhbGxcIj09PSRzY29wZS51cGRhdGVGaWx0ZXJ8fCEoXCJzdGF0aWNcIj09PSRzY29wZS51cGRhdGVGaWx0ZXImJiEwPT09aXNEeW5hbWljfHxcImR5bmFtaWNcIj09PSRzY29wZS51cGRhdGVGaWx0ZXImJiExPT09aXNEeW5hbWljKSkuZmlsdGVyKCh7Y2F0ZWdvcmllc30pPT5cIkFsbFwiPT09JHNjb3BlLmNhdGVnb3J5RmlsdGVyfHwoY2F0ZWdvcmllcy5sZW5ndGg+MD9jYXRlZ29yaWVzLmluZGV4T2YoJHNjb3BlLmNhdGVnb3J5RmlsdGVyKT49MDpcIkJsYW5rXCI9PT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXIpKS5maWx0ZXIoKHtjcmVhdG9yfSk9PlwiQWxsXCI9PT0kc2NvcGUudXNlckZpbHRlcnx8Y3JlYXRvcj09PSRzY29wZS51c2VyRmlsdGVyKS5maWx0ZXIoKHtsYW5ndWFnZX0pPT5cImFsbFwiPT09JHNjb3BlLmxhbmd1YWdlRmlsdGVyLmNvZGV8fGxhbmd1YWdlPT09JHNjb3BlLmxhbmd1YWdlRmlsdGVyLmNvZGUpOltdLCRzY29wZS4kb24oXCJsb2dpblwiLF89Pnskc2NvcGUuZ2V0TGlzdHMoKX0pLCRzY29wZS5zb3J0PShzb3J0VmFsdWUsc29ydExhYmVsKT0+eyRzY29wZS5zb3J0TGFiZWw9c29ydExhYmVsLCRzY29wZS5zb3J0VmFsdWU9PT1zb3J0VmFsdWU/JHNjb3BlLnNvcnREaXJlY3Rpb249ISRzY29wZS5zb3J0RGlyZWN0aW9uOigkc2NvcGUuc29ydFZhbHVlPXNvcnRWYWx1ZSwkc2NvcGUuc29ydERpcmVjdGlvbj0hMCksJHNjb3BlLnNvcnRlcj0oJHNjb3BlLnNvcnREaXJlY3Rpb24/XCIrXCI6XCItXCIpKyRzY29wZS5zb3J0VmFsdWV9LCRzY29wZS5zb3J0TGlzdD1cInZhbHVlXCIsJHNjb3BlLnNvcnRWYWx1ZT1cImRhdGVcIiwkc2NvcGUuc29ydERpcmVjdGlvbj0hMCwkc2NvcGUuc29ydChcImRhdGVcIixcIkNyZWF0aW9uIERhdGVcIiksJHNjb3BlLmdldExhbmd1YWdlQ291bnQ9bGFuZ3VhZ2U9PntpZighJHNjb3BlLmxpc3RzKXJldHVybiAwO2NvbnN0IGNvdW50PSRzY29wZS5saXN0cy5maWx0ZXIobGlzdD0+KFwiQWxsXCI9PT0kc2NvcGUuY2F0ZWdvcnlGaWx0ZXJ8fGxpc3QuY2F0ZWdvcmllcy5pbmNsdWRlcygkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIpKSYmKFwiYWxsXCI9PT1sYW5ndWFnZS5jb2RlfHxsaXN0Lmxhbmd1YWdlPT09bGFuZ3VhZ2UuY29kZSkmJihcIkFsbFwiPT09JHNjb3BlLnVzZXJGaWx0ZXJ8fGxpc3QuY3JlYXRvcj09PSRzY29wZS51c2VyRmlsdGVyKSYmKFwiYWxsXCI9PT0kc2NvcGUudXBkYXRlRmlsdGVyfHxsaXN0LmlzRHluYW1pYz09PShcImR5bmFtaWNcIj09PSRzY29wZS51cGRhdGVGaWx0ZXIpKSkubGVuZ3RoO3JldHVybmAke2NvdW50fSAtICR7TWF0aC5yb3VuZChjb3VudC8kc2NvcGUubGlzdHMubGVuZ3RoKjEwMCl9JWB9LCRzY29wZS5nZXRDYXRlZ29yeUNvdW50PWNhdGVnb3J5PT57aWYoISRzY29wZS5saXN0cylyZXR1cm4gMDtjb25zdCBjb3VudD0kc2NvcGUubGlzdHMuZmlsdGVyKGxpc3Q9PiEoIShcIkFsbFwiPT09Y2F0ZWdvcnl8fGxpc3QuY2F0ZWdvcmllcy5pbmRleE9mKGNhdGVnb3J5KT49MCl8fFwiYWxsXCIhPT0kc2NvcGUubGFuZ3VhZ2VGaWx0ZXIuY29kZSYmbGlzdC5sYW5ndWFnZSE9PSRzY29wZS5sYW5ndWFnZUZpbHRlci5jb2RlfHxcIkFsbFwiIT09JHNjb3BlLnVzZXJGaWx0ZXImJmxpc3QuY3JlYXRvciE9PSRzY29wZS51c2VyRmlsdGVyfHxcImFsbFwiIT09JHNjb3BlLnVwZGF0ZUZpbHRlciYmbGlzdC5pc0R5bmFtaWMhPT0oXCJkeW5hbWljXCI9PT0kc2NvcGUudXBkYXRlRmlsdGVyKSkpLmxlbmd0aDtyZXR1cm5gJHtjb3VudH0gLSAke01hdGgucm91bmQoY291bnQvJHNjb3BlLmxpc3RzLmxlbmd0aCoxMDApfSVgfSwkc2NvcGUuZ2V0VXBkYXRlQ291bnQ9dHlwZT0+e2lmKCEkc2NvcGUubGlzdHMpcmV0dXJuIDA7Y29uc3QgY291bnQ9JHNjb3BlLmxpc3RzLmZpbHRlcihsaXN0PT5cImFsbFwiPT09dHlwZXx8bGlzdC5pc0R5bmFtaWMmJlwiZHluYW1pY1wiPT09dHlwZXx8IWxpc3QuaXNEeW5hbWljJiZcInN0YXRpY1wiPT09dHlwZSkubGVuZ3RoO3JldHVybmAke2NvdW50fSAtICR7TWF0aC5yb3VuZChjb3VudC8kc2NvcGUubGlzdHMubGVuZ3RoKjEwMCl9JWB9LCRzY29wZS5nZXRMaXN0cz0oKT0+eyRzY29wZS5sb2FkaW5nfHwoJHNjb3BlLmxvYWRpbmc9ITAsVGVuVGhpbmdzU3ZjLmdldExpc3RzKCkudGhlbigoe2RhdGF9KT0+eyRzY29wZS5saXN0cz1kYXRhLCRzY29wZS51c2VyRmlsdGVycz17fSwkc2NvcGUudXNlckZpbHRlcnMuQWxsPSRzY29wZS5saXN0cy5sZW5ndGgsJHNjb3BlLnVzZXJGaWx0ZXJzPSRzY29wZS5saXN0cy5zb3J0KChsaXN0MSxsaXN0Mik9Pmxpc3QxLmNyZWF0b3I+bGlzdDIuY3JlYXRvcikucmVkdWNlKCh1c2Vycyx7Y3JlYXRvcn0pPT4odXNlcnNbY3JlYXRvcl18fCh1c2Vyc1tjcmVhdG9yXT0wKSx1c2Vyc1tjcmVhdG9yXSsrLHVzZXJzKSwkc2NvcGUudXNlckZpbHRlcnMpLCRzY29wZS51c2VyQ291bnQ9T2JqZWN0LmtleXMoJHNjb3BlLnVzZXJGaWx0ZXJzKS5sZW5ndGgsJHNjb3BlLnVzZXJGaWx0ZXJzPXNvcnRPYmplY3QoJHNjb3BlLnVzZXJGaWx0ZXJzLCExKSwkc2NvcGUudXNlckZpbHRlcj1cIkFsbFwiLCRzY29wZS5sb2FkaW5nPSExfSkpfSwkc2NvcGUuc2VsZWN0TGlzdD1saXN0PT57VGVuVGhpbmdzU3ZjLmdldExpc3QobGlzdCkudGhlbigoe2RhdGF9KT0+eyRzY29wZS5zZWxlY3RlZExpc3Q9ZGF0YX0pfSwkc2NvcGUuc2VsZWN0Q2F0ZWdvcnk9Y2F0ZWdvcnk9Pnskc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3J5PWNhdGVnb3J5LCQoXCIjY2F0ZWdvcnktc2VsZWN0XCIpLmhpZGUoKX0sJHNjb3BlLmdldENhdGVnb3J5Q2xhc3M9Y2F0ZWdvcnk9PiRzY29wZS5zZWxlY3RlZExpc3QmJiRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5pbmRleE9mKGNhdGVnb3J5KT49MD9cImJ0bi1zdWNjZXNzXCI6XCJidG4tZGVmYXVsdFwiLCRzY29wZS50b2dnbGVDYXRlZ29yeT1jYXRlZ29yeT0+e2NvbnN0IGNhdGVnb3J5SW5kZXg9JHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLmluZGV4T2YoY2F0ZWdvcnkpO2NhdGVnb3J5SW5kZXg+PTA/JHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLnNwbGljZShjYXRlZ29yeUluZGV4LDEpOiRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5wdXNoKGNhdGVnb3J5KX0sJHNjb3BlLnNlbGVjdExhbmd1YWdlPWxhbmd1YWdlPT57JHNjb3BlLnNlbGVjdGVkTGlzdC5sYW5ndWFnZT1sYW5ndWFnZS5jb2RlO2NvbnN0IG5vbkVuZ2xpc2hJbmRleD0kc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihcIk5vbi1FbmdsaXNoXCIpO1wiRU5cIiE9PWxhbmd1YWdlLmNvZGUmJm5vbkVuZ2xpc2hJbmRleDwwPyRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5wdXNoKFwiTm9uLUVuZ2xpc2hcIik6XCJFTlwiPT09bGFuZ3VhZ2UuY29kZSYmbm9uRW5nbGlzaEluZGV4Pj0wJiYkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuc3BsaWNlKG5vbkVuZ2xpc2hJbmRleCwxKX0sJHNjb3BlLmFkZExpc3Q9KCk9Pntjb25zdCBjdXJyZW50TGFuZ3VhZ2U9JHNjb3BlLnNlbGVjdGVkTGlzdD8kc2NvcGUuc2VsZWN0ZWRMaXN0Lmxhbmd1YWdlOlwiRU5cIjskc2NvcGUuc2VsZWN0ZWRMaXN0PXtuYW1lOlwiXCIsY3JlYXRvcjokc2NvcGUuY3VycmVudFVzZXIuX2lkLGRhdGU6bmV3IERhdGUsdmFsdWVzOltdLGFuc3dlcnM6MCxpc0R5bmFtaWM6ITAsY2F0ZWdvcnk6XCJcIixjYXRlZ29yaWVzOltdLGxhbmd1YWdlOmN1cnJlbnRMYW5ndWFnZX19LCRzY29wZS5oYXNEdXBsaWNhdGU9KCk9PiRzY29wZS5zZWxlY3RlZExpc3QmJiRzY29wZS5uZXdJdGVtLnZhbHVlJiZfLnNvbWUoJHNjb3BlLnNlbGVjdGVkTGlzdC52YWx1ZXMsYW5zd2VyPT5hbnN3ZXIudmFsdWUucmVtb3ZlQWxsQnV0TGV0dGVycygpPT0kc2NvcGUubmV3SXRlbS52YWx1ZS5yZW1vdmVBbGxCdXRMZXR0ZXJzKCkpLCRzY29wZS5hZGRWYWx1ZT0oKT0+eyRzY29wZS5uZXdJdGVtLnZhbHVlJiYoXy5zb21lKCRzY29wZS5zZWxlY3RlZExpc3QudmFsdWVzLGFuc3dlcj0+YW5zd2VyLnZhbHVlLnJlbW92ZUFsbEJ1dExldHRlcnMoKT09JHNjb3BlLm5ld0l0ZW0udmFsdWUucmVtb3ZlQWxsQnV0TGV0dGVycygpKT9hbGVydCgkc2NvcGUubmV3SXRlbS52YWx1ZStcIiBpcyBhbHJlYWR5IGluIHRoZSBsaXN0XCIpOigkc2NvcGUubmV3SXRlbS5jcmVhdG9yPSRzY29wZS5jdXJyZW50VXNlci5faWQsJHNjb3BlLnNlbGVjdGVkTGlzdC52YWx1ZXMudW5zaGlmdChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KCRzY29wZS5uZXdJdGVtKSkpLCRzY29wZS5zZWxlY3RlZExpc3QuYW5zd2VycysrLCRzY29wZS5uZXdJdGVtLnZhbHVlPVwiXCIsJHNjb3BlLm5ld0l0ZW0uYmx1cmI9XCJcIiwkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcy5sZW5ndGg+PTEwJiYkc2NvcGUuc2VsZWN0ZWRMaXN0Lm5hbWUmJiRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5sZW5ndGg+MCYmJHNjb3BlLnNhdmVMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpKSksJChcIiNuZXctdmFsdWVcIikuZm9jdXMoKX0sJHNjb3BlLnJlcG9ydExpc3Q9bGlzdD0+e2xpc3QucmVwb3J0ZWQ9ITAsVGVuVGhpbmdzU3ZjLnJlcG9ydExpc3QoJHNjb3BlLmN1cnJlbnRVc2VyLGxpc3QpfSwkc2NvcGUuc2F2ZUxpc3Q9bGlzdD0+eyRzY29wZS5zYXZpbmd8fChsaXN0LnZhbHVlcz1saXN0LnZhbHVlcy5maWx0ZXIoKHt2YWx1ZX0pPT52YWx1ZSksbGlzdC52YWx1ZXMubGVuZ3RoPj0xMCYmbGlzdC5uYW1lJiZsaXN0LmNhdGVnb3JpZXMubGVuZ3RoPjA/KCRzY29wZS5zYXZpbmc9ITAsVGVuVGhpbmdzU3ZjLnNhdmVMaXN0KCRzY29wZS5jdXJyZW50VXNlcixsaXN0KS50aGVuKCh7ZGF0YX0pPT57aWYoJHNjb3BlLnNlbGVjdGVkTGlzdC5faWQpe2ZvcihsZXQgaT0wO2k8JHNjb3BlLmxpc3RzLmxlbmd0aDtpKyspaWYoJHNjb3BlLmxpc3RzW2ldLl9pZD09PWRhdGEuX2lkKXskc2NvcGUubGlzdHNbaV09ZGF0YTticmVha30kc2NvcGUuc2VsZWN0TGlzdChsaXN0KX1lbHNlICRzY29wZS5saXN0cy51bnNoaWZ0KGRhdGEpLCRzY29wZS5zZWxlY3RMaXN0KGRhdGEpOyRzY29wZS5zYXZpbmc9ITF9LGVycj0+e2NvbnNvbGUuZXJyb3IoZXJyKSwkc2NvcGUuc2F2aW5nPSExfSkpOmxpc3QudmFsdWVzLmxlbmd0aDwxMD9hbGVydChcIkxpc3RzIG11c3QgY29udGFpbiAxMCBvciBtb3JlIHZhbHVlcyFcIik6bGlzdC5uYW1lP2ZsYXNoKFwiLmxpc3QtY2F0ZWdvcnlcIik6Zmxhc2goXCIjbGlzdC1uYW1lXCIpKX0sJHNjb3BlLmRlbGV0ZUxpc3Q9bGlzdD0+e2xpc3QuX2lkP2NvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgbGlzdD9cIikmJlRlblRoaW5nc1N2Yy5kZWxldGVMaXN0KGxpc3QpLnRoZW4ocmVzcG9uc2U9Pnskc2NvcGUuZ2V0TGlzdHMoKSwkc2NvcGUuc2VsZWN0ZWRMaXN0PW51bGx9KTooJHNjb3BlLmxpc3RzPSRzY29wZS5saXN0cy5maWx0ZXIoKHtfaWR9KT0+X2lkKSwkc2NvcGUuc2VsZWN0ZWRMaXN0PW51bGwpfSwkc2NvcGUubGlzdEJ1dHRvbkNsYXNzPWxpc3Q9Pntjb25zdCB2YWx1ZXM9bGlzdC52YWx1ZXMubGVuZ3RoLGJsdXJicz1saXN0LmJsdXJicztyZXR1cm4gdmFsdWVzPT09Ymx1cmJzJiZsaXN0LmRlc2NyaXB0aW9uP1wiYnRuLWRlZmF1bHRcIjowIT09Ymx1cmJzfHxsaXN0LmRlc2NyaXB0aW9uPzA9PT1ibHVyYnMmJmxpc3QuZGVzY3JpcHRpb24/XCJidG4taW5mb1wiOlwiYnRuLXByaW1hcnlcIjpcImJ0bi13YXJuaW5nXCJ9LCRzY29wZS5nZXRNb3ZpZVBpY3M9KCk9Pnskc2NvcGUuZ2V0dGluZ0JsdXJicz0hMCxUZW5UaGluZ3NTdmMuZ2V0TW92aWVQaWNzKCRzY29wZS5zZWxlY3RlZExpc3QpLnRoZW4ocmVzcG9uc2U9Pnskc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KSwkc2NvcGUuZ2V0dGluZ0JsdXJicz0hMX0pfSwkc2NvcGUuZ2V0VFZQaWNzPSgpPT57JHNjb3BlLmdldHRpbmdCbHVyYnM9ITAsVGVuVGhpbmdzU3ZjLmdldFRWUGljcygkc2NvcGUuc2VsZWN0ZWRMaXN0KS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCksJHNjb3BlLmdldHRpbmdCbHVyYnM9ITF9KX0sJHNjb3BlLmdldEFjdG9yUGljcz0oKT0+eyRzY29wZS5nZXR0aW5nQmx1cmJzPSEwLFRlblRoaW5nc1N2Yy5nZXRBY3RvclBpY3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbihyZXNwb25zZT0+eyRzY29wZS5zZWxlY3RMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpLCRzY29wZS5nZXR0aW5nQmx1cmJzPSExfSl9LCRzY29wZS5nZXRCb29rUGljcz0oKT0+eyRzY29wZS5nZXR0aW5nQmx1cmJzPSEwLFRlblRoaW5nc1N2Yy5nZXRCb29rUGljcygkc2NvcGUuc2VsZWN0ZWRMaXN0KS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCksJHNjb3BlLmdldHRpbmdCbHVyYnM9ITF9KX0sJHNjb3BlLmdldE11c2ljVmlkZW9zPSgpPT57JHNjb3BlLmdldHRpbmdCbHVyYnM9ITAsVGVuVGhpbmdzU3ZjLmdldE11c2ljVmlkZW9zKCRzY29wZS5zZWxlY3RlZExpc3QpLnRoZW4ocmVzcG9uc2U9Pnskc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KSwkc2NvcGUuZ2V0dGluZ0JsdXJicz0hMX0pfSwkc2NvcGUuZ2V0UGljcz0oKT0+eyRzY29wZS5nZXR0aW5nQmx1cmJzPSEwLFRlblRoaW5nc1N2Yy5nZXRQaWNzKCRzY29wZS5zZWxlY3RlZExpc3QpLnRoZW4ocmVzcG9uc2U9Pnskc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KSwkc2NvcGUuZ2V0dGluZ0JsdXJicz0hMX0pfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiVGVuVGhpbmdzQWRtaW5DdHJsXCIsW1wiJHNjb3BlXCIsXCJUZW5UaGluZ3NTdmNcIixcIlVzZXJTdmNcIixmdW5jdGlvbigkc2NvcGUsVGVuVGhpbmdzU3ZjLFVzZXJTdmMpeyRzY29wZS4kb24oXCJsb2dpblwiLF89Pnskc2NvcGUuY3VycmVudFVzZXIuYWRtaW4mJmdldFVzZXJzKCl9KSwkc2NvcGUuZ2V0UXVldWU9KCk9Pnskc2NvcGUubG9hZGluZz0hMCxUZW5UaGluZ3NTdmMuZ2V0UXVldWUoKS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLnF1ZXVlPXJlc3BvbnNlLmRhdGEucmVwbGFjZShcIi9uXCIsXCI8YnIvPlwiKSwkc2NvcGUubG9hZGluZz0hMX0pfSwkc2NvcGUuZ2V0UXVldWUoKSxUZW5UaGluZ3NTdmMuZ2V0UGF1c2UoKS50aGVuKHJlc3BvbnNlPT57JHNjb3BlLnBhdXNlZD1yZXNwb25zZS5kYXRhLGNvbnNvbGUubG9nKCRzY29wZS5wYXVzZWQpfSk7Y29uc3QgZ2V0VXNlcnM9KCk9Pnskc2NvcGUubG9hZGluZz0hMCxVc2VyU3ZjLmdldFVzZXJzKCkudGhlbihyZXNwb25zZT0+eyRzY29wZS51c2Vycz1yZXNwb25zZS5kYXRhLmZpbHRlcih1c2VyPT4hdXNlci5hZG1pbiksJHNjb3BlLmxvYWRpbmc9ITF9KX07JHNjb3BlLnRvZ2dsZUJhbj11c2VyPT57JHNjb3BlLmxvYWRpbmc9ITAsVXNlclN2Yy50b2dnbGVCYW4odXNlci5faWQpLnRoZW4ocmVzcG9uc2U9PntnZXRVc2VycygpfSl9LCRzY29wZS50b2dnbGVQYXVzZT11c2VyPT57VGVuVGhpbmdzU3ZjLnRvZ2dsZVBhdXNlKCkudGhlbihyZXNwb25zZT0+eyRzY29wZS5wYXVzZWQ9cmVzcG9uc2UuZGF0YSxjb25zb2xlLmxvZygkc2NvcGUucGF1c2VkKX0pfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiVGVuVGhpbmdzQ3VyYXRlQ3RybFwiLFtcIiRzY29wZVwiLFwiVGVuVGhpbmdzU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLFRlblRoaW5nc1N2Yyl7JHNjb3BlLiRvbihcImxvZ2luXCIsXz0+e2dldExpc3RzKCl9KTtjb25zdCBnZXRMaXN0cz0oKT0+e1RlblRoaW5nc1N2Yy5nZXRMaXN0cygpLnRoZW4oKHtkYXRhfSk9Pnskc2NvcGUubGlzdHM9ZGF0YSxjb25zb2xlLmxvZyhkYXRhKX0pfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiVGVuVGhpbmdzR2FtZUN0cmxcIixbXCIkc2NvcGVcIixcIiRzdGF0ZVBhcmFtc1wiLFwiVGVuVGhpbmdzU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLCRzdGF0ZVBhcmFtcyxUZW5UaGluZ3NTdmMpeyRzY29wZS4kb24oXCJsb2dpblwiLF89Pnskc2NvcGUuY3VycmVudFVzZXIuYWRtaW4mJmdldFVzZXJzKCl9KSwkc3RhdGVQYXJhbXMuZ2FtZSYmVGVuVGhpbmdzU3ZjLmdldEdhbWUoJHN0YXRlUGFyYW1zLmdhbWUpLnRoZW4ocmVzcG9uc2U9Pnskc2NvcGUuZ2FtZT1yZXNwb25zZS5kYXRhLGNvbnNvbGUubG9nKCRzY29wZS5nYW1lKX0pfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJXb3Jrb3V0Q3RybFwiLFtcIiRzY29wZVwiLGZ1bmN0aW9uKCRzY29wZSl7JHNjb3BlLnRpbWVSZW1haW5pbmc9MCwkc2NvcGUudGltZUV4ZXJjaXNpbmc9MzAsJHNjb3BlLnRpbWVSZXN0aW5nPTEwLCRzY29wZS5yZXN0PSExO3ZhciBleGVyY2lzaW5nLHNvdW5kcz17b246bmV3IEF1ZGlvKFwib24ud2F2XCIpLG9mZjpuZXcgQXVkaW8oXCJvZmYud2F2XCIpLHN3aXRjaDpuZXcgQXVkaW8oXCJzd2l0Y2gud2F2XCIpfSxleGVyY2lzZXM9W3tuYW1lOlwiSnVtcGluZyBKYWNrc1wiLHNwbGl0OiExfSx7bmFtZTpcIldhbGwgU2l0XCIsc3BsaXQ6ITF9LHtuYW1lOlwiUHVzaC1VcFwiLHNwbGl0OiExfSx7bmFtZTpcIkNydW5jaFwiLHNwbGl0OiExfSx7bmFtZTpcIlN0ZXAtVXBcIixzcGxpdDohMH0se25hbWU6XCJTcXVhdFwiLHNwbGl0OiExfSx7bmFtZTpcIlRyaWNlcHMgRGlwXCIsc3BsaXQ6ITF9LHtuYW1lOlwiUGxhbmtcIixzcGxpdDohMX0se25hbWU6XCJIaWdoIEtuZWVzXCIsc3BsaXQ6ITF9LHtuYW1lOlwiTHVuZ2VcIixzcGxpdDohMX0se25hbWU6XCJQdXNoLVVwIHdpdGggUm90YXRpb25cIixzcGxpdDohMX0se25hbWU6XCJTaWRlIFBsYW5rXCIsc3BsaXQ6ITB9XTskc2NvcGUucHJvZ3Jlc3M9ZnVuY3Rpb24oKXtyZXR1cm4gZXhlcmNpc2VzLmxlbmd0aC1NYXRoLmZsb29yKCRzY29wZS50aW1lUmVtYWluaW5nLygkc2NvcGUudGltZUV4ZXJjaXNpbmcrJHNjb3BlLnRpbWVSZXN0aW5nKSkrXCIvXCIrZXhlcmNpc2VzLmxlbmd0aH0sJHNjb3BlLndvcmtvdXQ9ZnVuY3Rpb24oKXt2YXIgZXhjZXJjaXNlVGltZT0kc2NvcGUudGltZUV4ZXJjaXNpbmcrJHNjb3BlLnRpbWVSZXN0aW5nOyRzY29wZS50aW1lUmVtYWluaW5nPyhjbGVhckludGVydmFsKGV4ZXJjaXNpbmcpLCRzY29wZS50aW1lcj1cIlwiLCRzY29wZS50aW1lUmVtYWluaW5nPTAsJHNjb3BlLnJlc3Q9ITEsJHNjb3BlLmV4ZXJjaXNlPXtuYW1lOlwiXCIsc3BsaXQ6ITF9KTooJHNjb3BlLnRpbWVSZW1haW5pbmc9ZXhlcmNpc2VzLmxlbmd0aCpleGNlcmNpc2VUaW1lLGV4ZXJjaXNpbmc9c2V0SW50ZXJ2YWwoKGZ1bmN0aW9uKCl7aWYoJHNjb3BlLnRpbWVSZW1haW5pbmctLSwwPT09JHNjb3BlLnRpbWVSZW1haW5pbmcpcmV0dXJuICRzY29wZS5leGVyY2lzZT17bmFtZTpcIkZpbmlzaGVkISBDb25ncmF0cyFcIixzcGxpdDohMX0sJHNjb3BlLnRpbWVyPVwiXCIsJHNjb3BlLnRpbWVSZW1haW5pbmc9MCwkc2NvcGUucmVzdD0hMSwkc2NvcGUuJGFwcGx5KCksY2xlYXJJbnRlcnZhbChleGVyY2lzaW5nKTt2YXIgY3VycmVudEV4ZXJjaXNlPU1hdGguZmxvb3IoJHNjb3BlLnRpbWVSZW1haW5pbmcvZXhjZXJjaXNlVGltZSksdGltZXI9JHNjb3BlLnRpbWVSZW1haW5pbmctY3VycmVudEV4ZXJjaXNlKmV4Y2VyY2lzZVRpbWU7JHNjb3BlLnRpbWVyPXRpbWVyPiRzY29wZS50aW1lRXhlcmNpc2luZz90aW1lci0kc2NvcGUudGltZUV4ZXJjaXNpbmc6dGltZXIsdGltZXI+JHNjb3BlLnRpbWVFeGVyY2lzaW5nPyRzY29wZS5yZXN0PSEwOiRzY29wZS5yZXN0PSExLCRzY29wZS5leGVyY2lzZT1leGVyY2lzZXNbZXhlcmNpc2VzLmxlbmd0aC1jdXJyZW50RXhlcmNpc2UtMV0sdGltZXI9PT0kc2NvcGUudGltZUV4ZXJjaXNpbmc/c291bmRzLm9uLnBsYXkoKTowPT09dGltZXI/c291bmRzLm9mZi5wbGF5KCk6JHNjb3BlLmV4ZXJjaXNlLnNwbGl0JiZ0aW1lcj09PU1hdGguZmxvb3IoJHNjb3BlLnRpbWVFeGVyY2lzaW5nLzIpJiZzb3VuZHMuc3dpdGNoLnBsYXkoKSwkc2NvcGUuJGFwcGx5KCl9KSwxZTMpKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZGlyZWN0aXZlKFwiaGVhZFwiLFtcIiRyb290U2NvcGVcIixcIiRzdGF0ZVwiLFwiJGNvbXBpbGVcIixcIiRpbnRlcnBvbGF0ZVwiLGZ1bmN0aW9uKCRyb290U2NvcGUsJHN0YXRlLCRjb21waWxlLCRpbnRlcnBvbGF0ZSl7dmFyIGdldFN0eWxlPWZ1bmN0aW9uKHRlbXBsYXRlU3R5bGVVcmwpe3ZhciBzdHlsZT17aHJlZjp0ZW1wbGF0ZVN0eWxlVXJsLHJlbDpcInN0eWxlc2hlZXRcIn07cmV0dXJuIHN0eWxlLmhyZWYubWF0Y2goL1xcLmxlc3MkLykmJihzdHlsZS5yZWw9XCJzdHlsZXNoZWV0L2xlc3NcIiksc3R5bGV9O3JldHVybntyZXN0cmljdDpcIkVcIixsaW5rOmZ1bmN0aW9uKHNjb3BlLGVsZW0pe3Njb3BlLnRlbXBsYXRlU3R5bGVzPVtdO3ZhciBodG1sPSc8bGluayBuZy1hdHRyLXJlbD1cInt7c3R5bGUucmVsfX1cIiBuZy1yZXBlYXQ9XCJzdHlsZSBpbiB0ZW1wbGF0ZVN0eWxlc1wiIG5nLWhyZWY9XCJ7e3N0eWxlLmhyZWZ9fVwiPic7aHRtbD0oaHRtbD1odG1sLnJlcGxhY2UoL1xce1xcey9nLCRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpKSkucmVwbGFjZSgvXFx9XFx9L2csJGludGVycG9sYXRlLmVuZFN5bWJvbCgpKSxlbGVtLmFwcGVuZCgkY29tcGlsZShodG1sKShzY29wZSkpLCRyb290U2NvcGUuJG9uKFwiJHN0YXRlQ2hhbmdlU3RhcnRcIiwoZnVuY3Rpb24oZXZlbnQsdG9TdGF0ZSx0b1BhcmFtcyxmcm9tU3RhdGUsZnJvbVBhcmFtcyl7c2NvcGUudGVtcGxhdGVTdHlsZXM9ZnVuY3Rpb24oc3RhdGUpe2Zvcih2YXIgc3RhdGVzPXt9O1wiXCIhPT1zdGF0ZS5uYW1lOyl7dmFyIHBhcmVudD0kc3RhdGUuZ2V0KFwiXlwiLHN0YXRlKTtzdGF0ZXNbcGFyZW50Lm5hbWVdfHwoc3RhdGVzW3BhcmVudC5uYW1lXT17fSksc3RhdGUudGVtcGxhdGVTdHlsZVVybCYmKHN0YXRlc1twYXJlbnQubmFtZV1bXCJcIl18fChzdGF0ZXNbcGFyZW50Lm5hbWVdW1wiXCJdPWdldFN0eWxlKHN0YXRlLnRlbXBsYXRlU3R5bGVVcmwpKSksc3RhdGUudmlld3MmJl8uZm9yRWFjaChzdGF0ZS52aWV3cywoZnVuY3Rpb24odmlldyxrZXkpe2lmKHZpZXcudGVtcGxhdGVTdHlsZVVybClyZXR1cm4oa2V5PWtleS5zcGxpdChcIkBcIikpWzFdPyhzdGF0ZXNba2V5WzFdXXx8KHN0YXRlc1trZXlbMV1dPXt9KSx2b2lkKHN0YXRlc1trZXlbMV1dW2tleVswXV18fChzdGF0ZXNba2V5WzFdXVtrZXlbMF1dPWdldFN0eWxlKHZpZXcudGVtcGxhdGVTdHlsZVVybCkpKSk6dm9pZChzdGF0ZXNbcGFyZW50Lm5hbWVdW2tleVswXV09Z2V0U3R5bGUodmlldy50ZW1wbGF0ZVN0eWxlVXJsKSl9KSksc3RhdGU9cGFyZW50fXZhciBmbGF0PVtdO3JldHVybiBfLmZvckVhY2goc3RhdGVzLChmdW5jdGlvbih2aWV3cyl7Xy5mb3JFYWNoKHZpZXdzLChmdW5jdGlvbihzdHlsZSl7Xy5pbmNsdWRlcyhmbGF0LHN0eWxlKXx8ZmxhdC5wdXNoKHN0eWxlKX0pKX0pKSxmbGF0LnJldmVyc2UoKSxmbGF0fSh0b1N0YXRlKX0pKX19fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJDYXRlZ29yaWVzU3ZjXCIsW1wiJGh0dHBcIixmdW5jdGlvbigkaHR0cCl7dmFyIHN2Yz10aGlzO3N2Yy5nZXRDYXRlZ29yaWVzPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvY2F0ZWdvcmllc1wiKX0sc3ZjLmdldFRhc2tzPWZ1bmN0aW9uKGNhdGVnb3J5KXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9jYXRlZ29yaWVzL1wiK2NhdGVnb3J5KX0sc3ZjLmFkZENhdGVnb3J5PWZ1bmN0aW9uKGNhdGVnb3J5KXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvY2F0ZWdvcmllcy9cIixjYXRlZ29yeSl9LHN2Yy5hZGRUYXNrPWZ1bmN0aW9uKGNhdGVnb3J5LHRhc2spe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS9jYXRlZ29yaWVzL1wiK2NhdGVnb3J5K1wiL3Rhc2tzXCIsdGFzayl9LHN2Yy5zZXRQcmlvcml0eUxpc3Q9ZnVuY3Rpb24obGlzdCl7c3ZjLmNob2ljZXM9bGlzdCxzdmMucHJpb3JpdHlMaXN0PVtdO2Zvcih2YXIgaT0wO2k8bGlzdC5sZW5ndGg7aSsrKWZvcih2YXIgaj1pKzE7ajxsaXN0Lmxlbmd0aDtqKyspe3ZhciByYW5kb209TWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKTtzdmMucHJpb3JpdHlMaXN0LnB1c2goe2lkOjAsZmlyc3RDaG9pY2U6bGlzdFswPT09cmFuZG9tP2k6al0ubmFtZSxzZWNvbmRDaG9pY2U6bGlzdFswPT09cmFuZG9tP2o6aV0ubmFtZSxjaG9pY2U6XCJcIn0pfWZvcihpIGluIGZ1bmN0aW9uKGFycmF5KXt2YXIgdCxpLG09YXJyYXkubGVuZ3RoO2Zvcig7bTspaT1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqbS0tKSx0PWFycmF5W21dLGFycmF5W21dPWFycmF5W2ldLGFycmF5W2ldPXR9KHN2Yy5wcmlvcml0eUxpc3QpLHN2Yy5wcmlvcml0eUxpc3Qpc3ZjLnByaW9yaXR5TGlzdFtpXS5pZD1pKzF9LHN2Yy5nZXRQcmlvcml0eUxpc3Q9ZnVuY3Rpb24obGlzdCl7cmV0dXJuIHN2Yy5wcmlvcml0eUxpc3R9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJFbWFpbFN2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3RoaXMuc2VuZD1mdW5jdGlvbihlbWFpbCl7cmV0dXJuIGNvbnNvbGUubG9nKGVtYWlsKSwkaHR0cC5wb3N0KFwiL2FwaS9lbWFpbFwiLGVtYWlsKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIkZpbGVTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt0aGlzLmdldEltYWdlcz1mdW5jdGlvbihmb2xkZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2ZpbGVzL2ltYWdlcy9cIitmb2xkZXIpfSx0aGlzLmdldFNvdW5kcz1mdW5jdGlvbihmb2xkZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL2ZpbGVzL3NvdW5kcy9cIitmb2xkZXIpfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiR2FtZVN2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3RoaXMuZ2V0SGlnaHNjb3JlPWZ1bmN0aW9uKGdhbWUsdXNlcil7cmV0dXJuICRodHRwLmdldChcIi9hcGkvZ2FtZXMvXCIrZ2FtZStcIi9cIit1c2VyK1wiL2hpZ2hzY29yZVwiKX0sdGhpcy5zZXRIaWdoc2NvcmU9ZnVuY3Rpb24oZ2FtZSx1c2VyLHNjb3JlKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvZ2FtZXMvXCIrZ2FtZStcIi9cIit1c2VyK1wiL2hpZ2hzY29yZVwiLHtzY29yZX0pfX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5zZXJ2aWNlKFwiTGFuZ3VhZ2VTdmNcIiwoZnVuY3Rpb24oKXt2YXIgc3ZjPXRoaXM7c3ZjLmxhbmd1YWdlcz1be2NvZGU6XCJFTlwiLG5hbWU6XCJFbmdsaXNoXCIsZmxhZzpcImZsYWctaWNvbi1nYlwifSx7Y29kZTpcIk5MXCIsbmFtZTpcIk5lZGVybGFuZHNcIixmbGFnOlwiZmxhZy1pY29uLW5sXCJ9LHtjb2RlOlwiRlJcIixuYW1lOlwiRnJhbsOnYWlzXCIsZmxhZzpcImZsYWctaWNvbi1mclwifV0sc3ZjLnRleHQ9W3tjb2RlOlwiRU5cIn0se2NvZGU6XCJOTFwifSx7Y29kZTpcIkZSXCJ9XSxzdmMuc2VsZWN0ZWRMYW5ndWFnZT1zdmMubGFuZ3VhZ2VzWzBdLHN2Yy5zZXRMYW5ndWFnZT1mdW5jdGlvbihsYW5ndWFnZSl7cmV0dXJuIHN2Yy5zZWxlY3RlZExhbmd1YWdlPWxhbmd1YWdlLGxhbmd1YWdlfSxzdmMuZ2V0TGFuZ3VhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gc3ZjLnNlbGVjdGVkTGFuZ3VhZ2V9fSkpLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJQb3N0c1N2Y1wiLFtcIiRodHRwXCIsZnVuY3Rpb24oJGh0dHApe3RoaXMuZmV0Y2g9ZnVuY3Rpb24oKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9wb3N0c1wiKX0sdGhpcy5jcmVhdGU9ZnVuY3Rpb24ocG9zdCl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL3Bvc3RzXCIscG9zdCl9LHRoaXMuZ2V0UG9zdD1mdW5jdGlvbihwb3N0KXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9wb3N0cy9cIitwb3N0Ll9pZCl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLnNlcnZpY2UoXCJUZW5UaGluZ3NTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt2YXIgc3ZjPXRoaXM7c3ZjLmdldFF1ZXVlPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9ib3RzL3RlbnRoaW5ncy9xdWV1ZVwiKX0sc3ZjLmdldExpc3RzPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvdGVudGhpbmdzL2xpc3RzXCIpfSxzdmMuZ2V0Q2F0ZWdvcmllcz0oKT0+JGh0dHAuZ2V0KFwiL2FwaS90ZW50aGluZ3MvY2F0ZWdvcmllc1wiKSxzdmMuZ2V0TGFuZ3VhZ2VzPSgpPT4kaHR0cC5nZXQoXCIvYXBpL3RlbnRoaW5ncy9sYW5ndWFnZXNcIiksc3ZjLmdldExpc3Q9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvdGVudGhpbmdzL2xpc3RzL1wiK2xpc3QuX2lkKX0sc3ZjLnNhdmVMaXN0PWZ1bmN0aW9uKHVzZXIsbGlzdCl7cmV0dXJuICRodHRwLnB1dChcIi9hcGkvdGVudGhpbmdzL2xpc3RzXCIse3VzZXIsbGlzdH0pfSxzdmMucmVwb3J0TGlzdD1mdW5jdGlvbih1c2VyLGxpc3QpeyRodHRwLmdldChcIi9hcGkvdGVudGhpbmdzL2xpc3RzL1wiK2xpc3QuX2lkK1wiL3JlcG9ydC9cIit1c2VyLl9pZCl9LHN2Yy5kZWxldGVMaXN0PWZ1bmN0aW9uKGxpc3Qpe3JldHVybiAkaHR0cC5kZWxldGUoXCIvYXBpL3RlbnRoaW5ncy9saXN0cy9cIitsaXN0Ll9pZCl9LHN2Yy5nZXRNb3ZpZVBpY3M9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvbGlzdHMvJHtsaXN0Ll9pZH0vbW92aWVzYCl9LHN2Yy5nZXRUVlBpY3M9ZnVuY3Rpb24obGlzdCl7cmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvbGlzdHMvJHtsaXN0Ll9pZH0vdHZgKX0sc3ZjLmdldEFjdG9yUGljcz1mdW5jdGlvbihsaXN0KXtyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9saXN0cy8ke2xpc3QuX2lkfS9hY3RvcnNgKX0sc3ZjLmdldEJvb2tQaWNzPWZ1bmN0aW9uKGxpc3Qpe3JldHVybiAkaHR0cC5nZXQoYC9hcGkvdGVudGhpbmdzL2xpc3RzLyR7bGlzdC5faWR9L2Jvb2tzYCl9LHN2Yy5nZXRNdXNpY1ZpZGVvcz1mdW5jdGlvbihsaXN0KXtyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9saXN0cy8ke2xpc3QuX2lkfS9tdXNpY3ZpZGVvc2ApfSxzdmMuZ2V0UGljcz1mdW5jdGlvbihsaXN0KXtyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9saXN0cy8ke2xpc3QuX2lkfS9waWNzYCl9LHN2Yy5nZXRQYXVzZT1mdW5jdGlvbigpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3RlbnRoaW5ncy9wYXVzZVwiKX0sc3ZjLnRvZ2dsZVBhdXNlPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLnBvc3QoXCIvYXBpL3RlbnRoaW5ncy9wYXVzZVwiKX0sc3ZjLmdldEdhbWU9ZnVuY3Rpb24oaWQpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3RlbnRoaW5ncy9nYW1lL1wiK2lkKX19XSksYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuc2VydmljZShcIlVzZXJTdmNcIixbXCIkaHR0cFwiLGZ1bmN0aW9uKCRodHRwKXt2YXIgc3ZjPXRoaXM7c3ZjLmdldFVzZXI9ZnVuY3Rpb24oKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS91c2Vyc1wiKX0sc3ZjLmdldFVzZXJzPWZ1bmN0aW9uKCl7cmV0dXJuICRodHRwLmdldChcIi9hcGkvdXNlcnMvYWxsXCIpfSxzdmMudG9nZ2xlQmFuPWZ1bmN0aW9uKGlkKXtyZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS91c2Vycy9iYW4vXCIraWQpfSxzdmMuc2V0VG9rZW49ZnVuY3Rpb24odG9rZW4pe3JldHVybiAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIlgtQXV0aFwiXT10b2tlbixzdmMuZ2V0VXNlcigpfSxzdmMuYXV0aGVudGljYXRlPWZ1bmN0aW9uKHVzZXIpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9hdXRoZW50aWNhdGVcIix7dXNlcn0pLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXtyZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS50b2tlbj1yZXNwb25zZS5kYXRhLHN2Yy5zZXRUb2tlbihyZXNwb25zZS5kYXRhKX0pKX0sc3ZjLmxvZ2luPWZ1bmN0aW9uKHVzZXIpe3JldHVybiAkaHR0cC5nZXQoXCIvYXBpL3VzZXJzL1wiK3VzZXIrXCIvbG9naW5cIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2Upe3JldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuPXJlc3BvbnNlLmRhdGEsc3ZjLnNldFRva2VuKHJlc3BvbnNlLmRhdGEpfSkpfSxzdmMudXBkYXRlVXNlcj1mdW5jdGlvbih1c2VyKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlci5faWQse3VzZXJ9KS50aGVuKChmdW5jdGlvbigpe3JldHVybiBzdmMuZ2V0VXNlcigpfSkpfSxzdmMuY2hlY2tQYXNzd29yZD1mdW5jdGlvbih1c2VyLHBhc3N3b3JkKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlcitcIi92ZXJpZmljYXRpb25cIix7cGFzc3dvcmR9KX0sc3ZjLmNoYW5nZVBhc3N3b3JkPWZ1bmN0aW9uKHVzZXIsb2xkUGFzc3dvcmQsbmV3UGFzc3dvcmQpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vycy9cIit1c2VyK1wiL3Bhc3N3b3JkXCIse29sZFBhc3N3b3JkLG5ld1Bhc3N3b3JkfSl9LHN2Yy5jaGFuZ2VVc2VybmFtZT1mdW5jdGlvbih1c2VyLG5ld1VzZXJuYW1lKXtyZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvdXNlcnMvXCIrdXNlcitcIi91c2VybmFtZVwiLHtuZXdVc2VybmFtZX0pLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5nZXRVc2VyKCl9KSl9LHN2Yy5sb2dvdXQ9ZnVuY3Rpb24oKXt3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCksJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJYLUF1dGhcIl09XCJcIn0sc3ZjLmNyZWF0ZVVzZXI9ZnVuY3Rpb24odXNlcm5hbWUscGFzc3dvcmQpe3JldHVybiAkaHR0cC5wb3N0KFwiL2FwaS91c2Vyc1wiLHt1c2VybmFtZSxwYXNzd29yZH0pLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSxwYXNzd29yZCl9KSl9fV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJRdWl6QW5pbWFsc0N0cmxcIixbXCIkc2NvcGVcIixcIkZpbGVTdmNcIixmdW5jdGlvbigkc2NvcGUsRmlsZVN2Yyl7RmlsZVN2Yy5nZXRTb3VuZHMoXCJhbmltYWxzXCIpLnRoZW4oKGZ1bmN0aW9uKHJlc3BvbnNlKXskc2NvcGUuYW5pbWFscz1fLnNodWZmbGUocmVzcG9uc2UuZGF0YS5tYXAoYW5pbWFsPT4oe3NvdW5kOmFuaW1hbCxuYW1lOmFuaW1hbC5zdWJzdHJpbmcoMCxhbmltYWwuaW5kZXhPZihcIi5cIikpLnJlcGxhY2UoXCJfXCIsXCIgXCIpLmNhcGl0YWxpemUoKX0pKSk7Zm9yKGxldCBhbmltYWwgb2YgJHNjb3BlLmFuaW1hbHMpYW5pbWFsLmFuc3dlcnM9Xy5zaHVmZmxlKFthbmltYWwubmFtZSwuLi5nZXRSYW5kb21BbmltYWxzKGFuaW1hbC5uYW1lKV0pO2NvbnNvbGUubG9nKCRzY29wZS5hbmltYWxzKX0pKSwkc2NvcGUuZ3Vlc3M9KGFuaW1hbCxndWVzcyk9PnthbmltYWwuZ3Vlc3M9Z3Vlc3N9O2NvbnN0IGdldFJhbmRvbUFuaW1hbHM9bmFtZT0+Xy5zaHVmZmxlKCRzY29wZS5hbmltYWxzLmZpbHRlcihhbmltYWw9Pm5hbWUhPT1hbmltYWwubmFtZSkubWFwKGFuaW1hbD0+YW5pbWFsLm5hbWUpKS5zbGljZSgwLDUpOyRzY29wZS5nZXRTY29yZT0oKT0+YCR7JHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbD0+YW5pbWFsLm5hbWU9PT1hbmltYWwuZ3Vlc3MpLmxlbmd0aH0vJHskc2NvcGUuYW5pbWFscy5sZW5ndGh9YCwkc2NvcGUuaXNTY29yZVZpc2libGU9KCk9PiRzY29wZS5hbmltYWxzLmZpbHRlcihhbmltYWw9PmFuaW1hbC5ndWVzcykubGVuZ3RoPT09JHNjb3BlLmFuaW1hbHMubGVuZ3RofV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJRdWl6R29vZ2xlQ3RybFwiLFtcIiRzY29wZVwiLFwiRmlsZVN2Y1wiLGZ1bmN0aW9uKCRzY29wZSxGaWxlU3ZjKXtGaWxlU3ZjLmdldEltYWdlcyhcImdvb2dsZVwiKS50aGVuKChmdW5jdGlvbihyZXNwb25zZSl7JHNjb3BlLmltYWdlcz1yZXNwb25zZS5kYXRhfSkpfV0pLGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJRdWl6TG9nb3NDdHJsXCIsW1wiJHNjb3BlXCIsXCJGaWxlU3ZjXCIsZnVuY3Rpb24oJHNjb3BlLEZpbGVTdmMpe0ZpbGVTdmMuZ2V0SW1hZ2VzKFwibG9nb3NcIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5pbWFnZXM9cmVzcG9uc2UuZGF0YX0pKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiUXVpek1vdmllc0N0cmxcIixbXCIkc2NvcGVcIixcIkZpbGVTdmNcIixmdW5jdGlvbigkc2NvcGUsRmlsZVN2Yyl7RmlsZVN2Yy5nZXRJbWFnZXMoXCJtb3ZpZXNcIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5pbWFnZXM9cmVzcG9uc2UuZGF0YX0pKX1dKSxhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiUXVpelNrZWxldG9uc0N0cmxcIixbXCIkc2NvcGVcIixcIkZpbGVTdmNcIixmdW5jdGlvbigkc2NvcGUsRmlsZVN2Yyl7RmlsZVN2Yy5nZXRJbWFnZXMoXCJza2VsZXRvbnNcIikudGhlbigoZnVuY3Rpb24ocmVzcG9uc2UpeyRzY29wZS5hbmltYWxzPV8uc2h1ZmZsZShyZXNwb25zZS5kYXRhLm1hcChhbmltYWw9Pih7aW1hZ2U6YW5pbWFsLG5hbWU6YW5pbWFsLnN1YnN0cmluZygwLGFuaW1hbC5pbmRleE9mKFwiLlwiKSkucmVwbGFjZShcIl9cIixcIiBcIikuY2FwaXRhbGl6ZSgpfSkpKTtmb3IobGV0IGFuaW1hbCBvZiAkc2NvcGUuYW5pbWFscylhbmltYWwuYW5zd2Vycz1fLnNodWZmbGUoW2FuaW1hbC5uYW1lLC4uLmdldFJhbmRvbUFuaW1hbHMoYW5pbWFsLm5hbWUpXSk7Y29uc29sZS5sb2coJHNjb3BlLmFuaW1hbHMpfSkpLCRzY29wZS5ndWVzcz0oYW5pbWFsLGd1ZXNzKT0+e2FuaW1hbC5ndWVzcz1ndWVzc307Y29uc3QgZ2V0UmFuZG9tQW5pbWFscz1uYW1lPT5fLnNodWZmbGUoJHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbD0+bmFtZSE9PWFuaW1hbC5uYW1lKS5tYXAoYW5pbWFsPT5hbmltYWwubmFtZSkpLnNsaWNlKDAsMTApOyRzY29wZS5nZXRTY29yZT0oKT0+YCR7JHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbD0+YW5pbWFsLm5hbWU9PT1hbmltYWwuZ3Vlc3MpLmxlbmd0aH0vJHskc2NvcGUuYW5pbWFscy5sZW5ndGh9YCwkc2NvcGUuaXNTY29yZVZpc2libGU9KCk9PiRzY29wZS5hbmltYWxzLmZpbHRlcihhbmltYWw9PmFuaW1hbC5ndWVzcykubGVuZ3RoPT09JHNjb3BlLmFuaW1hbHMubGVuZ3RofV0pOyIsIi8qXHJcbiQgPSBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcclxudmFyIGJvb3RzdHJhcCA9IHJlcXVpcmUoJ2Jvb3RzdHJhcCcpO1xyXG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcclxudmFyIGFuZ3VsYXJTYW5pdGl6ZSA9IHJlcXVpcmUoJ2FuZ3VsYXItc2FuaXRpemUnKTtcclxudmFyIGFuZ3VsYXJBbmltYXRlID0gcmVxdWlyZSgnYW5ndWxhci1hbmltYXRlJyk7XHJcbiovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgJ3VpLnJvdXRlcicsXHJcbiAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgJ25nQW5pbWF0ZScsXHJcbiAgJ25nU2FuaXRpemUnLFxyXG4gICduZ0RyYWdEcm9wJyxcclxuICAnbmdUYWdzSW5wdXQnLFxyXG4gICd2Y1JlY2FwdGNoYScsXHJcbiAgJ2NoYXJ0LmpzJyxcclxuICAndGMuY2hhcnRqcydcclxuXSk7XHJcbiIsImFuZ3VsYXJcclxuXHQubW9kdWxlKCdhcHAnKVxyXG5cdC5jb25maWcoZnVuY3Rpb24gKFxyXG5cdFx0JHN0YXRlUHJvdmlkZXIsXHJcblx0XHQkdXJsUm91dGVyUHJvdmlkZXIsXHJcblx0XHQkdXJsU2VydmljZVByb3ZpZGVyLFxyXG5cdFx0JGxvY2F0aW9uUHJvdmlkZXJcclxuXHQpIHtcclxuXHRcdCR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9ob21lJyk7XHJcblx0XHQkdXJsU2VydmljZVByb3ZpZGVyLmNvbmZpZy5zdHJpY3RNb2RlKGZhbHNlKTtcclxuXHJcblx0XHQkc3RhdGVQcm92aWRlclxyXG5cdFx0XHQuc3RhdGUoJ2hvbWUnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2hvbWUnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnL2hvbWUuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgncG9saWN5Jywge1xyXG5cdFx0XHRcdHVybDogJy9wb2xpY3knLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnL3BvbGljeS5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdwcmludCcsIHtcclxuXHRcdFx0XHR1cmw6ICcvcHJpbnQnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnL3ByaW50Lmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ2V4cGVyaWVuY2UnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2V4cGVyaWVuY2UnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdFeHBlcmllbmNlQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICcvZXhwZXJpZW5jZS5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdza2lsbHMnLCB7XHJcblx0XHRcdFx0dXJsOiAnL3NraWxscycsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1NraWxsc0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnL3NraWxscy5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdob2JiaWVzJywge1xyXG5cdFx0XHRcdHVybDogJy9ob2JiaWVzJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnSG9iYmllc0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnL2hvYmJpZXMuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnY29udGFjdCcsIHtcclxuXHRcdFx0XHR1cmw6ICcvY29udGFjdCcsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ0NvbnRhY3RDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJy9jb250YWN0Lmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3dvcmtvdXQnLCB7XHJcblx0XHRcdFx0dXJsOiAnL3dvcmtvdXQnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdXb3Jrb3V0Q3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICcvd29ya291dC5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdwb3N0cycsIHtcclxuXHRcdFx0XHR1cmw6ICcvcG9zdHMnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnL3Bvc3RzLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3Byb2ZpbGUnLCB7XHJcblx0XHRcdFx0dXJsOiAnL3Byb2ZpbGUnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdQcm9maWxlQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICcvcHJvZmlsZS5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdsaXN0cycsIHtcclxuXHRcdFx0XHR1cmw6ICcvbGlzdHMnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdMaXN0c0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnbGlzdHMuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgncHJpb3JpdGl6ZScsIHtcclxuXHRcdFx0XHR1cmw6ICcvcHJpb3JpdGl6ZScsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1ByaW9yaXRpemVDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3ByaW9yaXRpemUuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnYnViYmxlcycsIHtcclxuXHRcdFx0XHR1cmw6ICcvYnViYmxlcycsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ0J1YmJsZXNDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ2J1YmJsZXMuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnYXN0ZXJvaWRzJywge1xyXG5cdFx0XHRcdHVybDogJy9hc3Rlcm9pZHMnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdBc3Rlcm9pZHNDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ2FzdGVyb2lkcy5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdsZW1taW5ncycsIHtcclxuXHRcdFx0XHR1cmw6ICcvbGVtbWluZ3MnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdMZW1taW5nc0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnbGVtbWluZ3MuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnYm90cycsIHtcclxuXHRcdFx0XHR1cmw6ICcvYm90cycsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1RlblRoaW5nc0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAndGVudGhpbmdzLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3RlbnRoaW5ncycsIHtcclxuXHRcdFx0XHR1cmw6ICcvdGVudGhpbmdzJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnVGVuVGhpbmdzQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICd0ZW50aGluZ3MuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgndGVudGhpbmdzLWFkbWluJywge1xyXG5cdFx0XHRcdHVybDogJy90ZW50aGluZ3MtYWRtaW4nLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdUZW5UaGluZ3NBZG1pbkN0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAndGVudGhpbmdzLWFkbWluLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3RlbnRoaW5ncy1jdXJhdGUnLCB7XHJcblx0XHRcdFx0dXJsOiAnL3RlbnRoaW5ncy1jdXJhdGUnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdUZW5UaGluZ3NDdXJhdGVDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3RlbnRoaW5ncy1jdXJhdGUuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgndGVudGhpbmdzLWdhbWUnLCB7XHJcblx0XHRcdFx0dXJsOiAnL3RlbnRoaW5ncy86Z2FtZScsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1RlblRoaW5nc0dhbWVDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3RlbnRoaW5ncy1nYW1lLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3F1aXotZ29vZ2xlJywge1xyXG5cdFx0XHRcdHVybDogJy9nb29nbGUnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdRdWl6R29vZ2xlQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdxdWl6emVzL2dvb2dsZS5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdxdWl6LWxvZ29zJywge1xyXG5cdFx0XHRcdHVybDogJy9sb2dvcycsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ1F1aXpMb2dvc0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAncXVpenplcy9sb2dvcy5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdxdWl6LWFuaW1hbHMnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2FuaW1hbHMnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdRdWl6QW5pbWFsc0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAncXVpenplcy9hbmltYWxzLmh0bWwnLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc3RhdGUoJ3F1aXotc2tlbGV0b25zJywge1xyXG5cdFx0XHRcdHVybDogJy9za2VsZXRvbnMnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdRdWl6U2tlbGV0b25zQ3RybCcsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdxdWl6emVzL3NrZWxldG9ucy5odG1sJyxcclxuXHRcdFx0fSlcclxuXHRcdFx0LnN0YXRlKCdxdWl6LW1vdmllcycsIHtcclxuXHRcdFx0XHR1cmw6ICcvbW92aWVzJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnUXVpek1vdmllc0N0cmwnLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAncXVpenplcy9tb3ZpZXMuaHRtbCcsXHJcblx0XHRcdH0pXHJcblx0XHRcdC5zdGF0ZSgnY2hhcmFkZXMnLCB7XHJcblx0XHRcdFx0dXJsOiAnL2NoYXJhZGVzJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnQ2hhcmFkZXNDdHJsJyxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJy9jaGFyYWRlcy5odG1sJyxcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0JGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcclxuXHRcdFx0ZW5hYmxlZDogdHJ1ZSxcclxuXHRcdFx0cmVxdWlyZUJhc2U6IGZhbHNlLFxyXG5cdFx0fSk7XHJcblx0fSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnV2ViU29ja2V0U3ZjJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICR0aW1lb3V0KSB7XHJcbiAgZnVuY3Rpb24gd2Vic29ja2V0SG9zdCgpIHtcclxuICAgIGlmICh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonKSB7XHJcbiAgICAgIHJldHVybiBcIndzczovL1wiICsgd2luZG93LmxvY2F0aW9uLmhvc3Q7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gXCJ3czovL1wiICsgd2luZG93LmxvY2F0aW9uLmhvc3Q7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgY29ubmVjdGlvbjtcclxuICB2YXIgY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbm5lY3Rpb24gPSBuZXcgV2ViU29ja2V0KHdlYnNvY2tldEhvc3QoKSk7XHJcblxyXG4gICAgY29ubmVjdGlvbi5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdXZWJzb2NrZXQgY29ubmVjdGVkJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbm5lY3Rpb24ub25jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdXZWJzb2NrZXQgY2xvc2VkLiBSZWNvbm5lY3RpbmcuLi4nKTtcclxuICAgICAgJHRpbWVvdXQoY29ubmVjdCwgMTAwMCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbm5lY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIgKyBlICsgXCIgLSBTdGF0ZTogXCIgKyBjb25uZWN0aW9uLnJlYWR5U3RhdGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIHZhciBwYXlsb2FkID0gSlNPTi5wYXJzZShlLmRhdGEpO1xyXG4gICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3dzOicgKyBwYXlsb2FkLnRvcGljLCBwYXlsb2FkLmRhdGEpO1xyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICB0aGlzLnNlbmQgPSBmdW5jdGlvbiAodG9waWMsIGRhdGEpIHtcclxuICAgIHZhciBqc29uID0gSlNPTi5zdHJpbmdpZnkoe3RvcGljOiB0b3BpYywgZGF0YTogZGF0YX0pO1xyXG4gICAgY29ubmVjdGlvbi5zZW5kKGpzb24pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuY29ubmVjdCA9IGNvbm5lY3Q7XHJcblxyXG59KS5ydW4oZnVuY3Rpb24gKFdlYlNvY2tldFN2Yykge1xyXG4gIFdlYlNvY2tldFN2Yy5jb25uZWN0KCk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyXHJcblx0Lm1vZHVsZSgnYXBwJylcclxuXHQuY29udHJvbGxlcignQXBwQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgTGFuZ3VhZ2VTdmMsIFVzZXJTdmMpIHtcclxuXHRcdGNvbnNvbGUubG9nKFxyXG5cdFx0XHQnJWNZb3Ugc25lYWt5IGJ1Z2dlciEnLFxyXG5cdFx0XHQnZm9udDogMmVtIHNhbnMtc2VyaWY7IGNvbG9yOiBEb2RnZXJCbHVlOyB0ZXh0LXNoYWRvdzogMnB4IDAgMCAjNDQ0LCAtMnB4IDAgMCAjNDQ0LCAwIDJweCAwICM0NDQsIDAgLTJweCAwICM0NDQsIDFweCAxcHggIzQ0NCwgLTFweCAtMXB4IDAgIzQ0NCwgMXB4IC0xcHggMCAjNDQ0LCAtMXB4IDFweCAwICM0NDQ7J1xyXG5cdFx0KTtcclxuXHRcdGNvbnNvbGUubG9nKFxyXG5cdFx0XHRcIkknbSBnbGFkIHlvdSdyZSBjdXJpb3VzIHdoZXRoZXIgc29tZXRoaW5nIGlzIHBvcHBpbmcgdXAgaW4gaGVyZS4gSSdtIGEgYml0IG9mIGEgc3RpY2tsZXIgd2hlbiBpdCBjb21lcyB0byBtZXNzYWdlcyBpbiB0aGUgY29uc29sZSBzbyBJIHRyeSB0byBtYWtlIHN1cmUgb25seSB0aGluZ3MgSSB3YW50IGFyZSB2aXNpYmxlLiBUaGF0IGJlaW5nIHNhaWQsIGlmIHRoZXJlIGlzIGEgYmlnIGVycm9yIGhlcmUsIEkgd291bGQgcmVhbGx5IGFwcHJlY2lhdGUgeW91IHRlbGxpbmcgbWUgc28gSSBjYW4gZ2V0IHJpZCBvZiBpdCFcIlxyXG5cdFx0KTtcclxuXHRcdGNvbnNvbGUubG9nKFxyXG5cdFx0XHQnVGhlIGNvZGUgZm9yIG15IHJlc3VtZSBpcyBob3N0ZWQgb24gR2l0aHViIGlmIHlvdSByZWFsbHkgd2FudCB0byBnbyBpbnRvIGFsbCB0aGlzISA9PiBodHRwczovL2dpdGh1Yi5jb20vRmxhbmRlcnNCdXJnZXIvcmVzdW1lJ1xyXG5cdFx0KTtcclxuXHJcblx0XHQvKlxyXG4gICAgJChkb2N1bWVudCkuYmluZChcImtleXVwIGtleWRvd25cIiwgZnVuY3Rpb24oZSl7XHJcbiAgICAgIGlmKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT0gODApe1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgICovXHJcblxyXG5cdFx0JCh3aW5kb3cpLmxvYWQoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHQkKCcubG9hZGluZycpLmZhZGVPdXQoJ3Nsb3cnKTtcclxuXHRcdFx0JCgnLmNvbnRlbnQnKS5mYWRlSW4oJ3Nsb3cnKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdCRzY29wZS50aGVtZUNvdW50ZXIgPSA2O1xyXG5cdFx0JHNjb3BlLnRvZGF5ID0gbmV3IERhdGUoKTtcclxuXHRcdCRzY29wZS55ZWFyID0gJHNjb3BlLnRvZGF5LmdldEZ1bGxZZWFyKCk7XHJcblx0XHQkc2NvcGUucmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMCk7XHJcblxyXG5cdFx0JHNjb3BlLmZsaXBUaGVtZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0JCgnLmxvYWRpbmcnKS5zaG93KCk7XHJcblx0XHRcdCQoJy5jb250ZW50JykuaGlkZSgpO1xyXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHQkKCcubG9hZGluZycpLmZhZGVPdXQoJ3Nsb3cnKTtcclxuXHRcdFx0XHQkKCcuY29udGVudCcpLmZhZGVJbignc2xvdycpO1xyXG5cdFx0XHR9LCA4MDApO1xyXG5cdFx0XHQkc2NvcGUudGhlbWVDb3VudGVyID1cclxuXHRcdFx0XHQkc2NvcGUudGhlbWVDb3VudGVyIDwgNlxyXG5cdFx0XHRcdFx0PyAkc2NvcGUudGhlbWVDb3VudGVyICsgMVxyXG5cdFx0XHRcdFx0OiAoJHNjb3BlLnRoZW1lQ291bnRlciA9IDEpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQkLmdldEpTT04oJy9za2lsbHMuanNvbicsIGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0XHRcdCRzY29wZS5za2lsbHMgPSBkYXRhLmZpbHRlcihmdW5jdGlvbiAoc2tpbGwpIHtcclxuXHRcdFx0XHRyZXR1cm4gc2tpbGwuZW5hYmxlZDtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHQkLmdldEpTT04oJy9ob2JiaWVzLmpzb24nLCBmdW5jdGlvbiAoZGF0YSkge1xyXG5cdFx0XHQkc2NvcGUuaG9iYmllcyA9IGRhdGE7XHJcblx0XHR9KTtcclxuXHJcblx0XHQkLmdldEpTT04oJy9leHBlcmllbmNlLmpzb24nLCBmdW5jdGlvbiAoZGF0YSkge1xyXG5cdFx0XHQkc2NvcGUuam9icyA9IGRhdGE7XHJcblx0XHRcdCRzY29wZS5qb2JzLmZvckVhY2goZnVuY3Rpb24gKGpvYikge1xyXG5cdFx0XHRcdGpvYi5zdGFydERhdGUgPSBuZXcgRGF0ZShqb2Iuc3RhcnREYXRlKTtcclxuXHRcdFx0XHRpZiAoam9iLmVuZERhdGUpIGpvYi5lbmREYXRlID0gbmV3IERhdGUoam9iLmVuZERhdGUpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdCQuZ2V0SlNPTignL2NoYXJhZGVzLmpzb24nLCBmdW5jdGlvbiAoZGF0YSkge1xyXG5cdFx0XHQkc2NvcGUuY2hhcmFkZXMgPSBkYXRhO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0JHNjb3BlLmdldFRpbWVTcGFuID0gZnVuY3Rpb24gKGpvYikge1xyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdGpvYi5zdGFydERhdGUuZ2V0RnVsbFllYXIoKSArXHJcblx0XHRcdFx0KGpvYi5lbmREYXRlID8gJyAtICcgKyBqb2IuZW5kRGF0ZS5nZXRGdWxsWWVhcigpIDogJyAtIFRvZGF5JylcclxuXHRcdFx0KTtcclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLmxhbmd1YWdlcyA9IExhbmd1YWdlU3ZjLmxhbmd1YWdlcztcclxuXHJcblx0XHQkc2NvcGUuc2VsZWN0ZWRMYW5ndWFnZSA9IExhbmd1YWdlU3ZjLmdldExhbmd1YWdlKCk7XHJcblxyXG5cdFx0JHNjb3BlLnNlbGVjdExhbmd1YWdlID0gZnVuY3Rpb24gKGxhbmd1YWdlKSB7XHJcblx0XHRcdCRzY29wZS5zZWxlY3RlZExhbmd1YWdlID0gTGFuZ3VhZ2VTdmMuc2V0TGFuZ3VhZ2UobGFuZ3VhZ2UpO1xyXG5cdFx0fTtcclxuXHJcblx0XHQkc2NvcGUuaG92ZXJkaXYgPSBmdW5jdGlvbiAoZSwgZGl2aWQpIHtcclxuXHRcdFx0dmFyIGxlZnQgPSBlLmNsaWVudFggKyAncHgnO1xyXG5cdFx0XHR2YXIgdG9wID0gZS5jbGllbnRZICsgMjAgKyAncHgnO1xyXG5cclxuXHRcdFx0dmFyIGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdmlkKTtcclxuXHJcblx0XHRcdCQoJyMnICsgZGl2aWQpLmNzcygnbGVmdCcsIGxlZnQpO1xyXG5cdFx0XHQkKCcjJyArIGRpdmlkKS5jc3MoJ3RvcCcsIHRvcCk7XHJcblxyXG5cdFx0XHQkKCcjJyArIGRpdmlkKS50b2dnbGUoKTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fTtcclxuXHJcblx0XHQkc2NvcGUuc29jaWFsTWVkaWEgPSBbXHJcblx0XHRcdC8qXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImZhY2Vib29rXCIsXHJcbiAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2ZsYW5kZXJzYnVyZ2VyXCIsXHJcbiAgICAgICAgICAgIFwiaWNvblwiOiBcImZhLWZhY2Vib29rLWZcIlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwidHdpdHRlclwiLFxyXG4gICAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vdHdpdHRlci5jb20vQmVsZ29DYW5hZGlhblwiLFxyXG4gICAgICAgICAgICBcImljb25cIjogXCJmYS10d2l0dGVyXCJcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImdvb2RyZWFkc1wiLFxyXG4gICAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3Lmdvb2RyZWFkcy5jb20vdXNlci9zaG93LzE3MDcwMDEwLWxhdXJlbnRcIixcclxuICAgICAgICAgICAgXCJpY29uXCI6IFwiZmEtYm9va1wiXHJcbiAgICAgICAgICB9LCovXHJcblx0XHRcdHtcclxuXHRcdFx0XHRuYW1lOiAnbGlua2VkaW4nLFxyXG5cdFx0XHRcdHVybDogJ2h0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9sYXVyZW50LWRlYmFja2VyLTE2MzNhOTE2JyxcclxuXHRcdFx0XHRpY29uOiAnZmEtbGlua2VkaW4nLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bmFtZTogJ2dpdGh1YicsXHJcblx0XHRcdFx0dXJsOiAnaHR0cHM6Ly9naXRodWIuY29tL0ZsYW5kZXJzQnVyZ2VyJyxcclxuXHRcdFx0XHRpY29uOiAnZmEtZ2l0aHViJyxcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG5hbWU6ICdqc2ZpZGRsZScsXHJcblx0XHRcdFx0dXJsOiAnaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvdXNlci9CZWxnb0NhbmFkaWFuL2ZpZGRsZXMvJyxcclxuXHRcdFx0XHRpY29uOiAnZmEtanNmaWRkbGUnLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bmFtZTogJ3N0YWNrb3ZlcmZsb3cnLFxyXG5cdFx0XHRcdHVybDogJ2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS91c2Vycy8xMDgzOTIzL2JlbGdvY2FuYWRpYW4nLFxyXG5cdFx0XHRcdGljb246ICdmYS1zdGFjay1vdmVyZmxvdycsXHJcblx0XHRcdH0sXHJcblx0XHRdO1xyXG5cclxuXHRcdGlmICh3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXIpIHtcclxuXHRcdFx0VXNlclN2Yy5sb2dpbih3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXIpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0bG9naW4ocmVzcG9uc2UuZGF0YSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdCRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24gKF8sIHVzZXIpIHtcclxuXHRcdFx0bG9naW4odXNlcik7XHJcblx0XHR9KTtcclxuXHJcblx0XHRmdW5jdGlvbiBsb2dpbih1c2VyKSB7XHJcblx0XHRcdGlmICghJHNjb3BlLmxvZ2dlZEluKSB7XHJcblx0XHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS51c2VyID0gdXNlci5faWQ7XHJcblx0XHRcdFx0JHNjb3BlLmxvZ2dlZEluID0gdHJ1ZTtcclxuXHRcdFx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG5cdFx0XHRcdCRzY29wZS4kYnJvYWRjYXN0KCdsb2dpbicpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0JHNjb3BlLiRvbigndXBkYXRlJywgZnVuY3Rpb24gKF8sIHVzZXIpIHtcclxuXHRcdFx0JHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcclxuXHRcdFx0JHNjb3BlLmN1cnJlbnRVc2VyLmJpcnRoRGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5jdXJyZW50VXNlci5iaXJ0aERhdGUpO1xyXG5cdFx0XHQkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHQkKCcjbG9hZGluZy1pY29uJykuZmFkZU91dCgnc2xvdycpO1xyXG5cdFx0XHR9LCAxMDAwKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdCRzY29wZS4kb24oJ2xvYWRpbmcnLCBmdW5jdGlvbiAoXywgdXNlcikge1xyXG5cdFx0XHQkc2NvcGUubG9hZGluZyA9IHRydWU7XHJcblx0XHRcdCQoJyNsb2FkaW5nLWljb24nKS5zaG93KCk7XHJcblx0XHR9KTtcclxuXHJcblx0XHQkc2NvcGUuJG9uKCdsb2FkZWQnLCBmdW5jdGlvbiAoXywgdXNlcikge1xyXG5cdFx0XHQkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHQkKCcjbG9hZGluZy1pY29uJykuZmFkZU91dCgnc2xvdycpO1xyXG5cdFx0XHR9LCAxMDAwKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdCRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGZpcmViYXNlXHJcblx0XHRcdFx0LmF1dGgoKVxyXG5cdFx0XHRcdC5zaWduT3V0KClcclxuXHRcdFx0XHQudGhlbihmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHQvLyBTaWduLW91dCBzdWNjZXNzZnVsLlxyXG5cdFx0XHRcdFx0JHNjb3BlLmxvZ2dlZEluID0gZmFsc2U7XHJcblx0XHRcdFx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcblx0XHRcdFx0XHQkc2NvcGUuJGJyb2FkY2FzdCgnbG9nb3V0Jyk7XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcblx0XHRcdFx0XHQvLyBBbiBlcnJvciBoYXBwZW5lZC5cclxuXHRcdFx0XHR9KTtcclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLmZvcm1hdERhdGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG5cdFx0XHR2YXIgbW9udGhzID0gW1xyXG5cdFx0XHRcdCdKYW4nLFxyXG5cdFx0XHRcdCdGZWInLFxyXG5cdFx0XHRcdCdNYXInLFxyXG5cdFx0XHRcdCdBcHInLFxyXG5cdFx0XHRcdCdNYXknLFxyXG5cdFx0XHRcdCdKdW4nLFxyXG5cdFx0XHRcdCdKdWwnLFxyXG5cdFx0XHRcdCdBdWcnLFxyXG5cdFx0XHRcdCdTZXAnLFxyXG5cdFx0XHRcdCdPY3QnLFxyXG5cdFx0XHRcdCdOb3YnLFxyXG5cdFx0XHRcdCdEZWMnLFxyXG5cdFx0XHRdO1xyXG5cdFx0XHRkYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcblx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0ZGF0ZS5nZXREYXRlKCkgK1xyXG5cdFx0XHRcdCctJyArXHJcblx0XHRcdFx0bW9udGhzW2RhdGUuZ2V0TW9udGgoKV0gK1xyXG5cdFx0XHRcdCctJyArXHJcblx0XHRcdFx0ZGF0ZS5nZXRGdWxsWWVhcigpXHJcblx0XHRcdCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdFN0cmluZy5wcm90b3R5cGUuY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnNsaWNlKDEpO1xyXG5cdFx0fTtcclxuXHR9KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdBc3Rlcm9pZHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgR2FtZVN2Yykge1xyXG5cclxuICAkc2NvcGUuYW5ub3VuY2UgPSBmYWxzZTtcclxuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FzdGVyb2lkcy1wYWdlJyk7XHJcbiAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gIGN0eC5mb250ID0gXCIzMHB4IENvbWljIFNhbnMgTVNcIjtcclxuICBjdHguZmlsbFN0eWxlID0gXCJyZWRcIjtcclxuICBjdHgudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICB2YXIgc2hvdHMgPSB7fTtcclxuICB2YXIgYXN0ZXJvaWRzID0ge307XHJcbiAgdmFyIHBvd2VydXBzID0ge307XHJcbiAgdmFyIGV4cGxvc2lvbnMgPSB7fTtcclxuICB2YXIgbWFwID0ge307XHJcbiAgdmFyIHNwYWNlcGljcyA9IDEwO1xyXG4gIHZhciBzcGFjZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNwYWNlcGljcyk7XHJcbiAgdmFyIHBvd2VydXBUeXBlcyA9IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogJ3NwZWVkJyxcclxuICAgICAgYW5ub3VuY2VtZW50OiAnTWF4IFNwZWVkIOKHpycsXHJcbiAgICAgIGN5Y2xlOiB7XHJcbiAgICAgICAgcm93czogMSxcclxuICAgICAgICBjb2x1bW5zOiA0LFxyXG4gICAgICAgIHNpemU6IFsxNCwgMzVdLFxyXG4gICAgICAgIGk6IDAsXHJcbiAgICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZzogbmV3IEltYWdlKCksXHJcbiAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbihzcGFjZXNoaXApIHtcclxuICAgICAgICBzcGFjZXNoaXAubWF4U3BlZWQgKz0gMTAwO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnY29vbGRvd24nLFxyXG4gICAgICBhbm5vdW5jZW1lbnQ6ICdDb29sZG93biDih6knLFxyXG4gICAgICBjeWNsZToge1xyXG4gICAgICAgIHJvd3M6IDEsXHJcbiAgICAgICAgY29sdW1uczogMyxcclxuICAgICAgICBzaXplOiBbMTcsIDE3XSxcclxuICAgICAgICBpOiAwLFxyXG4gICAgICAgIGRpcmVjdGlvbjogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBpbWc6IG5ldyBJbWFnZSgpLFxyXG4gICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oc3BhY2VzaGlwKSB7XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5jb29sZG93biA+IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5jb29sZG93blRpbWUgLT0gMTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdyYW5nZScsXHJcbiAgICAgIGFubm91bmNlbWVudDogJ0ZpcmluZyBSYW5nZSDih6cnLFxyXG4gICAgICBjeWNsZToge1xyXG4gICAgICAgIHJvd3M6IDQsXHJcbiAgICAgICAgY29sdW1uczogMSxcclxuICAgICAgICBzaXplOiBbMzAsIDhdLFxyXG4gICAgICAgIGk6IDAsXHJcbiAgICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZzogbmV3IEltYWdlKCksXHJcbiAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbihzcGFjZXNoaXApIHtcclxuICAgICAgICBzcGFjZXNoaXAucmFuZ2UgKz0gNTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogJ3NoaWVsZCcsXHJcbiAgICAgIGFubm91bmNlbWVudDogJ1NoaWVsZCcsXHJcbiAgICAgIGN5Y2xlOiB7XHJcbiAgICAgICAgcm93czogNSxcclxuICAgICAgICBjb2x1bW5zOiAxLFxyXG4gICAgICAgIHNpemU6IFsxOSwgMTldLFxyXG4gICAgICAgIGk6IDAsXHJcbiAgICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGltZzogbmV3IEltYWdlKCksXHJcbiAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbihzcGFjZXNoaXApIHtcclxuICAgICAgICBzcGFjZXNoaXAuc2hpZWxkID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogJ251a2UnLFxyXG4gICAgICBhbm5vdW5jZW1lbnQ6ICdOdWtlJyxcclxuICAgICAgY3ljbGU6IHtcclxuICAgICAgICByb3dzOiAxLFxyXG4gICAgICAgIGNvbHVtbnM6IDgsXHJcbiAgICAgICAgc2l6ZTogWzE1LCAxNV0sXHJcbiAgICAgICAgaTogMCxcclxuICAgICAgICBkaXJlY3Rpb246IHRydWVcclxuICAgICAgfSxcclxuICAgICAgaW1nOiBuZXcgSW1hZ2UoKSxcclxuICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKHNwYWNlc2hpcCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgaW4gYXN0ZXJvaWRzKSB7XHJcbiAgICAgICAgICBhc3Rlcm9pZHNbaV0uZXhwbG9kZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzcGF3bkFzdGVyb2lkcyg1KTtcclxuICAgICAgfVxyXG4gICAgfSwvKlxyXG4gICAgJ3NpZGVfY2Fubm9ucycsXHJcbiAgICAnbGFzZXInLFxyXG4gICAgJ3NoaWVsZCcsXHJcbiAgICAnbGlmZScsXHJcbiAgICAnbWlzc2lsZXMnLFxyXG4gICAgJ251a2UnXHJcbiAgICAqL1xyXG4gIF07XHJcbiAgcG93ZXJ1cFR5cGVzLmZvckVhY2goZnVuY3Rpb24ocG93ZXJ1cCwgaSwgYXJyYXkpIHtcclxuICAgIGFycmF5W2ldLmltZy5zcmMgPSAnYXN0ZXJvaWRzLycgKyBwb3dlcnVwLm5hbWUgKyAnLnBuZyc7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBleHBsb3Npb25JbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gIGV4cGxvc2lvbkltYWdlLnNyYyA9ICdhc3Rlcm9pZHMvZXhwbG9zaW9uLnBuZyc7XHJcblxyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICBtYXBbZS5rZXlDb2RlIHx8IGUud2hpY2hdID0gdHJ1ZTtcclxuICB9LHRydWUpO1xyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgbWFwW2Uua2V5Q29kZSB8fCBlLndoaWNoXSA9IGZhbHNlO1xyXG4gIH0sdHJ1ZSk7XHJcblxyXG4gICRzY29wZS5oaWdoc2NvcmUgPSAwO1xyXG5cclxuICBmdW5jdGlvbiBldmFsdWF0ZUtleXMoKSB7XHJcbiAgICBpZiAoJHNjb3BlLnBsYXlpbmcpIHtcclxuICAgICAgaWYgKG1hcFszMl0pIHtcclxuICAgICAgICAvL1NwYWNlXHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5jb29sZG93biA9PT0gMCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnNob290KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXBbMzddKSB7XHJcbiAgICAgICAgLy9MZWZ0IEFycm93XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5yb3RhdGlvbiA9PT0gMCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnJvdGF0aW9uID0gMzYwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAucm90YXRpb24gLT0gMztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1hcFszOV0pIHtcclxuICAgICAgICAvL1JpZ2h0IEFycm93XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5yb3RhdGlvbiA9PT0gMzYwKSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAucm90YXRpb24gPSAwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzcGFjZXNoaXAucm90YXRpb24gKz0gMztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1hcFszOF0pIHtcclxuICAgICAgICAvL1VwIEFycm93XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5zcGVlZCA8PSBzcGFjZXNoaXAubWF4U3BlZWQpIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5zcGVlZCArPSA1O1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoc3BhY2VzaGlwLnNwZWVkID4gMCkge1xyXG4gICAgICAgICAgc3BhY2VzaGlwLnNwZWVkLS07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXBbNDBdKSB7XHJcbiAgICAgICAgLy9Eb3duIEFycm93XHJcbiAgICAgICAgaWYgKHNwYWNlc2hpcC5zcGVlZCA+IDApIHtcclxuICAgICAgICAgIHNwYWNlc2hpcC5zcGVlZCAtPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKG1hcFszMl0pIHtcclxuICAgICAgICBzdGFydCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBTcGFjZXNoaXAoKSB7XHJcbiAgICB0aGlzLndpZHRoID0gNTA7XHJcbiAgICB0aGlzLmhlaWdodCA9IDUwO1xyXG4gICAgdGhpcy5zaGllbGQgPSBmYWxzZTtcclxuICAgIHRoaXMucmFuZ2UgPSA4MDtcclxuICAgIHRoaXMuY2Fubm9uID0ge1xyXG4gICAgICB4OiB0aGlzLndpZHRoIC8gMiAtIDQuNSxcclxuICAgICAgeTogdGhpcy5oZWlnaHQgLyAyIC0gdGhpcy5oZWlnaHQgKiAwLjA3ODEyNVxyXG4gICAgfTtcclxuICAgIHRoaXMuY29vbGRvd24gPSAwO1xyXG4gICAgdGhpcy5jb29sZG93blRpbWUgPSAyMDtcclxuICAgIHRoaXMucG9zaXRpb24gPSBbXHJcbiAgICAgIGNhbnZhcy53aWR0aCAvIDIgLSB0aGlzLndpZHRoIC8gMixcclxuICAgICAgY2FudmFzLmhlaWdodCAvIDIgLSB0aGlzLmhlaWdodCAvIDJcclxuICAgIF07XHJcbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgdGhpcy5pbWcuc3JjID0gJ2FzdGVyb2lkcy9zcGFjZXNoaXAucG5nJztcclxuICAgIHRoaXMuc3BlZWQgPSAwO1xyXG4gICAgdGhpcy5tYXhTcGVlZCA9IDEwMDA7XHJcbiAgICB0aGlzLmFuZ2xlID0gMDtcclxuICAgIHRoaXMucm90YXRpb24gPSAwO1xyXG5cclxuICAgIHRoaXMuc2hvb3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5jb29sZG93biA9IHRoaXMuY29vbGRvd25UaW1lO1xyXG4gICAgICB2YXIgaWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDApO1xyXG4gICAgICBzaG90c1tpZF0gPSBuZXcgU2hvdChpZCwgdGhpcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5zaGllbGQpIHtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LmFyYyh0aGlzLnBvc2l0aW9uWzBdICsgdGhpcy53aWR0aCAvIDIsIHRoaXMucG9zaXRpb25bMV0gKyB0aGlzLmhlaWdodCAvIDIsIDMwLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwicmdiKDM1LCAyMzcsIDg2LCAwLjUpXCI7XHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJyZ2IoNjYsIDE2OCwgMzYsIDAuOClcIjtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gNTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKHZhciBpIGluIGFzdGVyb2lkcykge1xyXG4gICAgICAgIHZhciBhc3Rlcm9pZCA9IGFzdGVyb2lkc1tpXTtcclxuICAgICAgICBpZiAoaGl0KGFzdGVyb2lkLCB0aGlzKSkge1xyXG4gICAgICAgICAgaWYgKHRoaXMuc2hpZWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hpZWxkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFzdGVyb2lkLmV4cGxvZGUoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnYW1lT3ZlcigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLmFuZ2xlID0gdGhpcy5yb3RhdGlvbjtcclxuICAgICAgaWYgKHRoaXMuY29vbGRvd24gPiAwKSB7XHJcbiAgICAgICAgdGhpcy5jb29sZG93bi0tO1xyXG4gICAgICB9XHJcbiAgICAgIG1vdmUodGhpcyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gU2hvdChpZCwgc3BhY2VzaGlwKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gW1xyXG4gICAgICBzcGFjZXNoaXAucG9zaXRpb25bMF0gKyBzcGFjZXNoaXAuY2Fubm9uLnggKyBzcGFjZXNoaXAuY2Fubm9uLnggKiBNYXRoLmNvcygoc3BhY2VzaGlwLnJvdGF0aW9uIC0gOTApICogTWF0aC5QSSAvIDE4MCksXHJcbiAgICAgIHNwYWNlc2hpcC5wb3NpdGlvblsxXSArIHNwYWNlc2hpcC5jYW5ub24ueSArIHNwYWNlc2hpcC5jYW5ub24ueSAqIE1hdGguc2luKChzcGFjZXNoaXAucm90YXRpb24gLSA5MCkgKiBNYXRoLlBJIC8gMTgwKVxyXG4gICAgXTtcclxuICAgIHRoaXMud2lkdGggPSA5O1xyXG4gICAgdGhpcy5oZWlnaHQgPSAxNTtcclxuICAgIHRoaXMuYW5nbGUgPSBzcGFjZXNoaXAuYW5nbGU7XHJcbiAgICB0aGlzLnJvdGF0aW9uID0gc3BhY2VzaGlwLnJvdGF0aW9uO1xyXG4gICAgdGhpcy5zcGVlZCA9IHNwYWNlc2hpcC5zcGVlZCArIDUwMDtcclxuICAgIHRoaXMubGlmZXNwYW4gPSBzcGFjZXNoaXAucmFuZ2U7XHJcbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgdGhpcy5pbWcuc3JjID0gJ2FzdGVyb2lkcy9zaG90LnBuZyc7XHJcblxyXG4gICAgdGhpcy5tb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMubGlmZXNwYW4tLTtcclxuICAgICAgbW92ZSh0aGlzKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBBc3Rlcm9pZChpZCkge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy53aWR0aCA9IE1hdGgucmFuZG9tKCkgKiA1MCArIDIwO1xyXG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLndpZHRoO1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IGdldEVudHJ5UG9zaXRpb24odGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgdGhpcy5hbmdsZSA9IE1hdGgucmFuZG9tKCkgKiAzNjA7XHJcbiAgICB0aGlzLnJvdGF0aW9uID0gTWF0aC5yYW5kb20oKSAqIDM2MDtcclxuICAgIHRoaXMucm90YXRpb25TcGVlZCA9IE1hdGgucmFuZG9tKCkgKiA2IC0gMztcclxuICAgIHRoaXMuc3BlZWQgPSBNYXRoLnJhbmRvbSgpICogMzAwICsgMjtcclxuICAgIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICB0aGlzLmltZy5zcmMgPSAnYXN0ZXJvaWRzL2FzdGVyb2lkJyArIChNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA2KSArIDEpICsgJy5wbmcnO1xyXG5cclxuICAgIHRoaXMuZXhwbG9kZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBleHBsb3Npb25zW3RoaXMuaWRdID0gbmV3IEV4cGxvc2lvbih0aGlzKTtcclxuICAgICAgcmV0dXJuIGRlbGV0ZSBhc3Rlcm9pZHNbdGhpcy5pZF07XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLnJvdGF0aW9uICs9IHRoaXMucm90YXRpb25TcGVlZDtcclxuICAgICAgaWYgKHRoaXMucm90YXRpb24gPiAzNjApIHtcclxuICAgICAgICB0aGlzLnJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbiAtIDM2MDtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLnJvdGF0aW9uIDwgMCkge1xyXG4gICAgICAgIHRoaXMucm90YXRpb24gPSAzNjAgKyB0aGlzLnJvdGF0aW9uO1xyXG4gICAgICB9XHJcbiAgICAgIGZvciAodmFyIGkgaW4gc2hvdHMpIHtcclxuICAgICAgICB2YXIgc2hvdCA9IHNob3RzW2ldO1xyXG4gICAgICAgIGlmIChoaXQoc2hvdCwgdGhpcykpIHtcclxuICAgICAgICAgIHRoaXMuZXhwbG9kZSgpO1xyXG4gICAgICAgICAgdmFyIHBvaW50cyA9IE1hdGguZmxvb3IoKHNob3Quc3BlZWQgLSA1MDApIC8gMTAgKyA3MCAtIHRoaXMud2lkdGgpO1xyXG4gICAgICAgICAgaWYgKE1hdGguZmxvb3IoKHBvaW50cyArICRzY29wZS5zY29yZSkgLyAxMDApID4gTWF0aC5mbG9vcigkc2NvcGUuc2NvcmUgLyAxMDApKSB7XHJcbiAgICAgICAgICAgIHNwYXduUG93ZXJ1cCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgJHNjb3BlLnNjb3JlICs9IHBvaW50cztcclxuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgIGRlbGV0ZSBzaG90c1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgbW92ZSh0aGlzKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBFeHBsb3Npb24ob2JqZWN0KSB7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gW29iamVjdC5wb3NpdGlvblswXSwgb2JqZWN0LnBvc2l0aW9uWzFdXTtcclxuICAgIHRoaXMud2lkdGggPSBvYmplY3Qud2lkdGg7XHJcbiAgICB0aGlzLmhlaWdodCA9IG9iamVjdC5oZWlnaHQ7XHJcbiAgICB0aGlzLnNwZWVkID0gMDtcclxuICAgIHRoaXMuYW5nbGUgPSBNYXRoLnJhbmRvbSgpICogMzYwO1xyXG4gICAgdGhpcy5jeWNsZSA9IHtcclxuICAgICAgcm93czogNixcclxuICAgICAgY29sdW1uczogOCxcclxuICAgICAgc2l6ZTogWzI1NiwgMjU2XSxcclxuICAgICAgaTogMCxcclxuICAgICAgZGlyZWN0aW9uOiB0cnVlXHJcbiAgICB9O1xyXG4gICAgdGhpcy5saWZlc3BhbiA9IDQ3O1xyXG4gICAgdGhpcy5pbWcgPSBleHBsb3Npb25JbWFnZTtcclxuXHJcbiAgICB0aGlzLm1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5saWZlc3Bhbi0tO1xyXG4gICAgICBtb3ZlKHRoaXMpO1xyXG4gICAgICBpZiAodGhpcy5jeWNsZS5kaXJlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmN5Y2xlLmkrKztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmN5Y2xlLmktLTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIFBvd2VydXAoaWQpIHtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMucG93ZXJ1cCA9IHBvd2VydXBUeXBlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3dlcnVwVHlwZXMubGVuZ3RoKV07XHJcbiAgICB0aGlzLmN5Y2xlID0gdGhpcy5wb3dlcnVwLmN5Y2xlO1xyXG4gICAgdGhpcy5saWZlc3BhbiA9IDEwMDA7XHJcbiAgICBpZiAodGhpcy5jeWNsZS5zaXplWzFdID4gdGhpcy5jeWNsZS5zaXplWzBdKSB7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gNDA7XHJcbiAgICAgIHRoaXMud2lkdGggPSBNYXRoLnJvdW5kKHRoaXMuaGVpZ2h0IC8gdGhpcy5jeWNsZS5zaXplWzFdICogdGhpcy5jeWNsZS5zaXplWzBdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMud2lkdGggPSA0MDtcclxuICAgICAgdGhpcy5oZWlnaHQgPSBNYXRoLnJvdW5kKHRoaXMud2lkdGggLyB0aGlzLmN5Y2xlLnNpemVbMF0gKiB0aGlzLmN5Y2xlLnNpemVbMV0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wb3NpdGlvbiA9IGdldEVudHJ5UG9zaXRpb24odGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgdGhpcy5pbWcgPSB0aGlzLnBvd2VydXAuaW1nO1xyXG4gICAgdGhpcy5hbmdsZSA9IE1hdGgucmFuZG9tKCkgKiAzNjA7XHJcbiAgICB0aGlzLnNwZWVkID0gTWF0aC5yYW5kb20oKSAqIDE1MCArIDUwO1xyXG4gICAgdmFyIGRlbGF5ID0gNTtcclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5saWZlc3BhbiA8PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSBwb3dlcnVwc1t0aGlzLmlkXTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaGl0KHNwYWNlc2hpcCwgdGhpcykpIHtcclxuICAgICAgICAkc2NvcGUuYW5ub3VuY2UgPSB0cnVlO1xyXG4gICAgICAgICRzY29wZS5hbm5vdW5jZW1lbnQgPSB0aGlzLnBvd2VydXAuYW5ub3VuY2VtZW50O1xyXG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJHNjb3BlLmFubm91bmNlID0gZmFsc2U7XHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgdGhpcy5wb3dlcnVwLmFjdGl2YXRlKHNwYWNlc2hpcCk7XHJcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSBwb3dlcnVwc1t0aGlzLmlkXTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxpZmVzcGFuLS07XHJcbiAgICAgIG1vdmUodGhpcyk7XHJcbiAgICAgIGlmIChkZWxheSA8PSAwKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3ljbGUuZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlLmkrKztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZS5pLS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGF5ID0gNTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkZWxheS0tO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbW92ZShvYmplY3QpIHtcclxuICAgICBvYmplY3QucG9zaXRpb25bMF0gKz0gb2JqZWN0LnNwZWVkIC8gMTAwICogTWF0aC5jb3MoKG9iamVjdC5hbmdsZSAtIDkwKSAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgIG9iamVjdC5wb3NpdGlvblsxXSArPSBvYmplY3Quc3BlZWQgLyAxMDAgKiBNYXRoLnNpbigob2JqZWN0LmFuZ2xlIC0gOTApICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgaWYgKG9iamVjdC5wb3NpdGlvblswXSA+IGNhbnZhcy53aWR0aCkge1xyXG4gICAgICAgb2JqZWN0LnBvc2l0aW9uWzBdID0gLW9iamVjdC53aWR0aDtcclxuICAgICB9IGVsc2UgaWYgKG9iamVjdC5wb3NpdGlvblswXSA8IC1vYmplY3Qud2lkdGgpIHtcclxuICAgICAgIG9iamVjdC5wb3NpdGlvblswXSA9IGNhbnZhcy53aWR0aDtcclxuICAgICB9XHJcbiAgICAgaWYgKG9iamVjdC5wb3NpdGlvblsxXSA+IGNhbnZhcy5oZWlnaHQpIHtcclxuICAgICAgIG9iamVjdC5wb3NpdGlvblsxXSA9IC1vYmplY3QuaGVpZ2h0O1xyXG4gICAgIH0gZWxzZSBpZiAob2JqZWN0LnBvc2l0aW9uWzFdIDwgLW9iamVjdC5oZWlnaHQpIHtcclxuICAgICAgIG9iamVjdC5wb3NpdGlvblsxXSA9IGNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgfVxyXG4gICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgY3R4LnRyYW5zbGF0ZShvYmplY3QucG9zaXRpb25bMF0sIG9iamVjdC5wb3NpdGlvblsxXSk7XHJcbiAgICAgY3R4LnRyYW5zbGF0ZShvYmplY3Qud2lkdGggLyAyLCBvYmplY3QuaGVpZ2h0IC8gMik7XHJcbiAgICAgY3R4LnJvdGF0ZShvYmplY3Qucm90YXRpb24gKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICBpZiAob2JqZWN0LmN5Y2xlKSB7XHJcbiAgICAgICB2YXIgY29sdW1uID0gb2JqZWN0LmN5Y2xlLmkgJSBvYmplY3QuY3ljbGUuY29sdW1ucztcclxuICAgICAgIHZhciByb3cgPSBNYXRoLmZsb29yKG9iamVjdC5jeWNsZS5pIC8gb2JqZWN0LmN5Y2xlLmNvbHVtbnMpO1xyXG4gICAgICAgY3R4LmRyYXdJbWFnZShvYmplY3QuaW1nLCBvYmplY3QuY3ljbGUuc2l6ZVswXSAqIGNvbHVtbiwgb2JqZWN0LmN5Y2xlLnNpemVbMV0gKiByb3csIG9iamVjdC5jeWNsZS5zaXplWzBdLCBvYmplY3QuY3ljbGUuc2l6ZVsxXSwgLW9iamVjdC53aWR0aCAvIDIsIC1vYmplY3QuaGVpZ2h0IC8gMiwgb2JqZWN0LndpZHRoLCBvYmplY3QuaGVpZ2h0KTtcclxuXHJcbiAgICAgICBpZiAob2JqZWN0LmN5Y2xlLmkgPD0gMCkge1xyXG4gICAgICAgICBvYmplY3QuY3ljbGUuaSA9IDA7XHJcbiAgICAgICAgIG9iamVjdC5jeWNsZS5kaXJlY3Rpb24gPSB0cnVlO1xyXG4gICAgICAgfSBlbHNlIGlmIChvYmplY3QuY3ljbGUuaSA+PSBvYmplY3QuY3ljbGUuY29sdW1ucyAqIG9iamVjdC5jeWNsZS5yb3dzKSB7XHJcbiAgICAgICAgIG9iamVjdC5jeWNsZS5pID0gb2JqZWN0LmN5Y2xlLmNvbHVtbnMgKiBvYmplY3QuY3ljbGUucm93cyAtIDE7XHJcbiAgICAgICAgIG9iamVjdC5jeWNsZS5kaXJlY3Rpb24gPSBmYWxzZTtcclxuICAgICAgIH1cclxuICAgICB9IGVsc2Uge1xyXG4gICAgICAgY3R4LmRyYXdJbWFnZShvYmplY3QuaW1nLCAtb2JqZWN0LndpZHRoIC8gMiwgLW9iamVjdC5oZWlnaHQgLyAyLCBvYmplY3Qud2lkdGgsIG9iamVjdC5oZWlnaHQpO1xyXG4gICAgIH1cclxuICAgICBjdHgucmVzdG9yZSgpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHNwYWNlc2hpcDtcclxuXHJcbiAgZnVuY3Rpb24gc3RhcnQoKSB7XHJcbiAgICAkc2NvcGUucGxheWluZyA9IHRydWU7XHJcbiAgICAkc2NvcGUuc2NvcmUgPSAwO1xyXG4gICAgc3BhY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzcGFjZXBpY3MpO1xyXG4gICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgc3BhY2VzaGlwID0gbmV3IFNwYWNlc2hpcCgpO1xyXG4gICAgJHNjb3BlLnNjb3JlID0gMDtcclxuICAgIHNwYXduQXN0ZXJvaWRzKDUpO1xyXG4gICAgYXV0b1NwYXduKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRFbnRyeVBvc2l0aW9uKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHZhciBncmlkWCA9IE1hdGgucmFuZG9tKCkgKiAyO1xyXG4gICAgdmFyIGdyaWRZID0gTWF0aC5yYW5kb20oKSAqIDI7XHJcbiAgICB2YXIgeCwgeSA9IDA7XHJcbiAgICBpZiAoZ3JpZFggPj0gMSkge1xyXG4gICAgICB4ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aDtcclxuICAgICAgaWYgKHkgPj0gMSkge1xyXG4gICAgICAgIHkgPSAwIC0gaGVpZ2h0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHkgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB5ID0gTWF0aC5yYW5kb20oKSAqIGNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgIGlmIChncmlkWSA+PSAxKSB7XHJcbiAgICAgICAgeCA9IDAgLSB3aWR0aDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB4ID0gY2FudmFzLndpZHRoO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW3gsIHldO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGl0KG9iamVjdDEsIG9iamVjdDIpIHtcclxuICAgIHJldHVybiAob2JqZWN0MS5wb3NpdGlvblswXSA8IG9iamVjdDIucG9zaXRpb25bMF0gKyBvYmplY3QyLndpZHRoKSAmJlxyXG4gICAgICAgICAgIChvYmplY3QyLnBvc2l0aW9uWzBdIDwgb2JqZWN0MS5wb3NpdGlvblswXSArIG9iamVjdDEud2lkdGgpICYmXHJcbiAgICAgICAgICAgKG9iamVjdDEucG9zaXRpb25bMV0gPCBvYmplY3QyLnBvc2l0aW9uWzFdICsgb2JqZWN0Mi5oZWlnaHQpICYmXHJcbiAgICAgICAgICAgKG9iamVjdDIucG9zaXRpb25bMV0gPCBvYmplY3QxLnBvc2l0aW9uWzFdICsgb2JqZWN0MS5oZWlnaHQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXV0b1NwYXduKCkge1xyXG4gICAgaWYgKE9iamVjdC5rZXlzKGFzdGVyb2lkcykubGVuZ3RoIDwgMjAwKSB7XHJcbiAgICAgIHZhciBpZCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XHJcbiAgICAgIGFzdGVyb2lkc1tpZF0gPSBuZXcgQXN0ZXJvaWQoaWQpO1xyXG4gICAgfVxyXG4gICAgaWYgKCRzY29wZS5wbGF5aW5nKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgYXV0b1NwYXduKCk7XHJcbiAgICAgIH0sIHNwYXduSW50ZXJ2YWwoKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzcGF3bkludGVydmFsKCkge1xyXG4gICAgaWYgKCRzY29wZS5zY29yZSA8IDEwMDApIHtcclxuICAgICAgcmV0dXJuIDEwMDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDIwMDApIHtcclxuICAgICAgcmV0dXJuIDkwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgMzAwMCkge1xyXG4gICAgICByZXR1cm4gODAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCA0MDAwKSB7XHJcbiAgICAgIHJldHVybiA3MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDUwMDApIHtcclxuICAgICAgcmV0dXJuIDYwMDtcclxuICAgIH0gZWxzZSBpZiAoJHNjb3BlLnNjb3JlIDwgNjAwMCkge1xyXG4gICAgICByZXR1cm4gNTAwO1xyXG4gICAgfSBlbHNlIGlmICgkc2NvcGUuc2NvcmUgPCA3MDAwKSB7XHJcbiAgICAgIHJldHVybiA0MDA7XHJcbiAgICB9IGVsc2UgaWYgKCRzY29wZS5zY29yZSA8IDgwMDApIHtcclxuICAgICAgcmV0dXJuIDMwMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAyMDA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzcGF3bkFzdGVyb2lkcyhhbW91bnQpIHtcclxuICAgIHZhciBpID0gMDtcclxuICAgIGRvIHtcclxuICAgICAgdmFyIGlkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcclxuICAgICAgYXN0ZXJvaWRzW2lkXSA9IG5ldyBBc3Rlcm9pZChpZCk7XHJcbiAgICB9IHdoaWxlIChpKysgPD0gYW1vdW50KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNwYXduUG93ZXJ1cCgpIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhwb3dlcnVwcykubGVuZ3RoIDwgMykge1xyXG4gICAgICB2YXIgaWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDApO1xyXG4gICAgICBwb3dlcnVwc1tpZF0gPSBuZXcgUG93ZXJ1cChpZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnYW1lT3ZlcigpIHtcclxuICAgICRzY29wZS5wbGF5aW5nID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpIGluIGFzdGVyb2lkcykge1xyXG4gICAgICBhc3Rlcm9pZHNbaV0uZXhwbG9kZSgpO1xyXG4gICAgfVxyXG4gICAgc2hvdHMgPSB7fTtcclxuICAgIGlmICgkc2NvcGUubG9nZ2VkSW4pIHtcclxuICAgICAgaWYgKCRzY29wZS5jdXJyZW50VXNlci5oaWdoc2NvcmUuYXN0ZXJvaWRzIDwgJHNjb3BlLnNjb3JlKSB7XHJcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyLmhpZ2hzY29yZS5hc3Rlcm9pZHMgPSAkc2NvcGUuc2NvcmU7XHJcbiAgICAgICAgR2FtZVN2Yy5zZXRIaWdoc2NvcmUoJ2FzdGVyb2lkcycsICRzY29wZS5jdXJyZW50VXNlci5faWQsICRzY29wZS5zY29yZSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICgkc2NvcGUuaGlnaHNjb3JlIDwgJHNjb3BlLnNjb3JlKSB7XHJcbiAgICAgICAgJHNjb3BlLmhpZ2hzY29yZSA9ICRzY29wZS5zY29yZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcblx0Ly8gU3RhcnQgbGlzdGVuaW5nIHRvIHJlc2l6ZSBldmVudHMgYW5kXHJcblx0Ly8gZHJhdyBjYW52YXMuXHJcblxyXG5cdGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcblx0XHQvLyBSZWdpc3RlciBhbiBldmVudCBsaXN0ZW5lciB0b1xyXG5cdFx0Ly8gY2FsbCB0aGUgcmVzaXplQ2FudmFzKCkgZnVuY3Rpb24gZWFjaCB0aW1lXHJcblx0XHQvLyB0aGUgd2luZG93IGlzIHJlc2l6ZWQuXHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplQ2FudmFzLCBmYWxzZSk7XHJcblxyXG5cclxuXHRcdC8vIERyYXcgY2FudmFzIGJvcmRlciBmb3IgdGhlIGZpcnN0IHRpbWUuXHJcblx0XHRyZXNpemVDYW52YXMoKTtcclxuXHR9XHJcblx0Ly8gUnVucyBlYWNoIHRpbWUgdGhlIERPTSB3aW5kb3cgcmVzaXplIGV2ZW50IGZpcmVzLlxyXG5cdC8vIFJlc2V0cyB0aGUgY2FudmFzIGRpbWVuc2lvbnMgdG8gbWF0Y2ggd2luZG93LFxyXG5cdC8vIHRoZW4gZHJhd3MgdGhlIG5ldyBib3JkZXJzIGFjY29yZGluZ2x5LlxyXG5cdGZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpIHtcclxuICAgIGNvbnNvbGUubG9nKHdpbmRvdy5pbm5lcldpZHRoKTtcclxuXHRcdGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG5cdFx0Y2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIChjYW52YXMud2lkdGggPD0gNzY4ID8gNTAgOiAxMDUpO1xyXG5cdH1cclxuXHJcblx0aW5pdGlhbGl6ZSgpO1xyXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcclxuXHJcbiAgdmFyIHRhbGx5ID0gMDtcclxuICB2YXIgZGlyZWN0aW9uID0gdHJ1ZTtcclxuXHJcbiAgZnVuY3Rpb24gZHJhdygpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgIGZvciAodmFyIGkgaW4gc2hvdHMpIHtcclxuICAgICAgaWYgKHNob3RzW2ldLmxpZmVzcGFuIDw9IDApIHtcclxuICAgICAgICBkZWxldGUgc2hvdHNbaV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2hvdHNbaV0ubW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGkgaW4gYXN0ZXJvaWRzKSB7XHJcbiAgICAgIGFzdGVyb2lkc1tpXS5tb3ZlKCk7XHJcbiAgICB9XHJcbiAgICBmb3IgKGkgaW4gcG93ZXJ1cHMpIHtcclxuICAgICAgcG93ZXJ1cHNbaV0ubW92ZSgpO1xyXG4gICAgfVxyXG4gICAgZm9yIChpIGluIGV4cGxvc2lvbnMpIHtcclxuICAgICAgaWYgKGV4cGxvc2lvbnNbaV0ubGlmZXNwYW4gPD0gMCkge1xyXG4gICAgICAgIGRlbGV0ZSBleHBsb3Npb25zW2ldO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGV4cGxvc2lvbnNbaV0ubW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBldmFsdWF0ZUtleXMoKTtcclxuICAgIGlmICgkc2NvcGUucGxheWluZykge1xyXG4gICAgICBzcGFjZXNoaXAubW92ZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIGdyYWRpZW50ID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIDAsIGNhbnZhcy53aWR0aCwgMCk7XHJcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgnMCcsICdyZ2IoJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCcwLjI1JywgJ3JnYignICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigyNTYgLSAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnKScpO1xyXG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoJzAuNScsICdyZ2IoJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMCArIDI1NiAqIHRhbGx5IC8gMTAwKSArICcsJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKCcwLjc1JywgJ3JnYignICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigyNTYgLSAyNTYgKiB0YWxseSAvIDEwMCkgKyAnLCcgKyBNYXRoLmZsb29yKDAgKyAyNTYgKiB0YWxseSAvIDEwMCkgKyAnKScpO1xyXG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoJzEuMCcsICdyZ2IoJyArIE1hdGguZmxvb3IoMjU2IC0gMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJywnICsgTWF0aC5mbG9vcigwICsgMjU2ICogdGFsbHkgLyAxMDApICsgJyknKTtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9IGdyYWRpZW50O1xyXG4gICAgICBjdHguZm9udD0nNjBweCBNb25vdG9uJztcclxuICAgICAgY3R4LmZpbGxUZXh0KCdBc3Rlcm9pZHMnLCBjYW52YXMud2lkdGggLyAyIC0gY3R4Lm1lYXN1cmVUZXh0KCdBc3Rlcm9pZHMnKS53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyKTtcclxuICAgICAgY3R4LmZvbnQ9JzIwcHggQWxkcmljaCc7XHJcbiAgICAgIGN0eC5maWxsVGV4dCgnUHJlc3Mgc3BhY2UgdG8gc3RhcnQnLCBjYW52YXMud2lkdGggLyAyIC0gY3R4Lm1lYXN1cmVUZXh0KCdQcmVzcyBzcGFjZSB0byBzdGFydCcpLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAvIDIgKyAyMCk7XHJcbiAgICAgIGN0eC5maWxsVGV4dCgnRGVzaWduZWQgYW5kIGRldmVsb3BlZCBieSBMYXVyZW50IERlYmFja2VyJywgY2FudmFzLndpZHRoIC8gMiAtIGN0eC5tZWFzdXJlVGV4dCgnRGVzaWduZWQgYW5kIGRldmVsb3BlZCBieSBMYXVyZW50IERlYmFja2VyJykud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC0gMzApO1xyXG4gICAgfVxyXG4gICAgdGFsbHkgKz0gZGlyZWN0aW9uID8gMSA6IC0xO1xyXG4gICAgaWYgKHRhbGx5ID4gMTAwKSB7XHJcbiAgICAgIHRhbGx5ID0gMTAwO1xyXG4gICAgICBkaXJlY3Rpb24gPSBmYWxzZTtcclxuICAgIH0gZWxzZSBpZiAodGFsbHkgPCAwKSB7XHJcbiAgICAgIHRhbGx5ID0gMDtcclxuICAgICAgZGlyZWN0aW9uID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcclxuICB9XHJcblxyXG4gICRzY29wZS5zcGFjZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYmFja2dyb3VuZEltYWdlOiAndXJsKFwiYXN0ZXJvaWRzL3NwYWNlJyArIHNwYWNlICsgJy5qcGdcIiknXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG5cclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0J1YmJsZXNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xyXG5cclxuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1YmJsZXMtcGFnZScpO1xyXG4gIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICB2YXIgYnViYmxlcyA9IFtdO1xyXG4gIHZhciBjb2xvcnMgPSBbJyNmZmMzMDAnLCcjZmY1NzMzJywnI2M3MDAzOScsJyM5MDBjM2UnLCcjNTcxODQ1J107XHJcblxyXG4gIGZ1bmN0aW9uIEJ1YmJsZSgpIHtcclxuICAgIHRoaXMubGlmZXNwYW4gPSAwO1xyXG4gICAgdGhpcy5yYWRpdXMgPSAxO1xyXG4gICAgdGhpcy5leHBhbmRpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5zcGVlZCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDMpO1xyXG4gICAgdGhpcy5jaXJjdW1mZXJlbmNlID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNTApICsgNTtcclxuICAgIHRoaXMubWF4UmFkaXVzID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMjAwKSArIDIwO1xyXG4gICAgdGhpcy54ID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogY2FudmFzLndpZHRoKTtcclxuICAgIHRoaXMueSA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgdGhpcy52eCA9IChNYXRoLnJhbmRvbSgpID49IDAuNSA/IDEgOiAtMSk7XHJcbiAgICB0aGlzLnZ5ID0gKE1hdGgucmFuZG9tKCkgPj0gMC41ID8gMSA6IC0xKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICBidWJibGVzLmZvckVhY2goZnVuY3Rpb24oYnViYmxlKSB7XHJcbiAgICAgIHZhciBjb2xvciA9IGNvbG9yc1tNYXRoLnJvdW5kKGNvbG9ycy5sZW5ndGggKiBidWJibGUucmFkaXVzIC8gYnViYmxlLm1heFJhZGl1cyldO1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5hcmMoYnViYmxlLngsIGJ1YmJsZS55LCBidWJibGUucmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcnNbTWF0aC5yb3VuZChjb2xvcnMubGVuZ3RoICogYnViYmxlLnJhZGl1cyAvIGJ1YmJsZS5tYXhSYWRpdXMpXTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3JzW2NvbG9ycy5sZW5ndGggLSBNYXRoLnJvdW5kKGNvbG9ycy5sZW5ndGggKiBidWJibGUucmFkaXVzIC8gYnViYmxlLm1heFJhZGl1cyldO1xyXG4gICAgICBjdHgubGluZVdpZHRoID0gYnViYmxlLmNpcmN1bWZlcmVuY2UgKiBidWJibGUucmFkaXVzIC8gYnViYmxlLm1heFJhZGl1cztcclxuICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmaWx0ZXJCdWJibGVzKCkge1xyXG4gICAgYnViYmxlcy5wdXNoKG5ldyBCdWJibGUoKSk7XHJcbiAgICBidWJibGVzID0gYnViYmxlcy5maWx0ZXIoZnVuY3Rpb24gKGJ1YmJsZSkge1xyXG4gICAgICBpZiAoYnViYmxlLnJhZGl1cyA9PT0gYnViYmxlLm1heFJhZGl1cykge1xyXG4gICAgICAgIGJ1YmJsZS5leHBhbmRpbmcgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBidWJibGUueCArPSBidWJibGUudnggKiBidWJibGUuc3BlZWQ7XHJcbiAgICAgIGJ1YmJsZS55ICs9IGJ1YmJsZS52eSAqIGJ1YmJsZS5zcGVlZDtcclxuICAgICAgYnViYmxlLnJhZGl1cyArPSAoYnViYmxlLmV4cGFuZGluZyA/IDEgOiAtMSk7XHJcbiAgICAgIHJldHVybiBidWJibGUucmFkaXVzID4gMDtcclxuICAgIH0pO1xyXG4gICAgZHJhdygpO1xyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZpbHRlckJ1YmJsZXMpO1xyXG4gIH1cclxuXHJcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZpbHRlckJ1YmJsZXMpO1xyXG5cclxuXHJcblx0KGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdC8vIFN0YXJ0IGxpc3RlbmluZyB0byByZXNpemUgZXZlbnRzIGFuZFxyXG5cdFx0Ly8gZHJhdyBjYW52YXMuXHJcblx0XHRpbml0aWFsaXplKCk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcclxuXHRcdFx0Ly8gUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXIgdG9cclxuXHRcdFx0Ly8gY2FsbCB0aGUgcmVzaXplQ2FudmFzKCkgZnVuY3Rpb24gZWFjaCB0aW1lXHJcblx0XHRcdC8vIHRoZSB3aW5kb3cgaXMgcmVzaXplZC5cclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUNhbnZhcywgZmFsc2UpO1xyXG5cclxuXHRcdFx0Ly8gRHJhdyBjYW52YXMgYm9yZGVyIGZvciB0aGUgZmlyc3QgdGltZS5cclxuXHRcdFx0cmVzaXplQ2FudmFzKCk7XHJcblx0XHR9XHJcblx0XHQvLyBSdW5zIGVhY2ggdGltZSB0aGUgRE9NIHdpbmRvdyByZXNpemUgZXZlbnQgZmlyZXMuXHJcblx0XHQvLyBSZXNldHMgdGhlIGNhbnZhcyBkaW1lbnNpb25zIHRvIG1hdGNoIHdpbmRvdyxcclxuXHRcdC8vIHRoZW4gZHJhd3MgdGhlIG5ldyBib3JkZXJzIGFjY29yZGluZ2x5LlxyXG5cdFx0ZnVuY3Rpb24gcmVzaXplQ2FudmFzKCkge1xyXG5cdFx0XHRjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHRcdFx0Y2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIChjYW52YXMud2lkdGggPD0gNzY4ID8gNTUgOiAxMTEpO1xyXG5cdFx0fVxyXG5cclxuXHR9KSgpO1xyXG5cclxuXHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0NoYXJhZGVzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuXHQkc2NvcGUuc2VsZWN0V29yZCA9IGNhdGVnb3J5ID0+IHtcclxuXHRcdCRzY29wZS53b3JkID1cclxuXHRcdFx0JHNjb3BlLmNoYXJhZGVzW2NhdGVnb3J5XVtcclxuXHRcdFx0XHRNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAkc2NvcGUuY2hhcmFkZXNbY2F0ZWdvcnldLmxlbmd0aClcclxuXHRcdFx0XTtcclxuXHRcdGNvbnNvbGUubG9nKCRzY29wZS53b3JkKTtcclxuXHR9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdDb250YWN0Q3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEVtYWlsU3ZjKSB7XHJcblxyXG4gICRzY29wZS5vcHRpb25zID0gW1xyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIlNwYW1cIixcclxuICAgICAgdGV4dDogXCJJIGFtIGEgc3BhbSBib3QgYW5kIGF1dG9tYXRpY2FsbHkgY2hlY2sgdGhlIGZpcnN0IG9wdGlvbiBJIGZpbmQhXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiT3Bwb3J0dW5pdGl5XCIsXHJcbiAgICAgIHRleHQ6IFwiWW91IHNlZW0gdG8gaGF2ZSB0aGUgc2tpbGxzIEkgc2VlaywgSSdkIGxpa2UgdG8gdGFsayBhYm91dCBzb21lIG9wcG9ydHVuaXRpZXMuXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiUmVzdW1lXCIsXHJcbiAgICAgIHRleHQ6IFwiSSBkaWcgdGhlIHJlc3VtZSwgaG93IGRpZCB5b3UgbWFrZSBpdD9cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJPdGhlclwiLFxyXG4gICAgICB0ZXh0OiBcIlN1bXRpbiBlbHNlIVwiXHJcbiAgICB9XHJcblxyXG4gIF07XHJcblxyXG4gICRzY29wZS5jb250YWN0ID0ge1xyXG4gICAgZW1haWw6IFwiXCIsXHJcbiAgICBuYW1lOiBcIlwiLFxyXG4gICAgcGhvbmU6IFwiXCIsXHJcbiAgICBhYm91dDogXCJcIixcclxuICAgIG1lc3NhZ2U6IFwiXCJcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VuZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLnNlbmRpbmcgPSB0cnVlO1xyXG4gICAgY29uc29sZS5sb2coJ2hlcmUnKTtcclxuICAgIEVtYWlsU3ZjLnNlbmQoe1xyXG4gICAgICBcImVtYWlsXCI6ICRzY29wZS5jb250YWN0LmVtYWlsLFxyXG4gICAgICBcIm5hbWVcIjogJHNjb3BlLmNvbnRhY3QubmFtZSxcclxuICAgICAgXCJwaG9uZVwiOiAgJHNjb3BlLmNvbnRhY3QucGhvbmUsXHJcbiAgICAgIFwiYWJvdXRcIjogJHNjb3BlLmNvbnRhY3QuYWJvdXQsXHJcbiAgICAgIFwibWVzc2FnZVwiOiAkc2NvcGUuY29udGFjdC5tZXNzYWdlXHJcbiAgICB9KVxyXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgJHNjb3BlLnNlbnQgPSB0cnVlO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlNVQ0NFU1MuIHN0YXR1cz0lZCwgdGV4dD0lc1wiLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnRleHQpO1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XHJcbiAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgJHNjb3BlLnNlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgY29uc29sZS5sb2coXCJGQUlMRUQuIGVycm9yPVwiLCBlcnIpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0V4cGVyaWVuY2VDdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xyXG5cclxuICAkc2NvcGUuZ2V0U2tpbGwgPSBmdW5jdGlvbihza2lsbENvZGUpIHtcclxuICAgIGlmICghJHNjb3BlLnNraWxscykgcmV0dXJuO1xyXG4gICAgcmV0dXJuICRzY29wZS5za2lsbHMuZmluZChmdW5jdGlvbihza2lsbCkge1xyXG4gICAgICByZXR1cm4gc2tpbGwuY29kZSA9PT0gc2tpbGxDb2RlO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0hvYmJpZXNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJHdpbmRvdykge1xyXG5cclxuICAkc2NvcGUuaG9iYnlTZWxlY3RvclZpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgJC5nZXRKU09OKCdodHRwczovL3d3dy5yZWRkaXQuY29tL3VzZXIvYmVsZ29jYW5hZGlhbi9hYm91dC8uanNvbicsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgLy9jb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdGVkSG9iYnkgPSAkc2NvcGUuaG9iYmllc1swXTtcclxuXHJcbiAgJHNjb3BlLnNlbGVjdEhvYmJ5ID0gZnVuY3Rpb24gKGhvYmJ5KSB7XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRIb2JieSA9IGhvYmJ5O1xyXG4gICAgJHNjb3BlLmhvYmJ5U2VsZWN0b3JWaXNpYmxlID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNob3dIb2JieSA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICBpZiAoIXZhbHVlLmltYWdlcykgcmV0dXJuIGZhbHNlO1xyXG4gICAgcmV0dXJuIHZhbHVlLmltYWdlcy5sZW5ndGggPiAwO1xyXG4gIH07XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0xlbW1pbmdzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEdhbWVTdmMpIHtcclxuXHJcbiAgdmFyIExFRlQgPSAwO1xyXG4gIHZhciBSSUdIVCA9IDE7XHJcblxyXG4gIHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGVtbWluZ3MtcGFnZScpO1xyXG4gIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICB2YXIgbGVtbWluZ3NJbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gIGxlbW1pbmdzSW1hZ2Uuc3JjID0gJ2xlbW1pbmdzL2xlbW1pbmdzLnBuZyc7XHJcbiAgdmFyIGRlY29ySW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICBkZWNvckltYWdlLnNyYyA9ICdsZW1taW5ncy9kZWNvci5wbmcnO1xyXG4gIHZhciBsZW1taW5ncyA9IHt9O1xyXG4gIHZhciBzdGFydGVkID0gZmFsc2U7XHJcblxyXG4gIHZhciBhY3Rpb25zID0ge1xyXG4gICAgd2Fsazoge1xyXG4gICAgICBzdGFydDogWzAsIDBdLFxyXG4gICAgICBlbmQ6IFszMjAsIDIwXSxcclxuICAgICAgY29sdW1uczogOCxcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBodWg6IHtcclxuICAgICAgc3RhcnQ6IFszMjAsIDBdLFxyXG4gICAgICBlbmQ6IFs2NDAsIDIwXSxcclxuICAgICAgY29sdW1uczogOCxcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogdHJ1ZVxyXG4gICAgfSxcclxuICAgIGZhbGw6IHtcclxuICAgICAgc3RhcnQ6IFswLCA4MF0sXHJcbiAgICAgIGVuZDogWzE2MCwgMTAwXSxcclxuICAgICAgY29sdW1uczogNCxcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBmbHk6IHtcclxuICAgICAgc3RhcnQ6IFsxNjAsIDgwXSxcclxuICAgICAgZW5kOiBbNDgwLCAxMTBdLFxyXG4gICAgICBjb2x1bW5zOiA4LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHN0b3A6IHtcclxuICAgICAgc3RhcnQ6IFswLCAxMjBdLFxyXG4gICAgICBlbmQ6IFs2NDAsIDE0MF0sXHJcbiAgICAgIGNvbHVtbnM6IDE2LFxyXG4gICAgICByb3dzOiAxLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGNsaW1iOiB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMTYwXSxcclxuICAgICAgZW5kOiBbNjQwLCAxODVdLFxyXG4gICAgICBjb2x1bW5zOiAxNixcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICBidWlsZDoge1xyXG4gICAgICBzdGFydDogWzAsIDIwMF0sXHJcbiAgICAgIGVuZDogWzY0MCwgMjI1XSxcclxuICAgICAgY29sdW1uczogMTYsXHJcbiAgICAgIHJvd3M6IDEsXHJcbiAgICAgIHJldmVyc2U6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgcHVuY2g6IHtcclxuICAgICAgc3RhcnQ6IFswLCAyNDBdLFxyXG4gICAgICBlbmQ6IFs2NDAsIDMwMF0sXHJcbiAgICAgIGNvbHVtbnM6IDE2LFxyXG4gICAgICByb3dzOiAyLFxyXG4gICAgICByZXZlcnNlOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIGRpZzoge1xyXG4gICAgICBzdGFydDogWzAsIDMyMF0sXHJcbiAgICAgIGVuZDogWzMyMCwgMzQ1XSxcclxuICAgICAgY29sdW1uczogOCxcclxuICAgICAgcm93czogMSxcclxuICAgICAgcmV2ZXJzZTogZmFsc2VcclxuICAgIH0sXHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gTGVtbWluZyhpbml0KSB7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChjYW52YXMud2lkdGggLSAyMDApKSArIDEwMCwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGNhbnZhcy5oZWlnaHQgLSAyMDApKSArIDEwMF07XHJcbiAgICB0aGlzLmRpcmVjdGlvbiA9IE1hdGgucmFuZG9tKCkgKiAyID4gMSA/IExFRlQgOiBSSUdIVDtcclxuICAgIHRoaXMuYWN0ID0gZnVuY3Rpb24oYWN0aW9uKSB7XHJcbiAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uc1thY3Rpb25dO1xyXG4gICAgICB0aGlzLmN5Y2xlID0gMDtcclxuICAgICAgdGhpcy53aWR0aCA9ICh0aGlzLmFjdGlvbi5lbmRbMF0gLSB0aGlzLmFjdGlvbi5zdGFydFswXSkgLyB0aGlzLmFjdGlvbi5jb2x1bW5zO1xyXG4gICAgICB0aGlzLmhlaWdodCA9ICh0aGlzLmFjdGlvbi5lbmRbMV0gLSB0aGlzLmFjdGlvbi5zdGFydFsxXSAtICgyMCAqICh0aGlzLmFjdGlvbi5yb3dzIC0gMSkpKSAvIHRoaXMuYWN0aW9uLnJvd3M7XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICB0aGlzLmFjdChpbml0KTtcclxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMucG9zaXRpb25bMF0sIHRoaXMucG9zaXRpb25bMV0pO1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMud2lkdGggLyAyLCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09IExFRlQpIHtcclxuICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBjb2x1bW4gPSB0aGlzLmN5Y2xlICUgdGhpcy5hY3Rpb24uY29sdW1ucztcclxuICAgICAgdmFyIHJvdyA9IE1hdGguZmxvb3IodGhpcy5jeWNsZSAvIHRoaXMuYWN0aW9uLmNvbHVtbnMpO1xyXG4gICAgICBjdHguZHJhd0ltYWdlKGxlbW1pbmdzSW1hZ2UsICh0aGlzLndpZHRoICogY29sdW1uKSArIHRoaXMuYWN0aW9uLnN0YXJ0WzBdLCAoKHRoaXMuaGVpZ2h0ICsgMjApICogcm93KSArIHRoaXMuYWN0aW9uLnN0YXJ0WzFdLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgMCwgMCwgdGhpcy53aWR0aCAqIDIsIHRoaXMuaGVpZ2h0ICogMik7XHJcbiAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgIGlmICh0aGlzLmFjdGlvbi5yZXZlcnNlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlKys7XHJcbiAgICAgICAgICBpZiAodGhpcy5jeWNsZSA+PSB0aGlzLmFjdGlvbi5jb2x1bW5zICogdGhpcy5hY3Rpb24ucm93cykge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbiA9ICF0aGlzLmFuaW1hdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5jeWNsZS0tO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlLS07XHJcbiAgICAgICAgICBpZiAodGhpcy5jeWNsZSA8IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSAhdGhpcy5hbmltYXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuY3ljbGUgPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmN5Y2xlKys7XHJcbiAgICAgICAgaWYgKHRoaXMuY3ljbGUgPj0gdGhpcy5hY3Rpb24uY29sdW1ucyAqIHRoaXMuYWN0aW9uLnJvd3MpIHtcclxuICAgICAgICAgIHRoaXMuY3ljbGUgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEhhdGNoKCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IFsyMCwgMjBdO1xyXG4gICAgdGhpcy5hY3Rpb24gPSB7XHJcbiAgICAgIHN0YXJ0OiBbMCwgMF0sXHJcbiAgICAgIGVuZDogWzgyLCA1MDBdLFxyXG4gICAgICBjb2x1bW5zOiAxLFxyXG4gICAgICByb3dzOiAxMFxyXG4gICAgfVxyXG4gICAgdGhpcy53aWR0aCA9ICh0aGlzLmFjdGlvbi5lbmRbMF0gLSB0aGlzLmFjdGlvbi5zdGFydFswXSkgLyB0aGlzLmFjdGlvbi5jb2x1bW5zO1xyXG4gICAgdGhpcy5oZWlnaHQgPSAodGhpcy5hY3Rpb24uZW5kWzFdIC0gdGhpcy5hY3Rpb24uc3RhcnRbMV0pIC8gdGhpcy5hY3Rpb24ucm93cztcclxuICAgIHRoaXMuY3ljbGUgPSAwO1xyXG4gICAgdGhpcy5vcGVuID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgIGN0eC50cmFuc2xhdGUodGhpcy5wb3NpdGlvblswXSwgdGhpcy5wb3NpdGlvblsxXSk7XHJcbiAgICAgIGN0eC50cmFuc2xhdGUodGhpcy53aWR0aCAvIDIsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgIHZhciBjb2x1bW4sIHJvdztcclxuICAgICAgaWYgKHN0YXJ0ZWQpIHtcclxuICAgICAgICBjb2x1bW4gPSB0aGlzLmN5Y2xlICUgdGhpcy5hY3Rpb24uY29sdW1ucztcclxuICAgICAgICByb3cgPSBNYXRoLmZsb29yKHRoaXMuY3ljbGUgLyB0aGlzLmFjdGlvbi5jb2x1bW5zKTtcclxuICAgICAgICBpZiAodGhpcy5jeWNsZSA8IDkpIHtcclxuICAgICAgICAgIHRoaXMuY3ljbGUrKztcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29sdW1uID0gMDtcclxuICAgICAgICByb3cgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIGN0eC5kcmF3SW1hZ2UoZGVjb3JJbWFnZSwgKHRoaXMud2lkdGggKiBjb2x1bW4pICsgdGhpcy5hY3Rpb24uc3RhcnRbMF0sICh0aGlzLmhlaWdodCAqIHJvdykgKyB0aGlzLmFjdGlvbi5zdGFydFsxXSAtIDEsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCAwLCAwLCB0aGlzLndpZHRoICogMiwgdGhpcy5oZWlnaHQgKiAyKTtcclxuICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNwYXduTGVtbWluZygpIHtcclxuICAgIE9iamVjdC5rZXlzKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oYWN0aW9uKSB7XHJcbiAgICAgIGxlbW1pbmdzW01hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCldID0gbmV3IExlbW1pbmcoYWN0aW9uKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblx0ZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcclxuXHRcdC8vIFJlZ2lzdGVyIGFuIGV2ZW50IGxpc3RlbmVyIHRvXHJcblx0XHQvLyBjYWxsIHRoZSByZXNpemVDYW52YXMoKSBmdW5jdGlvbiBlYWNoIHRpbWVcclxuXHRcdC8vIHRoZSB3aW5kb3cgaXMgcmVzaXplZC5cclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVDYW52YXMsIGZhbHNlKTtcclxuXHRcdC8vIERyYXcgY2FudmFzIGJvcmRlciBmb3IgdGhlIGZpcnN0IHRpbWUuXHJcblx0XHRyZXNpemVDYW52YXMoKTtcclxuXHR9XHJcblx0Ly8gUnVucyBlYWNoIHRpbWUgdGhlIERPTSB3aW5kb3cgcmVzaXplIGV2ZW50IGZpcmVzLlxyXG5cdC8vIFJlc2V0cyB0aGUgY2FudmFzIGRpbWVuc2lvbnMgdG8gbWF0Y2ggd2luZG93LFxyXG5cdC8vIHRoZW4gZHJhd3MgdGhlIG5ldyBib3JkZXJzIGFjY29yZGluZ2x5LlxyXG5cdGZ1bmN0aW9uIHJlc2l6ZUNhbnZhcygpIHtcclxuXHRcdGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG5cdFx0Y2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIChjYW52YXMud2lkdGggPD0gNzY4ID8gNTAgOiAxMDUpO1xyXG5cdH1cclxuXHJcblx0aW5pdGlhbGl6ZSgpO1xyXG4gIHNwYXduTGVtbWluZygpO1xyXG4gIGxldCBoYXRjaCA9IG5ldyBIYXRjaCgpXHJcbiAgZHJhdygpO1xyXG5cclxuICBmdW5jdGlvbiBkcmF3KCkge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgaWYgKCFzdGFydGVkKSB7XHJcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgY3R4LmZvbnQ9JzQwcHggTW9ub3Rvbic7XHJcbiAgICAgIGN0eC5saW5lV2lkdGggPSAnMTAnO1xyXG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnYmx1ZSc7XHJcbiAgICAgIGN0eC5yZWN0KDE1LCBjYW52YXMuaGVpZ2h0IC0gNDUsIGN0eC5tZWFzdXJlVGV4dCgnU3RhcnQnKS53aWR0aCArIDIwLCBjdHgubWVhc3VyZVRleHQoJ1N0YXJ0JykuaGVpZ2h0ICsgY2FudmFzLmhlaWdodCAtIDQ1KTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgY3R4LmZpbGxUZXh0KCdTdGFydCcsIDIwLCBjYW52YXMuaGVpZ2h0IC0gNTApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm9yICh2YXIgaSBpbiBsZW1taW5ncykge1xyXG4gICAgICAgIGxlbW1pbmdzW2ldLm1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGF0Y2gub3BlbigpO1xyXG4gICAgc3RhcnRlZCA9IHRydWU7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICBkcmF3KCk7XHJcbiAgICB9LCAxNTApO1xyXG4gIH1cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignTGlzdHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBDYXRlZ29yaWVzU3ZjKSB7XHJcblxyXG4gICRzY29wZS5zaG93Q2F0ZWdvcnkgPSB0cnVlO1xyXG5cclxuICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIENhdGVnb3JpZXNTdmMuZ2V0Q2F0ZWdvcmllcygpXHJcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgJHNjb3BlLmNhdGVnb3JpZXMgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAkc2NvcGUudGFza3MgPSBbXTtcclxuICAgICAgZm9yICh2YXIgaSBpbiAkc2NvcGUuY2F0ZWdvcmllcykge1xyXG4gICAgICAgIGZvciAodmFyIGogaW4gJHNjb3BlLmNhdGVnb3JpZXNbaV0udGFza3MpIHtcclxuICAgICAgICAgICRzY29wZS50YXNrcy5wdXNoKHtcclxuICAgICAgICAgICAgXCJjYXRlZ29yeVwiOiAkc2NvcGUuY2F0ZWdvcmllc1tpXS5uYW1lLFxyXG4gICAgICAgICAgICBcInRhc2tcIjogJHNjb3BlLmNhdGVnb3JpZXNbaV0udGFza3Nbal0ubmFtZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkgPSBmdW5jdGlvbihjYXRlZ29yeSkge1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkgPSBjYXRlZ29yeTtcclxuICAgICRzY29wZS5zZWxlY3RlZFRhc2tzID0gW107XHJcbiAgICAkc2NvcGUuc2VsZWN0YWJsZVRhc2tzID0gW107XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzKSB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RhYmxlVGFza3MucHVzaCgkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrc1tpXSk7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuc2hvd0NhdGVnb3J5ID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZW50ZXJlZENhdGVnb3J5ID0gJyc7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLm5ld0NhdGVnb3J5ID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XHJcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLmNhdGVnb3JpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKCRzY29wZS5jYXRlZ29yaWVzW2ldLm5hbWUgPT09IGNhdGVnb3J5KSB7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdENhdGVnb3J5KCRzY29wZS5jYXRlZ29yaWVzW2ldKTtcclxuICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghZm91bmQpIHtcclxuICAgICAgQ2F0ZWdvcmllc1N2Yy5hZGRDYXRlZ29yeSh7XHJcbiAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5XHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNhdGVnb3J5KSB7XHJcbiAgICAgICAgJHNjb3BlLmluaXQoKTtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgICRzY29wZS5lbnRlcmVkQ2F0ZWdvcnkgPSAnJztcclxuICB9O1xyXG5cclxuICAkc2NvcGUubmV3VGFzayA9IGZ1bmN0aW9uICh0YXNrKSB7XHJcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGkgaW4gJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MpIHtcclxuICAgICAgaWYgKCRzY29wZS5zZWxlY3RlZENhdGVnb3J5LnRhc2tzW2ldLm5hbWUgPT09IHRhc2spIHtcclxuICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdFRhc2soJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbaV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWZvdW5kKSB7XHJcbiAgICAgIENhdGVnb3JpZXNTdmMuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS5uYW1lLCB7XHJcbiAgICAgICAgdGFzazogdGFza1xyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRDYXRlZ29yeS50YXNrcy5wdXNoKHsgbmFtZTogdGFzayB9KTtcclxuICAgICAgICAkc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0ZWRUYXNrcywgJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3NbJHNjb3BlLnNlbGVjdGVkQ2F0ZWdvcnkudGFza3MubGVuZ3RoIC0gMV0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgICRzY29wZS5lbnRlcmVkVGFzayA9ICcnO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zZWxlY3RUYXNrID0gZnVuY3Rpb24gKHRhc2spIHtcclxuICAgICRzY29wZS5hZGRUYXNrKCRzY29wZS5zZWxlY3RlZFRhc2tzLCB0YXNrKTtcclxuICAgICRzY29wZS5yZW1vdmVUYXNrKCRzY29wZS5zZWxlY3RhYmxlVGFza3MsIHRhc2spO1xyXG4gICAgJHNjb3BlLmVudGVyZWRUYXNrID0gJyc7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnVuc2VsZWN0VGFzayA9IGZ1bmN0aW9uICh0YXNrKSB7XHJcbiAgICAkc2NvcGUuYWRkVGFzaygkc2NvcGUuc2VsZWN0YWJsZVRhc2tzLCB0YXNrKTtcclxuICAgICRzY29wZS5yZW1vdmVUYXNrKCRzY29wZS5zZWxlY3RlZFRhc2tzLCB0YXNrKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuYWRkVGFzayA9IGZ1bmN0aW9uKHRhc2tMaXN0LCB0YXNrKSB7XHJcbiAgICB0YXNrTGlzdC5wdXNoKHRhc2spO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5yZW1vdmVUYXNrID0gZnVuY3Rpb24odGFza0xpc3QsIHRhc2spIHtcclxuICAgIHRhc2tMaXN0LnNwbGljZSh0YXNrTGlzdC5pbmRleE9mKHRhc2spLCAxKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc3RhcnRQcmlvcml0aXppbmcgPSBmdW5jdGlvbigpIHtcclxuICAgIENhdGVnb3JpZXNTdmMuc2V0UHJpb3JpdHlMaXN0KCRzY29wZS5zZWxlY3RlZFRhc2tzKTtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvcHJpb3JpdGl6ZScpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZXRRdWVzdGlvbnMgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmICghJHNjb3BlLnNlbGVjdGVkVGFza3MpIHJldHVybiAnJztcclxuICAgIHZhciBjb3VudGVyID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAkc2NvcGUuc2VsZWN0ZWRUYXNrcy5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgIGNvdW50ZXIgKz0gaTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb3VudGVyO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJTdmMpIHtcclxuXHJcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgRmlyZWJhc2VVSSBXaWRnZXQgdXNpbmcgRmlyZWJhc2UuXHJcbiAgdmFyIHVpID0gbmV3IGZpcmViYXNldWkuYXV0aC5BdXRoVUkoZmlyZWJhc2UuYXV0aCgpKTtcclxuXHJcbiAgJHNjb3BlLiRvbignbG9nb3V0JywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgIHVpLnJlc2V0KCk7XHJcbiAgICBzdGFydFVJKCk7XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXJ0VUkoKSB7XHJcbiAgICB1aS5zdGFydCgnI2ZpcmViYXNldWktYXV0aC1jb250YWluZXInLCB7XHJcblxyXG4gICAgICBjYWxsYmFja3M6IHtcclxuICAgICAgICBzaWduSW5TdWNjZXNzOiBmdW5jdGlvbihjdXJyZW50VXNlciwgY3JlZGVudGlhbCwgcmVkaXJlY3RVcmwpIHtcclxuICAgICAgICAgIC8vIE5vIHJlZGlyZWN0LlxyXG4gICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLmdldElkVG9rZW4odHJ1ZSkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XHJcbiAgICAgICAgICAgIFVzZXJTdmMuYXV0aGVudGljYXRlKHtcclxuICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogY3VycmVudFVzZXIuZGlzcGxheU5hbWUsXHJcbiAgICAgICAgICAgICAgZW1haWw6IGN1cnJlbnRVc2VyLmVtYWlsLFxyXG4gICAgICAgICAgICAgIHBob3RvVVJMOiBjdXJyZW50VXNlci5waG90b1VSTCxcclxuICAgICAgICAgICAgICBlbWFpbFZlcmlmaWVkOiBjdXJyZW50VXNlci5lbWFpbFZlcmlmaWVkLFxyXG4gICAgICAgICAgICAgIGlkVG9rZW46IGlkVG9rZW5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICQoJyNtb2RhbC1sb2dpbicpLm1vZGFsKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICAgLy8kbG9jYXRpb24ucGF0aCgnLycpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdwb3B1cCcsIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdMb2dpbiBGYWlsZWQnLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FsZXJ0LWRhbmdlcidcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIC4uLlxyXG4gICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAgICAgLy8gSGFuZGxlIGVycm9yXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBzaWduSW5GYWlsdXJlIGNhbGxiYWNrIG11c3QgYmUgcHJvdmlkZWQgdG8gaGFuZGxlIG1lcmdlIGNvbmZsaWN0cyB3aGljaFxyXG4gICAgICAgIC8vIG9jY3VyIHdoZW4gYW4gZXhpc3RpbmcgY3JlZGVudGlhbCBpcyBsaW5rZWQgdG8gYW4gYW5vbnltb3VzIHVzZXIuXHJcbiAgICAgICAgc2lnbkluRmFpbHVyZTogZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAgIC8vIEZvciBtZXJnZSBjb25mbGljdHMsIHRoZSBlcnJvci5jb2RlIHdpbGwgYmVcclxuICAgICAgICAgIC8vICdmaXJlYmFzZXVpL2Fub255bW91cy11cGdyYWRlLW1lcmdlLWNvbmZsaWN0Jy5cclxuICAgICAgICAgIGlmIChlcnJvci5jb2RlICE9ICdmaXJlYmFzZXVpL2Fub255bW91cy11cGdyYWRlLW1lcmdlLWNvbmZsaWN0Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBUaGUgY3JlZGVudGlhbCB0aGUgdXNlciB0cmllZCB0byBzaWduIGluIHdpdGguXHJcbiAgICAgICAgICB2YXIgY3JlZCA9IGVycm9yLmNyZWRlbnRpYWw7XHJcbiAgICAgICAgICAvLyBDb3B5IGRhdGEgZnJvbSBhbm9ueW1vdXMgdXNlciB0byBwZXJtYW5lbnQgdXNlciBhbmQgZGVsZXRlIGFub255bW91c1xyXG4gICAgICAgICAgLy8gdXNlci5cclxuICAgICAgICAgIC8vIC4uLlxyXG4gICAgICAgICAgLy8gRmluaXNoIHNpZ24taW4gYWZ0ZXIgZGF0YSBpcyBjb3BpZWQuXHJcbiAgICAgICAgICByZXR1cm4gZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhDcmVkZW50aWFsKGNyZWQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdWlTaG93bjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAvLyBUaGUgd2lkZ2V0IGlzIHJlbmRlcmVkLlxyXG4gICAgICAgICAgLy8gSGlkZSB0aGUgbG9hZGVyLlxyXG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRlcicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBzaWduSW5TdWNjZXNzVXJsOiAnL2hvbWUnLFxyXG4gICAgICBzaWduSW5PcHRpb25zOiBbXHJcbiAgICAgICAgLy9maXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICAgIGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICAgIGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQsXHJcbiAgICAgIF0sXHJcblxyXG4gICAgICAvLyBXaWxsIHVzZSBwb3B1cCBmb3IgSURQIFByb3ZpZGVycyBzaWduLWluIGZsb3cgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCwgcmVkaXJlY3QuXHJcbiAgICAgIHNpZ25JbkZsb3c6ICdwb3B1cCcsXHJcbiAgICAgIC8vIE90aGVyIGNvbmZpZyBvcHRpb25zLi4uXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXJ0VUkoKTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRmaWx0ZXIsIFBvc3RzU3ZjKSB7XHJcblxyXG4gICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCRzY29wZS5wb3N0Qm9keSkge1xyXG4gICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xyXG4gICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChwb3N0KSB7XHJcbiAgICAgICAgJHNjb3BlLnBvc3RCb2R5ID0gbnVsbDtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgUG9zdHNTdmMuZmV0Y2goKVxyXG4gIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgJHNjb3BlLnBvc3RzID0gcmVzcG9uc2UuZGF0YTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLiRvbignd3M6bmV3X3Bvc3QnLCBmdW5jdGlvbiAoXywgcG9zdCkge1xyXG4gICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgIFBvc3RzU3ZjLmdldFBvc3QocG9zdClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgJHNjb3BlLnBvc3RzLnVuc2hpZnQocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdQcmlvcml0aXplQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgQ2F0ZWdvcmllc1N2Yykge1xyXG5cclxuICAkc2NvcGUucHJpb3JpdHlMaXN0ID0gQ2F0ZWdvcmllc1N2Yy5nZXRQcmlvcml0eUxpc3QoKTtcclxuXHJcbiAgaWYgKCEkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2xpc3RzJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uID0gMTtcclxuICAgICRzY29wZS5jdXJyZW50UXVlc3Rpb24gPSAxO1xyXG4gICAgJHNjb3BlLmRvbmUgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gICRzY29wZS5tYWtlQ2hvaWNlID0gZnVuY3Rpb24oY2hvaWNlKSB7XHJcbiAgICBmb3IgKHZhciBpIGluICRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgaWYgKCRzY29wZS5wcmlvcml0eUxpc3RbaV0uaWQgPT09ICRzY29wZS5zZWxlY3RlZFF1ZXN0aW9uKSB7XHJcbiAgICAgICAgJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgPSBjaG9pY2UgPT09IDEgPyAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmZpcnN0Q2hvaWNlIDogJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICgkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbiA9PT0gJHNjb3BlLmN1cnJlbnRRdWVzdGlvbikge1xyXG4gICAgICAkc2NvcGUuY3VycmVudFF1ZXN0aW9uID0gJHNjb3BlLmN1cnJlbnRRdWVzdGlvbiA9PT0gJHNjb3BlLnByaW9yaXR5TGlzdC5sZW5ndGggPyAxIDogJHNjb3BlLmN1cnJlbnRRdWVzdGlvbiArIDE7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbiA9ICRzY29wZS5jdXJyZW50UXVlc3Rpb247XHJcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcclxuICAgIGZvciAoaSBpbiAkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIGlmICgkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSA9PT0gJycpIHtcclxuICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghZm91bmQpIHtcclxuICAgICAgJCgnI3ByaW9yaXRpemVDaG9pY2VzJykuaGlkZSgzMDApO1xyXG4gICAgICAkc2NvcGUuZG9uZSA9IHRydWU7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmdldEJ1dHRvblZhbHVlID0gZnVuY3Rpb24oY2hvaWNlKSB7XHJcbiAgICBpZiAoISRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2NvcGUucHJpb3JpdHlMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICgkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmlkID09PSAkc2NvcGUuc2VsZWN0ZWRRdWVzdGlvbikge1xyXG4gICAgICAgIHJldHVybiBjaG9pY2UgPT09IDEgPyAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmZpcnN0Q2hvaWNlIDogJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5zZWNvbmRDaG9pY2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VsZWN0UXVlc3Rpb24gPSBmdW5jdGlvbihxdWVzdGlvbikge1xyXG4gICAgJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24gPSBxdWVzdGlvbjtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZ2V0RmlsdGVyZWRQcmlvcml0eUxpc3QgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmICghJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJHNjb3BlLnByaW9yaXR5TGlzdFxyXG4gICAgICAuc29ydChmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEuaWQtYi5pZDsgfSlcclxuICAgICAgLmZpbHRlcihmdW5jdGlvbihxdWVzdGlvbikgeyByZXR1cm4gcXVlc3Rpb24uY2hvaWNlICE9PSAnJyB8fCBxdWVzdGlvbi5pZCA9PT0gJHNjb3BlLmN1cnJlbnRRdWVzdGlvbjsgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmdldENob2ljZXNNYWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoISRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgdmFyIGNob2ljZXNNYWRlID0gMDtcclxuICAgIGZvciAodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgIT09ICcnKSB7XHJcbiAgICAgICAgY2hvaWNlc01hZGUrKztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNob2ljZXNNYWRlO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZXRCdXR0b25DbGFzcyA9IGZ1bmN0aW9uKGNob2ljZSkge1xyXG4gICAgaWYgKCEkc2NvcGUucHJpb3JpdHlMaXN0KSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgaW4gJHNjb3BlLnByaW9yaXR5TGlzdCkge1xyXG4gICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5pZCA9PT0gJHNjb3BlLnNlbGVjdGVkUXVlc3Rpb24pIHtcclxuICAgICAgICBpZiAoJHNjb3BlLnByaW9yaXR5TGlzdFtpXS5jaG9pY2UgPT09ICcnKSB7XHJcbiAgICAgICAgICByZXR1cm4gJ2J0bi1wcmltYXJ5JztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNob2ljZSA9PT0gMSkge1xyXG4gICAgICAgICAgcmV0dXJuICRzY29wZS5wcmlvcml0eUxpc3RbaV0uZmlyc3RDaG9pY2UgPT09ICRzY29wZS5wcmlvcml0eUxpc3RbaV0uY2hvaWNlID8gJ2J0bi1zdWNjZXNzJyA6ICdidG4tZGFuZ2VyJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuICRzY29wZS5wcmlvcml0eUxpc3RbaV0uc2Vjb25kQ2hvaWNlID09PSAkc2NvcGUucHJpb3JpdHlMaXN0W2ldLmNob2ljZSA/ICdidG4tc3VjY2VzcycgOiAnYnRuLWRhbmdlcic7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNob3dDaG9pY2VzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkKCcjcHJpb3JpdGl6ZUNob2ljZXMnKS5zaG93KDEwMDApO1xyXG4gICAgJCgnI3Jldmlld0Nob2ljZXMnKS5oaWRlKCk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmNoYXJ0Q2xpY2sgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgICBpZiAoICRzY29wZS5jaGFydCApIHtcclxuICAgICAgLy8gRGlmZmVyZW50IG1ldGhvZHMgZGVwZW5kaW5nIG9uIGNoYXJ0IHR5cGVcclxuICAgICAgLy9jb25zb2xlLmxvZyggJHNjb3BlLmNoYXJ0LmdldFBvaW50c0F0RXZlbnQoIGV2ZW50ICkgKTsgLy8gZm9yIFBvaW50c1xyXG4gICAgICBjb25zb2xlLmxvZyggJHNjb3BlLmNoYXJ0LmdldFNlZ21lbnRzQXRFdmVudCggZXZlbnQgKSApOyAvLyBmb3IgU2VnbWVudHNcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2hvd1Jlc3VsdHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAkc2NvcGUuZGF0YSA9IFtdO1xyXG4gICAgJHNjb3BlLm9wdGlvbnMgPSB7XHJcbiAgICAgIC8vIFNldHMgdGhlIGNoYXJ0IHRvIGJlIHJlc3BvbnNpdmVcclxuICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcclxuXHJcbiAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgd2Ugc2hvdWxkIHNob3cgYSBzdHJva2Ugb24gZWFjaCBzZWdtZW50XHJcbiAgICAgIHNlZ21lbnRTaG93U3Ryb2tlIDogdHJ1ZSxcclxuXHJcbiAgICAgIC8vU3RyaW5nIC0gVGhlIGNvbG91ciBvZiBlYWNoIHNlZ21lbnQgc3Ryb2tlXHJcbiAgICAgIHNlZ21lbnRTdHJva2VDb2xvciA6ICcjZmZmJyxcclxuXHJcbiAgICAgIC8vTnVtYmVyIC0gVGhlIHdpZHRoIG9mIGVhY2ggc2VnbWVudCBzdHJva2VcclxuICAgICAgc2VnbWVudFN0cm9rZVdpZHRoIDogMixcclxuXHJcbiAgICAgIC8vTnVtYmVyIC0gVGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGNoYXJ0IHRoYXQgd2UgY3V0IG91dCBvZiB0aGUgbWlkZGxlXHJcbiAgICAgIHBlcmNlbnRhZ2VJbm5lckN1dG91dCA6IDAsIC8vIFRoaXMgaXMgMCBmb3IgUGllIGNoYXJ0c1xyXG5cclxuICAgICAgLy9OdW1iZXIgLSBBbW91bnQgb2YgYW5pbWF0aW9uIHN0ZXBzXHJcbiAgICAgIGFuaW1hdGlvblN0ZXBzIDogMTAwLFxyXG5cclxuICAgICAgLy9TdHJpbmcgLSBBbmltYXRpb24gZWFzaW5nIGVmZmVjdFxyXG4gICAgICBhbmltYXRpb25FYXNpbmcgOiAnZWFzZU91dEJvdW5jZScsXHJcblxyXG4gICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgdGhlIHJvdGF0aW9uIG9mIHRoZSBEb3VnaG51dFxyXG4gICAgICBhbmltYXRlUm90YXRlIDogdHJ1ZSxcclxuXHJcbiAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgd2UgYW5pbWF0ZSBzY2FsaW5nIHRoZSBEb3VnaG51dCBmcm9tIHRoZSBjZW50cmVcclxuICAgICAgYW5pbWF0ZVNjYWxlIDogZmFsc2UsXHJcblxyXG4gICAgICAvL1N0cmluZyAtIEEgbGVnZW5kIHRlbXBsYXRlXHJcbiAgICAgIGxlZ2VuZFRlbXBsYXRlIDogJzxoMyBjbGFzcz1cInRjLWNoYXJ0LWpzLWxlZ2VuZFwiIHN0eWxlPVwicGFkZGluZzo1cHhcIj48JSBmb3IgKHZhciBpPTA7IGk8c2VnbWVudHMubGVuZ3RoOyBpKyspeyU+PGRpdiBjbGFzcz1cImxhYmVsXCIgc3R5bGU9XCJmbG9hdDpsZWZ0O21hcmdpbjo1cHg7YmFja2dyb3VuZC1jb2xvcjo8JT1zZWdtZW50c1tpXS5maWxsQ29sb3IlPlwiPjwlaWYoc2VnbWVudHNbaV0ubGFiZWwpeyU+PCU9c2VnbWVudHNbaV0ubGFiZWwlPjwlfSU+PC9kaXY+PCV9JT48L2gzPidcclxuICAgIH07XHJcbiAgICBmb3IgKHZhciBpIGluIENhdGVnb3JpZXNTdmMuY2hvaWNlcykge1xyXG4gICAgICBDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMgPSAwO1xyXG4gICAgICBmb3IgKHZhciBqIGluICRzY29wZS5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgICBpZiAoQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLm5hbWUgPT09ICRzY29wZS5wcmlvcml0eUxpc3Rbal0uY2hvaWNlKSB7XHJcbiAgICAgICAgICBDYXRlZ29yaWVzU3ZjLmNob2ljZXNbaV0udm90ZXMrKztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIENhdGVnb3JpZXNTdmMuY2hvaWNlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEudm90ZXMgPCBiLnZvdGVzOyB9KTtcclxuICAgIGZvciAoaSBpbiBDYXRlZ29yaWVzU3ZjLmNob2ljZXMpIHtcclxuICAgICAgJHNjb3BlLmRhdGEucHVzaCh7XHJcbiAgICAgICAgdmFsdWU6IENhdGVnb3JpZXNTdmMuY2hvaWNlc1tpXS52b3RlcyxcclxuICAgICAgICBsYWJlbDogQ2F0ZWdvcmllc1N2Yy5jaG9pY2VzW2ldLm5hbWVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAkKCcjcHJpb3JpdGl6ZVJlc3VsdCcpLmhpZGUoKTtcclxuICAgICQoJyNwcmlvcml0aXplQ2hvaWNlcycpLmhpZGUoKTtcclxuICAgICQoJyNwcmlvcml0eVJlc3VsdHMnKS5zaG93KDEwMDApO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdQcm9maWxlQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgVXNlclN2Yykge1xyXG5cclxuICBpZiAoISRzY29wZS5jdXJyZW50VXNlcikge1xyXG4gICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICB9IGVsc2Uge1xyXG4gICAgJCgnI3NleC1pbmRpY2F0b3InKS5vZmZzZXQoeyBsZWZ0OiAoJHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlci5zZXggLyAyMDAgKiAkKCcjc2V4Jykud2lkdGgoKSkgKyAkKCcjc2V4Jykub2Zmc2V0KCkubGVmdCB9KTtcclxuICAgICQoJyNpZGVudGl0eS1pbmRpY2F0b3InKS5vZmZzZXQoeyBsZWZ0OiAoJHNjb3BlLmN1cnJlbnRVc2VyLmdlbmRlci5pZGVudGl0eSAvIDIwMCAqICQoJyNpZGVudGl0eScpLndpZHRoKCkpICsgJCgnI2lkZW50aXR5Jykub2Zmc2V0KCkubGVmdCB9KTtcclxuICB9XHJcblxyXG4gICRzY29wZS5zZXhlcyA9IFtcclxuICAgICdNYWxlJyxcclxuICAgICdGdE0gTWFsZScsXHJcbiAgICAnSW50ZXJzZXgnLFxyXG4gICAgJ010RiBGZW1hbGUnLFxyXG4gICAgJ0ZlbWFsZSdcclxuICBdO1xyXG4gICRzY29wZS5pZGVudGl0aWVzID0gW1xyXG4gICAgJ01hbicsXHJcbiAgICAnQmlnZW5kZXInLFxyXG4gICAgJ1BhbmdlbmRlcicsXHJcbiAgICAnQWdlbmRlcicsXHJcbiAgICAnUG9seWdlbmRlcicsXHJcbiAgICAnR2VuZGVyZmx1aWQnLFxyXG4gICAgJ0dlbmRlcnF1ZWVyJyxcclxuICAgICdRdWVlcicsXHJcbiAgICAnV29tYW4nXHJcbiAgXTtcclxuXHJcbiAgJHNjb3BlLmRhdGVPcHRpb25zID0ge1xyXG4gICAgbWF4RGF0ZTogbmV3IERhdGUoKSxcclxuICAgIG1pbkRhdGU6IG5ldyBEYXRlKDE5MDAsIDEsIDEpLFxyXG4gICAgaW5pdERhdGU6IG5ldyBEYXRlKDIwMDAsIDEsIDEpLFxyXG4gICAgZGF0ZXBpY2tlck1vZGU6ICd5ZWFyJ1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5nZW5kZXIgPSBmdW5jdGlvbihhcnJheSwgcGVyY2VudGFnZSkge1xyXG4gICAgcmV0dXJuIGFycmF5W01hdGgucm91bmQocGVyY2VudGFnZSAvIDIwMCAqIChhcnJheS5sZW5ndGggLSAxKSldO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zdGFydFNsaWRlciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICB9O1xyXG4gICRzY29wZS5kcmFnU2xpZGVyID0gZnVuY3Rpb24oZXZlbnQsIHVpLCB0eXBlKSB7XHJcbiAgICAkc2NvcGUuY3VycmVudFVzZXIuZ2VuZGVyW3R5cGVdID0gTWF0aC5yb3VuZCgoJCgnIycgKyB0eXBlICsgJy1pbmRpY2F0b3InKS5vZmZzZXQoKS5sZWZ0IC0gJCgnIycgKyB0eXBlKS5vZmZzZXQoKS5sZWZ0KSAvICgkKCcjJyArIHR5cGUpLndpZHRoKCkgLSAkKCcjJyArIHR5cGUgKyAnLWluZGljYXRvcicpLndpZHRoKCkpICogMjAwKTtcclxuICAgICRzY29wZS4kYXBwbHkoKTtcclxuICB9O1xyXG4gICRzY29wZS5zdG9wU2xpZGVyID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gIH07XHJcblxyXG4gICRzY29wZS51c2VybmFtZVRvZ2dsZSA9IHRydWU7XHJcbiAgJHNjb3BlLnBhc3N3b3JkVG9nZ2xlID0gdHJ1ZTtcclxuXHJcbiAgJHNjb3BlLnRvZ2dsZVVzZXJuYW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkc2NvcGUudXNlcm5hbWVUb2dnbGUgPSAhJHNjb3BlLnVzZXJuYW1lVG9nZ2xlO1xyXG4gICAgJHNjb3BlLm5ld1VzZXJuYW1lID0gJHNjb3BlLmN1cnJlbnRVc2VyLnVzZXJuYW1lO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS50b2dnbGVQYXNzd29yZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLm5ld1Bhc3N3b3JkID0gbnVsbDtcclxuICAgICRzY29wZS5jb25maXJtUGFzc3dvcmQgPSBudWxsO1xyXG4gICAgJHNjb3BlLnBhc3N3b3JkVG9nZ2xlID0gISRzY29wZS5wYXNzd29yZFRvZ2dsZTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuY2hlY2tQYXNzd29yZCA9IGZ1bmN0aW9uIChwYXNzd29yZCkge1xyXG4gICAgaWYgKHBhc3N3b3JkKSB7XHJcbiAgICAgIHZhciB1c2VyID0gJHNjb3BlLmN1cnJlbnRVc2VyLl9pZDtcclxuICAgICAgVXNlclN2Yy5jaGVja1Bhc3N3b3JkKHVzZXIsIHBhc3N3b3JkKVxyXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUudG9nZ2xlUGFzc3dvcmQoKTtcclxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvcmlnaW5hbEJnID0gJChcIi5wYXNzd29yZFwiKS5jc3MoXCJiYWNrZ3JvdW5kQ29sb3JcIik7XHJcbiAgICAgICAgJChcIi5wYXNzd29yZFwiKS5hbmltYXRlKHsgYmFja2dyb3VuZENvbG9yOiBcIiNGRkI2QzFcIiB9LCAyMDApLmFuaW1hdGUoeyBiYWNrZ3JvdW5kQ29sb3I6IG9yaWdpbmFsQmcgfSwgMjAwKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24gKG9sZFBhc3N3b3JkLCBuZXdQYXNzd29yZCwgY29uZmlybVBhc3N3b3JkKSB7XHJcbiAgICBpZiAobmV3UGFzc3dvcmQpIHtcclxuICAgICAgaWYgKG5ld1Bhc3N3b3JkID09IGNvbmZpcm1QYXNzd29yZCkge1xyXG4gICAgICAgIHZhciB1c2VyID0gJHNjb3BlLmN1cnJlbnRVc2VyLl9pZDtcclxuICAgICAgICBVc2VyU3ZjLmNoYW5nZVBhc3N3b3JkKHVzZXIsIG9sZFBhc3N3b3JkLCBuZXdQYXNzd29yZClcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICRzY29wZS4kZW1pdCgncG9wdXAnLCB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdQYXNzd29yZCBDaGFuZ2VkJyxcclxuICAgICAgICAgICAgdHlwZTogJ2FsZXJ0LXN1Y2Nlc3MnXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgICRzY29wZS5vbGRQYXNzd29yZCA9IG51bGw7XHJcbiAgICAgICAgICAkc2NvcGUudG9nZ2xlUGFzc3dvcmQoKTtcclxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3BvcHVwJywge1xyXG4gICAgICAgICAgICBtZXNzYWdlOiAnUGFzc3dvcmQgQ2hhbmdlIEZhaWxlZCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdhbGVydC1kYW5nZXInXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgb3JpZ2luYWxCZyA9ICQoXCIucGFzc3dvcmRcIikuY3NzKFwiYmFja2dyb3VuZENvbG9yXCIpO1xyXG4gICAgICAgICQoXCIucGFzc3dvcmRcIikuYW5pbWF0ZSh7IGJhY2tncm91bmRDb2xvcjogXCIjRkZCNkMxXCIgfSwgMjAwKS5hbmltYXRlKHsgYmFja2dyb3VuZENvbG9yOiBvcmlnaW5hbEJnIH0sIDIwMCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkc2NvcGUuY2hhbmdlVXNlcm5hbWUgPSBmdW5jdGlvbiAodXNlcm5hbWUpIHtcclxuICAgICRzY29wZS4kZW1pdCgnbG9hZGluZycpO1xyXG4gICAgVXNlclN2Yy5jaGFuZ2VVc2VybmFtZSgkc2NvcGUuY3VycmVudFVzZXIuX2lkLCB1c2VybmFtZSlcclxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAkc2NvcGUuJGVtaXQoJ3VwZGF0ZScsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgJHNjb3BlLiRlbWl0KCdwb3B1cCcsIHtcclxuICAgICAgICBtZXNzYWdlOiB1c2VybmFtZSArICcgYWxyZWFkeSBpbiB1c2UnLFxyXG4gICAgICAgIHR5cGU6ICdhbGVydC1kYW5nZXInXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnVwZGF0ZVVzZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoJHNjb3BlLmN1cnJlbnRVc2VyKSB7ICBcclxuICAgICAgJHNjb3BlLiRlbWl0KCdsb2FkaW5nJyk7XHJcbiAgICAgIFVzZXJTdmMudXBkYXRlVXNlcigkc2NvcGUuY3VycmVudFVzZXIpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICRzY29wZS4kZW1pdCgndXBkYXRlJywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG5cclxuICAkc2NvcGUuJHdhdGNoKCdjdXJyZW50VXNlci5mbGFncy5sZW5ndGgnLCBmdW5jdGlvbihsZW5ndGgpIHtcclxuICAgICRzY29wZS51cGRhdGVVc2VyKCk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS5sb2FkQ291bnRyaWVzID0gZnVuY3Rpb24oJHF1ZXJ5KSB7XHJcbiAgICB2YXIgY291bnRyaWVzID0gW1xyXG4gICAgICB7IFwibmFtZVwiOiBcIkFuZG9ycmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hZFwiLCBcInRpZGJpdFwiOiBcIlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVW5pdGVkIEFyYWIgRW1pcmF0ZXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1hZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQWZnaGFuaXN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1hZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQW50aWd1YSBhbmQgQmFyYnVkYVwiLCBcImZsYWdcIjogXCJmbGFnLWFnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbmd1aWxsYVwiLCBcImZsYWdcIjogXCJmbGFnLWFpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbGJhbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYWxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFybWVuaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQW5nb2xhXCIsIFwiZmxhZ1wiOiBcImZsYWctYW9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFudGFyY3RpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1hcVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQXJnZW50aW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctYXJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFtZXJpY2FuIFNvbW9hXCIsIFwiZmxhZ1wiOiBcImZsYWctYXNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkF1c3RyaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1hdFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQXVzdHJhbGlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYXVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkFydWJhXCIsIFwiZmxhZ1wiOiBcImZsYWctYXdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIsOFbGFuZCBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctYXhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkF6ZXJiYWlqYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1helwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYVwiLCBcImZsYWdcIjogXCJmbGFnLWJhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCYXJiYWRvc1wiLCBcImZsYWdcIjogXCJmbGFnLWJiXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCYW5nbGFkZXNoXCIsIFwiZmxhZ1wiOiBcImZsYWctYmRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJlbGdpdW1cIiwgXCJmbGFnXCI6IFwiZmxhZy1iZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQnVya2luYSBGYXNvXCIsIFwiZmxhZ1wiOiBcImZsYWctYmZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJ1bGdhcmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctYmdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJhaHJhaW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1iaFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQnVydW5kaVwiLCBcImZsYWdcIjogXCJmbGFnLWJpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZW5pblwiLCBcImZsYWdcIjogXCJmbGFnLWJqXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBCYXJ0aMOpbGVteVwiLCBcImZsYWdcIjogXCJmbGFnLWJsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZXJtdWRhXCIsIFwiZmxhZ1wiOiBcImZsYWctYm1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJydW5laSBcIiwgXCJmbGFnXCI6IFwiZmxhZy1iblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm9saXZpYSwgUGx1cmluYXRpb25hbCBTdGF0ZSBvZlwiLCBcImZsYWdcIjogXCJmbGFnLWJvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCb25haXJlLCBTaW50IEV1c3RhdGl1cyBhbmQgU2FiYVwiLCBcImZsYWdcIjogXCJmbGFnLWJxXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCcmF6aWxcIiwgXCJmbGFnXCI6IFwiZmxhZy1iclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQmFoYW1hc1wiLCBcImZsYWdcIjogXCJmbGFnLWJzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCaHV0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1idFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm91dmV0IElzbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWJ2XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCb3Rzd2FuYVwiLCBcImZsYWdcIjogXCJmbGFnLWJ3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJCZWxhcnVzXCIsIFwiZmxhZ1wiOiBcImZsYWctYnlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJlbGl6ZVwiLCBcImZsYWdcIjogXCJmbGFnLWJ6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYW5hZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy1jYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29jb3MgKEtlZWxpbmcpIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1jY1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29uZ28sIHRoZSBEZW1vY3JhdGljIFJlcHVibGljIG9mIHRoZVwiLCBcImZsYWdcIjogXCJmbGFnLWNkXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDZW50cmFsIEFmcmljYW4gUmVwdWJsaWNcIiwgXCJmbGFnXCI6IFwiZmxhZy1jZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29uZ29cIiwgXCJmbGFnXCI6IFwiZmxhZy1jZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3dpdHplcmxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1jaFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ8O0dGUgZCdJdm9pcmVcIiwgXCJmbGFnXCI6IFwiZmxhZy1jaVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ29vayBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctY2tcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNoaWxlXCIsIFwiZmxhZ1wiOiBcImZsYWctY2xcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNhbWVyb29uXCIsIFwiZmxhZ1wiOiBcImZsYWctY21cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNoaW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctY25cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvbG9tYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctY29cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNvc3RhIFJpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy1jclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ3ViYVwiLCBcImZsYWdcIjogXCJmbGFnLWN1XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYWJvIFZlcmRlXCIsIFwiZmxhZ1wiOiBcImZsYWctY3ZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkN1cmHDp2FvXCIsIFwiZmxhZ1wiOiBcImZsYWctY3dcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNocmlzdG1hcyBJc2xhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1jeFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQ3lwcnVzXCIsIFwiZmxhZ1wiOiBcImZsYWctY3lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkN6ZWNoIFJlcHVibGljXCIsIFwiZmxhZ1wiOiBcImZsYWctY3pcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdlcm1hbnlcIiwgXCJmbGFnXCI6IFwiZmxhZy1kZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRGppYm91dGlcIiwgXCJmbGFnXCI6IFwiZmxhZy1kalwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRGVubWFya1wiLCBcImZsYWdcIjogXCJmbGFnLWRrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJEb21pbmljYVwiLCBcImZsYWdcIjogXCJmbGFnLWRtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJEb21pbmljYW4gUmVwdWJsaWNcIiwgXCJmbGFnXCI6IFwiZmxhZy1kb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQWxnZXJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWR6XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFY3VhZG9yXCIsIFwiZmxhZ1wiOiBcImZsYWctZWNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkVzdG9uaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1lZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRWd5cHRcIiwgXCJmbGFnXCI6IFwiZmxhZy1lZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiV2VzdGVybiBTYWhhcmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1laFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRXJpdHJlYVwiLCBcImZsYWdcIjogXCJmbGFnLWVyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTcGFpblwiLCBcImZsYWdcIjogXCJmbGFnLWVzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFdGhpb3BpYVwiLCBcImZsYWdcIjogXCJmbGFnLWV0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGaW5sYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctZmlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkZpamlcIiwgXCJmbGFnXCI6IFwiZmxhZy1malwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRmFsa2xhbmQgSXNsYW5kcyAoTWFsdmluYXMpXCIsIFwiZmxhZ1wiOiBcImZsYWctZmtcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1pY3JvbmVzaWEsIEZlZGVyYXRlZCBTdGF0ZXMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1mbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRmFyb2UgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWZvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJGcmFuY2VcIiwgXCJmbGFnXCI6IFwiZmxhZy1mclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR2Fib25cIiwgXCJmbGFnXCI6IFwiZmxhZy1nYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVW5pdGVkIEtpbmdkb20gb2YgR3JlYXQgQnJpdGFpbiBhbmQgTm9ydGhlcm4gSXJlbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWdiXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHcmVuYWRhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2RcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdlb3JnaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1nZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRnJlbmNoIEd1aWFuYVwiLCBcImZsYWdcIjogXCJmbGFnLWdmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdWVybnNleVwiLCBcImZsYWdcIjogXCJmbGFnLWdnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHaGFuYVwiLCBcImZsYWdcIjogXCJmbGFnLWdoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHaWJyYWx0YXJcIiwgXCJmbGFnXCI6IFwiZmxhZy1naVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3JlZW5sYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctZ2xcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkdhbWJpYVwiLCBcImZsYWdcIjogXCJmbGFnLWdtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdWluZWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1nblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3VhZGVsb3VwZVwiLCBcImZsYWdcIjogXCJmbGFnLWdwXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJFcXVhdG9yaWFsIEd1aW5lYVwiLCBcImZsYWdcIjogXCJmbGFnLWdxXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHcmVlY2VcIiwgXCJmbGFnXCI6IFwiZmxhZy1nclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU291dGggR2VvcmdpYSBhbmQgdGhlIFNvdXRoIFNhbmR3aWNoIElzbGFuZHNcIiwgXCJmbGFnXCI6IFwiZmxhZy1nc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3VhdGVtYWxhXCIsIFwiZmxhZ1wiOiBcImZsYWctZ3RcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkd1YW1cIiwgXCJmbGFnXCI6IFwiZmxhZy1ndVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiR3VpbmVhLUJpc3NhdVwiLCBcImZsYWdcIjogXCJmbGFnLWd3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJHdXlhbmFcIiwgXCJmbGFnXCI6IFwiZmxhZy1neVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSG9uZyBLb25nXCIsIFwiZmxhZ1wiOiBcImZsYWctaGtcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkhlYXJkIElzbGFuZCBhbmQgTWNEb25hbGQgSXNsYW5kc1wiLCBcImZsYWdcIjogXCJmbGFnLWhtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJIb25kdXJhc1wiLCBcImZsYWdcIjogXCJmbGFnLWhuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDcm9hdGlhXCIsIFwiZmxhZ1wiOiBcImZsYWctaHJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkhhaXRpXCIsIFwiZmxhZ1wiOiBcImZsYWctaHRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkh1bmdhcnlcIiwgXCJmbGFnXCI6IFwiZmxhZy1odVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSW5kb25lc2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctaWRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIklyZWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1pZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSXNyYWVsXCIsIFwiZmxhZ1wiOiBcImZsYWctaWxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIklzbGUgb2YgTWFuXCIsIFwiZmxhZ1wiOiBcImZsYWctaW1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkluZGlhXCIsIFwiZmxhZ1wiOiBcImZsYWctaW5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkJyaXRpc2ggSW5kaWFuIE9jZWFuIFRlcnJpdG9yeVwiLCBcImZsYWdcIjogXCJmbGFnLWlvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJcmFxXCIsIFwiZmxhZ1wiOiBcImZsYWctaXFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIklyYW4sIElzbGFtaWMgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1pclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSWNlbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLWlzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJJdGFseVwiLCBcImZsYWdcIjogXCJmbGFnLWl0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJKZXJzZXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1qZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSmFtYWljYVwiLCBcImZsYWdcIjogXCJmbGFnLWptXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJKb3JkYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1qb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSmFwYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1qcFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS2VueWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1rZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS3lyZ3l6c3RhblwiLCBcImZsYWdcIjogXCJmbGFnLWtnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDYW1ib2RpYVwiLCBcImZsYWdcIjogXCJmbGFnLWtoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLaXJpYmF0aVwiLCBcImZsYWdcIjogXCJmbGFnLWtpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJDb21vcm9zXCIsIFwiZmxhZ1wiOiBcImZsYWcta21cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNhaW50IEtpdHRzIGFuZCBOZXZpc1wiLCBcImZsYWdcIjogXCJmbGFnLWtuXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLb3JlYSwgRGVtb2NyYXRpYyBQZW9wbGUncyBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLWtwXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJLb3JlYSwgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1rclwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiS3V3YWl0XCIsIFwiZmxhZ1wiOiBcImZsYWcta3dcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNheW1hbiBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWcta3lcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkthemFraHN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1relwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGFvIFBlb3BsZSdzIERlbW9jcmF0aWMgUmVwdWJsaWNcIiwgXCJmbGFnXCI6IFwiZmxhZy1sYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGViYW5vblwiLCBcImZsYWdcIjogXCJmbGFnLWxiXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBMdWNpYVwiLCBcImZsYWdcIjogXCJmbGFnLWxjXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMaWVjaHRlbnN0ZWluXCIsIFwiZmxhZ1wiOiBcImZsYWctbGlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNyaSBMYW5rYVwiLCBcImZsYWdcIjogXCJmbGFnLWxrXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJMaWJlcmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbHJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxlc290aG9cIiwgXCJmbGFnXCI6IFwiZmxhZy1sc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGl0aHVhbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbHRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkx1eGVtYm91cmdcIiwgXCJmbGFnXCI6IFwiZmxhZy1sdVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTGF0dmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbHZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkxpYnlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbHlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vcm9jY29cIiwgXCJmbGFnXCI6IFwiZmxhZy1tYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTW9uYWNvXCIsIFwiZmxhZ1wiOiBcImZsYWctbWNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vbGRvdmEsIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctbWRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vbnRlbmVncm9cIiwgXCJmbGFnXCI6IFwiZmxhZy1tZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgTWFydGluIChGcmVuY2ggcGFydClcIiwgXCJmbGFnXCI6IFwiZmxhZy1tZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFkYWdhc2NhclwiLCBcImZsYWdcIjogXCJmbGFnLW1nXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYXJzaGFsbCBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctbWhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hY2Vkb25pYSwgdGhlIGZvcm1lciBZdWdvc2xhdiBSZXB1YmxpYyBvZlwiLCBcImZsYWdcIjogXCJmbGFnLW1rXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWxpXCIsIFwiZmxhZ1wiOiBcImZsYWctbWxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk15YW5tYXJcIiwgXCJmbGFnXCI6IFwiZmxhZy1tbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTW9uZ29saWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1tblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWFjYW9cIiwgXCJmbGFnXCI6IFwiZmxhZy1tb1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctbXBcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hcnRpbmlxdWVcIiwgXCJmbGFnXCI6IFwiZmxhZy1tcVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWF1cml0YW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLW1yXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNb250c2VycmF0XCIsIFwiZmxhZ1wiOiBcImZsYWctbXNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hbHRhXCIsIFwiZmxhZ1wiOiBcImZsYWctbXRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hdXJpdGl1c1wiLCBcImZsYWdcIjogXCJmbGFnLW11XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWxkaXZlc1wiLCBcImZsYWdcIjogXCJmbGFnLW12XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJNYWxhd2lcIiwgXCJmbGFnXCI6IFwiZmxhZy1td1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWV4aWNvXCIsIFwiZmxhZ1wiOiBcImZsYWctbXhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1hbGF5c2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctbXlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk1vemFtYmlxdWVcIiwgXCJmbGFnXCI6IFwiZmxhZy1telwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmFtaWJpYVwiLCBcImZsYWdcIjogXCJmbGFnLW5hXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOZXcgQ2FsZWRvbmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctbmNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5pZ2VyXCIsIFwiZmxhZ1wiOiBcImZsYWctbmVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5vcmZvbGsgSXNsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctbmZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5pZ2VyaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1uZ1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTmljYXJhZ3VhXCIsIFwiZmxhZ1wiOiBcImZsYWctbmlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5ldGhlcmxhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctbmxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5vcndheVwiLCBcImZsYWdcIjogXCJmbGFnLW5vXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOZXBhbFwiLCBcImZsYWdcIjogXCJmbGFnLW5wXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOYXVydVwiLCBcImZsYWdcIjogXCJmbGFnLW5yXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJOaXVlXCIsIFwiZmxhZ1wiOiBcImZsYWctbnVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk5ldyBaZWFsYW5kXCIsIFwiZmxhZ1wiOiBcImZsYWctbnpcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIk9tYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1vbVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGFuYW1hXCIsIFwiZmxhZ1wiOiBcImZsYWctcGFcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBlcnVcIiwgXCJmbGFnXCI6IFwiZmxhZy1wZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRnJlbmNoIFBvbHluZXNpYVwiLCBcImZsYWdcIjogXCJmbGFnLXBmXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJQYXB1YSBOZXcgR3VpbmVhXCIsIFwiZmxhZ1wiOiBcImZsYWctcGdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBoaWxpcHBpbmVzXCIsIFwiZmxhZ1wiOiBcImZsYWctcGhcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBha2lzdGFuXCIsIFwiZmxhZ1wiOiBcImZsYWctcGtcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBvbGFuZFwiLCBcImZsYWdcIjogXCJmbGFnLXBsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBQaWVycmUgYW5kIE1pcXVlbG9uXCIsIFwiZmxhZ1wiOiBcImZsYWctcG1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBpdGNhaXJuXCIsIFwiZmxhZ1wiOiBcImZsYWctcG5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlB1ZXJ0byBSaWNvXCIsIFwiZmxhZ1wiOiBcImZsYWctcHJcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlBhbGVzdGluZSwgU3RhdGUgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy1wc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUG9ydHVnYWxcIiwgXCJmbGFnXCI6IFwiZmxhZy1wdFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGFsYXVcIiwgXCJmbGFnXCI6IFwiZmxhZy1wd1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUGFyYWd1YXlcIiwgXCJmbGFnXCI6IFwiZmxhZy1weVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUWF0YXJcIiwgXCJmbGFnXCI6IFwiZmxhZy1xYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUsOpdW5pb25cIiwgXCJmbGFnXCI6IFwiZmxhZy1yZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUm9tYW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLXJvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTZXJiaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1yc1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiUnVzc2lhbiBGZWRlcmF0aW9uXCIsIFwiZmxhZ1wiOiBcImZsYWctcnVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlJ3YW5kYVwiLCBcImZsYWdcIjogXCJmbGFnLXJ3XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYXVkaSBBcmFiaWFcIiwgXCJmbGFnXCI6IFwiZmxhZy1zYVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU29sb21vbiBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctc2JcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNleWNoZWxsZXNcIiwgXCJmbGFnXCI6IFwiZmxhZy1zY1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3VkYW5cIiwgXCJmbGFnXCI6IFwiZmxhZy1zZFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU3dlZGVuXCIsIFwiZmxhZ1wiOiBcImZsYWctc2VcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNpbmdhcG9yZVwiLCBcImZsYWdcIjogXCJmbGFnLXNnXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYWludCBIZWxlbmEsIEFzY2Vuc2lvbiBhbmQgVHJpc3RhbiBkYSBDdW5oYVwiLCBcImZsYWdcIjogXCJmbGFnLXNoXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTbG92ZW5pYVwiLCBcImZsYWdcIjogXCJmbGFnLXNpXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTdmFsYmFyZCBhbmQgSmFuIE1heWVuXCIsIFwiZmxhZ1wiOiBcImZsYWctc2pcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNsb3Zha2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctc2tcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNpZXJyYSBMZW9uZVwiLCBcImZsYWdcIjogXCJmbGFnLXNsXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYW4gTWFyaW5vXCIsIFwiZmxhZ1wiOiBcImZsYWctc21cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlNlbmVnYWxcIiwgXCJmbGFnXCI6IFwiZmxhZy1zblwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU29tYWxpYVwiLCBcImZsYWdcIjogXCJmbGFnLXNvXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTdXJpbmFtZVwiLCBcImZsYWdcIjogXCJmbGFnLXNyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTb3V0aCBTdWRhblwiLCBcImZsYWdcIjogXCJmbGFnLXNzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTYW8gVG9tZSBhbmQgUHJpbmNpcGVcIiwgXCJmbGFnXCI6IFwiZmxhZy1zdFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRWwgU2FsdmFkb3JcIiwgXCJmbGFnXCI6IFwiZmxhZy1zdlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2ludCBNYWFydGVuIChEdXRjaCBwYXJ0KVwiLCBcImZsYWdcIjogXCJmbGFnLXN4XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTeXJpYW4gQXJhYiBSZXB1YmxpY1wiLCBcImZsYWdcIjogXCJmbGFnLXN5XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTd2F6aWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy1zelwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVHVya3MgYW5kIENhaWNvcyBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctdGNcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIkNoYWRcIiwgXCJmbGFnXCI6IFwiZmxhZy10ZFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiRnJlbmNoIFNvdXRoZXJuIFRlcnJpdG9yaWVzXCIsIFwiZmxhZ1wiOiBcImZsYWctdGZcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRvZ29cIiwgXCJmbGFnXCI6IFwiZmxhZy10Z1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVGhhaWxhbmRcIiwgXCJmbGFnXCI6IFwiZmxhZy10aFwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVGFqaWtpc3RhblwiLCBcImZsYWdcIjogXCJmbGFnLXRqXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUb2tlbGF1XCIsIFwiZmxhZ1wiOiBcImZsYWctdGtcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRpbW9yLUxlc3RlXCIsIFwiZmxhZ1wiOiBcImZsYWctdGxcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlR1cmttZW5pc3RhblwiLCBcImZsYWdcIjogXCJmbGFnLXRtXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUdW5pc2lhXCIsIFwiZmxhZ1wiOiBcImZsYWctdG5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRvbmdhXCIsIFwiZmxhZ1wiOiBcImZsYWctdG9cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlR1cmtleVwiLCBcImZsYWdcIjogXCJmbGFnLXRyXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUcmluaWRhZCBhbmQgVG9iYWdvXCIsIFwiZmxhZ1wiOiBcImZsYWctdHRcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlR1dmFsdVwiLCBcImZsYWdcIjogXCJmbGFnLXR2XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJUYWl3YW4sIFByb3ZpbmNlIG9mIENoaW5hXCIsIFwiZmxhZ1wiOiBcImZsYWctdHdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlRhbnphbmlhLCBVbml0ZWQgUmVwdWJsaWMgb2ZcIiwgXCJmbGFnXCI6IFwiZmxhZy10elwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVWtyYWluZVwiLCBcImZsYWdcIjogXCJmbGFnLXVhXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVZ2FuZGFcIiwgXCJmbGFnXCI6IFwiZmxhZy11Z1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVW5pdGVkIFN0YXRlcyBNaW5vciBPdXRseWluZyBJc2xhbmRzXCIsIFwiZmxhZ1wiOiBcImZsYWctdW1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYVwiLCBcImZsYWdcIjogXCJmbGFnLXVzXCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJVcnVndWF5XCIsIFwiZmxhZ1wiOiBcImZsYWctdXlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlV6YmVraXN0YW5cIiwgXCJmbGFnXCI6IFwiZmxhZy11elwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiSG9seSBTZWVcIiwgXCJmbGFnXCI6IFwiZmxhZy12YVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2FpbnQgVmluY2VudCBhbmQgdGhlIEdyZW5hZGluZXNcIiwgXCJmbGFnXCI6IFwiZmxhZy12Y1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiVmVuZXp1ZWxhLCBCb2xpdmFyaWFuIFJlcHVibGljIG9mXCIsIFwiZmxhZ1wiOiBcImZsYWctdmVcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlZpcmdpbiBJc2xhbmRzLCBCcml0aXNoXCIsIFwiZmxhZ1wiOiBcImZsYWctdmdcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlZpcmdpbiBJc2xhbmRzLCBVLlMuXCIsIFwiZmxhZ1wiOiBcImZsYWctdmlcIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlZpZXQgTmFtXCIsIFwiZmxhZ1wiOiBcImZsYWctdm5cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlZhbnVhdHVcIiwgXCJmbGFnXCI6IFwiZmxhZy12dVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiV2FsbGlzIGFuZCBGdXR1bmFcIiwgXCJmbGFnXCI6IFwiZmxhZy13ZlwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiU2Ftb2FcIiwgXCJmbGFnXCI6IFwiZmxhZy13c1wiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiWWVtZW5cIiwgXCJmbGFnXCI6IFwiZmxhZy15ZVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiTWF5b3R0ZVwiLCBcImZsYWdcIjogXCJmbGFnLXl0XCIgfSxcclxuICAgICAgeyBcIm5hbWVcIjogXCJTb3V0aCBBZnJpY2FcIiwgXCJmbGFnXCI6IFwiZmxhZy16YVwiIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiWmFtYmlhXCIsIFwiZmxhZ1wiOiBcImZsYWctem1cIiB9LFxyXG4gICAgICB7IFwibmFtZVwiOiBcIlppbWJhYndlXCIsIFwiZmxhZ1wiOiBcImZsYWctendcIiB9LFxyXG4gICAgXTtcclxuICAgIHJldHVybiBjb3VudHJpZXMuZmlsdGVyKGZ1bmN0aW9uKGNvdW50cnkpIHtcclxuICAgICAgcmV0dXJuIGNvdW50cnkubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJHF1ZXJ5LnRvTG93ZXJDYXNlKCkpICE9IC0xO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdTa2lsbHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJHdpbmRvdykge1xyXG5cclxuICAkc2NvcGUuc2VsZWN0ZWRTa2lsbCA9IDA7XHJcbiAgJHNjb3BlLnNraWxsc1Zpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgJHNjb3BlLmxhYmVscyA9IFtcIkRvd25sb2FkIFNhbGVzXCIsIFwiSW4tU3RvcmUgU2FsZXNcIiwgXCJNYWlsLU9yZGVyIFNhbGVzXCJdO1xyXG4gICRzY29wZS5kYXRhID0gWzMwMCwgNTAwLCAxMDBdO1xyXG5cclxuICAkLmdldEpTT04oJy9za2lsbHMuanNvbicsIGZ1bmN0aW9uKCBkYXRhICkge1xyXG4gICAgJHNjb3BlLnNraWxscyA9IGRhdGEuZmlsdGVyKGZ1bmN0aW9uKHNraWxsKSB7XHJcbiAgICAgIHJldHVybiBza2lsbC5lbmFibGVkO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLnNldFNlbGVjdGVkU2tpbGwgPSBmdW5jdGlvbiAoc2tpbGwpIHtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkU2tpbGwgPSBza2lsbDtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkU2tpbGwuY2hhcnRPcHRpb25zID0ge1xyXG4gICAgICAgIGN1dG91dFBlcmNlbnRhZ2UgOiA4MCxcclxuICAgICAgICBjaXJjdW1mZXJlbmNlOiAyICogTWF0aC5QSSxcclxuICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiB0cnVlLFxyXG4gICAgICAgIHRvb2x0aXBzOiB7XHJcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkU2tpbGwuY2hhcnRTdHlsZSA9IHtcclxuICAgICAgICAnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoL3NraWxscy8nICsgJHNjb3BlLnNlbGVjdGVkU2tpbGwuaW1hZ2UgKyAnKScsXHJcbiAgICAgICAgJ2JhY2tncm91bmQtcmVwZWF0JzogJ25vLXJlcGVhdCcsXHJcbiAgICAgICAgJ2JhY2tncm91bmQtc2l6ZSc6ICc2MCUnLFxyXG4gICAgICAgICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogJzUwJSA1MCUnXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5zZXRTZWxlY3RlZFNraWxsKCRzY29wZS5za2lsbHNbMF0pO1xyXG5cclxuICAgIC8qXHJcbiAgICBoYWxmIGNpcmNsZSBza2lsbCB3aGVlbCB0aGF0IGRpZG4ndCB0dXJuIG91dCBncmVhdFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZGlzcGxheTogJHNjb3BlLnNraWxsc1Zpc2libGUgPyAnYmxvY2snIDogJ25vbmUnLFxyXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgbGVmdDogJHNjb3BlLndoZWVsV2lkdGggLyAyICogTWF0aC5jb3MoaSAqIChNYXRoLlBJIC8gKCRzY29wZS5za2lsbHMubGVuZ3RoIC0gMSkpKSArICRzY29wZS53aGVlbFdpZHRoIC8gMiAtICRzY29wZS53aGVlbFdpZHRoICogMC4wMjUsXHJcbiAgICAgIHRvcDogTWF0aC5zaW4oaSAqIChNYXRoLlBJIC8gKCRzY29wZS5za2lsbHMubGVuZ3RoIC0gMSkpKSAqICQoJy5zZWxlY3RlZC1za2lsbCcpLmhlaWdodCgpICogMi41LFxyXG4gICAgICB3aWR0aDogJHNjb3BlLndoZWVsV2lkdGggKiAwLjA1LFxyXG4gICAgICBoZWlnaHQ6ICRzY29wZS53aGVlbFdpZHRoICogMC4wNVxyXG4gICAgfTtcclxuICAgICovXHJcblxyXG4gICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gIH0pO1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXJcclxuXHQubW9kdWxlKCdhcHAnKVxyXG5cdC8vQW5ndWxhckpzIGNhbid0IGhhdmUgYW4gYXJyb3cgZnVuY3Rpb24gaGVyZVxyXG5cdC5jb250cm9sbGVyKCdUZW5UaGluZ3NDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVGVuVGhpbmdzU3ZjKSB7XHJcblx0XHQkc2NvcGUuc2VhcmNoID0ge1xyXG5cdFx0XHRuYW1lOiAnJyxcclxuXHRcdFx0dmFsdWVzOiAnJyxcclxuXHRcdH07XHJcblx0XHRUZW5UaGluZ3NTdmMuZ2V0Q2F0ZWdvcmllcygpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG5cdFx0XHQkc2NvcGUuY2F0ZWdvcmllcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdCRzY29wZS5jYXRlZ29yeUZpbHRlcnMgPSAkc2NvcGUuY2F0ZWdvcmllcy5tYXAoY2F0ZWdvcnkgPT4gY2F0ZWdvcnkpO1xyXG5cdFx0XHQkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzLnB1c2goJ0FsbCcpO1xyXG5cdFx0XHQkc2NvcGUuY2F0ZWdvcnlGaWx0ZXJzLnB1c2goJ0JsYW5rJyk7XHJcblx0XHRcdCRzY29wZS5jYXRlZ29yeUZpbHRlciA9ICdBbGwnO1xyXG5cdFx0XHQkc2NvcGUudXBkYXRlRmlsdGVyID0gJ2FsbCc7XHJcblx0XHR9KTtcclxuXHRcdFRlblRoaW5nc1N2Yy5nZXRMYW5ndWFnZXMoKS50aGVuKHJlc3BvbnNlID0+IHtcclxuXHRcdFx0JHNjb3BlLmxhbmd1YWdlcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdCRzY29wZS5sYW5ndWFnZUZpbHRlcnMgPSAkc2NvcGUubGFuZ3VhZ2VzLm1hcChsYW5ndWFnZSA9PiBsYW5ndWFnZSk7XHJcblx0XHRcdCRzY29wZS5sYW5ndWFnZUZpbHRlcnMucHVzaCh7IG5hbWU6ICdBbGwnLCBjb2RlOiAnYWxsJyB9KTtcclxuXHRcdFx0JHNjb3BlLmxhbmd1YWdlRmlsdGVyID0geyBuYW1lOiAnQWxsJywgY29kZTogJ2FsbCcgfTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdCRzY29wZS5rZXlEb3duID0gZSA9PiB7XHJcblx0XHRcdGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcclxuXHRcdFx0c3dpdGNoIChlLmtleUNvZGUpIHtcclxuXHRcdFx0XHRjYXNlIDk6XHJcblx0XHRcdFx0XHRpZiAoJCgnI25ldy1ibHVyYicpLmlzKCc6Zm9jdXMnKSkge1xyXG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHQkc2NvcGUuYWRkVmFsdWUoKTtcclxuXHRcdFx0XHRcdFx0fSwgMTAwKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMTM6XHJcblx0XHRcdFx0XHRpZiAoJCgnI25ldy1ibHVyYicpLmlzKCc6Zm9jdXMnKSkge1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUuYWRkVmFsdWUoKTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoJCgnI25ldy12YWx1ZScpLmlzKCc6Zm9jdXMnKSkge1xyXG5cdFx0XHRcdFx0XHQkKCcjbmV3LWJsdXJiJykuZm9jdXMoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gdXNlIGUua2V5Q29kZVxyXG5cdFx0fTtcclxuXHJcblx0XHQkc2NvcGUuc2VhcmNoTmFtZSA9ICcnO1xyXG5cdFx0JHNjb3BlLm5ld0l0ZW0gPSB7fTtcclxuXHJcblx0XHQkc2NvcGUuc2V0Q2F0ZWdvcnlGaWx0ZXIgPSBjYXRlZ29yeSA9PiAoJHNjb3BlLmNhdGVnb3J5RmlsdGVyID0gY2F0ZWdvcnkpO1xyXG5cdFx0JHNjb3BlLnNldFVzZXJGaWx0ZXIgPSB1c2VyID0+ICgkc2NvcGUudXNlckZpbHRlciA9IHVzZXIpO1xyXG5cdFx0JHNjb3BlLnNldFVwZGF0ZUZpbHRlciA9IHR5cGUgPT4gKCRzY29wZS51cGRhdGVGaWx0ZXIgPSB0eXBlKTtcclxuXHRcdCRzY29wZS5zZXRMYW5ndWFnZUZpbHRlciA9IGxhbmd1YWdlID0+ICgkc2NvcGUubGFuZ3VhZ2VGaWx0ZXIgPSBsYW5ndWFnZSk7XHJcblxyXG5cdFx0JHNjb3BlLmZpbHRlcmVkTGlzdHMgPSAoKSA9PiB7XHJcblx0XHRcdGlmICghJHNjb3BlLmxpc3RzKSByZXR1cm4gW107XHJcblx0XHRcdHJldHVybiAkc2NvcGUubGlzdHNcclxuXHRcdFx0XHQuZmlsdGVyKCh7IGlzRHluYW1pYyB9KSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoJHNjb3BlLnVwZGF0ZUZpbHRlciAhPT0gJ2FsbCcpIHtcclxuXHRcdFx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0XHRcdCgkc2NvcGUudXBkYXRlRmlsdGVyID09PSAnc3RhdGljJyAmJiBpc0R5bmFtaWMgPT09IHRydWUpIHx8XHJcblx0XHRcdFx0XHRcdFx0KCRzY29wZS51cGRhdGVGaWx0ZXIgPT09ICdkeW5hbWljJyAmJiBpc0R5bmFtaWMgPT09IGZhbHNlKVxyXG5cdFx0XHRcdFx0XHQpXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHQuZmlsdGVyKCh7IGNhdGVnb3JpZXMgfSkgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKCRzY29wZS5jYXRlZ29yeUZpbHRlciA9PT0gJ0FsbCcpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRpZiAoY2F0ZWdvcmllcy5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNhdGVnb3JpZXMuaW5kZXhPZigkc2NvcGUuY2F0ZWdvcnlGaWx0ZXIpID49IDA7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuICRzY29wZS5jYXRlZ29yeUZpbHRlciA9PT0gJ0JsYW5rJztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0LmZpbHRlcigoeyBjcmVhdG9yIH0pID0+IHtcclxuXHRcdFx0XHRcdGlmICgkc2NvcGUudXNlckZpbHRlciA9PT0gJ0FsbCcpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gY3JlYXRvciA9PT0gJHNjb3BlLnVzZXJGaWx0ZXI7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHQuZmlsdGVyKCh7IGxhbmd1YWdlIH0pID0+IHtcclxuXHRcdFx0XHRcdGlmICgkc2NvcGUubGFuZ3VhZ2VGaWx0ZXIuY29kZSA9PT0gJ2FsbCcpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gbGFuZ3VhZ2UgPT09ICRzY29wZS5sYW5ndWFnZUZpbHRlci5jb2RlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHJcblx0XHQkc2NvcGUuJG9uKCdsb2dpbicsIF8gPT4ge1xyXG5cdFx0XHQkc2NvcGUuZ2V0TGlzdHMoKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdCRzY29wZS5zb3J0ID0gKHNvcnRWYWx1ZSwgc29ydExhYmVsKSA9PiB7XHJcblx0XHRcdCRzY29wZS5zb3J0TGFiZWwgPSBzb3J0TGFiZWw7XHJcblx0XHRcdGlmICgkc2NvcGUuc29ydFZhbHVlID09PSBzb3J0VmFsdWUpIHtcclxuXHRcdFx0XHQkc2NvcGUuc29ydERpcmVjdGlvbiA9ICEkc2NvcGUuc29ydERpcmVjdGlvbjtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQkc2NvcGUuc29ydFZhbHVlID0gc29ydFZhbHVlO1xyXG5cdFx0XHRcdCRzY29wZS5zb3J0RGlyZWN0aW9uID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHQkc2NvcGUuc29ydGVyID0gKCRzY29wZS5zb3J0RGlyZWN0aW9uID8gJysnIDogJy0nKSArICRzY29wZS5zb3J0VmFsdWU7XHJcblx0XHR9O1xyXG5cclxuXHRcdCRzY29wZS5zb3J0TGlzdCA9ICd2YWx1ZSc7XHJcblx0XHQkc2NvcGUuc29ydFZhbHVlID0gJ2RhdGUnO1xyXG5cdFx0JHNjb3BlLnNvcnREaXJlY3Rpb24gPSB0cnVlO1xyXG5cdFx0JHNjb3BlLnNvcnQoJ2RhdGUnLCAnQ3JlYXRpb24gRGF0ZScpO1xyXG5cclxuXHRcdCRzY29wZS5nZXRMYW5ndWFnZUNvdW50ID0gbGFuZ3VhZ2UgPT4ge1xyXG5cdFx0XHRpZiAoISRzY29wZS5saXN0cykgcmV0dXJuIDA7XHJcblx0XHRcdGNvbnN0IGNvdW50ID0gJHNjb3BlLmxpc3RzLmZpbHRlcihcclxuXHRcdFx0XHRsaXN0ID0+XHJcblx0XHRcdFx0XHQoJHNjb3BlLmNhdGVnb3J5RmlsdGVyID09PSAnQWxsJyB8fFxyXG5cdFx0XHRcdFx0XHRsaXN0LmNhdGVnb3JpZXMuaW5jbHVkZXMoJHNjb3BlLmNhdGVnb3J5RmlsdGVyKSkgJiZcclxuXHRcdFx0XHRcdChsYW5ndWFnZS5jb2RlID09PSAnYWxsJyB8fCBsaXN0Lmxhbmd1YWdlID09PSBsYW5ndWFnZS5jb2RlKSAmJlxyXG5cdFx0XHRcdFx0KCRzY29wZS51c2VyRmlsdGVyID09PSAnQWxsJyB8fCBsaXN0LmNyZWF0b3IgPT09ICRzY29wZS51c2VyRmlsdGVyKSAmJlxyXG5cdFx0XHRcdFx0KCRzY29wZS51cGRhdGVGaWx0ZXIgPT09ICdhbGwnIHx8XHJcblx0XHRcdFx0XHRcdGxpc3QuaXNEeW5hbWljID09PSAoJHNjb3BlLnVwZGF0ZUZpbHRlciA9PT0gJ2R5bmFtaWMnKSlcclxuXHRcdFx0KS5sZW5ndGg7XHJcblx0XHRcdHJldHVybiBgJHtjb3VudH0gLSAke01hdGgucm91bmQoKGNvdW50IC8gJHNjb3BlLmxpc3RzLmxlbmd0aCkgKiAxMDApfSVgO1xyXG5cdFx0fTtcclxuXHJcblx0XHQkc2NvcGUuZ2V0Q2F0ZWdvcnlDb3VudCA9IGNhdGVnb3J5ID0+IHtcclxuXHRcdFx0aWYgKCEkc2NvcGUubGlzdHMpIHJldHVybiAwO1xyXG5cdFx0XHRjb25zdCBjb3VudCA9ICRzY29wZS5saXN0cy5maWx0ZXIoXHJcblx0XHRcdFx0bGlzdCA9PlxyXG5cdFx0XHRcdFx0KGNhdGVnb3J5ID09PSAnQWxsJyB8fCBsaXN0LmNhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSkgPj0gMCkgJiZcclxuXHRcdFx0XHRcdCgkc2NvcGUubGFuZ3VhZ2VGaWx0ZXIuY29kZSA9PT0gJ2FsbCcgfHxcclxuXHRcdFx0XHRcdFx0bGlzdC5sYW5ndWFnZSA9PT0gJHNjb3BlLmxhbmd1YWdlRmlsdGVyLmNvZGUpICYmXHJcblx0XHRcdFx0XHQoJHNjb3BlLnVzZXJGaWx0ZXIgPT09ICdBbGwnIHx8IGxpc3QuY3JlYXRvciA9PT0gJHNjb3BlLnVzZXJGaWx0ZXIpICYmXHJcblx0XHRcdFx0XHQoJHNjb3BlLnVwZGF0ZUZpbHRlciA9PT0gJ2FsbCcgfHxcclxuXHRcdFx0XHRcdFx0bGlzdC5pc0R5bmFtaWMgPT09ICgkc2NvcGUudXBkYXRlRmlsdGVyID09PSAnZHluYW1pYycpKVxyXG5cdFx0XHQpLmxlbmd0aDtcclxuXHRcdFx0cmV0dXJuIGAke2NvdW50fSAtICR7TWF0aC5yb3VuZCgoY291bnQgLyAkc2NvcGUubGlzdHMubGVuZ3RoKSAqIDEwMCl9JWA7XHJcblx0XHR9O1xyXG5cclxuXHRcdCRzY29wZS5nZXRVcGRhdGVDb3VudCA9IHR5cGUgPT4ge1xyXG5cdFx0XHRpZiAoISRzY29wZS5saXN0cykgcmV0dXJuIDA7XHJcblx0XHRcdGNvbnN0IGNvdW50ID0gJHNjb3BlLmxpc3RzLmZpbHRlcihcclxuXHRcdFx0XHRsaXN0ID0+XHJcblx0XHRcdFx0XHR0eXBlID09PSAnYWxsJyB8fFxyXG5cdFx0XHRcdFx0KGxpc3QuaXNEeW5hbWljICYmIHR5cGUgPT09ICdkeW5hbWljJykgfHxcclxuXHRcdFx0XHRcdCghbGlzdC5pc0R5bmFtaWMgJiYgdHlwZSA9PT0gJ3N0YXRpYycpXHJcblx0XHRcdCkubGVuZ3RoO1xyXG5cdFx0XHRyZXR1cm4gYCR7Y291bnR9IC0gJHtNYXRoLnJvdW5kKChjb3VudCAvICRzY29wZS5saXN0cy5sZW5ndGgpICogMTAwKX0lYDtcclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLmdldExpc3RzID0gKCkgPT4ge1xyXG5cdFx0XHRpZiAoISRzY29wZS5sb2FkaW5nKSB7XHJcblx0XHRcdFx0JHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xyXG5cdFx0XHRcdFRlblRoaW5nc1N2Yy5nZXRMaXN0cygpLnRoZW4oKHsgZGF0YSB9KSA9PiB7XHJcblx0XHRcdFx0XHQkc2NvcGUubGlzdHMgPSBkYXRhO1xyXG5cdFx0XHRcdFx0JHNjb3BlLnVzZXJGaWx0ZXJzID0ge307XHJcblx0XHRcdFx0XHQkc2NvcGUudXNlckZpbHRlcnMuQWxsID0gJHNjb3BlLmxpc3RzLmxlbmd0aDtcclxuXHRcdFx0XHRcdCRzY29wZS51c2VyRmlsdGVycyA9ICRzY29wZS5saXN0c1xyXG5cdFx0XHRcdFx0XHQuc29ydCgobGlzdDEsIGxpc3QyKSA9PiBsaXN0MS5jcmVhdG9yID4gbGlzdDIuY3JlYXRvcilcclxuXHRcdFx0XHRcdFx0LnJlZHVjZSgodXNlcnMsIHsgY3JlYXRvciB9KSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCF1c2Vyc1tjcmVhdG9yXSkgdXNlcnNbY3JlYXRvcl0gPSAwO1xyXG5cdFx0XHRcdFx0XHRcdHVzZXJzW2NyZWF0b3JdKys7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHVzZXJzO1xyXG5cdFx0XHRcdFx0XHR9LCAkc2NvcGUudXNlckZpbHRlcnMpO1xyXG5cdFx0XHRcdFx0JHNjb3BlLnVzZXJDb3VudCA9IE9iamVjdC5rZXlzKCRzY29wZS51c2VyRmlsdGVycykubGVuZ3RoO1xyXG5cdFx0XHRcdFx0JHNjb3BlLnVzZXJGaWx0ZXJzID0gc29ydE9iamVjdCgkc2NvcGUudXNlckZpbHRlcnMsIGZhbHNlKTtcclxuXHRcdFx0XHRcdCRzY29wZS51c2VyRmlsdGVyID0gJ0FsbCc7XHJcblx0XHRcdFx0XHQkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdCRzY29wZS5zZWxlY3RMaXN0ID0gbGlzdCA9PiB7XHJcblx0XHRcdFRlblRoaW5nc1N2Yy5nZXRMaXN0KGxpc3QpLnRoZW4oKHsgZGF0YSB9KSA9PiB7XHJcblx0XHRcdFx0JHNjb3BlLnNlbGVjdGVkTGlzdCA9IGRhdGE7XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHJcblx0XHQkc2NvcGUuc2VsZWN0Q2F0ZWdvcnkgPSBjYXRlZ29yeSA9PiB7XHJcblx0XHRcdCRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcnkgPSBjYXRlZ29yeTtcclxuXHRcdFx0JCgnI2NhdGVnb3J5LXNlbGVjdCcpLmhpZGUoKTtcclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLmdldENhdGVnb3J5Q2xhc3MgPSBjYXRlZ29yeSA9PiB7XHJcblx0XHRcdHJldHVybiAkc2NvcGUuc2VsZWN0ZWRMaXN0ICYmXHJcblx0XHRcdFx0JHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLmluZGV4T2YoY2F0ZWdvcnkpID49IDBcclxuXHRcdFx0XHQ/ICdidG4tc3VjY2VzcydcclxuXHRcdFx0XHQ6ICdidG4tZGVmYXVsdCc7XHJcblx0XHR9O1xyXG5cclxuXHRcdCRzY29wZS50b2dnbGVDYXRlZ29yeSA9IGNhdGVnb3J5ID0+IHtcclxuXHRcdFx0Y29uc3QgY2F0ZWdvcnlJbmRleCA9ICRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5pbmRleE9mKGNhdGVnb3J5KTtcclxuXHRcdFx0aWYgKGNhdGVnb3J5SW5kZXggPj0gMCkge1xyXG5cdFx0XHRcdCRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5zcGxpY2UoY2F0ZWdvcnlJbmRleCwgMSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0JHNjb3BlLnNlbGVjdGVkTGlzdC5jYXRlZ29yaWVzLnB1c2goY2F0ZWdvcnkpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdCRzY29wZS5zZWxlY3RMYW5ndWFnZSA9IGxhbmd1YWdlID0+IHtcclxuXHRcdFx0JHNjb3BlLnNlbGVjdGVkTGlzdC5sYW5ndWFnZSA9IGxhbmd1YWdlLmNvZGU7XHJcblx0XHRcdGNvbnN0IG5vbkVuZ2xpc2hJbmRleCA9ICRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5pbmRleE9mKFxyXG5cdFx0XHRcdCdOb24tRW5nbGlzaCdcclxuXHRcdFx0KTtcclxuXHRcdFx0aWYgKGxhbmd1YWdlLmNvZGUgIT09ICdFTicgJiYgbm9uRW5nbGlzaEluZGV4IDwgMCkge1xyXG5cdFx0XHRcdCRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5wdXNoKCdOb24tRW5nbGlzaCcpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGxhbmd1YWdlLmNvZGUgPT09ICdFTicgJiYgbm9uRW5nbGlzaEluZGV4ID49IDApIHtcclxuXHRcdFx0XHQkc2NvcGUuc2VsZWN0ZWRMaXN0LmNhdGVnb3JpZXMuc3BsaWNlKG5vbkVuZ2xpc2hJbmRleCwgMSk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLmFkZExpc3QgPSAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGN1cnJlbnRMYW5ndWFnZSA9ICRzY29wZS5zZWxlY3RlZExpc3RcclxuXHRcdFx0XHQ/ICRzY29wZS5zZWxlY3RlZExpc3QubGFuZ3VhZ2VcclxuXHRcdFx0XHQ6ICdFTic7XHJcblx0XHRcdCRzY29wZS5zZWxlY3RlZExpc3QgPSB7XHJcblx0XHRcdFx0bmFtZTogJycsXHJcblx0XHRcdFx0Y3JlYXRvcjogJHNjb3BlLmN1cnJlbnRVc2VyLl9pZCxcclxuXHRcdFx0XHRkYXRlOiBuZXcgRGF0ZSgpLFxyXG5cdFx0XHRcdHZhbHVlczogW10sXHJcblx0XHRcdFx0YW5zd2VyczogMCxcclxuXHRcdFx0XHRpc0R5bmFtaWM6IHRydWUsXHJcblx0XHRcdFx0Y2F0ZWdvcnk6ICcnLFxyXG5cdFx0XHRcdGNhdGVnb3JpZXM6IFtdLFxyXG5cdFx0XHRcdGxhbmd1YWdlOiBjdXJyZW50TGFuZ3VhZ2UsXHJcblx0XHRcdH07XHJcblx0XHR9O1xyXG5cclxuXHRcdCRzY29wZS5oYXNEdXBsaWNhdGUgPSAoKSA9PlxyXG5cdFx0XHQkc2NvcGUuc2VsZWN0ZWRMaXN0ICYmXHJcblx0XHRcdCRzY29wZS5uZXdJdGVtLnZhbHVlICYmXHJcblx0XHRcdF8uc29tZShcclxuXHRcdFx0XHQkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcyxcclxuXHRcdFx0XHRhbnN3ZXIgPT5cclxuXHRcdFx0XHRcdGFuc3dlci52YWx1ZS5yZW1vdmVBbGxCdXRMZXR0ZXJzKCkgPT1cclxuXHRcdFx0XHRcdCRzY29wZS5uZXdJdGVtLnZhbHVlLnJlbW92ZUFsbEJ1dExldHRlcnMoKVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdCRzY29wZS5hZGRWYWx1ZSA9ICgpID0+IHtcclxuXHRcdFx0aWYgKCRzY29wZS5uZXdJdGVtLnZhbHVlKSB7XHJcblx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0Xy5zb21lKFxyXG5cdFx0XHRcdFx0XHQkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcyxcclxuXHRcdFx0XHRcdFx0YW5zd2VyID0+XHJcblx0XHRcdFx0XHRcdFx0YW5zd2VyLnZhbHVlLnJlbW92ZUFsbEJ1dExldHRlcnMoKSA9PVxyXG5cdFx0XHRcdFx0XHRcdCRzY29wZS5uZXdJdGVtLnZhbHVlLnJlbW92ZUFsbEJ1dExldHRlcnMoKVxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0YWxlcnQoYCR7JHNjb3BlLm5ld0l0ZW0udmFsdWV9IGlzIGFscmVhZHkgaW4gdGhlIGxpc3RgKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0JHNjb3BlLm5ld0l0ZW0uY3JlYXRvciA9ICRzY29wZS5jdXJyZW50VXNlci5faWQ7XHJcblx0XHRcdFx0XHQkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcy51bnNoaWZ0KFxyXG5cdFx0XHRcdFx0XHRKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KCRzY29wZS5uZXdJdGVtKSlcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHQkc2NvcGUuc2VsZWN0ZWRMaXN0LmFuc3dlcnMrKztcclxuXHRcdFx0XHRcdCRzY29wZS5uZXdJdGVtLnZhbHVlID0gJyc7XHJcblx0XHRcdFx0XHQkc2NvcGUubmV3SXRlbS5ibHVyYiA9ICcnO1xyXG5cdFx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0XHQkc2NvcGUuc2VsZWN0ZWRMaXN0LnZhbHVlcy5sZW5ndGggPj0gMTAgJiZcclxuXHRcdFx0XHRcdFx0JHNjb3BlLnNlbGVjdGVkTGlzdC5uYW1lICYmXHJcblx0XHRcdFx0XHRcdCRzY29wZS5zZWxlY3RlZExpc3QuY2F0ZWdvcmllcy5sZW5ndGggPiAwXHJcblx0XHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdFx0JHNjb3BlLnNhdmVMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHQkKCcjbmV3LXZhbHVlJykuZm9jdXMoKTtcclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLnJlcG9ydExpc3QgPSBsaXN0ID0+IHtcclxuXHRcdFx0bGlzdC5yZXBvcnRlZCA9IHRydWU7XHJcblx0XHRcdFRlblRoaW5nc1N2Yy5yZXBvcnRMaXN0KCRzY29wZS5jdXJyZW50VXNlciwgbGlzdCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdCRzY29wZS5zYXZlTGlzdCA9IGxpc3QgPT4ge1xyXG5cdFx0XHRpZiAoISRzY29wZS5zYXZpbmcpIHtcclxuXHRcdFx0XHRsaXN0LnZhbHVlcyA9IGxpc3QudmFsdWVzLmZpbHRlcigoeyB2YWx1ZSB9KSA9PiB2YWx1ZSk7XHJcblx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0bGlzdC52YWx1ZXMubGVuZ3RoID49IDEwICYmXHJcblx0XHRcdFx0XHRsaXN0Lm5hbWUgJiZcclxuXHRcdFx0XHRcdGxpc3QuY2F0ZWdvcmllcy5sZW5ndGggPiAwXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHQkc2NvcGUuc2F2aW5nID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFRlblRoaW5nc1N2Yy5zYXZlTGlzdCgkc2NvcGUuY3VycmVudFVzZXIsIGxpc3QpLnRoZW4oXHJcblx0XHRcdFx0XHRcdCh7IGRhdGEgfSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGlmICghJHNjb3BlLnNlbGVjdGVkTGlzdC5faWQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdCRzY29wZS5saXN0cy51bnNoaWZ0KGRhdGEpO1xyXG5cdFx0XHRcdFx0XHRcdFx0JHNjb3BlLnNlbGVjdExpc3QoZGF0YSk7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgJHNjb3BlLmxpc3RzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICgkc2NvcGUubGlzdHNbaV0uX2lkID09PSBkYXRhLl9pZCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCRzY29wZS5saXN0c1tpXSA9IGRhdGE7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdCRzY29wZS5zZWxlY3RMaXN0KGxpc3QpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQkc2NvcGUuc2F2aW5nID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdGVyciA9PiB7XHJcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xyXG5cdFx0XHRcdFx0XHRcdCRzY29wZS5zYXZpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKGxpc3QudmFsdWVzLmxlbmd0aCA8IDEwKSB7XHJcblx0XHRcdFx0XHRhbGVydCgnTGlzdHMgbXVzdCBjb250YWluIDEwIG9yIG1vcmUgdmFsdWVzIScpO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIWxpc3QubmFtZSkge1xyXG5cdFx0XHRcdFx0Zmxhc2goJyNsaXN0LW5hbWUnKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Zmxhc2goJy5saXN0LWNhdGVnb3J5Jyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGZsYXNoKGVsZW1lbnQpIHtcclxuXHRcdFx0Y29uc3QgY29sb3IgPSAkKGVsZW1lbnQpLmNzcygnYmFja2dyb3VuZC1jb2xvcicpO1xyXG5cdFx0XHQkKGVsZW1lbnQpLmFuaW1hdGUoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiAnI0ZBODA3MicsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQxMDAsXHJcblx0XHRcdFx0KCkgPT4ge1xyXG5cdFx0XHRcdFx0JChlbGVtZW50KS5hbmltYXRlKFxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiBjb2xvcixcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0MTAwXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHJcblx0XHQkc2NvcGUuZGVsZXRlTGlzdCA9IGxpc3QgPT4ge1xyXG5cdFx0XHRpZiAoIWxpc3QuX2lkKSB7XHJcblx0XHRcdFx0JHNjb3BlLmxpc3RzID0gJHNjb3BlLmxpc3RzLmZpbHRlcigoeyBfaWQgfSkgPT4gX2lkKTtcclxuXHRcdFx0XHQkc2NvcGUuc2VsZWN0ZWRMaXN0ID0gbnVsbDtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpZiAoY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIGxpc3Q/JykpIHtcclxuXHRcdFx0XHRcdFRlblRoaW5nc1N2Yy5kZWxldGVMaXN0KGxpc3QpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUuZ2V0TGlzdHMoKTtcclxuXHRcdFx0XHRcdFx0JHNjb3BlLnNlbGVjdGVkTGlzdCA9IG51bGw7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLmxpc3RCdXR0b25DbGFzcyA9IGxpc3QgPT4ge1xyXG5cdFx0XHRjb25zdCB2YWx1ZXMgPSBsaXN0LnZhbHVlcy5sZW5ndGg7XHJcblx0XHRcdGNvbnN0IGJsdXJicyA9IGxpc3QuYmx1cmJzO1xyXG5cdFx0XHRpZiAodmFsdWVzID09PSBibHVyYnMgJiYgbGlzdC5kZXNjcmlwdGlvbikge1xyXG5cdFx0XHRcdHJldHVybiAnYnRuLWRlZmF1bHQnO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGJsdXJicyA9PT0gMCAmJiAhbGlzdC5kZXNjcmlwdGlvbikge1xyXG5cdFx0XHRcdHJldHVybiAnYnRuLXdhcm5pbmcnO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGJsdXJicyA9PT0gMCAmJiBsaXN0LmRlc2NyaXB0aW9uKSB7XHJcblx0XHRcdFx0cmV0dXJuICdidG4taW5mbyc7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmV0dXJuICdidG4tcHJpbWFyeSc7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLmdldE1vdmllUGljcyA9ICgpID0+IHtcclxuXHRcdFx0JHNjb3BlLmdldHRpbmdCbHVyYnMgPSB0cnVlO1xyXG5cdFx0XHRUZW5UaGluZ3NTdmMuZ2V0TW92aWVQaWNzKCRzY29wZS5zZWxlY3RlZExpc3QpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG5cdFx0XHRcdCRzY29wZS5zZWxlY3RMaXN0KCRzY29wZS5zZWxlY3RlZExpc3QpO1xyXG5cdFx0XHRcdCRzY29wZS5nZXR0aW5nQmx1cmJzID0gZmFsc2U7XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHJcblx0XHQkc2NvcGUuZ2V0VFZQaWNzID0gKCkgPT4ge1xyXG5cdFx0XHQkc2NvcGUuZ2V0dGluZ0JsdXJicyA9IHRydWU7XHJcblx0XHRcdFRlblRoaW5nc1N2Yy5nZXRUVlBpY3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbihyZXNwb25zZSA9PiB7XHJcblx0XHRcdFx0JHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCk7XHJcblx0XHRcdFx0JHNjb3BlLmdldHRpbmdCbHVyYnMgPSBmYWxzZTtcclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cclxuXHRcdCRzY29wZS5nZXRBY3RvclBpY3MgPSAoKSA9PiB7XHJcblx0XHRcdCRzY29wZS5nZXR0aW5nQmx1cmJzID0gdHJ1ZTtcclxuXHRcdFx0VGVuVGhpbmdzU3ZjLmdldEFjdG9yUGljcygkc2NvcGUuc2VsZWN0ZWRMaXN0KS50aGVuKHJlc3BvbnNlID0+IHtcclxuXHRcdFx0XHQkc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KTtcclxuXHRcdFx0XHQkc2NvcGUuZ2V0dGluZ0JsdXJicyA9IGZhbHNlO1xyXG5cdFx0XHR9KTtcclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLmdldEJvb2tQaWNzID0gKCkgPT4ge1xyXG5cdFx0XHQkc2NvcGUuZ2V0dGluZ0JsdXJicyA9IHRydWU7XHJcblx0XHRcdFRlblRoaW5nc1N2Yy5nZXRCb29rUGljcygkc2NvcGUuc2VsZWN0ZWRMaXN0KS50aGVuKHJlc3BvbnNlID0+IHtcclxuXHRcdFx0XHQkc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KTtcclxuXHRcdFx0XHQkc2NvcGUuZ2V0dGluZ0JsdXJicyA9IGZhbHNlO1xyXG5cdFx0XHR9KTtcclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLmdldE11c2ljVmlkZW9zID0gKCkgPT4ge1xyXG5cdFx0XHQkc2NvcGUuZ2V0dGluZ0JsdXJicyA9IHRydWU7XHJcblx0XHRcdFRlblRoaW5nc1N2Yy5nZXRNdXNpY1ZpZGVvcygkc2NvcGUuc2VsZWN0ZWRMaXN0KS50aGVuKHJlc3BvbnNlID0+IHtcclxuXHRcdFx0XHQkc2NvcGUuc2VsZWN0TGlzdCgkc2NvcGUuc2VsZWN0ZWRMaXN0KTtcclxuXHRcdFx0XHQkc2NvcGUuZ2V0dGluZ0JsdXJicyA9IGZhbHNlO1xyXG5cdFx0XHR9KTtcclxuXHRcdH07XHJcblxyXG5cdFx0JHNjb3BlLmdldFBpY3MgPSAoKSA9PiB7XHJcblx0XHRcdCRzY29wZS5nZXR0aW5nQmx1cmJzID0gdHJ1ZTtcclxuXHRcdFx0VGVuVGhpbmdzU3ZjLmdldFBpY3MoJHNjb3BlLnNlbGVjdGVkTGlzdCkudGhlbihyZXNwb25zZSA9PiB7XHJcblx0XHRcdFx0JHNjb3BlLnNlbGVjdExpc3QoJHNjb3BlLnNlbGVjdGVkTGlzdCk7XHJcblx0XHRcdFx0JHNjb3BlLmdldHRpbmdCbHVyYnMgPSBmYWxzZTtcclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cdH0pO1xyXG4iLCIvKmpzbGludCBlc3ZlcnNpb246IDYqL1xyXG5hbmd1bGFyXHJcblx0Lm1vZHVsZSgnYXBwJylcclxuXHQvL0FuZ3VsYXJKcyBjYW4ndCBoYXZlIGFuIGFycm93IGZ1bmN0aW9uIGhlcmVcclxuXHQuY29udHJvbGxlcignVGVuVGhpbmdzQWRtaW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVGVuVGhpbmdzU3ZjLCBVc2VyU3ZjKSB7XHJcblx0XHQkc2NvcGUuJG9uKCdsb2dpbicsIF8gPT4ge1xyXG5cdFx0XHRpZiAoJHNjb3BlLmN1cnJlbnRVc2VyLmFkbWluKSB7XHJcblx0XHRcdFx0Z2V0VXNlcnMoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0JHNjb3BlLmdldFF1ZXVlID0gKCkgPT4ge1xyXG5cdFx0XHQkc2NvcGUubG9hZGluZyA9IHRydWU7XHJcblx0XHRcdFRlblRoaW5nc1N2Yy5nZXRRdWV1ZSgpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG5cdFx0XHRcdCRzY29wZS5xdWV1ZSA9IHJlc3BvbnNlLmRhdGEucmVwbGFjZSgnL24nLCAnPGJyLz4nKTtcclxuXHRcdFx0XHQkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHR9KTtcclxuXHRcdH07XHJcblx0XHQkc2NvcGUuZ2V0UXVldWUoKTtcclxuXHJcblx0XHRUZW5UaGluZ3NTdmMuZ2V0UGF1c2UoKS50aGVuKHJlc3BvbnNlID0+IHtcclxuXHRcdFx0JHNjb3BlLnBhdXNlZCA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdGNvbnNvbGUubG9nKCRzY29wZS5wYXVzZWQpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29uc3QgZ2V0VXNlcnMgPSAoKSA9PiB7XHJcblx0XHRcdCRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcclxuXHRcdFx0VXNlclN2Yy5nZXRVc2VycygpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG5cdFx0XHRcdCRzY29wZS51c2VycyA9IHJlc3BvbnNlLmRhdGEuZmlsdGVyKHVzZXIgPT4gIXVzZXIuYWRtaW4pO1xyXG5cdFx0XHRcdCRzY29wZS5sb2FkaW5nID0gZmFsc2U7XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHJcblx0XHQkc2NvcGUudG9nZ2xlQmFuID0gdXNlciA9PiB7XHJcblx0XHRcdCRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcclxuXHRcdFx0VXNlclN2Yy50b2dnbGVCYW4odXNlci5faWQpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG5cdFx0XHRcdGdldFVzZXJzKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHJcblx0XHQkc2NvcGUudG9nZ2xlUGF1c2UgPSB1c2VyID0+IHtcclxuXHRcdFx0VGVuVGhpbmdzU3ZjLnRvZ2dsZVBhdXNlKCkudGhlbihyZXNwb25zZSA9PiB7XHJcblx0XHRcdFx0JHNjb3BlLnBhdXNlZCA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coJHNjb3BlLnBhdXNlZCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHR9KTtcclxuIiwiYW5ndWxhclxyXG5cdC5tb2R1bGUoJ2FwcCcpXHJcblx0Ly9Bbmd1bGFySnMgY2FuJ3QgaGF2ZSBhbiBhcnJvdyBmdW5jdGlvbiBoZXJlXHJcblx0LmNvbnRyb2xsZXIoXHJcblx0XHQnVGVuVGhpbmdzQ3VyYXRlQ3RybCcsXHJcblx0XHRmdW5jdGlvbiAoJHNjb3BlLCBUZW5UaGluZ3NTdmMpIHtcclxuXHJcblx0XHRcdCRzY29wZS4kb24oJ2xvZ2luJywgXyA9PiB7XHJcblx0XHRcdFx0Z2V0TGlzdHMoKTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRjb25zdCBnZXRMaXN0cyA9ICgpID0+IHtcclxuXHRcdFx0XHRUZW5UaGluZ3NTdmMuZ2V0TGlzdHMoKS50aGVuKCh7IGRhdGEgfSkgPT4ge1x0XHRcdFx0XHJcblx0XHRcdFx0XHQkc2NvcGUubGlzdHMgPSBkYXRhO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coZGF0YSk7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHQpO1xyXG4iLCJhbmd1bGFyXHJcblx0Lm1vZHVsZSgnYXBwJylcclxuXHQvL0FuZ3VsYXJKcyBjYW4ndCBoYXZlIGFuIGFycm93IGZ1bmN0aW9uIGhlcmVcclxuXHQuY29udHJvbGxlcihcclxuXHRcdCdUZW5UaGluZ3NHYW1lQ3RybCcsXHJcblx0XHRmdW5jdGlvbiAoJHNjb3BlLCAkc3RhdGVQYXJhbXMsIFRlblRoaW5nc1N2Yykge1xyXG5cdFx0XHQkc2NvcGUuJG9uKCdsb2dpbicsIF8gPT4ge1xyXG5cdFx0XHRcdGlmICgkc2NvcGUuY3VycmVudFVzZXIuYWRtaW4pIHtcclxuXHRcdFx0XHRcdGdldFVzZXJzKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGlmICgkc3RhdGVQYXJhbXMuZ2FtZSkge1xyXG5cdFx0XHRcdFRlblRoaW5nc1N2Yy5nZXRHYW1lKCRzdGF0ZVBhcmFtcy5nYW1lKS50aGVuKHJlc3BvbnNlID0+IHtcclxuXHRcdFx0XHRcdCRzY29wZS5nYW1lID0gcmVzcG9uc2UuZGF0YTtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCRzY29wZS5nYW1lKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdCk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignV29ya291dEN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XHJcblxyXG4gICRzY29wZS50aW1lUmVtYWluaW5nID0gMDtcclxuICAkc2NvcGUudGltZUV4ZXJjaXNpbmcgPSAzMDtcclxuICAkc2NvcGUudGltZVJlc3RpbmcgPSAxMDtcclxuICAkc2NvcGUucmVzdCA9IGZhbHNlO1xyXG5cclxuICB2YXIgc291bmRzID0ge1xyXG4gICAgb246IG5ldyBBdWRpbygnb24ud2F2JyksXHJcbiAgICBvZmY6IG5ldyBBdWRpbygnb2ZmLndhdicpLFxyXG4gICAgc3dpdGNoOiBuZXcgQXVkaW8oJ3N3aXRjaC53YXYnKSxcclxuICB9O1xyXG5cclxuXHJcbiAgdmFyIGV4ZXJjaXNlcyA9IFtcclxuICAgIHtuYW1lOiAnSnVtcGluZyBKYWNrcycsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1dhbGwgU2l0Jywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnUHVzaC1VcCcsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ0NydW5jaCcsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1N0ZXAtVXAnLCBzcGxpdDogdHJ1ZX0sXHJcbiAgICB7bmFtZTogJ1NxdWF0Jywgc3BsaXQ6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnVHJpY2VwcyBEaXAnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdQbGFuaycsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ0hpZ2ggS25lZXMnLCBzcGxpdDogZmFsc2V9LFxyXG4gICAge25hbWU6ICdMdW5nZScsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1B1c2gtVXAgd2l0aCBSb3RhdGlvbicsIHNwbGl0OiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1NpZGUgUGxhbmsnLCBzcGxpdDogdHJ1ZX1cclxuICBdO1xyXG5cclxuICB2YXIgZXhlcmNpc2luZztcclxuXHJcbiAgJHNjb3BlLnByb2dyZXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gKGV4ZXJjaXNlcy5sZW5ndGggLSBNYXRoLmZsb29yKCRzY29wZS50aW1lUmVtYWluaW5nIC8gKCRzY29wZS50aW1lRXhlcmNpc2luZyArICRzY29wZS50aW1lUmVzdGluZykpKSArICcvJyArIGV4ZXJjaXNlcy5sZW5ndGg7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLndvcmtvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBleGNlcmNpc2VUaW1lID0gJHNjb3BlLnRpbWVFeGVyY2lzaW5nICsgJHNjb3BlLnRpbWVSZXN0aW5nO1xyXG4gICAgaWYgKCEkc2NvcGUudGltZVJlbWFpbmluZykge1xyXG4gICAgICAkc2NvcGUudGltZVJlbWFpbmluZyA9IGV4ZXJjaXNlcy5sZW5ndGggKiBleGNlcmNpc2VUaW1lO1xyXG4gICAgICBleGVyY2lzaW5nID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHNjb3BlLnRpbWVSZW1haW5pbmctLTtcclxuICAgICAgICBpZiAoJHNjb3BlLnRpbWVSZW1haW5pbmcgPT09IDApIHtcclxuICAgICAgICAgICRzY29wZS5leGVyY2lzZSA9IHtuYW1lOiAnRmluaXNoZWQhIENvbmdyYXRzIScsIHNwbGl0OiBmYWxzZX07XHJcbiAgICAgICAgICAkc2NvcGUudGltZXIgPSAnJztcclxuICAgICAgICAgICRzY29wZS50aW1lUmVtYWluaW5nID0gMDtcclxuICAgICAgICAgICRzY29wZS5yZXN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICByZXR1cm4gY2xlYXJJbnRlcnZhbChleGVyY2lzaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN1cnJlbnRFeGVyY2lzZSA9IE1hdGguZmxvb3IoJHNjb3BlLnRpbWVSZW1haW5pbmcgLyBleGNlcmNpc2VUaW1lKTtcclxuICAgICAgICB2YXIgdGltZXIgPSAkc2NvcGUudGltZVJlbWFpbmluZyAtIGN1cnJlbnRFeGVyY2lzZSAqIGV4Y2VyY2lzZVRpbWU7XHJcbiAgICAgICAgJHNjb3BlLnRpbWVyID0gdGltZXIgPiAkc2NvcGUudGltZUV4ZXJjaXNpbmcgPyB0aW1lciAtICRzY29wZS50aW1lRXhlcmNpc2luZyA6IHRpbWVyO1xyXG4gICAgICAgIGlmICh0aW1lciA+ICRzY29wZS50aW1lRXhlcmNpc2luZykge1xyXG4gICAgICAgICAgJHNjb3BlLnJlc3QgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkc2NvcGUucmVzdCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuZXhlcmNpc2UgPSBleGVyY2lzZXNbZXhlcmNpc2VzLmxlbmd0aCAtIGN1cnJlbnRFeGVyY2lzZSAtIDFdO1xyXG4gICAgICAgIGlmICh0aW1lciA9PT0gJHNjb3BlLnRpbWVFeGVyY2lzaW5nKSB7XHJcbiAgICAgICAgICBzb3VuZHMub24ucGxheSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGltZXIgPT09IDApIHtcclxuICAgICAgICAgIHNvdW5kcy5vZmYucGxheSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmV4ZXJjaXNlLnNwbGl0ICYmIHRpbWVyID09PSBNYXRoLmZsb29yKCRzY29wZS50aW1lRXhlcmNpc2luZyAvIDIpKSB7XHJcbiAgICAgICAgICBzb3VuZHMuc3dpdGNoLnBsYXkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwoZXhlcmNpc2luZyk7XHJcbiAgICAgICRzY29wZS50aW1lciA9ICcnO1xyXG4gICAgICAkc2NvcGUudGltZVJlbWFpbmluZyA9IDA7XHJcbiAgICAgICRzY29wZS5yZXN0ID0gZmFsc2U7XHJcbiAgICAgICRzY29wZS5leGVyY2lzZSA9IHtuYW1lOiAnJywgc3BsaXQ6IGZhbHNlfTtcclxuICAgIH1cclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG5cdC5kaXJlY3RpdmUoJ2hlYWQnLCBbXHJcblx0XHQnJHJvb3RTY29wZScsXHJcblx0XHQnJHN0YXRlJyxcclxuXHRcdCckY29tcGlsZScsXHJcblx0XHQnJGludGVycG9sYXRlJyxcclxuXHRcdGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkc3RhdGUsICRjb21waWxlLCAkaW50ZXJwb2xhdGUpIHtcclxuXHJcblx0XHRcdHZhciBnZXRTdHlsZSA9IGZ1bmN0aW9uIGdldFN0eWxlKHRlbXBsYXRlU3R5bGVVcmwpIHtcclxuXHJcblx0XHRcdFx0dmFyIHN0eWxlID0ge1xyXG5cdFx0XHRcdFx0aHJlZjogdGVtcGxhdGVTdHlsZVVybCxcclxuXHRcdFx0XHRcdHJlbDogJ3N0eWxlc2hlZXQnXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0aWYgKHN0eWxlLmhyZWYubWF0Y2goL1xcLmxlc3MkLykpIHtcclxuXHRcdFx0XHRcdHN0eWxlLnJlbCA9ICdzdHlsZXNoZWV0L2xlc3MnO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHN0eWxlO1xyXG5cclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiBnZXRTdHlsZXMoc3RhdGUpIHtcclxuXHJcblx0XHRcdFx0dmFyIHN0YXRlcyA9IHt9O1xyXG5cclxuXHRcdFx0XHQvL0NoZWNrIHN0YXRlIGZvciBzdHlsZXNcclxuXHRcdFx0XHR3aGlsZSAoc3RhdGUubmFtZSAhPT0gJycpIHtcclxuXHRcdFx0XHRcdHZhciBwYXJlbnQgPSAkc3RhdGUuZ2V0KCdeJywgc3RhdGUpO1xyXG5cclxuXHRcdFx0XHRcdC8vSW5pdGlhdGUgb3VyIHZpZXcgbGlzdFxyXG5cdFx0XHRcdFx0aWYgKCFzdGF0ZXNbcGFyZW50Lm5hbWVdKSB7XHJcblx0XHRcdFx0XHRcdHN0YXRlc1twYXJlbnQubmFtZV0gPSB7fTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvL0NoZWNrIHRoZSB0ZW1wbGF0ZVN0eWxlXHJcblx0XHRcdFx0XHRpZiAoc3RhdGUudGVtcGxhdGVTdHlsZVVybCkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIXN0YXRlc1twYXJlbnQubmFtZV1bJyddKSB7XHJcblx0XHRcdFx0XHRcdFx0c3RhdGVzW3BhcmVudC5uYW1lXVsnJ10gPSBnZXRTdHlsZShzdGF0ZS50ZW1wbGF0ZVN0eWxlVXJsKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vQ2hlY2sgdmlld3NcclxuXHRcdFx0XHRcdGlmIChzdGF0ZS52aWV3cykge1xyXG5cdFx0XHRcdFx0XHRfLmZvckVhY2goc3RhdGUudmlld3MsIGZ1bmN0aW9uICh2aWV3LCBrZXkpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly9DaGVjayBpZiB3ZSBoYXZlIGEgc3R5bGVcclxuXHRcdFx0XHRcdFx0XHRpZiAoIXZpZXcudGVtcGxhdGVTdHlsZVVybCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly9DaGVjayBpZiB3ZSBhcmUgdGFyZ2V0aW5nIHNvbWUgcGFyZW50XHJcblx0XHRcdFx0XHRcdFx0aWYgKChrZXkgPSBrZXkuc3BsaXQoJ0AnKSlbMV0pIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vQ2hlY2sgaWYgd2UgaGF2ZSBzdHlsZXMgZm9yIHRoYXQgcGFyZW50XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIXN0YXRlc1trZXlbMV1dKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlc1trZXlbMV1dID0ge307XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly9QbGFjZSB0aGUgc3R5bGUgb24gc29tZSBwYXJlbnQncyB2aWV3XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIXN0YXRlc1trZXlbMV1dW2tleVswXV0pIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGVzW2tleVsxXV1ba2V5WzBdXSA9IGdldFN0eWxlKHZpZXcudGVtcGxhdGVTdHlsZVVybCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly9QbGFjZSB0aGUgc3R5bGUgb24gb3VyIHBhcmVudCdzIHZpZXdcclxuXHRcdFx0XHRcdFx0XHRzdGF0ZXNbcGFyZW50Lm5hbWVdW2tleVswXV0gPSBnZXRTdHlsZSh2aWV3LnRlbXBsYXRlU3R5bGVVcmwpO1xyXG5cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly9Db250aW51ZSB3aXRoIHRoZSBwYXJlbnRcclxuXHRcdFx0XHRcdHN0YXRlID0gcGFyZW50O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly9GbGF0dGVuIHRoZSBsaXN0XHJcblx0XHRcdFx0dmFyIGZsYXQgPSBbXTtcclxuXHRcdFx0XHRfLmZvckVhY2goc3RhdGVzLCBmdW5jdGlvbiAodmlld3MpIHtcclxuXHJcblx0XHRcdFx0XHRfLmZvckVhY2godmlld3MsIGZ1bmN0aW9uIChzdHlsZSkge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCFfLmluY2x1ZGVzKGZsYXQsIHN0eWxlKSkge1xyXG5cdFx0XHRcdFx0XHRcdGZsYXQucHVzaChzdHlsZSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdC8vUmV2ZXJzZSBpdCBzbyB3ZSBoYXZlIGEgcHJvcGVyIGhpZXJhcmNoeVxyXG5cdFx0XHRcdGZsYXQucmV2ZXJzZSgpO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZmxhdDtcclxuXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdHJlc3RyaWN0OiAnRScsXHJcblx0XHRcdFx0bGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtKSB7XHJcblxyXG5cdFx0XHRcdFx0c2NvcGUudGVtcGxhdGVTdHlsZXMgPSBbXTtcclxuXHJcblx0XHRcdFx0XHR2YXIgaHRtbCA9ICc8bGluayBuZy1hdHRyLXJlbD1cInt7c3R5bGUucmVsfX1cIiBuZy1yZXBlYXQ9XCJzdHlsZSBpbiB0ZW1wbGF0ZVN0eWxlc1wiIG5nLWhyZWY9XCJ7e3N0eWxlLmhyZWZ9fVwiPic7XHJcblxyXG5cdFx0XHRcdFx0aHRtbCA9IGh0bWwucmVwbGFjZSgvXFx7XFx7L2csICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpKTtcclxuXHRcdFx0XHRcdGh0bWwgPSBodG1sLnJlcGxhY2UoL1xcfVxcfS9nLCAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCkpO1xyXG5cclxuXHRcdFx0XHRcdGVsZW0uYXBwZW5kKCRjb21waWxlKGh0bWwpKHNjb3BlKSk7XHJcblxyXG5cdFx0XHRcdFx0JHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JywgZnVuY3Rpb24gKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRzY29wZS50ZW1wbGF0ZVN0eWxlcyA9IGdldFN0eWxlcyh0b1N0YXRlKTtcclxuXHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH1cclxuXHRdKTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5zZXJ2aWNlKCdDYXRlZ29yaWVzU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuXHJcbiAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gIHN2Yy5nZXRDYXRlZ29yaWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9jYXRlZ29yaWVzJyk7XHJcbiAgfTtcclxuXHJcbiAgc3ZjLmdldFRhc2tzID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NhdGVnb3JpZXMvJyArIGNhdGVnb3J5KTtcclxuICB9O1xyXG5cclxuICBzdmMuYWRkQ2F0ZWdvcnkgPSBmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2NhdGVnb3JpZXMvJywgY2F0ZWdvcnkpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5hZGRUYXNrID0gZnVuY3Rpb24gKGNhdGVnb3J5LCB0YXNrKSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9jYXRlZ29yaWVzLycgKyBjYXRlZ29yeSArICcvdGFza3MnLCB0YXNrKTtcclxuICB9O1xyXG5cclxuICBzdmMuc2V0UHJpb3JpdHlMaXN0ID0gZnVuY3Rpb24obGlzdCkge1xyXG4gICAgc3ZjLmNob2ljZXMgPSBsaXN0O1xyXG4gICAgc3ZjLnByaW9yaXR5TGlzdCA9IFtdO1xyXG4gICAgLy9NYWtlIGEgbmV3IGNob2ljZSBsaXN0XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgbGlzdC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIHZhciByYW5kb20gPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkpO1xyXG4gICAgICAgIHN2Yy5wcmlvcml0eUxpc3QucHVzaCh7XHJcbiAgICAgICAgICBpZDogMCxcclxuICAgICAgICAgIGZpcnN0Q2hvaWNlOiBsaXN0W3JhbmRvbSA9PT0gMCA/IGkgOiBqXS5uYW1lLFxyXG4gICAgICAgICAgc2Vjb25kQ2hvaWNlOiBsaXN0W3JhbmRvbSA9PT0gMCA/IGogOiBpXS5uYW1lLFxyXG4gICAgICAgICAgY2hvaWNlOiAnJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBzaHVmZmxlKHN2Yy5wcmlvcml0eUxpc3QpO1xyXG4gICAgZm9yIChpIGluIHN2Yy5wcmlvcml0eUxpc3QpIHtcclxuICAgICAgc3ZjLnByaW9yaXR5TGlzdFtpXS5pZCA9IGkgKyAxO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRQcmlvcml0eUxpc3QgPSBmdW5jdGlvbihsaXN0KSB7XHJcbiAgICByZXR1cm4gc3ZjLnByaW9yaXR5TGlzdDtcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XHJcbiAgICB2YXIgbSA9IGFycmF5Lmxlbmd0aCwgdCwgaTtcclxuICAgIC8vIFdoaWxlIHRoZXJlIHJlbWFpbiBlbGVtZW50cyB0byBzaHVmZmxl4oCmXHJcbiAgICB3aGlsZSAobSkge1xyXG4gICAgICAvLyBQaWNrIGEgcmVtYWluaW5nIGVsZW1lbnTigKZcclxuICAgICAgaSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG0tLSk7XHJcbiAgICAgIC8vIEFuZCBzd2FwIGl0IHdpdGggdGhlIGN1cnJlbnQgZWxlbWVudC5cclxuICAgICAgLy9hcnJheVttXS5maXJzdENob2ljZTtcclxuICAgICAgdCA9IGFycmF5W21dO1xyXG4gICAgICBhcnJheVttXSA9IGFycmF5W2ldO1xyXG4gICAgICBhcnJheVtpXSA9IHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbiAgfVxyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnRW1haWxTdmMnLCBmdW5jdGlvbigkaHR0cCkge1xyXG5cclxuICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgc3ZjLnNlbmQgPSBmdW5jdGlvbiAoZW1haWwpIHtcclxuICAgIGNvbnNvbGUubG9nKGVtYWlsKTtcclxuICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2VtYWlsJywgZW1haWwpO1xyXG4gIH07XHJcblxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgLnNlcnZpY2UoJ0ZpbGVTdmMnLCBmdW5jdGlvbigkaHR0cCkge1xyXG5cclxuICAgIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICAgIHN2Yy5nZXRJbWFnZXMgPSBmdW5jdGlvbihmb2xkZXIpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9maWxlcy9pbWFnZXMvJyArIGZvbGRlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5nZXRTb3VuZHMgPSBmdW5jdGlvbihmb2xkZXIpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9maWxlcy9zb3VuZHMvJyArIGZvbGRlcik7XHJcbiAgICB9O1xyXG5cclxuICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLnNlcnZpY2UoJ0dhbWVTdmMnLCBmdW5jdGlvbigkaHR0cCkge1xyXG5cclxuICAgIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICAgIHN2Yy5nZXRIaWdoc2NvcmUgPSBmdW5jdGlvbiAoZ2FtZSwgdXNlcikge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2dhbWVzLycgKyBnYW1lICsgJy8nICsgdXNlciArICcvaGlnaHNjb3JlJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5zZXRIaWdoc2NvcmUgPSBmdW5jdGlvbiAoZ2FtZSwgdXNlciwgc2NvcmUpIHtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvZ2FtZXMvJyArIGdhbWUgKyAnLycgKyB1c2VyICsgJy9oaWdoc2NvcmUnLCB7XHJcbiAgICAgICAgc2NvcmU6IHNjb3JlXHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLnNlcnZpY2UoJ0xhbmd1YWdlU3ZjJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gIHZhciBzdmMgPSB0aGlzO1xyXG5cclxuICBzdmMubGFuZ3VhZ2VzID0gW1xyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJFTlwiLFxyXG4gICAgICBcIm5hbWVcIjogXCJFbmdsaXNoXCIsXHJcbiAgICAgIFwiZmxhZ1wiOiBcImZsYWctaWNvbi1nYlwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJOTFwiLFxyXG4gICAgICBcIm5hbWVcIjogXCJOZWRlcmxhbmRzXCIsXHJcbiAgICAgIFwiZmxhZ1wiOiBcImZsYWctaWNvbi1ubFwiXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcImNvZGVcIjogXCJGUlwiLFxyXG4gICAgICBcIm5hbWVcIjogXCJGcmFuw6dhaXNcIixcclxuICAgICAgXCJmbGFnXCI6IFwiZmxhZy1pY29uLWZyXCJcclxuICAgIH1cclxuICBdO1xyXG5cclxuICBzdmMudGV4dCA9IFtcclxuICAgIHtcclxuICAgICAgXCJjb2RlXCI6IFwiRU5cIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJjb2RlXCI6IFwiTkxcIlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJjb2RlXCI6IFwiRlJcIlxyXG4gICAgfVxyXG4gIF07XHJcblxyXG4gIHN2Yy5zZWxlY3RlZExhbmd1YWdlID0gc3ZjLmxhbmd1YWdlc1swXTtcclxuXHJcbiAgc3ZjLnNldExhbmd1YWdlID0gZnVuY3Rpb24gKGxhbmd1YWdlKSB7XHJcbiAgICBzdmMuc2VsZWN0ZWRMYW5ndWFnZSA9IGxhbmd1YWdlO1xyXG4gICAgcmV0dXJuIGxhbmd1YWdlO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5nZXRMYW5ndWFnZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBzdmMuc2VsZWN0ZWRMYW5ndWFnZTtcclxuICB9O1xyXG5cclxufSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbigkaHR0cCkge1xyXG5cclxuICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgc3ZjLmZldGNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpO1xyXG4gIH07XHJcblxyXG4gIHN2Yy5jcmVhdGUgPSBmdW5jdGlvbiAocG9zdCkge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLCBwb3N0KTtcclxuICB9O1xyXG5cclxuICBzdmMuZ2V0UG9zdCA9IGZ1bmN0aW9uIChwb3N0KSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzLycgKyBwb3N0Ll9pZCk7XHJcbiAgfTtcclxuXHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJykuc2VydmljZSgnVGVuVGhpbmdzU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XHJcblx0dmFyIHN2YyA9IHRoaXM7XHJcblxyXG5cdHN2Yy5nZXRRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiAkaHR0cC5nZXQoYC9ib3RzL3RlbnRoaW5ncy9xdWV1ZWApO1xyXG5cdH07XHJcblxyXG5cdHN2Yy5nZXRMaXN0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiAkaHR0cC5nZXQoYC9hcGkvdGVudGhpbmdzL2xpc3RzYCk7XHJcblx0fTtcclxuXHJcblx0c3ZjLmdldENhdGVnb3JpZXMgPSAoKSA9PiB7XHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9jYXRlZ29yaWVzYCk7XHJcblx0fTtcclxuXHJcblx0c3ZjLmdldExhbmd1YWdlcyA9ICgpID0+IHtcclxuXHRcdHJldHVybiAkaHR0cC5nZXQoYC9hcGkvdGVudGhpbmdzL2xhbmd1YWdlc2ApO1xyXG5cdH07XHJcblxyXG5cdHN2Yy5nZXRMaXN0ID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdGVudGhpbmdzL2xpc3RzLycgKyBsaXN0Ll9pZCk7XHJcblx0fTtcclxuXHJcblx0c3ZjLnNhdmVMaXN0ID0gZnVuY3Rpb24gKHVzZXIsIGxpc3QpIHtcclxuXHRcdHJldHVybiAkaHR0cC5wdXQoJy9hcGkvdGVudGhpbmdzL2xpc3RzJywge1xyXG5cdFx0XHR1c2VyOiB1c2VyLFxyXG5cdFx0XHRsaXN0OiBsaXN0LFxyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0c3ZjLnJlcG9ydExpc3QgPSBmdW5jdGlvbiAodXNlciwgbGlzdCkge1xyXG5cdFx0JGh0dHAuZ2V0KCcvYXBpL3RlbnRoaW5ncy9saXN0cy8nICsgbGlzdC5faWQgKyAnL3JlcG9ydC8nICsgdXNlci5faWQpO1xyXG5cdH07XHJcblxyXG5cdHN2Yy5kZWxldGVMaXN0ID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuXHRcdHJldHVybiAkaHR0cC5kZWxldGUoJy9hcGkvdGVudGhpbmdzL2xpc3RzLycgKyBsaXN0Ll9pZCk7XHJcblx0fTtcclxuXHJcblx0c3ZjLmdldE1vdmllUGljcyA9IGZ1bmN0aW9uIChsaXN0KSB7XHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9saXN0cy8ke2xpc3QuX2lkfS9tb3ZpZXNgKTtcclxuXHR9O1xyXG5cclxuXHRzdmMuZ2V0VFZQaWNzID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuXHRcdHJldHVybiAkaHR0cC5nZXQoYC9hcGkvdGVudGhpbmdzL2xpc3RzLyR7bGlzdC5faWR9L3R2YCk7XHJcblx0fTtcclxuXHJcblx0c3ZjLmdldEFjdG9yUGljcyA9IGZ1bmN0aW9uIChsaXN0KSB7XHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9saXN0cy8ke2xpc3QuX2lkfS9hY3RvcnNgKTtcclxuXHR9O1xyXG5cclxuXHRzdmMuZ2V0Qm9va1BpY3MgPSBmdW5jdGlvbiAobGlzdCkge1xyXG5cdFx0cmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvbGlzdHMvJHtsaXN0Ll9pZH0vYm9va3NgKTtcclxuXHR9O1xyXG5cclxuXHRzdmMuZ2V0TXVzaWNWaWRlb3MgPSBmdW5jdGlvbiAobGlzdCkge1xyXG5cdFx0cmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvbGlzdHMvJHtsaXN0Ll9pZH0vbXVzaWN2aWRlb3NgKTtcclxuXHR9O1xyXG5cclxuXHRzdmMuZ2V0UGljcyA9IGZ1bmN0aW9uIChsaXN0KSB7XHJcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3RlbnRoaW5ncy9saXN0cy8ke2xpc3QuX2lkfS9waWNzYCk7XHJcblx0fTtcclxuXHJcblx0c3ZjLmdldFBhdXNlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvcGF1c2VgKTtcclxuXHR9O1xyXG5cclxuXHRzdmMudG9nZ2xlUGF1c2UgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gJGh0dHAucG9zdChgL2FwaS90ZW50aGluZ3MvcGF1c2VgKTtcclxuXHR9O1xyXG5cclxuXHRzdmMuZ2V0R2FtZSA9IGZ1bmN0aW9uIChpZCkge1xyXG5cdFx0cmV0dXJuICRodHRwLmdldChgL2FwaS90ZW50aGluZ3MvZ2FtZS8ke2lkfWApO1xyXG5cdH07XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAuc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gICAgdmFyIHN2YyA9IHRoaXM7XHJcblxyXG4gICAgc3ZjLmdldFVzZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuZ2V0VXNlcnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy9hbGwnKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLnRvZ2dsZUJhbiA9IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvdXNlcnMvYmFuLyR7aWR9YCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5zZXRUb2tlbiA9IGZ1bmN0aW9uKHRva2VuKSB7XHJcbiAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHRva2VuO1xyXG4gICAgICByZXR1cm4gc3ZjLmdldFVzZXIoKTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmF1dGhlbnRpY2F0ZSA9IGZ1bmN0aW9uKHVzZXIpIHtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvYXV0aGVudGljYXRlJywge1xyXG4gICAgICAgIHVzZXI6IHVzZXJcclxuICAgICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW4gPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgIHJldHVybiBzdmMuc2V0VG9rZW4ocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMubG9naW4gPSBmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvJyArIHVzZXIgKyAnL2xvZ2luJylcclxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS50b2tlbiA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICByZXR1cm4gc3ZjLnNldFRva2VuKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMudXBkYXRlVXNlciA9IGZ1bmN0aW9uKHVzZXIpIHtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvJyArIHVzZXIuX2lkLCB7XHJcbiAgICAgICAgdXNlcjogdXNlclxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmNoZWNrUGFzc3dvcmQgPSBmdW5jdGlvbih1c2VyLCBwYXNzd29yZCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy8nICsgdXNlciArICcvdmVyaWZpY2F0aW9uJywge1xyXG4gICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3ZjLmNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24odXNlciwgb2xkUGFzc3dvcmQsIG5ld1Bhc3N3b3JkKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzLycgKyB1c2VyICsgJy9wYXNzd29yZCcsIHtcclxuICAgICAgICBvbGRQYXNzd29yZDogb2xkUGFzc3dvcmQsXHJcbiAgICAgICAgbmV3UGFzc3dvcmQ6IG5ld1Bhc3N3b3JkXHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMuY2hhbmdlVXNlcm5hbWUgPSBmdW5jdGlvbih1c2VyLCBuZXdVc2VybmFtZSkge1xyXG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy8nICsgdXNlciArICcvdXNlcm5hbWUnLCB7XHJcbiAgICAgICAgbmV3VXNlcm5hbWU6IG5ld1VzZXJuYW1lXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdmMubG9nb3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKTtcclxuICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gJyc7XHJcbiAgICB9O1xyXG5cclxuICAgIHN2Yy5jcmVhdGVVc2VyID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xyXG4gICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcclxuICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcclxuICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gc3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgLmNvbnRyb2xsZXIoJ1F1aXpBbmltYWxzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgRmlsZVN2Yykge1xyXG5cclxuICAgIEZpbGVTdmMuZ2V0U291bmRzKCdhbmltYWxzJylcclxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUuYW5pbWFscyA9IF8uc2h1ZmZsZShyZXNwb25zZS5kYXRhLm1hcChhbmltYWwgPT4gKHtcclxuICAgICAgICAgIHNvdW5kOiBhbmltYWwsXHJcbiAgICAgICAgICBuYW1lOiBhbmltYWwuc3Vic3RyaW5nKDAsIGFuaW1hbC5pbmRleE9mKCcuJykpLnJlcGxhY2UoJ18nLCAnICcpLmNhcGl0YWxpemUoKVxyXG4gICAgICAgIH0pKSk7XHJcbiAgICAgICAgZm9yIChsZXQgYW5pbWFsIG9mICRzY29wZS5hbmltYWxzKSB7XHJcbiAgICAgICAgICBhbmltYWwuYW5zd2VycyA9IF8uc2h1ZmZsZShbYW5pbWFsLm5hbWUsIC4uLmdldFJhbmRvbUFuaW1hbHMoYW5pbWFsLm5hbWUpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5hbmltYWxzKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLmd1ZXNzID0gKGFuaW1hbCwgZ3Vlc3MpID0+IHtcclxuICAgICAgYW5pbWFsLmd1ZXNzID0gZ3Vlc3M7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGdldFJhbmRvbUFuaW1hbHMgPSBuYW1lID0+IF8uc2h1ZmZsZSgkc2NvcGUuYW5pbWFscy5maWx0ZXIoYW5pbWFsID0+IG5hbWUgIT09IGFuaW1hbC5uYW1lKS5tYXAoYW5pbWFsID0+IGFuaW1hbC5uYW1lKSkuc2xpY2UoMCwgNSk7XHJcblxyXG4gICAgJHNjb3BlLmdldFNjb3JlID0gKCkgPT4gYCR7JHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbCA9PiBhbmltYWwubmFtZSA9PT0gYW5pbWFsLmd1ZXNzKS5sZW5ndGh9LyR7JHNjb3BlLmFuaW1hbHMubGVuZ3RofWA7XHJcblxyXG4gICAgJHNjb3BlLmlzU2NvcmVWaXNpYmxlID0gKCkgPT4gJHNjb3BlLmFuaW1hbHMuZmlsdGVyKGFuaW1hbCA9PiBhbmltYWwuZ3Vlc3MpLmxlbmd0aCA9PT0gJHNjb3BlLmFuaW1hbHMubGVuZ3RoO1xyXG4gIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29udHJvbGxlcignUXVpekdvb2dsZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBGaWxlU3ZjKSB7XHJcbiAgRmlsZVN2Yy5nZXRJbWFnZXMoJ2dvb2dsZScpXHJcbiAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICRzY29wZS5pbWFnZXMgPSByZXNwb25zZS5kYXRhO1xyXG4gIH0pO1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdRdWl6TG9nb3NDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgRmlsZVN2Yykge1xyXG4gIEZpbGVTdmMuZ2V0SW1hZ2VzKCdsb2dvcycpXHJcbiAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICRzY29wZS5pbWFnZXMgPSByZXNwb25zZS5kYXRhO1xyXG4gIH0pO1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdRdWl6TW92aWVzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIEZpbGVTdmMpIHtcclxuICBGaWxlU3ZjLmdldEltYWdlcygnbW92aWVzJylcclxuICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgJHNjb3BlLmltYWdlcyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgfSk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAuY29udHJvbGxlcignUXVpelNrZWxldG9uc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsIEZpbGVTdmMpIHtcclxuXHJcbiAgICBGaWxlU3ZjLmdldEltYWdlcygnc2tlbGV0b25zJylcclxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUuYW5pbWFscyA9IF8uc2h1ZmZsZShyZXNwb25zZS5kYXRhLm1hcChhbmltYWwgPT4gKHtcclxuICAgICAgICAgIGltYWdlOiBhbmltYWwsXHJcbiAgICAgICAgICBuYW1lOiBhbmltYWwuc3Vic3RyaW5nKDAsIGFuaW1hbC5pbmRleE9mKCcuJykpLnJlcGxhY2UoJ18nLCAnICcpLmNhcGl0YWxpemUoKVxyXG4gICAgICAgIH0pKSk7XHJcbiAgICAgICAgZm9yIChsZXQgYW5pbWFsIG9mICRzY29wZS5hbmltYWxzKSB7XHJcbiAgICAgICAgICBhbmltYWwuYW5zd2VycyA9IF8uc2h1ZmZsZShbYW5pbWFsLm5hbWUsIC4uLmdldFJhbmRvbUFuaW1hbHMoYW5pbWFsLm5hbWUpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5hbmltYWxzKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLmd1ZXNzID0gKGFuaW1hbCwgZ3Vlc3MpID0+IHtcclxuICAgICAgYW5pbWFsLmd1ZXNzID0gZ3Vlc3M7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGdldFJhbmRvbUFuaW1hbHMgPSBuYW1lID0+IF8uc2h1ZmZsZSgkc2NvcGUuYW5pbWFscy5maWx0ZXIoYW5pbWFsID0+IG5hbWUgIT09IGFuaW1hbC5uYW1lKS5tYXAoYW5pbWFsID0+IGFuaW1hbC5uYW1lKSkuc2xpY2UoMCwgMTApO1xyXG5cclxuICAgICRzY29wZS5nZXRTY29yZSA9ICgpID0+IGAkeyRzY29wZS5hbmltYWxzLmZpbHRlcihhbmltYWwgPT4gYW5pbWFsLm5hbWUgPT09IGFuaW1hbC5ndWVzcykubGVuZ3RofS8keyRzY29wZS5hbmltYWxzLmxlbmd0aH1gO1xyXG5cclxuICAgICRzY29wZS5pc1Njb3JlVmlzaWJsZSA9ICgpID0+ICRzY29wZS5hbmltYWxzLmZpbHRlcihhbmltYWwgPT4gYW5pbWFsLmd1ZXNzKS5sZW5ndGggPT09ICRzY29wZS5hbmltYWxzLmxlbmd0aDtcclxuICB9KTsiXX0=
